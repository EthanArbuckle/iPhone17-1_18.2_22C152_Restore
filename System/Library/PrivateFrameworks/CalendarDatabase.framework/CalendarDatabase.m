void _AddItemToArray(void *value, CFMutableArrayRef theArray)
{
  CFArrayAppendValue(theArray, value);
}

uint64_t CalDatabaseGetAuxilliaryDatabaseID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

BOOL isValidEntityType(int a1)
{
  BOOL result = 1;
  if ((a1 + 1) <= 0x1E)
  {
    if (((1 << (a1 + 1)) & 0x7F7FFFFC) != 0) {
      return result;
    }
    if (a1 == -1) {
      return 0;
    }
  }
  return (a1 - 100) >= 2 && a1 == 102;
}

uint64_t CalDatabaseSetInMemoryChangeTrackingID(uint64_t result, int a2)
{
  *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t CalRelationGetTypeID()
{
  return __CalRelationTypeID;
}

uint64_t CalEventGetJunkStatus(uint64_t a1)
{
  return _CalEventGetJunkStatusWhileLocked(a1, 0);
}

uint64_t _DayAndOccurrenceCountLoadHandler(uint64_t a1, CFMutableArrayRef *a2)
{
  double v4 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 0);
  int valuePtr = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  if (valuePtr)
  {
    CFDateRef v5 = CFDateCreate(0, v4);
    CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue(Mutable, @"day", v5);
    CFDictionaryAddValue(Mutable, @"occurrenceCount", v6);
    CFArrayAppendValue(*a2, Mutable);
    CFRelease(Mutable);
    CFRelease(v5);
    CFRelease(v6);
  }
  return 0;
}

uint64_t CalToManyRelationGetTypeID()
{
  return __CalToManyRelationTypeID;
}

uint64_t _CalDatabaseRollbackHook(uint64_t a1)
{
  return [*(id *)(a1 + 328) removeAllObjects];
}

uint64_t CalEventOccurrenceGetTypeID()
{
  return __CalEventOccurrenceTypeID;
}

uint64_t CalShowDeclinedEvents()
{
  id v0 = objc_alloc(MEMORY[0x1E4F57780]);
  v1 = (void *)[v0 initWithDomain:*MEMORY[0x1E4F57900]];
  uint64_t v2 = [v1 getBooleanPreference:@"ShowDeclinedEvents" defaultValue:0];

  return v2;
}

uint64_t CalAlertInviteeDeclines()
{
  return CalAlertInviteeDeclines___AlertInviteeDeclinesValue;
}

int *_CalGetPrefValue(int *result, const __CFString *a2, void (__cdecl *a3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))
{
  if (result)
  {
    CFDateRef v5 = result;
    pthread_mutex_lock(&_CalGetPrefValue___PrefLock);
    if (a3 && *v5 == -1)
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, a3, @"com.apple.mobilecal.invitationalertschanged", 0, CFNotificationSuspensionBehaviorDrop);
      CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F57900];
      CFPreferencesAppSynchronize((CFStringRef)*MEMORY[0x1E4F57900]);
    }
    else
    {
      CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F57900];
    }
    Boolean keyExistsAndHasValidFormat = 0;
    if (CFPreferencesGetAppBooleanValue(a2, v7, &keyExistsAndHasValidFormat)) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = keyExistsAndHasValidFormat == 0;
    }
    int v9 = v8;
    *CFDateRef v5 = v9;
    return (int *)pthread_mutex_unlock(&_CalGetPrefValue___PrefLock);
  }
  return result;
}

CFMutableArrayRef CalCalendarItemCopyRecurrences(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarItemCopyRecurrences(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFMutableArrayRef _CalCalendarItemCopyRecurrences(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

const void *CalDatabaseCopyOfAllStores(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFMutableArrayRef v3 = _CalDatabaseCopyOfAllStores((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalParticipantLoadIsSelfAttendee(const void *a1)
{
  CFTypeRef Owner = _CalParticipantGetOwner(a1);
  uint64_t v3 = (uint64_t)Owner;
  if (Owner && _CalCalendarItemGetEntityType((uint64_t)Owner) == 2 && _CalCalendarItemGetSelfAttendee(v3))
  {
    CPRecordGetID();
    CPRecordGetID();
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordInitializeProperty();
}

__CFArray *CalDatabaseCopyOfAllCalendarsInStoreWithOptions(CFTypeRef cf, uint64_t a2, char a3)
{
  if (a2) {
    CFNumberRef v6 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    CFNumberRef v6 = (os_unfair_lock_s *)CFRetain(cf);
  }
  CFStringRef v7 = v6;
  if (!v6) {
    return 0;
  }
  os_unfair_lock_lock(v6 + 20);
  BOOL v8 = _CalDatabaseCopyOfAllCalendarsInStoreWithOptions((uint64_t)cf, a2, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7 + 20);
  }
  os_unfair_lock_unlock(v7 + 20);
  CFRelease(v7);
  return v8;
}

CFTypeRef CalParticipantCopyOwner(const void *a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalParticipantGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalParticipantGetOwner(const void *a1)
{
  _CalEntityGetType(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

uint64_t _CalCalendarItemLoadStoreId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = CPRecordGetStore();
    if (result)
    {
      uint64_t result = _CalGetCalendarWithUID(result);
      if (result)
      {
        uint64_t result = _CalCalendarGetStoreId(result);
        if (result != -1)
        {
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v4) {
                  os_unfair_lock_assert_owner(v4 + 20);
                }
              }
            }
          }
          return CPRecordInitializeProperty();
        }
      }
    }
  }
  return result;
}

uint64_t _CalCalendarGetStoreId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void sub_1A8E843B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void CDBLoadCommonEntityFunctionalityHandlerProperty(uint64_t a1)
{
  uint64_t v3 = objc_alloc_init(CDBCommonEntityFunctionalityHandler);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
}

void _CalEventLoadSelfParticipantStatus(uint64_t a1)
{
  int valuePtr = 7;
  CFTypeRef Organizer = _CalCalendarItemGetOrganizer(a1);
  if (Organizer)
  {
    if (_CalOrganizerIsSelf((uint64_t)Organizer))
    {
      int valuePtr = 1;
    }
    else
    {
      uint64_t Calendar = _CalEventGetCalendar(a1);
      if (Calendar)
      {
        CFTypeRef Store = _CalCalendarGetStore(Calendar);
        if (Store)
        {
          if (_CalStoreGetBoolConstraintValue((uint64_t)Store, @"StatusIsAccurate", 0, 1)) {
            int valuePtr = _CalEventGetParticipationStatus(a1);
          }
        }
      }
    }
  }
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v5);
}

BOOL CalStoreAllowsCalendarAddDeleteModify(uint64_t a1)
{
  return !CalStoreGetFlag(a1, 4);
}

CFTypeRef CalDatabaseCopyDefaultCalendarForNewEventsInStore(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore(a1, 2, a2, 0);
  if (v3 || (CFTypeRef v3 = CalDatabaseCopyDefaultLocalCalendar(a1)) != 0)
  {
    if (CalCalendarGetFlag((uint64_t)v3, 2)
      || CalCalendarGetFlag((uint64_t)v3, 1)
      || (CFTypeRef v4 = CalCalendarCopyStore((uint64_t)v3)) != 0
      && (CFNumberRef v5 = v4, v6 = CalStoreAllowsEvents((uint64_t)v4), CFRelease(v5), !v6))
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

BOOL CalStoreAllowsEvents(uint64_t a1)
{
  return !CalStoreGetFlag(a1, 2);
}

BOOL CalStoreGetFlag(uint64_t a1, int a2)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL Flag = _CalStoreGetFlag(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

BOOL CalCalendarGetFlag(uint64_t a1, int a2)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return (Property & a2) != 0;
}

CFTypeRef CalEventCopyStore(uint64_t a1)
{
  CFTypeRef result = CalCalendarItemCopyCalendar(a1);
  if (result)
  {
    uint64_t v2 = result;
    CFTypeRef v3 = CalCalendarCopyStore((uint64_t)result);
    CFRelease(v2);
    return v3;
  }
  return result;
}

CFTypeRef CalCalendarItemCopyCalendar(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  CFTypeRef v3 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  CFTypeRef Calendar = _CalCalendarItemGetCalendar(a1);
  CFTypeRef v5 = Calendar;
  if (Calendar) {
    CFRetain(Calendar);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3);
  }
  os_unfair_lock_unlock(v3);
  CFRelease(v2);
  return v5;
}

CFTypeRef _CalCalendarItemGetCalendar(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

const void *CalCopyDatabaseForRecord()
{
  if (!CPRecordGetStore()) {
    return 0;
  }
  Context = (const void *)CPRecordStoreGetContext();
  v1 = Context;
  if (Context) {
    CFRetain(Context);
  }
  return v1;
}

CFTypeRef CalCalendarCopyStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Store = _CalCalendarGetStore(a1);
  CFTypeRef v4 = Store;
  if (Store) {
    CFRetain(Store);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore(uint64_t a1, int a2, uint64_t a3, char a4)
{
  if (a3)
  {
    return CalStoreCopyDelegatedAccountDefaultCalendarForNewEvents(a3);
  }
  int v9 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (a2 == 2)
  {
    objc_msgSend(*(id *)(a1 + 296), "get_defaultCalendarID");
    CFStringRef v10 = (const __CFString *)objc_claimAutoreleasedReturnValue();
    int v11 = objc_msgSend(*(id *)(a1 + 296), "get_defaultCalendarStoreUID");
  }
  else
  {
    RecordCFTypeRef Store = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v13 = RecordStore == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled) {
      BOOL v16 = Database == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16)
    {
      if (*(void *)(Database + 104))
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
    uint64_t v18 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    if (v18)
    {
      uint64_t v19 = v18;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v18)
        {
          if (*(void *)(*(void *)v18 + 104))
          {
            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20) {
              os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
      CFStringRef v10 = (const __CFString *)CPSqliteConnectionCopyValueForProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v19)
        {
          if (*(void *)(*(void *)v19 + 104))
          {
            v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21) {
              os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
      }
      int v11 = CPSqliteConnectionIntegerForProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v19)
        {
          if (*(void *)(*(void *)v19 + 104))
          {
            v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v22) {
              os_unfair_lock_assert_owner(v22 + 20);
            }
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
    else
    {
      CFStringRef v10 = 0;
      int v11 = -1;
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v9);
  }
  os_unfair_lock_unlock(v9);
  CFTypeRef v23 = 0;
  if (v11 < 1 || !v10)
  {
LABEL_44:
    if (v23) {
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  v24 = CalDatabaseCopyStoreWithUID((os_unfair_lock_s *)a1);
  if (v24)
  {
    v25 = v24;
    CFTypeRef v23 = CalDatabaseCopyCalendarWithExternalIDInStore((const void *)a1, v10, (uint64_t)v24);
    CFRelease(v25);
    goto LABEL_44;
  }
  CFTypeRef v23 = 0;
LABEL_45:
  if (v10) {
    CFTypeRef v23 = CalDatabaseCopyCalendarWithUUID((os_unfair_lock_s *)a1, v10);
  }
LABEL_47:
  if (!v23 || (a4 & 1) != 0)
  {
    if (!v23) {
      goto LABEL_57;
    }
  }
  else if ((CalCalendarCanContainEntityTypeAndStoreAllowsIt((uint64_t)v23, a2) & 1) == 0)
  {
    v26 = v23;
    goto LABEL_55;
  }
  CFTypeRef v27 = CalCalendarCopyStore((uint64_t)v23);
  if (v27)
  {
    v26 = v27;
    if (CalStoreGetType((uint64_t)v27) != 6)
    {
LABEL_56:
      CFRelease(v26);
      goto LABEL_57;
    }
    CFRelease(v23);
LABEL_55:
    CFTypeRef v23 = 0;
    goto LABEL_56;
  }
LABEL_57:
  if (v10) {
    CFRelease(v10);
  }
  return v23;
}

uint64_t CalStoreGetType(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

const void *CalDatabaseCopyStoreWithUID(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFTypeRef v3 = _CalDatabaseCopyStoreWithUID((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

const void *_CalDatabaseCopyStoreWithUID(uint64_t a1)
{
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  InstanceOfClassWithUID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
  CFTypeRef v5 = InstanceOfClassWithUID;
  if (InstanceOfClassWithUID) {
    CFRetain(InstanceOfClassWithUID);
  }
  return v5;
}

CFTypeRef CalDatabaseCopyCalendarWithUUID(os_unfair_lock_s *a1, const void *a2)
{
  CFTypeRef v2 = a2;
  if (a2)
  {
    uint64_t v4 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v6 = RecordStore == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    CFArrayRef v8 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
    if (v8)
    {
      CFArrayRef v9 = v8;
      if (CFArrayGetCount(v8) < 1)
      {
        CFTypeRef v2 = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
        CFTypeRef v2 = CFRetain(ValueAtIndex);
      }
      CFRelease(v9);
    }
    else
    {
      CFTypeRef v2 = 0;
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v4);
    }
    os_unfair_lock_unlock(v4);
  }
  return v2;
}

CFTypeRef CalDatabaseCopyCalendarWithExternalIDInStore(const void *a1, const __CFString *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  CFArrayRef v4 = a3 ? CalStoreCopyCalendars(a3) : CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, 0, 0);
  CFArrayRef v5 = v4;
  if (!v4) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v4);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; i != v7; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      CFStringRef v10 = (const __CFString *)CalCalendarCopyExternalID((uint64_t)ValueAtIndex);
      if (v10)
      {
        CFStringRef v11 = v10;
        if (CFStringCompare(v10, a2, 0))
        {
          CFRelease(v11);
        }
        else
        {
          CFTypeRef v12 = CFRetain(ValueAtIndex);
          CFRelease(v11);
          if (v12) {
            goto LABEL_14;
          }
        }
      }
    }
  }
  CFTypeRef v12 = 0;
LABEL_14:
  CFRelease(v5);
  return v12;
}

uint64_t CalCalendarCopyExternalID(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFMutableArrayRef CalStoreCopyCalendars(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalStoreCopyCalendars(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFTypeRef CalLocationCopyOwner(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalLocationGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalLocationGetOwner(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (!Property || (uint64_t v4 = Property, !CalRelationGetRelatedObject(Property)))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFArrayRef v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5) {
            os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
    uint64_t v6 = CPRecordGetProperty();
    if (!v6 || (uint64_t v4 = v6, !CalRelationGetRelatedObject(v6)))
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFIndex v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      uint64_t v8 = CPRecordGetProperty();
      if (!v8 || (uint64_t v4 = v8, !CalRelationGetRelatedObject(v8)))
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              CFArrayRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v9) {
                os_unfair_lock_assert_owner(v9 + 20);
              }
            }
          }
        }
        uint64_t v10 = CPRecordGetProperty();
        if (!v10 || (uint64_t v4 = v10, !CalRelationGetRelatedObject(v10)))
        {
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v11) {
                  os_unfair_lock_assert_owner(v11 + 20);
                }
              }
            }
          }
          uint64_t v12 = CPRecordGetProperty();
          if (!v12) {
            return 0;
          }
          uint64_t v4 = v12;
          if (!CalRelationGetRelatedObject(v12)) {
            return 0;
          }
        }
      }
    }
  }
  return CalRelationGetRelatedObject(v4);
}

__CFArray *_CalDatabaseCopyEventOccurrencesInDateRangeInternal(os_unfair_lock_s *a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7)
{
  id v11 = a3;
  id v12 = a4;
  id v102 = a5;
  id v13 = a7;
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"DisableOccurrenceCache", (CFStringRef)*MEMORY[0x1E4F1D3D8], &keyExistsAndHasValidFormat);
  id v96 = v11;
  v100 = v12;
  id v101 = v13;
  if (keyExistsAndHasValidFormat && AppBooleanValue) {
    goto LABEL_24;
  }
  uint64_t v15 = CalDatabaseCopyEventOccurrenceCache(a1);
  if (!v15) {
    goto LABEL_24;
  }
  BOOL v16 = (const void *)v15;
  v17 = (unsigned int (**)(id, uint64_t))v13;
  int v18 = v17 ? 0 : a6;
  CFArrayRef v19 = (const __CFArray *)CalEventOccurrenceCacheCopyEventOccurrencesInDateRangeWithLimit((uint64_t)v16, (uint64_t)a2, v11, v12, v102, 0, v18, 0);
  if (v19)
  {
    CFArrayRef v20 = v19;
    v97 = v16;
    CFIndex Count = CFArrayGetCount(v19);
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFIndex v23 = Count - 1;
    if (Count >= 1)
    {
      CFIndex v24 = 0;
      int v25 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v20, v24);
        uint64_t v27 = ValueAtIndex[2];
        if (CalEventIsDisplayable(v27) && (!v17 || v17[2](v17, v27)))
        {
          CFArrayAppendValue(Mutable, ValueAtIndex);
          ++v25;
        }
        BOOL v28 = v25 != a6 || a6 <= 0;
        if (!v28) {
          break;
        }
        BOOL v56 = v23 == v24++;
      }
      while (!v56);
    }
    CFRelease(v20);
    BOOL v16 = v97;
    id v12 = v100;
    id v13 = v101;
  }
  else
  {
    Mutable = 0;
  }

  CFRelease(v16);
  if (!Mutable)
  {
LABEL_24:
    v29 = [MEMORY[0x1E4F1C9A8] CalGregorianGMTCalendar];
    v30 = [v29 timeZone];
    v31 = [v11 dateInTimeZone:v30 fromTimeZone:v102];

    v32 = [v29 timeZone];
    v33 = [v12 dateInTimeZone:v32 fromTimeZone:v102];

    [v11 timeIntervalSinceReferenceDate];
    CFStringRef cf = (const __CFString *)CalCFTimeZoneCopyCalTimeZone();
    v34 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
    {
      if (Database)
      {
        if (*(void *)(Database + 104))
        {
          v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v38) {
            os_unfair_lock_assert_owner(v38 + 20);
          }
        }
      }
    }
    uint64_t v39 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    uint64_t v40 = v39;
    if (CDBLockingAssertionsEnabled)
    {
      if (v39)
      {
        if (*(void *)v39)
        {
          if (*(void *)(*(void *)v39 + 104))
          {
            v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v41) {
              os_unfair_lock_assert_owner(v41 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionBegin();
    [v11 timeIntervalSinceReferenceDate];
    [v12 timeIntervalSinceReferenceDate];
    v94 = v31;
    [v31 timeIntervalSinceReferenceDate];
    v93 = v33;
    [v33 timeIntervalSinceReferenceDate];
    CFArrayRef v42 = (const __CFArray *)_CalDatabaseCopyNonRecurringEventsInDateRange((uint64_t)a1, v40, a2);
    if (CDBLockingAssertionsEnabled)
    {
      if (v40)
      {
        if (*(void *)v40)
        {
          if (*(void *)(*(void *)v40 + 104))
          {
            v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v43) {
              os_unfair_lock_assert_owner(v43 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionRollback();
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v34);
    }
    os_unfair_lock_unlock(v34);
    v90 = v29;
    os_unfair_lock_t lock = a1 + 20;
    if (!v42)
    {
      Mutable = 0;
      int v47 = 0;
      goto LABEL_65;
    }
    CFIndex v44 = CFArrayGetCount(v42);
    if (v44 < 1)
    {
      Mutable = 0;
      int v47 = 0;
      goto LABEL_64;
    }
    CFIndex v45 = v44;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFIndex v46 = 0;
    int v47 = 0;
    while (1)
    {
      v48 = CFArrayGetValueAtIndex(v42, v46);
      if (CalEventIsDisplayable((uint64_t)v48)
        && (!v13 || (*((unsigned int (**)(id, const void *))v13 + 2))(v13, v48)))
      {
        CalEventCopyStartDate((uint64_t)v48);
        CalDateTimeGetAbsoluteTime();
        v50 = (const void *)CalEventOccurrenceCreate(v48, v102, v49);
        if (v50)
        {
          v51 = v50;
          CFArrayAppendValue(Mutable, v50);
          CFRelease(v51);
          ++v47;
        }
        CalDateTimeRelease();
        if (a6 < 1)
        {
          id v13 = v101;
        }
        else
        {
          id v13 = v101;
          if (v47 == a6)
          {
            int v47 = a6;
LABEL_63:
            id v11 = v96;
LABEL_64:
            CFRelease(v42);
LABEL_65:
            id v12 = v100;
            v53 = v93;
            v52 = v94;
            CFStringRef v54 = cf;
            if (a6 >= 1 && v47 >= a6) {
              goto LABEL_123;
            }
            os_unfair_lock_lock(lock);
            uint64_t v55 = _CalDatabaseGetRecordStore((uint64_t)a1);
            if (CDBLockingAssertionsEnabled) {
              BOOL v56 = v55 == 0;
            }
            else {
              BOOL v56 = 1;
            }
            if (!v56)
            {
              v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v57) {
                os_unfair_lock_assert_owner(v57 + 20);
              }
            }
            uint64_t v58 = CPRecordStoreGetDatabase();
            if (CDBLockingAssertionsEnabled) {
              BOOL v59 = v58 == 0;
            }
            else {
              BOOL v59 = 1;
            }
            if (!v59)
            {
              if (*(void *)(v58 + 104))
              {
                v60 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v60) {
                  os_unfair_lock_assert_owner(v60 + 20);
                }
              }
            }
            uint64_t v61 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
            uint64_t v62 = v61;
            if (CDBLockingAssertionsEnabled)
            {
              if (v61)
              {
                if (*(void *)v61)
                {
                  if (*(void *)(*(void *)v61 + 104))
                  {
                    v63 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v63) {
                      os_unfair_lock_assert_owner(v63 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteConnectionBegin();
            [v11 timeIntervalSinceReferenceDate];
            double v65 = v64;
            [v100 timeIntervalSinceReferenceDate];
            double v67 = v66;
            [v94 timeIntervalSinceReferenceDate];
            double v69 = v68;
            [v93 timeIntervalSinceReferenceDate];
            CFArrayRef theArraya = (const __CFArray *)_CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange((uint64_t)a1, a2, cf, v65, v67, v69, v70);
            if (CDBLockingAssertionsEnabled)
            {
              if (v62)
              {
                if (*(void *)v62)
                {
                  if (*(void *)(*(void *)v62 + 104))
                  {
                    v71 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v71) {
                      os_unfair_lock_assert_owner(v71 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteConnectionRollback();
            if (CDBLockingAssertionsEnabled) {
              os_unfair_lock_assert_owner(lock);
            }
            os_unfair_lock_unlock(lock);
            CFArrayRef v72 = theArraya;
            if (theArraya)
            {
              CFIndex v73 = CFArrayGetCount(theArraya);
              if (v73 >= 1)
              {
                CFIndex v74 = v73;
                for (CFIndex i = 0; i != v74; ++i)
                {
                  v76 = CFArrayGetValueAtIndex(v72, i);
                  if (CalEventIsDisplayable((uint64_t)v76)
                    && (!v13 || (*((unsigned int (**)(id, const void *))v13 + 2))(v13, v76)))
                  {
                    v77 = CalEventCopyOccurrenceDatesInDateRange((uint64_t)v76, v11, v100, v102);
                    if (v77)
                    {
                      CFArrayRef v78 = v77;
                      CFIndex v79 = CFArrayGetCount(v77);
                      if (v79 >= 1)
                      {
                        CFIndex v80 = v79;
                        uint64_t v81 = 1;
                        do
                        {
                          v82 = CFArrayGetValueAtIndex(v78, v81 - 1);
                          double v83 = MEMORY[0x1AD0E87A0](v82);
                          uint64_t v84 = CalEventOccurrenceCreate(v76, v102, v83);
                          if (v84)
                          {
                            v85 = (const void *)v84;
                            if (!Mutable) {
                              Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
                            }
                            CFArrayAppendValue(Mutable, v85);
                            CFRelease(v85);
                            ++v47;
                          }
                          if (v47 == a6 && a6 >= 1) {
                            break;
                          }
                          BOOL v28 = v81++ < v80;
                        }
                        while (v28);
                      }
                      CFRelease(v78);
                      id v11 = v96;
                      id v13 = v101;
                    }
                    CFArrayRef v72 = theArraya;
                  }
                  if (v47 == a6 && a6 > 0) {
                    break;
                  }
                }
              }
              CFRelease(v72);
              id v12 = v100;
              v88 = v90;
              v53 = v93;
              v52 = v94;
              CFStringRef v54 = cf;
              if (!cf)
              {
LABEL_125:

                break;
              }
            }
            else
            {
LABEL_123:
              v88 = v90;
              if (!cf) {
                goto LABEL_125;
              }
            }
            CFRelease(v54);
            goto LABEL_125;
          }
        }
      }
      if (v45 == ++v46) {
        goto LABEL_63;
      }
    }
  }

  return Mutable;
}

uint64_t CalEventIsDisplayable(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t IsDisplayable = _CalEventIsDisplayable(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsDisplayable;
}

uint64_t _CalEventIsDisplayable(uint64_t a1)
{
  if (_CalEventIsHidden(a1)) {
    return 0;
  }
  if (_CalCalendarItemGetStatus(a1) == 3)
  {
    CFTypeRef Organizer = _CalCalendarItemGetOrganizer(a1);
    if (Organizer)
    {
      if (_CalOrganizerIsSelf((uint64_t)Organizer)) {
        return 0;
      }
    }
  }
  if (_CalEventGetParticipationStatus(a1) == 2
    && (!CalShowDeclinedEvents()
     || (uint64_t Calendar = _CalEventGetCalendar(a1)) != 0
     && (CFTypeRef Store = _CalCalendarGetStore(Calendar)) != 0
     && _CalStoreGetType((uint64_t)Store) == 1)
    && _CalEventGetProposedStartDate(a1) == *MEMORY[0x1E4F57888])
  {
    return 0;
  }
  if ((CalShowCompletedReminders() & 1) == 0)
  {
    if (_CalCalendarItemGetIsCompleted(a1))
    {
      BOOL IsReminderIntegrationEvent = _CalEventIsReminderIntegrationEvent(a1);
      if (IsReminderIntegrationEvent) {
        return !IsReminderIntegrationEvent;
      }
    }
  }
  uint64_t v7 = _CalEventGetCalendar(a1);
  if (!v7) {
    return 1;
  }
  uint64_t v8 = v7;
  uint64_t result = _CalCalendarCanContainEntityType(v7, 2);
  if (result)
  {
    BOOL IsReminderIntegrationEvent = _CalCalendarIsHidden(v8);
    return !IsReminderIntegrationEvent;
  }
  return result;
}

uint64_t _CalGetCalendarWithUID(uint64_t result)
{
  if (result)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    return CPRecordStoreGetInstanceOfClassWithUID();
  }
  return result;
}

uint64_t CalEventGetParticipationStatus(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ParticipationStatus = _CalEventGetParticipationStatus(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ParticipationStatus;
}

uint64_t _CalEventGetParticipationStatus(uint64_t a1)
{
  CFTypeRef SelfAttendee = _CalCalendarItemGetSelfAttendee(a1);
  if (SelfAttendee)
  {
    return _CalRecurrenceGetWeekStartRaw((uint64_t)SelfAttendee);
  }
  else if (_CalCalendarItemIsInvite(a1))
  {
    return 1;
  }
  else
  {
    return 7;
  }
}

CFTypeRef _CalCalendarItemGetSelfAttendee(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

BOOL _CalCalendarItemIsInvite(uint64_t a1)
{
  CFTypeRef Organizer = _CalCalendarItemGetOrganizer(a1);
  if (!Organizer || _CalOrganizerIsSelf((uint64_t)Organizer)) {
    return 0;
  }
  return CalCalendarItemHasAttendees(a1, 0);
}

CFTypeRef _CalCalendarItemGetOrganizer(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

BOOL _CalEventIsHidden(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalEventGetCalendar(uint64_t a1)
{
  _CalEventGetCalendarId(a1);
  uint64_t Store = CPRecordGetStore();
  return _CalGetCalendarWithUID(Store);
}

uint64_t _CalEventGetCalendarId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalCalendarItemGetStatus(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalShowCompletedReminders()
{
  id v0 = objc_alloc(MEMORY[0x1E4F57780]);
  v1 = (void *)[v0 initWithDomain:*MEMORY[0x1E4F57900]];
  uint64_t v2 = [v1 getBooleanPreference:@"ShowCompletedReminders" defaultValue:1];

  return v2;
}

void CalDatabaseSetClientName(uint64_t a1, const void *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  CFArrayRef v5 = *(const void **)(a1 + 152);
  if (v5 != a2)
  {
    if (v5) {
      CFRelease(v5);
    }
    if (a2) {
      CFTypeRef v6 = CFRetain(a2);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(a1 + 152) = v6;
  }
  uint64_t v7 = objc_msgSend(*(id *)(a1 + 296), "get_sqlProfileLoggingEnabled");
  int v8 = ct_green_tea_logging_enabled();
  CalDatabaseSetProfilingEnabled(a1, v7, v8, 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
}

void CalDatabaseSetProfilingEnabled(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a1)
  {
    if (a4) {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    }
    if (CDBLockingAssertionsEnabled) {
      BOOL v7 = *(void *)(a1 + 24) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (a3) {
      CalDatabaseCopyClientName(a1, 0);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (Database)
      {
        if (*(void *)(Database + 104))
        {
          uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseSetProfileCallbackWithContext();
    if (a4)
    {
      CalDatabaseUnlockForThread((const os_unfair_lock *)a1);
    }
  }
  else
  {
    id v11 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_1A8E81000, v11, OS_LOG_TYPE_ERROR, "No 'database' given.  Will not adjust profile logging.", v12, 2u);
    }
  }
}

BOOL _CalCalendarIsHidden(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 2);
}

BOOL _CalStoreAllowsEvents(uint64_t a1)
{
  return !_CalStoreGetFlag(a1, 2);
}

BOOL _CalStoreGetFlag(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return (CPRecordGetProperty() & a2) != 0;
}

__CFArray *_CalDatabaseCopyOfAllCalendarsInStoreWithOptions(uint64_t a1, uint64_t a2, char a3)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (a2)
  {
    BOOL v7 = _CalStoreCopyCalendars(a2);
  }
  else
  {
    BOOL v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v8 = (const __CFArray *)_CalDatabaseCopyOfAllStores(a1);
    if (v8)
    {
      CFArrayRef v9 = v8;
      CFIndex Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        CFIndex v11 = Count;
        for (CFIndex i = 0; i != v11; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
          uint64_t v14 = (uint64_t)ValueAtIndex;
          if (((a3 & 8) == 0 || _CalStoreGetType((uint64_t)ValueAtIndex) != 6)
            && ((a3 & 2) == 0 || _CalStoreIsEnabled(v14)))
          {
            CFArrayRef v15 = _CalStoreCopyCalendars(v14);
            if (v15)
            {
              CFArrayRef v16 = v15;
              v27.length = CFArrayGetCount(v15);
              v27.location = 0;
              CFArrayAppendArray(v7, v16, v27);
              CFRelease(v16);
            }
          }
        }
      }
      CFRelease(v9);
    }
  }
  if (v7)
  {
    CFIndex v17 = CFArrayGetCount(v7);
    if (v17 >= 1)
    {
      CFIndex v18 = v17;
      for (CFIndex j = 0; v18 != j; ++j)
      {
        CFArrayRef v20 = CFArrayGetValueAtIndex(v7, j);
        v21 = v20;
        if ((a3 & 2) != 0)
        {
          CFTypeRef Store = _CalCalendarGetStore((uint64_t)v20);
          if (Store) {
            BOOL IsEnabled = _CalStoreIsEnabled((uint64_t)Store);
          }
          else {
            BOOL IsEnabled = 0;
          }
          int v22 = IsEnabled & !_CalCalendarGetFlag((uint64_t)v21, 2);
          if (a3) {
LABEL_24:
          }
            v22 &= !_CalCalendarGetFlag((uint64_t)v21, 1);
        }
        else
        {
          int v22 = 1;
          if (a3) {
            goto LABEL_24;
          }
        }
        if ((a3 & 4) != 0)
        {
          if (!_CalCalendarGetFlag((uint64_t)v21, 128)) {
            continue;
          }
          char v25 = _CalCalendarGetSharingInvitationResponse((uint64_t)v21) ? 0 : v22;
          if ((v25 & 1) == 0) {
            continue;
          }
        }
        else if (!v22)
        {
          continue;
        }
        CFArrayAppendValue(Mutable, v21);
      }
    }
    CFRelease(v7);
  }
  return Mutable;
}

CFTypeRef CalRelationGetRelatedObject(uint64_t a1)
{
  _EnsureLoaded_0(a1);
  return CalRelationRawGetRelatedObject(a1);
}

void _EnsureLoaded(uint64_t a1)
{
  if (*(void *)(a1 + 80)) {
    return;
  }
  if (CPRecordGetID() == -1 || (CFArrayRef v2 = *(const __CFArray **)(a1 + 32)) == 0 || CFArrayGetCount(v2) <= 0)
  {
    *(void *)(a1 + 80) = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
    goto LABEL_37;
  }
  CFIndex v3 = 0;
  MutableCopy = 0;
  BOOL v28 = v31;
  do
  {
    int valuePtr = -1;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v3);
    CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 80);
    if (*(_UNKNOWN **)(v6 + 40 * valuePtr + 16) != &kCalRelationMethods)
    {
      uint64_t v26 = *(void *)CPRecordGetPropertyDescriptor();
      uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 56) + 80) + 40 * valuePtr);
LABEL_8:
      CFLog();
      goto LABEL_30;
    }
    BOOL v7 = *(int **)(v6 + 40 * valuePtr + 32);
    if (!v7) {
      goto LABEL_8;
    }
    int v8 = *v7;
    if (v8 == -1) {
      _EnsureLoaded_cold_1();
    }
    uint64_t v9 = *(void *)(v6 + 40 * v8);
    uint64_t v10 = *(void *)(a1 + 40);
    int v11 = *(_DWORD *)(a1 + 48);
    if (v10)
    {
      if (v11 == -1) {
        CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"WHERE %s = ? AND (%@)", v9, v10, v27, v28, v29, v30);
      }
      else {
        CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"WHERE %s = ? AND entity_type = ? AND (%@)", v9, v10, v27, v28, v29, v30);
      }
    }
    else if (v11 == -1)
    {
      CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"WHERE %s = ?", v9, v26, v27, v28, v29, v30);
    }
    else
    {
      CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"WHERE %s = ? AND entity_type = ?", v9, v26, v27, v28, v29, v30);
    }
    CFStringRef v13 = v12;
    uint64_t Store = CPRecordGetStore();
    if (CDBLockingAssertionsEnabled)
    {
      if (Store)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    uint64_t v29 = MEMORY[0x1E4F143A8];
    uint64_t v30 = 3221225472;
    v31[0] = ___EnsureLoaded_block_invoke;
    v31[1] = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
    v31[2] = a1;
    CFArrayRef v16 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
    CFArrayRef v17 = v16;
    if (!MutableCopy && v16)
    {
      CFIndex Count = CFArrayGetCount(v16);
      MutableCopy = CFArrayCreateMutableCopy(0, Count, v17);
LABEL_28:
      CFRelease(v17);
      goto LABEL_29;
    }
    if (v16)
    {
      v33.length = CFArrayGetCount(v16);
      v33.location = 0;
      CFArrayAppendArray(MutableCopy, v17, v33);
      goto LABEL_28;
    }
LABEL_29:
    CFRelease(v13);
LABEL_30:
    ++v3;
  }
  while (CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) > v3);
  *(void *)(a1 + 80) = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
  if (MutableCopy)
  {
    CFIndex v19 = CFArrayGetCount(MutableCopy);
    if (v19 >= 1)
    {
      CFIndex v20 = v19;
      for (CFIndex i = 0; i != v20; ++i)
      {
        int v22 = *(__CFSet **)(a1 + 80);
        CFIndex v23 = CFArrayGetValueAtIndex(MutableCopy, i);
        CFSetAddValue(v22, v23);
      }
    }
    CFRelease(MutableCopy);
  }
LABEL_37:
  CFSetRef v24 = *(const __CFSet **)(a1 + 88);
  if (v24) {
    CFSetApplyFunction(v24, (CFSetApplierFunction)_AddItemToSet, *(void **)(a1 + 80));
  }
  CFSetRef v25 = *(const __CFSet **)(a1 + 96);
  if (v25) {
    CFSetApplyFunction(v25, (CFSetApplierFunction)_RemoveItemFromSet, *(void **)(a1 + 80));
  }
}

void _EnsureLoaded_0(uint64_t a1)
{
  if (!CalRelationRawGetRelatedObject(a1))
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v2 = *(void *)(a1 + 16) == 0;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    if ((int)CPRecordGetProperty() >= 1)
    {
      uint64_t Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled) {
        BOOL v5 = Store == 0;
      }
      else {
        BOOL v5 = 1;
      }
      if (!v5)
      {
        uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
      InstanceOfClassWithUID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
      if (InstanceOfClassWithUID)
      {
        CalRelationSetAndLoadRawRelatedObject(a1, InstanceOfClassWithUID);
      }
    }
  }
}

CFTypeRef CalRelationRawGetRelatedObject(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = (pthread_mutex_t *)(a1 + 72);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
    CFIndex v3 = *(const void **)(a1 + 56);
    if (v3)
    {
      CFTypeRef v4 = CFRetain(v3);
      CFTypeRef v5 = CFAutorelease(v4);
    }
    else
    {
      CFTypeRef v5 = 0;
    }
    pthread_mutex_unlock(v2);
  }
  else
  {
    uint64_t v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "Given 'relation' is NULL.  Will not get related object reference.", v8, 2u);
    }
    return 0;
  }
  return v5;
}

BOOL _CalStoreIsEnabled(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() == 0;
}

CFTypeRef _CalCalendarGetStore(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

BOOL _CalCalendarGetFlag(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return (CPRecordGetProperty() & a2) != 0;
}

CFMutableArrayRef CalToManyRelationCopyObjects(uint64_t a1)
{
  _EnsureLoaded(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (Mutable) {
    CFSetApplyFunction(*(CFSetRef *)(a1 + 80), (CFSetApplierFunction)_AddItemToArray, Mutable);
  }
  return Mutable;
}

CFMutableArrayRef _CalStoreCopyCalendars(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

const void *_CalDatabaseCopyOfAllStores(uint64_t a1)
{
  v1 = *(const void **)(a1 + 96);
  if (v1) {
    goto LABEL_9;
  }
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled && RecordStore != 0)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  v1 = (const void *)CPRecordStoreCopyAllInstancesOfClass();
  *(void *)(a1 + 96) = v1;
  if (v1) {
LABEL_9:
  }
    CFRetain(v1);
  return v1;
}

void CalRelationSetAndLoadRawRelatedObject(uint64_t a1, const void *a2)
{
  CalRelationRawSetRelatedObject(a1, a2);
  if (!*(unsigned char *)(a1 + 40))
  {
    CDBGetCommonEntityFunctionalityHandler(a2, 1, 0);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [v4 addDestructionObserver:a1];
  }
}

void CalRelationRawSetRelatedObject(uint64_t a1, CFTypeRef a2)
{
  if (a1)
  {
    id v4 = (pthread_mutex_t *)(a1 + 72);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
    CFTypeRef v5 = *(CFTypeRef *)(a1 + 56);
    if (v5 != a2)
    {
      if (*(unsigned char *)(a1 + 40))
      {
        if (a2) {
          a2 = CFRetain(a2);
        }
        if (v5) {
          CFRelease(v5);
        }
      }
      *(void *)(a1 + 56) = a2;
    }
    pthread_mutex_unlock(v4);
  }
  else
  {
    uint64_t v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v7 = 0;
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "Given 'relation' is NULL.  Will not set related object reference.", v7, 2u);
    }
  }
}

uint64_t _CalCalendarCanContainEntityType(uint64_t a1, int a2)
{
  BOOL v2 = a2 == 2;
  BOOL v3 = a2 == 3;
  if ((a2 & 0xFFFFFFFE) != 2) {
    return 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  unsigned int v6 = Property == 4 && v2;
  if (Property == 8) {
    unsigned int v6 = v3;
  }
  if (Property) {
    return v6;
  }
  else {
    return 1;
  }
}

id CDBGetCommonEntityFunctionalityHandler(const void *a1, int a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a3)
    {
      RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
      os_unfair_lock_lock(RecordLock);
    }
    else
    {
      RecordLock = 0;
    }
    uint64_t RawType = CalEntityGetRawType(a1);
    uint64_t v10 = RawType;
    if ((int)RawType <= 99)
    {
      switch((int)RawType)
      {
        case -1:
          CFArrayRef v15 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v19) = 0;
            _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_ERROR, "Could not find the raw type of the given entity.  Will not get a common entity functionality handler property ID.", (uint8_t *)&v19, 2u);
          }
          goto LABEL_19;
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
          goto LABEL_20;
        default:
          goto LABEL_13;
      }
    }
    if (RawType == 100 || RawType == 101 || RawType == 102)
    {
LABEL_20:
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
        int Property = (void *)CPRecordGetProperty();
      }
      else
      {
        int Property = (void *)CPRecordGetCachedProperty();
      }
      id v8 = Property;
    }
    else
    {
LABEL_13:
      int v11 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v12 = NSNumber;
        CFStringRef v13 = v11;
        uint64_t v14 = [v12 numberWithInt:v10];
        int v19 = 138412290;
        CFIndex v20 = v14;
        _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Could not find the property ID for the entity with raw type [%@].  Will not get a common entity functionality handler.", (uint8_t *)&v19, 0xCu);
      }
LABEL_19:
      id v8 = 0;
    }
    if (a3)
    {
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(RecordLock);
      }
      os_unfair_lock_unlock(RecordLock);
    }
  }
  else
  {
    BOOL v7 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v19) = 0;
      _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_ERROR, "NULL 'entity' given.  Will not acquire a common entity functionality handler.", (uint8_t *)&v19, 2u);
    }
    id v8 = 0;
  }
  return v8;
}

uint64_t CalDatabaseCopyEventOccurrenceCache(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = _CalDatabaseCopyEventOccurrenceCache((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalDatabaseCopyEventOccurrenceCache(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    CFRetain(*(CFTypeRef *)(a1 + 32));
  }
  return v1;
}

uint64_t CalEventOccurrenceCacheCopyEventOccurrencesInDateRangeWithLimit(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6, int a7, void *a8)
{
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = v15;
  id v19 = v16;
  id v20 = v17;
  uint64_t v24 = 0;
  CFSetRef v25 = &v24;
  uint64_t v26 = 0x2020000000;
  uint64_t v27 = 0;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = ___CalEventOccurrenceCacheCopyEventOccurrencesInDateRange_block_invoke;
  v23[3] = &unk_1E5D6BD20;
  v23[4] = &v24;
  _CalEventOccurrenceCacheProcessEventOccurrencesInDateRange(a1, a2, v18, v19, v20, a6, a7, 0, a8, v23);
  uint64_t v21 = v25[3];
  _Block_object_dispose(&v24, 8);

  return v21;
}

void sub_1A8E8798C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _CalEventOccurrenceCacheProcessEventOccurrencesInDateRange(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6, int a7, int a8, void *a9, void *a10)
{
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a10;
  uint64_t v75 = 0;
  v76 = &v75;
  uint64_t v77 = 0x2020000000;
  uint64_t v78 = 0;
  v74[0] = 0;
  v74[1] = v74;
  v74[2] = 0x2020000000;
  v74[3] = 0;
  uint64_t v70 = 0;
  v71 = &v70;
  uint64_t v72 = 0x2020000000;
  uint64_t v73 = 0;
  v68[0] = 0;
  v68[1] = v68;
  v68[2] = 0x3032000000;
  v68[3] = __Block_byref_object_copy__2;
  v68[4] = __Block_byref_object_dispose__2;
  id v69 = 0;
  uint64_t v62 = 0;
  v63 = &v62;
  uint64_t v64 = 0x3032000000;
  double v65 = __Block_byref_object_copy__2;
  double v66 = __Block_byref_object_dispose__2;
  id v67 = 0;
  context = (void *)MEMORY[0x1AD0E9B90]();
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 3221225472;
  v46[2] = ___CalEventOccurrenceCacheProcessEventOccurrencesInDateRange_block_invoke;
  v46[3] = &unk_1E5D6BD48;
  BOOL v60 = a9 != 0;
  uint64_t v56 = a1;
  v51 = &v62;
  char v61 = a6;
  id v35 = v15;
  id v47 = v35;
  id v34 = v16;
  id v48 = v34;
  id v33 = v17;
  id v49 = v33;
  id v19 = (void (**)(void))v18;
  int v58 = a7;
  int v20 = a8;
  int v59 = a8;
  id v50 = v19;
  v52 = v74;
  v53 = &v75;
  CFStringRef v54 = v68;
  uint64_t v57 = a2;
  uint64_t v55 = &v70;
  _CalEventOccurrenceCachePerformWithLock(a1, v46);
  if (v71[3])
  {
    v19[2](v19);
    CFRelease((CFTypeRef)v71[3]);
  }

  if (a9) {
    *a9 = (id) v63[5];
  }
  uint64_t v21 = v76;
  if (a8)
  {
    CFArrayRef v22 = (const __CFArray *)v76[3];
    if (v22)
    {
      CFIndex Count = CFArrayGetCount(v22);
      CFIndex v24 = v20;
      while (v24 < Count)
      {
        CFSetRef v25 = (void *)MEMORY[0x1AD0E9B90]();
        CalDatabaseReset(*(os_unfair_lock_s **)(a1 + 24));
        v36[0] = MEMORY[0x1E4F143A8];
        v36[1] = 3221225472;
        v36[2] = ___CalEventOccurrenceCacheProcessEventOccurrencesInDateRange_block_invoke_440;
        v36[3] = &unk_1E5D6BD70;
        uint64_t v40 = &v70;
        v41 = &v75;
        uint64_t v43 = a1;
        CFIndex v44 = v24;
        int v45 = v20;
        id v37 = v35;
        id v38 = v34;
        CFArrayRef v42 = v68;
        id v39 = v33;
        _CalEventOccurrenceCachePerformWithLock(a1, v36);
        if (v71[3])
        {
          v19[2](v19);
          CFRelease((CFTypeRef)v71[3]);
        }
        v24 += v20;
      }
      uint64_t v21 = v76;
    }
  }
  CFArrayRef v26 = (const __CFArray *)v21[3];
  if (v26)
  {
    CFIndex v27 = CFArrayGetCount(v26);
    if (v27 >= 1)
    {
      for (CFIndex i = 0; i != v27; ++i)
      {
        CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v76[3], i);
        free(ValueAtIndex);
      }
    }
    CFRelease((CFTypeRef)v76[3]);
  }
  _Block_object_dispose(&v62, 8);

  _Block_object_dispose(v68, 8);
  _Block_object_dispose(&v70, 8);
  _Block_object_dispose(v74, 8);
  _Block_object_dispose(&v75, 8);
}

void sub_1A8E87DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose((const void *)(v46 - 248), 8);
  _Block_object_dispose((const void *)(v46 - 200), 8);
  _Block_object_dispose((const void *)(v46 - 168), 8);
  _Block_object_dispose((const void *)(v46 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t _CalRecurrenceGetWeekStartRaw(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef CalFilterCreateWithDatabaseFilteringCalendarsWithUIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = [[EKCalendarFilter alloc] initWithDatabase:a1 entityType:a2 filteringCalendarsWithUIDs:a3];
  CFTypeRef v4 = CFRetain(v3);

  return v4;
}

CFTypeRef CalFilterCreateWithDatabaseShowingCalendarsWithUIDsAndEntityType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = [[EKCalendarFilter alloc] initWithDatabase:a1 entityType:a3 showingCalendarsWithUIDs:a2];
  CFTypeRef v4 = CFRetain(v3);

  return v4;
}

uint64_t CalStoreGetUID()
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

BOOL CalStoreGetFlag2(uint64_t a1, int a2)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return (Property & a2) != 0;
}

uint64_t CalCalendarItemCopySummary(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

BOOL CalEntityIsDeleted(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsDeleted = _CalEntityIsDeleted(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsDeleted;
}

BOOL _CalEntityIsDeleted(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordIsDeleted() != 0;
}

uint64_t _CalEventGetJunkStatusWhileLocked(uint64_t a1, char a2)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  CFTypeRef v5 = RecordLock;
  if ((a2 & 1) == 0) {
    os_unfair_lock_lock(RecordLock);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if ((a2 & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v5);
    }
    os_unfair_lock_unlock(v5);
  }
  return Property;
}

void _CalRecordIDLoad(const void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int ID = CPRecordGetID();
  if (ID == -1)
  {
    BOOL v7 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      id v8 = NSNumber;
      uint64_t v9 = v7;
      uint64_t v10 = [v8 numberWithInt:0xFFFFFFFFLL];
      int v15 = 138412546;
      id v16 = v10;
      __int16 v17 = 2048;
      id v18 = a1;
      _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_ERROR, "Record with a rowID of [%@] found.  Record pointer address: [%p].  Will not load record ID.", (uint8_t *)&v15, 0x16u);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    int IsDeleted = CPRecordIsDeleted();
    CFStringRef v13 = CDBLogHandle;
    BOOL v14 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (!IsDeleted) {
      _CalRecordIDLoad_cold_1(v14, (uint64_t)a1, v13);
    }
    if (v14)
    {
      int v15 = 134217984;
      id v16 = (void *)a1;
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Record with pointer address of [%p] was marked as being deleted.", (uint8_t *)&v15, 0xCu);
    }
    if (os_variant_has_internal_diagnostics()) {
      [MEMORY[0x1E4F576B8] simulateCrashWithMessage:@"<rdar://problem/27536217>"];
    }
  }
  else
  {
    int v3 = ID;
    int Type = _CalEntityGetType(a1);
    pthread_once(&__CalRecordIDRegisterOnce, (void (*)(void))CalRecordIDRegisterClass);
    Instance = (_DWORD *)_CFRuntimeCreateInstance();
    Instance[4] = Type;
    Instance[5] = v3;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          unsigned int v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
    CFRelease(Instance);
  }
}

uint64_t CalEventOccurrenceCacheCopyOccurrencesOnDay(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = 0;
  BOOL v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __CalEventOccurrenceCacheCopyOccurrencesOnDay_block_invoke;
  v5[3] = &unk_1E5D65DE0;
  v5[5] = a1;
  v5[6] = a2;
  *(double *)&v5[7] = a3;
  v5[4] = &v6;
  _CalEventOccurrenceCachePerformWithLock(a1, v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1A8E88620(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

CFTypeRef CalFilterCreateWithDatabaseShowingCalendarsWithUIDs(uint64_t a1, uint64_t a2)
{
  BOOL v2 = [[EKCalendarFilter alloc] initWithDatabase:a1 showingCalendarsWithUIDs:a2];
  CFTypeRef v3 = CFRetain(v2);

  return v3;
}

void __CalEventOccurrenceCacheCopyOccurrencesOnDay_block_invoke(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 40) + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    uint64_t v6 = Database;
    __CalDatabaseBeginReadTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1964");
    BOOL v7 = [MEMORY[0x1E4F1C9C8] CalSimulatedDateForNow];
    uint64_t v8 = *(void *)(a1 + 40);
    _CalEventOccurrenceCacheLoadInfo(v8);
    id v9 = *(id *)(v8 + 32);
    uint64_t v10 = [MEMORY[0x1E4F1C9A8] CalGregorianCalendarForTimeZone:v9];
    int v11 = [v10 dateByAddingUnit:16 value:1 toDate:v7 options:0];
    CFStringRef v12 = [v10 components:30 fromDate:v11];
    CFStringRef v13 = [v10 dateFromComponents:v12];
    BOOL v14 = _CalFilterCopyQuery(*(void **)(a1 + 48));
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v6 + 104))
      {
        int v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    uint64_t v16 = CPSqliteDatabaseStatementForReading();
    if (v16)
    {
      __int16 v17 = (uint64_t **)v16;
      sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 1, (int)*(double *)(a1 + 56));
      id v18 = (sqlite3_stmt *)v17[1];
      [v13 timeIntervalSinceReferenceDate];
      sqlite3_bind_double(v18, 2, v19);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v17)
        {
          uint64_t v20 = **v17;
          if (v20)
          {
            if (*(void *)(v20 + 104))
            {
              uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v21) {
                os_unfair_lock_assert_owner(v21 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v17)
        {
          uint64_t v22 = **v17;
          if (v22)
          {
            if (*(void *)(v22 + 104))
            {
              CFIndex v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v23) {
                os_unfair_lock_assert_owner(v23 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    CFRelease(v14);
    __CalDatabaseRollbackTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1994");
  }
}

BOOL __CalDatabaseRollbackTransaction(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 352) == 0xFFFF)
  {
    CFStringRef v13 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v14 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL __CalDatabaseRollbackTransaction(CalDatabaseRef, const char *)");
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"CalDatabase.m", 1131, @"Tried to roll back a transaction (%s) when no transaction was open (%s)", a2, *(void *)(a1 + 344));
  }
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled)
  {
    if (v9)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
  }
  int v11 = CPSqliteConnectionRollback();
  if (*(_DWORD *)(a1 + 352) == 1) {
    [*(id *)(a1 + 336) unlock];
  }
  *(_DWORD *)(a1 + 352) = 0xFFFF;
  *(void *)(a1 + 344) = a2;
  return v11 != 1;
}

BOOL __CalDatabaseBeginReadTransaction(uint64_t a1, uint64_t a2)
{
  return _CalDatabaseBeginTransactionOfType(a1, 0, a2);
}

BOOL _CalDatabaseBeginTransactionOfType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 352) != 0xFFFF)
  {
    uint64_t v20 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v21 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _CalDatabaseBeginTransactionOfType(CalDatabaseRef, CPSqliteTransactionType, const char *)");
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v21, @"CalDatabase.m", 1086, @"Tried to begin a transaction of type %i (%s) when there's already an open transaction of type %i (%s)", a2, a3, *(unsigned int *)(a1 + 352), *(void *)(a1 + 344));
  }
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = Database == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  uint64_t v11 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled)
  {
    if (v11)
    {
      if (*(void *)v11)
      {
        if (*(void *)(*(void *)v11 + 104))
        {
          CFStringRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
  }
  int v13 = CPSqliteConnectionBeginTransactionType();
  int v14 = v13;
  if (v13 && v13 != 101)
  {
    double v19 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = a3;
      __int16 v24 = 1024;
      int v25 = v14;
      _os_log_impl(&dword_1A8E81000, v19, OS_LOG_TYPE_ERROR, "Begin transaction (%{public}s) failed with error %i", buf, 0x12u);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 352) = a2;
    int v15 = *(_DWORD *)(a1 + 356);
    if ((v15 + 1) > 1) {
      int v16 = v15 + 1;
    }
    else {
      int v16 = 1;
    }
    *(_DWORD *)(a1 + 356) = v16;
    *(void *)(a1 + 344) = a3;
  }
  return v14 == 101 || v14 == 0;
}

void *_CalFilterCopyQuery(void *a1)
{
  uint64_t v1 = objc_msgSend(a1, "filterQueryForQueryString:creator:userInfo:");
  BOOL v2 = v1;
  if (v1) {
    CFRetain(v1);
  }

  return v2;
}

__CFString *_CalEventOccurrenceCacheCreateCalendarIdQueryForFilterIncludingNullId(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (CalFilterIncludeDisableStores()) {
    CFStringRef v8 = 0;
  }
  else {
    CFStringRef v8 = _CalDatabaseCopyDisabledStoresClause(a2);
  }
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFStringRef *)a3);
  uint64_t v10 = _CalFilterCopyCalendarIDClauseForQuery(a1, @"calendar_id");
  uint64_t v11 = v10;
  if (!a4 && !v10 && !v8)
  {
    if (!*(void *)(a3 + 8)) {
      goto LABEL_17;
    }
    CFStringRef v12 = @" WHERE ";
    goto LABEL_16;
  }
  if (v10)
  {
    CFStringAppendFormat(MutableCopy, 0, @" WHERE %@ AND calendar_id != -2", v10);
    CFRelease(v11);
  }
  else if (v8)
  {
    CFStringAppend(MutableCopy, @" WHERE store_id != -2 AND store_id NOT IN ");
    CFStringAppend(MutableCopy, v8);
  }
  else
  {
    CFStringAppendFormat(MutableCopy, 0, @" WHERE calendar_id = -2");
  }
  if (*(void *)(a3 + 8))
  {
    CFStringRef v12 = @" AND ";
LABEL_16:
    CFStringAppend(MutableCopy, v12);
  }
LABEL_17:
  if (*(void *)(a3 + 8)) {
    CFStringAppendFormat(MutableCopy, 0, @" %@", *(void *)(a3 + 8));
  }
  if (*(void *)(a3 + 16)) {
    CFStringAppendFormat(MutableCopy, 0, @" %@", *(void *)(a3 + 16));
  }
  if (*(int *)(a3 + 24) >= 1) {
    CFStringAppendFormat(MutableCopy, 0, @" LIMIT %d", *(unsigned int *)(a3 + 24));
  }
  if (v8) {
    CFRelease(v8);
  }
  return MutableCopy;
}

CFMutableStringRef _CalDatabaseCopyDisabledStoresClause(uint64_t a1)
{
  BOOL v2 = *(const void **)(a1 + 104);
  if (v2)
  {
    CFTypeID v3 = CFGetTypeID(v2);
    if (v3 == CFNullGetTypeID())
    {
      return 0;
    }
    else
    {
      int v14 = *(const void **)(a1 + 104);
      return (CFMutableStringRef)CFRetain(v14);
    }
  }
  else
  {
    CFMutableStringRef theString = 0;
    if (*(void *)(a1 + 24))
    {
      if (CDBLockingAssertionsEnabled)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (Database)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)(Database + 104))
          {
            BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
        CFStringRef v8 = (uint64_t **)CPSqliteDatabaseStatementForReading();
        if (v8)
        {
          BOOL v9 = v8;
          if (CDBLockingAssertionsEnabled)
          {
            if (*v8)
            {
              uint64_t v10 = **v8;
              if (v10)
              {
                if (*(void *)(v10 + 104))
                {
                  uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v11) {
                    os_unfair_lock_assert_owner(v11 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementSendResults();
          if (CDBLockingAssertionsEnabled)
          {
            if (*v9)
            {
              uint64_t v12 = **v9;
              if (v12)
              {
                if (*(void *)(v12 + 104))
                {
                  int v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v13) {
                    os_unfair_lock_assert_owner(v13 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementReset();
          *(void *)(a1 + 104) = CFRetain((CFTypeRef)*MEMORY[0x1E4F1D260]);
        }
      }
    }
    return theString;
  }
}

void *_CalFilterCopyCalendarIDClauseForQuery(void *a1, uint64_t a2)
{
  BOOL v2 = [a1 calendarIDClauseForQueryWithVariableName:a2];
  CFTypeID v3 = v2;
  if (v2) {
    CFRetain(v2);
  }

  return v3;
}

__CFString *_CalEventOccurrenceCacheCreateCalendarIdQueryForFilter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _CalEventOccurrenceCacheCreateCalendarIdQueryForFilterIncludingNullId(a1, a2, a4, 0);
}

void _CalEventOccurrenceCachePerformWithLock(uint64_t a1, void *a2)
{
  CFTypeID v3 = a2;
  if (CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
  {
    v3[2]();
    CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  }
}

void CalDatabaseUnlockForThread(const os_unfair_lock *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)&a1[20];
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(a1 + 20);
  }
  os_unfair_lock_unlock(v1);
}

uint64_t CalDatabaseLockForThread(os_unfair_lock_s *a1)
{
  return 1;
}

__CFArray *_CalEventOccurrenceCacheCopyBatchOfEvents(uint64_t a1, const __CFSet *a2, const __CFArray *a3, CFIndex a4, int a5, void *a6, void *a7, void *a8, void *a9)
{
  id v56 = a6;
  id v15 = a7;
  id v57 = a8;
  id v59 = a9;
  CFIndex Count = CFArrayGetCount(a3);
  if (!a5 || (CFIndex v17 = a4 + a5, Count < v17)) {
    CFIndex v17 = Count;
  }
  id v54 = v15;
  if (a2)
  {
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFSetCreateMutable(0, 0, 0);
    if (v17 > a4)
    {
      CFIndex v19 = a4;
      do
      {
        CFNumberRef ValueAtIndex = (int *)CFArrayGetValueAtIndex(a3, v19);
        CFSetAddValue(Mutable, (const void *)*ValueAtIndex);
        ++v19;
      }
      while (v17 != v19);
    }
    a2 = Mutable;
  }
  CFStringRef cf = Mutable;
  CFIndex v21 = CFSetGetCount(a2);
  uint64_t v22 = (const void **)malloc_type_malloc(8 * v21, 0x100004000313F17uLL);
  CFSetGetValues(a2, v22);
  CFArrayRef v23 = CFArrayCreate(0, v22, v21, 0);
  free(v22);
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v25 = RecordStore == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (!v25)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v27 = (const __CFArray *)CPRecordStoreCopyInstancesOfClassWithUIDs();
  CFRelease(v23);
  CFArrayRef v51 = v27;
  _CalDatabaseFaultDefaultRelationsForEvents(*(void *)(a1 + 24), v27);
  theArray = CFArrayCreateMutable(0, v17 - a4, MEMORY[0x1E4F1D510]);
  BOOL v28 = v54;
  if (v17 > a4)
  {
    id v29 = v57;
    if (v59) {
      id v29 = v59;
    }
    id v49 = v29;
    CFIndex v55 = v17;
    do
    {
      uint64_t v30 = (double *)CFArrayGetValueAtIndex(a3, a4);
      if (v30)
      {
        v31 = v30;
        CFArrayRef v32 = a3;
        uint64_t v33 = *(void *)(a1 + 24);
        id v34 = v56;
        id v35 = v28;
        id v36 = v57;
        id v37 = v59;
        if (v57)
        {
          uint64_t v38 = _CalDatabaseGetRecordStore(v33);
          EventWithUint ID = _CalGetEventWithUID(v38, *(unsigned int *)v31);
          if (EventWithUID)
          {
            uint64_t v40 = (const void *)EventWithUID;
            v41 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v31[1]];
            CFArrayRef v42 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v31[2]];
            BOOL IsFloating = _CalCalendarItemIsFloating((uint64_t)v40);
            if (v59 && IsFloating && ([v37 isEqualToTimeZone:v36] & 1) == 0)
            {
              uint64_t v50 = [v41 dateInTimeZone:v37 fromTimeZone:v36];

              uint64_t v44 = [v42 dateInTimeZone:v37 fromTimeZone:v36];

              v41 = (void *)v50;
              CFArrayRef v42 = (void *)v44;
            }
            if (objc_msgSend(v42, "CalIsAfterOrSameAsDate:", v34, v48)
              && [v41 CalIsBeforeDate:v35])
            {
              [v41 timeIntervalSinceReferenceDate];
              uint64_t v46 = (const void *)CalEventOccurrenceCreate(v40, v49, v45);
              CFArrayAppendValue(theArray, v46);
              CFRelease(v46);
            }

            BOOL v28 = v54;
          }
          else
          {
            uint64_t v48 = *(unsigned int *)v31;
            CFLog();
          }
        }

        a3 = v32;
        CFIndex v17 = v55;
      }
      ++a4;
    }
    while (v17 != a4);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v51) {
    CFRelease(v51);
  }

  return theArray;
}

uint64_t _CalDatabaseGetRecordStore(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t _CalGetCalendarItemWithRowID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t CalEventOccurrenceCreate(const void *a1, const void *a2, double a3)
{
  pthread_once(&__CalEventOccurrenceRegisterOnce, (void (*)(void))CalEventOccurrenceRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = CFRetain(a1);
  *(double *)(Instance + 24) = a3;
  *(void *)(Instance + 32) = CFRetain(a2);
  return Instance;
}

BOOL _CalCalendarItemIsFloating(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  return !Property || CFEqual(Property, @"_float");
}

void _CalEventOccurrenceCacheLoadInfo(uint64_t a1)
{
  CurrentTransactionint ID = _CalDatabaseGetCurrentTransactionID(*(void *)(a1 + 24));
  if (CurrentTransactionID != *(_DWORD *)(a1 + 20))
  {
    int v3 = CurrentTransactionID;
    if (!CurrentTransactionID)
    {
      uint64_t v48 = [MEMORY[0x1E4F28B00] currentHandler];
      id v49 = [NSString stringWithUTF8String:"void _CalEventOccurrenceCacheLoadInfo(CalEventOccurrenceCacheRef)"];
      [v48 handleFailureInFunction:v49 file:@"CalEventOccurrenceCache.m" lineNumber:202 description:@"No transaction when accessing time zone."];
    }
    Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
    if (CDBLockingAssertionsEnabled) {
      BOOL v5 = RecordStore == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled) {
      BOOL v8 = Database == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (*(void *)(Database + 104))
      {
        BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
    uint64_t v10 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    uint64_t v11 = v10;
    if (CDBLockingAssertionsEnabled) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      if (*(void *)v10)
      {
        if (*(void *)(*(void *)v10 + 104))
        {
          int v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13) {
            os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
    int v14 = (const void *)CPSqliteConnectionCopyValueForProperty();
    uint64_t v15 = CalTimeZoneCopyCFTimeZone();
    int v16 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v15;

    if (v14) {
      CFRelease(v14);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(void *)v11)
        {
          if (*(void *)(*(void *)v11 + 104))
          {
            CFIndex v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17) {
              os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
    }
    id v18 = (void *)CPSqliteConnectionCopyValueForProperty();
    id v50 = v18;
    if (v18)
    {
      uint64_t v19 = [v18 integerValue];
      uint64_t v20 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:(double)v19];
      CFIndex v21 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v20;
    }
    else
    {
      CFIndex v21 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0;
    }

    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(void *)v11)
        {
          if (*(void *)(*(void *)v11 + 104))
          {
            uint64_t v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v22) {
              os_unfair_lock_assert_owner(v22 + 20);
            }
          }
        }
      }
    }
    CFArrayRef v23 = (void *)CPSqliteConnectionCopyValueForProperty();
    __int16 v24 = v23;
    if (v23)
    {
      uint64_t v25 = [v23 integerValue];
      uint64_t v26 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:(double)v25];
      CFArrayRef v27 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v26;
    }
    else
    {
      CFArrayRef v27 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = 0;
    }

    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(void *)v11)
        {
          if (*(void *)(*(void *)v11 + 104))
          {
            BOOL v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28) {
              os_unfair_lock_assert_owner(v28 + 20);
            }
          }
        }
      }
    }
    id v29 = (void *)CPSqliteConnectionCopyValueForProperty();
    uint64_t v30 = v29;
    if (v29)
    {
      uint64_t v31 = [v29 integerValue];
      uint64_t v32 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:(double)v31];
      uint64_t v33 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v32;
    }
    else
    {
      uint64_t v33 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = 0;
    }

    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(void *)v11)
        {
          if (*(void *)(*(void *)v11 + 104))
          {
            id v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v34) {
              os_unfair_lock_assert_owner(v34 + 20);
            }
          }
        }
      }
    }
    id v35 = (void *)CPSqliteConnectionCopyValueForProperty();
    id v36 = v35;
    if (v35)
    {
      uint64_t v37 = [v35 integerValue];
      uint64_t v38 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:(double)v37];
      id v39 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v38;
    }
    else
    {
      id v39 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = 0;
    }

    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(void *)v11)
        {
          if (*(void *)(*(void *)v11 + 104))
          {
            uint64_t v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v40) {
              os_unfair_lock_assert_owner(v40 + 20);
            }
          }
        }
      }
    }
    v41 = (void *)CPSqliteConnectionCopyValueForProperty();
    CFArrayRef v42 = v41;
    if (v41) {
      uint64_t v43 = [v41 integerValue];
    }
    else {
      uint64_t v43 = 0x7FFFFFFFFFFFFFFFLL;
    }
    *(void *)(a1 + 72) = v43;
    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(void *)v11)
        {
          if (*(void *)(*(void *)v11 + 104))
          {
            uint64_t v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v44) {
              os_unfair_lock_assert_owner(v44 + 20);
            }
          }
        }
      }
    }
    double v45 = (void *)CPSqliteConnectionCopyValueForProperty();
    uint64_t v46 = v45;
    if (v45) {
      uint64_t v47 = [v45 integerValue];
    }
    else {
      uint64_t v47 = 0x7FFFFFFFFFFFFFFFLL;
    }
    *(void *)(a1 + 80) = v47;
    *(_DWORD *)(a1 + 20) = v3;
  }
}

uint64_t _CalDatabaseGetCurrentTransactionID(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 352) == 0xFFFF) {
    return 0;
  }
  else {
    return *(unsigned int *)(a1 + 356);
  }
}

void _CalDatabaseFaultDefaultRelationsForEvents(uint64_t a1, CFArrayRef theArray)
{
  v21[0] = a1;
  v21[1] = *MEMORY[0x1E4F143B8];
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  char v4 = 1;
  do
  {
    char v5 = v4;
    CFMutableArrayRef Mutable = CFSetCreateMutable(0, 0, 0);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        if (CDBLockingAssertionsEnabled) {
          BOOL v9 = ValueAtIndex == 0;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
        int Property = CPRecordGetProperty();
        if (Property >= 1) {
          CFSetAddValue(Mutable, (const void *)Property);
        }
      }
    }
    CFIndex v12 = CFSetGetCount(Mutable);
    MEMORY[0x1F4188790]();
    int v14 = (const void **)((char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v13 >= 0x200) {
      size_t v15 = 512;
    }
    else {
      size_t v15 = v13;
    }
    bzero((char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
    CFSetGetValues(Mutable, v14);
    CFArrayRef v16 = CFArrayCreate(0, v14, v12, 0);
    Recorduint64_t Store = _CalDatabaseGetRecordStore(v21[0]);
    if (CDBLockingAssertionsEnabled) {
      BOOL v18 = RecordStore == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v19) {
        os_unfair_lock_assert_owner(v19 + 20);
      }
    }
    uint64_t v20 = (const void *)CPRecordStoreCopyInstancesOfClassWithUIDs();
    if (v20) {
      CFRelease(v20);
    }
    CFRelease(v16);
    CFRelease(Mutable);
    char v4 = 0;
  }
  while ((v5 & 1) != 0);
}

id _CalEventOccurrenceCacheGetCacheCalendar(uint64_t a1)
{
  _CalEventOccurrenceCacheLoadInfo(a1);
  if (*(void *)(a1 + 32)) {
    objc_msgSend(MEMORY[0x1E4F1C9A8], "CalGregorianCalendarForTimeZone:");
  }
  else {
  BOOL v2 = CalCopyCalendar();
  }
  return v2;
}

BOOL __CalEventOccurrenceCacheCopyAllDaysAndOccurrenceCounts_block_invoke(uint64_t a1)
{
  v49[16] = *MEMORY[0x1E4F143B8];
  __CalDatabaseBeginReadTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1882");
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 40) + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    uint64_t v6 = Database;
    BOOL v7 = _CalFilterCopyQuery(*(void **)(a1 + 48));
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v6 + 104))
      {
        BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
    BOOL v9 = (uint64_t **)CPSqliteDatabaseStatementForReading();
    if (v9)
    {
      uint64_t v10 = v9;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v9)
        {
          uint64_t v11 = **v9;
          if (v11)
          {
            if (*(void *)(v11 + 104))
            {
              CFIndex v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v12) {
                os_unfair_lock_assert_owner(v12 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v10)
        {
          uint64_t v13 = **v10;
          if (v13)
          {
            if (*(void *)(v13 + 104))
            {
              int v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14) {
                os_unfair_lock_assert_owner(v14 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    CFRelease(v7);
    uint64_t v43 = *(void *)(a1 + 40);
    size_t v15 = _CalFilterCopyVisibleCalendars(*(void **)(a1 + 48));
    id v16 = objc_alloc_init(MEMORY[0x1E4F28E78]);
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v17 = v15;
    uint64_t v18 = [v17 countByEnumeratingWithState:&v45 objects:v49 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)v46;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v46 != v20) {
            objc_enumerationMutation(v17);
          }
          CFTypeRef Store = _CalCalendarGetStore(*(void *)(*((void *)&v45 + 1) + 8 * i));
          if (Store && _CalStoreGetType((uint64_t)Store) == 6)
          {
            uint64_t ID = CPRecordGetID();
            if ([v16 length]) {
              [v16 appendString:@", "];
            }
            objc_msgSend(v16, "appendFormat:", @"%i", ID);
          }
        }
        uint64_t v19 = [v17 countByEnumeratingWithState:&v45 objects:v49 count:16];
      }
      while (v19);
    }

    if ([v16 length])
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      v49[0] = Mutable;
      uint64_t v44 = [NSString stringWithFormat:@"SELECT day, COUNT() FROM OccurrenceCache WHERE next_reminder_date IS NOT NULL AND (next_reminder_date >= ?) AND calendar_id IN (%@) GROUP BY day", v16];
      uint64_t v25 = [MEMORY[0x1E4F1C9C8] CalSimulatedDateForNow];
      _CalEventOccurrenceCacheLoadInfo(v43);
      id v26 = *(id *)(v43 + 32);
      CFArrayRef v27 = [MEMORY[0x1E4F1C9A8] CalGregorianCalendarForTimeZone:v26];
      BOOL v28 = [v27 dateByAddingUnit:16 value:1 toDate:v25 options:0];
      id v29 = [v27 components:30 fromDate:v28];
      uint64_t v30 = [v27 dateFromComponents:v29];
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(v6 + 104))
        {
          uint64_t v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v31) {
            os_unfair_lock_assert_owner(v31 + 20);
          }
        }
      }
      uint64_t v32 = CPSqliteDatabaseStatementForReading();
      if (v32)
      {
        uint64_t v33 = (uint64_t **)v32;
        id v34 = *(sqlite3_stmt **)(v32 + 8);
        [v30 timeIntervalSinceReferenceDate];
        sqlite3_bind_double(v34, 1, v35);
        if (CDBLockingAssertionsEnabled)
        {
          if (*v33)
          {
            uint64_t v36 = **v33;
            if (v36)
            {
              if (*(void *)(v36 + 104))
              {
                uint64_t v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v37) {
                  os_unfair_lock_assert_owner(v37 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v33)
          {
            uint64_t v38 = **v33;
            if (v38)
            {
              if (*(void *)(v38 + 104))
              {
                id v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v39) {
                  os_unfair_lock_assert_owner(v39 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
        CFMutableArrayRef Mutable = (CFMutableArrayRef)v49[0];
      }
    }
    else
    {
      CFMutableArrayRef Mutable = 0;
    }

    if ([(__CFArray *)Mutable count])
    {
      uint64_t v40 = CalEventOccurrenceCacheMergeCounts(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), Mutable);
      if (v40)
      {
        v41 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (v40 != v41)
        {
          CFRelease(v41);
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v40;
        }
      }
    }
  }
  return __CalDatabaseRollbackTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1910");
}

double CalEventNextReminderOccurrenceDateIfEventKitIsLikelyToWantIt(uint64_t a1, double a2)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalEventIsReminderIntegrationEvent(a1)
    && _CalCalendarItemHasRecurrenceRules(a1)
    && ([MEMORY[0x1E4F1C9C8] CalSimulatedDateForNow],
        char v5 = objc_claimAutoreleasedReturnValue(),
        [v5 timeIntervalSinceReferenceDate],
        double v7 = v6,
        v5,
        v7 >= a2)
    && (uint64_t DatabaseForRecord = CalGetDatabaseForRecord()) != 0
    && (uint64_t v9 = _CalDatabaseCopyEventOccurrenceCache(DatabaseForRecord)) != 0)
  {
    uint64_t v10 = (const void *)v9;
    int ID = CPRecordGetID();
    double EventOccurrenceDateAfterDate = _CalEventOccurrenceCacheNextEventOccurrenceDateAfterDate((uint64_t)v10, ID, a2);
    CFRelease(v10);
  }
  else
  {
    double EventOccurrenceDateAfterDate = *MEMORY[0x1E4F57888];
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return EventOccurrenceDateAfterDate;
}

BOOL _CalEventIsReminderIntegrationEvent(uint64_t a1)
{
  _CalCalendarItemGetStoreId(a1);
  uint64_t Store = CPRecordGetStore();
  StoreWithUint ID = _CalGetStoreWithUID(Store);
  BOOL result = 0;
  if (Store)
  {
    if (StoreWithUID) {
      return _CalStoreGetType(StoreWithUID) == 6;
    }
  }
  return result;
}

uint64_t _CalGetStoreWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t _CalStoreGetType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalCalendarItemGetStoreId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void *_CalFilterCopyVisibleCalendars(void *a1)
{
  uint64_t v1 = [a1 _visibleCalendarsWithOptions:2];
  BOOL v2 = v1;
  if (v1) {
    CFRetain(v1);
  }

  return v2;
}

__CFString *_CalEventOccurrenceCacheCreateDaysCalendarIdQueryForFilter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _CalEventOccurrenceCacheCreateCalendarIdQueryForFilterIncludingNullId(a1, a2, a4, 1);
}

uint64_t CalCalendarCanContainEntityTypeAndStoreAllowsIt(uint64_t a1, int a2)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t CanContainEntityTypeAndStoreAllowsIt = _CalCalendarCanContainEntityTypeAndStoreAllowsIt(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return CanContainEntityTypeAndStoreAllowsIt;
}

uint64_t _CalCalendarCanContainEntityTypeAndStoreAllowsIt(uint64_t a1, int a2)
{
  uint64_t result = _CalCalendarCanContainEntityType(a1, a2);
  if (result)
  {
    CFTypeRef Store = _CalCalendarGetStore(a1);
    if (Store)
    {
      if (a2 == 2)
      {
        return _CalStoreAllowsEvents((uint64_t)Store);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t CalCalendarGetUID()
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

BOOL CalEntityIsVirtual(const void *a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsVirtual = _CalEntityIsVirtual(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsVirtual;
}

BOOL _CalEntityIsVirtual(const void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  Recordint ID = _CalEntityGetRecordID(a1);
  if (RecordID)
  {
    return CalRecordIDIsVirtual(RecordID);
  }
  else
  {
    char v4 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      char v5 = v4;
      int ID = CPRecordGetID();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      v8[0] = 67109376;
      v8[1] = ID;
      __int16 v9 = 1024;
      int IsDeleted = CPRecordIsDeleted();
      _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_DEBUG, "_CalEntityIsVirtual: failed to get recordID for record with rowid [%d], deleted: %d", (uint8_t *)v8, 0xEu);
    }
    return 0;
  }
}

uint64_t _CalEntityGetRecordID(const void *a1)
{
  int Type = _CalEntityGetType(a1);
  switch(Type)
  {
    case 1:
      return _CalCalendarGetRecordID((uint64_t)a1);
    case 2:
    case 3:
      return _CalCalendarItemGetRecordID((uint64_t)a1);
    case 4:
      return _CalAlarmGetRecordID((uint64_t)a1);
    case 5:
      return _CalRecurrenceGetRecordID((uint64_t)a1);
    case 6:
      return _CalStoreGetRecordID((uint64_t)a1);
    case 7:
    case 8:
      return _CalParticipantGetRecordID((uint64_t)a1);
    case 9:
      return _CalEventActionGetRecordID((uint64_t)a1);
    case 10:
      return _CalExceptionDateGetRecordID((uint64_t)a1);
    case 11:
      return _CalAttachmentGetRecordID((uint64_t)a1);
    case 12:
      return _CalCategoryGetRecordID((uint64_t)a1);
    case 13:
      return _CalCategoryLinkGetRecordID((uint64_t)a1);
    case 14:
      return _CalLocationGetRecordID((uint64_t)a1);
    case 15:
      return _CalShareeGetRecordID((uint64_t)a1);
    case 16:
    case 17:
    case 19:
      goto LABEL_2;
    case 18:
      return _CalResourceChangeGetRecordID((uint64_t)a1);
    case 20:
      return _CalSuggestedEventInfoGetRecordID((uint64_t)a1);
    case 21:
      return _CalContactGetRecordID((uint64_t)a1);
    case 22:
      goto LABEL_12;
    case 23:
      uint64_t v4 = (uint64_t)a1;
      goto LABEL_57;
    case 24:
      return _CalErrorGetRecordID((uint64_t)a1);
    case 25:
      return _CalAttachmentFileGetRecordID((uint64_t)a1);
    case 26:
      uint64_t v5 = (uint64_t)a1;
      goto LABEL_66;
    case 27:
      uint64_t v5 = (uint64_t)a1;
LABEL_66:
      uint64_t result = _CalCalendarItemGetDescription(v5);
      break;
    case 28:
      uint64_t result = _CalImageGetRecordID((uint64_t)a1);
      break;
    case 29:
      uint64_t v4 = (uint64_t)a1;
LABEL_57:
      uint64_t result = _CalColorGetRecordID(v4);
      break;
    default:
      if (Type == 102)
      {
LABEL_2:
        uint64_t result = _CalNotificationGetRecordID((uint64_t)a1);
      }
      else
      {
LABEL_12:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t CalEntityGetID()
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalEntityGetType(const void *a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Type = _CalEntityGetType(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Type;
}

void *CalGetRecordLock()
{
  id v0 = &__GlobalLock;
  if (CPRecordGetStore())
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context) {
      return (void *)(Context + 80);
    }
  }
  return v0;
}

uint64_t _CalEntityGetType(const void *a1)
{
  uint64_t result = CalEntityGetRawType(a1);
  if ((int)result > 100)
  {
    if (result == 101)
    {
      return _CalCalendarItemGetEntityType((uint64_t)a1);
    }
    else if (result == 102)
    {
      return _CalNotificationGetEntityType((uint64_t)a1);
    }
  }
  else if (result)
  {
    if (result == 100)
    {
      return _CalParticipantGetEntityType((uint64_t)a1);
    }
  }
  else
  {
    CPRecordGetClass();
    CFGetTypeID(a1);
    CFLog();
    return 0;
  }
  return result;
}

uint64_t CalEntityGetRawType(const void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFTypeID v1 = CFGetTypeID(a1);
    if (CPRecordGetTypeID() == v1) {
      return *(unsigned int *)(CPRecordGetClass() + 64);
    }
    BOOL v3 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = v3;
      int v5 = 134218240;
      Typeuint64_t ID = CPRecordGetTypeID();
      __int16 v7 = 2048;
      CFTypeID v8 = v1;
      _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_ERROR, "typeId != CPRecordGetTypeID(), CPRecordGetTypeID(): %lu, typeId: %lu", (uint8_t *)&v5, 0x16u);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t _CalCalendarItemGetEntityType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if ((Property - 4) <= 0xFFFFFFFD)
  {
    CPRecordGetID();
    CFLog();
  }
  return Property;
}

BOOL CalRecordIDIsVirtual(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) == 0x7FFFFFFF;
}

uint64_t _CalCalendarItemGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalParticipantGetEntityType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if ((Property - 9) <= 0xFFFFFFFD) {
    CFLog();
  }
  return Property;
}

uint64_t _CalStoreGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalDatabaseGetLastCacheInvalidationTimestamp(uint64_t a1)
{
  BOOL v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 160);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

void CalDatabaseSetPropertyModificationLoggingEnabled(uint64_t a1, char a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  *(unsigned char *)(a1 + 256) = a2;
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
}

uint64_t CalDatabaseCountCachedRecords(uint64_t a1)
{
  BOOL v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCountCachedRecords();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

void CalDatabaseSetClientIdentifier(uint64_t a1, const void *a2)
{
  BOOL v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  int v5 = *(const void **)(a1 + 144);
  if (v5 != a2)
  {
    if (v5) {
      CFRelease(v5);
    }
    if (a2) {
      CFTypeRef v6 = CFRetain(a2);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(a1 + 144) = v6;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
}

uint64_t CalCalendarItemGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalCalendarItemGetPropertyIDWithPropertyName_sPropDict;
  if (!CalCalendarItemGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalCalendarItemGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalCalendarItemGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"UUID";
      int v6 = 34;
      __int16 v7 = @"externalID";
      int v8 = 24;
      uint64_t v9 = @"unlocalizedTitle";
      int v10 = 0;
      uint64_t v11 = @"notes";
      int v12 = 3;
      uint64_t v13 = @"startDateRaw";
      int v14 = 4;
      size_t v15 = @"isAllDay";
      int v16 = 8;
      id v17 = @"uniqueID";
      int v18 = 26;
      uint64_t v19 = @"URLString";
      int v20 = 18;
      CFIndex v21 = @"sequenceNumber";
      int v22 = 20;
      CFArrayRef v23 = @"hasRecurrenceRules";
      int v24 = 32;
      uint64_t v25 = @"hasAttendees";
      int v26 = 33;
      CFArrayRef v27 = @"priority";
      int v28 = 36;
      id v29 = @"creationDate";
      int v30 = 41;
      uint64_t v31 = @"actionString";
      int v32 = 42;
      uint64_t v33 = @"lastModifiedDate";
      int v34 = 19;
      double v35 = @"externalScheduleID";
      int v36 = 27;
      uint64_t v37 = @"externalModificationTag";
      int v38 = 25;
      id v39 = @"externalData";
      int v40 = 28;
      v41 = @"phantomMaster";
      int v42 = 53;
      uint64_t v43 = @"participationStatusModifiedDate";
      int v44 = 54;
      long long v45 = @"calendarScale";
      int v46 = 55;
      long long v47 = @"startTimeZoneName";
      int v48 = 5;
      id v49 = @"endTimeZoneName";
      int v50 = 7;
      CFArrayRef v51 = @"structuredData";
      int v52 = 67;
      v53 = @"localStructuredData";
      int v54 = 68;
      CFIndex v55 = @"suppressNotificationForChanges";
      int v56 = 124;
      id v57 = @"travelTime";
      int v58 = 56;
      id v59 = @"travelAdvisoryBehavior";
      int v60 = 57;
      char v61 = @"status";
      int v62 = 14;
      v63 = @"availability";
      int v64 = 16;
      double v65 = @"privacyLevel";
      int v66 = 17;
      id v67 = @"originalStartDate";
      int v68 = 11;
      id v69 = @"birthdayID";
      int v70 = 21;
      v71 = @"responseComment";
      int v72 = 29;
      uint64_t v73 = @"proposedStartDate";
      int v74 = 62;
      uint64_t v75 = @"canForward";
      int v76 = 63;
      uint64_t v77 = @"locationPredictionState";
      int v78 = 64;
      CFIndex v79 = @"firedTTL";
      int v80 = 65;
      uint64_t v81 = @"disallowProposeNewTime";
      int v82 = 66;
      double v83 = @"junkStatus";
      int v84 = 69;
      v85 = @"conferenceURLString";
      int v86 = 70;
      v87 = @"birthdayContactIdentifier";
      int v88 = 71;
      v89 = @"recurrenceSet";
      int v90 = 72;
      v91 = @"birthdayContactName";
      int v92 = 74;
      v93 = @"endDateRaw";
      int v94 = 6;
      v95 = @"invitationStatus";
      int v96 = 15;
      v97 = @"specialDayString";
      int v98 = 125;
      v99 = @"creatorIdentityString";
      int v100 = 116;
      id v101 = @"creatorTeamIdentityString";
      int v102 = 117;
      v103 = @"hasNotes";
      int v104 = 119;
      v105 = @"selfParticipantStatusRaw";
      int v106 = 120;
      v107 = @"sharedItemCreatedDate";
      int v108 = 47;
      v109 = @"sharedItemCreatedTimeZoneName";
      int v110 = 48;
      v111 = @"sharedItemModifiedDate";
      int v112 = 49;
      v113 = @"sharedItemModifiedTimeZoneName";
      int v114 = 50;
      v115 = @"defaultAlarmWasDeleted";
      int v116 = 52;
      v117 = @"modifiedProperties";
      int v118 = 22;
      v119 = @"conferenceURLDetectedString";
      int v120 = 115;
      v121 = @"externalTrackingStatus";
      int v122 = 23;
      v123 = @"calendar";
      int v124 = 96;
      v125 = @"organizer";
      int v126 = 83;
      v127 = @"selfAttendee";
      int v128 = 85;
      v129 = @"originalItem";
      int v130 = 95;
      v131 = @"allAlarmsSet";
      int v132 = 78;
      v133 = @"recurrenceRulesSet";
      int v134 = 80;
      v135 = @"attendeesRaw";
      int v136 = 81;
      v137 = @"detachedItems";
      int v138 = 94;
      v139 = @"ekExceptionDates";
      int v140 = 79;
      v141 = @"flags";
      int v142 = 73;
      v143 = @"attachmentsSet";
      int v144 = 98;
      v145 = @"structuredLocationWithoutPrediction";
      int v146 = 99;
      v147 = @"clientLocation";
      int v148 = 100;
      v149 = @"travelStartLocation";
      int v150 = 101;
      v151 = @"endLocation";
      int v152 = 102;
      v153 = @"image";
      int v154 = 106;
      v155 = @"color";
      int v156 = 118;
      v157 = @"sharedItemCreatedByDisplayName";
      int v158 = 107;
      v159 = @"sharedItemCreatedByAddressString";
      int v160 = 108;
      v161 = @"sharedItemCreatedByFirstName";
      int v162 = 111;
      v163 = @"sharedItemCreatedByLastName";
      int v164 = 112;
      v165 = @"sharedItemModifiedByDisplayName";
      int v166 = 109;
      v167 = @"sharedItemModifiedByAddressString";
      int v168 = 110;
      v169 = @"sharedItemModifiedByFirstName";
      int v170 = 113;
      v171 = @"sharedItemModifiedByLastName";
      int v172 = 114;
      v173 = @"actions";
      int v174 = 93;
      v175 = @"invitationChangedProperties";
      int v176 = 51;
      v177 = @"suggestionInfo";
      int v178 = 104;
      v179 = @"syncError";
      int v180 = 123;
      CalCalendarItemGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 88);
      for (uint64_t i = 1392; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalCalendarItemGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalCalendarItemGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8E8CAE8(_Unwind_Exception *a1)
{
  for (uint64_t i = 1392; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t _CompareCalEventOccurrences(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return -1;
  }
  if (!a2) {
    return 1;
  }
  uint64_t Event = CalEventOccurrenceGetEvent(a1);
  uint64_t v5 = CalEventOccurrenceGetEvent(a2);
  double Date = CalEventOccurrenceGetDate(a1);
  double v7 = CalEventOccurrenceGetDate(a2);
  if (Date < v7) {
    return -1;
  }
  if (Date > v7) {
    return 1;
  }
  BOOL IsAllDay = _CalEventIsAllDay(Event);
  BOOL v11 = _CalEventIsAllDay(v5);
  if (IsAllDay && !v11) {
    return -1;
  }
  if (!IsAllDay && v11) {
    return 1;
  }
  uint64_t Calendar = _CalEventGetCalendar(Event);
  uint64_t v13 = _CalEventGetCalendar(v5);
  if (Calendar | v13) {
    uint64_t v14 = -1;
  }
  else {
    uint64_t v14 = 0;
  }
  if (Calendar) {
    CFComparisonResult v8 = kCFCompareGreaterThan;
  }
  else {
    CFComparisonResult v8 = v14;
  }
  if (!Calendar) {
    goto LABEL_52;
  }
  uint64_t v15 = v13;
  if (!v13) {
    goto LABEL_52;
  }
  CFTypeRef Store = _CalCalendarGetStore(Calendar);
  CFTypeRef v17 = _CalCalendarGetStore(v15);
  unsigned int Type = _CalStoreGetType((uint64_t)Store);
  unsigned int v19 = _CalStoreGetType((uint64_t)v17);
  if (Type == v19)
  {
    int v20 = (void *)_CalStoreCopyUUID((uint64_t)Store);
    CFIndex v21 = (const void *)_CalStoreCopyUUID((uint64_t)v17);
    uint64_t v22 = [v20 compare:v21];
    if (v20) {
      CFRelease(v20);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (v22)
    {
      if (v22 == -1) {
        return -1;
      }
      else {
        return 1;
      }
    }
    int DisplayOrder = _CalCalendarGetDisplayOrder(Calendar);
    int v26 = _CalCalendarGetDisplayOrder(v15);
    if (DisplayOrder == -1) {
      int v27 = 0x7FFFFFFF;
    }
    else {
      int v27 = DisplayOrder;
    }
    if (v26 == -1) {
      int v28 = 0x7FFFFFFF;
    }
    else {
      int v28 = v26;
    }
    if (v27 < v28) {
      return -1;
    }
    if (v27 <= v28)
    {
      CFStringRef v29 = (const __CFString *)_CalCalendarCopyTitle(Calendar);
      CFStringRef v30 = (const __CFString *)_CalCalendarCopyTitle(v15);
      CFStringRef v31 = v30;
      if (v29 && v30)
      {
        CFComparisonResult v8 = CFStringCompare(v29, v30, 0);
        goto LABEL_50;
      }
      if (v29)
      {
        CFComparisonResult v8 = kCFCompareLessThan;
LABEL_50:
        CFRelease(v29);
        if (!v31) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
      CFComparisonResult v8 = kCFCompareGreaterThan;
      if (v30) {
LABEL_51:
      }
        CFRelease(v31);
LABEL_52:
      if (v8) {
        return v8;
      }
      uint64_t v32 = _CalEventCopySummary(Event);
      uint64_t v33 = _CalEventCopySummary(v5);
      if (!(v32 | v33)) {
        return 0;
      }
      int v34 = (const void *)v33;
      if (!v32 && v33)
      {
        CFComparisonResult v8 = kCFCompareLessThan;
        goto LABEL_64;
      }
      if (!v32 || v33)
      {
        CFComparisonResult v8 = CFStringCompare((CFStringRef)v32, (CFStringRef)v33, 0x81uLL);
        if (!v32) {
          goto LABEL_63;
        }
      }
      else
      {
        CFComparisonResult v8 = kCFCompareGreaterThan;
      }
      CFRelease((CFTypeRef)v32);
LABEL_63:
      if (!v34) {
        return v8;
      }
LABEL_64:
      CFRelease(v34);
      return v8;
    }
    return 1;
  }
  if (Type > 5) {
    unsigned int v23 = 1;
  }
  else {
    unsigned int v23 = dword_1A8F7E70C[Type];
  }
  if (v19 > 5) {
    unsigned int v24 = 1;
  }
  else {
    unsigned int v24 = dword_1A8F7E70C[v19];
  }
  if (v23 < v24) {
    return -1;
  }
  else {
    return 1;
  }
}

uint64_t CalEventOccurrenceGetEvent(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

double CalEventOccurrenceGetDate(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

void CalEventOccurrenceDestroy(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  CFRelease(v2);
}

uint64_t _DayAndOccurrenceLoadHandler(uint64_t a1, CFMutableArrayRef *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!*a2) {
    *a2 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  double v4 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 0);
  int v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  int valuePtr = v5;
  double v6 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  int v7 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), 3);
  double v8 = 0.0;
  if (v7 != 5) {
    double v8 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 3);
  }
  if (v5 == -1)
  {
    uint64_t v14 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_ERROR, "Skipping invalid entry in occurrence cache occurring at %f with eventID -1", buf, 0xCu);
    }
  }
  else
  {
    CFDateRef v9 = CFDateCreate(0, v4);
    CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDateRef v11 = CFDateCreate(0, v6);
    if (v7 == 5)
    {
      CFDateRef v12 = 0;
      CFIndex v13 = 2;
    }
    else
    {
      CFDateRef v12 = CFDateCreate(0, v8);
      CFIndex v13 = 3;
    }
    *(_OWORD *)buf = xmmword_1E5D6BD00;
    int v20 = @"nextReminderDate";
    values[0] = v10;
    values[1] = v11;
    values[2] = v12;
    CFDictionaryRef v15 = CFDictionaryCreate(0, (const void **)buf, (const void **)values, v13, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayAppendValue(*a2, v15);
    CFRelease(v15);
    CFRelease(v11);
    if (v12) {
      CFRelease(v12);
    }
    CFRelease(v10);
    CFRelease(v9);
  }
  return 0;
}

__CFArray *CalDatabaseCopyEventOccurrencesInDateRangeEx(os_unfair_lock_s *a1, void *a2, void *a3, void *a4, void *a5)
{
  return _CalDatabaseCopyEventOccurrencesInDateRangeInternal(a1, a2, a3, a4, a5, 0, 0);
}

void _CalLoadRelation(uint64_t a1, int a2)
{
  uint64_t PropertyDescriptor = CPRecordGetPropertyDescriptor();
  if (!PropertyDescriptor) {
    return;
  }
  if (*(_UNKNOWN **)(PropertyDescriptor + 16) != &kCalRelationMethods) {
    return;
  }
  uint64_t v5 = *(void *)(PropertyDescriptor + 32);
  if (!v5) {
    return;
  }
  CFIndex v6 = *(unsigned int *)(v5 + 32);
  if ((int)v6 < 1)
  {
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, v6, MEMORY[0x1E4F1D510]);
    if (*(int *)(v5 + 32) >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, (const void *)(*(void *)(v5 + 24) + v8));
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        ++v9;
        v8 += 4;
      }
      while (v9 < *(int *)(v5 + 32));
    }
  }
  if (*(_DWORD *)v5 == -1)
  {
    CFIndex v13 = *(const char **)(v5 + 8);
    if (v13) {
      CFStringRef v11 = CFStringCreateWithCString(0, v13, 0x8000100u);
    }
    else {
      CFStringRef v11 = 0;
    }
    uint64_t v14 = (const void *)CalToManyRelationCreateWithEntityTypeAndFilter(a1, a2, *(void *)(v5 + 16), Mutable, *(_DWORD *)(v5 + 4), v11);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
    CFRelease(v14);
    if (!v11) {
      goto LABEL_28;
    }
  }
  else
  {
    CFStringRef v11 = (const __CFString *)CalRelationCreate(a1, a2, *(void *)(v5 + 16), Mutable, *(unsigned char *)(v5 + 36), *(void *)(v5 + 40));
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFDateRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
  }
  CFRelease(v11);
LABEL_28:
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t CalRelationCreate(uint64_t a1, int a2, uint64_t a3, const __CFArray *a4, char a5, uint64_t a6)
{
  pthread_once(&__CalRelationRegisterOnce, (void (*)(void))CalRelationRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  CFIndex v13 = *(_DWORD **)(CPRecordGetPropertyDescriptor() + 32);
  *(void *)(Instance + 16) = a1;
  LODWORD(v13) = *v13;
  *(_DWORD *)(Instance + 24) = a2;
  *(_DWORD *)(Instance + 28) = v13;
  *(void *)(Instance + 48) = a3;
  *(void *)(Instance + 56) = 0;
  *(unsigned char *)(Instance + 40) = a5;
  *(void *)(Instance + 64) = a6;
  pthread_mutex_init((pthread_mutex_t *)(Instance + 72), 0);
  CFArrayRef Copy = 0;
  if (a4) {
    CFArrayRef Copy = CFArrayCreateCopy(0, a4);
  }
  *(void *)(Instance + 32) = Copy;
  return Instance;
}

uint64_t CalToManyRelationCreateWithEntityTypeAndFilter(uint64_t a1, int a2, uint64_t a3, const __CFArray *a4, int a5, const __CFString *a6)
{
  pthread_once(&__CalToManyRelationRegisterOnce, (void (*)(void))CalToManyRelationRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = a1;
  *(_DWORD *)(Instance + 24) = a2;
  *(void *)(Instance + 56) = a3;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(void *)(Instance + 96) = 0;
  *(_DWORD *)(Instance + 48) = a5;
  CFStringRef Copy = 0;
  if (a6) {
    CFStringRef Copy = CFStringCreateCopy(0, a6);
  }
  *(void *)(Instance + 40) = Copy;
  CFArrayRef v14 = 0;
  if (a4) {
    CFArrayRef v14 = CFArrayCreateCopy(0, a4);
  }
  *(void *)(Instance + 32) = v14;
  return Instance;
}

uint64_t _CalLocationGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalRecurrenceCopyOwner(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = (const void *)_CalRecurrenceGetOwner(a1, 0);
  double v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalEventOccurrenceCreateForInitialOccurrenceWithTimeZone(const void *a1, void *a2)
{
  *(double *)&uint64_t v4 = COERCE_DOUBLE(CalEventCopyStartDate((uint64_t)a1));
  CFStringRef v6 = v5;
  double v7 = *(double *)&v4;
  id v8 = a2;
  if (v8)
  {
    if (!v6) {
      goto LABEL_7;
    }
  }
  else
  {
    id v8 = (id)CalCopyTimeZone();
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (CFEqual(v6, @"_float"))
  {
    uint64_t v9 = (const void *)CalTimeZoneCopyCFTimeZone();
    CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
    double v7 = v10;
    CFRelease(v9);
  }
LABEL_7:
  uint64_t v11 = CalEventOccurrenceCreate(a1, v8, v7);
  CalDateTimeRelease();

  return v11;
}

uint64_t _CalEventCopyStartDateWhileLocked(uint64_t a1, char a2)
{
  RecordLock = 0;
  if ((a2 & 1) == 0)
  {
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
  }
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CalDateTimeSetTimeZone();
  if ((a2 & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(RecordLock);
    }
    os_unfair_lock_unlock(RecordLock);
  }
  return *(void *)&DateProperty;
}

double CalRecurrenceGetEffectiveEndDate(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  double v4 = *MEMORY[0x1E4F57888];
  if (vabdd_f64(DateProperty, *MEMORY[0x1E4F57888]) < 2.22044605e-16)
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    __CalDatabaseBeginReadTransaction(DatabaseForRecord, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalRecurrence.m:1057");
    _CalRecurrenceGenerateCachedEndDate(a1);
    __CalDatabaseRollbackTransaction(DatabaseForRecord, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalRecurrence.m:1059");
    Dateuint64_t Property = COERCE_DOUBLE(_CalRecurrenceCopyCachedEndDate(a1));
    CalDateTimeRelease();
    if (vabdd_f64(DateProperty, v4) < 2.22044605e-16) {
      Dateuint64_t Property = v4;
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

uint64_t CalGetDatabaseForRecord()
{
  uint64_t result = CPRecordGetStore();
  if (result)
  {
    return CPRecordStoreGetContext();
  }
  return result;
}

void _CalRecurrenceGenerateCachedEndDate(uint64_t a1)
{
  if (!CPRecordGetStore()) {
    goto LABEL_8;
  }
  uint64_t Context = CPRecordStoreGetContext();
  if (!Context) {
    goto LABEL_8;
  }
  uint64_t v3 = _CalDatabaseCopyEventOccurrenceCache(Context);
  if (!v3) {
    goto LABEL_8;
  }
  double v4 = (const void *)v3;
  TimeZone = (const void *)_CalEventOccurrenceCacheGetTimeZone(v3);
  if (!TimeZone)
  {
    CFRelease(v4);
LABEL_8:
    CFStringRef v6 = (const void *)CalCopyTimeZone();
    goto LABEL_9;
  }
  CFStringRef v6 = CFRetain(TimeZone);
  CFRelease(v4);
  if (!v6) {
    goto LABEL_8;
  }
LABEL_9:
  CFTypeRef Owner = (const void *)_CalRecurrenceGetOwner(a1, 0);
  if (Owner)
  {
    uint64_t v8 = (uint64_t)Owner;
    if (_CalEntityIsOfType(Owner, 2))
    {
      int Count = _CalRecurrenceGetCount(a1);
      if (Count >= 1)
      {
        int v10 = Count;
        DateCFStringRef Property = _CalRecordGetDateProperty(v8);
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFDateRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12) {
              os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
        CFStringRef Property = (const __CFString *)CPRecordGetProperty();
        CFComparisonResult v14 = CFStringCompare(Property, @"_float", 0);
        CFDictionaryRef v15 = (const void *)CalTimeZoneCopyCFTimeZone();
        int v16 = v15;
        if (v6 && v15)
        {
          BOOL v17 = v14 == kCFCompareEqualTo;
          if (CFEqual(v6, v15)) {
            int v18 = v6;
          }
          else {
            int v18 = v16;
          }
          _CalRecurrenceGetOrComputeCachedEndDate(a1, v10, v17, v18, DateProperty);
        }
        else
        {
          _CalRecurrenceGetOrComputeCachedEndDate(a1, v10, v14 == kCFCompareEqualTo, v6, DateProperty);
          if (!v16) {
            goto LABEL_24;
          }
        }
        CFRelease(v16);
      }
    }
  }
LABEL_24:
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t _CalRecurrenceGetOwner(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result) {
    uint64_t result = (uint64_t)CalRelationGetRelatedObject(result);
  }
  if (!result && a2)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFStringRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    if ((int)CPRecordGetIntegerProperty() < 1)
    {
      return 0;
    }
    else
    {
      uint64_t Store = CPRecordGetStore();
      return _CalGetCalendarItemWithRowID(Store);
    }
  }
  return result;
}

uint64_t _CalRecurrenceGetCount(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetIntegerProperty();
}

uint64_t _CalRecurrenceCopyCachedEndDate(uint64_t a1)
{
  v8[1] = 0;
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  *(double *)uint64_t v8 = DateProperty;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (fabs(DateProperty) < 2.22044605e-16 && Property == 0)
  {
    CFStringRef v6 = (void *)MEMORY[0x1E4F57888];
  }
  else
  {
    CFStringRef v6 = v8;
    CalDateTimeSetTimeZone();
  }
  return *v6;
}

void CalEventGetProposedStartDate(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventGetProposedStartDate(a1);
  _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double _CalRecordGetDateProperty(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty())
  {
    JUMPOUT(0x1AD0E87A0);
  }
  return *MEMORY[0x1E4F57888];
}

double _CalEventGetProposedStartDate(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (!Property) {
    return *MEMORY[0x1E4F57888];
  }
  return _CFDateRefToCalDate(Property);
}

uint64_t _CalEventOccurrenceCacheGetTimeZone(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t _CalEntityIsOfType(const void *a1, int a2)
{
  Typeuint64_t ID = CPRecordGetTypeID();
  if (TypeID != CFGetTypeID(a1)) {
    return 0;
  }
  int v5 = *(_DWORD *)(CPRecordGetClass() + 64);
  if (v5 == a2) {
    return 1;
  }
  if ((a2 - 7) <= 1)
  {
    if (v5 == 100)
    {
      Entityunsigned int Type = _CalParticipantGetEntityType((uint64_t)a1);
      return EntityType == a2;
    }
    return 0;
  }
  if ((a2 & 0xFFFFFFFE) == 2)
  {
    if (v5 == 101)
    {
      Entityunsigned int Type = _CalCalendarItemGetEntityType((uint64_t)a1);
      return EntityType == a2;
    }
    return 0;
  }
  uint64_t result = 0;
  BOOL v8 = (a2 & 0xFFFFFFFE) == 0x10 || a2 == 19;
  if (v8 && v5 == 102)
  {
    Entityunsigned int Type = _CalNotificationGetEntityType((uint64_t)a1);
    return EntityType == a2;
  }
  return result;
}

uint64_t CalEventCopyStartDate(uint64_t a1)
{
  return _CalEventCopyStartDateWhileLocked(a1, 0);
}

void _CalLoadLazyString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v6 = *(void *)CPRecordGetPropertyDescriptor();
    Class = (void *)CPRecordGetClass();
    CFStringRef v8 = CFStringCreateWithFormat(v5, 0, @"SELECT %s FROM %s WHERE ROWID = ?", v6, *Class);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a3)
      {
        if (*(void *)(*(void *)a3 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t v10 = CPSqliteConnectionStatementForSQL();
    if (v10)
    {
      uint64_t v11 = (uint64_t **)v10;
      CFDateRef v12 = *(sqlite3_stmt **)(v10 + 8);
      int ID = CPRecordGetID();
      sqlite3_bind_int(v12, 1, ID);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          uint64_t v14 = **v11;
          if (v14)
          {
            if (*(void *)(v14 + 104))
            {
              CFDictionaryRef v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15) {
                os_unfair_lock_assert_owner(v15 + 20);
              }
            }
          }
        }
      }
      uint64_t v16 = CPSqliteStatementCopyStringResult();
      if (v16)
      {
        BOOL v17 = (const void *)v16;
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              int v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v18) {
                os_unfair_lock_assert_owner(v18 + 20);
              }
            }
          }
        }
        CPRecordInitializeProperty();
        CFRelease(v17);
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          uint64_t v19 = **v11;
          if (v19)
          {
            if (*(void *)(v19 + 104))
            {
              int v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20) {
                os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if (v8)
    {
      CFRelease(v8);
    }
  }
}

uint64_t CalDatabaseSetIsUnitTesting(uint64_t result, char a2)
{
  *(unsigned char *)(result + 272) = a2;
  return result;
}

uint64_t CalDatabaseSetAuxilliaryDatabaseID(uint64_t result, int a2)
{
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t _FastOccurrenceLoadHandler(uint64_t a1, uint64_t a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  double v5 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 1);
  double v6 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  if (v6 >= *(double *)(a2 + 16) && v5 < *(double *)(a2 + 24))
  {
    double v7 = malloc_type_malloc(0x18uLL, 0x1000040D315E998uLL);
    CFStringRef v8 = v7;
    if (v7)
    {
      *double v7 = v4;
      *((double *)v7 + 1) = v5;
      *((double *)v7 + 2) = v6;
    }
    else
    {
      CFLog();
    }
    if (*(void *)a2) {
      CFSetAddValue(*(CFMutableSetRef *)a2, (const void *)v4);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), v8);
  }
  return 0;
}

uint64_t CalLocationGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalLocationGetPropertyIDWithPropertyName_sPropDict;
  if (!CalLocationGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalLocationGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalLocationGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"title";
      int v6 = 0;
      double v7 = @"address";
      int v8 = 1;
      uint64_t v9 = @"latitude";
      int v10 = 2;
      uint64_t v11 = @"longitude";
      int v12 = 3;
      CFIndex v13 = @"referenceFrame";
      int v14 = 4;
      CFDictionaryRef v15 = @"contactLabel";
      int v16 = 5;
      BOOL v17 = @"mapKitHandle";
      int v18 = 6;
      uint64_t v19 = @"radius";
      int v20 = 7;
      uint64_t v21 = @"routing";
      int v22 = 8;
      unsigned int v23 = @"derivedFrom";
      int v24 = 9;
      uint64_t v25 = @"calendarItemOwner";
      int v26 = 15;
      int v27 = @"alarmOwner";
      int v28 = 16;
      CalLocationGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 12);
      for (uint64_t i = 176; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalLocationGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalLocationGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8E8E3D8(_Unwind_Exception *a1)
{
  for (uint64_t i = 176; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

BOOL CalStoreIsFacebook(uint64_t a1)
{
  return CalStoreGetFlag(a1, 64);
}

uint64_t CalCalendarGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalCalendarGetPropertyIDWithPropertyName_sPropDict;
  if (!CalCalendarGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalCalendarGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalCalendarGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"UUID";
      int v6 = 14;
      double v7 = @"externalID";
      int v8 = 8;
      uint64_t v9 = @"unlocalizedTitle";
      int v10 = 1;
      uint64_t v11 = @"colorStringRaw";
      int v12 = 3;
      CFIndex v13 = @"symbolicColorName";
      int v14 = 4;
      CFDictionaryRef v15 = @"colorDisplayOnly";
      int v16 = 5;
      BOOL v17 = @"externalModificationTag";
      int v18 = 9;
      uint64_t v19 = @"externalIDTag";
      int v20 = 10;
      uint64_t v21 = @"externalRepresentation";
      int v22 = 11;
      unsigned int v23 = @"displayOrder";
      int v24 = 12;
      uint64_t v25 = @"source";
      int v26 = 50;
      int v27 = @"flags";
      int v28 = 2;
      uint64_t v29 = @"allowedEntities";
      int v30 = 7;
      CFStringRef v31 = @"sharedOwnerName";
      int v32 = 15;
      uint64_t v33 = @"sharedOwnerURLString";
      int v34 = 16;
      double v35 = @"cachedExternalInfoData";
      int v36 = 17;
      uint64_t v37 = @"sharingStatus";
      int v38 = 18;
      id v39 = @"sharingInvitationResponse";
      int v40 = 19;
      v41 = @"publishURLString";
      int v42 = 20;
      uint64_t v43 = @"isPublished";
      int v44 = 21;
      long long v45 = @"invitationStatus";
      int v46 = 22;
      long long v47 = @"syncToken";
      int v48 = 23;
      id v49 = @"selfIdentityEmail";
      int v50 = 27;
      CFArrayRef v51 = @"selfIdentityPhoneNumber";
      int v52 = 28;
      v53 = @"ownerIdentityEmail";
      int v54 = 30;
      CFIndex v55 = @"ownerIdentityPhoneNumber";
      int v56 = 31;
      id v57 = @"notes";
      int v58 = 32;
      id v59 = @"subcalAccountID";
      int v60 = 34;
      char v61 = @"pushKey";
      int v62 = 35;
      v63 = @"digest";
      int v64 = 36;
      double v65 = @"refreshDate";
      int v66 = 37;
      id v67 = @"subscriptionID";
      int v68 = 38;
      id v69 = @"lastSyncStartDate";
      int v70 = 39;
      v71 = @"lastSyncEndDate";
      int v72 = 40;
      uint64_t v73 = @"subcalURL";
      int v74 = 41;
      uint64_t v75 = @"refreshInterval";
      int v76 = 42;
      uint64_t v77 = @"pubcalAccountID";
      int v78 = 43;
      CFIndex v79 = @"sharees";
      int v80 = 52;
      uint64_t v81 = @"notifications";
      int v82 = 53;
      double v83 = @"selfIdentityDisplayName";
      int v84 = 55;
      v85 = @"ownerIdentityId";
      int v86 = 29;
      v87 = @"selfIdentityAddressString";
      int v88 = 56;
      v89 = @"ownerIdentityDisplayName";
      int v90 = 57;
      v91 = @"ownerIdentityAddressString";
      int v92 = 58;
      v93 = @"selfIdentityFirstName";
      int v94 = 59;
      v95 = @"selfIdentityLastName";
      int v96 = 60;
      v97 = @"ownerIdentityFirstName";
      int v98 = 61;
      v99 = @"ownerIdentityLastName";
      int v100 = 62;
      id v101 = @"allAlarms";
      int v102 = 63;
      v103 = @"syncError";
      int v104 = 65;
      v105 = @"maxAttendees";
      int v106 = 46;
      v107 = @"lastSyncTitle";
      int v108 = 47;
      v109 = @"locale";
      int v110 = 48;
      v111 = @"image";
      int v112 = 66;
      CalCalendarGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 54);
      for (uint64_t i = 848; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalCalendarGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalCalendarGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8E8EAD0(_Unwind_Exception *a1)
{
  for (uint64_t i = 848; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

__CFString *CalEntityTypeGetName(int a1)
{
  uint64_t result = 0;
  if (a1 > 99)
  {
    uint64_t v3 = @"CalendarItem";
    int v4 = @"Notification";
    if (a1 != 102) {
      int v4 = 0;
    }
    if (a1 != 101) {
      uint64_t v3 = v4;
    }
    if (a1 == 100) {
      return @"Participant";
    }
    else {
      return v3;
    }
  }
  else
  {
    switch(a1)
    {
      case -1:
        uint64_t result = @"Undefined";
        break;
      case 1:
        uint64_t result = @"Calendar";
        break;
      case 2:
        uint64_t result = @"Event";
        break;
      case 3:
        uint64_t result = @"Task";
        break;
      case 4:
        uint64_t result = @"Alarm";
        break;
      case 5:
        uint64_t result = @"RecurrenceRule";
        break;
      case 6:
        uint64_t result = @"Source";
        break;
      case 7:
        uint64_t result = @"Attendee";
        break;
      case 8:
        uint64_t result = @"Organizer";
        break;
      case 9:
        uint64_t result = @"EventAction";
        break;
      case 10:
        uint64_t result = @"ExceptionDate";
        break;
      case 11:
        uint64_t result = @"Attachment";
        break;
      case 12:
        uint64_t result = @"Category";
        break;
      case 13:
        uint64_t result = @"CategoryLink";
        break;
      case 14:
        uint64_t result = @"Location";
        break;
      case 15:
        uint64_t result = @"Sharee";
        break;
      case 16:
        uint64_t result = @"InviteReplyNotification";
        break;
      case 17:
        uint64_t result = @"ResourceChangeNotification";
        break;
      case 18:
        uint64_t result = @"ResourceChange";
        break;
      case 19:
        uint64_t result = @"SuggestionNotification";
        break;
      case 20:
        uint64_t result = @"SuggestedEventInfo";
        break;
      case 21:
        uint64_t result = @"Contact";
        break;
      case 23:
        uint64_t result = @"Conference";
        break;
      case 24:
        uint64_t result = @"Error";
        break;
      case 25:
        uint64_t result = @"AttachmentFile";
        break;
      case 26:
        uint64_t result = @"AuxDatabase";
        break;
      case 27:
        uint64_t result = @"AuxDatabaseAccount";
        break;
      case 28:
        uint64_t result = @"Image";
        break;
      case 29:
        uint64_t result = @"Color";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t CalDatabaseNextInMemoryChangeTrackingClientID()
{
  return atomic_fetch_add_explicit(CalDatabaseNextInMemoryChangeTrackingClientID_sNextID, 1u, memory_order_relaxed) & 0x1FFFFF;
}

uint64_t CalEventOccurrenceCreateForInitialOccurrence(const void *a1)
{
  return CalEventOccurrenceCreateForInitialOccurrenceWithTimeZone(a1, 0);
}

CFArrayRef CalDatabaseCopyOfAllNotifiableEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  return CalDatabaseCopyOfAllNotifiableOrRepliedEventsInStore(a1, a2, 0);
}

uint64_t CalStoreGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalStoreGetPropertyIDWithPropertyName_sPropDict;
  if (!CalStoreGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalStoreGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalStoreGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"UUID";
      int v6 = 7;
      double v7 = @"externalID";
      int v8 = 6;
      uint64_t v9 = @"title";
      int v10 = 0;
      uint64_t v11 = @"notes";
      int v12 = 1;
      CFIndex v13 = @"defaultAlarmOffset";
      int v14 = 2;
      CFDictionaryRef v15 = @"sourceTypeRaw";
      int v16 = 3;
      BOOL v17 = @"disabled";
      int v18 = 5;
      uint64_t v19 = @"flags";
      int v20 = 8;
      uint64_t v21 = @"flags2";
      int v22 = 28;
      unsigned int v23 = @"creatorBundleID";
      int v24 = 13;
      uint64_t v25 = @"creatorCodeSigningIdentity";
      int v26 = 14;
      int v27 = @"onlyCreatorCanModify";
      int v28 = 15;
      uint64_t v29 = @"externalModificationTag";
      int v30 = 16;
      CFStringRef v31 = @"preferredEventPrivateValueRaw";
      int v32 = 18;
      uint64_t v33 = @"strictestEventPrivateValueRaw";
      int v34 = 19;
      double v35 = @"constraintsName";
      int v36 = 4;
      uint64_t v37 = @"lastSyncStartDate";
      int v38 = 20;
      id v39 = @"lastSyncEndDate";
      int v40 = 21;
      v41 = @"delegatedAccountOwnerStoreID";
      int v42 = 24;
      uint64_t v43 = @"showsNotifications";
      int v44 = 27;
      long long v45 = @"displayOrder";
      int v46 = 29;
      long long v47 = @"ownerName";
      int v48 = 30;
      id v49 = @"defaultAllDayAlarmOffset";
      int v50 = 31;
      CFArrayRef v51 = @"syncError";
      int v52 = 33;
      v53 = @"cachedExternalInfoData";
      int v54 = 34;
      CFIndex v55 = @"appGroupIdentifier";
      int v56 = 35;
      CalStoreGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 26);
      for (uint64_t i = 400; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalStoreGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalStoreGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8E8F0A0(_Unwind_Exception *a1)
{
  for (uint64_t i = 400; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t CalAttendeeGetPropertyIDWithPropertyName(void *key)
{
  if (CalAttendeeGetPropertyIDWithPropertyName_onceToken != -1) {
    dispatch_once(&CalAttendeeGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_37);
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalAttendeeGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t CalOrganizerGetPropertyIDWithPropertyName(void *key)
{
  if (CalOrganizerGetPropertyIDWithPropertyName_onceToken != -1) {
    dispatch_once(&CalOrganizerGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_43);
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalOrganizerGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void _CalEventLoadHasDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    Class = (void *)CPRecordGetClass();
    CFStringRef v7 = CFStringCreateWithFormat(v5, 0, @"SELECT (description != '') FROM %s WHERE ROWID = ?", *Class);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a3)
      {
        if (*(void *)(*(void *)a3 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t v9 = CPSqliteConnectionStatementForSQL();
    if (v9)
    {
      int v10 = (uint64_t **)v9;
      uint64_t v11 = *(sqlite3_stmt **)(v9 + 8);
      int ID = CPRecordGetID();
      sqlite3_bind_int(v11, 1, ID);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v10)
        {
          uint64_t v13 = **v10;
          if (v13)
          {
            if (*(void *)(v13 + 104))
            {
              int v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14) {
                os_unfair_lock_assert_owner(v14 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementIntegerResult();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFDictionaryRef v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15) {
              os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
      CPRecordInitializeProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v10)
        {
          uint64_t v16 = **v10;
          if (v16)
          {
            if (*(void *)(v16 + 104))
            {
              BOOL v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17) {
                os_unfair_lock_assert_owner(v17 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if (v7)
    {
      CFRelease(v7);
    }
  }
}

uint64_t CalStoreCopyDelegatedAccountOwnerStoreID(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalStoreCopyDelegatedAccountOwnerStoreID(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalStoreCopyDelegatedAccountOwnerStoreID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

BOOL CalStoreSupportsTravelTime(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x8000);
}

BOOL CalStoreSupportsSubscriptionMirroring(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 4096);
}

BOOL CalStoreSupportsSubscriptionCalendars(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 8);
}

BOOL CalStoreSupportsSharedCalendars(uint64_t a1)
{
  return CalStoreGetFlag(a1, 32);
}

BOOL CalStoreSupportsRecurrenceSplit(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 1);
}

BOOL CalStoreSupportsPush(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x4000);
}

BOOL CalStoreSupportsPrivateEvents(uint64_t a1)
{
  return CalStoreGetFlag(a1, 1024);
}

BOOL CalStoreSupportsParticipantRoles(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x2000);
}

BOOL CalStoreSupportsManagedSubscriptionCalendars(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 1024);
}

BOOL CalStoreSupportsLocationDirectorySearches(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x20000);
}

BOOL CalStoreSupportsInvitationModificationsWithoutNotification(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 128);
}

BOOL CalStoreSupportsInboxAvailability(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 4);
}

BOOL CalStoreSupportsIgnoringEventsInAvailabilityRequests(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x80000);
}

BOOL CalStoreSupportsFloatingTimeZone(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 2);
}

BOOL CalStoreSupportsEventForwarding(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x200000);
}

BOOL CalStoreSupportsAvailabilityRequests(uint64_t a1)
{
  return CalStoreGetFlag(a1, 4096);
}

BOOL CalStoreSupportsAttachments(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x10000000);
}

BOOL CalStoreSnoozeAlarmRequiresDetach(uint64_t a1)
{
  return CalStoreGetFlag(a1, 256);
}

BOOL CalStoreShouldUseDeleteAndAddInsteadOfMoveBetweenCalendars(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 64);
}

BOOL CalStoreRequiresSamePrivacyLevelAcrossRecurrenceSeries(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x2000);
}

BOOL CalStoreRequiresOpeningAttachmentAsLink(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 32);
}

BOOL CalStoreRequiresOccurrencesConformToRecurrenceRule(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x100000);
}

BOOL CalStoreProhibitsYearlyRecurrenceInterval(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x10000);
}

BOOL CalStoreProhibitsUsingEventOrganizerEmailWhenComposingMail(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 16);
}

BOOL CalStoreProhibitsSlicingEventsWithAttendees(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x8000000);
}

BOOL CalStoreProhibitsPrivateEventsWithAttendees(uint64_t a1)
{
  return CalStoreGetFlag(a1, 2048);
}

BOOL CalStoreProhibitsMultipleMonthsInYearlyRecurrence(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x4000);
}

BOOL CalStoreProhibitsMultipleDaysInMonthlyRecurrence(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x8000);
}

BOOL CalStoreProhibitsDetachmentOnCommentChange(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x40000);
}

BOOL CalStoreGetSupportsPhoneNumbers(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x4000000);
}

BOOL CalStoreGetSupportsJunkReporting(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x2000000);
}

BOOL CalStoreGetSupportsClearingPrivateComments(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x20000);
}

BOOL CalStoreGetProhibitsICSImport(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x800000);
}

BOOL CalStoreAllowsProposeNewTime(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x400000);
}

BOOL CalStoreAllowsPrivateEventAccessByDelegate(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x10000);
}

uint64_t CalCalendarItemGetRowID()
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t _CalParticipantGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t CalStoreSupportsAlarmTriggerIntervals(uint64_t a1)
{
  return CalStoreSupportsAlarmTriggerKey(a1, @"Interval");
}

uint64_t CalStoreSupportsAlarmTriggerDates(uint64_t a1)
{
  return CalStoreSupportsAlarmTriggerKey(a1, @"Absolute");
}

uint64_t CalDatabaseCreateWithConfiguration(void *a1)
{
  *(void *)&v97[5] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  CDBLogInitIfNeeded();
  if (CalDatabaseCreateWithConfiguration_onceToken != -1) {
    dispatch_once(&CalDatabaseCreateWithConfiguration_onceToken, &__block_literal_global_86);
  }
  CFDictionaryRef v2 = (id)CDBLogHandle;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)v97 = v1;
    _os_log_impl(&dword_1A8E81000, v2, OS_LOG_TYPE_DEBUG, "Creating database with configuration: [%@]", buf, 0xCu);
  }

  pthread_once(&__CalDatabaseRegisterOnce, (void (*)(void))CalDatabaseRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  unsigned int v4 = [v1 options];
  if ((v4 & 0x30) == 0x10) {
    unsigned int v5 = v4 & 0xFFFFFFEF;
  }
  else {
    unsigned int v5 = v4;
  }
  if ((v5 & 0x81) == 0)
  {
    if (CalDatabaseIsCurrentProcessCalaccessd_onceToken != -1) {
      dispatch_once(&CalDatabaseIsCurrentProcessCalaccessd_onceToken, &__block_literal_global_75);
    }
    if (CalDatabaseIsCurrentProcessCalaccessd_isCalaccessd) {
      CalDatabasePerformMigrationIfNeeded();
    }
    else {
      CalDatabaseMigrateIfNeededOutOfProcess();
    }
  }
  *(_DWORD *)(Instance + 80) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(Instance + 80));
  *(void *)(Instance + 24) = 0;
  int v6 = (uint64_t *)(Instance + 24);
  *(_DWORD *)(Instance + 84) = 0;
  *(_DWORD *)(Instance + 88) = 0;
  *(void *)(Instance + 32) = 0;
  *(void *)(Instance + 40) = 0;
  *(void *)(Instance + 120) = 0xFFFFFFFF00000000;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(void *)(Instance + 96) = 0;
  *(void *)(Instance + 104) = 0;
  *(_DWORD *)(Instance + 176) = -1;
  *(_DWORD *)(Instance + 16) = v5;
  *(_OWORD *)(Instance + 200) = 0u;
  *(_OWORD *)(Instance + 216) = 0u;
  *(_OWORD *)(Instance + 232) = 0u;
  *(void *)(Instance + 248) = 0;
  *(void *)(Instance + 184) = 0;
  *(void *)(Instance + 192) = 850045858;
  *(unsigned char *)(Instance + 256) = 1;
  *(_WORD *)(Instance + 376) = 0;
  objc_storeWeak((id *)(Instance + 304), 0);
  objc_storeWeak((id *)(Instance + 320), 0);
  *(_DWORD *)(Instance + 312) = -1;
  *(void *)(Instance + 160) = CalMonotonicTime();
  *(_DWORD *)(Instance + 168) = 0;
  uint64_t v7 = [MEMORY[0x1E4F1CA60] dictionary];
  int v8 = *(void **)(Instance + 328);
  *(void *)(Instance + 328) = v7;

  *(unsigned char *)(Instance + 378) = (v5 & 0x800) != 0;
  *(void *)(Instance + 352) = 0xFFFFLL;
  *(_DWORD *)(Instance + 360) = -1;
  uint64_t v9 = [v1 directoryURL];
  v93 = v9;
  int v10 = v9;
  if (v9)
  {
    char v11 = [v9 startAccessingSecurityScopedResource];
    int v10 = v93;
  }
  else
  {
    char v11 = 0;
  }
  *(unsigned char *)(Instance + 380) = v11;
  int v12 = [v10 path];
  v91 = [v12 stringByAppendingString:@"/"];

  if ([MEMORY[0x1E4F577F0] isRunningAsSetupUser])
  {
    uint64_t v13 = (id)CDBLogHandle;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Forcing in-memory database because we are running as the setup user. No changes will be saved.", buf, 2u);
    }

    int v14 = 1;
  }
  else
  {
    int v14 = (v5 >> 5) & 1;
  }
  obCFIndex j = [v1 preferences];
  if (!obj)
  {
    if ((v14 & 1) == 0)
    {
      BOOL v17 = +[CDBPreferences sharedReadWrite];
      obCFIndex j = v17;

      objc_storeStrong((id *)(Instance + 296), v17);
      goto LABEL_29;
    }
    CFDictionaryRef v15 = +[CDBPreferences sharedReadOnly];
    obCFIndex j = v15;

    objc_storeStrong((id *)(Instance + 296), v15);
LABEL_27:
    IfNeeded = (void *)CFRetain(@":memory:");
LABEL_33:
    *(void *)(Instance + 128) = IfNeeded;
    goto LABEL_34;
  }
  objc_storeStrong((id *)(Instance + 296), obj);
  if (v14) {
    goto LABEL_27;
  }
LABEL_29:
  if (!v91)
  {
    IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 1);
    goto LABEL_33;
  }
  *(void *)(Instance + 128) = v91;
  if ((v5 & 0x1000) != 0)
  {
    int v46 = [v93 URLByAppendingPathComponent:*MEMORY[0x1E4F57870]];
    long long v47 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v48 = [v46 path];
    char v49 = [v47 fileExistsAtPath:v48];

    if ((v49 & 1) == 0)
    {
      int v88 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)v97 = v93;
        _os_log_impl(&dword_1A8E81000, v88, OS_LOG_TYPE_DEFAULT, "Failing to create with path %@ because no database exists at that location and we were told not to make one.", buf, 0xCu);
      }
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner((const os_unfair_lock *)(Instance + 80));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(Instance + 80));
      CFRelease((CFTypeRef)Instance);

      goto LABEL_222;
    }
  }
  else
  {
    CPFileBuildDirectoriesToPath();
  }
LABEL_34:
  uint64_t v18 = +[CalDatabaseWriteLock writeLockForDatabasePath:*(void *)(Instance + 128)];
  uint64_t v19 = *(void **)(Instance + 336);
  *(void *)(Instance + 336) = v18;

  CFStringRef v20 = *(const __CFString **)(Instance + 128);
  if (!v20)
  {
    int v24 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_186;
    }
    *(_WORD *)buf = 0;
    uint64_t v25 = "Couldn't get the path to the calendar database.";
LABEL_185:
    _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_ERROR, v25, buf, 2u);
    goto LABEL_186;
  }
  if (CFEqual(v20, @":memory:"))
  {
    uint64_t v23 = CPRecordStoreCreateWithPathAndOptions();
    if (!v23) {
      goto LABEL_186;
    }
    goto LABEL_42;
  }
  MutableCFStringRef Copy = CFStringCreateMutableCopy(0, 0, *(CFStringRef *)(Instance + 128));
  int v22 = MutableCopy;
  if (!MutableCopy)
  {
    int v24 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_186;
    }
    *(_WORD *)buf = 0;
    uint64_t v25 = "Couldn't construct a path to the calendar database.";
    goto LABEL_185;
  }
  CFStringAppend(MutableCopy, (CFStringRef)*MEMORY[0x1E4F57870]);
  uint64_t v23 = CPRecordStoreCreateWithPathAndOptions();
  CFRelease(v22);
  if (!v23)
  {
LABEL_186:
    *int v6 = 0;
    v71 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A8E81000, v71, OS_LOG_TYPE_ERROR, "Couldn't create calendar database at default path.", buf, 2u);
    }
    goto LABEL_188;
  }
LABEL_42:
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  uint64_t v28 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  CPSqliteDatabaseSetShouldMigrateInProcess();
  if (CDBLockingAssertionsEnabled) {
    BOOL v30 = v28 != 0;
  }
  else {
    BOOL v30 = 0;
  }
  if (v30)
  {
    if (*(void *)(v28 + 104))
    {
      CFStringRef v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v31) {
        os_unfair_lock_assert_owner(v31 + 20);
      }
    }
  }
  CPSqliteDatabaseSetMigrationPluginBundleID();
  CPRecordStoreLogChanges();
  CPRecordStoreSetSetupHandler();
  if (CDBLockingAssertionsEnabled) {
    BOOL v32 = v28 != 0;
  }
  else {
    BOOL v32 = 0;
  }
  if (v32)
  {
    if (*(void *)(v28 + 104))
    {
      uint64_t v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v33) {
        os_unfair_lock_assert_owner(v33 + 20);
      }
    }
  }
  CPSqliteDatabaseSetMigrationHandlers();
  if ((v5 & 0x400) != 0)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v28)
      {
        if (*(void *)(v28 + 104))
        {
          int v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v34) {
            os_unfair_lock_assert_owner(v34 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseSetExternalConversionChecker();
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (v28)
    {
      if (*(void *)(v28 + 104))
      {
        double v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35) {
          os_unfair_lock_assert_owner(v35 + 20);
        }
      }
    }
  }
  CPSqliteDatabaseSetVersion();
  if (CDBLockingAssertionsEnabled) {
    BOOL v36 = v28 != 0;
  }
  else {
    BOOL v36 = 0;
  }
  if (v36)
  {
    if (*(void *)(v28 + 104))
    {
      uint64_t v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v37) {
        os_unfair_lock_assert_owner(v37 + 20);
      }
    }
  }
  CPSqliteDatabaseSetAutoVacuumLevel();
  if (CDBLockingAssertionsEnabled) {
    BOOL v38 = v28 != 0;
  }
  else {
    BOOL v38 = 0;
  }
  if (v38)
  {
    if (*(void *)(v28 + 104))
    {
      id v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v39) {
        os_unfair_lock_assert_owner(v39 + 20);
      }
    }
  }
  CPSqliteDatabaseSetJournalModeWAL();
  if (CDBLockingAssertionsEnabled) {
    BOOL v40 = v28 != 0;
  }
  else {
    BOOL v40 = 0;
  }
  if (v40)
  {
    if (*(void *)(v28 + 104))
    {
      v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v41) {
        os_unfair_lock_assert_owner(v41 + 20);
      }
    }
  }
  CPSqliteDatabaseSetStatementCacheLimit();
  if (CDBLockingAssertionsEnabled) {
    BOOL v42 = v28 != 0;
  }
  else {
    BOOL v42 = 0;
  }
  if (v42)
  {
    if (*(void *)(v28 + 104))
    {
      uint64_t v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v43) {
        os_unfair_lock_assert_owner(v43 + 20);
      }
    }
  }
  CPSqliteDatabaseSetDataProtectionLevel();
  if (CDBLockingAssertionsEnabled) {
    BOOL v44 = v28 != 0;
  }
  else {
    BOOL v44 = 0;
  }
  if ((v5 & 2) != 0)
  {
    if (v44)
    {
      if (*(void *)(v28 + 104))
      {
        int v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v50) {
          os_unfair_lock_assert_owner(v50 + 20);
        }
      }
    }
    CPSqliteDatabaseSetShouldYieldWhenRequested();
  }
  else
  {
    if (v44)
    {
      if (*(void *)(v28 + 104))
      {
        long long v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45) {
          os_unfair_lock_assert_owner(v45 + 20);
        }
      }
    }
    CPSqliteDatabaseSetShouldRequestUnlock();
  }
  *int v6 = v23;
  if (CDBLockingAssertionsEnabled)
  {
    CFArrayRef v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v51) {
      os_unfair_lock_assert_owner(v51 + 20);
    }
  }
  uint64_t v52 = CPRecordStoreGetDatabase();
  CPRecordStoreSetContext();
  if (CDBLockingAssertionsEnabled)
  {
    if (v52)
    {
      if (*(void *)(v52 + 104))
      {
        v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v53) {
          os_unfair_lock_assert_owner(v53 + 20);
        }
      }
    }
  }
  CPSqliteDatabaseSetCorruptionHandler();
  if (CDBLockingAssertionsEnabled) {
    BOOL v54 = v52 != 0;
  }
  else {
    BOOL v54 = 0;
  }
  if (v54)
  {
    if (*(void *)(v52 + 104))
    {
      CFIndex v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v55) {
        os_unfair_lock_assert_owner(v55 + 20);
      }
    }
  }
  CPSqliteDatabaseSetCommitHookCallback();
  if (CDBLockingAssertionsEnabled) {
    BOOL v56 = v52 != 0;
  }
  else {
    BOOL v56 = 0;
  }
  if ((v5 & 0x40) != 0)
  {
    if (v56)
    {
      if (*(void *)(v52 + 104))
      {
        int v70 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v70) {
          os_unfair_lock_assert_owner(v70 + 20);
        }
      }
    }
    CPSqliteDatabaseSetSupportsReadOnlyConnections();
  }
  else
  {
    if (v56)
    {
      if (*(void *)(v52 + 104))
      {
        uint64_t v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v57) {
          os_unfair_lock_assert_owner(v57 + 20);
        }
      }
    }
    CPSqliteDatabaseSetDatabaseDeletedCallback();
    uint64_t v58 = objc_msgSend(*(id *)(Instance + 296), "get_sqlProfileLoggingEnabled");
    int v59 = ct_green_tea_logging_enabled();
    CalDatabaseSetProfilingEnabled(Instance, v58, v59, 0);
    objc_initWeak(&location, (id)Instance);
    if (CDBLockingAssertionsEnabled) {
      BOOL v60 = v52 != 0;
    }
    else {
      BOOL v60 = 0;
    }
    if (v60)
    {
      if (*(void *)(v52 + 104))
      {
        char v61 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v61) {
          os_unfair_lock_assert_owner(v61 + 20);
        }
      }
    }
    objc_copyWeak(&v94, &location);
    CPSqliteRegisterYieldNotifyBlock();
    objc_destroyWeak(&v94);
    if (CDBLockingAssertionsEnabled) {
      BOOL v62 = v52 != 0;
    }
    else {
      BOOL v62 = 0;
    }
    if (v62)
    {
      if (*(void *)(v52 + 104))
      {
        v63 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v63) {
          os_unfair_lock_assert_owner(v63 + 20);
        }
      }
    }
    uint64_t v64 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlagsAndReturnError();
    int v65 = (*(unsigned char *)(Instance + 377) != 0) & (v5 >> 8);
    if (v64)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v64)
        {
          if (*(void *)(*(void *)v64 + 104))
          {
            int v68 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v68) {
              os_unfair_lock_assert_owner(v68 + 20);
            }
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
    else
    {
      int v90 = (*(unsigned char *)(Instance + 377) != 0) & (v5 >> 8);
      int v66 = (id)CDBLogHandle;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        uint64_t v67 = *(void *)(Instance + 128);
        *(_DWORD *)buf = 67109378;
        v97[0] = 0;
        LOWORD(v97[1]) = 2112;
        *(void *)((char *)&v97[1] + 2) = v67;
        _os_log_impl(&dword_1A8E81000, v66, OS_LOG_TYPE_ERROR, "Error [%d] opening a connection to the calendar database at [%@]", buf, 0x12u);
      }

      int v65 = v90;
      if ((v5 & 0x200) != 0) {
        int v65 = 1;
      }
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (v52)
      {
        if (*(void *)(v52 + 104))
        {
          id v69 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v69) {
            os_unfair_lock_assert_owner(v69 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseSetStatementCompileErrorCallback();
    objc_destroyWeak(&location);
    if (v65)
    {
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner((const os_unfair_lock *)(Instance + 80));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(Instance + 80));
      CFRelease((CFTypeRef)Instance);
LABEL_222:
      uint64_t Instance = 0;
LABEL_223:
      v85 = obj;
      goto LABEL_224;
    }
  }
LABEL_188:
  if (CDBLockingAssertionsEnabled)
  {
    if (*v6)
    {
      int v72 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v72) {
        os_unfair_lock_assert_owner(v72 + 20);
      }
    }
  }
  uint64_t v73 = CPRecordStoreGetDatabase();
  uint64_t v74 = *(void *)(v73 + 8);
  if (v74 || (uint64_t v74 = *(void *)(v73 + 280)) != 0)
  {
    sqlite3_rollback_hook(*(sqlite3 **)(v74 + 8), (void (__cdecl *)(void *))_CalDatabaseRollbackHook, (void *)Instance);
  }
  else
  {
    v87 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A8E81000, v87, OS_LOG_TYPE_ERROR, "No existing database handle while setting rollback hook callback.", buf, 2u);
    }
  }
  _CalAttachmentFileRegisterFunctionsWithDatabase(Instance);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  if (!_CalDatabaseShouldPostInProcessChangeNotification(Instance))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, (const void *)Instance, (CFNotificationCallback)_CalDatabaseChangedExternally, @"_CalDatabaseChangedNotification", 0, CFNotificationSuspensionBehaviorDrop);
    CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)Instance, (CFNotificationCallback)_CalDatabaseChangedExternally, @"_CalDatabaseChangedNotification", 0, CFNotificationSuspensionBehaviorDrop);
  }
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)Instance, (CFNotificationCallback)CalDatabaseReceivedSQLProfileLoggingEnabledNotification, @"com.apple.calendar.database.preference.notification.sqlProfileLoggingEnabled", 0, CFNotificationSuspensionBehaviorDrop);
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)Instance, (CFNotificationCallback)CalDatabaseReceivedGreenTeaLoggingEnabledNotification, @"com.apple.ManagedConfiguration.profileListChanged", 0, CFNotificationSuspensionBehaviorDrop);
  os_unfair_lock_lock((os_unfair_lock_t)&__GlobalLock);
  if (!__ValidDatabases)
  {
    uint64_t v77 = [objc_alloc(MEMORY[0x1E4F28D30]) initWithOptions:261 capacity:16];
    int v78 = (void *)__ValidDatabases;
    __ValidDatabases = v77;
  }
  CFIndex v79 = (void *)MEMORY[0x1AD0E9B90]();
  [(id)__ValidDatabases addObject:Instance];
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&__GlobalLock);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&__GlobalLock);
  if ((v5 & 0x10) == 0)
  {
    int v80 = (const void *)CalCopyTimeZone();
    *(void *)(Instance + 32) = CalEventOccurrenceCacheCreateForDatabase(Instance);
    *(void *)(Instance + 40) = CalScheduledTaskCacheCreateForDatabase(Instance, v80);
    CFRelease(v80);
  }
  uint64_t v81 = [v1 dataContainerProvider];
  int v82 = v81;
  if (v81)
  {
    id v83 = v81;
    int v84 = *(void **)(Instance + 288);
    *(void *)(Instance + 288) = v83;
  }
  else
  {
    int v84 = [MEMORY[0x1E4F57800] sharedInstance];
    objc_storeStrong((id *)(Instance + 288), v84);
  }

  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(Instance + 80));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(Instance + 80));
  v85 = obj;
  if (v5)
  {
    if (CalDatabaseCleanUpAttachmentsRemovedDuringMigration_onceToken != -1) {
      dispatch_once(&CalDatabaseCleanUpAttachmentsRemovedDuringMigration_onceToken, &__block_literal_global_397);
    }
    if (CalDatabaseCleanUpAttachmentsRemovedDuringMigration_cleanupRequired)
    {
      int v86 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A8E81000, v86, OS_LOG_TYPE_DEFAULT, "Migration caused some attachments to be removed from the database. Going to try to find any leftover files and remove them now.", buf, 2u);
      }
      CalDatabaseCleanUpOrphanedLocalAttachments((os_unfair_lock_s *)Instance);
      goto LABEL_223;
    }
  }
LABEL_224:

  return Instance;
}

void sub_1A8E90870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

BOOL _CalDatabaseShouldPostInProcessChangeNotification(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained(&calDatabaseDarwinNotificationPoster);
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    CFTypeRef v4 = CFRetain(WeakRetained);
    CFAutorelease(v4);
LABEL_7:
    BOOL v5 = 1;
    goto LABEL_8;
  }
  if ((*(unsigned char *)(a1 + 17) & 0x20) != 0) {
    goto LABEL_7;
  }
  if (CalDatabaseIsCurrentProcessCalaccessd_onceToken != -1) {
    dispatch_once(&CalDatabaseIsCurrentProcessCalaccessd_onceToken, &__block_literal_global_75);
  }
  BOOL v5 = CalDatabaseIsCurrentProcessCalaccessd_isCalaccessd != 0;
LABEL_8:

  return v5;
}

void _CalAttachmentFileRegisterFunctionsWithDatabase(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  uint64_t v2 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = Database == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  uint64_t v8 = CPSqliteDatabaseConnectionForReading();
  if (v8)
  {
    _CalAttachmentFileRegisterFunctions(v2, v8);
  }
}

void _CalAttachmentFileRegisterFunctions(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t Context = (void *)CPRecordStoreGetContext();
  int function = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalNoteAttachmentDeleted", 2, 1, Context, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalAttachmentFileNoteAttachmentDeleted, 0, 0);
  if (function)
  {
    int v5 = function;
    BOOL v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v10 = 67109120;
      int v11 = v5;
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "Error adding CalNoteAttachmentDeleted function: %i", (uint8_t *)&v10, 8u);
    }
  }
  int v7 = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalNoteStoreDeleted", 3, 1, Context, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalAttachmentFileNoteStoreDeleted, 0, 0);
  if (v7)
  {
    int v8 = v7;
    uint64_t v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v10 = 67109120;
      int v11 = v8;
      _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_ERROR, "Error adding CalNoteStoreDeleted function: %i", (uint8_t *)&v10, 8u);
    }
  }
}

uint64_t CalScheduledTaskCacheCreateForDatabase(uint64_t a1, const void *a2)
{
  pthread_once(&__CalScheduledTaskCacheRegisterOnce, (void (*)(void))CalScheduledTaskCacheRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 24) = a1;
  CFTypeRef v5 = CFRetain(a2);
  *(unsigned char *)(Instance + 16) = 1;
  *(void *)(Instance + 32) = v5;
  *(void *)(Instance + 40) = 0;
  *(void *)(Instance + 48) = 0;
  *(void *)(Instance + 56) = 0;
  return Instance;
}

uint64_t CalEventOccurrenceCacheCreateForDatabase(uint64_t a1)
{
  pthread_once(&__CalEventOccurrenceCacheRegisterOnce, (void (*)(void))CalEventOccurrenceCacheRegisterClass);
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = a1;
  *(unsigned char *)(result + 16) = 1;
  *(_DWORD *)(result + 20) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  return result;
}

uint64_t CalDatabasePerformMigrationIfNeeded()
{
  uint64_t result = [MEMORY[0x1E4F576F0] hasBeenUnlockedSinceBoot];
  if (result)
  {
    if ([MEMORY[0x1E4F577F0] isRunningAsSetupUser])
    {
      return 0;
    }
    else
    {
      if (CalDatabasePerformMigrationIfNeeded_onceToken != -1) {
        dispatch_once(&CalDatabasePerformMigrationIfNeeded_onceToken, &__block_literal_global_140);
      }
      return 1;
    }
  }
  return result;
}

void CDBLogInitIfNeeded()
{
  if (CDBLogInitIfNeeded_onceToken != -1) {
    dispatch_once(&CDBLogInitIfNeeded_onceToken, &__block_literal_global_6);
  }
}

uint64_t CalEventGetInvitationChangedProperties(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t InvitationChangedProperties = _CalEventGetInvitationChangedProperties(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return InvitationChangedProperties;
}

uint64_t _CalEventGetInvitationChangedProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

BOOL CalStoreMustAcknowledgeMasterEvent(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"MustAcknowledgeMasterEvent", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetFutureStartDateLimitedToOccurrenceCacheBoundsInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"FutureStartLimitedToOccurrenceCache", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventDurationConstrainedToRecurrenceIntervalInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"DurationConstrainedToRecurrenceInterval", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetStatusIsAccurateInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"StatusIsAccurate", 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventCancelDeletedEventsInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"CancelDeletedEvents", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalTaskAllDayDueDatesSupportedInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalTask", @"supportsAllDayDueDates", 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalStoreAreRecurrencesPinnedToMonthDays(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"RecurrencesPinnedToMonthDays", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventResponseCommentsSupportedInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"SupportsResponseComment", 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetRejectedStatusChangeRequiresNoExternalStatusInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"RejectedStatusChangeRequiresNoExternalStatus", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventURLFieldSupportedInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"SupportsURL", 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventRequiresOutgoingInvitationsInDefaultCalendarInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"RequiresOutgoingInvitationsInDefaultCalendar", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalStoreRequiresSeparateFilesForAllAttachments(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalAttachment", @"RequiresSeparateFilesForAllAttachments", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

uint64_t CalCalendarItemGetAvailabilitySupportedByStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"SupportsLimitedAvailability", 0)) {
    uint64_t BoolConstraintValue = 2;
  }
  else {
    uint64_t BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"SupportsAvailability", 0);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetDeliverySourceOrExternalIDRequiredForResponseInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"ResponseRequiresDeliverySourceOrExternalID", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetOccurrencesMustOccurOnSeparateDaysInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"OccurrencesMustOccurOnSeparateDays", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetOccurrenceOrderEnforcedAfterDetachmentInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"OccurrenceOrderEnforcedAfterDetachment", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalStoreRequiresMSFormattedUIDKey(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"RequiresMSFormattedUID", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventDeclineDeletedInvitationsInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"DeclineDeletedInvitations", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetProposedStatusRequiredForResponseInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"ResponseRequiresProposedStatus", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalStoreGetSupportsInvitationModifications(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalStoreGetBoolConstraintValueForStore(a1, @"SupportsInvitationModifications", 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsAutoGeocodingStructuredLocations(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalStoreGetBoolConstraintValueForStore(a1, @"SupportsAutoGeocodingStructuredLocations", 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsReminderActions(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalStoreGetBoolConstraintValueForStore(a1, @"SupportsReminderActions", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsStructuredLocations(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalStoreGetBoolConstraintValueForStore(a1, @"SupportsStructuredLocations", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreGetSupportsOutgoingInvitations(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalStoreGetBoolConstraintValueForStore(a1, @"SupportsOutgoingInvitations", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsAlarmProximity(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalStoreGetBoolConstraintValueForStore(a1, @"SupportsAlarmProximity", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreRecurrenceSeriesMustIncludeMoreThanFirstOccurrence(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalStoreGetBoolConstraintValueForStore(a1, @"RecurrenceSeriesMustIncludeMoreThanFirstOccurrence", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsReminderLocations(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalStoreGetBoolConstraintValueForStore(a1, @"SupportsReminderLocations", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalAttendeeRequireSearchInSingleAccountInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalAttendeeGetBoolConstraintValueForStore(a1, @"RequireAttendeeSearchInSingleAccount", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalAttendeeIsStatusKnownForOrganizedEventsInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalAttendeeGetBoolConstraintValueForStore(a1, @"StatusIsKnownForOrganizedEvents", 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalAttendeeIsStatusKnownForInvitedEventsInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalAttendeeGetBoolConstraintValueForStore(a1, @"StatusIsKnownForInvitedEvents", 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalAttendeeGetUseDeletedByOrganizerStatusInStore(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalAttendeeGetBoolConstraintValueForStore(a1, @"UseDeletedByOrganizerStatus", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

uint64_t CalStoreGetMaxRecurrencesSupported(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t IntConstraintValue = _CalStoreGetIntConstraintValue(a1, @"CalEvent", @"MaximumNumberOfRecurrences");
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntConstraintValue;
}

uint64_t CalStoreGetMaxAlarmsSupported(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t IntConstraintValue = _CalStoreGetIntConstraintValue(a1, @"CalEvent", @"MaximumNumberOfAlarms");
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntConstraintValue;
}

uint64_t _CalStoreGetIntConstraintValue(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFNumberRef v4 = (const __CFNumber *)_CalStoreCopyConstraintValue(a1, a2, a3);
  if (v4)
  {
    CFNumberRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID()) {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
    }
    CFRelease(v5);
    return valuePtr;
  }
  return v3;
}

uint64_t CalStoreSupportsAlarmsTriggeringAfterStartDate(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFDictionaryRef v3 = (const __CFDictionary *)_CalAlarmCopyConstraintsForStore(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  if (!v3) {
    return 1;
  }
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v3, @"SupportsAlarmsTriggeringAfterStartDate");
  v7 = !Value || (CFBooleanRef v5 = Value, v6 = CFGetTypeID(Value), v6 != CFBooleanGetTypeID()) || CFBooleanGetValue(v5) != 0;
  CFRelease(v3);
  return v7;
}

uint64_t CalStoreSupportsAlarmTriggerKey(uint64_t a1, const void *a2)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v5 = _CalStoreSupportsAlarmTriggerKey(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

uint64_t _CalStoreSupportsAlarmTriggerKey(uint64_t a1, const void *a2)
{
  CFDictionaryRef v3 = (const __CFDictionary *)_CalAlarmCopyConstraintsForStore(a1);
  if (!v3) {
    return 1;
  }
  CFDictionaryRef v4 = v3;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v3, @"SupportedTriggers");
  if (Value && (CFArrayRef v6 = Value, v7 = CFGetTypeID(Value), v7 == CFArrayGetTypeID()))
  {
    v10.length = CFArrayGetCount(v6);
    v10.id location = 0;
    BOOL v8 = CFArrayContainsValue(v6, v10, a2) != 0;
  }
  else
  {
    BOOL v8 = 1;
  }
  CFRelease(v4);
  return v8;
}

const void *_CalAlarmCopyConstraintsForStore(uint64_t a1)
{
  id v1 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  Typeuint64_t ID = CFDictionaryGetTypeID();
  if (!v1) {
    return 0;
  }
  CFTypeID v3 = TypeID;
  if (CFGetTypeID(v1) != TypeID) {
    goto LABEL_6;
  }
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)v1, @"CalAlarm");
  uint64_t v5 = Value;
  if (Value)
  {
    if (CFGetTypeID(Value) == v3)
    {
      CFRetain(v5);
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v5 = 0;
  }
LABEL_7:
  CFRelease(v1);
  return v5;
}

BOOL CalStoreGetSupportsIncomingInvitations(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalStoreGetBoolConstraintValueForStore(a1, @"SupportsIncomingInvitations", 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL _CalAttendeeGetBoolConstraintValueForStore(uint64_t a1, const void *a2, BOOL a3)
{
  uint64_t v5 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  Typeuint64_t ID = CFDictionaryGetTypeID();
  if (v5)
  {
    CFTypeID v7 = TypeID;
    if (CFGetTypeID(v5) == TypeID
      && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v5, @"CalAttendee")) != 0
      && (CFDictionaryRef v9 = Value, CFGetTypeID(Value) == v7)
      && (CFRange v10 = CFDictionaryGetValue(v9, a2)) != 0)
    {
      int v11 = v10;
      CFRetain(v10);
      CFRelease(v5);
      CFTypeID v12 = CFGetTypeID(v11);
      if (v12 == CFBooleanGetTypeID()) {
        a3 = CFBooleanGetValue((CFBooleanRef)v11) != 0;
      }
    }
    else
    {
      int v11 = v5;
    }
    CFRelease(v11);
  }
  return a3;
}

BOOL _CalStoreGetBoolConstraintValueForStore(uint64_t a1, const void *a2, BOOL a3)
{
  uint64_t v5 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  Typeuint64_t ID = CFDictionaryGetTypeID();
  if (v5)
  {
    CFTypeID v7 = TypeID;
    if (CFGetTypeID(v5) == TypeID
      && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v5, @"CalStore")) != 0
      && (CFDictionaryRef v9 = Value, CFGetTypeID(Value) == v7)
      && (CFRange v10 = CFDictionaryGetValue(v9, a2)) != 0)
    {
      int v11 = v10;
      CFRetain(v10);
      CFRelease(v5);
      CFTypeID v12 = CFGetTypeID(v11);
      if (v12 == CFBooleanGetTypeID()) {
        a3 = CFBooleanGetValue((CFBooleanRef)v11) != 0;
      }
    }
    else
    {
      int v11 = v5;
    }
    CFRelease(v11);
  }
  return a3;
}

BOOL _CalStoreGetBoolConstraintValue(uint64_t a1, const void *a2, const void *a3, BOOL a4)
{
  CFBooleanRef v5 = (const __CFBoolean *)_CalStoreCopyConstraintValue(a1, a2, a3);
  if (v5)
  {
    CFBooleanRef v6 = v5;
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFBooleanGetTypeID()) {
      a4 = CFBooleanGetValue(v6) != 0;
    }
    CFRelease(v6);
  }
  return a4;
}

const void *_CalStoreCopyConstraintValue(uint64_t a1, const void *a2, const void *a3)
{
  CFBooleanRef v5 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  Typeuint64_t ID = CFDictionaryGetTypeID();
  if (!v5) {
    return 0;
  }
  CFTypeID v7 = TypeID;
  if (CFGetTypeID(v5) == TypeID
    && (CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v5, a2)) != 0
    && (CFDictionaryRef v9 = v8, CFGetTypeID(v8) == v7))
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v9, a3);
    int v11 = Value;
    if (Value) {
      CFRetain(Value);
    }
  }
  else
  {
    int v11 = 0;
  }
  CFRelease(v5);
  return v11;
}

uint64_t _CalParticipantCopyPhoneNumber(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

const void *CalEventCopyUniqueIdentifier(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  UniqueIdentifier = (const void *)_CalEventGetUniqueIdentifier(a1);
  CFDictionaryRef v4 = UniqueIdentifier;
  if (UniqueIdentifier) {
    CFRetain(UniqueIdentifier);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEventGetUniqueIdentifier(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _DisabledStoreRowidHandler(uint64_t a1, CFMutableStringRef *a2)
{
  uint64_t v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  if (*a2)
  {
    CFStringAppendFormat(*a2, 0, @", %d", v3);
  }
  else
  {
    CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    *a2 = Mutable;
    CFStringAppendFormat(Mutable, 0, @"(%d"), v3;
  }
  return 0;
}

const void *CalDatabaseCopySuggestionsCalendar(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Suggestionsuint64_t Calendar = (const void *)_CalDatabaseGetSuggestionsCalendar((uint64_t)a1);
  CFDictionaryRef v4 = SuggestionsCalendar;
  if (SuggestionsCalendar) {
    CFRetain(SuggestionsCalendar);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t _CalDatabaseGetSuggestionsCalendar(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = Database == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (*(void *)(Database + 104))
    {
      CFTypeID v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  uint64_t v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v8)
  {
    uint64_t v9 = v8;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v8)
      {
        if (*(void *)(*(void *)v8 + 104))
        {
          CFRange v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  uint64_t v12 = _CalDatabaseGetRecordStore(a1);
  return _CalGetCalendarWithUID(v12);
}

const void *CalDatabaseCopyNaturalLanguageSuggestionsCalendar(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  NaturalLanguageSuggestionsuint64_t Calendar = (const void *)_CalDatabaseGetNaturalLanguageSuggestionsCalendar((uint64_t)a1);
  CFDictionaryRef v4 = NaturalLanguageSuggestionsCalendar;
  if (NaturalLanguageSuggestionsCalendar) {
    CFRetain(NaturalLanguageSuggestionsCalendar);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t _CalDatabaseGetNaturalLanguageSuggestionsCalendar(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = Database == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (*(void *)(Database + 104))
    {
      CFTypeID v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  uint64_t v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v8)
  {
    uint64_t v9 = v8;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v8)
      {
        if (*(void *)(*(void *)v8 + 104))
        {
          CFRange v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  uint64_t v12 = _CalDatabaseGetRecordStore(a1);
  return _CalGetCalendarWithUID(v12);
}

uint64_t CalStoreCopyUUID(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalDatabaseCopyOfAllNotifications(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCopyAllInstancesOfClass();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

void _CalParticipantLoadIdentityProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    uint64_t Store = CPRecordGetStore();
    IdentityWithRowuint64_t ID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      uint64_t v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFTypeID v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      uint64_t v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        CFRange v10 = (const void *)v9;
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11) {
                os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

uint64_t _CalIdentityGetLastName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalIdentityGetFirstName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalIdentityGetDisplayName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalIdentityCopyAddress(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t _CalGetIdentityWithRowID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t CalRecurrenceGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalRecurrenceGetPropertyIDWithPropertyName_sPropDict;
  if (!CalRecurrenceGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalRecurrenceGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalRecurrenceGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"UUID";
      int v6 = 26;
      CFTypeID v7 = @"owner";
      int v8 = 24;
      uint64_t v9 = @"frequencyRaw";
      int v10 = 0;
      int v11 = @"interval";
      int v12 = 1;
      uint64_t v13 = @"endDate";
      int v14 = 6;
      CFDictionaryRef v15 = @"count";
      int v16 = 3;
      BOOL v17 = @"cachedEndDate";
      int v18 = 4;
      uint64_t v19 = @"cachedEndDateTimeZone";
      int v20 = 5;
      uint64_t v21 = @"specifier";
      int v22 = 7;
      uint64_t v23 = @"firstDayOfTheWeekRaw";
      int v24 = 2;
      CalRecurrenceGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 10);
      for (uint64_t i = 144; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalRecurrenceGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalRecurrenceGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8E93098(_Unwind_Exception *a1)
{
  for (uint64_t i = 144; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

id CalDatabaseGetPreferences(uint64_t a1)
{
  CFDictionaryRef v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v3 = *(id *)(a1 + 296);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

BOOL CalStoreSupportsDelegation(uint64_t a1)
{
  BOOL result = CalStoreGetFlag(a1, 0x20000000);
  if (result) {
    return !CalStoreGetFlag(a1, 2);
  }
  return result;
}

BOOL CalStoreSupportsDelegateEnumeration(uint64_t a1)
{
  BOOL result = CalStoreGetFlag(a1, 0x40000000);
  if (result) {
    return !CalStoreGetFlag(a1, 2);
  }
  return result;
}

uint64_t CalStoreSupportsRecurrencesOnDetachedEvents()
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return 0;
}

uint64_t CalStoreAllowsTasks(uint64_t a1)
{
  if (CalIsReminderBridgeEnabled()) {
    return 0;
  }
  return CalStoreAllowsTasksPrivate(a1);
}

void _CalStoreLoadConstraints(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  id v3 = (void *)CPRecordCopyProperty();
  if (!v3)
  {
    int v6 = 0;
    if (!a1) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  BOOL v4 = [MEMORY[0x1E4F57678] constraintsURLForName:v3];
  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v4];
    if (v5)
    {
      id v12 = 0;
      int v6 = [MEMORY[0x1E4F28F98] propertyListWithData:v5 options:0 format:0 error:&v12];
      id v7 = v12;
      if (!v6)
      {
        int v8 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138543618;
          int v14 = v4;
          __int16 v15 = 2112;
          id v16 = v7;
          _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_FAULT, "Failed to load constraints plist (%{public}@): %@", buf, 0x16u);
        }
      }
    }
    else
    {
      int v10 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138543362;
        int v14 = v4;
        _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_FAULT, "Failed to load constraints data (%{public}@)", buf, 0xCu);
      }
      int v6 = 0;
    }
  }
  else
  {
    uint64_t v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543362;
      int v14 = v3;
      _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_FAULT, "Failed to get URL for stored constraints name: %{public}@", buf, 0xCu);
    }
    int v6 = 0;
  }

  if (a1)
  {
LABEL_23:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
  }
LABEL_27:
  CPRecordInitializeProperty();
}

uint64_t CalStoreGetStrictestEventPrivateValue(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  StrictestEventPrivateCFDictionaryRef Value = _CalStoreGetStrictestEventPrivateValue(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return StrictestEventPrivateValue;
}

uint64_t _CalStoreGetStrictestEventPrivateValue(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalRecurrenceGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t __CalDatabaseCopyCalendarWithUUID_block_invoke(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v2 = *(sqlite3_stmt **)(a2 + 8);
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(*(const __CFString **)(a1 + 32));
  BOOL v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
  return sqlite3_bind_text(v2, 1, CStringFromCFString, -1, v4);
}

void *CalCreateCStringFromCFString(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  BOOL v4 = malloc_type_calloc(v3, 1uLL, 0xBF06B530uLL);
  if (v4 && !CFStringGetCString(a1, (char *)v4, v3, 0x8000100u))
  {
    free(v4);
    return 0;
  }
  return v4;
}

CFArrayRef CalDatabaseCopyOfAllNotifiableOrRepliedEventsInStore(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    uint64_t v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef SelectPrefix = (const __CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    CFStringRef v7 = SelectPrefix;
    CFArrayRef v8 = (const __CFArray *)_CalEventPrepareNotifiableStatusStatement((uint64_t)v5, SelectPrefix, a2, 0, a3);
    if (v8)
    {
      Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v5);
      if (CDBLockingAssertionsEnabled) {
        BOOL v10 = RecordStore == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      CFArrayRef v8 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
    }
    CFRelease(v7);
  }
  else
  {
    CFArrayRef v8 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  CFStringRef v12 = CalDatabaseCopyOfAllEventsWithParticipantsWithProposedNewTimes(v5, a2, a3);
  CFArrayRef v13 = (const __CFArray *)v12;
  if (!v12) {
    goto LABEL_31;
  }
  uint64_t Count = CFArrayGetCount((CFArrayRef)v12);
  if (Count < 1) {
    goto LABEL_31;
  }
  uint64_t v15 = Count;
  theArray = CFArrayCreateMutable(0, Count, MEMORY[0x1E4F1D510]);
  id v16 = objc_opt_new();
  uint64_t v17 = CFArrayGetCount(v8);
  if (v17 >= 1)
  {
    for (CFIndex i = 0; i != v17; ++i)
    {
      CFArrayGetValueAtIndex(v8, i);
      uint64_t v19 = [NSNumber numberWithInt:CalCalendarItemGetRowID()];
      [v16 addObject:v19];
    }
  }
  for (CFIndex j = 0; j != v15; ++j)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v13, j);
    if (ValueAtIndex)
    {
      int v22 = ValueAtIndex;
      uint64_t v23 = [NSNumber numberWithInt:CalCalendarItemGetRowID()];
      char v24 = [v16 containsObject:v23];

      if ((v24 & 1) == 0)
      {
        CFArrayAppendValue(theArray, v22);
        uint64_t v25 = [NSNumber numberWithInt:CalCalendarItemGetRowID()];
        [v16 addObject:v25];
      }
    }
  }
  CFArrayRef Copy = theArray;
  if (CFArrayGetCount(theArray) < 1)
  {
    CFRelease(theArray);

LABEL_31:
    if (!v8)
    {
      CFArrayRef Copy = 0;
      if (!v13) {
        return Copy;
      }
      goto LABEL_35;
    }
    CFArrayRef Copy = CFArrayCreateCopy(0, v8);
    goto LABEL_33;
  }
  v29.id location = 0;
  v29.length = v17;
  CFArrayAppendArray(theArray, v8, v29);

  if (v8) {
LABEL_33:
  }
    CFRelease(v8);
  if (v13) {
LABEL_35:
  }
    CFRelease(v13);
  return Copy;
}

uint64_t _CalEventPrepareNotifiableStatusStatement(uint64_t a1, const __CFString *a2, uint64_t a3, int a4, int a5)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = RecordStore == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    MutableCFArrayRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
    if (MutableCopy)
    {
      uint64_t v15 = MutableCopy;
      if ((a4 | a5) == 1)
      {
        CFStringAppend(MutableCopy, @" JOIN Participant ON ci.self_attendee_id = Participant.rowid");
        if (a4) {
          CFStringRef v16 = @" WHERE (Participant.entity_type = ? AND Participant.status NOT IN (?, ?, ?))";
        }
        else {
          CFStringRef v16 = @" WHERE (Participant.entity_type = ? AND Participant.status IN (?, ?, ?)) AND Participant.is_self = 0";
        }
        CFStringAppend(v15, v16);
        CFStringRef v17 = @" AND";
      }
      else
      {
        CFStringRef v17 = @" WHERE";
      }
      CFStringAppend(v15, v17);
      if (a5 ^ 1 | a4) {
        CFStringRef v18 = CFSTR(" (ci.invitation_status IN (1, 2, 3)");
      }
      else {
        CFStringRef v18 = CFSTR(" (ci.invitation_status IN (0, 1, 2, 3)");
      }
      CFStringAppend(v15, v18);
      CFStringAppend(v15, @""));
      if (a3)
      {
        CFStringAppend(v15, @" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)");
      }
      else
      {
        CFMutableStringRef v19 = _CalDatabaseCopyDisabledStoresClause(a1);
        if (v19)
        {
          CFStringRef v20 = v19;
          CFStringAppend(v15, @" AND calendar_id NOT IN (SELECT ROWID FROM Calendar WHERE store_id IN ");
          CFStringAppend(v15, v20);
          CFStringAppend(v15, @""));
          CFRelease(v20);
        }
      }
      CFStringAppend(v15, @" AND(                ((start_tz = ? AND end_date > ?) OR (start_tz != ? AND end_date > ?))                     OR                 (ci.has_recurrences AND(                      (ci.ROWID IN (SELECT owner_id FROM Recurrence WHERE owner_id = ci.ROWID AND(                            cached_end_date + ci.end_date - ci.start_date > ? OR                             end_date + ci.end_date - ci.start_date > ? OR                             (count = 0 AND end_date IS NULL)                       ))                    ))                )            );");
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v21) {
            os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
      uint64_t v22 = CPSqliteDatabaseStatementForReading();
      uint64_t Database = v22;
      if (!v22) {
        goto LABEL_36;
      }
      if (a4 | a5)
      {
        sqlite3_bind_int(*(sqlite3_stmt **)(v22 + 8), 1, 7);
        sqlite3_bind_int(*(sqlite3_stmt **)(Database + 8), 2, 1);
        sqlite3_bind_int(*(sqlite3_stmt **)(Database + 8), 3, 3);
        int v23 = 4;
        sqlite3_bind_int(*(sqlite3_stmt **)(Database + 8), 4, 2);
        if (!a3) {
          goto LABEL_33;
        }
      }
      else
      {
        int v23 = 0;
        if (!a3)
        {
LABEL_33:
          int v26 = [MEMORY[0x1E4F1C9C8] CalDateForNow];
          [v26 timeIntervalSinceReferenceDate];
          double v28 = v27;

          uint64_t v29 = CalTimeZoneCopyCFTimeZone();
          double v30 = v28;
          if (v29)
          {
            CFStringRef v31 = (const void *)v29;
            CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
            CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
            double v30 = v32;
            CFRelease(v31);
          }
          sqlite3_bind_text(*(sqlite3_stmt **)(Database + 8), v23 + 1, "_float", -1, 0);
          sqlite3_bind_double(*(sqlite3_stmt **)(Database + 8), v23 + 2, v30);
          sqlite3_bind_text(*(sqlite3_stmt **)(Database + 8), v23 + 3, "_float", -1, 0);
          sqlite3_bind_double(*(sqlite3_stmt **)(Database + 8), v23 + 4, v28);
          sqlite3_bind_double(*(sqlite3_stmt **)(Database + 8), v23 + 5, v28);
          sqlite3_bind_double(*(sqlite3_stmt **)(Database + 8), v23 + 6, v28);
LABEL_36:
          CFRelease(v15);
          return Database;
        }
      }
      char v24 = *(sqlite3_stmt **)(Database + 8);
      v23 |= 1u;
      int ID = CPRecordGetID();
      sqlite3_bind_int(v24, v23, ID);
      goto LABEL_33;
    }
    return 0;
  }
  return Database;
}

CFStringRef CalDatabaseCopyOfAllEventsWithParticipantsWithProposedNewTimes(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  if (a2)
  {
    BOOL v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v4 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v4 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v4);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_27;
  }
  uint64_t v9 = Database;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT CalendarItem.* FROM CalendarItem JOIN Participant As organizerParticipant ON CalendarItem.organizer_id = organizerParticipant.rowid JOIN Participant AS otherParticipant ON CalendarItem.ROWID = otherParticipant.owner_id WHERE (CalendarItem.invitation_changed_properties & %i) != 0 AND otherParticipant.is_self = 0 AND otherParticipant.proposed_start_date > 0 AND (otherParticipant.proposed_start_date + (CalendarItem.end_date - CalendarItem.start_date) > ?) AND organizerParticipant.is_self = 1", 240);
  if (!v11) {
    goto LABEL_28;
  }
  MutableCFArrayRef Copy = CFStringCreateMutableCopy(v10, 0, v11);
  if (!MutableCopy)
  {
LABEL_26:
    CFRelease(v11);
LABEL_27:
    CFStringRef v11 = 0;
    goto LABEL_28;
  }
  CFArrayRef v13 = MutableCopy;
  if (a3) {
    CFStringAppend(MutableCopy, @" AND otherParticipant.proposed_start_date_status != 1");
  }
  CFStringAppend(v13, @" GROUP BY CalendarItem.ROWID;");
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(v9 + 104))
    {
      int v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14) {
        os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  uint64_t v15 = CPSqliteDatabaseStatementForReading();
  if (!v15)
  {
    CFRelease(v13);
    goto LABEL_26;
  }
  uint64_t v16 = v15;
  double Current = CFAbsoluteTimeGetCurrent();
  sqlite3_bind_double(*(sqlite3_stmt **)(v16 + 8), 1, Current);
  CFRelease(v13);
  CFRelease(v11);
  uint64_t v18 = _CalDatabaseGetRecordStore((uint64_t)v4);
  if (CDBLockingAssertionsEnabled)
  {
    if (v18)
    {
      CFMutableStringRef v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v19) {
        os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  CFStringRef v11 = (const __CFString *)CPRecordStoreProcessStatement();
LABEL_28:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4 + 20);
  }
  os_unfair_lock_unlock(v4 + 20);
  CFRelease(v4);
  return v11;
}

BOOL CalStoreShowsNotifications(uint64_t a1)
{
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

uint64_t CalEventOccurrenceCacheCopyAllDaysAndOccurrenceCounts(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  CFArrayRef v8 = &v7;
  uint64_t v9 = 0x2020000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __CalEventOccurrenceCacheCopyAllDaysAndOccurrenceCounts_block_invoke;
  v6[3] = &unk_1E5D61B30;
  v6[5] = a1;
  v6[6] = a2;
  v6[4] = &v7;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1A8E94088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CalDatabaseCopyOrCreateDefaultCalendarForNewEvents(os_unfair_lock_s *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CalendarForEntityunsigned int Type = (void *)CalDatabaseCopyDefaultOrAnyReadWriteCalendarForNewEvents(a1, 0);
  if (!CalendarForEntityType)
  {
    CFIndex v3 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      CFArrayRef v8 = "CalCalendarRef CalDatabaseCopyOrCreateDefaultCalendarForNewEvents(CalDatabaseRef)";
      _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_INFO, "%s: Failed to find either default or suitable read-write calendar. Making one.", (uint8_t *)&v7, 0xCu);
    }
    uint64_t v4 = CalDatabaseCopyLocalStore((uint64_t)a1);
    if (v4)
    {
      uint64_t v5 = v4;
      if (CalStoreAllowsEvents((uint64_t)v4))
      {
        CalendarForEntityunsigned int Type = (void *)CalDatabaseCreateCalendarForEntityType(a1, 2);
        CalCalendarSetTitle((uint64_t)CalendarForEntityType);
        CalStoreAddCalendar((uint64_t)v5, CalendarForEntityType);
        CalDatabaseSave((uint64_t)a1);
      }
      else
      {
        CalendarForEntityunsigned int Type = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return CalendarForEntityType;
}

CFTypeRef CalDatabaseCopyDefaultOrAnyReadWriteCalendarForNewEvents(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  CFTypeRef result = CalDatabaseCopyDefaultCalendarForNewEventsInStore((uint64_t)a1, a2);
  if (!result)
  {
    uint64_t v5 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      int v7 = "CalCalendarRef CalDatabaseCopyDefaultOrAnyReadWriteCalendarForNewEvents(CalDatabaseRef, CalStoreRef)";
      _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_INFO, "%s: No default set. Getting first suitable read-write calendar.", (uint8_t *)&v6, 0xCu);
    }
    return CalDatabaseCopyFirstReadWriteCalendarThatSupportsEntityType(a1, 2, a2);
  }
  return result;
}

BOOL _CalOrganizerIsSelf(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalDatabaseCopyOfAllEventsCreatedFromSuggestionsInStore(os_unfair_lock_s *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    int v6 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v6) {
      return 0;
    }
  }
  else
  {
    int v6 = cf;
    if (!cf) {
      return 0;
    }
    CFRetain(cf);
  }
  os_unfair_lock_lock(v6 + 20);
  if (a3 | a4)
  {
    int v7 = @"extraction_group_identifier";
    if (!a4) {
      int v7 = 0;
    }
    if (a3) {
      int v7 = @"opaque_key";
    }
    [NSString stringWithFormat:@"JOIN SuggestedEventInfo ON CalendarItem.ROWint ID = SuggestedEventInfo.owner_id WHERE SuggestedEventInfo.%@ = ?", v7];
    uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v8 = @"JOIN SuggestedEventInfo ON CalendarItem.ROWID = SuggestedEventInfo.owner_id";
  }
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v6);
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = RecordStore == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v9 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6 + 20);
  }
  os_unfair_lock_unlock(v6 + 20);

  CFRelease(v6);
  return v9;
}

uint64_t _CalCalendarGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalDatabaseCopyOfAllEventsCreatedFromSuggestionsInStore(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseCopyOfAllEventsCreatedFromSuggestionsInStore(a1, a2, a3, 0);
}

id CalInvalidAlarmDate()
{
  if (CalInvalidAlarmDate_onceToken != -1) {
    dispatch_once(&CalInvalidAlarmDate_onceToken, &__block_literal_global);
  }
  id v0 = (void *)CalInvalidAlarmDate_sInvalidDate;
  return v0;
}

void __CalInvalidAlarmDate_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  uint64_t v1 = (void *)CalInvalidAlarmDate_sInvalidDate;
  CalInvalidAlarmDate_sInvaliddouble Date = (uint64_t)v0;

  id v2 = objc_alloc(MEMORY[0x1E4F1C9A8]);
  id v5 = (id)[v2 initWithCalendarIdentifier:*MEMORY[0x1E4F1C3B0]];
  [(id)CalInvalidAlarmDate_sInvalidDate setCalendar:v5];
  CFIndex v3 = (void *)CalInvalidAlarmDate_sInvalidDate;
  uint64_t v4 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
  [v3 setTimeZone:v4];

  [(id)CalInvalidAlarmDate_sInvalidDate setYear:1976];
  [(id)CalInvalidAlarmDate_sInvalidDate setMonth:4];
  [(id)CalInvalidAlarmDate_sInvalidDate setDay:1];
  [(id)CalInvalidAlarmDate_sInvalidDate setHour:0];
  [(id)CalInvalidAlarmDate_sInvalidDate setMinute:55];
  [(id)CalInvalidAlarmDate_sInvalidDate setSecond:45];
}

uint64_t CalIsInvalidAlarmDate(void *a1)
{
  id v1 = a1;
  id v2 = CalInvalidAlarmDate();
  if ([v2 isEqual:v1])
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v4 = [v2 year];
    if (v4 == [v1 year]
      && (uint64_t v5 = [v2 month], v5 == objc_msgSend(v1, "month"))
      && (uint64_t v6 = [v2 day], v6 == objc_msgSend(v1, "day"))
      && (uint64_t v7 = [v2 hour], v7 == objc_msgSend(v1, "hour"))
      && (uint64_t v8 = [v2 minute], v8 == objc_msgSend(v1, "minute"))
      && (uint64_t v9 = [v2 second], v9 == objc_msgSend(v1, "second")))
    {
      CFAllocatorRef v10 = [v1 timeZone];
      if (v10)
      {
        BOOL v11 = [v2 timeZone];
        CFStringRef v12 = [v1 timeZone];
        uint64_t v3 = [v11 isEquivalentTo:v12];
      }
      else
      {
        uint64_t v3 = 1;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
  }

  return v3;
}

uint64_t _CalDatabaseExternalConversionCheckerForRestore(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a2)
      {
        if (*(void *)(*(void *)a2 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  int v3 = CPSqliteConnectionDatabaseVersion();
  if (v3 > 15013) {
    return 0;
  }
  int v4 = v3;
  uint64_t v5 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_ERROR, "Refusing to open DB with version %d for restoring", (uint8_t *)v7, 8u);
  }
  return 2;
}

__CFString *CalDatabaseCopyDirectoryPathForDatabase(uint64_t a1)
{
  return CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1);
}

__CFString *CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(uint64_t a1, int a2)
{
  if (a1 && (int v3 = *(const void **)(a1 + 128)) != 0)
  {
    return (__CFString *)CFRetain(v3);
  }
  else
  {
    CFStringRef v5 = (const __CFString *)CPSharedResourcesDirectory();
    if (!v5) {
      return 0;
    }
    MutableCFArrayRef Copy = CFStringCreateMutableCopy(0, 0, v5);
    CFStringAppend(MutableCopy, @"/Library/Calendar/");
    if (a2) {
      CPFileBuildDirectoriesToPath();
    }
    return MutableCopy;
  }
}

__CFString *CalDatabaseCopyDirectoryPath()
{
  return CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 1);
}

void CalDatabaseMultiLock(os_unfair_lock_s *a1, os_unfair_lock_s *a2)
{
  id v2 = a1;
  if (a1 != a2)
  {
    if ((uint64_t)a1 >= (uint64_t)a2) {
      int v3 = a2;
    }
    else {
      int v3 = a1;
    }
    if ((uint64_t)a1 < (uint64_t)a2) {
      id v2 = a2;
    }
    os_unfair_lock_lock(v3 + 20);
  }
  os_unfair_lock_lock(v2 + 20);
}

void CalDatabaseMultiUnlock(const os_unfair_lock *a1, const os_unfair_lock *a2)
{
  int v4 = (os_unfair_lock_s *)&a1[20];
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(a1 + 20);
  }
  os_unfair_lock_unlock(v4);
  if (a1 != a2)
  {
    CFStringRef v5 = (os_unfair_lock_s *)&a2[20];
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v5);
    }
    os_unfair_lock_unlock(v5);
  }
}

uint64_t _CalDatabaseLockForWriteTransaction(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 336) performWithWriteLock:a2];
}

uint64_t _CalDatabasePerformStatementWithWriteLock(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  id v2 = *(void **)(a1 + 336);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___CalDatabasePerformStatementWithWriteLock_block_invoke;
  v5[3] = &unk_1E5D60E40;
  v5[4] = &v6;
  v5[5] = a2;
  [v2 performWithWriteLock:v5];
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1A8E94B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __CalDatabaseBeginWriteTransaction(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 336) lock];
  BOOL v4 = _CalDatabaseBeginTransactionOfType(a1, 1, a2);
  if (!v4) {
    [*(id *)(a1 + 336) unlock];
  }
  return v4;
}

BOOL __CalDatabaseCommitTransaction(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 352) == 0xFFFF)
  {
    CFArrayRef v13 = [MEMORY[0x1E4F28B00] currentHandler];
    int v14 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL __CalDatabaseCommitTransaction(CalDatabaseRef, const char *)");
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"CalDatabase.m", 1116, @"Tried to commit a transaction (%s) when no transaction was open (%s)", a2, *(void *)(a1 + 344));
  }
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled)
  {
    if (v9)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          CFAllocatorRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
  }
  int v11 = CPSqliteConnectionCommit();
  if (*(_DWORD *)(a1 + 352) == 1) {
    [*(id *)(a1 + 336) unlock];
  }
  *(_DWORD *)(a1 + 352) = 0xFFFF;
  *(void *)(a1 + 344) = a2;
  return v11 != 1;
}

uint64_t _CalDatbaseCreateTemporaryRecordIDForEntity(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a1 + 176) = v3 - 1;
  return CalRecordIDCreate(a2, v3);
}

uint64_t _CalDatbaseCreateLimitedAccessVirtualRecordIDForEntity(int a1)
{
  return CalRecordIDCreate(a1, 0x7FFFFFFF);
}

void CalDatabaseSetIntegrityErrorReportingDelegate(uint64_t a1, void *a2)
{
  int v3 = (os_unfair_lock_s *)(a1 + 80);
  id v4 = a2;
  os_unfair_lock_lock(v3);
  objc_storeWeak((id *)(a1 + 320), v4);

  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3);
  }
  os_unfair_lock_unlock(v3);
}

CFStringRef CalDatabaseGetAuxDatabaseChangesSequence(os_unfair_lock_s *a1)
{
  id v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Integeruint64_t Property = _CalDatabaseGetIntegerProperty((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return IntegerProperty;
}

CFStringRef _CalDatabaseGetRestoreGeneration(uint64_t a1)
{
  CFStringRef result = _CalDatabaseGetIntegerProperty(a1);
  *(_DWORD *)(a1 + 312) = result;
  return result;
}

CFStringRef _CalDatabaseGetIntegerProperty(uint64_t a1)
{
  CFStringRef result = (const __CFString *)_CalDatabaseCopyProperty(a1);
  if (result)
  {
    CFStringRef v2 = result;
    IntCFDictionaryRef Value = CFStringGetIntValue(result);
    CFRelease(v2);
    return (const __CFString *)IntValue;
  }
  return result;
}

CFStringRef CalDatabaseGetRestoreGeneration(os_unfair_lock_s *a1)
{
  CFStringRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Integeruint64_t Property = _CalDatabaseGetIntegerProperty((uint64_t)a1);
  a1[78]._os_unfair_lock_opaque = IntegerProperty;
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return IntegerProperty;
}

void _CalDatabaseSetRestoreGeneration(uint64_t a1, int a2)
{
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForWriting();
  if (v9)
  {
    uint64_t v10 = v9;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___CalDatabaseSetRestoreGeneration_block_invoke;
    v13[3] = &__block_descriptor_44_e5_v8__0l;
    v13[4] = v9;
    int v14 = a2;
    [*(id *)(a1 + 336) performWithWriteLock:v13];
    if (CDBLockingAssertionsEnabled && *(void *)v10 && *(void *)(*(void *)v10 + 104))
    {
      int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    *(_DWORD *)(a1 + 312) = a2;
  }
  else
  {
    CFStringRef v12 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, "Failed to get connection for writing to database to update its restore generation", buf, 2u);
    }
  }
}

void sub_1A8E95104(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_1A8E95128(void *a1)
{
}

void CalDatabaseSetRestoreGeneration(os_unfair_lock_s *a1, int a2)
{
  BOOL v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseSetRestoreGeneration((uint64_t)a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
}

CFStringRef CalDatabaseSetRestoreGenerationChangedDelegate(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    BOOL v4 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8] reason:@"delegate must not be nil" userInfo:0];
    [v4 raise];
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 304));

  if (WeakRetained)
  {
    uint64_t v6 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:@"Attempting to register a restore generation delegate when there is already a registered delegate" userInfo:0];
    [v6 raise];
  }
  objc_storeWeak((id *)(a1 + 304), v3);
  Integeruint64_t Property = _CalDatabaseGetIntegerProperty(a1);
  *(_DWORD *)(a1 + 312) = IntegerProperty;
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));

  return IntegerProperty;
}

void sub_1A8E95338(_Unwind_Exception *a1)
{
}

void sub_1A8E9534C(void *a1)
{
}

void CalDatabaseClearRestoreGenerationChangedDelegate(uint64_t a1)
{
  CFStringRef v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  objc_storeWeak((id *)(a1 + 304), 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

id CalDatabaseSetDarwinNotificationPoster(id obj)
{
  return objc_storeWeak(&calDatabaseDarwinNotificationPoster, obj);
}

void _CalDatabasePostDBOrSyncStatusChangeNotification(void *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, void *a7, void *a8, char a9)
{
  id v16 = a7;
  id v17 = a8;
  id v18 = a1;
  CFMutableStringRef v19 = v18;
  if (a4)
  {
    _CalDatabasePostDBOrSyncStatusChangeNotificationSync((uint64_t)v18, a2, a3, a5);
    if (a9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (_CalDatabasePostDBOrSyncStatusChangeNotification_onceToken != -1) {
    dispatch_once(&_CalDatabasePostDBOrSyncStatusChangeNotification_onceToken, &__block_literal_global_0);
  }
  CFStringRef v20 = _CalDatabasePostDBOrSyncStatusChangeNotification_queue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___CalDatabasePostDBOrSyncStatusChangeNotification_block_invoke_2;
  block[3] = &unk_1E5D60E88;
  int v26 = a2;
  char v27 = a3;
  id v24 = v19;
  uint64_t v25 = a5;
  dispatch_async(v20, block);

  if ((a9 & 1) == 0)
  {
LABEL_7:
    id v21 = v16;
    id v22 = v17;
    uint64_t v28 = MEMORY[0x1E4F143A8];
    uint64_t v29 = 3221225472;
    double v30 = ___CalDatabaseSendAnalyticsEventForChange_block_invoke;
    CFStringRef v31 = &unk_1E5D60F50;
    id v32 = v21;
    id v33 = v22;
    uint64_t v34 = a5;
    uint64_t v35 = a6;
    CalAnalyticsSendEventLazy();
  }
LABEL_8:
}

void _CalDatabasePostDBOrSyncStatusChangeNotificationSync(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (a1)
    {
      v15[0] = @"path";
      v15[1] = @"auxDBID";
      v16[0] = a1;
      CFStringRef v5 = [NSNumber numberWithInt:a2];
      v16[1] = v5;
      CFDictionaryRef v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:2];
    }
    else
    {
      BOOL v7 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v14 = 0;
        _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_ERROR, "When posting a notification, the path should be included.", v14, 2u);
      }
      CFDictionaryRef v6 = 0;
    }
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, @"_CalDatabaseChangedNotification", 0, v6, 1u);
  }
  uint64_t v9 = @"_CalDatabaseChangedNotification";
  if (a4 == 1) {
    uint64_t v9 = @"_CalDatabaseStoreSyncStatusChangedNotification";
  }
  if (a4 == 2) {
    CFStringRef v10 = @"_CalDatabaseIntegrationDataChangedNotification";
  }
  else {
    CFStringRef v10 = v9;
  }
  id WeakRetained = objc_loadWeakRetained(&calDatabaseDarwinNotificationPoster);
  CFStringRef v12 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained postDarwinNotificationNamed:v10];
  }
  else
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, v10, 0, 0, 1u);
  }
}

void _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  id v13 = a7;
  id v14 = a6;
  IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1);
  _CalDatabasePostDBOrSyncStatusChangeNotification(IfNeeded, *(unsigned int *)(a1 + 172), a2, a3, a4, a5, v14, v13, *(unsigned char *)(a1 + 272));
}

void _CalDatabasePostChangeNotificationToExternalClients(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 368);
  id v5 = (id)CalDatabaseCopyClientName(a1, 0);
  _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(a1, 0, 0, a2, v4, v5, 0);
}

CFTypeRef _CalDatabaseCopyClientName(uint64_t a1)
{
  return CalDatabaseCopyClientName(a1, 0);
}

void _CalDatabasePostDBChangeNotificationToInternalAndExternalClients(uint64_t a1)
{
  BOOL v2 = _CalDatabaseShouldPostInProcessChangeNotification(a1);
  if (v2)
  {
    id v3 = +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:a1];
    [v3 clearAllChangesets];
  }
  uint64_t v4 = *(void *)(a1 + 368);
  id v5 = (id)CalDatabaseCopyClientName(a1, 1);
  _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(a1, v2, 0, 0, v4, v5, 0);
}

CFTypeRef CalDatabaseCopyClientName(uint64_t a1, char a2)
{
  if (a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 80);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    uint64_t v4 = (void *)[*(id *)(a1 + 152) copy];
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v3);
    }
    os_unfair_lock_unlock(v3);
    if (!v4) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = (void *)[*(id *)(a1 + 152) copy];
    if (!v4)
    {
LABEL_7:
      uint64_t v4 = CalDatabaseGetProcessName();
    }
  }
  CFTypeRef v5 = CFRetain(v4);

  return v5;
}

void CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter()
{
  id v0 = [MEMORY[0x1E4F1C9C8] date];
  [v0 timeIntervalSinceReferenceDate];
  double v2 = v1;

  double v3 = 3.40282347e38;
  if (*(double *)&CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter_lastBackBoardOpenApplicationRequestTimestamp > 0.0) {
    double v3 = v2
  }
       - *(double *)&CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter_lastBackBoardOpenApplicationRequestTimestamp;
  if (v3 > 5.0)
  {
    CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter_lastBackBoardOpenApplicationRequestTimestamp = *(void *)&v2;
    if (_CalDatabaseRequestApplicationSnapshotUpdate_once_token != -1) {
      dispatch_once(&_CalDatabaseRequestApplicationSnapshotUpdate_once_token, &__block_literal_global_259);
    }
    uint64_t v4 = (void *)_CalDatabaseRequestApplicationSnapshotUpdate_systemService;
    uint64_t v5 = _CalDatabaseRequestApplicationSnapshotUpdate_options;
    [v4 openApplication:@"com.apple.mobilecal" withOptions:v5 completion:&__block_literal_global_264];
  }
}

BOOL _CalDatabaseShouldContinueExaminingChangesForRanges(uint64_t a1)
{
  return *(unsigned char *)(a1 + 1) == 0;
}

unsigned char *_CalDatabaseMarkRangeAsImpacted(unsigned char *result)
{
  if (*result)
  {
    double v1 = result + 16;
    do
    {
      *(v1 - 15) = 1;
      int v2 = *v1;
      v1 += 16;
    }
    while (v2);
  }
  return result;
}

uint64_t CalDatabaseRequestWidgetRefreshWithRateLimiter()
{
  if (CalDatabaseRequestWidgetRefreshWithRateLimiter_onceToken != -1) {
    dispatch_once(&CalDatabaseRequestWidgetRefreshWithRateLimiter_onceToken, &__block_literal_global_47);
  }
  id v0 = (void *)CalDatabaseRequestWidgetRefreshWithRateLimiter_rateLimitingQueue;
  return [v0 executeBlock];
}

void __CalDatabaseRequestWidgetRefreshWithRateLimiter_block_invoke()
{
  id v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.calendar.database.refreshWidgetQueue", v0);

  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F57790]) initWithQueue:v3 minimumInterval:&__block_literal_global_51 andBlock:3.0];
  int v2 = (void *)CalDatabaseRequestWidgetRefreshWithRateLimiter_rateLimitingQueue;
  CalDatabaseRequestWidgetRefreshWithRateLimiter_rateLimitingQueue = v1;
}

uint64_t __CalDatabaseRequestWidgetRefreshWithRateLimiter_block_invoke_2()
{
  id v0 = CDBWidgetReloadHandle;
  if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl(&dword_1A8E81000, v0, OS_LOG_TYPE_DEFAULT, "Reloading widget timeline because of database change notification", v2, 2u);
  }
  return [MEMORY[0x1E4F57820] refreshEventWidgets];
}

void CalDatabaseCleanupDanglers(uint64_t a1)
{
  int v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = (void *)CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v9)
  {
    CFStringRef v10 = v9;
    _CalDatabaseCleanupDanglers(v3, v9);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v10)
      {
        if (*(void *)(*v10 + 104))
        {
          int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    CFStringRef v12 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v13 = 0;
      _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_DEFAULT, "Unable to get database connection to clean up danglers.", v13, 2u);
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

void _CalDatabaseCleanupDanglers(uint64_t a1, void *a2)
{
  uint64_t Context = CPRecordStoreGetContext();
  if (a2)
  {
    uint64_t v4 = Context;
    if (Context)
    {
      _CalCalendarCleanUpDanglingEntities(Context, a2);
      _CalCalendarItemCleanUpDanglingEntities(v4, a2);
      _CalAlarmCleanUpDanglingEntities(v4, a2);
      _CalRecurrenceCleanUpDanglingEntities(v4, a2);
      _CalParticipantCleanUpDanglingEntities(v4, a2);
      _CalEventActionCleanUpDanglingEntities(v4, a2);
      _CalAttachmentCleanUpDanglingEntities(v4, a2);
      _CalLocationCleanUpDanglingEntities(v4, a2);
      _CalShareeCleanUpDanglingEntities(v4, a2);
      _CalNotificationCleanUpDanglingEntities(v4, a2);
      _CalResourceChangeCleanUpDanglingEntities(v4, a2);
      _CalContactCleanUpDanglingEntities(v4, a2);
      _CalConferenceCleanUpDanglingEntities(v4, a2);
      _CalErrorCleanUpDanglingEntities(v4, a2);
      _CalAttachmentFileCleanUpDanglingEntities(v4, a2);
      _CalImageCleanUpDanglingEntities(v4, a2);
      _CalColorCleanUpDanglingEntities(v4, a2);
    }
  }
}

uint64_t CalDatabaseIsCurrentProcessCalaccessd()
{
  if (CalDatabaseIsCurrentProcessCalaccessd_onceToken != -1) {
    dispatch_once(&CalDatabaseIsCurrentProcessCalaccessd_onceToken, &__block_literal_global_75);
  }
  return CalDatabaseIsCurrentProcessCalaccessd_isCalaccessd;
}

uint64_t __CalDatabaseIsCurrentProcessCalaccessd_block_invoke()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  memset(v4, 0, sizeof(v4));
  pid_t v0 = getpid();
  uint64_t result = proc_name(v0, v4, 0x80u);
  BOOL v3 = *(void *)&v4[0] == 0x73656363616C6163 && *(void *)((char *)v4 + 3) == 0x64737365636361;
  CalDatabaseIsCurrentProcessCalaccessd_isCalaccessd = v3;
  return result;
}

void _CalDatabaseNoteUntrackedChange(uint64_t a1)
{
  if (_CalDatabaseShouldPostInProcessChangeNotification(a1))
  {
    int v2 = +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:a1];
    [v2 clearAllChangesets];

    ++*(_DWORD *)(a1 + 120);
    uint64_t v3 = *(void *)(a1 + 368);
    uint64_t v4 = (void *)CalDatabaseCopyClientName(a1, 0);
    _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(a1, 1, 0, 0, v3, v4, 0);

    _CalDatabaseRevertInternal(a1, 1);
  }
  else
  {
    _CalDatabaseSendChangeNotificationWithNoObjectIdsToCalaccessd(a1, 0);
  }
}

BOOL _CalDatabaseSendChangeNotificationWithNoObjectIdsToCalaccessd(uint64_t a1, int64_t a2)
{
  _CalDatabaseCalaccessdXPCConnection();
  uint64_t v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v5, "function", "postchangenote");
    CFDictionaryRef v6 = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1);
    xpc_dictionary_set_string(v5, "databasePath", (const char *)[(__CFString *)v6 UTF8String]);
    xpc_dictionary_set_int64(v5, "changeType", a2);
    xpc_dictionary_set_int64(v5, "changeReason", *(void *)(a1 + 368));
    BOOL v7 = (id) CalDatabaseCopyClientName(a1, 0);
    xpc_dictionary_set_string(v5, "clientName", (const char *)[v7 UTF8String]);
    xpc_object_t v8 = xpc_connection_send_message_with_reply_sync(v4, v5);
    uint64_t v9 = v8;
    BOOL v10 = v8
       && object_getClass(v8) == (Class)MEMORY[0x1E4F14590]
       && xpc_dictionary_get_BOOL(v9, "notificationwasposted");
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

void _CalDatabaseRevertInternal(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    int LastSequenceNumber = CPRecordStoreGetLastSequenceNumber();
  }
  else
  {
    int LastSequenceNumber = -1;
  }
  *(_DWORD *)(a1 + 124) = LastSequenceNumber;
  CFDictionaryRef v6 = *(void **)(a1 + 32);
  if (v6) {
    _CalEventOccurrenceCacheRevert(v6);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    CalScheduledTaskCacheInvalidate(v7);
    CFRelease(*(CFTypeRef *)(a1 + 40));
    *(void *)(a1 + 40) = 0;
  }
  xpc_object_t v8 = *(const void **)(a1 + 104);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 104) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 96);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 96) = 0;
  }
  BOOL v10 = *(const void **)(a1 + 64);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 64) = 0;
  }
  int v11 = *(const void **)(a1 + 72);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 72) = 0;
  }
  CFStringRef v12 = *(const void **)(a1 + 264);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 264) = 0;
  }
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  if (a2) {
    *(_DWORD *)(a1 + 176) = -1;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(a1 + 24))
    {
      id v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v13) {
        os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  uint64_t v16 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (v16)
  {
    uint64_t v17 = v16;
    if (*(unsigned char *)(a1 + 381))
    {
      __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:4800");
      *(unsigned char *)(a1 + 381) = 0;
    }
    else
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v16)
        {
          if (*(void *)(*(void *)v16 + 104))
          {
            id v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18) {
              os_unfair_lock_assert_owner(v18 + 20);
            }
          }
        }
      }
      CPSqliteConnectionRollback();
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v17)
      {
        if (*(void *)(*(void *)v17 + 104))
        {
          CFMutableStringRef v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19) {
            os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    if (CDBLockingAssertionsEnabled) {
      BOOL v20 = *(void *)(a1 + 24) == 0;
    }
    else {
      BOOL v20 = 1;
    }
    int v21 = !v20;
    if (a2)
    {
      if (v21)
      {
        id v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
      CPRecordStoreInvalidateCaches();
    }
    else
    {
      if (v21)
      {
        int v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23) {
          os_unfair_lock_assert_owner(v23 + 20);
        }
      }
      CPRecordStoreRevert();
    }
    *(void *)(a1 + 160) = CalMonotonicTime();
  }
  if ((*(unsigned char *)(a1 + 16) & 0x10) == 0)
  {
    id v24 = (const void *)CalCopyTimeZone();
    *(void *)(a1 + 40) = CalScheduledTaskCacheCreateForDatabase(a1, v24);
    CFRelease(v24);
  }
}

void CalDatabaseSetChangeReason(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  *(void *)(a1 + 368) = a2;
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
}

uint64_t CalDatabaseGetChangeReason(uint64_t a1)
{
  int v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 368);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalDatabaseGetChangeReason(uint64_t a1)
{
  return *(void *)(a1 + 368);
}

__CFDictionary *CalDatabaseCopyChangesSinceSequenceNumber(os_unfair_lock_s *a1, signed int a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  signed int valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v6 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"CalLastCalendarChanges", v6);
    CFRelease(v6);
  }
  signed int valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v7 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"CalLastEventRecurrenceChanges", v7);
    CFRelease(v7);
  }
  signed int valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v8 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"CalLastEventAlarmChanges", v8);
    CFRelease(v8);
  }
  signed int valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v9 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"CalLastCategoryChanges", v9);
    CFRelease(v9);
  }
  signed int valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v10 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"CalChangesAffectingNearbyEvents24hr", v10);
    CFRelease(v10);
  }
  signed int valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    CFNumberRef v11 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, @"CalChangesAffectingNearbyEventsWidgetRange", v11);
    CFRelease(v11);
  }
  return Mutable;
}

CFStringRef CalDatabaseGetIntegerProperty(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Integeruint64_t Property = _CalDatabaseGetIntegerProperty((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return IntegerProperty;
}

uint64_t _CalDatabaseSetDeletionFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) |= a2;
  return result;
}

uint64_t _CalDatabaseGetDeletionFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t _CalDatabaseSetChangeFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 84) |= a2;
  return result;
}

uint64_t _CalDatabaseGetChangeFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

void CalPerformSQLWithConnection(void *a1, uint64_t a2)
{
}

void CalPerformSQLWithConnectionAndBindBlock(void *a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFNumberRef v7 = a4;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(void *)(*a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v9 = CPSqliteConnectionStatementForSQL();
  if (v9)
  {
    CFNumberRef v10 = (uint64_t **)v9;
    if (v7) {
      v7[2](v7, v9);
    }
    if (a2)
    {
      uint64_t v11 = CPRecordStoreGetContext();
      int v12 = _CalDatabasePerformStatementWithWriteLock(v11, (uint64_t)v10);
    }
    else
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v10)
        {
          uint64_t v16 = **v10;
          if (v16)
          {
            if (*(void *)(v16 + 104))
            {
              uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17) {
                os_unfair_lock_assert_owner(v17 + 20);
              }
            }
          }
        }
      }
      int v12 = CPSqliteStatementPerform();
    }
    int v18 = v12;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v10)
      {
        uint64_t v19 = **v10;
        if (v19)
        {
          if (*(void *)(v19 + 104))
          {
            BOOL v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20) {
              os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (v18)
    {
      if (v18 != 101)
      {
        int v21 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          int v22 = 67109378;
          *(_DWORD *)int v23 = v18;
          *(_WORD *)&v23[4] = 2112;
          *(void *)&v23[6] = a3;
          _os_log_impl(&dword_1A8E81000, v21, OS_LOG_TYPE_ERROR, "Bad result %i for query \"%@\"", (uint8_t *)&v22, 0x12u);
        }
      }
    }
  }
  else
  {
    id v13 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      id v14 = (sqlite3 *)a1[1];
      uint64_t v15 = v13;
      int v22 = 138412546;
      *(void *)int v23 = a3;
      *(_WORD *)&v23[8] = 2080;
      *(void *)&v23[10] = sqlite3_errmsg(v14);
      _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_ERROR, "Couldn't get statement for SQL \"%@\"; Error: %s",
        (uint8_t *)&v22,
        0x16u);
    }
  }
}

uint64_t sendResultsWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t (**)(void, void))MEMORY[0x1AD0E9DC0](a2);
  uint64_t v4 = v3[2](v3, a1);

  return v4;
}

void CalSendResults(uint64_t **a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        uint64_t v3 = **a1;
        if (v3)
        {
          if (*(void *)(v3 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementSendResults();
}

void _CalDatabaseAddEntity(uint64_t a1, const void *a2)
{
  if (CPRecordGetID() != 0x7FFFFFFF)
  {
    if ((CPRecordGetID() & 0x80000000) != 0) {
      goto LABEL_20;
    }
    if (CDBLockingAssertionsEnabled) {
      BOOL v4 = *(void *)(a1 + 24) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    CPRecordGetClass();
    CFArrayRef v6 = (const __CFArray *)CPRecordStoreCopyDeletedRecordIDsOfClass();
    if (v6)
    {
      CFArrayRef v7 = v6;
      CFIndex Count = CFArrayGetCount(v6);
      if (Count < 1)
      {
        CFRelease(v7);
      }
      else
      {
        CFIndex v9 = Count;
        unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
        if (CPRecordGetID() == ValueAtIndex)
        {
          CFRelease(v7);
          goto LABEL_20;
        }
        CFIndex v11 = 1;
        do
        {
          CFIndex v12 = v11;
          if (v9 == v11) {
            break;
          }
          unsigned int v13 = CFArrayGetValueAtIndex(v7, v11);
          int ID = CPRecordGetID();
          CFIndex v11 = v12 + 1;
        }
        while (ID != v13);
        CFRelease(v7);
        if (v12 < v9)
        {
LABEL_20:
          if (CDBLockingAssertionsEnabled) {
            BOOL v15 = *(void *)(a1 + 24) == 0;
          }
          else {
            BOOL v15 = 1;
          }
          if (!v15)
          {
            uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
          CPRecordStoreAddRecord();
          if (!*(void *)(a1 + 64)) {
            *(void *)(a1 + 64) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
          }
          unsigned int Type = (const void *)(int)_CalEntityGetType(a2);
          CFDictionaryRef Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), Type);
          if (!Value)
          {
            CFDictionaryRef Value = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), Type, Value);
            CFRelease(Value);
          }
          CFSetAddValue((CFMutableSetRef)Value, a2);
          if (!*(void *)(a1 + 72)) {
            *(void *)(a1 + 72) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          }
          Recordint ID = (const void *)_CalEntityGetRecordID(a2);
          if (RecordID) {
            CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), RecordID, a2);
          }
          int v20 = _CalEntityGetType(a2);
          if (v20 <= 11)
          {
            if (v20 == 1)
            {
              int v21 = *(_DWORD *)(a1 + 84) | 2;
              goto LABEL_44;
            }
            if (v20 != 4) {
              return;
            }
          }
          else
          {
            if (v20 == 12)
            {
              int v21 = *(_DWORD *)(a1 + 84) | 0x10;
              goto LABEL_44;
            }
            if (v20 != 14)
            {
              if (v20 != 26) {
                return;
              }
              int v21 = *(_DWORD *)(a1 + 84) | 0x20;
              goto LABEL_44;
            }
          }
          int v21 = *(_DWORD *)(a1 + 84) | 8;
LABEL_44:
          *(_DWORD *)(a1 + 84) = v21;
        }
      }
    }
  }
}

uint64_t _CalDatabaseRemoveEntity(uint64_t result, const void *a2)
{
  if (*(void *)(result + 24))
  {
    uint64_t v3 = result;
    int Type = _CalEntityGetType(a2);
    int v5 = 1;
    switch(Type)
    {
      case 1:
        *(_DWORD *)(v3 + 84) |= 2u;
        int v5 = 2;
        goto LABEL_20;
      case 2:
        int v5 = 4;
        goto LABEL_20;
      case 3:
        _CalTaskPrepareForRemove((uint64_t)a2);
        int v5 = 8;
        goto LABEL_20;
      case 4:
      case 14:
        int v6 = *(_DWORD *)(v3 + 84) | 8;
        goto LABEL_22;
      case 5:
        _CalRecurrencePrepareForRemove((uint64_t)a2);
        int v5 = 32;
        goto LABEL_20;
      case 6:
        goto LABEL_20;
      case 7:
        int v5 = 64;
        goto LABEL_20;
      case 8:
      case 10:
      case 13:
      case 22:
      case 23:
      case 24:
      case 25:
        break;
      case 9:
        int v5 = 128;
        goto LABEL_20;
      case 11:
        int v5 = 256;
        goto LABEL_20;
      case 12:
        int v6 = *(_DWORD *)(v3 + 84) | 0x10;
        goto LABEL_22;
      case 15:
        int v5 = 512;
        goto LABEL_20;
      case 16:
      case 17:
      case 19:
        goto LABEL_3;
      case 18:
        int v5 = 2048;
        goto LABEL_20;
      case 20:
        int v5 = 4096;
        goto LABEL_20;
      case 21:
        int v5 = 0x2000;
        goto LABEL_20;
      case 26:
        int v6 = *(_DWORD *)(v3 + 84) | 0x20;
LABEL_22:
        *(_DWORD *)(v3 + 84) = v6;
        break;
      default:
        if (Type == 102)
        {
LABEL_3:
          int v5 = 1024;
LABEL_20:
          *(_DWORD *)(v3 + 88) |= v5;
        }
        break;
    }
    if (*(void *)(v3 + 64))
    {
      int v7 = _CalEntityGetType(a2);
      CFDictionaryRef Value = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 64), (const void *)v7);
      if (Value) {
        CFSetRemoveValue(Value, a2);
      }
    }
    if (*(void *)(v3 + 72))
    {
      Recordint ID = (const void *)_CalEntityGetRecordID(a2);
      if (RecordID) {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 72), RecordID);
      }
    }
    uint64_t Store = CPRecordGetStore();
    if (CDBLockingAssertionsEnabled)
    {
      if (Store)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

void _CalDatabaseAddPostCommitActionWithBlock(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFMutableArrayRef Mutable = *(__CFArray **)(a1 + 112);
  id v6 = v3;
  if (!Mutable)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    id v3 = v6;
    *(void *)(a1 + 112) = Mutable;
  }
  int v5 = (void *)[v3 copy];
  CFArrayAppendValue(Mutable, v5);
}

const void *CalDatabaseCopyEntityWithRecordID(uint64_t a1, const void *a2)
{
  BOOL v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (CalRecordIDIsTemporary((uint64_t)a2) && (CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 72)) != 0)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v5, a2);
    int v7 = Value;
    if (Value) {
      CFRetain(Value);
    }
  }
  else
  {
    int v7 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  if (v7) {
    return v7;
  }
  switch(CalRecordIDGetEntityType((uint64_t)a2))
  {
    case 1u:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyCalendarWithUID((os_unfair_lock_s *)a1);
      break;
    case 2u:
      uint64_t v9 = CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = (const void *)CalDatabaseCopyEventWithUID(a1, v9);
      break;
    case 3u:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyCalendarItemWithRowID((os_unfair_lock_s *)a1);
      break;
    case 4u:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyAlarmWithUID((os_unfair_lock_s *)a1);
      break;
    case 5u:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyRecurrenceWithUID((os_unfair_lock_s *)a1);
      break;
    case 6u:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyStoreWithUID((os_unfair_lock_s *)a1);
      break;
    case 7u:
      uint64_t v10 = CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = (const void *)CalDatabaseCopyAttendeeWithUID(a1, v10);
      break;
    case 8u:
      uint64_t v11 = CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = (const void *)CalDatabaseCopyOrganizerWithUID(a1, v11);
      break;
    case 9u:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyEventActionWithUID((os_unfair_lock_s *)a1);
      break;
    case 0xAu:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyExceptionDateWithUID((os_unfair_lock_s *)a1);
      break;
    case 0xBu:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyAttachmentWithUID((os_unfair_lock_s *)a1);
      break;
    case 0xCu:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyCategoryWithUID((os_unfair_lock_s *)a1);
      break;
    case 0xFu:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyShareeWithUID((os_unfair_lock_s *)a1);
      break;
    case 0x10u:
      uint64_t v12 = CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = (const void *)CalDatabaseCopyInviteReplyNotificationWithUID(a1, v12);
      break;
    case 0x11u:
      uint64_t v13 = CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = (const void *)CalDatabaseCopyResourceChangeNotificationWithUID(a1, v13);
      break;
    case 0x12u:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyResourceChangeWithUID((os_unfair_lock_s *)a1);
      break;
    case 0x13u:
      uint64_t v14 = CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = (const void *)CalDatabaseCopySuggestionNotificationWithUID(a1, v14);
      break;
    case 0x15u:
      CalRecordIDGetRowID((uint64_t)a2);
      uint64_t result = CalDatabaseCopyContactWithUID((os_unfair_lock_s *)a1);
      break;
    default:
      return v7;
  }
  return result;
}

uint64_t _CalDatabaseCopyScheduledTaskCache(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    CFRetain(*(CFTypeRef *)(a1 + 40));
  }
  return v1;
}

void CalDatabaseRegisterYieldBlock(uint64_t a1, void *a2)
{
  id v3 = a2;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 192));
  uint64_t v4 = MEMORY[0x1AD0E9DC0](*(void *)(a1 + 184));
  CFStringRef cf = (void *)v4;
  if (v3)
  {
    CFDictionaryRef v5 = (void *)[v3 copy];
    id v6 = CFRetain(v5);

    uint64_t v4 = (uint64_t)cf;
  }
  else
  {
    id v6 = 0;
  }
  *(void *)(a1 + 184) = v6;
  if (v4) {
    CFRelease(cf);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 192));
}

uint64_t _CalDatabaseUnlockRequested(uint64_t a1)
{
  int v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled) {
      BOOL v6 = Database == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      if (*(void *)(Database + 104))
      {
        int v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
    uint64_t v3 = CPSqliteDatabaseUnlockRequested();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t CalDatabaseMigrateIfNeededOutOfProcess()
{
  if ([MEMORY[0x1E4F576F0] hasBeenUnlockedSinceBoot])
  {
    os_unfair_lock_lock(&CalDatabaseMigrateIfNeededOutOfProcess_lock);
    if (CalDatabaseMigrateIfNeededOutOfProcess_haveMigrated) {
      goto LABEL_18;
    }
    uint64_t v0 = CalendarMigrationLibraryCore();
    uint64_t v1 = CDBLogHandle;
    if (v0)
    {
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10[0]) = 0;
        _os_log_impl(&dword_1A8E81000, v1, OS_LOG_TYPE_INFO, "Requesting out-of-process migration", (uint8_t *)v10, 2u);
      }
      uint64_t v11 = 0;
      uint64_t v12 = &v11;
      uint64_t v13 = 0x2050000000;
      int v2 = (void *)getCalOutOfProcessMigratorClass_softClass;
      uint64_t v14 = getCalOutOfProcessMigratorClass_softClass;
      if (!getCalOutOfProcessMigratorClass_softClass)
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        v10[2] = __getCalOutOfProcessMigratorClass_block_invoke;
        v10[3] = &unk_1E5D60FF0;
        v10[4] = &v11;
        __getCalOutOfProcessMigratorClass_block_invoke((uint64_t)v10);
        int v2 = (void *)v12[3];
      }
      id v3 = v2;
      _Block_object_dispose(&v11, 8);
      if ([v3 performMigrationIfNeeded])
      {
        CalDatabaseMigrateIfNeededOutOfProcess_haveMigrated = 1;
        uint64_t v4 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
        {
          LOWORD(v10[0]) = 0;
          CFDictionaryRef v5 = "Out-of-process migration complete";
          BOOL v6 = v4;
          os_log_type_t v7 = OS_LOG_TYPE_INFO;
LABEL_17:
          _os_log_impl(&dword_1A8E81000, v6, v7, v5, (uint8_t *)v10, 2u);
        }
LABEL_18:
        uint64_t v8 = CalDatabaseMigrateIfNeededOutOfProcess_haveMigrated;
        os_unfair_lock_unlock(&CalDatabaseMigrateIfNeededOutOfProcess_lock);
        return v8;
      }
      uint64_t v1 = CDBLogHandle;
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
        goto LABEL_18;
      }
      LOWORD(v10[0]) = 0;
      CFDictionaryRef v5 = "Out of process migration failed! This may cause the database to get deleted!";
    }
    else
    {
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
        goto LABEL_18;
      }
      LOWORD(v10[0]) = 0;
      CFDictionaryRef v5 = "Skipping out of process migration because CalendarMigration.framework is not available";
    }
    BOOL v6 = v1;
    os_log_type_t v7 = OS_LOG_TYPE_ERROR;
    goto LABEL_17;
  }
  return 0;
}

void sub_1A8E978A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCreateWithOptionsDatabaseDirectoryURLAndContainerProvider(uint64_t a1, void *a2, void *a3)
{
  if (a1 || a2 || a3)
  {
    id v6 = a3;
    id v7 = a2;
    CFDictionaryRef v5 = objc_alloc_init(CalDatabaseInitializationConfiguration);
    [(CalDatabaseInitializationConfiguration *)v5 setOptions:a1];
    [(CalDatabaseInitializationConfiguration *)v5 setDirectoryURL:v7];

    [(CalDatabaseInitializationConfiguration *)v5 setDataContainerProvider:v6];
  }
  else
  {
    CFDictionaryRef v5 = 0;
  }
  uint64_t v8 = CalDatabaseCreateWithConfiguration(v5);

  return v8;
}

uint64_t __CalDatabaseCreateWithConfiguration_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  CDBLockingAssertionsEnabled = result;
  return result;
}

uint64_t _CalDatabaseCorruptionHandler(void *a1)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[1];
  if (!v2)
  {
    uint64_t v2 = a1[35];
    if (!v2)
    {
      uint64_t v16 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_ERROR, "No existing database handle while handling corrupt database error.", buf, 2u);
      }
      goto LABEL_14;
    }
  }
  id v3 = *(sqlite3 **)(v2 + 8);
  if (!v3)
  {
LABEL_14:
    uint64_t v4 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }
  uint64_t v4 = sqlite3_extended_errcode(*(sqlite3 **)(v2 + 8));
  v40[0] = 0;
  int v5 = sqlite3_file_control(v3, 0, 7, v40);
  if (v40[0])
  {
    int v6 = (*(uint64_t (**)(void, unsigned char *, uint64_t, void))(*(void *)v40[0] + 16))(v40[0], buf, 100, 0);
    if (!v6)
    {
      BOOL v15 = [MEMORY[0x1E4F1C9B8] dataWithBytes:buf length:100];
      goto LABEL_16;
    }
    int v7 = v6;
    int v33 = 0;
    int v8 = sqlite3_file_control(v3, 0, 4, &v33);
    uint64_t v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v34) = 67109632;
      HIDWORD(v34) = v7;
      __int16 v35 = 1024;
      int v36 = v33;
      __int16 v37 = 1024;
      int v38 = v8;
      uint64_t v10 = "Reading sqlite database header failed; sqlitecode=%i, sqlite_last_errno=%i, sqlite3_file_control return value=%i";
      uint64_t v11 = (uint8_t *)&v34;
      uint64_t v12 = v9;
      uint32_t v13 = 20;
LABEL_10:
      _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, v10, v11, v13);
    }
  }
  else
  {
    uint64_t v14 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      uint64_t v10 = "Unable to get sqlite3_file: %i";
      uint64_t v11 = buf;
      uint64_t v12 = v14;
      uint32_t v13 = 8;
      goto LABEL_10;
    }
  }
  BOOL v15 = 0;
LABEL_16:
  uint64_t v17 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    int v18 = v17;
    uint64_t v19 = [v15 base64EncodedStringWithOptions:0];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&buf[8] = 2112;
    *(void *)&buf[10] = v19;
    _os_log_impl(&dword_1A8E81000, v18, OS_LOG_TYPE_ERROR, "Calendar database corrupted with extended sqlite code %i; header from corrupt database=%@",
      buf,
      0x12u);
  }
LABEL_19:
  if (!a1[13] || (Context = CPRecordStoreGetContext()) == 0 || (uint64_t v21 = Context, !*(unsigned char *)(Context + 378)))
  {
LABEL_25:
    if (v4 == -1)
    {
      int v26 = @"UNKNOWN";
    }
    else
    {
      int v26 = @"SQLITE_OK";
      switch((char)v4)
      {
        case 0:
          break;
        case 1:
          int v26 = @"SQLITE_ERROR";
          break;
        case 2:
          int v26 = @"SQLITE_INTERNAL";
          break;
        case 3:
          int v26 = @"SQLITE_PERM";
          break;
        case 4:
          int v26 = @"SQLITE_ABORT";
          break;
        case 5:
          int v26 = @"SQLITE_BUSY";
          break;
        case 6:
          int v26 = @"SQLITE_LOCKED";
          break;
        case 7:
          int v26 = @"SQLITE_NOMEM";
          break;
        case 8:
          int v26 = @"SQLITE_READONLY";
          break;
        case 9:
          int v26 = @"SQLITE_INTERRUPT";
          break;
        case 10:
          int v26 = @"SQLITE_IOERR";
          break;
        case 11:
          int v26 = @"SQLITE_CORRUPT";
          break;
        case 12:
          int v26 = @"SQLITE_NOTFOUND";
          break;
        case 13:
          int v26 = @"SQLITE_FULL";
          break;
        case 14:
          int v26 = @"SQLITE_CANTOPEN";
          break;
        case 15:
          int v26 = @"SQLITE_PROTOCOL";
          break;
        case 16:
          int v26 = @"SQLITE_EMPTY";
          break;
        case 17:
          int v26 = @"SQLITE_SCHEMA";
          break;
        case 18:
          int v26 = @"SQLITE_TOOBIG";
          break;
        case 19:
          int v26 = @"SQLITE_CONSTRAINT";
          break;
        case 20:
          int v26 = @"SQLITE_MISMATCH";
          break;
        case 21:
          int v26 = @"SQLITE_MISUSE";
          break;
        case 22:
          int v26 = @"SQLITE_NOLFS";
          break;
        case 23:
          int v26 = @"SQLITE_AUTH";
          break;
        case 24:
          int v26 = @"SQLITE_FORMAT";
          break;
        case 25:
          int v26 = @"SQLITE_RANGE";
          break;
        case 26:
          int v26 = @"SQLITE_NOTADB";
          break;
        case 27:
          int v26 = @"SQLITE_NOTICE";
          break;
        case 28:
          int v26 = @"SQLITE_WARNING";
          break;
        default:
          if (v4 == 100)
          {
            int v26 = @"SQLITE_ROW";
          }
          else if (v4 == 101)
          {
            int v26 = @"SQLITE_DONE";
          }
          else
          {
            int v26 = [NSString stringWithUTF8String:sqlite3_errstr(v4)];
          }
          break;
      }
    }
    char v27 = (void *)[objc_alloc(MEMORY[0x1E4F57648]) initWithType:@"Database" subtype:@"SQLCorruption" context:v26];
    v40[0] = @"com.apple.calendardatabase.sqlite_error_code";
    uint64_t v28 = [NSNumber numberWithInt:v4];
    uint64_t v34 = v28;
    uint64_t v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v34 forKeys:v40 count:1];
    *(void *)buf = v29;
    double v30 = [MEMORY[0x1E4F1C978] arrayWithObjects:buf count:1];

    [v27 setEvents:v30];
    [v27 setIgnoreRateLimiting:1];
    [v27 report];

    return 0;
  }
  int v22 = [MEMORY[0x1E4F28CB8] defaultManager];
  char v23 = [v22 fileExistsAtPath:*(void *)(v21 + 128)];

  uint64_t v24 = CDBLogHandle;
  if (v23)
  {
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(v21 + 128);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_ERROR, "The aux database at path \"%@\" is corrupt.", buf, 0xCu);
    }
    goto LABEL_25;
  }
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = *(void *)(v21 + 128);
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v32;
    _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_DEFAULT, "The aux database at path \"%@\" no longer exists. Since this is an aux database, assuming that the volume was removed and ignoring.", buf, 0xCu);
  }
  return 1;
}

uint64_t _CalDatabaseCommitHook(uint64_t a1)
{
  _CalDatabaseReportIntegrityErrors(a1);
  if (!*(void *)(a1 + 104))
  {
    int v5 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    __int16 v10 = 0;
    int v6 = "The calendar database was committed, but we can't find the CPRecordStoreRef on it.";
    int v7 = (uint8_t *)&v10;
LABEL_9:
    _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    return 0;
  }
  uint64_t Context = CPRecordStoreGetContext();
  if (!Context)
  {
    int v5 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    __int16 v9 = 0;
    int v6 = "The calendar database was committed, but we can't find the CalDatabaseRef on the record store.";
    int v7 = (uint8_t *)&v9;
    goto LABEL_9;
  }
  uint64_t v3 = Context;
  if (!*(unsigned char *)(Context + 379))
  {
    id v4 = *(id *)(Context + 328);
    [v4 enumerateKeysAndObjectsUsingBlock:&__block_literal_global_614];
    [*(id *)(v3 + 328) removeAllObjects];
  }
  return 0;
}

void CalDatabaseDatabaseDeletedHandler(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v4 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_ERROR, "Opening the database caused it to be deleted for reason: %d", (uint8_t *)v8, 8u);
  }
  if (!*(void *)(a1 + 104))
  {
    int v6 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(v8[0]) = 0;
    int v7 = "The calendar database was deleted when opened, but we can't find the CPRecordStoreRef to notify!";
    goto LABEL_10;
  }
  uint64_t Context = CPRecordStoreGetContext();
  if (Context)
  {
    *(unsigned char *)(Context + 377) = 1;
    return;
  }
  int v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v8[0]) = 0;
    int v7 = "The calendar database was deleted when opened, but we can't find the CalDatabaseRef to notify!";
LABEL_10:
    _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)v8, 2u);
  }
}

void __CalDatabaseCreateWithConfiguration_block_invoke_96(uint64_t a1)
{
  id WeakRetained = (pthread_mutex_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained;
    uint64_t v3 = WeakRetained + 3;
    pthread_mutex_lock(WeakRetained + 3);
    uint64_t v4 = *(void *)&v2[2].__opaque[48];
    if (v4) {
      (*(void (**)(void))(v4 + 16))();
    }
    pthread_mutex_unlock(v3);
    CFRelease(v2);
  }
}

void _CalDatabaseStatementCompilationFailureHandler(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 8) != a2)
  {
    int v5 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(v16) = 0;
    int v6 = "Ignoring statement creation failure because the connection is read-only";
    goto LABEL_4;
  }
  if (a3 == 1)
  {
    if ([MEMORY[0x1E4F576F0] hasBeenUnlockedSinceBoot])
    {
      _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure(a1, a2);
      uint64_t v12 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
      {
        int v16 = 136315394;
        *(void *)uint64_t v17 = a4;
        *(_WORD *)&v17[8] = 2080;
        *(void *)&v17[10] = a5;
        _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_FAULT, "Failed to compile sql statement \"%s\": %s", (uint8_t *)&v16, 0x16u);
      }
      if (*(void *)(a1 + 104))
      {
        uint64_t Context = CPRecordStoreGetContext();
        if (Context) {
          _CalDatabaseIntegrityError(Context, @"SQL Compile Error");
        }
      }
    }
    else
    {
      int v5 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v16) = 0;
        int v6 = "Ignoring statement creation failure because device has never unlocked.";
LABEL_4:
        _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v16, 2u);
      }
    }
  }
  else
  {
    uint64_t v14 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      BOOL v15 = v14;
      int v16 = 67109378;
      *(_DWORD *)uint64_t v17 = a3;
      *(_WORD *)&v17[4] = 2082;
      *(void *)&v17[6] = sqlite3_errstr(a3);
      _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_ERROR, "Ignoring statement creation failure for error %i (%{public}s)", (uint8_t *)&v16, 0x12u);
    }
  }
}

void _CalDatabaseChangedExternally(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (os_unfair_lock_s *)_CalDatabaseCopyDatabaseIfValid(a2);
  if (!v2) {
    return;
  }
  uint64_t v3 = (uint64_t)v2;
  uint64_t v4 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  int v5 = *(_DWORD *)(v3 + 120);
  BOOL v6 = __OFSUB__(v5, 1);
  int v7 = v5 - 1;
  if (v7 < 0 != v6) {
    goto LABEL_21;
  }
  *(_DWORD *)(v3 + 120) = v7;
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = *(void *)(v3 + 24) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  int LastSequenceNumber = CPRecordStoreGetLastSequenceNumber();
  if (LastSequenceNumber == -1) {
    int LastSequenceNumber = *(_DWORD *)(v3 + 124);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(v3 + 24))
    {
      uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  if (CPRecordStoreGetSequenceNumber() != LastSequenceNumber)
  {
    *(_DWORD *)(v3 + 120) = 0;
LABEL_21:
    int v12 = *(_DWORD *)(v3 + 312);
    Integeruint64_t Property = _CalDatabaseGetIntegerProperty(v3);
    *(_DWORD *)(v3 + 312) = IntegerProperty;
    if ((*(unsigned char *)(v3 + 16) & 4) == 0) {
      _CalDatabaseRevertInternal(v3, 0);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v3 + 304));
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v4);
    }
    os_unfair_lock_unlock(v4);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, @"kCalDatabaseChangedExternallyNotification", (const void *)v3, 0, 1u);
    if (v12 != -1 && v12 != IntegerProperty) {
      [WeakRetained database:v3 restoreGenerationChangedExternally:IntegerProperty];
    }

    goto LABEL_29;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
LABEL_29:
  CFRelease((CFTypeRef)v3);
}

void CalDatabaseReceivedSQLProfileLoggingEnabledNotification(uint64_t a1, uint64_t a2, __CFString *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v5 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 138412290;
    uint32_t v13 = a3;
    _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_DEBUG, "Received notification: [%@]", (uint8_t *)&v12, 0xCu);
  }
  uint64_t v6 = _CalDatabaseCopyDatabaseIfValid(a2);
  if (v6)
  {
    int v7 = (const void *)v6;
    uint64_t v8 = objc_msgSend(*(id *)(v6 + 296), "get_sqlProfileLoggingEnabled");
    int v9 = ct_green_tea_logging_enabled();
    __int16 v10 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = @"Disabling";
      if (v8) {
        uint64_t v11 = @"Enabling";
      }
      int v12 = 138412546;
      uint32_t v13 = v11;
      __int16 v14 = 2048;
      BOOL v15 = v7;
      _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_DEBUG, "[%@] profile logging for database: [%p]", (uint8_t *)&v12, 0x16u);
    }
    CalDatabaseSetProfilingEnabled((uint64_t)v7, v8, v9, 1);
    CFRelease(v7);
  }
}

void CalDatabaseReceivedGreenTeaLoggingEnabledNotification(uint64_t a1, uint64_t a2, __CFString *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v5 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 138412290;
    uint32_t v13 = a3;
    _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_DEBUG, "Received notification: [%@]", (uint8_t *)&v12, 0xCu);
  }
  uint64_t v6 = _CalDatabaseCopyDatabaseIfValid(a2);
  if (v6)
  {
    int v7 = (const void *)v6;
    uint64_t v8 = objc_msgSend(*(id *)(v6 + 296), "get_sqlProfileLoggingEnabled");
    int v9 = ct_green_tea_logging_enabled();
    __int16 v10 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = @"Disabling";
      if (v9) {
        uint64_t v11 = @"Enabling";
      }
      int v12 = 138412546;
      uint32_t v13 = v11;
      __int16 v14 = 2048;
      BOOL v15 = v7;
      _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_DEBUG, "[%@] greentea logging for database: [%p]", (uint8_t *)&v12, 0x16u);
    }
    CalDatabaseSetProfilingEnabled((uint64_t)v7, v8, v9, 1);
    CFRelease(v7);
  }
}

uint64_t CalDatabaseCreateWithOptions(uint64_t a1)
{
  return CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(a1, 0);
}

uint64_t CalDatabaseCreateWithOptionsAndDatabaseDirectory(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = [MEMORY[0x1E4F1CB10] fileURLWithPath:a2];
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(a1, v3);

  return v4;
}

uint64_t CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(uint64_t a1, void *a2)
{
  id v3 = a2;
  IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 0);
  if ((a1 & 0x800) != 0
    || !v3
    || ([v3 path],
        int v5 = objc_claimAutoreleasedReturnValue(),
        int v6 = [v5 isEqualToString:IfNeeded],
        v5,
        v6))
  {
    int v7 = [MEMORY[0x1E4F57800] sharedInstance];
  }
  else
  {
    uint64_t v8 = [v3 URLByAppendingPathComponent:*MEMORY[0x1E4F57898] isDirectory:1];
    int v7 = (void *)[objc_alloc(MEMORY[0x1E4F57760]) initWithCalendarDataContainerURL:v8];
  }
  uint64_t v9 = CalDatabaseCreateWithOptionsDatabaseDirectoryURLAndContainerProvider(a1, v3, v7);

  return v9;
}

CalDatabaseInitializationConfiguration *CalDatabaseCopyInitializationConfiguration(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(CalDatabaseInitializationConfiguration);
  [(CalDatabaseInitializationConfiguration *)v2 setOptions:*(unsigned int *)(a1 + 16)];
  id v3 = *(id *)(a1 + 136);
  if (!v3)
  {
    if (*(void *)(a1 + 128))
    {
      objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:");
      id v3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v3 = 0;
    }
  }
  [(CalDatabaseInitializationConfiguration *)v2 setDirectoryURL:v3];
  [(CalDatabaseInitializationConfiguration *)v2 setDataContainerProvider:*(void *)(a1 + 288)];
  [(CalDatabaseInitializationConfiguration *)v2 setPreferences:*(void *)(a1 + 296)];

  return v2;
}

CFTypeRef CalDatabaseCopyClientIdentifier(uint64_t a1)
{
  return CalDatabaseCopyClientIdentifierOptionalLock(a1, 1);
}

CFTypeRef CalDatabaseCopyClientIdentifierOptionalLock(uint64_t a1, char a2)
{
  if (a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 80);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    uint64_t v4 = (void *)[*(id *)(a1 + 144) copy];
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v3);
    }
    os_unfair_lock_unlock(v3);
    if (!v4) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = (void *)[*(id *)(a1 + 144) copy];
    if (!v4)
    {
LABEL_7:
      uint64_t v4 = CalDatabaseGetProcessName();
    }
  }
  CFTypeRef v5 = CFRetain(v4);

  return v5;
}

CFTypeRef _CalDatabaseCopyClientIdentifier(uint64_t a1)
{
  return CalDatabaseCopyClientIdentifierOptionalLock(a1, 0);
}

id CalDatabaseGetProcessName()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  buffer[0] = 0;
  pid_t v0 = getpid();
  proc_name(v0, buffer, 0x400u);
  uint64_t v1 = (void *)[[NSString alloc] initWithUTF8String:buffer];
  return v1;
}

uint64_t CalDatabaseSaveAndFlushCaches(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 1;
  }
  uint64_t v1 = 1;
  CalDatabaseSaveInternalWithOptions(a1, 1, 0, &cf, 4);
  if (cf)
  {
    CFRelease(cf);
    return 0;
  }
  return v1;
}

CFTypeRef CalDatabaseSaveAndFlushCachesWithConflictPolicy(CFTypeRef result, unsigned __int16 a2)
{
  CFTypeRef v2 = 0;
  if (result)
  {
    CalDatabaseSaveInternalWithOptions((uint64_t)result, 1, a2, &v2, 4);
    return v2;
  }
  return result;
}

void CalDatabaseSaveInternalWithOptions(uint64_t a1, int a2, int a3, CFTypeRef *a4, char a5)
{
  uint64_t v283 = *MEMORY[0x1E4F143B8];
  char v6 = (a5 & 2) == 0;
  v245 = (void *)CalDatabaseCopyClientIdentifierOptionalLock(a1, v6);
  uint64_t v251 = a1;
  v246 = (void *)CalDatabaseCopyClientName(a1, v6);
  int v7 = (id)CDBLogHandle;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    CalBooleanAsString();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    *(void *)&uint8_t buf[4] = v245;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v246;
    *(_WORD *)&buf[22] = 2114;
    *(void *)&buf[24] = v8;
    _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_DEFAULT, "Commencing database save for client with identifier [%{public}@], name [%{public}@].  Commit: [%{public}@]", buf, 0x20u);
  }
  id v248 = objc_alloc_init(MEMORY[0x1E4F577D0]);
  [v248 start];
  CFTypeRef cf = 0;
  if ((a5 & 2) == 0) {
    os_unfair_lock_lock((os_unfair_lock_t)(v251 + 80));
  }
  *(unsigned char *)(v251 + 382) = (a5 & 4) != 0;
  _CalDatabaseTrimConsumedSequences(v251);
  uint64_t v9 = v251;
  if (*(void *)(v251 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    CFArrayRef v11 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
    if (CDBLockingAssertionsEnabled)
    {
      int v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
    CFArrayRef v13 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
    if (CDBLockingAssertionsEnabled)
    {
      __int16 v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14) {
        os_unfair_lock_assert_owner(v14 + 20);
      }
    }
    CFArrayRef v15 = (const __CFArray *)CPRecordStoreCopyDeletedRecords();
    uint64_t v16 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_DEBUG, "Commencing log of changes to be saved.", buf, 2u);
      if (v11)
      {
        CFIndex Count = CFArrayGetCount(v11);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            uint64_t v19 = (void *)MEMORY[0x1AD0E9B90]();
            unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
            uint64_t v21 = (void *)CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
            {
              int v22 = v21;
              CFTypeRef DebugDescription = _CalEntityGetDebugDescription(ValueAtIndex);
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = DebugDescription;
              _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_DEBUG, "Added entity: [%@]", buf, 0xCu);
            }
          }
        }
      }
      if (v13)
      {
        CFIndex v24 = CFArrayGetCount(v13);
        if (v24 >= 1)
        {
          for (CFIndex j = 0; j != v24; ++j)
          {
            int v26 = (void *)MEMORY[0x1AD0E9B90]();
            char v27 = CFArrayGetValueAtIndex(v13, j);
            uint64_t v28 = (void *)CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v29 = v28;
              CFTypeRef v30 = _CalEntityGetDebugDescription(v27);
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v30;
              _os_log_impl(&dword_1A8E81000, v29, OS_LOG_TYPE_DEBUG, "Updated entity: [%@]", buf, 0xCu);
            }
          }
        }
      }
      if (v15)
      {
        CFIndex v31 = CFArrayGetCount(v15);
        if (v31 >= 1)
        {
          for (CFIndex k = 0; k != v31; ++k)
          {
            int v33 = (void *)MEMORY[0x1AD0E9B90]();
            uint64_t v34 = CFArrayGetValueAtIndex(v15, k);
            __int16 v35 = (void *)CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
            {
              int v36 = v35;
              CFTypeRef v37 = _CalEntityGetDebugDescription(v34);
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v37;
              _os_log_impl(&dword_1A8E81000, v36, OS_LOG_TYPE_DEBUG, "Deleted entity: [%@]", buf, 0xCu);
            }
          }
        }
      }
      int v38 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_DEBUG, "Completed log of changes to be saved.", buf, 2u);
      }
    }
    int v282 = 0;
    long long v280 = 0u;
    long long v281 = 0u;
    long long v278 = 0u;
    long long v279 = 0u;
    long long v277 = 0u;
    memset(buf, 0, sizeof(buf));
    int v275 = 0;
    long long v273 = 0u;
    long long v274 = 0u;
    long long v271 = 0u;
    long long v272 = 0u;
    long long v269 = 0u;
    long long v270 = 0u;
    long long v268 = 0u;
    int v267 = 0;
    long long v265 = 0u;
    long long v266 = 0u;
    long long v263 = 0u;
    long long v264 = 0u;
    long long v261 = 0u;
    long long v262 = 0u;
    long long v260 = 0u;
    LODWORD(theArray) = 0;
    int v255 = 0;
    *(_DWORD *)v256 = 0;
    if (v11)
    {
      _CalDatabaseCountEntitiesByType(v11, (uint64_t)buf, &theArray);
      CFRelease(v11);
    }
    if (v13)
    {
      _CalDatabaseCountEntitiesByType(v13, (uint64_t)&v268, v256);
      CFRelease(v13);
    }
    if (v15)
    {
      _CalDatabaseCountEntitiesByType(v15, (uint64_t)&v260, &v255);
      CFRelease(v15);
    }
    for (uint64_t m = 0; m != 29; ++m)
    {
      int v40 = *(_DWORD *)&buf[4 * m];
      if (v40 || *((_DWORD *)&v268 + m) || *((_DWORD *)&v260 + m))
      {
        v41 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v42 = v41;
          Name = CalEntityTypeGetName((int)m + 1);
          int v44 = *((_DWORD *)&v268 + m);
          int v45 = *((_DWORD *)&v260 + m);
          *(_DWORD *)v257 = 138544130;
          *(void *)&v257[4] = Name;
          *(_WORD *)&v257[12] = 1024;
          *(_DWORD *)&v257[14] = v40;
          *(_WORD *)&v257[18] = 1024;
          *(_DWORD *)&v257[20] = v44;
          __int16 v258 = 1024;
          int v259 = v45;
          _os_log_impl(&dword_1A8E81000, v42, OS_LOG_TYPE_DEFAULT, "Summary of changes being saved: %{public}@ (add: %i mod: %i del: %i)", v257, 0x1Eu);
        }
      }
    }
    int v46 = (int)theArray;
    int v47 = v255;
    int v48 = *(_DWORD *)v256;
    if (theArray || *(_DWORD *)v256 || v255)
    {
      char v49 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v257 = 67109632;
        *(_DWORD *)&v257[4] = v46;
        *(_WORD *)&v257[8] = 1024;
        *(_DWORD *)&v257[10] = v48;
        *(_WORD *)&v257[14] = 1024;
        *(_DWORD *)&v257[16] = v47;
        _os_log_impl(&dword_1A8E81000, v49, OS_LOG_TYPE_DEFAULT, "Summary of changes being saved: Unknown (add: %i mod: %i del: %i)", v257, 0x14u);
      }
    }
    uint64_t v9 = v251;
  }
  else
  {
    int v50 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_61;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A8E81000, v50, OS_LOG_TYPE_ERROR, "No recordStore found.  Will not log database changes to be saved.", buf, 2u);
  }
  if (*(void *)(v9 + 24))
  {
    CFArrayRef v51 = *(const void **)(v9 + 32);
    if (v51)
    {
      v244 = (__CFSet *)CFRetain(v51);
      _CalEventOccurrenceCacheBeginTrackingUpdates(v244);
      uint64_t v9 = v251;
    }
    else
    {
      v244 = 0;
    }
    uint64_t v52 = *(const void **)(v9 + 40);
    if (v52)
    {
      v243 = (__CFSet *)CFRetain(v52);
      _CalScheduledTaskCacheBeginTrackingUpdates(v243);
      uint64_t v9 = v251;
    }
    else
    {
      v243 = 0;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v9 + 24))
      {
        v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v53) {
          os_unfair_lock_assert_owner(v53 + 20);
        }
      }
    }
    CFArrayRef v54 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
    CFArrayRef v55 = v54;
    if (v54)
    {
      CFIndex v56 = CFArrayGetCount(v54);
      if (v56 >= 1)
      {
        CFIndex v57 = 0;
        while (1)
        {
          uint64_t v58 = CFArrayGetValueAtIndex(v55, v57);
          int Type = _CalEntityGetType(v58);
          if (Type != 7) {
            break;
          }
          if (!_CalParticipantGetOwner(v58))
          {
            uint64_t v63 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              char v61 = v63;
              BOOL v62 = "Attendee has no owner. We need to remove it.";
LABEL_85:
              _os_log_impl(&dword_1A8E81000, v61, OS_LOG_TYPE_DEBUG, v62, buf, 2u);
            }
LABEL_86:
            _CalDatabaseRemoveEntity(v251, v58);
          }
LABEL_87:
          if (v56 == ++v57) {
            goto LABEL_88;
          }
        }
        if (Type != 8 || _CalParticipantGetOwner(v58)) {
          goto LABEL_87;
        }
        uint64_t v60 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          char v61 = v60;
          BOOL v62 = "Organizer has no owner.  We need to remove it.";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
LABEL_88:
      CFRelease(v55);
    }
    CFArrayRef theArray = 0;
    *(void *)&long long v268 = 0;
    *((void *)&v268 + 1) = &v268;
    *(void *)&long long v269 = 0x2020000000;
    BYTE8(v269) = 0;
    *(void *)&long long v260 = 0;
    *((void *)&v260 + 1) = &v260;
    *(void *)&long long v261 = 0x2020000000;
    BYTE8(v261) = 0;
    *(void *)v257 = 0;
    *(void *)&v257[8] = v257;
    *(void *)&v257[16] = 0x2020000000;
    LOBYTE(v258) = 0;
    v252[0] = MEMORY[0x1E4F143A8];
    v252[1] = 3221225472;
    v252[2] = __CalDatabaseSaveInternalWithOptions_block_invoke;
    v252[3] = &unk_1E5D610D8;
    v252[4] = &v268;
    v252[5] = &v260;
    v252[6] = v257;
    uint64_t v64 = (void (**)(void, void))MEMORY[0x1AD0E9DC0](v252);
    uint64_t v65 = v251;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v251 + 24))
      {
        int v66 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v66) {
          os_unfair_lock_assert_owner(v66 + 20);
        }
      }
    }
    CFArrayRef v67 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v251 + 24))
      {
        int v68 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v68) {
          os_unfair_lock_assert_owner(v68 + 20);
        }
      }
    }
    CFArrayRef v242 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v251 + 24))
      {
        id v69 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v69) {
          os_unfair_lock_assert_owner(v69 + 20);
        }
      }
    }
    CFArrayRef v250 = (const __CFArray *)CPRecordStoreCopyDeletedRecords();
    uint64_t v70 = *(void *)(v251 + 264);
    if (a2)
    {
      if (v67)
      {
        CFArrayRef v238 = v67;
        if (v70) {
          CFArrayRef v238 = (const __CFArray *)-[__CFArray arrayByAddingObjectsFromArray:](v67, "arrayByAddingObjectsFromArray:");
        }
      }
      else
      {
        CFArrayRef v238 = *(const __CFArray **)(v251 + 264);
      }
      long long v277 = 0u;
      memset(buf, 0, sizeof(buf));
      uint64_t v73 = [MEMORY[0x1E4F1C9C8] CalSimulatedDateForNow];
      *(_WORD *)buf = 1;
      id v74 = v73;
      uint64_t v75 = [v74 dateByAddingTimeInterval:86400.0];
      uint64_t v76 = [objc_alloc(MEMORY[0x1E4F576D0]) initWithStartDate:v74 endDate:v75];
      uint64_t v77 = *(void **)&buf[8];
      *(void *)&buf[8] = v76;

      *(_WORD *)&uint8_t buf[16] = 1;
      int v78 = CalCopyCalendar();
      CFIndex v79 = [v78 startOfDayForDate:v74];
      [MEMORY[0x1E4F57820] lookaheadIntervalForDaysPerEntry:*MEMORY[0x1E4F57588]];
      int v80 = objc_msgSend(v79, "dateByAddingTimeInterval:");
      uint64_t v81 = [objc_alloc(MEMORY[0x1E4F576D0]) initWithStartDate:v79 endDate:v80];
      int v82 = *(void **)&buf[24];
      *(void *)&buf[24] = v81;

      LOBYTE(v277) = 0;
      _CalDatabaseChangesOfTypeMayAffectWidgets(v251, v238, 0, buf);
      if (!buf[1])
      {
        _CalDatabaseChangesOfTypeMayAffectWidgets(v251, v242, 1uLL, buf);
        if (!buf[1]) {
          _CalDatabaseChangesOfTypeMayAffectWidgets(v251, v250, 2uLL, buf);
        }
      }
      BOOL v236 = buf[17] != 0;
      if (buf[17])
      {
        *(_DWORD *)(v251 + 84) |= 0x80u;
      }
      else
      {
        id v83 = (id)CDBWidgetReloadHandle;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v256 = 0;
          _os_log_impl(&dword_1A8E81000, v83, OS_LOG_TYPE_DEFAULT, "Disallowing reload for changes because they don't affect the widget", v256, 2u);
        }
      }
      if (buf[1]) {
        *(_DWORD *)(v251 + 84) |= 0x40u;
      }

      for (uint64_t n = 40; n != -8; n -= 16)
      uint64_t v65 = v251;
    }
    else
    {
      CFArrayRef v71 = v67;
      if (v70)
      {
        if (!v67)
        {
          CFArrayRef v238 = 0;
          BOOL v236 = 0;
          goto LABEL_129;
        }
        CFArrayRef v71 = (const __CFArray *)[*(id *)(v251 + 264) arrayByAddingObjectsFromArray:v67];
      }
      if (!v71 || (CFArrayRef v72 = *(const __CFArray **)(v251 + 264), v71 == v72))
      {
        BOOL v236 = 0;
      }
      else
      {
        if (v72) {
          CFRelease(v72);
        }
        BOOL v236 = 0;
        *(void *)(v251 + 264) = CFRetain(v71);
      }
      CFArrayRef v238 = v67;
    }
LABEL_129:
    if (_os_feature_enabled_impl())
    {
      v85 = [(id)EKWeakLinkClass() sharedNotifier];
      char v86 = [v85 isObserved];

      if (v86)
      {
        uint64_t v65 = v251;
        BOOL v237 = _CalDatabaseChangesOfTypeMayAffectAppEntities(v238, 0)
            || _CalDatabaseChangesOfTypeMayAffectAppEntities(v242, 1)
            || _CalDatabaseChangesOfTypeMayAffectAppEntities(v250, 2);
        goto LABEL_137;
      }
      v87 = CDBAppEntityHandle;
      BOOL v237 = 0;
      uint64_t v65 = v251;
      if (!os_log_type_enabled((os_log_t)CDBAppEntityHandle, OS_LOG_TYPE_DEFAULT))
      {
LABEL_137:
        if (*(unsigned char *)(v65 + 381)
          || (v88 = __CalDatabaseBeginWriteTransaction(v65, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:2827"), uint64_t v65 = v251, v88))
        {
          *(unsigned char *)(v65 + 381) = a2 ^ 1;
          int v89 = 1;
        }
        else
        {
          int v142 = (id)CDBLogHandle;
          if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A8E81000, v142, OS_LOG_TYPE_ERROR, "Couldn't begin a transaction. Won't save the database", buf, 2u);
          }

          id v143 = [MEMORY[0x1E4F28C58] errorWithDomain:@"CalDatabaseErrorDomain" code:1 userInfo:0];

          CFTypeRef cf = v143;
          int v89 = 0;
          uint64_t v65 = v251;
        }
        if (cf) {
          goto LABEL_234;
        }
        CFTypeRef cf = (CFTypeRef)_CalStoreSaveAddedRecords(v65);
        uint64_t v65 = v251;
        if (cf) {
          goto LABEL_234;
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 1, _CalCalendarHasValidParent);
        CFTypeRef cf = (CFTypeRef)_CalCalendarSaveAddedRecords(v251);
        uint64_t v65 = v251;
        if (cf) {
          goto LABEL_234;
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 28, _CalImageHasValidParent);
        CFTypeRef cf = (CFTypeRef)_CalImageSaveAddedRecords(v251);
        uint64_t v65 = v251;
        if (cf) {
          goto LABEL_234;
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 29, _CalColorHasValidParent);
        CFTypeRef cf = (CFTypeRef)_CalColorSaveAddedRecords(v251);
        uint64_t v65 = v251;
        if (cf) {
          goto LABEL_234;
        }
        CFDictionaryRef v90 = *(const __CFDictionary **)(v251 + 64);
        if (v90)
        {
          CFMutableSetRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
          CFSetRef Value = (const __CFSet *)CFDictionaryGetValue(v90, (const void *)2);
          if (Value) {
            CFSetApplyFunction(Value, (CFSetApplierFunction)_CalendarItemSetUnion, Mutable);
          }
          CFSetRef v93 = (const __CFSet *)CFDictionaryGetValue(v90, (const void *)3);
          if (v93) {
            CFSetApplyFunction(v93, (CFSetApplierFunction)_CalendarItemSetUnion, Mutable);
          }
          if (Mutable)
          {
            if (CFSetGetCount(Mutable) >= 1)
            {
              CFMutableStringRef v94 = CFStringCreateMutable(0, 0);
              CFMutableArrayRef v95 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
              CFMutableArrayRef v96 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
              *(void *)buf = v251;
              *(void *)&buf[8] = v94;
              *(void *)&uint8_t buf[16] = v95;
              *(void *)&buf[24] = v96;
              CFSetApplyFunction(Mutable, (CFSetApplierFunction)_CalGatherAddedDetachedItemDetails, buf);
              CFIndex Length = CFStringGetLength(v94);
              if (Length >= 1)
              {
                v284.length = 1;
                v284.id location = Length - 1;
                CFStringDelete(v94, v284);
                if (CDBLockingAssertionsEnabled)
                {
                  if (*(void *)(v251 + 24))
                  {
                    int v98 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v98) {
                      os_unfair_lock_assert_owner(v98 + 20);
                    }
                  }
                }
                uint64_t Database = CPRecordStoreGetDatabase();
                int v100 = CFStringCreateMutable(0, 0);
                CFStringAppendFormat(v100, 0, @"SELECT ROWID, orig_item_id, orig_date FROM CalendarItem WHERE orig_date IN (%@)", v94);
                if (CDBLockingAssertionsEnabled)
                {
                  if (Database)
                  {
                    if (*(void *)(Database + 104))
                    {
                      id v101 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v101) {
                        os_unfair_lock_assert_owner(v101 + 20);
                      }
                    }
                  }
                }
                int v102 = (uint64_t **)CPSqliteDatabaseStatementForReading();
                v103 = v102;
                if (v102)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v102)
                    {
                      uint64_t v104 = **v102;
                      if (v104)
                      {
                        if (*(void *)(v104 + 104))
                        {
                          v105 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v105) {
                            os_unfair_lock_assert_owner(v105 + 20);
                          }
                        }
                      }
                    }
                  }
                  CPSqliteStatementSendResults();
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v103)
                    {
                      uint64_t v106 = **v103;
                      if (v106)
                      {
                        if (*(void *)(v106 + 104))
                        {
                          v107 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v107) {
                            os_unfair_lock_assert_owner(v107 + 20);
                          }
                        }
                      }
                    }
                  }
                  CPSqliteStatementReset();
                }
                CFRelease(v100);
              }
              CFRelease(v96);
              CFRelease(v95);
              CFRelease(v94);
            }
            CFRelease(Mutable);
          }
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 2, _CalCalendarItemHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 3, _CalCalendarItemHasValidParent);
        uint64_t v65 = v251;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)(v251 + 24))
          {
            int v108 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v108) {
              os_unfair_lock_assert_owner(v108 + 20);
            }
          }
        }
        CFArrayRef v109 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
        CFArrayRef v110 = v109;
        if (v109)
        {
          CFIndex v111 = CFArrayGetCount(v109);
          if (v111 >= 1)
          {
            for (iCFIndex i = 0; ii != v111; ++ii)
            {
              uint64_t v113 = CFArrayGetValueAtIndex(v110, ii);
              if (_CalEntityIsOfType(v113, 2)) {
                _CalEventRectifyRecurrenceSeriesPrivacyLevels(v113);
              }
            }
          }
          CFRelease(v110);
        }
        CFTypeRef cf = (CFTypeRef)_CalEventSaveAddedRecords(v251);
        if (cf) {
          goto LABEL_234;
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 4, _CalAlarmHasValidParent);
        CFTypeRef cf = (CFTypeRef)_CalAlarmSaveAddedRecords(v251);
        uint64_t v65 = v251;
        if (cf) {
          goto LABEL_234;
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 25, _CalAttachmentFileHasValidParent);
        CFTypeRef cf = (CFTypeRef)_CalAttachmentFileSaveAddedRecords(v251);
        uint64_t v65 = v251;
        if (cf) {
          goto LABEL_234;
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 11, _CalAttachmentHasValidParent);
        CFTypeRef cf = (CFTypeRef)_CalAttachmentSaveAddedRecords(v251);
        uint64_t v65 = v251;
        if (cf) {
          goto LABEL_234;
        }
        uint64_t v114 = *(void *)(v251 + 24);
        if (CDBLockingAssertionsEnabled)
        {
          if (v114)
          {
            v115 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v115) {
              os_unfair_lock_assert_owner(v115 + 20);
            }
          }
        }
        CFArrayRef v116 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
        CFArrayRef v117 = v116;
        if (v116)
        {
          CFIndex v118 = CFArrayGetCount(v116);
          if (v118 >= 1)
          {
            for (jCFIndex j = 0; jj != v118; ++jj)
            {
              int v120 = CFArrayGetValueAtIndex(v117, jj);
              if (_CalEntityIsOfType(v120, 20)) {
                _CalSuggestedEventInfoInsertAndUpdateNotificationsForInfo((uint64_t)v120);
              }
            }
          }
          CFRelease(v117);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (v114)
          {
            v121 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v121) {
              os_unfair_lock_assert_owner(v121 + 20);
            }
          }
        }
        CFArrayRef v122 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
        CFArrayRef v123 = v122;
        if (v122)
        {
          CFIndex v124 = CFArrayGetCount(v122);
          if (v124 >= 1)
          {
            for (kCFIndex k = 0; kk != v124; ++kk)
            {
              int v126 = CFArrayGetValueAtIndex(v123, kk);
              if (_CalEntityIsOfType(v126, 20))
              {
                _CalSuggestedEventInfoInsertAndUpdateNotificationsForInfo((uint64_t)v126);
              }
              else if (_CalEntityIsOfType(v126, 2) {
                     && _CalCalendarItemGetStatus((uint64_t)v126) == 3
              }
                     && _CalEventIsSuggestedEvent((uint64_t)v126))
              {
                _CalSuggestedEventInfoInsertAndUpdateNotificationsForEvent((uint64_t)v126);
              }
            }
          }
          CFRelease(v123);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (v114)
          {
            v127 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v127) {
              os_unfair_lock_assert_owner(v127 + 20);
            }
          }
        }
        CFArrayRef v128 = (const __CFArray *)CPRecordStoreCopyDeletedRecords();
        CFArrayRef v129 = v128;
        if (v128)
        {
          CFIndex v130 = CFArrayGetCount(v128);
          if (v130 >= 1)
          {
            for (muint64_t m = 0; mm != v130; ++mm)
            {
              int v132 = CFArrayGetValueAtIndex(v129, mm);
              if (_CalEntityIsOfType(v132, 20)) {
                _CalSuggestedEventInfoRemoveNotificationsForInfo((uint64_t)v132);
              }
            }
          }
          CFRelease(v129);
        }
        uint64_t v65 = v251;
        if (cf
          || (_CalDatabaseRemoveOrphanedEntitiesOfType(v251, 102, _CalNotificationHasValidParent),
              CFTypeRef cf = (CFTypeRef)_CalNotificationSaveAddedRecords(v251),
              uint64_t v65 = v251,
              cf)
          || (cf = (CFTypeRef)_CalAuxDatabaseSaveAddedRecords(v251), uint64_t v65 = v251, cf))
        {
LABEL_234:
          if ((v89 & a2) != 1)
          {
            CFArrayRef v133 = 0;
            goto LABEL_238;
          }
          __CalDatabaseRollbackTransaction(v65, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:3092");
          CFArrayRef v133 = 0;
LABEL_236:
          uint64_t v65 = v251;
LABEL_238:
          CFTypeRef v134 = cf;
          if (*(void *)(v65 + 32) && cf)
          {
            _CalEventOccurrenceCacheStopTrackingAndRevert();
            CFTypeRef v134 = cf;
            uint64_t v65 = v251;
          }
          v135 = *(void **)(v65 + 40);
          if (v135)
          {
            if (v134)
            {
              _CalScheduledTaskCacheStopTrackingUpdates(v135);
              _CalScheduledTaskCacheRevert(*(void *)(v251 + 40));
              if (a2) {
                _CalScheduledTaskCacheFinishSave(*(void *)(v251 + 40));
              }
            }
          }
          BOOL v136 = _CalDatabaseShouldPostInProcessChangeNotification(v251);
          int64_t v137 = 0;
          BOOL v138 = 0;
          CFTypeRef v139 = cf;
          if (a2 && !cf)
          {
            if ((*(unsigned char *)(v251 + 16) & 8) == 0)
            {
              BOOL v140 = v136;
              if (v133) {
                CFIndex v141 = CFArrayGetCount(v133);
              }
              else {
                CFIndex v141 = 0;
              }
              CFArrayRef v144 = theArray;
              if (theArray)
              {
                CFIndex v145 = CFArrayGetCount(theArray);
                if (v133)
                {
                  if (*(unsigned char *)(*((void *)&v268 + 1) + 24)) {
                    goto LABEL_259;
                  }
                  if (*(unsigned char *)(*((void *)&v260 + 1) + 24))
                  {
                    if (!*(unsigned char *)(*(void *)&v257[8] + 24))
                    {
                      int64_t v137 = 1;
                      goto LABEL_260;
                    }
LABEL_259:
                    int64_t v137 = 0;
LABEL_260:
                    uint64_t v146 = v145 + v141;
                    if (v140)
                    {
                      v147 = +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:v251];
                      int v148 = v147;
                      if (v146 > 512) {
                        [v147 clearAllChangesets];
                      }
                      else {
                        [v147 addChangeset:v133 deletes:v144 clientID:*(unsigned int *)(v251 + 168) changeType:v137];
                      }

                      LODWORD(v144) = 1;
                    }
                    else
                    {
                      if (v146 > 512) {
                        BOOL v149 = _CalDatabaseSendChangeNotificationWithNoObjectIdsToCalaccessd(v251, v137);
                      }
                      else {
                        BOOL v149 = _CalDatabaseSendChangeNotificationAndObjectIdsToCalaccessd(v251, v133, v144, v137, a5 & 1, v246);
                      }
                      if (!v149) {
                        _CalDatabasePostChangeNotificationToExternalClients(v251, v137);
                      }
                      LODWORD(v144) = 0;
                    }
                    CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter();
                    if (v236) {
                      CalDatabaseRequestWidgetRefreshWithRateLimiter();
                    }
                    if (v237)
                    {
                      int v150 = [(id)EKWeakLinkClass() sharedNotifier];
                      [v150 notifyObservers];
                    }
                    goto LABEL_283;
                  }
                  if (*(unsigned char *)(*(void *)&v257[8] + 24))
                  {
                    int64_t v137 = 2;
                    goto LABEL_260;
                  }
                }
                int64_t v137 = 0;
                LODWORD(v144) = 0;
              }
              else
              {
                int64_t v137 = 0;
              }
LABEL_283:
              BOOL v138 = v144 != 0;
              CFTypeRef v139 = cf;
              goto LABEL_284;
            }
            CFTypeRef v139 = 0;
            BOOL v138 = 0;
            int64_t v137 = 0;
          }
LABEL_284:
          if (*(unsigned __int8 *)(v251 + 272) | _IsUnitTesting && a2 && !v139)
          {
            if ((*(unsigned char *)(v251 + 16) & 8) == 0) {
              goto LABEL_296;
            }
            v151 = +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:v251];
            int v152 = v151;
            if (v133 && theArray) {
              [v151 addChangeset:v133 deletes:theArray clientID:*(unsigned int *)(v251 + 168) changeType:v137];
            }
            else {
              [v151 clearAllChangesets];
            }

            CFTypeRef v139 = cf;
          }
          if (v139)
          {
            uint64_t v153 = v251;
            if (!a2)
            {
LABEL_377:
              if (*(unsigned char *)(v153 + 382))
              {
                _CalDatabaseRevertInternal(v153, 1);
                uint64_t v153 = v251;
                *(unsigned char *)(v251 + 382) = 0;
              }
              v188 = (os_unfair_lock_s *)(v153 + 80);
              if (CDBLockingAssertionsEnabled) {
                os_unfair_lock_assert_owner((const os_unfair_lock *)(v153 + 80));
              }
              os_unfair_lock_unlock(v188);
              if (v138) {
                _CalDatabasePostDBOrSyncStatusChangeNotificationToInternalAndExternalClients(v251, v137, a5 & 1);
              }
              if (cf)
              {
                if (a4) {
                  *a4 = cf;
                }
                else {
                  CFRelease(cf);
                }
              }
              if (v133) {
                CFRelease(v133);
              }
              if (theArray) {
                CFRelease(theArray);
              }
              if (v67) {
                CFRelease(v67);
              }
              if (v242) {
                CFRelease(v242);
              }
              if (v250) {
                CFRelease(v250);
              }
              if (v244) {
                CFRelease(v244);
              }
              if (v243) {
                CFRelease(v243);
              }
              [v248 stop];
              v189 = (id)CDBLogHandle;
              if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
              {
                CalBooleanAsString();
                id v190 = (id)objc_claimAutoreleasedReturnValue();
                v191 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v248, "elapsedTimeAsNumber:", 1));
                *(_DWORD *)buf = 138412546;
                *(void *)&uint8_t buf[4] = v190;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v191;
                _os_log_impl(&dword_1A8E81000, v189, OS_LOG_TYPE_DEBUG, "Database save complete.  Commit: [%@].  Total time spent: [%@] milliseconds.", buf, 0x16u);
              }
              _Block_object_dispose(v257, 8);
              _Block_object_dispose(&v260, 8);
              _Block_object_dispose(&v268, 8);
              goto LABEL_404;
            }
LABEL_375:
            v187 = *(const void **)(v153 + 264);
            if (v187)
            {
              CFRelease(v187);
              uint64_t v153 = v251;
              *(void *)(v251 + 264) = 0;
            }
            goto LABEL_377;
          }
LABEL_296:
          if (v250 && CFArrayGetCount(v250) >= 1)
          {
            if (CalDatabaseIsCurrentProcessCalaccessd_onceToken != -1) {
              dispatch_once(&CalDatabaseIsCurrentProcessCalaccessd_onceToken, &__block_literal_global_75);
            }
            if (CalDatabaseIsCurrentProcessCalaccessd_isCalaccessd)
            {
              if (_CalDatabaseVacuumIfNeeded_onceToken != -1) {
                dispatch_once(&_CalDatabaseVacuumIfNeeded_onceToken, &__block_literal_global_439);
              }
              double Current = CFAbsoluteTimeGetCurrent();
              if (Current - *(double *)&_CalDatabaseVacuumIfNeeded___LastVacuumTimestamp > 3.0)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*(void *)(v251 + 24))
                  {
                    v155 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v155) {
                      os_unfair_lock_assert_owner(v155 + 20);
                    }
                  }
                }
                uint64_t v156 = CPRecordStoreGetDatabase();
                if (CDBLockingAssertionsEnabled)
                {
                  if (v156)
                  {
                    if (*(void *)(v156 + 104))
                    {
                      v157 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v157) {
                        os_unfair_lock_assert_owner(v157 + 20);
                      }
                    }
                  }
                }
                uint64_t v158 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
                v159 = (void *)v158;
                if (v158)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*(void *)v158)
                    {
                      if (*(void *)(*(void *)v158 + 104))
                      {
                        int v160 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v160) {
                          os_unfair_lock_assert_owner(v160 + 20);
                        }
                      }
                    }
                  }
                  v161 = (uint64_t **)CPSqliteConnectionStatementForSQL();
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v159)
                    {
                      if (*(void *)(*v159 + 104))
                      {
                        int v162 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v162) {
                          os_unfair_lock_assert_owner(v162 + 20);
                        }
                      }
                    }
                  }
                  uint64_t v163 = CPSqliteConnectionStatementForSQL();
                  if (v161)
                  {
                    int v164 = (uint64_t **)v163;
                    if (v163)
                    {
                      *(_DWORD *)v256 = 0;
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v161)
                        {
                          uint64_t v165 = **v161;
                          if (v165)
                          {
                            if (*(void *)(v165 + 104))
                            {
                              int v166 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v166) {
                                os_unfair_lock_assert_owner(v166 + 20);
                              }
                            }
                          }
                        }
                      }
                      int v167 = CPSqliteStatementIntegerResult();
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v161)
                        {
                          uint64_t v168 = **v161;
                          if (v168)
                          {
                            if (*(void *)(v168 + 104))
                            {
                              v169 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v169) {
                                os_unfair_lock_assert_owner(v169 + 20);
                              }
                            }
                          }
                        }
                      }
                      CPSqliteStatementReset();
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v164)
                        {
                          uint64_t v170 = **v164;
                          if (v170)
                          {
                            if (*(void *)(v170 + 104))
                            {
                              v171 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v171) {
                                os_unfair_lock_assert_owner(v171 + 20);
                              }
                            }
                          }
                        }
                      }
                      int v172 = CPSqliteStatementIntegerResult();
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v164)
                        {
                          uint64_t v173 = **v164;
                          if (v173)
                          {
                            if (*(void *)(v173 + 104))
                            {
                              int v174 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v174) {
                                os_unfair_lock_assert_owner(v174 + 20);
                              }
                            }
                          }
                        }
                      }
                      CPSqliteStatementReset();
                      if (*(_DWORD *)v256 != 1)
                      {
                        uint64_t v175 = v167 - (uint64_t)v172;
                        double v176 = (double)v175 / (double)v167;
                        if (v176 <= 0.85 || v172 >= 512)
                        {
                          uint64_t v177 = v172 - v175;
                          if (v176 >= 0.4) {
                            uint64_t v177 = (uint64_t)((double)v172 * 0.2);
                          }
                          CFStringRef v178 = CFStringCreateWithFormat(0, 0, @"pragma incremental_vacuum(%d);", v177);
                          if (v178)
                          {
                            if (CDBLockingAssertionsEnabled)
                            {
                              if (*v159)
                              {
                                if (*(void *)(*v159 + 104))
                                {
                                  v179 = (const os_unfair_lock *)CPRecordStoreGetContext();
                                  if (v179) {
                                    os_unfair_lock_assert_owner(v179 + 20);
                                  }
                                }
                              }
                            }
                            int v180 = (uint64_t **)CPSqliteConnectionStatementForSQL();
                            if (v180)
                            {
                              if (CDBLockingAssertionsEnabled)
                              {
                                if (*v180)
                                {
                                  uint64_t v181 = **v180;
                                  if (v181)
                                  {
                                    if (*(void *)(v181 + 104))
                                    {
                                      v182 = (const os_unfair_lock *)CPRecordStoreGetContext();
                                      if (v182) {
                                        os_unfair_lock_assert_owner(v182 + 20);
                                      }
                                    }
                                  }
                                }
                              }
                              CPSqliteStatementSendResults();
                            }
                            else
                            {
                              v183 = (void *)CDBLogHandle;
                              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                              {
                                v184 = (sqlite3 *)v159[1];
                                v185 = v183;
                                v186 = sqlite3_errmsg(v184);
                                *(_DWORD *)buf = 138412546;
                                *(void *)&uint8_t buf[4] = v178;
                                *(_WORD *)&buf[12] = 2080;
                                *(void *)&buf[14] = v186;
                                _os_log_impl(&dword_1A8E81000, v185, OS_LOG_TYPE_ERROR, "Couldn't get statement for SQL \"%@\"\nError: %s", buf, 0x16u);
                              }
                            }
                            CFRelease(v178);
                          }
                        }
                      }
                    }
                  }
                }
                _CalDatabaseVacuumIfNeeded___LastVacuumTimestamp = *(void *)&Current;
              }
            }
          }
          uint64_t v153 = v251;
          if (!a2) {
            goto LABEL_377;
          }
          *(_DWORD *)(v251 + 84) = 0;
          *(_DWORD *)(v251 + 88) = 0;
          goto LABEL_375;
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 7, _CalParticipantHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 8, _CalParticipantHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 9, _CalEventActionHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 5, _CalRecurrenceHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 10, _CalExceptionDateHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 14, _CalLocationHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 15, _CalShareeHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 16, _CalNotificationHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 18, _CalResourceChangeHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 20, _CalSuggestedEventInfoHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 21, _CalContactHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 23, _CalConferenceHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 24, _CalErrorHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v251, 27, _CalAuxDatabaseAccountHasValidParent);
        v192 = *(const void **)(v251 + 64);
        if (v192)
        {
          CFRelease(v192);
          *(void *)(v251 + 64) = 0;
        }
        v193 = *(const void **)(v251 + 72);
        if (v193)
        {
          CFRelease(v193);
          *(void *)(v251 + 72) = 0;
        }
        v194 = *(const void **)(v251 + 96);
        if (v194)
        {
          CFRelease(v194);
          *(void *)(v251 + 96) = 0;
        }
        CFArrayRef v133 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        CFArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        if (!v242 || (CFIndex v195 = CFArrayGetCount(v242), v195 < 1))
        {
LABEL_446:
          if (v250)
          {
            CFIndex v235 = CFArrayGetCount(v250);
            if (v235 >= 1)
            {
              for (nuint64_t n = 0; nn != v235; ++nn)
              {
                v211 = CFArrayGetValueAtIndex(v250, nn);
                Recordint ID = _CalEntityGetRecordID(v211);
                v213 = (const void *)RecordID;
                if (RecordID)
                {
                  if (!CalDatabaseChangesToRecordIDShouldBeIgnoredByEventKit(RecordID))
                  {
                    if (_CalEntityIsOfType(v211, 24))
                    {
                      *(unsigned char *)(*((void *)&v260 + 1) + 24) = 1;
                      validateAndAddObjectID(theArray, v213);
                    }
                    else
                    {
                      ((void (**)(void, const void *))v64)[2](v64, v211);
                      validateAndAddObjectID(theArray, v213);
                      addRelatedObjectIDsForDeletedRecord(v211, (CFTypeRef *)&theArray);
                    }
                  }
                }
                else
                {
                  v214 = (id)CDBLogHandle;
                  if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
                  {
                    int ID = CPRecordGetID();
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (v211)
                      {
                        if (CPRecordGetStore())
                        {
                          v216 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v216) {
                            os_unfair_lock_assert_owner(v216 + 20);
                          }
                        }
                      }
                    }
                    int IsDeleted = CPRecordIsDeleted();
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = ID;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = IsDeleted;
                    _os_log_impl(&dword_1A8E81000, v214, OS_LOG_TYPE_ERROR, "CalDatabaseSaveInternal: failed to get recordID for deleted record with rowid [%d], deleted: %d", buf, 0xEu);
                  }
                }
              }
            }
          }
          if (CDBLockingAssertionsEnabled) {
            BOOL v218 = *(void *)(v251 + 24) == 0;
          }
          else {
            BOOL v218 = 1;
          }
          int v219 = !v218;
          if (a2)
          {
            if (v219)
            {
              v220 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v220) {
                os_unfair_lock_assert_owner(v220 + 20);
              }
            }
            int v221 = CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType();
            int v222 = v221;
            if (a3 != 1 && v221 != 1)
            {
              if (cf)
              {
                Domaiuint64_t n = CFErrorGetDomain((CFErrorRef)cf);
                if (Domain)
                {
                  if (CFEqual(Domain, (CFStringRef)*MEMORY[0x1E4F4BE90])
                    && CFErrorGetCode((CFErrorRef)cf) == 2)
                  {
                    CFRelease(cf);
                    CFTypeRef cf = 0;
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (*(void *)(v251 + 24))
                      {
                        v224 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v224) {
                          os_unfair_lock_assert_owner(v224 + 20);
                        }
                      }
                    }
                    int v222 = CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType();
                  }
                }
              }
            }
            if (v222) {
              __CalDatabaseCommitTransaction(v251, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:3064");
            }
            else {
              __CalDatabaseRollbackTransaction(v251, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:3066");
            }
          }
          else
          {
            if (v219)
            {
              v225 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v225) {
                os_unfair_lock_assert_owner(v225 + 20);
              }
            }
            CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType();
          }
          if (v238)
          {
            CFIndex v240 = CFArrayGetCount(v238);
            if (v240 >= 1)
            {
              for (CFIndex i1 = 0; i1 != v240; ++i1)
              {
                v227 = CFArrayGetValueAtIndex(v238, i1);
                uint64_t v228 = _CalEntityGetRecordID(v227);
                v229 = (const void *)v228;
                if (v228)
                {
                  if (!CalDatabaseChangesToRecordIDShouldBeIgnoredByEventKit(v228))
                  {
                    if (_CalEntityIsOfType(v227, 24)) {
                      *(unsigned char *)(*((void *)&v260 + 1) + 24) = 1;
                    }
                    else {
                      ((void (**)(void, const void *))v64)[2](v64, v227);
                    }
                    validateAndAddObjectID(v133, v229);
                  }
                }
                else
                {
                  v230 = (id)CDBLogHandle;
                  if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
                  {
                    int v231 = CPRecordGetID();
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (v227)
                      {
                        if (CPRecordGetStore())
                        {
                          v232 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v232) {
                            os_unfair_lock_assert_owner(v232 + 20);
                          }
                        }
                      }
                    }
                    int v233 = CPRecordIsDeleted();
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = v231;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v233;
                    _os_log_impl(&dword_1A8E81000, v230, OS_LOG_TYPE_ERROR, "CalDatabaseSaveInternal: failed to get recordID for added record with rowid [%d], deleted: %d", buf, 0xEu);
                  }
                }
              }
            }
          }
          goto LABEL_236;
        }
        CFIndex v196 = 0;
        while (1)
        {
          v234 = CFArrayGetValueAtIndex(v242, v196);
          uint64_t v197 = _CalEntityGetRecordID(v234);
          v198 = (const void *)v197;
          if (!v197)
          {
            v203 = (id)CDBLogHandle;
            if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
            {
              int v204 = CPRecordGetID();
              if (CDBLockingAssertionsEnabled)
              {
                if (v234)
                {
                  if (CPRecordGetStore())
                  {
                    v205 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v205) {
                      os_unfair_lock_assert_owner(v205 + 20);
                    }
                  }
                }
              }
              int v206 = CPRecordIsDeleted();
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v204;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v206;
              _os_log_impl(&dword_1A8E81000, v203, OS_LOG_TYPE_ERROR, "CalDatabaseSaveInternal: failed to get recordID for updated record with rowid [%d], deleted: %d", buf, 0xEu);
            }

            goto LABEL_445;
          }
          if (!CalDatabaseChangesToRecordIDShouldBeIgnoredByEventKit(v197))
          {
            if (CalRecordIDGetEntityType((uint64_t)v198) == 6)
            {
              BOOL HasDirtyInstanceAttributes = _CalStoreHasDirtyInstanceAttributes((uint64_t)v234);
              BOOL HasDirtySyncAttributes = _CalStoreHasDirtySyncAttributes((uint64_t)v234);
              _CalStoreClearDirtyAttributes((uint64_t)v234);
              if (!HasDirtyInstanceAttributes)
              {
                if (!HasDirtySyncAttributes) {
                  goto LABEL_445;
                }
LABEL_432:
                *(unsigned char *)(*((void *)&v260 + 1) + 24) = 1;
                validateAndAddObjectID(v133, v198);
                goto LABEL_445;
              }
              BOOL v201 = _CalStoreAllowsEvents((uint64_t)v234);
              BOOL v202 = _CalStoreAllowedEvents((uint64_t)v234);
              if (v201 || v202)
              {
                if (!v202 || v201) {
                  goto LABEL_443;
                }
                ((void (**)(void, const void *))v64)[2](v64, v234);
                validateAndAddObjectID(theArray, v198);
                addRelatedObjectIDsForDeletedRecord(v234, (CFTypeRef *)&theArray);
              }
            }
            else
            {
              if (CalRecordIDGetEntityType((uint64_t)v198) != 1)
              {
                if (_CalEntityIsOfType(v234, 11))
                {
                  BOOL HasDirtyNotifiableAttributes = _CalAttachmentHasDirtyInstanceAttributes((uint64_t)v234);
LABEL_439:
                  if (!HasDirtyNotifiableAttributes) {
                    goto LABEL_445;
                  }
                  goto LABEL_443;
                }
                if (_CalEntityIsOfType(v234, 101))
                {
                  BOOL HasDirtyNotifiableAttributes = _CalCalendarItemHasDirtyNotifiableAttributes((uint64_t)v234);
                  goto LABEL_439;
                }
                if (_CalEntityIsOfType(v234, 24)) {
                  *(unsigned char *)(*((void *)&v260 + 1) + 24) = 1;
                }
                else {
LABEL_443:
                }
                  ((void (**)(void, const void *))v64)[2](v64, v234);
                validateAndAddObjectID(v133, v198);
                goto LABEL_445;
              }
              BOOL v207 = _CalCalendarHasDirtyInstanceAttributes((uint64_t)v234);
              BOOL v208 = _CalCalendarHasDirtySyncAttributes((uint64_t)v234);
              if (v207) {
                goto LABEL_443;
              }
              if (v208) {
                goto LABEL_432;
              }
            }
          }
LABEL_445:
          if (v195 == ++v196) {
            goto LABEL_446;
          }
        }
      }
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A8E81000, v87, OS_LOG_TYPE_DEFAULT, "App Entity Observation: no observers", buf, 2u);
    }
    BOOL v237 = 0;
    goto LABEL_137;
  }
  int v50 = CDBLogHandle;
LABEL_61:
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A8E81000, v50, OS_LOG_TYPE_DEBUG, "No record store found.  Will not proceed with saving the database.", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(v9 + 80));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 80));
LABEL_404:
}

void sub_1A8E9B3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void CalDatabaseSetStatementCacheLimit(uint64_t a1)
{
  CFTypeRef v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      id v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  CPSqliteDatabaseSetStatementCacheLimit();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

uint64_t CalDatabaseStatementCacheLimit(uint64_t a1)
{
  CFTypeRef v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      id v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t StatementCacheLimit = CPSqliteDatabaseGetStatementCacheLimit();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return StatementCacheLimit;
}

uint64_t CalDatabaseCopyAddedRecords(uint64_t a1)
{
  CFTypeRef v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCopyAddedRecords();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

CFTypeRef CalDatabaseSaveWithConflictPolicy(CFTypeRef result, unsigned __int16 a2)
{
  CFTypeRef v2 = 0;
  if (result)
  {
    CalDatabaseSaveInternalWithOptions((uint64_t)result, 1, a2, &v2, 0);
    return v2;
  }
  return result;
}

uint64_t CalDatabaseSaveWithOptions(uint64_t a1, char a2)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 1;
  }
  uint64_t v2 = 1;
  CalDatabaseSaveInternalWithOptions(a1, 1, 0, &cf, a2);
  if (cf)
  {
    CFRelease(cf);
    return 0;
  }
  return v2;
}

uint64_t CalDatabaseSave(uint64_t a1)
{
  return CalDatabaseSaveWithOptions(a1, 0);
}

void CalDatabaseProcessAddedRecords(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (a1)
  {
    CalDatabaseSaveInternalWithOptions(a1, 0, 0, &cf, 0);
    if (cf) {
      CFRelease(cf);
    }
  }
}

CFTypeRef CalDatabaseProcessAddedRecordsWithConflictPolicy(CFTypeRef result, unsigned __int16 a2)
{
  CFTypeRef v2 = 0;
  if (result)
  {
    CalDatabaseSaveInternalWithOptions((uint64_t)result, 0, a2, &v2, 0);
    return v2;
  }
  return result;
}

void CalDatabaseSetProperty(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseSetProperty((uint64_t)a1, a2, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
}

uint64_t _CalDatabaseSetProperty(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 24);
  if (v3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    return MEMORY[0x1F41096A8](v3, a2, a3);
  }
  return result;
}

uint64_t CalDatabaseCopyProperty(os_unfair_lock_s *a1)
{
  CFTypeRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = _CalDatabaseCopyProperty((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalDatabaseCopyProperty(uint64_t a1)
{
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreCopyValueForProperty();
}

void CalDatabaseRemoveProperty(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __CalDatabaseRemoveProperty_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = v5;
    v6[5] = a2;
    [*(id *)(a1 + 336) performWithWriteLock:v6];
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
}

uint64_t __CalDatabaseRemoveProperty_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  return MEMORY[0x1F4109668](v2, v5);
}

void CalDatabaseSetIntegerProperty(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseSetIntegerProperty((uint64_t)a1, a2, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
}

void _CalDatabaseSetIntegerProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"%d", a3);
  if (v5)
  {
    CFStringRef v6 = v5;
    _CalDatabaseSetProperty(a1, a2, (uint64_t)v5);
    CFRelease(v6);
  }
}

uint64_t CalDatabaseCopyUniqueIdentifier(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    uint64_t v3 = Database;
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          CFStringRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      uint64_t v3 = CPSqliteDatabaseCopyUniqueIdentifier();
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

void CalDatabaseSetChangeLoggingEnabled(os_unfair_lock_s *a1)
{
  uint64_t v1 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CPRecordStoreLogChanges();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v1);
  }
  os_unfair_lock_unlock(v1);
}

uint64_t CalDatabaseIsChangeLoggingEnabled(os_unfair_lock_s *a1)
{
  uint64_t v1 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t IsLoggingChanges = CPRecordStoreIsLoggingChanges();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v1);
  }
  os_unfair_lock_unlock(v1);
  return IsLoggingChanges;
}

uint64_t _CalDatabaseIsPropertyModificationLoggingEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

BOOL CalDatabaseIsPropertyModificationLoggingEnabled(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  int v3 = *(unsigned __int8 *)(a1 + 256);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3 != 0;
}

uint64_t CalDatabaseGetSequenceNumber(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t SequenceNumber = CPRecordStoreGetSequenceNumber();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return SequenceNumber;
}

void CalDatabaseRevert(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseRevertInternal((uint64_t)a1, 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

void CalDatabaseReset(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseRevertInternal((uint64_t)a1, 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

void CalDatabaseInvalidateCaches(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (*(void *)(a1 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    CPRecordStoreInvalidateCaches();
    *(void *)(a1 + 160) = CalMonotonicTime();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

uint64_t CalDatabaseFlushStatementCache(uint64_t a1)
{
  if (!a1) {
    return CFLog();
  }
  if (CDBLockingAssertionsEnabled) {
    BOOL v1 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = Database == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5) {
        os_unfair_lock_assert_owner(v5 + 20);
      }
    }
  }
  uint64_t v6 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  uint64_t v7 = v6;
  if (CDBLockingAssertionsEnabled)
  {
    if (v6)
    {
      if (*(void *)v6)
      {
        if (*(void *)(*(void *)v6 + 104))
        {
          id v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
  }
  return MEMORY[0x1F4109710](v7);
}

uint64_t CalDatabaseGetInMemoryChangeTrackingID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

void _CalDatabasePerformPreferenceMigrationIfNeeded(void *a1, int a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = [v5 getIntegerPreference:@"PrefMigrationSeed" defaultValue:0];
  if (v6 >= 5 && a3 == 0) {
    goto LABEL_28;
  }
  uint64_t v8 = v6;
  if (v6 < 1)
  {
    uint64_t v9 = *MEMORY[0x1E4F578D8];
    __int16 v10 = [v5 getValueForPreference:*MEMORY[0x1E4F578D8] expectedClass:0];
    if (v10)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || ([v10 BOOLValue] & 1) == 0) {
        [v5 setBooleanPreference:v9 value:1 notificationName:0];
      }
    }
    uint64_t v11 = *MEMORY[0x1E4F578D0];
    int v12 = [v5 getValueForPreference:*MEMORY[0x1E4F578D0] expectedClass:objc_opt_class()];
    if (v12)
    {
      [v5 setValueForPreference:*MEMORY[0x1E4F578E0] value:v12 notificationName:0];
      [v5 removePreference:v11 notificationName:0];
    }
  }
  if (v8 <= 1 && a2)
  {
    CFArrayRef v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v22 = 0;
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_DEFAULT, "Cleaning up plist...", v22, 2u);
    }
    [v5 removePreference:@"DefaultCalendarUID" notificationName:0];
    [v5 removePreference:@"DefaultCalendarDatabaseID" notificationName:0];
    [v5 removePreference:@"DefaultCalendarStoreUID" notificationName:0];
    [v5 removePreference:@"DefaultCalendarName" notificationName:0];
    goto LABEL_19;
  }
  if (v8 <= 3) {
LABEL_19:
  }
    [v5 removePreference:@"BirthdayEventsGenerationVersion" notificationName:0];
  if (a3)
  {
    id v14 = v5;
    id v15 = (id)[MEMORY[0x1E4F1CAD0] setWithArray:&unk_1EFF7A7A0];
    uint64_t v16 = _overrideTimezoneName(v14);
    if (v16 && [v15 containsObject:v16])
    {
      uint64_t v17 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"Asia/Shanghai"];
      [v14 setValueForPreference:*MEMORY[0x1E4F578E0] value:@"Asia/Shanghai" notificationName:0];
      CalSetDefaultTimeZone();
      uint64_t v18 = [MEMORY[0x1E4F4BE38] sharedManager];
      uint64_t v19 = [v18 defaultCityForTimeZone:v17];

      uint64_t v20 = *MEMORY[0x1E4F578C8];
      uint64_t v21 = [v19 properties];
      [v14 setValueForPreference:v20 value:v21 notificationName:0];
    }
  }
  if (v8 <= 4)
  {
    [v5 removePreference:@"OwnerEmailAddress" notificationName:0];
    [v5 removePreference:@"defaultCalendarName" notificationName:0];
  }
  [v5 setIntegerPreference:@"PrefMigrationSeed" value:5 notificationName:0];
LABEL_28:
}

__CFString *CalDatabaseRequestSpotlightReindexNotificationName()
{
  return @"CalDatabaseRequestSpotlightReindexNotificationName";
}

uint64_t CalDatabaseMovedAsideDatabaseFilePathInDirectory(void *a1, const char *a2)
{
  return [a1 stringByAppendingPathComponent:@"Calendar-unableToMigrate.sqlitedb"];
}

void __CalDatabasePerformMigrationIfNeeded_block_invoke()
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  pid_t v0 = +[CDBPreferences sharedReadWrite];
  if (objc_msgSend(v0, "get_migrationAttempts") <= 2)
  {

    goto LABEL_40;
  }
  char v1 = objc_msgSend(v0, "get_allowUnlimitedMigrationAttempts");

  if (v1) {
    goto LABEL_40;
  }
  uint64_t v2 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
  {
    *(void *)&long long buf = 0x304000100;
    _os_log_impl(&dword_1A8E81000, v2, OS_LOG_TYPE_FAULT, "Migration has failed to complete %i consecutive times; deleting database and starting over.",
      (uint8_t *)&buf,
      8u);
  }
  uint64_t v3 = +[CDBPreferences sharedReadWrite];
  IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 1);
  id v5 = [(__CFString *)IfNeeded stringByAppendingPathComponent:*MEMORY[0x1E4F57870]];
  *(void *)&long long buf = 0;
  id v6 = v5;
  int v7 = sqlite3_open_v2((const char *)[v6 fileSystemRepresentation], (sqlite3 **)&buf, 1, 0);
  if (v7 || !(void)buf)
  {
    uint64_t v21 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(ppStmt[0]) = 67109120;
      HIDWORD(ppStmt[0]) = v7;
      _os_log_impl(&dword_1A8E81000, v21, OS_LOG_TYPE_ERROR, "Error opening database that couldn't be migrated to search for related databases. (%i)", (uint8_t *)ppStmt, 8u);
    }
    goto LABEL_31;
  }
  ppStmt[0] = 0;
  int v8 = sqlite3_prepare_v2((sqlite3 *)buf, "SELECT path FROM AuxDatabase", -1, ppStmt, 0);
  if (v8 || !ppStmt[0])
  {
    int v22 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFArrayRef v144 = 67109120;
      *(_DWORD *)&v144[4] = v8;
      _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_ERROR, "Error compiling statement to find aux database paths. (%i)", v144, 8u);
    }
    sqlite3_close((sqlite3 *)buf);
LABEL_31:
    id v9 = 0;
    goto LABEL_32;
  }
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  while (1)
  {
    int v10 = sqlite3_step(ppStmt[0]);
    int v11 = v10;
    if (v10 != 100) {
      break;
    }
    uint64_t v16 = sqlite3_column_text(ppStmt[0], 0);
    if (v16
      && ([NSString stringWithUTF8String:v16],
          (uint64_t v17 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      [v9 addObject:v17];
    }
    else
    {
      uint64_t v18 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CFArrayRef v144 = 0;
        CFArrayRef v13 = v18;
        id v14 = "Invalid cstring returned by sqlite3_column_text loading aux database paths";
        uint32_t v15 = 2;
        goto LABEL_21;
      }
    }
LABEL_22:
    if (v11 != 100) {
      goto LABEL_23;
    }
  }
  if (v10 && v10 != 101)
  {
    uint64_t v12 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFArrayRef v144 = 67109120;
      *(_DWORD *)&v144[4] = v11;
      CFArrayRef v13 = v12;
      id v14 = "Error stepping. (%i)";
      uint32_t v15 = 8;
LABEL_21:
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, v14, v144, v15);
      goto LABEL_22;
    }
    goto LABEL_22;
  }
LABEL_23:
  sqlite3_finalize(ppStmt[0]);
  int v19 = sqlite3_close((sqlite3 *)buf);
  if (v19)
  {
    uint64_t v20 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFArrayRef v144 = 67109120;
      *(_DWORD *)&v144[4] = v19;
      _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_ERROR, "Error closing database: %i", v144, 8u);
    }
  }
LABEL_32:
  _CalDatabaseDeleteDatabaseBecauseOfExcessiveFailedMigrationAttempts(IfNeeded);
  long long v138 = 0u;
  long long v139 = 0u;
  *(_OWORD *)ppStmt = 0u;
  long long v137 = 0u;
  id v23 = v9;
  uint64_t v24 = [v23 countByEnumeratingWithState:ppStmt objects:&buf count:16];
  if (v24)
  {
    uint64_t v25 = *(void *)v137;
    do
    {
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (*(void *)v137 != v25) {
          objc_enumerationMutation(v23);
        }
        _CalDatabaseDeleteDatabaseBecauseOfExcessiveFailedMigrationAttempts(*((void **)ppStmt[1] + i));
      }
      uint64_t v24 = [v23 countByEnumeratingWithState:ppStmt objects:&buf count:16];
    }
    while (v24);
  }

  objc_msgSend(v3, "set_migrationAttempts:", 0);
  char v27 = (void *)[objc_alloc(MEMORY[0x1E4F57648]) initWithType:@"Database" subtype:@"MigrationFailure" context:@"General"];
  [v27 setIgnoreRateLimiting:1];
  [v27 report];

LABEL_40:
  uint64_t v28 = +[CDBPreferences sharedReadWrite];
  objc_msgSend(v28, "set_migrationAttempts:", objc_msgSend(v28, "get_migrationAttempts") + 1);

  CFArrayRef v128 = (void *)os_transaction_create();
  uint64_t v29 = CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(204, 0);
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 80));
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(v29 + 24))
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32) {
          os_unfair_lock_assert_owner(v32 + 20);
        }
      }
    }
  }
  uint64_t v33 = CPSqliteDatabaseConnectionForReading();
  if (CDBLockingAssertionsEnabled)
  {
    if (v33)
    {
      if (*(void *)v33)
      {
        if (*(void *)(*(void *)v33 + 104))
        {
          uint64_t v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v34) {
            os_unfair_lock_assert_owner(v34 + 20);
          }
        }
      }
    }
  }
  int v35 = CPSqliteConnectionDatabaseVersion();
  if (v35 < 18010
    || !_CalDatabaseGetIntegerProperty(v29)
    || (int v36 = _CalDatabaseTargetBirthdayMigrationState(),
        ((v36 ^ (_CalDatabaseGetIntegerProperty(v29) != 0)) & 1) != 0))
  {
    int v37 = 1;
    goto LABEL_59;
  }
  if (v35 == 18010)
  {
    uint64_t v76 = (void *)_CalDatabaseCopyAllAuxDatabases(v29);
    long long v138 = 0u;
    long long v139 = 0u;
    *(_OWORD *)ppStmt = 0u;
    long long v137 = 0u;
    id v77 = v76;
    uint64_t v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", ppStmt, &buf, 16, v128);
    if (v78)
    {
      uint64_t v79 = *(void *)v137;
LABEL_115:
      uint64_t v80 = 0;
      while (1)
      {
        if (*(void *)v137 != v79) {
          objc_enumerationMutation(v77);
        }
        uint64_t v81 = *((void *)ppStmt[1] + v80);
        int v82 = _CalAuxDatabaseGetPath(v81);
        uint64_t v83 = CalDatabaseCreateWithOptionsAndDatabaseDirectory(4300, (uint64_t)v82);
        if (v83) {
          goto LABEL_119;
        }
        CFDictionaryRef v90 = _CalColorGetData(v81);
        v91 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFArrayRef v144 = 138543618;
          *(void *)&v144[4] = v90;
          *(_WORD *)&v144[12] = 2114;
          *(void *)&v144[14] = v82;
          _os_log_impl(&dword_1A8E81000, v91, OS_LOG_TYPE_DEFAULT, "Didn't find aux DB for persona %{public}@ at path %{public}@. Getting current path for persona", v144, 0x16u);
        }
        int v92 = [*(id *)(v29 + 288) containerInfoForPersonaIdentifier:v90];
        CFSetRef v93 = [v92 containerURL];
        CFMutableStringRef v94 = v93;
        if (v92)
        {
          if (v93)
          {
            uint64_t v83 = CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(4300, v93);
            if (v83)
            {

LABEL_119:
              os_unfair_lock_lock((os_unfair_lock_t)(v83 + 80));
              if (CDBLockingAssertionsEnabled)
              {
                if (*(void *)(v83 + 24))
                {
                  int v84 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v84) {
                    os_unfair_lock_assert_owner(v84 + 20);
                  }
                }
              }
              uint64_t v85 = CPRecordStoreGetDatabase();
              if (CDBLockingAssertionsEnabled)
              {
                if (v85)
                {
                  if (*(void *)(v85 + 104))
                  {
                    char v86 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v86) {
                      os_unfair_lock_assert_owner(v86 + 20);
                    }
                  }
                }
              }
              uint64_t v87 = CPSqliteDatabaseConnectionForReading();
              if (CDBLockingAssertionsEnabled)
              {
                if (v87)
                {
                  if (*(void *)v87)
                  {
                    if (*(void *)(*(void *)v87 + 104))
                    {
                      BOOL v88 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v88) {
                        os_unfair_lock_assert_owner(v88 + 20);
                      }
                    }
                  }
                }
              }
              int v89 = CPSqliteConnectionDatabaseVersion();
              if (v89 <= 18009)
              {
                v127 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)CFArrayRef v144 = 67109376;
                  *(_DWORD *)&v144[4] = 18010;
                  *(_WORD *)&v144[8] = 1024;
                  *(_DWORD *)&v144[10] = v89;
                  _os_log_impl(&dword_1A8E81000, v127, OS_LOG_TYPE_ERROR, "Main database schema is up-to-date (%i), but aux database schema is out-of-date. (%i)", v144, 0xEu);
                }
                CalDatabaseUnlockForThread((const os_unfair_lock *)v83);
                CFRelease((CFTypeRef)v83);

                int v37 = 1;
                goto LABEL_197;
              }
              CalDatabaseUnlockForThread((const os_unfair_lock *)v83);
              CFRelease((CFTypeRef)v83);
              goto LABEL_149;
            }
            uint64_t v100 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CFArrayRef v144 = 138543618;
              *(void *)&v144[4] = v90;
              *(_WORD *)&v144[12] = 2114;
              *(void *)&v144[14] = v94;
              CFMutableArrayRef v96 = v100;
              v97 = "Still couldn't open aux DB for persona %{public}@ after looking up current container URL %{public}@";
              uint32_t v99 = 22;
              goto LABEL_147;
            }
          }
          else
          {
            uint64_t v98 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CFArrayRef v144 = 138543362;
              *(void *)&v144[4] = v90;
              CFMutableArrayRef v96 = v98;
              v97 = "No container for persona %{public}@";
              goto LABEL_146;
            }
          }
        }
        else
        {
          uint64_t v95 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFArrayRef v144 = 138543362;
            *(void *)&v144[4] = v90;
            CFMutableArrayRef v96 = v95;
            v97 = "Couldn't look up persona %{public}@";
LABEL_146:
            uint32_t v99 = 12;
LABEL_147:
            _os_log_impl(&dword_1A8E81000, v96, OS_LOG_TYPE_ERROR, v97, v144, v99);
          }
        }

LABEL_149:
        if (v78 == ++v80)
        {
          uint64_t v101 = [v77 countByEnumeratingWithState:ppStmt objects:&buf count:16];
          uint64_t v78 = v101;
          if (v101) {
            goto LABEL_115;
          }
          break;
        }
      }
    }
    int v37 = 0;
LABEL_197:
  }
  else
  {
    int v37 = 0;
  }
LABEL_59:
  CalDatabaseUnlockForThread((const os_unfair_lock *)v29);
  CFRelease((CFTypeRef)v29);
  uint64_t cf = CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(13, 0);
  os_unfair_lock_t lock = (os_unfair_lock_t)(cf + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(cf + 80));
  *(unsigned char *)(cf + 376) = 1;
  CalDatabaseUnlockForThread((const os_unfair_lock *)cf);
  int v38 = CDBLogHandle;
  if (v37)
  {
    id v39 = (id)CDBLogHandle;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A8E81000, v39, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] Migration needed", (uint8_t *)&buf, 2u);
    }

    CalDatabaseSetChangeLoggingEnabled((os_unfair_lock_s *)cf);
    _CalDatabasePerformSchemaMigrationIfNeededOnDatabase((os_unfair_lock_s *)cf);
    int v40 = [MEMORY[0x1E4F57670] legacyCalendarDataContainer];
    v41 = CalDatabaseGetCalendarDataContainerProvider(cf);
    +[CDBAttachmentMigrator migrateWithLegacyCalendarDataContainer:v40 calendarDataContainerProvider:v41 database:cf];
    if (_os_feature_enabled_impl())
    {
      os_unfair_lock_lock(lock);
      if (_CalDatabaseGetIntegerProperty(cf) || !_CalDatabaseMigrateToMultipleDatabases(cf))
      {
        if (CDBLockingAssertionsEnabled) {
          os_unfair_lock_assert_owner(lock);
        }
        os_unfair_lock_unlock(lock);
      }
      else
      {
        _CalDatabaseSetIntegerProperty(cf, @"DataSeparationMigrationCompleted", 1);
        CalDatabaseSaveWithOptions(cf, 2);
      }
    }

    BOOL v42 = (void *)CalDatabaseCopyAllAuxDatabases((os_unfair_lock_s *)cf);
    uint64_t v43 = (id)CDBLogHandle;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v44 = [v42 count];
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v44;
      _os_log_impl(&dword_1A8E81000, v43, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] %lu aux databases to migrate", (uint8_t *)&buf, 0xCu);
    }

    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    id v45 = v42;
    uint64_t v46 = [v45 countByEnumeratingWithState:&v131 objects:ppStmt count:16];
    if (v46)
    {
      uint64_t v47 = *(void *)v132;
      do
      {
        for (uint64_t j = 0; j != v46; ++j)
        {
          if (*(void *)v132 != v47) {
            objc_enumerationMutation(v45);
          }
          char v49 = (void *)CalAuxDatabaseCopyPath(*(void *)(*((void *)&v131 + 1) + 8 * j));
          int v50 = (id)CDBLogHandle;
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v49;
            _os_log_impl(&dword_1A8E81000, v50, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] migrating aux database at %@", (uint8_t *)&buf, 0xCu);
          }

          uint64_t v51 = CalDatabaseCreateWithOptionsAndDatabaseDirectory(2061, (uint64_t)v49);
          CalDatabaseSetChangeLoggingEnabled((os_unfair_lock_s *)v51);
          os_unfair_lock_lock((os_unfair_lock_t)(v51 + 80));
          *(unsigned char *)(v51 + 376) = 1;
          CalDatabaseUnlockForThread((const os_unfair_lock *)v51);
          *(_DWORD *)(v51 + 172) = CalAuxDatabaseGetUID();
          _CalDatabaseMigrateSchemaCheckIntegrityAndCleanUp(v51);
          CFRelease((CFTypeRef)v51);
        }
        uint64_t v46 = [v45 countByEnumeratingWithState:&v131 objects:ppStmt count:16];
      }
      while (v46);
    }

    id v52 = v45;
    if (os_variant_has_internal_diagnostics())
    {
      v53 = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 1);
      _CalDatabaseCleanUpMovedAsideDatabaseFilesInDirectory(v53);
      long long v145 = 0u;
      long long v146 = 0u;
      memset(v144, 0, sizeof(v144));
      id v54 = v52;
      uint64_t v55 = [v54 countByEnumeratingWithState:v144 objects:&buf count:16];
      if (v55)
      {
        uint64_t v56 = **(void **)&v144[16];
        do
        {
          for (uint64_t k = 0; k != v55; ++k)
          {
            if (**(void **)&v144[16] != v56) {
              objc_enumerationMutation(v54);
            }
            uint64_t v58 = (void *)CalAuxDatabaseCopyPath(*(void *)(*(void *)&v144[8] + 8 * k));
            _CalDatabaseCleanUpMovedAsideDatabaseFilesInDirectory(v58);
          }
          uint64_t v55 = [v54 countByEnumeratingWithState:v144 objects:&buf count:16];
        }
        while (v55);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] Migration not needed", (uint8_t *)&buf, 2u);
  }
  int v59 = CalDatabaseGetPreferences(cf);
  uint64_t v60 = [v59 preferences];

  int shouldMigrateChinaTimezones = _shouldMigrateChinaTimezones(v60);
  _CalDatabasePerformPreferenceMigrationIfNeeded(v60, 0, shouldMigrateChinaTimezones);

  os_unfair_lock_lock(lock);
  Integeruint64_t Property = _CalDatabaseGetIntegerProperty(cf);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(lock);
  }
  int v63 = IntegerProperty != 0;
  os_unfair_lock_unlock(lock);
  uint64_t v64 = _CalDatabaseTargetBirthdayMigrationState();
  if (v63 != v64)
  {
    uint64_t v65 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67109376;
      DWORD1(buf) = v63;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v64;
      _os_log_impl(&dword_1A8E81000, v65, OS_LOG_TYPE_DEFAULT, "Need to migrate birthdays: current version %{BOOL}i target version %{BOOL}i", (uint8_t *)&buf, 0xEu);
    }
    if (v64)
    {
      int v66 = (void *)CalDatabaseCopyBirthdayCalendar((os_unfair_lock_s *)cf, 0);
      CFArrayRef v67 = CDBLogHandle;
      BOOL v68 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT);
      if (v66)
      {
        if (v68)
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1A8E81000, v67, OS_LOG_TYPE_DEFAULT, "Deleting old birthday calendar", (uint8_t *)&buf, 2u);
        }
        CalRemoveCalendar(v66);
      }
      else if (v68)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1A8E81000, v67, OS_LOG_TYPE_DEFAULT, "Migration did nothing because no old birthday calendar found", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      id v69 = (void *)CalDatabaseCopyOfAllStores((os_unfair_lock_s *)cf);
      long long v145 = 0u;
      long long v146 = 0u;
      memset(v144, 0, sizeof(v144));
      id v70 = v69;
      uint64_t v71 = [v70 countByEnumeratingWithState:v144 objects:&buf count:16];
      if (v71)
      {
        uint64_t v72 = **(void **)&v144[16];
        while (2)
        {
          for (uint64_t m = 0; m != v71; ++m)
          {
            if (**(void **)&v144[16] != v72) {
              objc_enumerationMutation(v70);
            }
            id v74 = (void *)CalStoreCopyAppGroupIdentifier(*(void *)(*(void *)&v144[8] + 8 * m));
            if ([v74 isEqualToString:@"com.apple.contacts.ContactsCalendars"])
            {
              int v102 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v135 = 0;
                _os_log_impl(&dword_1A8E81000, v102, OS_LOG_TYPE_DEFAULT, "Deleting ContactsCalendars store", v135, 2u);
              }
              CalRemoveStore();

              goto LABEL_158;
            }
          }
          uint64_t v71 = [v70 countByEnumeratingWithState:v144 objects:&buf count:16];
          if (v71) {
            continue;
          }
          break;
        }
      }

      uint64_t v75 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v135 = 0;
        _os_log_impl(&dword_1A8E81000, v75, OS_LOG_TYPE_DEFAULT, "Migration did nothing because the contacts store wasn't found.", v135, 2u);
      }
LABEL_158:
    }
    CalDatabaseSetIntegerProperty((os_unfair_lock_s *)cf, @"BirthdayMigrationState", v64);
    CalDatabaseSaveWithOptions(cf, 0);
  }
  CalDatabaseCleanupStoresWithoutIdentifiers((os_unfair_lock_s *)cf);
  if (CalendarMigrationLibraryCore())
  {
    *(void *)CFArrayRef v144 = 0;
    *(void *)&v144[8] = v144;
    *(void *)&v144[16] = 0x2050000000;
    v103 = (void *)getCalDefaultReminderKitProviderClass_softClass;
    *(void *)&v144[24] = getCalDefaultReminderKitProviderClass_softClass;
    if (!getCalDefaultReminderKitProviderClass_softClass)
    {
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 3221225472;
      CFIndex v141 = __getCalDefaultReminderKitProviderClass_block_invoke;
      int v142 = &unk_1E5D60FF0;
      id v143 = v144;
      __getCalDefaultReminderKitProviderClass_block_invoke((uint64_t)&buf);
      v103 = *(void **)(*(void *)&v144[8] + 24);
    }
    id v104 = v103;
    _Block_object_dispose(v144, 8);
    v105 = [v104 sharedInstance];
    if ([v105 reminderKitAvailable])
    {
      *(void *)CFArrayRef v144 = 0;
      *(void *)&v144[8] = v144;
      *(void *)&v144[16] = 0x2050000000;
      uint64_t v106 = (void *)getCalDefaultReminderMigrationDefaultsProviderClass_softClass;
      *(void *)&v144[24] = getCalDefaultReminderMigrationDefaultsProviderClass_softClass;
      if (!getCalDefaultReminderMigrationDefaultsProviderClass_softClass)
      {
        *(void *)&long long buf = MEMORY[0x1E4F143A8];
        *((void *)&buf + 1) = 3221225472;
        CFIndex v141 = __getCalDefaultReminderMigrationDefaultsProviderClass_block_invoke;
        int v142 = &unk_1E5D60FF0;
        id v143 = v144;
        __getCalDefaultReminderMigrationDefaultsProviderClass_block_invoke((uint64_t)&buf);
        uint64_t v106 = *(void **)(*(void *)&v144[8] + 24);
      }
      id v107 = v106;
      _Block_object_dispose(v144, 8);
      int v108 = [v107 sharedInstance];
      CFArrayRef v109 = (void *)[v105 newDatabaseMigrationContext];
      CFArrayRef v110 = v109;
      if (v109)
      {
        int v111 = [v109 shouldPerformMigration];
        int v112 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v111;
          _os_log_impl(&dword_1A8E81000, v112, OS_LOG_TYPE_DEFAULT, "ReminderKit wants migratiouint64_t n = %d", (uint8_t *)&buf, 8u);
        }
        int v113 = objc_msgSend(v108, "havePerformedReminderMigrationCleanup", v128);
        uint64_t v114 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v113 ^ 1;
          _os_log_impl(&dword_1A8E81000, v114, OS_LOG_TYPE_DEFAULT, "Needs reminder migration cleanup = %d", (uint8_t *)&buf, 8u);
          uint64_t v114 = CDBLogHandle;
        }
        BOOL v115 = os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT);
        if ((v111 | v113 ^ 1) == 1)
        {
          if (v115)
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A8E81000, v114, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] Performing reminders migration", (uint8_t *)&buf, 2u);
          }
          *(void *)CFArrayRef v144 = 0;
          *(void *)&v144[8] = v144;
          *(void *)&v144[16] = 0x2050000000;
          CFArrayRef v116 = (void *)getCalCalendarDatabaseReminderMigratorClass_softClass;
          *(void *)&v144[24] = getCalCalendarDatabaseReminderMigratorClass_softClass;
          if (!getCalCalendarDatabaseReminderMigratorClass_softClass)
          {
            *(void *)&long long buf = MEMORY[0x1E4F143A8];
            *((void *)&buf + 1) = 3221225472;
            CFIndex v141 = __getCalCalendarDatabaseReminderMigratorClass_block_invoke;
            int v142 = &unk_1E5D60FF0;
            id v143 = v144;
            __getCalCalendarDatabaseReminderMigratorClass_block_invoke((uint64_t)&buf);
            CFArrayRef v116 = *(void **)(*(void *)&v144[8] + 24);
          }
          CFArrayRef v117 = v116;
          _Block_object_dispose(v144, 8);
          CFIndex v118 = (void *)[[v117 alloc] initWithReminderKitProvider:v105 defaultsProvider:v108];
          [v118 attemptMigrationWithCalendarDatabase:cf];
          v119 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1A8E81000, v119, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] Finished reminders migration", (uint8_t *)&buf, 2u);
          }

          goto LABEL_189;
        }
        if (v115)
        {
          LOWORD(buf) = 0;
          CFArrayRef v123 = "Skipping reminders migration because it is not needed";
          CFIndex v124 = v114;
          os_log_type_t v125 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_188;
        }
      }
      else
      {
        uint64_t v122 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          CFArrayRef v123 = "Failed to get a CalReminderKitDatabaseMigrationContext. Skipping reminders migration";
          CFIndex v124 = v122;
          os_log_type_t v125 = OS_LOG_TYPE_ERROR;
LABEL_188:
          _os_log_impl(&dword_1A8E81000, v124, v125, v123, (uint8_t *)&buf, 2u);
        }
      }
LABEL_189:

      goto LABEL_190;
    }
    v121 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A8E81000, v121, OS_LOG_TYPE_ERROR, "Skipping reminders migration because ReminderKit.framework is not available", (uint8_t *)&buf, 2u);
    }
  }
  else
  {
    int v120 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A8E81000, v120, OS_LOG_TYPE_ERROR, "Skipping reminders migration because CalendarMigration.framework is not available", (uint8_t *)&buf, 2u);
    }
  }
LABEL_190:
  CFRelease((CFTypeRef)cf);
  CalDatabaseDeleteFile(@"/var/mobile/Library/Calendar/Notifications.db");
  CalDatabaseDeleteFile(@"/var/mobile/Library/Calendar/Notifications.db-wal");
  CalDatabaseDeleteFile(@"/var/mobile/Library/Calendar/Notifications.db-shm");

  int v126 = +[CDBPreferences sharedReadWrite];
  objc_msgSend(v126, "set_migrationAttempts:", 0);
}

void sub_1A8E9DA3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void CalDatabaseCleanupStoresWithoutIdentifiers(os_unfair_lock_s *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = (const __CFArray *)CalDatabaseCopyOfAllStores(a1);
  if (!v2) {
    return;
  }
  CFArrayRef v3 = v2;
  uint64_t v18 = (uint64_t)a1;
  CFIndex Count = CFArrayGetCount(v2);
  if (!Count) {
    goto LABEL_20;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  char v7 = 0;
  do
  {
    while (1)
    {
      unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
      CFStringRef v9 = (const __CFString *)CalStoreCopyUUID((uint64_t)ValueAtIndex);
      CFStringRef v10 = v9;
      if (v9)
      {
        if (CFStringGetLength(v9)) {
          break;
        }
      }
      CFUUIDRef v11 = CFUUIDCreate(0);
      CFStringRef v12 = CFUUIDCreateString(0, v11);
      CFArrayRef v13 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = v13;
        int ID = CPRecordGetID();
        *(_DWORD *)long long buf = 67109378;
        int v20 = ID;
        __int16 v21 = 2114;
        CFStringRef v22 = v12;
        _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_DEFAULT, "Found a store with no identifier at ROWID %d. Setting identifier to %{public}@", buf, 0x12u);
      }
      CalStoreSetUUID((uint64_t)ValueAtIndex, (uint64_t)v12);
      CFRelease(v12);
      CFRelease(v11);
      if (v10)
      {
        char v7 = 1;
        break;
      }
      ++v6;
      char v7 = 1;
      if (v6 == v5) {
        goto LABEL_15;
      }
    }
    CFRelease(v10);
    ++v6;
  }
  while (v6 != v5);
  if ((v7 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_15:
  uint64_t v16 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_DEFAULT, "Saving database after cleaning up stores without identifiers", buf, 2u);
  }
  if ((CalDatabaseSaveWithOptions(v18, 0) & 1) == 0)
  {
    uint64_t v17 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, "Failed to save database after cleaning up stores with missing identifiers", buf, 2u);
    }
  }
LABEL_20:
  CFRelease(v3);
}

void _CalDatabasePerformSchemaMigrationIfNeededOnDatabase(os_unfair_lock_s *a1)
{
  if (!a1)
  {
    BOOL v4 = 0;
    LODWORD(v12) = 0;
    goto LABEL_24;
  }
  CFArrayRef v2 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A8E81000, v2, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] Beginning schema migration", buf, 2u);
  }
  CFArrayRef v3 = CalDatabaseGetPreferences((uint64_t)a1);
  BOOL v4 = [v3 preferences];

  _CalDatabaseMigrateSchemaCheckIntegrityAndCleanUp((uint64_t)a1);
  CFIndex v5 = [v4 getValueForPreference:@"DefaultCalendarUID" expectedClass:0];
  if (!v5) {
    goto LABEL_15;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = v5;
    char v7 = [MEMORY[0x1E4F28B88] decimalDigitCharacterSet];
    uint64_t v8 = [v6 rangeOfCharacterFromSet:v7];
    uint64_t v10 = v9;

    if (v8 || v10 != [v6 length]) {
      Integeruint64_t Property = -1;
    }
    else {
      Integeruint64_t Property = [v6 intValue];
    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_15:
      Integeruint64_t Property = CalDatabaseGetIntegerProperty(a1);
      goto LABEL_16;
    }
    Integeruint64_t Property = [v5 intValue];
  }
  if (IntegerProperty == -1) {
    goto LABEL_15;
  }
LABEL_16:
  if (IntegerProperty < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    CFStringRef v12 = (void *)CalDatabaseCopyCalendarWithUID(a1);
    if (v12)
    {
      CalDatabaseSetDefaultCalendarForNewEventsWithReason(a1, v12, 0, @"migration");
      CalDatabaseRemoveProperty((uint64_t)a1, @"DefaultCalendarUID");
      CFRelease(v12);
      LODWORD(v12) = 1;
    }
  }
  if ((int)CalDatabaseGetIntegerProperty(a1) >= 1)
  {
    CFArrayRef v13 = (void *)CalDatabaseCopyCalendarWithUID(a1);
    if (v13)
    {
      id v14 = v13;
      CalDatabaseSetDefaultCalendarForNewTasks(a1, v13, 0);
      CalDatabaseRemoveProperty((uint64_t)a1, @"DefaultTaskCalendarUID");
      CFRelease(v14);
    }
  }

LABEL_24:
  int shouldMigrateChinaTimezones = _shouldMigrateChinaTimezones(v4);
  _CalDatabasePerformPreferenceMigrationIfNeeded(v4, (int)v12, shouldMigrateChinaTimezones);
  uint64_t v16 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] Finished all schema migration tasks", v17, 2u);
  }
}

void _CalDatabaseMigrateSchemaCheckIntegrityAndCleanUp(uint64_t a1)
{
  CFArrayRef v2 = (const void *)CalDatabaseCopyUniqueIdentifier(a1);
  if (v2) {
    CFRelease(v2);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (*(void *)(a1 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      uint64_t v5 = Database;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          id v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      uint64_t v7 = CPSqliteDatabaseConnectionForWriting();
      _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure(v5, v7);
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  uint64_t v8 = CalDatabaseCopyEventOccurrenceCache((os_unfair_lock_s *)a1);
  if (v8)
  {
    uint64_t v9 = (const void *)v8;
    if ((CalEventOccurrenceCacheRebuildIfNeeded(v8) & 1) == 0)
    {
      CalEventOccurrenceCacheCleanOrphans((uint64_t)v9);
      CalEventOccurrenceCacheTrimExtendAndUpdate((uint64_t)v9, 0);
    }
    CFRelease(v9);
  }
  CalDatabaseClearSuperfluousChanges((os_unfair_lock_s *)a1);
}

uint64_t _shouldMigrateChinaTimezones(void *a1)
{
  id v1 = a1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___shouldMigrateChinaTimezones_block_invoke;
  block[3] = &unk_1E5D61100;
  id v7 = v1;
  uint64_t v2 = _shouldMigrateChinaTimezones_onceToken;
  id v3 = v1;
  if (v2 != -1) {
    dispatch_once(&_shouldMigrateChinaTimezones_onceToken, block);
  }
  uint64_t v4 = _shouldMigrateChinaTimezones_shouldMigrate;

  return v4;
}

uint64_t CalDatabaseSizeInBytes()
{
  IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 1);
  MutableCFArrayRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, IfNeeded);
  CFStringAppend(MutableCopy, (CFStringRef)*MEMORY[0x1E4F57870]);
  uint64_t v2 = 0;
  if (CPSqliteUtilitiesGetSchemaVersionAtPath() != 25)
  {
    id v3 = (char *)_CPCreateUTF8StringFromCFString();
    memset(&v5, 0, sizeof(v5));
    if (!stat(v3, &v5))
    {
      if ((v5.st_size & 0x8000000000000000) == 0)
      {
        uint64_t v2 = -1;
        CFLog();
        goto LABEL_6;
      }
      CFLog();
    }
    uint64_t v2 = 0;
LABEL_6:
    free(v3);
  }
  CFRelease(IfNeeded);
  CFRelease(MutableCopy);
  return v2;
}

void *CalDatabaseCopySourceStats(os_unfair_lock_s *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = (void *)CalDatabaseCopyOfAllStores(a1);
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  obuint64_t j = v1;
  uint64_t v3 = [obj countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v8 = CalStoreCopyUUID(v7);
        if (v8) {
          uint64_t v9 = (__CFString *)v8;
        }
        else {
          uint64_t v9 = @"(missing persistent ID)";
        }
        CFMutableArrayRef v10 = CalStoreCopyCalendars(v7);
        CountOfCalendarItemsInuint64_t Store = CalDatabaseGetCountOfCalendarItemsInStore(a1, 0, v7);
        v23[0] = v9;
        v22[0] = @"UUID";
        v22[1] = @"numCalendars";
        CFStringRef v12 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[__CFArray count](v10, "count"));
        v23[1] = v12;
        v22[2] = @"numEvents";
        CFArrayRef v13 = [NSNumber numberWithInt:CountOfCalendarItemsInStore];
        v23[2] = v13;
        id v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:v22 count:3];

        [v2 addObject:v14];
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v18 objects:v24 count:16];
    }
    while (v4);
  }

  return v2;
}

uint64_t SetCalDatabaseIsUnitTesting(uint64_t result)
{
  _IsUnitTesting = result;
  return result;
}

uint64_t IsCalDatabaseUnitTesting()
{
  return _IsUnitTesting;
}

BOOL CalDatabaseGetIsUnitTesting(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 272) | _IsUnitTesting) != 0;
}

void CalDatabaseSetPreferences(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v4 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = v3;

  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
}

void CalDatabaseSetCalendarDataContainerProvider(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v4 = *(void **)(a1 + 288);
  *(void *)(a1 + 288) = v3;

  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
}

id CalDatabaseGetCalendarDataContainerProvider(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v3 = *(id *)(a1 + 288);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

id _CalDatabaseGetCalendarDataContainerProvider(uint64_t a1)
{
  id v1 = *(id *)(a1 + 288);
  return v1;
}

uint64_t CalDatabaseRebuildOccurrenceCache(os_unfair_lock_s *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v15) = 0;
    _os_log_impl(&dword_1A8E81000, v2, OS_LOG_TYPE_DEBUG, "Attempting to rebuild the occurrence cache.", (uint8_t *)&v15, 2u);
  }
  if (!a1)
  {
    uint64_t v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15) = 0;
      CFMutableArrayRef v10 = "No database provided.  Will not rebuild the occurrence cache.";
      CFUUIDRef v11 = v9;
      os_log_type_t v12 = OS_LOG_TYPE_ERROR;
LABEL_14:
      _os_log_impl(&dword_1A8E81000, v11, v12, v10, (uint8_t *)&v15, 2u);
    }
    return 0;
  }
  uint64_t v3 = CalDatabaseCopyEventOccurrenceCache(a1);
  if (!v3)
  {
    uint64_t v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v15) = 0;
      CFMutableArrayRef v10 = "Could not acquire the occurrence cache.  Will not rebuild the occurrence cache.";
      CFUUIDRef v11 = v13;
      os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
      goto LABEL_14;
    }
    return 0;
  }
  uint64_t v4 = (const void *)v3;
  uint64_t v5 = _CalEventOccurrenceCacheForceRebuild(v3);
  if (v5)
  {
    id v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 138412290;
      uint64_t v16 = @"kCalEventOccurrenceCacheChangedNotification";
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_DEBUG, "Posting Darwin notification: [%@].", (uint8_t *)&v15, 0xCu);
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kCalEventOccurrenceCacheChangedNotification", a1, 0, 1u);
    uint64_t v8 = +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:a1];
    [v8 clearAllChangesets];

    _CalDatabasePostDBOrSyncStatusChangeNotificationToInternalAndExternalClients((uint64_t)a1, 0, 0);
  }
  CFRelease(v4);
  return v5;
}

void _CalDatabasePostDBOrSyncStatusChangeNotificationToInternalAndExternalClients(uint64_t a1, uint64_t a2, int a3)
{
  id v6 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  ++*(_DWORD *)(a1 + 120);
  id v7 = (id)CalDatabaseCopyClientName(a1, 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(a1, 1, a3, a2, *(void *)(a1 + 368), v7, 0);
}

uint64_t CalDatabaseCopyEntitiesWhere(uint64_t a1, int a2, void *a3, void *a4, void *a5, uint64_t a6, int a7)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  if ((a2 - 2) < 2 || a2 == 101)
  {
    CFStringRef SelectPrefix = (void *)CPRecordStoreCreateSelectPrefix();
    if (SelectPrefix)
    {
      if ([v13 length]) {
        [SelectPrefix appendFormat:@" WHERE %@", v13];
      }
      if (a7) {
        [SelectPrefix appendString:@" ORDER BY random()"];
      }
      if ((int)a6 >= 1) {
        objc_msgSend(SelectPrefix, "appendFormat:", @" LIMIT %i", a6);
      }
      uint64_t v17 = [v14 count];
      if (v17 == [v15 count])
      {
        int v18 = [v14 count];
      }
      else
      {
        long long v21 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v22 = v21;
          *(_DWORD *)long long buf = 134218240;
          *(void *)id v52 = [v14 count];
          *(_WORD *)&v52[8] = 2048;
          *(void *)&v52[10] = [v15 count];
          _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_ERROR, "Passed in %lu values but %lu value types.", buf, 0x16u);
        }
        unint64_t v23 = [v14 count];
        unint64_t v24 = [v15 count];
        if (v23 >= v24) {
          int v18 = v24;
        }
        else {
          int v18 = v23;
        }
      }
      uint64_t v25 = (os_unfair_lock_s *)(a1 + 80);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
      uint64_t v26 = *(void *)(a1 + 24);
      if (CDBLockingAssertionsEnabled)
      {
        if (v26)
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
      uint64_t v50 = v26;
      uint64_t Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled)
      {
        if (Database)
        {
          if (*(void *)(Database + 104))
          {
            uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v29) {
              os_unfair_lock_assert_owner(v29 + 20);
            }
          }
        }
      }
      uint64_t v30 = CPSqliteDatabaseStatementForReading();
      if (v30)
      {
        uint64_t v31 = v30;
        os_unfair_lock_t lock = v25;
        id v49 = v13;
        if (v18 >= 1)
        {
          uint64_t v32 = 0;
          uint64_t v33 = v18;
          do
          {
            uint64_t v34 = [v14 objectAtIndexedSubscript:v32];
            int v35 = [v15 objectAtIndexedSubscript:v32];
            int v36 = [v35 intValue];

            switch(v36)
            {
              case 7:
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  int v37 = *(sqlite3_stmt **)(v31 + 8);
                  [v34 timeIntervalSinceReferenceDate];
                  sqlite3_bind_double(v37, v32 + 1, v38);
                }
                else
                {
                  uint64_t v45 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = 67109378;
                    *(_DWORD *)id v52 = v32;
                    *(_WORD *)&v52[4] = 2112;
                    *(void *)&v52[6] = v34;
                    int v40 = v45;
                    v41 = "Wrong type for parameter %i; expected date but got %@";
LABEL_50:
                    uint32_t v42 = 18;
LABEL_51:
                    _os_log_impl(&dword_1A8E81000, v40, OS_LOG_TYPE_ERROR, v41, buf, v42);
                  }
                }
                break;
              case 2:
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  sqlite3_bind_text(*(sqlite3_stmt **)(v31 + 8), v32 + 1, (const char *)[v34 UTF8String], -1, 0);
                }
                else
                {
                  uint64_t v43 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = 67109378;
                    *(_DWORD *)id v52 = v32;
                    *(_WORD *)&v52[4] = 2112;
                    *(void *)&v52[6] = v34;
                    int v40 = v43;
                    v41 = "Wrong type for parameter %i; expected string but got %@";
                    goto LABEL_50;
                  }
                }
                break;
              case 1:
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  sqlite3_bind_int(*(sqlite3_stmt **)(v31 + 8), v32 + 1, [v34 intValue]);
                }
                else
                {
                  uint64_t v44 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = 67109378;
                    *(_DWORD *)id v52 = v32;
                    *(_WORD *)&v52[4] = 2112;
                    *(void *)&v52[6] = v34;
                    int v40 = v44;
                    v41 = "Wrong type for parameter %i; expected int but got %@";
                    goto LABEL_50;
                  }
                }
                break;
              default:
                uint64_t v39 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 67109120;
                  *(_DWORD *)id v52 = v36;
                  int v40 = v39;
                  v41 = "Unsupported property type %i";
                  uint32_t v42 = 8;
                  goto LABEL_51;
                }
                break;
            }

            ++v32;
          }
          while (v33 != v32);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (v50)
          {
            uint64_t v46 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v46) {
              os_unfair_lock_assert_owner(v46 + 20);
            }
          }
        }
        uint64_t v19 = CPRecordStoreProcessStatementWithPropertyIndices();
        id v13 = v49;
        uint64_t v25 = lock;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(v25);
      }
      os_unfair_lock_unlock(v25);
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  else
  {
    long long v20 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)id v52 = a2;
      _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_ERROR, "Unsupported entity type %i", buf, 8u);
    }
    uint64_t v19 = 0;
  }

  return v19;
}

void _CALDatabaseSetShouldBackupToiCloud(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1);
  uint64_t v4 = [MEMORY[0x1E4F1CB10] fileURLWithPath:IfNeeded];
  uint64_t v5 = [NSNumber numberWithInt:a2 ^ 1u];
  uint64_t v6 = *MEMORY[0x1E4F1C630];
  id v11 = 0;
  char v7 = [v4 setResourceValue:v5 forKey:v6 error:&v11];
  id v8 = v11;

  if ((v7 & 1) == 0)
  {
    uint64_t v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      CFMutableArrayRef v10 = @"YES";
      if (a2) {
        CFMutableArrayRef v10 = @"NO";
      }
      *(_DWORD *)long long buf = 138412546;
      id v13 = v10;
      __int16 v14 = 2112;
      id v15 = IfNeeded;
      _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_ERROR, "Failed to set resource value NSURLIsExcludedFromBackupKey to %@ for database directory %@", buf, 0x16u);
    }
  }
}

uint64_t CalDatabaseGetIsSafeForUseInDataMigration(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v2 = *(unsigned __int8 *)(a1 + 376);
  CalDatabaseUnlockForThread((const os_unfair_lock *)a1);
  return v2;
}

uint64_t _CalDatabaseGetIsSafeForUseInDataMigration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 376);
}

void CalDatabaseSetIsSafeForUseInDataMigration(uint64_t a1, char a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  *(unsigned char *)(a1 + 376) = a2;
  CalDatabaseUnlockForThread((const os_unfair_lock *)a1);
}

uint64_t _CalDatabaseSetIsSafeForUseInDataMigration(uint64_t result, char a2)
{
  *(unsigned char *)(result + 376) = a2;
  return result;
}

void _CalDatabaseEnumerateAddedEntitiesOfType(uint64_t a1, int a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 64);
  if (v6)
  {
    char v16 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    char v7 = (id)CFDictionaryGetValue(v6, (const void *)a2);
    uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v17 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v13;
LABEL_4:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        v5[2](v5, *(void *)(*((void *)&v12 + 1) + 8 * v11), &v16);
        if (v16) {
          break;
        }
        if (v9 == ++v11)
        {
          uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v17 count:16];
          if (v9) {
            goto LABEL_4;
          }
          break;
        }
      }
    }
  }
}

uint64_t CalDatabaseIsAuxiliaryDatabase(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 378);
}

void CalDatabaseVacuum(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = (void *)CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (v9)
  {
    uint64_t v10 = v9;
    CalPerformSQLWithConnectionAndBindBlock(v9, 0, @"VACUUM", 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v10)
      {
        if (*(void *)(*v10 + 104))
        {
          uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v2);
    }
    os_unfair_lock_unlock(v2);
  }
  else
  {
    long long v12 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v13 = 0;
      _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, "Unable to get database connection to run vacuum.", v13, 2u);
    }
  }
}

id _CalDatabaseCalaccessdXPCConnection()
{
  pthread_mutex_lock(&_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnectionLock);
  pid_t v0 = (void *)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection;
  if (!_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection)
  {
    id v1 = dispatch_get_global_queue(0, 0);
    xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.calaccessd.xpc", v1, 0);
    uint64_t v3 = (void *)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection;
    _CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnectiouint64_t n = (uint64_t)mach_service;

    xpc_connection_set_event_handler((xpc_connection_t)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection, &__block_literal_global_278);
    xpc_connection_resume((xpc_connection_t)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection);

    pid_t v0 = (void *)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection;
  }
  id v4 = v0;
  pthread_mutex_unlock(&_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnectionLock);
  return v4;
}

uint64_t CalendarMigrationLibraryCore()
{
  if (!CalendarMigrationLibraryCore_frameworkLibrary) {
    CalendarMigrationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return CalendarMigrationLibraryCore_frameworkLibrary;
}

uint64_t __CalendarMigrationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CalendarMigrationLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getCalOutOfProcessMigratorClass_block_invoke(uint64_t a1)
{
  CalendarMigrationLibrary();
  Class result = objc_getClass("CalOutOfProcessMigrator");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCalOutOfProcessMigratorClass_block_invoke_cold_1();
  }
  getCalOutOfProcessMigratorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void CalendarMigrationLibrary()
{
  pid_t v0 = 0;
  if (!CalendarMigrationLibraryCore()) {
    CalendarMigrationLibrary_cold_1(&v0);
  }
}

uint64_t CalDatabaseRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  __CalDatabaseTypeint ID = result;
  return result;
}

void _CalDatabaseDestroy(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  _CalDatabaseTrimConsumedSequences(a1);
  if (*(void *)(a1 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    _CalDatabaseReportIntegrityErrors(Database);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, (const void *)a1);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, (const void *)a1);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    CalEventOccurrenceCacheInvalidate(v7);
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    CalScheduledTaskCacheInvalidate(v8);
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }
  uint64_t v9 = *(const void **)(a1 + 104);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(a1 + 96);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(const void **)(a1 + 64);
  if (v11) {
    CFRelease(v11);
  }
  long long v12 = *(const void **)(a1 + 264);
  if (v12) {
    CFRelease(v12);
  }
  long long v13 = *(const void **)(a1 + 72);
  if (v13) {
    CFRelease(v13);
  }
  long long v14 = *(const void **)(a1 + 128);
  if (v14) {
    CFRelease(v14);
  }
  long long v15 = *(const void **)(a1 + 48);
  if (v15) {
    CFRelease(v15);
  }
  char v16 = *(const void **)(a1 + 56);
  if (v16) {
    CFRelease(v16);
  }
  if (*(void *)(a1 + 24)) {
    CPRecordStoreDestroy();
  }
  uint64_t v17 = *(const void **)(a1 + 136);
  if (v17)
  {
    if (*(unsigned char *)(a1 + 380))
    {
      MEMORY[0x1AD0E8CF0]();
      uint64_t v17 = *(const void **)(a1 + 136);
    }
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(a1 + 144);
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(a1 + 152);
  if (v19) {
    CFRelease(v19);
  }
  long long v20 = *(void **)(a1 + 288);
  *(void *)(a1 + 288) = 0;

  long long v21 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = 0;

  CFStringRef v22 = *(void **)(a1 + 328);
  *(void *)(a1 + 328) = 0;

  unint64_t v23 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = 0;

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 192));
  if (*(void *)(a1 + 184))
  {
    unint64_t v24 = (void *)MEMORY[0x1AD0E9DC0]();
    *(void *)(a1 + 184) = 0;
    CFRelease(v24);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 192));
  objc_storeWeak((id *)(a1 + 304), 0);
  objc_storeWeak((id *)(a1 + 320), 0);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 192));
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

BOOL _CalDatabaseEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void _CalDatabaseSetupHandler(uint64_t a1, void *a2)
{
  CalStoreInitializeTables(a1, a2, 0);
  CalCalendarInitializeTables(a1, a2);
  CalRecurrenceInitializeTables(a1, a2);
  CalAlarmInitializeTables(a1, a2);
  CalAttendeeInitializeTables(a1, a2);
  CalIdentityInitializeTables(a1, a2);
  CalEventActionInitializeTables(a1, a2);
  CalEventInitializeTables(a1, a2);
  CalExceptionDateInitializeTables(a1, a2);
  CalAttachmentFileInitializeTables(a1, a2);
  CalAttachmentInitializeTables(a1, a2);
  CalCategoryInitializeTables(a1, a2);
  CalCategoryLinkInitializeTables(a1, a2);
  CalLocationInitializeTables(a1, a2);
  CalShareeInitializeTables(a1, a2);
  CalNotificationInitializeTables(a1, a2);
  CalResourceChangeInitializeTables(a1, a2);
  CalSuggestedEventInfoInitializeTables(a1, a2);
  CalContactInitializeTables(a1, a2);
  CalConferenceInitializeTables(a1, a2);
  CalErrorInitializeTables(a1, a2);
  CalAuxDatabaseInitializeTables(a1, a2);
  CalAuxDatabaseAccountInitializeTables();
  CalImageInitializeTables(a1, a2);
  CalColorInitializeTables(a1, a2);
  uint64_t Context = CPRecordStoreGetContext();
  if (*(unsigned char *)(Context + 378))
  {
    uint64_t v5 = Context;
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(void *)(*a2 + 104))
          {
            CFDictionaryRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    _CALDatabaseSetShouldBackupToiCloud(v5, 0);
  }
  _CalDatabaseInitializeSchemaDuringMigration(a1, a2, -1);
}

BOOL _CalDatabaseMigrationHandler(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v4 = a3;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (a3 <= 18009)
  {
    CFAbsoluteTimeGetCurrent();
    uint64_t v7 = (id)CDBLogHandle;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 18010;
      _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_DEBUG, "Migrating Calendar database from version %d to version %d...", buf, 0xEu);
    }

    int function = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalNoteAttachmentDeleted", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalDatabaseAttachmentDeletedDuringMigration, 0, 0);
    if (function)
    {
      int v9 = function;
      uint64_t v10 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v9;
        _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_ERROR, "Error adding CalNoteAttachmentDeleted function before migration: %i", buf, 8u);
      }
    }
    int v11 = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalNoteStoreDeleted", 3, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalDatabaseAttachmentDeletedDuringMigration, 0, 0);
    if (v11)
    {
      int v12 = v11;
      long long v13 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Error adding CalNoteStoreDeleted function before migration: %i", buf, 8u);
      }
    }
    CalErrorMigrateTables(a4, (void *)a2, v4);
    CalStoreMigrateTables(a4, (void *)a2, v4);
    CalCalendarMigrateTables(a4, (void *)a2, v4);
    CalIdentityMigrateTables(a4, (void *)a2, v4);
    CalAttendeeMigrateTables(a4, a2, v4);
    CalLocationMigrateTables(a4, (void *)a2, v4);
    CalEventMigrateTables(a4, a2, v4);
    CalAlarmMigrateTables(a4, a2, v4);
    CalRecurrenceMigrateTables(a4, (void *)a2, v4);
    CalEventActionMigrateTables(a4, (void *)a2, v4);
    CalExceptionDateMigrateTables(a4, (void *)a2, v4);
    CalAttachmentFileMigrateTables(a4, (void *)a2, v4);
    CalAttachmentMigrateTables(a4, (void *)a2, v4);
    CalCategoryMigrateTables(a4, (void *)a2, v4);
    CalCategoryLinkMigrateTables(a4, (void *)a2, v4);
    CalShareeMigrateTables(a4, (void *)a2, v4);
    CalNotificationMigrateTables(a4, (void *)a2, v4);
    CalResourceChangeMigrateTables(a4, (void *)a2, v4);
    CalSuggestedEventInfoMigrateTables(a4, (void *)a2, v4);
    CalContactMigrateTables(a4, (void *)a2, v4);
    CalConferenceMigrateTables(a4, (void *)a2, v4);
    CalAuxDatabaseMigrateTables(a4, (void *)a2, v4);
    CalAuxDatabaseAccountMigrateTables(a4, a2, v4);
    CalImageMigrateTables(a4, (void *)a2, v4);
    CalColorMigrateTables(a4, (void *)a2, v4);
    CalEventOccurrenceCachePrepareForDBMigration(a4, (void *)a2, v4);
    _CalDatabaseInitializeSchemaDuringMigration(a4, (void *)a2, v4);
    _CalResourceChangeCleanUpDanglingEntities(a4, a2);
    _CalDatabaseCleanupDanglers(a4, (void *)a2);
    unint64_t v14 = 0x1EB494000uLL;
    if (v4 > 55)
    {
      if (v4 > 0x68) {
        goto LABEL_164;
      }
    }
    else
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      CPSqliteConnectionPerformSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            char v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
      CPSqliteConnectionPerformSQL();
    }
    CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"SELECT ROWID, flags, external_id from Calendar WHERE store_id IN (SELECT ROWID from Store where Type = %d)", 2);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a2)
      {
        if (*(void *)(*(void *)a2 + 104))
        {
          uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18) {
            os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
    uint64_t v19 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    CFRelease(v17);
    if (!v19) {
      goto LABEL_165;
    }
    uint64_t v97 = 0;
    *(_OWORD *)long long buf = 0u;
    *(_OWORD *)CFArrayRef theArray = 0u;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v19)
      {
        uint64_t v20 = **v19;
        if (v20)
        {
          if (*(void *)(v20 + 104))
          {
            long long v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21) {
              os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v19)
      {
        uint64_t v22 = **v19;
        if (v22)
        {
          if (*(void *)(v22 + 104))
          {
            unint64_t v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23) {
              os_unfair_lock_assert_owner(v23 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (*(void *)&buf[8])
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)&buf[8]);
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            unint64_t v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v24) {
              os_unfair_lock_assert_owner(v24 + 20);
            }
          }
        }
      }
      uint64_t v84 = a4;
      uint64_t v25 = CPSqliteConnectionStatementForSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v26) {
              os_unfair_lock_assert_owner(v26 + 20);
            }
          }
        }
      }
      char v27 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28) {
              os_unfair_lock_assert_owner(v28 + 20);
            }
          }
        }
      }
      char v86 = (uint64_t **)v25;
      int v85 = v4;
      uint64_t v29 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v30) {
              os_unfair_lock_assert_owner(v30 + 20);
            }
          }
        }
      }
      uint64_t v31 = CPSqliteConnectionStatementForSQL();
      CFIndex v32 = Count;
      if (Count >= 1)
      {
        uint64_t v33 = (uint64_t **)v31;
        CFIndex v34 = 0;
        do
        {
          unsigned int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)&buf[8], v34);
          if ((CFArrayGetValueAtIndex(theArray[0], v34) & 8) == 0)
          {
            if (v86) {
              _runTrimForResult((uint64_t)buf, v34, v86);
            }
            BOOL v88 = ValueAtIndex;
            CFStringRef v36 = CFStringCreateWithFormat(0, 0, @"SELECT rowid, calendar_id, external_id from CalendarItem where calendar_id = %d", ValueAtIndex);
            if (*(unsigned char *)(v14 + 2320))
            {
              if (*(void *)a2)
              {
                if (*(void *)(*(void *)a2 + 104))
                {
                  int v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v37) {
                    os_unfair_lock_assert_owner(v37 + 20);
                  }
                }
              }
            }
            double v38 = (uint64_t **)CPSqliteConnectionStatementForSQL();
            CFRelease(v36);
            if (v38)
            {
              uint64_t v94 = 0;
              *(_OWORD *)int v92 = 0u;
              *(_OWORD *)CFSetRef v93 = 0u;
              if (*(unsigned char *)(v14 + 2320))
              {
                if (*v38)
                {
                  uint64_t v39 = **v38;
                  if (v39)
                  {
                    if (*(void *)(v39 + 104))
                    {
                      int v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v40) {
                        os_unfair_lock_assert_owner(v40 + 20);
                      }
                    }
                  }
                }
              }
              CPSqliteStatementSendResults();
              if (*(unsigned char *)(v14 + 2320))
              {
                if (*v38)
                {
                  uint64_t v41 = **v38;
                  if (v41)
                  {
                    if (*(void *)(v41 + 104))
                    {
                      uint32_t v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v42) {
                        os_unfair_lock_assert_owner(v42 + 20);
                      }
                    }
                  }
                }
              }
              CPSqliteStatementReset();
              if (v92[1])
              {
                unint64_t v43 = v14;
                CFIndex v44 = CFArrayGetCount(v92[1]);
                if (v44 >= 1)
                {
                  CFIndex v45 = v44;
                  for (CFIndex i = 0; i != v45; ++i)
                  {
                    uint64_t v47 = CFArrayGetValueAtIndex(v92[1], i);
                    if (v27) {
                      _runTrimForResult((uint64_t)v92, i, v27);
                    }
                    CFStringRef v48 = CFStringCreateWithFormat(0, 0, @"SELECT rowid, event_id, external_id from EventAction where event_id = %d", v47);
                    if (*(unsigned char *)(v43 + 2320))
                    {
                      if (*(void *)a2)
                      {
                        if (*(void *)(*(void *)a2 + 104))
                        {
                          id v49 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v49) {
                            os_unfair_lock_assert_owner(v49 + 20);
                          }
                        }
                      }
                    }
                    uint64_t v50 = (uint64_t **)CPSqliteConnectionStatementForSQL();
                    CFRelease(v48);
                    if (v50)
                    {
                      uint64_t v91 = 0;
                      *(_OWORD *)int v89 = 0u;
                      *(_OWORD *)uint64_t cf = 0u;
                      if (*(unsigned char *)(v43 + 2320))
                      {
                        if (*v50)
                        {
                          uint64_t v51 = **v50;
                          if (v51)
                          {
                            if (*(void *)(v51 + 104))
                            {
                              id v52 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v52) {
                                os_unfair_lock_assert_owner(v52 + 20);
                              }
                            }
                          }
                        }
                      }
                      CPSqliteStatementSendResults();
                      if (*(unsigned char *)(v43 + 2320))
                      {
                        if (*v50)
                        {
                          uint64_t v53 = **v50;
                          if (v53)
                          {
                            if (*(void *)(v53 + 104))
                            {
                              id v54 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v54) {
                                os_unfair_lock_assert_owner(v54 + 20);
                              }
                            }
                          }
                        }
                      }
                      CPSqliteStatementReset();
                      CFArrayRef v55 = v89[1];
                      if (v89[1] && v29)
                      {
                        CFIndex v56 = CFArrayGetCount(v89[1]);
                        if (v56 >= 1)
                        {
                          CFIndex v57 = v56;
                          for (CFIndex j = 0; j != v57; ++j)
                            _runTrimForResult((uint64_t)v89, j, v29);
                        }
                        CFArrayRef v55 = v89[1];
                      }
                      if (v55) {
                        CFRelease(v55);
                      }
                      if (cf[0]) {
                        CFRelease(cf[0]);
                      }
                      if (cf[1]) {
                        CFRelease(cf[1]);
                      }
                    }
                  }
                }
                unint64_t v14 = v43;
                if (v92[1]) {
                  CFRelease(v92[1]);
                }
              }
              if (v93[0]) {
                CFRelease(v93[0]);
              }
              if (v93[1]) {
                CFRelease(v93[1]);
              }
            }
            CFStringRef v59 = CFStringCreateWithFormat(0, 0, @"SELECT rowid, calendar_id, external_id, host_url from Notification where calendar_id = %d", v88);
            if (*(unsigned char *)(v14 + 2320))
            {
              if (*(void *)a2)
              {
                if (*(void *)(*(void *)a2 + 104))
                {
                  uint64_t v60 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v60) {
                    os_unfair_lock_assert_owner(v60 + 20);
                  }
                }
              }
            }
            char v61 = (uint64_t **)CPSqliteConnectionStatementForSQL();
            CFRelease(v59);
            CFIndex v32 = Count;
            if (v61)
            {
              uint64_t v94 = 0;
              *(_OWORD *)int v92 = 0u;
              *(_OWORD *)CFSetRef v93 = 0u;
              LOBYTE(v92[0]) = 1;
              if (*(unsigned char *)(v14 + 2320))
              {
                if (*v61)
                {
                  uint64_t v62 = **v61;
                  if (v62)
                  {
                    if (*(void *)(v62 + 104))
                    {
                      int v63 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v63) {
                        os_unfair_lock_assert_owner(v63 + 20);
                      }
                    }
                  }
                }
              }
              CPSqliteStatementSendResults();
              if (*(unsigned char *)(v14 + 2320))
              {
                if (*v61)
                {
                  uint64_t v64 = **v61;
                  if (v64)
                  {
                    if (*(void *)(v64 + 104))
                    {
                      uint64_t v65 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v65) {
                        os_unfair_lock_assert_owner(v65 + 20);
                      }
                    }
                  }
                }
              }
              CPSqliteStatementReset();
              CFArrayRef v66 = v92[1];
              if (v92[1] && v33)
              {
                CFIndex v67 = CFArrayGetCount(v92[1]);
                if (v67 >= 1)
                {
                  CFIndex v68 = v67;
                  for (CFIndex k = 0; k != v68; ++k)
                    _runTrimForResult((uint64_t)v92, k, v33);
                }
                CFArrayRef v66 = v92[1];
              }
              if (v66) {
                CFRelease(v66);
              }
              if (v93[0]) {
                CFRelease(v93[0]);
              }
              if (v93[1]) {
                CFRelease(v93[1]);
              }
            }
          }
          ++v34;
        }
        while (v34 != v32);
      }
      int v4 = v85;
      a4 = v84;
      if (*(void *)&buf[8]) {
        CFRelease(*(CFTypeRef *)&buf[8]);
      }
    }
    if (theArray[0]) {
      CFRelease(theArray[0]);
    }
    if (theArray[1]) {
      CFRelease(theArray[1]);
    }
LABEL_164:
    if (v4 > 16036)
    {
LABEL_224:
      CFAbsoluteTimeGetCurrent();
      CFLog();
      _CalAttachmentFileRegisterFunctions(a4, a2);
      return v4 > 18009;
    }
LABEL_165:
    uint64_t v70 = CPRecordStoreGetContext();
    int v71 = *(_DWORD *)(v70 + 172);
    if (!v71)
    {
      if (a2)
      {
        if (*(unsigned char *)(v14 + 2320))
        {
          if (*(void *)a2)
          {
            if (*(void *)(*(void *)a2 + 104))
            {
              uint64_t v72 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v72) {
                os_unfair_lock_assert_owner(v72 + 20);
              }
            }
          }
        }
      }
      int v73 = CPSqliteConnectionIntegerForPropertyWithDefaultValue();
      if (v73 != -1) {
        objc_msgSend(*(id *)(v70 + 296), "set_defaultCalendarDatabaseID:", v73);
      }
      if (a2)
      {
        if (*(unsigned char *)(v14 + 2320))
        {
          if (*(void *)a2)
          {
            if (*(void *)(*(void *)a2 + 104))
            {
              id v74 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v74) {
                os_unfair_lock_assert_owner(v74 + 20);
              }
            }
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
      int v71 = *(_DWORD *)(v70 + 172);
    }
    if (objc_msgSend(*(id *)(v70 + 296), "get_defaultCalendarDatabaseID") == v71)
    {
      if (a2)
      {
        if (*(unsigned char *)(v14 + 2320))
        {
          if (*(void *)a2)
          {
            if (*(void *)(*(void *)a2 + 104))
            {
              uint64_t v75 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v75) {
                os_unfair_lock_assert_owner(v75 + 20);
              }
            }
          }
        }
      }
      uint64_t v76 = (void *)CPSqliteConnectionCopyValueForProperty();
      if (v76) {
        objc_msgSend(*(id *)(v70 + 296), "set_defaultCalendarID:", v76);
      }
      if (a2)
      {
        if (*(unsigned char *)(v14 + 2320))
        {
          if (*(void *)a2)
          {
            if (*(void *)(*(void *)a2 + 104))
            {
              id v77 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v77) {
                os_unfair_lock_assert_owner(v77 + 20);
              }
            }
          }
        }
      }
      int v78 = CPSqliteConnectionIntegerForProperty();
      if (v78 >= 1) {
        objc_msgSend(*(id *)(v70 + 296), "set_defaultCalendarStoreUID:", v78);
      }
    }
    if (a2)
    {
      if (*(unsigned char *)(v14 + 2320))
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t v79 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v79) {
              os_unfair_lock_assert_owner(v79 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionRemoveProperty();
    if (a2)
    {
      if (*(unsigned char *)(v14 + 2320))
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t v80 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v80) {
              os_unfair_lock_assert_owner(v80 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionRemoveProperty();
    if (a2)
    {
      if (*(unsigned char *)(v14 + 2320))
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t v81 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v81) {
              os_unfair_lock_assert_owner(v81 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionRemoveProperty();
    if (a2)
    {
      if (*(unsigned char *)(v14 + 2320))
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            int v82 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v82) {
              os_unfair_lock_assert_owner(v82 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionRemoveProperty();
    goto LABEL_224;
  }
  return v4 > 18009;
}

uint64_t _CalDatabaseAlwaysFailingMigrationHandler()
{
  pid_t v0 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1A8E81000, v0, OS_LOG_TYPE_ERROR, "Asked to migrate when the database should already be migrated. Failing.", v2, 2u);
  }
  return 2;
}

BOOL _CalDatabaseMigrationChecker(uint64_t a1, uint64_t a2, int a3)
{
  return a3 < 18010;
}

void _CalDatabaseInitializeSchemaDuringMigration(uint64_t a1, void *a2, int a3)
{
  CalEventOccurrenceCacheInitializeDB(a1, a2, a3);
  CalScheduledTaskCacheInitializeDB(a1, a2, a3);
  CalDatabasePersistentChangeTrackingInitializeDB(a1, a2, a3);
}

void _CalDatabaseAttachmentDeletedDuringMigration(sqlite3_context *a1)
{
  attachmentsDeletedDuringMigratiouint64_t n = 1;
  sqlite3_result_null(a1);
}

uint64_t _CalCalendarGatherRowsToTrimURLs(uint64_t a1, uint64_t a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  int v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  if (a2)
  {
    int v6 = v5;
    if (!*(void *)(a2 + 8)) {
      *(void *)(a2 + 8) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    }
    if (!*(void *)(a2 + 16)) {
      *(void *)(a2 + 16) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
    }
    if (!*(void *)(a2 + 24)) {
      *(void *)(a2 + 24) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    }
    if (*(unsigned char *)a2 && !*(void *)(a2 + 32)) {
      *(void *)(a2 + 32) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), (const void *)v4);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), (const void *)v6);
    _appendURLFromSQLResult(a1, 2, *(__CFArray **)(a2 + 24));
    if (*(unsigned char *)a2) {
      _appendURLFromSQLResult(a1, 3, *(__CFArray **)(a2 + 32));
    }
  }
  return 0;
}

void _runTrimForResult(uint64_t a1, CFIndex a2, uint64_t **a3)
{
  int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a2);
  CFStringRef v7 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), a2);
  CFRetain(v7);
  if (*(unsigned char *)a1)
  {
    CFStringRef v8 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a2);
    CFRetain(v8);
    if (!v7) {
      goto LABEL_10;
    }
  }
  else
  {
    CFStringRef v8 = 0;
    if (!v7) {
      goto LABEL_10;
    }
  }
  if (CFStringGetLength(v7))
  {
    CFURLRef v9 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, 0);
    if (v9)
    {
      CFURLRef v10 = v9;
      CFStringRef v11 = CFURLCopyPath(v9);
      if (v11)
      {
        CFStringRef v12 = v11;
        CFRelease(v7);
        CFStringRef v7 = v12;
      }
      CFRelease(v10);
    }
  }
LABEL_10:
  if (v8)
  {
    if (*(unsigned char *)a1)
    {
      if (CFStringGetLength(v8))
      {
        CFURLRef v13 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, 0);
        if (v13)
        {
          CFURLRef v14 = v13;
          CFStringRef v15 = CFURLCopyPath(v13);
          if (v15)
          {
            CFStringRef v16 = v15;
            CFRelease(v8);
            CFStringRef v8 = v16;
          }
          CFRelease(v14);
        }
      }
    }
  }
  CFStringRef v17 = (sqlite3_stmt *)a3[1];
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(v7);
  sqlite3_bind_text(v17, 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
  if (*(unsigned char *)a1)
  {
    uint64_t v19 = (sqlite3_stmt *)a3[1];
    uint64_t v20 = (const char *)CalCreateCStringFromCFString(v8);
    sqlite3_bind_text(v19, 2, v20, -1, MEMORY[0x1E4F14838]);
    int v21 = 3;
  }
  else
  {
    int v21 = 2;
  }
  sqlite3_bind_int((sqlite3_stmt *)a3[1], v21, ValueAtIndex);
  if (CDBLockingAssertionsEnabled)
  {
    if (*a3)
    {
      uint64_t v22 = **a3;
      if (v22)
      {
        if (*(void *)(v22 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (CDBLockingAssertionsEnabled)
  {
    if (*a3)
    {
      uint64_t v24 = **a3;
      if (v24)
      {
        if (*(void *)(v24 + 104))
        {
          uint64_t v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v25) {
            os_unfair_lock_assert_owner(v25 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (v7) {
    CFRelease(v7);
  }
  if (v8)
  {
    CFRelease(v8);
  }
}

void _appendURLFromSQLResult(uint64_t a1, int a2, __CFArray *a3)
{
  int v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), a2);
  if (v4 && (CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v4, 0x8000100u)) != 0)
  {
    CFStringRef v6 = v5;
    CFArrayAppendValue(a3, v5);
    CFRelease(v6);
  }
  else
  {
    CFArrayAppendValue(a3, &stru_1EFF6D0F0);
  }
}

void CalDatabaseProfileAndGreenTeaCallback(void *a1, const char *a2, unint64_t a3)
{
  CalDatabaseProfileCallback((uint64_t)a1, (uint64_t)a2, a3);
  CalDatabaseGreenTeaCallback(a1, a2);
}

void CalDatabaseProfileCallback(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v4 = (void *)[[NSString alloc] initWithUTF8String:a2];
    CFStringRef v5 = (void *)CDBSQLProfileHandle;
    if (os_log_type_enabled((os_log_t)CDBSQLProfileHandle, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v6 = NSNumber;
      CFStringRef v7 = v5;
      CFStringRef v8 = [v6 numberWithUnsignedLongLong:(unint64_t)((double)a3 / 1000000.0)];
      int v9 = 138412546;
      CFURLRef v10 = v8;
      __int16 v11 = 2112;
      CFStringRef v12 = v4;
      _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_DEBUG, "Execution time was [%@] milliseconds for statement: [%@]", (uint8_t *)&v9, 0x16u);
    }
  }
}

void CalDatabaseGreenTeaCallback(void *a1, const char *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a1) {
      uint64_t v3 = a1;
    }
    else {
      uint64_t v3 = &stru_1EFF6D0F0;
    }
    if (!strncmp("SELECT", a2, 6uLL))
    {
      int v4 = @"read Calendar data";
    }
    else if (!strncmp("INSERT", a2, 6uLL) || !strncmp("UPDATE", a2, 6uLL))
    {
      int v4 = @"modified Calendar data";
    }
    else
    {
      if (strncmp("DELETE", a2, 6uLL))
      {
LABEL_16:

        return;
      }
      int v4 = @"deleted Calendar data";
    }
    ct_green_tea_logger_create_static();
    CFStringRef v5 = getCTGreenTeaOsLogHandle();
    CFStringRef v6 = v5;
    if (v5)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v7 = 138412546;
        CFStringRef v8 = v3;
        __int16 v9 = 2112;
        CFURLRef v10 = v4;
        _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_INFO, "%@ %@", (uint8_t *)&v7, 0x16u);
      }
    }

    goto LABEL_16;
  }
}

void _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 104) && (uint64_t Context = CPRecordStoreGetContext()) != 0) {
    uint64_t v4 = 2 * *(unsigned __int8 *)(Context + 378);
  }
  else {
    uint64_t v4 = 2;
  }
  do
  {
    CFStringRef v5 = off_1E5D61010[v4];
    CFStringRef v6 = (void *)[@"SELECT ROWID" mutableCopy];
    if (((_BYTE)v5[7] & 2) != 0)
    {
      CFStringRef v8 = (void *)[@"SELECT ROWID" mutableCopy];
      int v7 = v8;
      if (((_BYTE)v5[7] & 0x10) != 0) {
        [v8 appendString:@", sequence_number"];
      }
    }
    else
    {
      int v7 = 0;
    }
    if (*((int *)v5 + 18) >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = v5[10];
        CFStringRef v12 = &v11[v9];
        int v13 = *(_DWORD *)&v11[v9 + 24];
        if ((v13 & 4) == 0 && *((_DWORD *)v12 + 2))
        {
          [v6 appendFormat:@", %s", *(void *)&v11[v9]];
          int v13 = *((_DWORD *)v12 + 6);
        }
        if ((v13 & 8) != 0 || (v13 & 2) != 0 && *(_DWORD *)&v11[v9 + 8]) {
          [v7 appendFormat:@", %s", *(void *)&v11[v9]];
        }
        ++v10;
        v9 += 40;
      }
      while (v10 < *((int *)v5 + 18));
    }
    objc_msgSend(v6, "appendFormat:", @" FROM %s", *v5);
    objc_msgSend(v7, "appendFormat:", @" FROM %sChanges", *v5);
    if (_CalDatabaseDoesStatementFailToCompile(a2, v6))
    {
      CFStringRef v15 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v16 = *v5;
        *(_DWORD *)long long buf = 136315138;
        uint64_t v33 = v16;
        CFStringRef v17 = "Main table failure for %s";
        goto LABEL_30;
      }
LABEL_31:

      goto LABEL_32;
    }
    if (v7 && _CalDatabaseDoesStatementFailToCompile(a2, v7))
    {
      CFStringRef v15 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *v5;
        *(_DWORD *)long long buf = 136315138;
        uint64_t v33 = v18;
        CFStringRef v17 = "Change table failure for %s";
LABEL_30:
        _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);
      }
      goto LABEL_31;
    }

    ++v4;
  }
  while (v4 != 24);
  if (!_CalDatabaseDoesStatementFailToCompile(a2, @"SELECT key, value FROM _SqliteDatabaseProperties"))return; {
  CFURLRef v14 = CDBLogHandle;
  }
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_ERROR, "Failure for _SqliteDatabaseProperties", buf, 2u);
  }
LABEL_32:
  uint64_t v19 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A8E81000, v19, OS_LOG_TYPE_ERROR, "Schema validation failed. Deleting calendar database and aborting.", buf, 2u);
  }
  uint64_t v20 = *(sqlite3 **)(a2 + 8);
  if (v20)
  {
    *(_DWORD *)long long buf = 141;
    int v21 = sqlite3_file_control(v20, 0, 101, buf);
    uint64_t v22 = CDBLogHandle;
    BOOL v23 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (v21)
    {
      uint64_t v24 = a1;
      if (!v23) {
        goto LABEL_44;
      }
      *(_WORD *)uint64_t v31 = 0;
      uint64_t v25 = "Failed to delete database with invalid schema.";
    }
    else
    {
      uint64_t v24 = a1;
      if (!v23) {
        goto LABEL_44;
      }
      *(_WORD *)uint64_t v31 = 0;
      uint64_t v25 = "Successfully deleted database. Aborting.";
    }
    uint64_t v26 = v31;
  }
  else
  {
    uint64_t v22 = CDBLogHandle;
    uint64_t v24 = a1;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_44;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v25 = "Failed to delete database due to no connection to database";
    uint64_t v26 = buf;
  }
  _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_ERROR, v25, v26, 2u);
LABEL_44:
  if (!*(void *)(v24 + 104)
    || (uint64_t v27 = CPRecordStoreGetContext()) == 0
    || (uint64_t v28 = v27, WeakRetained = objc_loadWeakRetained((id *)(v27 + 320)), WeakRetained, !WeakRetained))
  {
    _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure_cold_1();
  }
  _CalDatabaseIntegrityError(v28, @"Schema");
}

uint64_t _CalDatabaseDoesStatementFailToCompile(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (!a1) {
    goto LABEL_15;
  }
  CFStringRef v5 = *(sqlite3 **)(a1 + 8);
  if (!v5)
  {
    a1 = 0;
    goto LABEL_15;
  }
  ppStmt = 0;
  int v6 = sqlite3_prepare_v2(v5, (const char *)[v3 UTF8String], -1, &ppStmt, 0);
  if (v6)
  {
    int v7 = v6;
    CFStringRef v8 = ppStmt;
    uint64_t v9 = CDBLogHandle;
    BOOL v10 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (v7 == 1 && !v8)
    {
      if (v10)
      {
        uint64_t v11 = *(sqlite3 **)(a1 + 8);
        CFStringRef v12 = v9;
        int v13 = sqlite3_errmsg(v11);
        *(_DWORD *)long long buf = 136446210;
        CFStringRef v17 = (sqlite3_stmt *)v13;
        _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, "Compilation failure: %{public}s", buf, 0xCu);
      }
      a1 = 1;
      goto LABEL_13;
    }
    if (v10)
    {
      *(_DWORD *)long long buf = 134218240;
      CFStringRef v17 = ppStmt;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_ERROR, "Unexpected compilation failure: statement is %p and error is %i", buf, 0x12u);
    }
  }
  a1 = 0;
LABEL_13:
  if (ppStmt) {
    sqlite3_finalize(ppStmt);
  }
LABEL_15:

  return a1;
}

uint64_t _CalDatabaseCopyDatabaseIfValid(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&__GlobalLock);
  if (__ValidDatabases)
  {
    uint64_t v2 = (void *)MEMORY[0x1AD0E9B90]();
    uint64_t v3 = [(id)__ValidDatabases member:a1];
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)&__GlobalLock);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&__GlobalLock);
  return v3;
}

void __CalDatabaseCleanUpAttachmentsRemovedDuringMigration_block_invoke()
{
  CalDatabaseCleanUpAttachmentsRemovedDuringMigration_cleanupRequired = attachmentsDeletedDuringMigration;
}

uint64_t __CalDatabaseSaveInternalWithOptions_block_invoke(uint64_t result, const void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  int v4 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v3 = (unsigned char *)(v2 + 24);
  if (!v4)
  {
    uint64_t v5 = result;
    if (!*(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24))
    {
      uint64_t result = _CalDatabaseIsIntegrationRecord(a2);
      if (result) {
        uint64_t v6 = *(void *)(v5 + 48);
      }
      else {
        uint64_t v6 = *(void *)(v5 + 32);
      }
      uint64_t v3 = (unsigned char *)(*(void *)(v6 + 8) + 24);
    }
    *uint64_t v3 = 1;
  }
  return result;
}

uint64_t _CalDatabaseIsIntegrationRecord(const void *a1)
{
  uint64_t result = _CalEntityGetStore(a1);
  if (result) {
    return _CalStoreGetType(result) == 6;
  }
  return result;
}

void _CalDatabaseRemoveOrphanedEntitiesOfType(uint64_t a1, int a2, void *a3)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 64);
  if (v4)
  {
    uint64_t v6 = (const void *)a2;
    CFSetRef Value = (const __CFSet *)CFDictionaryGetValue(v4, (const void *)a2);
    if (Value)
    {
      CFSetApplyFunction(Value, (CFSetApplierFunction)_CalDatabaseRemoveOrphanedEntities, a3);
      CFStringRef v8 = *(__CFDictionary **)(a1 + 64);
      CFDictionaryRemoveValue(v8, v6);
    }
  }
}

BOOL CalDatabaseChangesToRecordIDShouldBeIgnoredByEventKit(uint64_t a1)
{
  if (CalRecordIDIsTemporary(a1)) {
    return 1;
  }
  uint64_t v3 = CalRecordIDGetEntityType(a1);
  return !CalDatabaseEntityTypeParticipatesInInMemoryChangeTracking(v3);
}

void validateAndAddObjectID(__CFArray *a1, const void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  int v4 = CalRecordIDGetEntityType((uint64_t)a2);
  int v5 = CalRecordIDGetRowID((uint64_t)a2);
  if (v4 <= 0)
  {
    int v7 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT)) {
      return;
    }
    int v9 = 67109120;
    int v10 = v4;
    CFStringRef v8 = "Attempt to add record with invalid entity type %i";
LABEL_11:
    _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_FAULT, v8, (uint8_t *)&v9, 8u);
    return;
  }
  int v6 = v5;
  if (v5 <= 0)
  {
    int v7 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT)) {
      return;
    }
    int v9 = 67109120;
    int v10 = v6;
    CFStringRef v8 = "Attempt to add record with invalid row ID %i";
    goto LABEL_11;
  }
  CFArrayAppendValue(a1, a2);
}

void addRelatedObjectIDsForDeletedRecord(const void *a1, CFTypeRef *a2)
{
  uint64_t Store = CPRecordGetStore();
  if (Store) {
    uint64_t Store = CPRecordStoreGetContext();
  }
  char v11 = 0;
  int v5 = _CalEntityCopyRelatedEntitiesDeletedByTriggers(Store, a1, &v11);
  if (v11 && *a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
        Recordint ID = (const void *)_CalEntityGetRecordID(ValueAtIndex);
        validateAndAddObjectID((__CFArray *)*a2, RecordID);
      }
    }
    CFRelease(v5);
  }
}

void _CalDatabasePreCommitSaveCallback(uint64_t a1, uint64_t a2)
{
  uint64_t Context = CPRecordStoreGetContext();
  if (!Context) {
    return;
  }
  uint64_t v5 = Context;
  int v6 = *(_DWORD *)(Context + 84);
  if ((v6 & 0xFE) != 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        CFIndex v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
    CPRecordStoreGetSequenceNumber();
    if ((v6 & 2) != 0)
    {
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)a2)
          {
            if (*(void *)(*(void *)a2 + 104))
            {
              CFStringRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v8) {
                os_unfair_lock_assert_owner(v8 + 20);
              }
            }
          }
        }
      }
      CPSqliteConnectionSetIntegerForProperty();
      *(_DWORD *)(v5 + 84) &= ~2u;
      if ((v6 & 4) == 0)
      {
LABEL_9:
        if ((v6 & 8) == 0) {
          goto LABEL_10;
        }
        goto LABEL_29;
      }
    }
    else if ((v6 & 4) == 0)
    {
      goto LABEL_9;
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            int v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9) {
              os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~4u;
    if ((v6 & 8) == 0)
    {
LABEL_10:
      if ((v6 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_36;
    }
LABEL_29:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            int v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~8u;
    if ((v6 & 0x10) == 0)
    {
LABEL_11:
      if ((v6 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_43;
    }
LABEL_36:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            char v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11) {
              os_unfair_lock_assert_owner(v11 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~0x10u;
    if ((v6 & 0x20) == 0)
    {
LABEL_12:
      if ((v6 & 0x40) == 0) {
        goto LABEL_13;
      }
      goto LABEL_50;
    }
LABEL_43:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            CFStringRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12) {
              os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~0x20u;
    if ((v6 & 0x40) == 0)
    {
LABEL_13:
      if ((v6 & 0x80) == 0) {
        goto LABEL_64;
      }
LABEL_57:
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)a2)
          {
            if (*(void *)(*(void *)a2 + 104))
            {
              CFURLRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14) {
                os_unfair_lock_assert_owner(v14 + 20);
              }
            }
          }
        }
      }
      CPSqliteConnectionSetIntegerForProperty();
      *(_DWORD *)(v5 + 84) &= ~0x80u;
      goto LABEL_64;
    }
LABEL_50:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            int v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13) {
              os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~0x40u;
    if ((v6 & 0x80) == 0) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
LABEL_64:
  uint64_t v15 = *(void *)(v5 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    CFStringRef v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v17) {
      os_unfair_lock_assert_owner(v17 + 20);
    }
  }
  CFArrayRef v18 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
  if (v18)
  {
    CFArrayRef v19 = v18;
    CFIndex Count = CFArrayGetCount(v18);
    if (Count >= 1)
    {
      CFIndex v21 = Count;
      for (CFIndex i = 0; i != v21; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v19, i);
        if (_CalEntityIsOfType(ValueAtIndex, 101)) {
          _CalCalendarItemFixupParticipantsOnEvent((uint64_t)ValueAtIndex);
        }
        if (_CalEntityIsOfType(ValueAtIndex, 2)) {
          _CalEventRectifyRecurrenceSeriesPrivacyLevels(ValueAtIndex);
        }
      }
    }
    CFRelease(v19);
  }
}

void _CalDatabaseCompleteSave(uint64_t a1, void *a2)
{
  uint64_t Context = CPRecordStoreGetContext();
  CFArrayRef v5 = *(const __CFArray **)(Context + 112);
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(Context + 112), i);
        int v9 = (void (**)(void))objc_claimAutoreleasedReturnValue();
        v9[2]();
      }
    }
    CFRelease(*(CFTypeRef *)(Context + 112));
    *(void *)(Context + 112) = 0;
  }
  if (a2)
  {
    int v10 = *(CFDictionaryRef **)(Context + 32);
    if (v10) {
      _CalEventOccurrenceCacheStopTrackingUpdatesAndSave(v10, a2);
    }
  }
  if (a2 && (char v11 = *(void **)(Context + 40)) != 0)
  {
    _CalScheduledTaskCacheStopTrackingUpdates(v11);
    _CalScheduledTaskCacheSave(*(void *)(Context + 40), (uint64_t)a2);
    _CalScheduledTaskCacheFinishSave(*(void *)(Context + 40));
  }
  else if (!a2)
  {
    return;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      CFStringRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  int SequenceNumber = CPRecordStoreGetSequenceNumber();
  CFURLRef v14 = (void *)CalDatabaseCopyClientIdentifierOptionalLock(Context, 0);
  _CalDatabaseAssociateSequenceNumberWithClient((uint64_t)a2, v14, SequenceNumber);
  CFRelease(v14);
}

BOOL _CalDatabaseSendChangeNotificationAndObjectIdsToCalaccessd(uint64_t a1, const __CFArray *a2, const __CFArray *a3, int64_t a4, BOOL a5, void *a6)
{
  id v11 = a6;
  _CalDatabaseCalaccessdXPCConnection();
  CFStringRef v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    int v13 = _CalDatabaseCreateXPCArrayOfChangedObjectIDs(a2);
    CFURLRef v14 = _CalDatabaseCreateXPCArrayOfChangedObjectIDs(a3);
    xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v15, "function", "postchangenote");
    BOOL v16 = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1);
    xpc_dictionary_set_string(v15, "databasePath", (const char *)[(__CFString *)v16 UTF8String]);
    xpc_dictionary_set_BOOL(v15, "postnotificationsynchronously", a5);
    if (v13 && v14)
    {
      xpc_dictionary_set_value(v15, "changes", v13);
      xpc_dictionary_set_value(v15, "deletes", v14);
    }
    xpc_dictionary_set_int64(v15, "changeType", a4);
    xpc_dictionary_set_int64(v15, "changeReason", *(void *)(a1 + 368));
    xpc_dictionary_set_string(v15, "clientName", (const char *)[v11 UTF8String]);
    xpc_object_t v17 = xpc_connection_send_message_with_reply_sync(v12, v15);
    CFArrayRef v18 = v17;
    BOOL v19 = v17
       && object_getClass(v17) == (Class)MEMORY[0x1E4F14590]
       && xpc_dictionary_get_BOOL(v18, "notificationwasposted");
  }
  else
  {
    BOOL v19 = 0;
  }

  return v19;
}

CFIndex _CalDatabaseCountEntitiesByType(const __CFArray *a1, uint64_t a2, _DWORD *a3)
{
  CFIndex result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    CFIndex v7 = result;
    for (CFIndex i = 0; i != v7; ++i)
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      CFIndex result = _CalEntityGetType(ValueAtIndex);
      if ((result - 1) >= 0x1D) {
        int v10 = a3;
      }
      else {
        int v10 = (_DWORD *)(a2 + 4 * (result - 1));
      }
      ++*v10;
    }
  }
  return result;
}

void _CalDatabaseChangesOfTypeMayAffectWidgets(uint64_t a1, CFArrayRef theArray, unint64_t a3, unsigned char *a4)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  if (!theArray) {
    return;
  }
  CFArrayRef v6 = theArray;
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return;
  }
  CFIndex v9 = Count;
  CFIndex v10 = 0;
  if (a3 == 1) {
    id v11 = @"ChangeTypeUpdated";
  }
  else {
    id v11 = @"ChangeTypeAdded";
  }
  CFStringRef v12 = @"ChangeTypeDeleted";
  if (a3 != 2) {
    CFStringRef v12 = v11;
  }
  uint64_t v100 = v12;
  uint64_t v98 = a4 + 16;
  unint64_t v99 = a3 & 0xFFFFFFFFFFFFFFFDLL;
  while (1)
  {
    while (1)
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(v6, v10);
      Recordint ID = _CalEntityGetRecordID(ValueAtIndex);
      if (!RecordID)
      {
        BOOL v16 = (void *)CDBWidgetReloadHandle;
        if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_ERROR))
        {
          xpc_object_t v17 = v16;
          int ID = CPRecordGetID();
          if (ValueAtIndex)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (Context) {
                  os_unfair_lock_assert_owner(Context + 20);
                }
              }
            }
          }
          int IsDeleted = CPRecordIsDeleted();
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)uint64_t v114 = ID;
          *(_WORD *)&v114[4] = 1024;
          *(_DWORD *)&v114[6] = IsDeleted;
          _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, "_CalDatabaseChangesInArrayMayAffectWidgets: failed to get recordID for updated record with rowid [%d], deleted: %{BOOL}d", buf, 0xEu);
        }
        goto LABEL_51;
      }
      uint64_t v15 = RecordID;
      if (CalRecordIDGetEntityType(RecordID) != 6) {
        break;
      }
      if (_CalStoreHasDirtyInstanceAttributes((uint64_t)ValueAtIndex))
      {
        uint64_t v72 = (void *)CDBWidgetReloadHandle;
        if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
        {
          id v74 = v100;
          *(_DWORD *)long long buf = 138543362;
          *(void *)uint64_t v114 = v100;
          uint64_t v75 = v72;
          _os_log_impl(&dword_1A8E81000, v75, OS_LOG_TYPE_DEFAULT, "Allowing reload for changeType %{public}@ because store has dirty instance attributes", buf, 0xCu);
        }
        if (*a4)
        {
          uint64_t v76 = a4 + 16;
          do
          {
            *(v76 - 15) = 1;
            int v77 = *v76;
            v76 += 16;
          }
          while (v77);
        }
        return;
      }
LABEL_51:
      if (++v10 >= v9) {
        return;
      }
    }
    if (CalRecordIDGetEntityType(v15) == 1) {
      break;
    }
    if (CalRecordIDGetEntityType(v15) == 5)
    {
      if (a3 > 1) {
        goto LABEL_51;
      }
      uint64_t v84 = (void *)CDBWidgetReloadHandle;
      if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
      {
        char v86 = v11;
        *(_DWORD *)long long buf = 138543362;
        *(void *)uint64_t v114 = v86;
        uint64_t v87 = v84;
        _os_log_impl(&dword_1A8E81000, v87, OS_LOG_TYPE_DEFAULT, "Allowing reload because of changeType %{public}@ for recurrence rule", buf, 0xCu);
      }
      if (*a4)
      {
        BOOL v88 = a4 + 16;
        do
        {
          *(v88 - 15) = 1;
          int v89 = *v88;
          v88 += 16;
        }
        while (v89);
      }
      return;
    }
    if (CalRecordIDGetEntityType(v15) == 29)
    {
      if (a3 != 1) {
        goto LABEL_51;
      }
      CFDictionaryRef v90 = CDBWidgetReloadHandle;
      if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A8E81000, v90, OS_LOG_TYPE_DEFAULT, "Allowing reload because a color has been updated", buf, 2u);
      }
      if (*a4)
      {
        int v92 = a4 + 16;
        do
        {
          *(v92 - 15) = 1;
          int v93 = *v92;
          v92 += 16;
        }
        while (v93);
      }
      return;
    }
    if (!_CalEntityIsOfType(ValueAtIndex, 2)) {
      goto LABEL_51;
    }
    CFArrayRef v95 = v6;
    unint64_t v96 = a3;
    uint64_t v97 = a1;
    uint64_t v94 = v11;
    if (v99)
    {
      if (ValueAtIndex)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFIndex v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21) {
              os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
      }
      CFArrayRef v22 = (const __CFArray *)CPRecordCopyChangedProperties();
      if (v22)
      {
        CFArrayRef v23 = v22;
        CFIndex v24 = CFArrayGetCount(v22);
        if (v24 >= 1)
        {
          CFIndex v25 = v24;
          for (CFIndex i = 0; v25 != i; ++i)
          {
            int v27 = CFArrayGetValueAtIndex(v23, i);
            if (v27 <= 72)
            {
              if (v27 <= 0x38 && ((1 << v27) & 0x1400001000083FFLL) != 0)
              {
LABEL_55:
                uint64_t v29 = (id)CDBWidgetReloadHandle;
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t PropertyDescriptor = (void *)CPRecordGetPropertyDescriptor();
                  if (PropertyDescriptor && *PropertyDescriptor)
                  {
                    objc_msgSend(NSString, "stringWithUTF8String:");
                    uint64_t v31 = (__CFString *)objc_claimAutoreleasedReturnValue();
                  }
                  else
                  {
                    uint64_t v31 = &stru_1EFF6D0F0;
                  }
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)uint64_t v114 = v31;
                  _os_log_impl(&dword_1A8E81000, v29, OS_LOG_TYPE_DEFAULT, "ChangeTypeUpdated contains changed property (%{public}@), which may affect the widget view if it's in the time range", buf, 0xCu);
                }
                CFRelease(v23);
                goto LABEL_62;
              }
            }
            else if (v27 == 73)
            {
              if (_CalDatabaseIsIntegrationRecord(ValueAtIndex)) {
                goto LABEL_55;
              }
            }
            else if ((v27 - 79) < 2 || v27 == 94)
            {
              goto LABEL_55;
            }
          }
        }
        CFRelease(v23);
      }
      int v102 = 0;
    }
    else
    {
      uint64_t v28 = CDBWidgetReloadHandle;
      if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A8E81000, v28, OS_LOG_TYPE_DEFAULT, "Event was added or removed which may affect the widget view if it's in the time range", buf, 2u);
      }
LABEL_62:
      int v102 = 1;
    }
    if (*a4)
    {
      uint64_t v32 = 0;
      uint64_t v33 = v98;
      uint64_t v101 = a4;
      CFIndex v103 = v9;
      while (1)
      {
        uint64_t v34 = (id *)&a4[16 * v32];
        if (*((unsigned char *)v34 + 1)) {
          goto LABEL_96;
        }
        uint64_t v108 = v32;
        id v35 = v34[1];
        CFStringRef v36 = [v35 startDate];
        int v37 = [v35 endDate];
        uint64_t v38 = CalCopyTimeZone();
        int v111 = v36;
        [v36 timeIntervalSinceReferenceDate];
        uint64_t GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
        uint64_t v106 = v40;
        uint64_t v107 = GregorianDateWithFallbackToDefaultTimeZone;
        CFArrayRef v110 = v37;
        [v37 timeIntervalSinceReferenceDate];
        int v112 = (const void *)v38;
        uint64_t v41 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
        uint64_t v104 = v42;
        uint64_t v105 = v41;
        unint64_t v43 = (void *)MEMORY[0x1E4F1C9C8];
        id v44 = v35;
        CFIndex v45 = [v43 dateWithTimeIntervalSinceReferenceDate:COERCE_DOUBLE(_CalEventGetStartDate((uint64_t)ValueAtIndex))];
        uint64_t v46 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:_CalRecurrenceGetEndDate((uint64_t)ValueAtIndex)];
        LODWORD(v36) = [v44 intersectsRangeWithStartDate:v45 endDate:v46 allowSinglePointIntersection:0];
        uint64_t v47 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:_CalRecordGetOriginalDateProperty((uint64_t)ValueAtIndex)];
        CFStringRef v48 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:_CalRecordGetOriginalDateProperty((uint64_t)ValueAtIndex)];
        LODWORD(v37) = [v44 intersectsRangeWithStartDate:v47 endDate:v48 allowSinglePointIntersection:0];
        CFArrayRef v109 = v44;

        if ((v102 & (v36 | v37)) == 1) {
          break;
        }
        a4 = v101;
        CFIndex v9 = v103;
        uint64_t v52 = v108;
        if (v102)
        {
          uint64_t v51 = v112;
          if (_CalEventOccurrencesExistInDateRange((uint64_t)ValueAtIndex, v107, v106, v105, v104, 0, v112))
          {
            CFIndex v57 = (void *)CDBWidgetReloadHandle;
            int v50 = 1;
            if (!os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_75;
            }
            *(_DWORD *)long long buf = 138543874;
            *(void *)uint64_t v114 = v100;
            *(_WORD *)&v114[8] = 1024;
            int v115 = 1;
            __int16 v116 = 1024;
            int v117 = v108;
            uint64_t v53 = v100;
            id v54 = v57;
            CFArrayRef v55 = v54;
            CFIndex v56 = "Allowing reload for %{public}@ because changedPropertiesShowInWidget (%{BOOL}d), post-save event occur"
                  "rences exist in range %i)";
            goto LABEL_73;
          }
          uint64_t v58 = *(const void **)(v97 + 32);
          if (v58)
          {
            CFRetain(*(CFTypeRef *)(v97 + 32));
            CFTypeRef v59 = CalFilterCreateWithDatabaseShowingAll(v97);
            int v60 = CPRecordGetID();
            CFMutableSetRef Mutable = CFArrayCreateMutable(0, 1, 0);
            CFArrayAppendValue(Mutable, (const void *)v60);
            [v111 timeIntervalSinceReferenceDate];
            CFArrayRef v63 = (const __CFArray *)CalEventOccurrenceCacheCopyEventOccurrencesWithIDsAfterDate((uint64_t)v58, (uint64_t)v59, Mutable, 1, 0, 0, *(unsigned char *)(v97 + 381) == 0, 0, v62 + -1.0);
            if (v59) {
              CFRelease(v59);
            }
            CFRelease(v58);
            if (Mutable) {
              CFRelease(Mutable);
            }
            uint64_t v51 = v112;
            if (v63)
            {
              CFIndex v9 = v103;
              if (CFArrayGetCount(v63) == 1
                && (uint64_t v64 = CFArrayGetValueAtIndex(v63, 0),
                    double Date = CalEventOccurrenceGetDate((uint64_t)v64),
                    [v110 timeIntervalSinceReferenceDate],
                    Date < v66))
              {
                CFIndex v67 = (void *)CDBWidgetReloadHandle;
                int v50 = 1;
                if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543874;
                  *(void *)uint64_t v114 = v100;
                  *(_WORD *)&v114[8] = 1024;
                  int v115 = 1;
                  __int16 v116 = 1024;
                  int v117 = v108;
                  CFIndex v68 = v100;
                  id v69 = v67;
                  _os_log_impl(&dword_1A8E81000, v69, OS_LOG_TYPE_DEFAULT, "Allowing reload for %{public}@ because changedPropertiesShowInWidget (%{BOOL}d), pre-save event occurrences exist in range %i)", buf, 0x18u);

                  uint64_t v51 = v112;
                }
              }
              else
              {
                int v50 = 0;
              }
              CFRelease(v63);
            }
            else
            {
              int v50 = 0;
              CFIndex v9 = v103;
            }
          }
          else
          {
            int v50 = 0;
          }
        }
        else
        {
          int v50 = 0;
          uint64_t v51 = v112;
        }
LABEL_75:
        if (v51) {
          CFRelease(v51);
        }

        if (v50)
        {
          if (a4[16 * v52])
          {
            do
            {
              *(v33 - 15) = 1;
              int v70 = *v33;
              v33 += 16;
            }
            while (v70);
          }
          goto LABEL_96;
        }
        uint64_t v32 = v52 + 1;
        v33 += 16;
        if (!a4[16 * v32]) {
          goto LABEL_96;
        }
      }
      id v49 = (void *)CDBWidgetReloadHandle;
      int v50 = 1;
      a4 = v101;
      CFIndex v9 = v103;
      uint64_t v51 = v112;
      uint64_t v52 = v108;
      if (!os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_75;
      }
      *(_DWORD *)long long buf = 138543874;
      *(void *)uint64_t v114 = v100;
      *(_WORD *)&v114[8] = 1024;
      int v115 = 1;
      __int16 v116 = 1024;
      int v117 = v108;
      uint64_t v53 = v100;
      id v54 = v49;
      CFArrayRef v55 = v54;
      CFIndex v56 = "Allowing reload for %{public}@ because changedPropertiesShowInWidget (%{BOOL}d) and its in range %i.";
LABEL_73:
      _os_log_impl(&dword_1A8E81000, v55, OS_LOG_TYPE_DEFAULT, v56, buf, 0x18u);

      goto LABEL_75;
    }
LABEL_96:
    ++v10;
    if (a4[1]) {
      BOOL v71 = 0;
    }
    else {
      BOOL v71 = v10 < v9;
    }
    CFArrayRef v6 = v95;
    a3 = v96;
    a1 = v97;
    id v11 = v94;
    if (!v71) {
      return;
    }
  }
  if (!_CalCalendarHasDirtyInstanceAttributes((uint64_t)ValueAtIndex)) {
    goto LABEL_51;
  }
  int v78 = (void *)CDBWidgetReloadHandle;
  if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v80 = v100;
    *(_DWORD *)long long buf = 138543362;
    *(void *)uint64_t v114 = v100;
    uint64_t v81 = v78;
    _os_log_impl(&dword_1A8E81000, v81, OS_LOG_TYPE_DEFAULT, "Allowing reload for changeType %{public}@ because calendar has dirty instance attributes", buf, 0xCu);
  }
  if (*a4)
  {
    int v82 = a4 + 16;
    do
    {
      *(v82 - 15) = 1;
      int v83 = *v82;
      v82 += 16;
    }
    while (v83);
  }
}

BOOL _CalDatabaseChangesOfTypeMayAffectAppEntities(const __CFArray *a1, uint64_t a2)
{
  *(void *)&v33[5] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  BOOL v7 = 1;
  while (1)
  {
    int ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
    Recordint ID = _CalEntityGetRecordID(ValueAtIndex);
    if (!RecordID)
    {
      id v11 = (void *)CDBAppEntityHandle;
      if (os_log_type_enabled((os_log_t)CDBAppEntityHandle, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v12 = v11;
        int ID = CPRecordGetID();
        if (ValueAtIndex)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context) {
                os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
        }
        int IsDeleted = CPRecordIsDeleted();
        *(_DWORD *)long long buf = 67109376;
        v33[0] = ID;
        LOWORD(v33[1]) = 1024;
        *(_DWORD *)((char *)&v33[1] + 2) = IsDeleted;
        _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, "_CalDatabaseChangesMayAffectAppEntities: failed to get recordID for updated record with rowid [%d], deleted: %{BOOL}d", buf, 0xEu);
      }
      goto LABEL_23;
    }
    uint64_t v10 = RecordID;
    if (CalRecordIDGetEntityType(RecordID) == 6)
    {
      if (_CalStoreHasDirtyInstanceAttributes((uint64_t)ValueAtIndex))
      {
        xpc_object_t v17 = (void *)CDBAppEntityHandle;
        if (!os_log_type_enabled((os_log_t)CDBAppEntityHandle, OS_LOG_TYPE_DEFAULT)) {
          return v7;
        }
        BOOL v19 = @"ChangeTypeAdded";
        if (a2 == 1) {
          BOOL v19 = @"ChangeTypeUpdated";
        }
        if (a2 == 2) {
          BOOL v19 = @"ChangeTypeDeleted";
        }
        uint64_t v20 = v19;
        *(_DWORD *)long long buf = 138543362;
        *(void *)uint64_t v33 = v20;
        CFIndex v21 = v17;
        CFArrayRef v22 = "Notifying app entity observers for changeType %{public}@ because store has dirty instance attributes";
        goto LABEL_53;
      }
      goto LABEL_23;
    }
    if (CalRecordIDGetEntityType(v10) != 1) {
      break;
    }
    if (_CalCalendarHasDirtyInstanceAttributes((uint64_t)ValueAtIndex))
    {
      CFArrayRef v23 = (void *)CDBAppEntityHandle;
      if (!os_log_type_enabled((os_log_t)CDBAppEntityHandle, OS_LOG_TYPE_DEFAULT)) {
        return v7;
      }
      CFIndex v25 = @"ChangeTypeAdded";
      if (a2 == 1) {
        CFIndex v25 = @"ChangeTypeUpdated";
      }
      if (a2 == 2) {
        CFIndex v25 = @"ChangeTypeDeleted";
      }
      uint64_t v20 = v25;
      *(_DWORD *)long long buf = 138543362;
      *(void *)uint64_t v33 = v20;
      CFIndex v21 = v23;
      CFArrayRef v22 = "Notifying app entity observers for changeType %{public}@ because calendar has dirty instance attributes";
LABEL_53:
      _os_log_impl(&dword_1A8E81000, v21, OS_LOG_TYPE_DEFAULT, v22, buf, 0xCu);

      return v7;
    }
LABEL_23:
    BOOL v7 = ++v6 < v5;
    if (v5 == v6) {
      return v7;
    }
  }
  if (CalRecordIDGetEntityType(v10) != 5)
  {
    if (_CalEntityIsOfType(ValueAtIndex, 2))
    {
      uint64_t v28 = (void *)CDBAppEntityHandle;
      if (!os_log_type_enabled((os_log_t)CDBAppEntityHandle, OS_LOG_TYPE_DEFAULT)) {
        return v7;
      }
      uint64_t v29 = @"ChangeTypeAdded";
      if (a2 == 1) {
        uint64_t v29 = @"ChangeTypeUpdated";
      }
      if (a2 == 2) {
        uint64_t v29 = @"ChangeTypeDeleted";
      }
      uint64_t v20 = v29;
      *(_DWORD *)long long buf = 138543362;
      *(void *)uint64_t v33 = v20;
      CFIndex v21 = v28;
      CFArrayRef v22 = "Notifying app entity observers because of changeType %{public}@ for event";
      goto LABEL_53;
    }
    if (_CalEntityIsOfType(ValueAtIndex, 29))
    {
      uint64_t v30 = (void *)CDBAppEntityHandle;
      if (!os_log_type_enabled((os_log_t)CDBAppEntityHandle, OS_LOG_TYPE_DEFAULT)) {
        return v7;
      }
      uint64_t v31 = @"ChangeTypeAdded";
      if (a2 == 1) {
        uint64_t v31 = @"ChangeTypeUpdated";
      }
      if (a2 == 2) {
        uint64_t v31 = @"ChangeTypeDeleted";
      }
      uint64_t v20 = v31;
      *(_DWORD *)long long buf = 138543362;
      *(void *)uint64_t v33 = v20;
      CFIndex v21 = v30;
      CFArrayRef v22 = "Notifying app entity observers because of changeType %{public}@ for color";
      goto LABEL_53;
    }
    goto LABEL_23;
  }
  if (a2 != 1) {
    goto LABEL_23;
  }
  uint64_t v26 = CDBAppEntityHandle;
  if (os_log_type_enabled((os_log_t)CDBAppEntityHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)uint64_t v33 = @"ChangeTypeUpdated";
    _os_log_impl(&dword_1A8E81000, v26, OS_LOG_TYPE_DEFAULT, "Notifying app entity observers because of changeType %{public}@ for recurrence rule", buf, 0xCu);
  }
  return v7;
}

uint64_t _CalDatabaseRemoveOrphanedEntities(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if ((result & 1) == 0)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = CPRecordStoreGetContext();
      uint64_t result = CFLog();
      if (Context)
      {
        uint64_t v4 = *(void *)(Context + 24);
        if (CDBLockingAssertionsEnabled)
        {
          if (v4)
          {
            CFIndex v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5) {
              os_unfair_lock_assert_owner(v5 + 20);
            }
          }
        }
        return CPRecordStoreRemoveRecord();
      }
    }
    else
    {
      return CFLog();
    }
  }
  return result;
}

void _CalendarItemSetUnion(void *value, CFMutableSetRef theSet)
{
}

void _CalGatherAddedDetachedItemDetails(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property)
  {
    CFIndex v6 = (const void *)Property;
    double v7 = MEMORY[0x1AD0E87A0]();
    CFStringAppendFormat(*(CFMutableStringRef *)(a2 + 8), 0, @"%f,", *(void *)&v7);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v6);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      CFStringRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
    int valuePtr = CPRecordGetProperty();
    CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), v9);
    CFRelease(v9);
  }
}

uint64_t _CalAnalyzeExistingDetachedItemsAndRemoveIfNeeded(uint64_t a1, uint64_t *a2)
{
  sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  double v5 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  CFArrayRef v6 = (const __CFArray *)a2[2];
  if (v6)
  {
    double v7 = v5;
    CFArrayRef v8 = (const __CFArray *)a2[3];
    uint64_t v19 = *a2;
    uint64_t v20 = *(void *)(*a2 + 24);
    CFIndex Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      for (CFIndex i = 0; i != v10; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
        if (vabdd_f64(MEMORY[0x1AD0E87A0](ValueAtIndex, v13, v14), v7) < 2.22044605e-16)
        {
          CFNumberRef v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v8, i);
          int valuePtr = -1;
          if (CFNumberGetValue(v15, kCFNumberIntType, &valuePtr))
          {
            if (valuePtr == v4)
            {
              CalendarItemWithRowint ID = _CalGetCalendarItemWithRowID(v20);
              if (CalendarItemWithRowID)
              {
                xpc_object_t v17 = (const void *)CalendarItemWithRowID;
                CFLog();
                if (_CalEntityIsOfType(v17, 2))
                {
                  _CalRemoveEvent(v17, 0, 0);
                }
                else if (_CalEntityIsOfType(v17, 3))
                {
                  _CalRemoveTask(v19, v17);
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

id _CalDatabaseCreateXPCArrayOfChangedObjectIDs(const __CFArray *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    xpc_object_t v2 = xpc_array_create(0, 0);
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        int v7 = CalRecordIDGetEntityType((uint64_t)ValueAtIndex);
        int v8 = CalRecordIDGetRowID((uint64_t)ValueAtIndex);
        int v9 = v8;
        if (v7 < 0 || v8 < 0)
        {
          uint64_t v13 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109376;
            int v16 = v7;
            __int16 v17 = 1024;
            int v18 = v9;
            _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Unexpected entity type: %i row ID: %i", buf, 0xEu);
          }
        }
        else
        {
          uint64_t v10 = CalRecordIDGetEntityType((uint64_t)ValueAtIndex);
          int v11 = CalRecordIDGetRowID((uint64_t)ValueAtIndex);
          xpc_object_t v12 = xpc_uint64_create(v11 | (unint64_t)(v10 << 32));
          xpc_array_append_value(v2, v12);
        }
      }
    }
  }
  else
  {
    xpc_object_t v2 = 0;
  }
  return v2;
}

uint64_t _doNothingHandler()
{
  return 0;
}

id _overrideTimezoneName(void *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F578E0];
  id v2 = a1;
  uint64_t v3 = [v2 getValueForPreference:v1 expectedClass:objc_opt_class()];

  return v3;
}

void _CalDatabaseDeleteDatabaseBecauseOfExcessiveFailedMigrationAttempts(void *a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = [v1 stringByAppendingPathComponent:*MEMORY[0x1E4F57870]];
  uint64_t v3 = [v2 stringByAppendingString:@"-wal"];
  uint64_t v4 = [v2 stringByAppendingString:@"-shm"];
  double v5 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (os_variant_has_internal_diagnostics())
  {
    CFArrayRef v6 = [v1 stringByAppendingPathComponent:@"Calendar-unableToMigrate.sqlitedb"];
    int v7 = [v6 stringByAppendingString:@"-wal"];
    if (([v5 fileExistsAtPath:v6] & 1) != 0 || objc_msgSend(v5, "fileExistsAtPath:", v7))
    {
      int v8 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v39 = v6;
        _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_ERROR, "File already exists at path %{public}@; not keeping database.",
          buf,
          0xCu);
      }
    }
    else
    {
      id v35 = 0;
      int v9 = [v5 moveItemAtPath:v2 toPath:v6 error:&v35];
      id v10 = v35;
      int v11 = CDBLogHandle;
      BOOL v12 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 138543362;
          uint64_t v39 = v6;
          _os_log_impl(&dword_1A8E81000, v11, OS_LOG_TYPE_ERROR, "Keeping database that could not be migrated at %{public}@.", buf, 0xCu);
        }
        id v34 = v10;
        char v13 = [v5 moveItemAtPath:v3 toPath:v7 error:&v34];
        id v14 = v34;

        if ((v13 & 1) == 0)
        {
          CFNumberRef v15 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543618;
            uint64_t v39 = v7;
            __int16 v40 = 2112;
            id v41 = v14;
            _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_ERROR, "Unable to move database-wal that failed to migrate to %{public}@: %@", buf, 0x16u);
          }
        }
      }
      else
      {
        if (v12)
        {
          *(_DWORD *)long long buf = 138543618;
          uint64_t v39 = v6;
          __int16 v40 = 2112;
          id v41 = v10;
          _os_log_impl(&dword_1A8E81000, v11, OS_LOG_TYPE_ERROR, "Unable to move database that failed to migrate to %{public}@: %@", buf, 0x16u);
        }
        id v14 = v10;
      }
    }
  }
  int v27 = v2;
  uint64_t v28 = v1;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  v36[0] = v2;
  v36[1] = v3;
  uint64_t v26 = (void *)v3;
  v36[2] = v4;
  int v16 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v36, 3, v4);
  uint64_t v17 = [v16 countByEnumeratingWithState:&v30 objects:v37 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v31 != v19) {
          objc_enumerationMutation(v16);
        }
        CFIndex v21 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        if ([v5 fileExistsAtPath:v21])
        {
          id v29 = 0;
          char v22 = [v5 removeItemAtPath:v21 error:&v29];
          id v23 = v29;
          if ((v22 & 1) == 0)
          {
            CFIndex v24 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543362;
              uint64_t v39 = v21;
              _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_ERROR, "Error removing file at path: %{public}@", buf, 0xCu);
            }
          }
        }
      }
      uint64_t v18 = [v16 countByEnumeratingWithState:&v30 objects:v37 count:16];
    }
    while (v18);
  }
}

uint64_t _CalDatabaseTargetBirthdayMigrationState()
{
  if (_os_feature_enabled_impl()) {
    return 1;
  }
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return 1;
  }
  return result;
}

void _CalDatabaseCleanUpMovedAsideDatabaseFilesInDirectory(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = [a1 stringByAppendingPathComponent:@"Calendar-unableToMigrate.sqlitedb"];
  id v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v3 = [&unk_1EFF7A7B8 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = *(void *)v23;
    *(void *)&long long v4 = 138412290;
    long long v20 = v4;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(&unk_1EFF7A7B8);
        }
        int v8 = objc_msgSend(v1, "stringByAppendingString:", *(void *)(*((void *)&v22 + 1) + 8 * i), v20);
        int v9 = [v2 attributesOfItemAtPath:v8 error:0];
        id v10 = v9;
        if (v9)
        {
          int v11 = [v9 fileModificationDate];
          [v11 timeIntervalSinceNow];
          double v13 = v12;

          if (v13 < -31536000.0)
          {
            id v21 = 0;
            int v14 = [v2 removeItemAtPath:v8 error:&v21];
            id v15 = v21;
            uint64_t v16 = CDBLogHandle;
            if (v14)
            {
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = v20;
                int v27 = v8;
                uint64_t v17 = v16;
                os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
                uint64_t v19 = "Cleaned up moved aside file at path %@";
                goto LABEL_13;
              }
            }
            else if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = v20;
              int v27 = v8;
              uint64_t v17 = v16;
              os_log_type_t v18 = OS_LOG_TYPE_ERROR;
              uint64_t v19 = "Error removing moved aside file at path %@";
LABEL_13:
              _os_log_impl(&dword_1A8E81000, v17, v18, v19, buf, 0xCu);
            }
          }
        }
      }
      uint64_t v5 = [&unk_1EFF7A7B8 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v5);
  }
}

Class __getCalDefaultReminderKitProviderClass_block_invoke(uint64_t a1)
{
  CalendarMigrationLibrary();
  Class result = objc_getClass("CalDefaultReminderKitProvider");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCalDefaultReminderKitProviderClass_block_invoke_cold_1();
  }
  getCalDefaultReminderKitProviderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCalDefaultReminderMigrationDefaultsProviderClass_block_invoke(uint64_t a1)
{
  CalendarMigrationLibrary();
  Class result = objc_getClass("CalDefaultReminderMigrationDefaultsProvider");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCalDefaultReminderMigrationDefaultsProviderClass_block_invoke_cold_1();
  }
  getCalDefaultReminderMigrationDefaultsProviderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

Class __getCalCalendarDatabaseReminderMigratorClass_block_invoke(uint64_t a1)
{
  CalendarMigrationLibrary();
  Class result = objc_getClass("CalCalendarDatabaseReminderMigrator");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCalCalendarDatabaseReminderMigratorClass_block_invoke_cold_1();
  }
  getCalCalendarDatabaseReminderMigratorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void CalDatabaseDeleteFile(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  if ([v2 fileExistsAtPath:v1])
  {
    id v10 = 0;
    char v3 = [v2 removeItemAtPath:v1 error:&v10];
    id v4 = v10;
    uint64_t v5 = CDBLogHandle;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138543362;
        id v12 = v1;
        uint64_t v6 = "Removed %{public}@";
        int v7 = v5;
        os_log_type_t v8 = OS_LOG_TYPE_INFO;
        uint32_t v9 = 12;
LABEL_7:
        _os_log_impl(&dword_1A8E81000, v7, v8, v6, buf, v9);
      }
    }
    else if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      id v12 = v1;
      __int16 v13 = 2112;
      id v14 = v4;
      uint64_t v6 = "Unable to remove %{public}@: %@";
      int v7 = v5;
      os_log_type_t v8 = OS_LOG_TYPE_ERROR;
      uint32_t v9 = 22;
      goto LABEL_7;
    }
  }
}

void ___shouldMigrateChinaTimezones_block_invoke(uint64_t a1)
{
  if ([MEMORY[0x1E4F4BE38] willApplyTimeZoneChanges1])
  {
    id v4 = (id)[MEMORY[0x1E4F1CAD0] setWithArray:&unk_1EFF7A7A0];
    uint64_t v2 = _overrideTimezoneName(*(void **)(a1 + 32));
    char v3 = (void *)v2;
    if (v2) {
      LOBYTE(v2) = [v4 containsObject:v2];
    }
    _shouldMigrateChinaTimezones_shouldMigrate = v2;
  }
}

uint64_t CalScheduledTaskCacheInvalidate(uint64_t result)
{
  *(unsigned char *)(result + 16) = 0;
  return result;
}

void CalScheduledTaskCacheInitializeDB(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 112)
  {
    CalPerformSQLWithConnection(a2, @"CREATE TABLE ScheduledTaskCache (day REAL, date_for_sorting REAL, completed INTEGER, task_id INTEGER, count INTEGER, PRIMARY KEY (day, task_id));");
    CalPerformSQLWithConnection(a2, @"CREATE TRIGGER update_task_cache_count_after_insert AFTER INSERT ON ScheduledTaskCache\nBEGIN\n    REPLACE INTO ScheduledTaskCache VALUES (NEW.day, NULL, NULL, -2, 1 + IFNULL((SELECT count FROM ScheduledTaskCache WHERE day = NEW.day AND task_id = -2), 0));\nEND;\n");
    CalPerformSQLWithConnection(a2, @"CREATE TRIGGER update_task_cache_count_after_update AFTER UPDATE OF day ON ScheduledTaskCache\nBEGIN\n    UPDATE ScheduledTaskCache SET count = count - 1 WHERE day = OLD.day AND task_id = -2;\n    REPLACE INTO ScheduledTaskCache VALUES (NEW.day, NULL, NULL, -2, IFNULL((SELECT count FROM ScheduledTaskCache WHERE day = NEW.day AND task_id = -2), 0));\n    DELETE FROM ScheduledTaskCache WHERE day = OLD.day AND count = 0;\nEND;\n");
    CalPerformSQLWithConnection(a2, @"CREATE TRIGGER update_task_cache_days_after_delete AFTER DELETE ON ScheduledTaskCache\nBEGIN\n    UPDATE ScheduledTaskCache SET count = count - 1 WHERE day = OLD.day AND task_id = -2;\n    DELETE FROM ScheduledTaskCache WHERE day = OLD.day AND count = 0;\nEND;\n");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX ScheduledTaskCacheDayTaskId on ScheduledTaskCache(day);");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX ScheduledTaskCacheTaskId on ScheduledTaskCache(task_id);");
  }
}

uint64_t CalDatabaseCopyScheduledTaskCache(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = _CalDatabaseCopyScheduledTaskCache((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

id CalScheduledTaskCacheCopyAllDaysAndTaskCounts(uint64_t a1)
{
  if (!CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24))) {
    return 0;
  }
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_24;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6) {
        os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  uint64_t v7 = CPSqliteDatabaseStatementForReading();
  if (!v7)
  {
LABEL_24:
    CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
    return 0;
  }
  os_log_type_t v8 = (uint64_t **)v7;
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (CDBLockingAssertionsEnabled)
  {
    if (*v8)
    {
      uint64_t v10 = **v8;
      if (v10)
      {
        if (*(void *)(v10 + 104))
        {
          int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
  }
  if (CPSqliteStatementSendResults() != 101)
  {

    goto LABEL_24;
  }
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  if (v9)
  {
    CFRetain(v9);
  }
  return v9;
}

uint64_t _CopyAllDaysAndTaskCountsResultHandler(uint64_t a1, void *a2)
{
  BOOL v3 = *(sqlite3_stmt **)(a1 + 8);
  id v4 = a2;
  double v5 = (double)sqlite3_column_int(v3, 0);
  uint64_t v6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  uint64_t v7 = (void *)MEMORY[0x1E4F1CA60];
  os_log_type_t v8 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v5];
  id v9 = [NSNumber numberWithInt:v6];
  uint64_t v10 = objc_msgSend(v7, "dictionaryWithObjectsAndKeys:", v8, @"day", v9, @"count", 0);

  [v4 addObject:v10];
  return 0;
}

CFMutableArrayRef CalScheduledTaskCacheCopyTaskRowIDsOnDay(uint64_t a1, double a2)
{
  if (!CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24))) {
    return 0;
  }
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  CFMutableArrayRef Mutable = (CFMutableArrayRef)Database;
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        id v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
    uint64_t v10 = CPSqliteDatabaseStatementForReading();
    if (v10)
    {
      int v11 = (uint64_t **)v10;
      sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 1, (int)a2);
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, 0);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          uint64_t v12 = **v11;
          if (v12)
          {
            if (*(void *)(v12 + 104))
            {
              __int16 v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v13) {
                os_unfair_lock_assert_owner(v13 + 20);
              }
            }
          }
        }
      }
      if (CPSqliteStatementSendResults() == 101) {
        goto LABEL_23;
      }
      CFRelease(Mutable);
    }
    CFMutableArrayRef Mutable = 0;
  }
LABEL_23:
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  return Mutable;
}

uint64_t _CopyTaskRowIDsOnDayResultHandler(uint64_t a1, __CFArray *a2)
{
  int v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(a2, (const void *)v3);
  return 0;
}

CFMutableArrayRef CalScheduledTaskCacheCopyTaskRowIDsOnRange(uint64_t a1, double a2, double a3)
{
  if (!CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24))) {
    return 0;
  }
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = RecordStore == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    uint64_t v11 = CPSqliteDatabaseStatementForReading();
    if (v11)
    {
      uint64_t v12 = v11;
      sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 1, (int)a2);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 2, (int)a3);
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v12)
        {
          uint64_t v14 = **(void **)v12;
          if (v14)
          {
            if (*(void *)(v14 + 104))
            {
              uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15) {
                os_unfair_lock_assert_owner(v15 + 20);
              }
            }
          }
        }
      }
      if (CPSqliteStatementSendResults() == 101) {
        goto LABEL_23;
      }
      CFRelease(Mutable);
    }
  }
  CFMutableArrayRef Mutable = 0;
LABEL_23:
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  return Mutable;
}

uint64_t _CopyTaskRowIDsOnRangeResultHandler(uint64_t a1, __CFArray *a2)
{
  int v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  id v4 = (const void *)CalRecordIDCreate(3, v3);
  CFArrayAppendValue(a2, v4);
  CFRelease(v4);
  return 0;
}

uint64_t CalScheduledTaskCacheUpdateIfNeededForTimeZoneChange(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) && CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
  {
    Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
    if (CDBLockingAssertionsEnabled) {
      BOOL v3 = RecordStore == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    CFStringRef v5 = (const __CFString *)CPRecordStoreCopyValueForProperty();
    CFAbsoluteTimeGetCurrent();
    CFStringRef v6 = (const __CFString *)CalCFTimeZoneCopyCalTimeZone();
    CFStringRef v7 = v6;
    if (v5)
    {
      CFComparisonResult v8 = CFStringCompare(v5, v6, 0);
      CFRelease(v7);
      CFRelease(v5);
      if (v8 == kCFCompareEqualTo)
      {
        uint64_t v9 = 0;
LABEL_80:
        CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
        return v9;
      }
    }
    else
    {
      CFRelease(v6);
    }
    uint64_t v10 = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
    if (CDBLockingAssertionsEnabled)
    {
      if (v10)
      {
        uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          __int16 v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13) {
            os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
      uint64_t v14 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v14)
      {
        uint64_t v15 = v14;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v14)
          {
            if (*(void *)(*(void *)v14 + 104))
            {
              uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16) {
                os_unfair_lock_assert_owner(v16 + 20);
              }
            }
          }
        }
        int v17 = CPSqliteConnectionBeginTransactionType();
        if (!v17 || v17 == 101)
        {
          uint64_t v18 = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
          if (CDBLockingAssertionsEnabled)
          {
            if (v18)
            {
              uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v19) {
                os_unfair_lock_assert_owner(v19 + 20);
              }
            }
          }
          long long v20 = (void *)CPRecordStoreCopyValueForProperty();
          if (v20)
          {
            id v21 = (void *)[objc_alloc(MEMORY[0x1E4F1CAF0]) initWithName:v20];
            long long v22 = (void *)CalCopyTimeZone();
            if (v21 && ([v21 isEquivalentTo:v22] & 1) != 0)
            {
LABEL_73:
              if (CDBLockingAssertionsEnabled)
              {
                if (*(void *)v15)
                {
                  if (*(void *)(*(void *)v15 + 104))
                  {
                    int v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v37) {
                      os_unfair_lock_assert_owner(v37 + 20);
                    }
                  }
                }
              }
              CPSqliteConnectionCommit();

              goto LABEL_79;
            }
          }
          else
          {
            long long v22 = (void *)CalCopyTimeZone();
            id v21 = 0;
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v15)
            {
              if (*(void *)(*(void *)v15 + 104))
              {
                long long v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v23) {
                  os_unfair_lock_assert_owner(v23 + 20);
                }
              }
            }
          }
          uint64_t v24 = CPSqliteConnectionStatementForSQL();
          if (v24)
          {
            long long v25 = (uint64_t **)v24;
            CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
            int v27 = objc_alloc_init(CalScheduledTaskCache_TimeZoneFetchContext);
            [(CalScheduledTaskCache_TimeZoneFetchContext *)v27 setPreviousTimeZone:v21];
            [(CalScheduledTaskCache_TimeZoneFetchContext *)v27 setNextTimeZone:v22];
            [(CalScheduledTaskCache_TimeZoneFetchContext *)v27 setDict:Mutable];
            if (CDBLockingAssertionsEnabled)
            {
              if (*v25)
              {
                uint64_t v28 = **v25;
                if (v28)
                {
                  if (*(void *)(v28 + 104))
                  {
                    uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v29) {
                      os_unfair_lock_assert_owner(v29 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementSendResults();
            if (CDBLockingAssertionsEnabled)
            {
              if (*v25)
              {
                uint64_t v30 = **v25;
                if (v30)
                {
                  if (*(void *)(v30 + 104))
                  {
                    long long v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v31) {
                      os_unfair_lock_assert_owner(v31 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementReset();
            if (CDBLockingAssertionsEnabled)
            {
              if (*(void *)v15)
              {
                if (*(void *)(*(void *)v15 + 104))
                {
                  long long v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v32) {
                    os_unfair_lock_assert_owner(v32 + 20);
                  }
                }
              }
            }
            long long v33 = (void *)CPSqliteConnectionStatementForSQL();
            CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)_UpdateDay, v33);
            CFRelease(Mutable);
          }
          CFAbsoluteTimeGetCurrent();
          id v34 = (const void *)CalCFTimeZoneCopyCalTimeZone();
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v15)
            {
              if (*(void *)(*(void *)v15 + 104))
              {
                id v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v35) {
                  os_unfair_lock_assert_owner(v35 + 20);
                }
              }
            }
          }
          CPSqliteConnectionSetValueForProperty();
          CFRelease(v34);
          CFStringRef v36 = *(const void **)(a1 + 32);
          if (v36) {
            CFRelease(v36);
          }
          *(void *)(a1 + 32) = CFRetain(v22);
          goto LABEL_73;
        }
        CFLog();
      }
    }
LABEL_79:
    uint64_t v9 = 1;
    goto LABEL_80;
  }
  return 0;
}

BOOL CalScheduledTaskCacheRebuildIfNeeded(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16) || !CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24))) {
    return 0;
  }
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_51;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6) {
        os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  uint64_t v7 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (v7)
  {
    uint64_t v8 = v7;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v7)
      {
        if (*(void *)(*(void *)v7 + 104))
        {
          uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    BOOL v10 = 0;
    if (CPSqliteConnectionIntegerForPropertyWithDefaultValue() != 1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v8)
        {
          if (*(void *)(*(void *)v8 + 104))
          {
            uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11) {
              os_unfair_lock_assert_owner(v11 + 20);
            }
          }
        }
      }
      int v12 = CPSqliteConnectionBeginTransactionType();
      BOOL v10 = v12 == 101 || v12 == 0;
      if (v12 && v12 != 101)
      {
        CFLog();
      }
      else
      {
        _RebuildCache(a1, v8);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v8)
          {
            if (*(void *)(*(void *)v8 + 104))
            {
              uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14) {
                os_unfair_lock_assert_owner(v14 + 20);
              }
            }
          }
        }
        CPSqliteConnectionSetIntegerForProperty();
        CFAbsoluteTimeGetCurrent();
        uint64_t v15 = (const void *)CalCFTimeZoneCopyCalTimeZone();
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v8)
          {
            if (*(void *)(*(void *)v8 + 104))
            {
              uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16) {
                os_unfair_lock_assert_owner(v16 + 20);
              }
            }
          }
        }
        CPSqliteConnectionSetValueForProperty();
        CFRelease(v15);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v8)
          {
            if (*(void *)(*(void *)v8 + 104))
            {
              int v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17) {
                os_unfair_lock_assert_owner(v17 + 20);
              }
            }
          }
        }
        CPSqliteConnectionCommit();
      }
    }
  }
  else
  {
LABEL_51:
    BOOL v10 = 0;
  }
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  return v10;
}

void _RebuildCache(uint64_t a1, uint64_t a2)
{
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPSqliteConnectionPerformSQL();
  CFArrayRef v5 = (const __CFArray *)_CalDatabaseCopyScheduledTasks(*(void *)(a1 + 24));
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFIndex Count = CFArrayGetCount(v5);
    uint64_t v11 = 0;
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      for (CFIndex i = 0; i != v8; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
        _CalScheduledTaskCacheInsertTaskIfScheduled(a1, a2, &v11, (uint64_t)ValueAtIndex);
      }
    }
    CFRelease(v6);
  }
}

void CalScheduledTaskCacheTrimAndExtendAndUpdateOverdue(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16) || !CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24))) {
    return;
  }
  NSLog(&cfstr_25534103Beginn.isa);
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    CFArrayRef v6 = (const void *)Database;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
    uint64_t v8 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (v8)
    {
      uint64_t v9 = (sqlite3 **)v8;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v8)
        {
          if (*(void *)(*(void *)v8 + 104))
          {
            BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
      int v11 = CPSqliteConnectionBeginTransactionType();
      if (!v11 || v11 == 101)
      {
        int v12 = (void *)MEMORY[0x1E4F57838];
        __int16 v13 = [MEMORY[0x1E4F1C9C8] date];
        uint64_t v14 = [MEMORY[0x1E4F1CAF0] systemTimeZone];
        uint64_t v15 = [v12 calendarDateWithDate:v13 timeZone:v14];
        uint64_t v16 = [v15 calendarDateForDay];

        if (CDBLockingAssertionsEnabled)
        {
          if (*v9)
          {
            if (*((void *)*v9 + 13))
            {
              int v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17) {
                os_unfair_lock_assert_owner(v17 + 20);
              }
            }
          }
        }
        CFStringRef v18 = (const __CFString *)CPSqliteConnectionCopyValueForProperty();
        NSLog(&cfstr_25534103Schedu.isa, v18);
        if (v18)
        {
          IntCFSetRef Value = (double)CFStringGetIntValue(v18);
          long long v20 = (void *)MEMORY[0x1E4F57838];
          id v21 = [MEMORY[0x1E4F1CAF0] systemTimeZone];
          long long v22 = [v20 calendarDateWithAbsoluteTime:v21 timeZone:IntValue];

          uint64_t v23 = [v22 compare:v16];
          CFRelease(v18);

          NSLog(&cfstr_25534103TodayI.isa, v16, v23);
          if (v23 != 1)
          {
            if (v23 == -1)
            {
              uint64_t v24 = objc_opt_new();
              [v24 setYear:-1];
              long long v25 = [v16 calendarDateByAddingComponents:v24];
              [v16 absoluteTime];
              double v27 = v26;
              [v25 absoluteTime];
              if (*v9)
              {
                char v29 = _CalScheduledTaskCacheTrimAndExtendCore(a1, (uint64_t)v9, v28, v27, IntValue);
                BOOL updated = _CalScheduledTaskCacheUpdateOverdueCore(v9, v27);

                if ((v29 & 1) != 0 || updated) {
                  goto LABEL_40;
                }
              }
              else
              {
              }
            }
            char v32 = 1;
LABEL_43:
            if (CDBLockingAssertionsEnabled)
            {
              if (*v9)
              {
                if (*((void *)*v9 + 13))
                {
                  long long v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v33) {
                    os_unfair_lock_assert_owner(v33 + 20);
                  }
                }
              }
            }
            CPSqliteConnectionCommit();

            CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
            if ((v32 & 1) == 0)
            {
              DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
              CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kCalScheduledTaskCacheChangedNotification", v6, 0, 1u);
            }
            return;
          }
        }
        else
        {
          NSLog(&cfstr_25534103TodayI.isa, v16, 1);
        }
        _RebuildCache(a1, (uint64_t)v9);
LABEL_40:
        _CalScheduledTaskCacheUpdateLastSavedDate(a1, (uint64_t)v9);
        char v32 = 0;
        goto LABEL_43;
      }
      CFLog();
    }
  }
  long long v31 = *(const os_unfair_lock **)(a1 + 24);
  CalDatabaseUnlockForThread(v31);
}

uint64_t _CalScheduledTaskCacheTrimAndExtendCore(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF) {
    NSLog(&cfstr_EventkitstcErr.isa);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
  }
  uint64_t v12 = CPSqliteConnectionStatementForSQL();
  if (v12)
  {
    __int16 v13 = (uint64_t **)v12;
    sqlite3_bind_double(*(sqlite3_stmt **)(v12 + 8), 1, a3);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v14 = **v13;
        if (v14)
        {
          if (*(void *)(v14 + 104))
          {
            uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15) {
              os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    uint64_t v16 = sqlite3_changes((sqlite3 *)(*v13)[1]) > 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v17 = **v13;
        if (v17)
        {
          if (*(void *)(v17 + 104))
          {
            CFStringRef v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18) {
              os_unfair_lock_assert_owner(v18 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v19 = [MEMORY[0x1E4F57838] calendarDateWithAbsoluteTime:*(void *)(a1 + 32) timeZone:a4];
  long long v20 = [MEMORY[0x1E4F57838] calendarDateWithAbsoluteTime:*(void *)(a1 + 32) timeZone:a5];
  id v21 = objc_opt_new();
  [v21 setYear:2];
  long long v22 = [v19 calendarDateByAddingComponents:v21];
  id v41 = v20;
  uint64_t v23 = [v20 calendarDateByAddingComponents:v21];
  __int16 v40 = v22;
  [v22 absoluteTime];
  double v25 = v24;
  uint64_t v39 = v23;
  [v23 absoluteTime];
  double v26 = objc_msgSend(MEMORY[0x1E4F57838], "calendarDateWithAbsoluteTime:timeZone:", *(void *)(a1 + 32));
  double v27 = [MEMORY[0x1E4F57838] calendarDateWithAbsoluteTime:*(void *)(a1 + 32) timeZone:v25];
  double v28 = [v26 calendarDateInTimeZone:0];
  char v29 = [v27 calendarDateInTimeZone:0];
  [v28 absoluteTime];
  [v29 absoluteTime];
  CFArrayRef v30 = (const __CFArray *)_CalDatabaseCopyScheduledTasksInDateRange(*(void *)(a1 + 24));
  if (v30)
  {
    CFArrayRef v31 = v30;
    int v37 = v19;
    unsigned int v38 = v16;
    CFIndex Count = CFArrayGetCount(v30);
    if (Count >= 1)
    {
      CFIndex v33 = Count;
      for (CFIndex i = 0; i != v33; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v31, i);
        uint64_t v42 = 0;
        _CalScheduledTaskCacheInsertTaskIfScheduled(a1, a2, &v42, (uint64_t)ValueAtIndex);
      }
    }
    CFRelease(v31);
    uint64_t v16 = v38;
    uint64_t v19 = v37;
  }

  if (v16) {
    _CalScheduledTaskCacheUpdateLastSavedDate(a1, a2);
  }

  return v16;
}

BOOL _CalScheduledTaskCacheUpdateOverdueCore(sqlite3 **a1, double a2)
{
  NSLog(&cfstr_25534103Updati.isa, *(void *)&a2);
  if (CDBLockingAssertionsEnabled)
  {
    if (*a1)
    {
      if (*((void *)*a1 + 13))
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef v5 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  sqlite3_bind_double((sqlite3_stmt *)v5[1], 1, a2);
  sqlite3_bind_double((sqlite3_stmt *)v5[1], 2, a2);
  sqlite3_bind_double((sqlite3_stmt *)v5[1], 3, a2);
  if (v5)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v5)
      {
        uint64_t v6 = **v5;
        if (v6)
        {
          if (*(void *)(v6 + 104))
          {
            uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
    }
  }
  int v8 = CPSqliteStatementPerform();
  if (v8 != 101 && v8) {
    return 0;
  }
  BOOL v9 = sqlite3_changes(a1[1]) > 0;
  if (v5)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v5)
      {
        uint64_t v10 = **v5;
        if (v10)
        {
          if (*(void *)(v10 + 104))
          {
            int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11) {
              os_unfair_lock_assert_owner(v11 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  return v9;
}

void _CalScheduledTaskCacheUpdateLastSavedDate(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTimeGetCurrent();
  CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
  CalGregorianDateGetGregorianDateForDay();
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"%d", (int)v3);
  NSLog(&cfstr_25534103Updati_0.isa, v4);
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPSqliteConnectionSetValueForProperty();
  CFRelease(v4);
}

double CalSchedueldTaskCacheGetLastSavedDate(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFStringRef v4 = (const __CFString *)CPRecordStoreCopyValueForProperty();
  if (!v4) {
    return 0.0;
  }
  CFStringRef v5 = v4;
  IntCFSetRef Value = (double)CFStringGetIntValue(v4);
  CFRelease(v5);
  return IntValue;
}

void _CalScheduledTaskCacheMarkTaskForUpdate(uint64_t a1, void *value)
{
  if (*(unsigned char *)(a1 + 16))
  {
    CFSetRef v4 = *(const __CFSet **)(a1 + 56);
    if (!v4 || !CFSetContainsValue(v4, value))
    {
      if ((int)CPRecordGetID() >= 1)
      {
        int ID = CPRecordGetID();
        uint64_t v6 = *(__CFDictionary **)(a1 + 40);
        if (v6) {
          CFDictionaryRemoveValue(v6, value);
        }
        if (ID >= 1)
        {
          CFDictionaryRef Mutable = *(__CFSet **)(a1 + 48);
          if (!Mutable)
          {
            CFDictionaryRef Mutable = CFSetCreateMutable(0, 0, 0);
            *(void *)(a1 + 48) = Mutable;
          }
          CFSetAddValue(Mutable, (const void *)ID);
        }
      }
      int v8 = *(__CFSet **)(a1 + 56);
      if (v8)
      {
        CFSetAddValue(v8, value);
      }
    }
  }
}

CFMutableSetRef _CalScheduledTaskCacheBeginTrackingUpdates(CFMutableSetRef result)
{
  if (!*((void *)result + 7))
  {
    CFMutableSetRef v1 = result;
    Class result = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
    *((void *)v1 + 7) = result;
  }
  return result;
}

void _CalScheduledTaskCacheStopTrackingUpdates(void *context)
{
  CFSetRef v2 = (const __CFSet *)*((void *)context + 7);
  if (v2)
  {
    CFSetApplyFunction(v2, (CFSetApplierFunction)_GenerateDates, context);
    CFRelease(*((CFTypeRef *)context + 7));
    *((void *)context + 7) = 0;
  }
}

void _GenerateDates(const void *a1, uint64_t a2)
{
  Duedouble Date = _CalTaskGetDueDate((uint64_t)a1);
  Completiondouble Date = _CalTaskGetCompletionDate((uint64_t)a1);
  if (DueDate | CompletionDate)
  {
    uint64_t v6 = (const void *)CompletionDate;
    CFDictionaryRef Mutable = *(__CFDictionary **)(a2 + 40);
    if (!Mutable)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(a2 + 40) = Mutable;
    }
    if (v6) {
      int v8 = v6;
    }
    else {
      int v8 = (const void *)DueDate;
    }
    CFDictionarySetValue(Mutable, a1, v8);
  }
}

void _CalScheduledTaskCacheRevert(uint64_t a1)
{
  CFSetRef v2 = *(__CFDictionary **)(a1 + 40);
  if (v2) {
    CFDictionaryRemoveAllValues(v2);
  }
  double v3 = *(__CFSet **)(a1 + 48);
  if (v3)
  {
    CFSetRemoveAllValues(v3);
  }
}

void _CalScheduledTaskCacheSave(uint64_t a1, uint64_t a2)
{
  CFSetRef v4 = *(const __CFSet **)(a1 + 48);
  if (v4 && CFSetGetCount(v4) >= 1)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            CFStringRef v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5) {
              os_unfair_lock_assert_owner(v5 + 20);
            }
          }
        }
      }
    }
    uint64_t v6 = (void *)CPSqliteConnectionStatementForSQL();
    if (v6) {
      CFSetApplyFunction(*(CFSetRef *)(a1 + 48), (CFSetApplierFunction)_CalScheduledTaskCacheProcessDeletes, v6);
    }
    CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 48));
  }
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v9) {
      os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  uint64_t v10 = (const void *)CPRecordStoreCopyValueForProperty();
  if (!v10)
  {
    CFAbsoluteTimeGetCurrent();
    uint64_t v11 = CalCFTimeZoneCopyCalTimeZone();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12) {
              os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
    uint64_t v10 = (const void *)v11;
  }
  CFRelease(v10);
  CFDictionaryRef v13 = *(const __CFDictionary **)(a1 + 40);
  if (v13 && CFDictionaryGetCount(v13) >= 1)
  {
    CFTypeRef cf = 0;
    uint64_t v16 = 0;
    context[0] = a1;
    context[1] = &v16;
    context[2] = a2;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)_CalScheduledTaskCacheProcessAdds, context);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 40));
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t _CalScheduledTaskCacheProcessDeletes(int a1, uint64_t **a2)
{
  sqlite3_bind_int((sqlite3_stmt *)a2[1], 1, a1);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        uint64_t v3 = **a2;
        if (v3)
        {
          if (*(void *)(v3 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        uint64_t v5 = **a2;
        if (v5)
        {
          if (*(void *)(v5 + 104))
          {
            uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
    }
  }
  return CPSqliteStatementReset();
}

void _CalScheduledTaskCacheProcessAdds(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t CalScheduledTaskCacheRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  __CalScheduledTaskCacheTypeint ID = result;
  return result;
}

void CalScheduledTaskCacheDestroy(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFSetRef v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  CFSetRef v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
  }
}

BOOL CalScheduledTaskCacheEqual(void *a1, void *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  return v4 == CFGetTypeID(a2) && a1[3] == a2[3] && a1[4] == a2[4];
}

uint64_t _CalScheduledTaskCacheProcessRecordForTimeZoneChange(uint64_t a1, void *a2)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(sqlite3_stmt **)(a1 + 8);
  id v4 = a2;
  sqlite3_column_double(v3, 0);
  sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 1);
  uint64_t v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
  uint64_t v6 = [v4 previousTimeZone];
  uint64_t v7 = [v4 nextTimeZone];
  CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
  double v9 = v8;

  uint64_t v10 = [v4 previousTimeZone];
  uint64_t v11 = [v4 nextTimeZone];
  CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
  double v13 = v12;

  v20[0] = @"day";
  uint64_t v14 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v9];
  v21[0] = v14;
  v20[1] = @"dateForSorting";
  uint64_t v15 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v13];
  v21[1] = v15;
  v20[2] = @"taskId";
  uint64_t v16 = [NSNumber numberWithInt:v5];
  uint64_t v21[2] = v16;
  uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:3];

  CFStringRef v18 = [v4 dict];
  CFDictionaryAddValue(v18, (const void *)(int)v5, v17);

  return 0;
}

void _UpdateDay(uint64_t a1, void *a2, uint64_t **a3)
{
  id v4 = a2;
  id v15 = [v4 objectForKeyedSubscript:@"day"];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"dateForSorting"];
  uint64_t v6 = [v4 objectForKeyedSubscript:@"taskId"];

  uint64_t v7 = (sqlite3_stmt *)a3[1];
  [v15 timeIntervalSinceReferenceDate];
  sqlite3_bind_double(v7, 1, v8);
  double v9 = (sqlite3_stmt *)a3[1];
  [v5 timeIntervalSinceReferenceDate];
  sqlite3_bind_double(v9, 2, v10);
  sqlite3_bind_int((sqlite3_stmt *)a3[1], 3, [v6 intValue]);
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a3)
      {
        uint64_t v11 = **a3;
        if (v11)
        {
          if (*(void *)(v11 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a3)
      {
        uint64_t v13 = **a3;
        if (v13)
        {
          if (*(void *)(v13 + 104))
          {
            uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
}

void _CalScheduledTaskCacheInsertTaskIfScheduled(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  Duedouble Date = _CalTaskGetDueDate(a4);
  Completiondouble Date = _CalTaskGetCompletionDate(a4);
  if (DueDate | CompletionDate)
  {
    uint64_t v10 = CompletionDate;
    int ID = CPRecordGetID();
    BOOL IsDueDateAllDay = _CalTaskIsDueDateAllDay(a4);
    if (v10)
    {
      CFTypeRef v13 = CFRetain(*(CFTypeRef *)(a1 + 32));
      Duedouble Date = v10;
    }
    else
    {
      if (IsDueDateAllDay)
      {
        uint64_t started = (uint64_t)CFTimeZoneCreateWithName(0, @"GMT", 1u);
      }
      else
      {
        uint64_t started = _CalCalendarItemCopyStartTimeZone(a4);
        if (!started) {
          uint64_t started = (uint64_t)CFRetain(*(CFTypeRef *)(a1 + 32));
        }
      }
      CFTypeRef v13 = (CFTypeRef)started;
    }
    id v39 = [MEMORY[0x1E4F57838] calendarDateWithDate:DueDate timeZone:v13];
    id v15 = [v39 calendarDateInTimeZone:*(void *)(a1 + 32)];
    uint64_t v16 = [v15 calendarDateForDay];
    if (!v10)
    {
      int v37 = ID;
      unsigned int v38 = v15;
      uint64_t v17 = (void *)MEMORY[0x1E4F57838];
      CFStringRef v18 = [MEMORY[0x1E4F1C9C8] date];
      uint64_t v19 = [MEMORY[0x1E4F1CAF0] systemTimeZone];
      long long v20 = [v17 calendarDateWithDate:v18 timeZone:v19];
      id v21 = [v20 calendarDateInTimeZone:*(void *)(a1 + 32)];
      long long v22 = [v21 calendarDateForDay];

      if ([v16 compare:v22] == -1)
      {
        id v23 = v22;

        uint64_t v16 = v23;
      }
      id v15 = v38;
      int ID = v37;
    }
    [v16 absoluteTime];
    double v25 = v24;
    [v15 absoluteTime];
    double v27 = v26;
    if (v13) {
      CFRelease(v13);
    }
    if (!v10) {
      NSLog(&cfstr_25534103Insert.isa, v39, v16);
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF) {
      NSLog(&cfstr_EventkitstcErr.isa);
    }
    uint64_t v29 = *a3;
    if (*a3) {
      goto LABEL_34;
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            CFArrayRef v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v30) {
              os_unfair_lock_assert_owner(v30 + 20);
            }
          }
        }
      }
    }
    uint64_t v29 = CPSqliteConnectionStatementForSQL();
    *a3 = v29;
    if (v29)
    {
LABEL_34:
      sqlite3_bind_double(*(sqlite3_stmt **)(v29 + 8), 1, v25);
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 2, v27);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 3, v10 != 0);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 4, ID);
      CFArrayRef v31 = (uint64_t **)*a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (v31)
        {
          if (*v31)
          {
            uint64_t v32 = **v31;
            if (v32)
            {
              if (*(void *)(v32 + 104))
              {
                CFIndex v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v33) {
                  os_unfair_lock_assert_owner(v33 + 20);
                }
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      id v34 = (uint64_t **)*a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (v34)
        {
          if (*v34)
          {
            uint64_t v35 = **v34;
            if (v35)
            {
              if (*(void *)(v35 + 104))
              {
                CFStringRef v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v36) {
                  os_unfair_lock_assert_owner(v36 + 20);
                }
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
  }
}

void _CalRecurrencePrepareForSave(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if ((int)CPRecordGetIntegerProperty() >= 2)
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4) {
            os_unfair_lock_assert_owner(v4 + 20);
          }
        }
      }
    }
    CFArrayRef Property = (const __CFArray *)CPRecordGetProperty();
    if (Property)
    {
      CFArrayRef v6 = Property;
      if (CFArrayGetCount(Property) >= 1)
      {
        CFIndex Count = CFArrayGetCount(v6);
        chars[0] = 68;
        if (CFStringGetLength(Mutable) >= 1) {
          CFStringAppendCString(Mutable, ";", 0x8000100u);
        }
        CFStringAppendCharacters(Mutable, chars, 1);
        CFStringAppendCString(Mutable, "=", 0x8000100u);
        if (Count >= 1)
        {
          CFIndex v8 = 0;
          uint64_t v9 = MEMORY[0x1E4F57890];
          do
          {
            int ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(v6, v8);
            if (v8) {
              CFStringRef v11 = @",%s%d%s";
            }
            else {
              CFStringRef v11 = @"%s%d%s";
            }
            if ((int)*ValueAtIndex <= 0) {
              double v12 = "";
            }
            else {
              double v12 = "+";
            }
            CFStringAppendFormat(Mutable, 0, v11, v12, *ValueAtIndex, *(void *)(v9 + 8 * ValueAtIndex[1]));
            ++v8;
          }
          while (Count != v8);
        }
      }
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFTypeRef v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13) {
            os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
    CFArrayRef v14 = (const __CFArray *)CPRecordGetProperty();
    if (v14)
    {
      CFArrayRef v15 = v14;
      if (CFArrayGetCount(v14) >= 1) {
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v15, 11);
      }
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16) {
            os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    CFArrayRef v17 = (const __CFArray *)CPRecordGetProperty();
    if (v17)
    {
      CFArrayRef v18 = v17;
      if (CFArrayGetCount(v17) >= 1) {
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v18, 12);
      }
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19) {
            os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
    }
    CFArrayRef v20 = (const __CFArray *)CPRecordGetProperty();
    if (v20)
    {
      CFArrayRef v21 = v20;
      if (CFArrayGetCount(v20) >= 1) {
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v21, 13);
      }
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          long long v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v22) {
            os_unfair_lock_assert_owner(v22 + 20);
          }
        }
      }
    }
    CFArrayRef v23 = (const __CFArray *)CPRecordGetProperty();
    if (v23)
    {
      CFArrayRef v24 = v23;
      if (CFArrayGetCount(v23) >= 1) {
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v24, 14);
      }
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          double v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v25) {
            os_unfair_lock_assert_owner(v25 + 20);
          }
        }
      }
    }
    CFArrayRef v26 = (const __CFArray *)CPRecordGetProperty();
    if (v26)
    {
      CFArrayRef v27 = v26;
      if (CFArrayGetCount(v26) >= 1) {
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v27, 15);
      }
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          double v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v28) {
            os_unfair_lock_assert_owner(v28 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  uint64_t v30 = CPRecordGetProperty();
  uint64_t v31 = v30;
  if (v30) {
    CalRelationOwnerWillSave(v30);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32) {
          os_unfair_lock_assert_owner(v32 + 20);
        }
      }
    }
  }
  if (!CPRecordGetProperty())
  {
    if (v31) {
      CFTypeRef RelatedObject = CalRelationGetRelatedObject(v31);
    }
    else {
      CFTypeRef RelatedObject = 0;
    }
    id v34 = (id)CDBLogHandle;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef DebugDescription = _CalEntityGetDebugDescription(RelatedObject);
      *(_DWORD *)chars = 134218242;
      uint64_t v42 = v31;
      __int16 v43 = 2112;
      CFTypeRef v44 = DebugDescription;
      _os_log_impl(&dword_1A8E81000, v34, OS_LOG_TYPE_ERROR, "saving a recurrence with owner_id 0: relation=%p, owner=%@", (uint8_t *)chars, 0x16u);
    }

    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    _CalDatabaseIntegrityError(DatabaseForRecord, @"Recurrence without owner");
  }
  _CalRecurrenceGenerateCachedEndDate(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37) {
          os_unfair_lock_assert_owner(v37 + 20);
        }
      }
    }
  }
  if (CPRecordGetIntegerProperty() != -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          unsigned int v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v38) {
            os_unfair_lock_assert_owner(v38 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
  }
  CFTypeRef Owner = (void *)_CalRecurrenceGetOwner(a1, 0);
  if (Owner)
  {
    __int16 v40 = Owner;
    if (_CalEntityIsOfType(Owner, 2)) {
      _CalEventUpdateOccurrenceCache(v40);
    }
  }
}

uint64_t _CalRecurrencePropertyDidChange(uint64_t result, int a2)
{
  if (a2 == 7)
  {
    uint64_t v3 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordUnloadProperty();
    if (v3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5) {
            os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
    CPRecordUnloadProperty();
    if (v3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFArrayRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    CPRecordUnloadProperty();
    if (v3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7) {
            os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    CPRecordUnloadProperty();
    if (v3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFIndex v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
    CPRecordUnloadProperty();
    if (v3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    CPRecordUnloadProperty();
    if (v3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    return CPRecordUnloadProperty();
  }
  return result;
}

uint64_t _CalRecurrencePropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (a2 > 5)
  {
    if (a2 != 6)
    {
      if (a2 != 16) {
        goto LABEL_62;
      }
      int v5 = a3;
      if (a3 == -1)
      {
        if (result)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context) {
                os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
        }
        CPRecordGetProperty();
        if (v4)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v7) {
                os_unfair_lock_assert_owner(v7 + 20);
              }
            }
          }
        }
        CPRecordGetProperty();
        if (v4)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              CFIndex v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v8) {
                os_unfair_lock_assert_owner(v8 + 20);
              }
            }
          }
        }
        if (CPRecordGetProperty() != -1)
        {
          if (v4)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v9) {
                  os_unfair_lock_assert_owner(v9 + 20);
                }
              }
            }
          }
          CPRecordInitializeProperty();
        }
      }
      uint64_t Owner = _CalRecurrenceGetOwner(v4, 0);
      uint64_t result = CPRecordGetID();
      BOOL v11 = result == v5;
      if (Owner)
      {
LABEL_63:
        uint64_t result = _CalEntityIsNew(Owner);
        if (((result | v11) & 1) == 0)
        {
          return _CalEventMarkAsModifiedForChangeTracking(Owner);
        }
        return result;
      }
      return result;
    }
  }
  else
  {
    if ((a2 - 4) < 2) {
      return result;
    }
    if (a2 != 3)
    {
LABEL_62:
      uint64_t result = _CalRecurrenceGetOwner(v4, 0);
      uint64_t Owner = result;
      BOOL v11 = 0;
      if (!result) {
        return result;
      }
      goto LABEL_63;
    }
  }
  if (result)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        double v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (a2 != 3 && Property) {
    goto LABEL_70;
  }
  if (v4)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
LABEL_70:
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFArrayRef v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15) {
            os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16) {
            os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFArrayRef v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17) {
            os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordSetProperty();
  }
  if ((a2 & 0xFFFFFFFE) != 4) {
    goto LABEL_62;
  }
  return result;
}

void CalRecurrenceInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalRecurrenceClass, (const char **)&kCalRecurrenceIndexes, (const char **)&kCalRecurrenceChangesIndexes);
}

void CalRecurrenceMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 <= 18001)
  {
    CalMigrateTableFull(a2, (const char **)&kCalRecurrenceClass, 0, (const char **)&kCalRecurrenceUpgradeInfo, (const char **)&kCalRecurrenceChangesUpgradeInfo, (const char **)&kCalRecurrenceIndexes, (const char **)&kCalRecurrenceChangesIndexes, 0, a3);
    if (a3 > 48)
    {
      if (a3 > 0x34) {
        return;
      }
    }
    else
    {
      CalPerformSQLWithConnection(a2, @"UPDATE Recurrence SET end_date = NULL WHERE end_date = 0");
      CalPerformSQLWithConnection(a2, @"UPDATE Recurrence SET cached_end_date = NULL WHERE cached_end_date = 0");
    }
    _CalDBFillInUUIDColumn((uint64_t)a2, @"Recurrence");
  }
}

uint64_t _CalRecurrenceHasValidParent(uint64_t a1)
{
  uint64_t result = _CalRecurrenceGetOwner(a1, 0);
  if (result)
  {
    return _CalRecordStillExists();
  }
  return result;
}

void _CalRecurrenceCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

const void *_CalDatabaseCreateRecurrence(uint64_t a1)
{
  uint64_t v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 5);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v2 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = v2 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      BOOL v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v2)
    {
      if (CPRecordGetStore())
      {
        double v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFUUIDRef v13 = CFUUIDCreate(0);
  CFStringRef v14 = CFUUIDCreateString(0, v13);
  if (CDBLockingAssertionsEnabled)
  {
    if (v2)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v13);
  CFRelease(v14);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateRecurrence(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recurrence = _CalDatabaseCreateRecurrence((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Recurrence;
}

uint64_t CalDatabaseCopyOfAllRecurrencesInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    Uint ID = CalStoreGetUID();
    if (v2)
    {
      int v4 = UID;
      os_unfair_lock_lock(v2 + 20);
      Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v2);
      uint64_t v6 = RecordStore;
      if (CDBLockingAssertionsEnabled) {
        BOOL v7 = RecordStore == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (!Database) {
        goto LABEL_30;
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
      uint64_t v11 = CPSqliteDatabaseStatementForReading();
      if (v11)
      {
        sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 1, v4);
        if (CDBLockingAssertionsEnabled)
        {
          if (v6)
          {
            double v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12) {
              os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
        uint64_t v13 = CPRecordStoreProcessStatement();
      }
      else
      {
LABEL_30:
        uint64_t v13 = 0;
      }
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(v2 + 20);
      }
      os_unfair_lock_unlock(v2 + 20);
      CFRelease(v2);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    CFArrayRef v15 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    uint64_t v16 = _CalDatabaseGetRecordStore((uint64_t)a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      CFArrayRef v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v18) {
        os_unfair_lock_assert_owner(v18 + 20);
      }
    }
    uint64_t v13 = CPRecordStoreCopyAllInstancesOfClass();
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v15);
    }
    os_unfair_lock_unlock(v15);
  }
  return v13;
}

const void *_CalRecurrenceCopy(uint64_t a1, uint64_t a2)
{
  Recurrence = _CalDatabaseCreateRecurrence(a1);
  int v4 = Recurrence;
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = Recurrence == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      double v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        long long v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23) {
          os_unfair_lock_assert_owner(v23 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        double v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25) {
          os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26) {
          os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        double v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28) {
          os_unfair_lock_assert_owner(v28 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30) {
          os_unfair_lock_assert_owner(v30 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31) {
          os_unfair_lock_assert_owner(v31 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32) {
          os_unfair_lock_assert_owner(v32 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFIndex v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33) {
          os_unfair_lock_assert_owner(v33 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        id v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v34) {
          os_unfair_lock_assert_owner(v34 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  return v4;
}

uint64_t _CalRecurrencePrepareForRemove(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetIntegerProperty();
  if (result != -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4) {
            os_unfair_lock_assert_owner(v4 + 20);
          }
        }
      }
    }
    return CPRecordInitializeProperty();
  }
  return result;
}

void _CalRemoveRecurrence(void *a1)
{
  uint64_t Owner = _CalRecurrenceGetOwner((uint64_t)a1, 0);
  if (Owner)
  {
    _CalCalendarItemRemoveRecurrence(Owner, a1, 0);
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

void CalRemoveRecurrence(void *a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveRecurrence(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalInvalidateRecurrencesWithOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalRecurrenceGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalRecurrenceGetUID()
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

const void *CalDatabaseCopyRecurrenceWithUID(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  int v4 = (const void *)_CalRecurrenceGetWithUID(RecordStore);
  BOOL v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalRecurrenceCopyUUID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalDatabaseCopyRecurrenceWithUUID(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"UUID = '%@'", a2);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = RecordStore == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v9 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhere();
  if (v9)
  {
    CFArrayRef v10 = v9;
    if (CFArrayGetCount(v9) < 1)
    {
      CFTypeRef v12 = 0;
    }
    else
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(v10, 0);
      CFTypeRef v12 = CFRetain(ValueAtIndex);
    }
    CFRelease(v10);
  }
  else
  {
    CFTypeRef v12 = 0;
  }
  CFRelease(v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v12;
}

void CalRecurrenceClearExternalProperties(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v5) {
          os_unfair_lock_assert_owner(v5 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalRecurrenceSetExternalID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyExternalID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

const void *CalDatabaseCopyRecurrenceWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  if (a3)
  {
    CFStringRef v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5) {
      return 0;
    }
  }
  else
  {
    CFStringRef v5 = a1;
    CFRetain(a1);
    if (!v5) {
      return 0;
    }
  }
  if (!a2 || (CStringFromCFString = CalCreateCStringFromCFString(a2)) == 0)
  {
    CFRelease(v5);
    return 0;
  }
  BOOL v7 = CStringFromCFString;
  CFStringRef SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
  {
    free(v7);
    CFRelease(v5);
    return 0;
  }
  CFArrayRef v9 = SelectPrefix;
  CFStringAppend(SelectPrefix, @" WHERE external_id = ?");
  os_unfair_lock_lock(v5 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v5);
  uint64_t v11 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(void *)(Database + 104))
      {
        CFStringRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  uint64_t v15 = CPSqliteDatabaseStatementForReading();
  if (v15)
  {
    sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, (const char *)v7, -1, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
    CFArrayRef v17 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
    CFArrayRef v17 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v9);
  free(v7);
  if (v17)
  {
    CFIndex Count = CFArrayGetCount(v17);
    if (a3) {
      int ID = CPRecordGetID();
    }
    else {
      int ID = -1;
    }
    if (Count < 1)
    {
      CFArrayRef v18 = 0;
    }
    else
    {
      uint64_t v22 = 1;
      do
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v17, v22 - 1);
        CFArrayRef v18 = ValueAtIndex;
        if (!a3) {
          goto LABEL_46;
        }
        if (CDBLockingAssertionsEnabled && ValueAtIndex != 0)
        {
          if (CPRecordGetStore())
          {
            double v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v25) {
              os_unfair_lock_assert_owner(v25 + 20);
            }
          }
        }
        if (ID != CPRecordGetIntegerProperty())
        {
          CFArrayRef v18 = 0;
        }
        else
        {
LABEL_46:
          CFRetain(v18);
          if (v18) {
            break;
          }
        }
      }
      while (v22++ < Count);
    }
    CFRelease(v17);
  }
  else
  {
    CFArrayRef v18 = 0;
  }
  CFRelease(v5);
  return v18;
}

void CalRecurrenceSetExternalModificationTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyExternalModificationTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalRecurrenceSetExternalIdentificationTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyExternalIdentificationTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalRecurrenceSetExternalRepresentation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyExternalRepresentation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalRecurrenceSetFrequency(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetFrequency(a1) != a2) {
    _CalRecurrenceSetProperty(a1, 0, a2, 1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceGetFrequency(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void _CalRecurrenceSetProperty(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (vabdd_f64(_CalRecordGetDateProperty(a1), *MEMORY[0x1E4F57888]) >= 2.22044605e-16)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7) {
            os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
  }
  uint64_t Owner = _CalRecurrenceGetOwner(a1, 0);
  uint64_t v10 = Owner;
  if (a4 && Owner)
  {
    _CalCalendarItemRemoveAllExceptionDates(Owner);
  }
  else if (!Owner)
  {
    return;
  }
  _CalEventUpdateLastModifiedDate(v10);
}

uint64_t CalRecurrenceGetFrequency(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Frequency = _CalRecurrenceGetFrequency(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Frequency;
}

void CalRecurrenceSetInterval(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetInterval(a1) != a2) {
    _CalRecurrenceSetProperty(a1, 1, a2, 1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceGetInterval(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetIntegerProperty();
}

uint64_t CalRecurrenceGetInterval(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Interval = _CalRecurrenceGetInterval(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Interval;
}

void CalRecurrenceSetWeekStart(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetWeekStartRaw(a1) != a2) {
    _CalRecurrenceSetProperty(a1, 2, a2, 1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceGetWeekStart(uint64_t a1)
{
  LODWORD(result) = _CalRecurrenceGetWeekStartRaw(a1);
  if (result == 7) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t CalRecurrenceGetWeekStart(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  LODWORD(a1) = _CalRecurrenceGetWeekStartRaw(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  if (a1 == 7) {
    a1 = 1;
  }
  else {
    a1 = a1;
  }
  os_unfair_lock_unlock(RecordLock);
  return a1;
}

uint64_t CalRecurrenceGetWeekStartDirectly(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalRecurrenceSetCount(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetCount(a1) != a2)
  {
    _CalRecurrenceSetProperty(a1, 3, a2, 0);
    _CalRecurrenceSetProperty(a1, 6, 0, 0);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceGetCount(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Count = _CalRecurrenceGetCount(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Count;
}

void CalRecurrenceInvalidateCachedEndDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecurrenceSetCachedEndDate(a1, *MEMORY[0x1E4F57888]);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalRecurrenceSetCachedEndDate(uint64_t a1, uint64_t a2)
{
  uint64_t Store = CPRecordGetStore();
  if (Store && CPRecordStoreIsLoggingChanges())
  {
    CPRecordStoreLogChanges();
    char v5 = 0;
  }
  else
  {
    char v5 = 1;
  }
  CFDateRefFromCaldouble Date = _CreateCFDateRefFromCalDate(*(CFAbsoluteTime *)&a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CFDateRefFromCalDate) {
    CFRelease(CFDateRefFromCalDate);
  }
  if (Store) {
    char v9 = v5;
  }
  else {
    char v9 = 1;
  }
  if ((v9 & 1) == 0)
  {
    CPRecordStoreLogChanges();
  }
}

void _CalRecurrenceSetEndDate(uint64_t a1, CFAbsoluteTime a2)
{
  CFDateRefFromCaldouble Date = _CreateCFDateRefFromCalDate(a2);
  _CalRecurrenceSetProperty(a1, 6, (uint64_t)CFDateRefFromCalDate, 0);
  _CalRecurrenceSetProperty(a1, 3, 0, 0);
  if (CFDateRefFromCalDate)
  {
    CFRelease(CFDateRefFromCalDate);
  }
}

void CalRecurrenceSetEndDate(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (vabdd_f64(_CalRecordGetDateProperty(a1), a2) >= 2.22044605e-16) {
    _CalRecurrenceSetEndDate(a1, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double _CalRecurrenceGetEndDate(uint64_t a1)
{
  return _CalRecordGetDateProperty(a1);
}

double CalRecurrenceGetEndDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalRecurrenceSetByDayDays(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v5 = _CalRecurrenceCopyByDayDays(a1);
  if (a2 | v5 && ([(id)v5 isEqual:a2] & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 9, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceCopyByDayDays(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t _CalRecurrenceSpecifierIncrementChangeCount(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetIntegerProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3) {
          os_unfair_lock_assert_owner(v3 + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalRecurrenceCopyByDayDays(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalRecurrenceCopyByDayDays(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetByMonth(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecurrenceSetProperty(a1, 15, a2, 1);
  _CalRecurrenceSpecifierIncrementChangeCount(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyByMonth(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalRecurrenceCopyByMonth(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalRecurrenceCopyByMonth(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalRecurrenceSetByMonthMonths(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    uint64_t v5 = 0;
    CFMutableStringRef Mutable = 0;
    do
    {
      if ((a2 >> v5))
      {
        if (!Mutable) {
          CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, 0);
        }
        CFArrayAppendValue(Mutable, (const void *)++v5);
      }
      else
      {
        ++v5;
      }
    }
    while (v5 != 12);
    uint64_t v7 = _CalRecurrenceCopyByMonth(a1);
    BOOL v8 = (void *)v7;
    if (v7 | (unint64_t)Mutable)
    {
      if (([(id)v7 isEqual:Mutable] & 1) == 0)
      {
        _CalRecurrenceSetProperty(a1, 15, (uint64_t)Mutable, 1);
        _CalRecurrenceSpecifierIncrementChangeCount(a1);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty())
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceGetByMonthMonths(uint64_t a1)
{
  CFArrayRef v2 = (const __CFArray *)_CalRecurrenceCopyByMonth(a1);
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2) < 1)
    {
      uint64_t v5 = 0;
    }
    else
    {
      CFIndex v4 = 0;
      LODWORD(v5) = 0;
      do
        uint64_t v5 = (1 << (CFArrayGetValueAtIndex(v3, v4++) - 1)) | v5;
      while (CFArrayGetCount(v3) > v4);
    }
    CFRelease(v3);
    return v5;
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return CPRecordGetIntegerProperty();
  }
}

uint64_t CalRecurrenceGetByMonthMonths(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalRecurrenceGetByMonthMonths(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetByMonthDayDays(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v5 = _CalRecurrenceCopyByMonthDayDays(a1);
  if (a2 | v5 && ([(id)v5 isEqual:a2] & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 11, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceCopyByMonthDayDays(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalRecurrenceCopyByMonthDayDays(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalRecurrenceCopyByMonthDayDays(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetByWeekWeeks(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v5 = _CalRecurrenceCopyByWeekWeeks(a1);
  if (a2 | v5 && ([(id)v5 isEqual:a2] & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 12, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceCopyByWeekWeeks(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalRecurrenceCopyByWeekWeeks(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalRecurrenceCopyByWeekWeeks(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetByYearDayDays(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v5 = _CalRecurrenceCopyByYearDayDays(a1);
  if (a2 | v5 && ([(id)v5 isEqual:a2] & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 13, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceCopyByYearDayDays(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalRecurrenceCopyByYearDayDays(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalRecurrenceCopyByYearDayDays(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetBySetPos(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v5 = _CalRecurrenceCopyBySetPos(a1);
  if (a2 | v5 && ([(id)v5 isEqual:a2] & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 14, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceCopyBySetPos(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalRecurrenceCopyBySetPos(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalRecurrenceCopyBySetPos(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetOwner(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalRelationSetRelatedObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalRecurrenceIsSimpleYearly(uint64_t a1)
{
  if (_CalRecurrenceGetFrequency(a1) != 4 || _CalRecurrenceGetInterval(a1) != 1) {
    return 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty()) {
    return 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3) {
          os_unfair_lock_assert_owner(v3 + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty()) {
    return 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFIndex v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty()) {
    return 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v5) {
          os_unfair_lock_assert_owner(v5 + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty()) {
    return 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty()) {
    return 0;
  }
  if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
  {
    uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v7) {
      os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  return !CPRecordGetProperty();
}

uint64_t _CalRecurrenceSaveAddedRecords(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t CalDatabaseCopyRecurrenceChangesInStore(os_unfair_lock_s *cf, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    uint64_t v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v5 = cf;
    if (!cf) {
      return 0xFFFFFFFFLL;
    }
    CFRetain(cf);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalRecurrenceCopyChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyRecurrenceChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7;
}

CFStringRef _CalRecurrenceCopyChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFStringRef v7 = 0;
  if (a2)
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    CFTypeRef v4 = _CalDatabaseCopyClientIdentifier(DatabaseForRecord);
    uint64_t ID = CPRecordGetID();
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v4, v4, 5, v4);
    CFRelease(v4);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v7);
  return v7;
}

uint64_t _CalDatabaseCopyRecurrenceChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseRemoveRecurrenceChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  if (a2)
  {
    uint64_t v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    uint64_t v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = __CalDatabaseRemoveRecurrenceChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E5D61B08;
  v8[4] = &v10;
  v8[5] = v5;
  v8[6] = a2;
  int v9 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1A8EAC40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveRecurrenceChangesInStoreToIndex_block_invoke(void *a1)
{
  uint64_t result = _CalDatabaseRemoveRecurrenceChangesInStoreToIndex(a1[5], a1[6]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t _CalDatabaseRemoveRecurrenceChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = _CalRecurrenceCopyChangeHistoryWhereClauseForStore(a1, a2);
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

uint64_t CalDatabaseCopyRecurrenceChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalRecurrenceCopyChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyRecurrenceChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

CFStringRef _CalRecurrenceCopyChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFStringRef v7 = 0;
  if (a2)
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    CFTypeRef v4 = _CalDatabaseCopyClientIdentifier(DatabaseForRecord);
    uint64_t ID = CPRecordGetID();
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v4, v4, 5, v4);
    CFRelease(v4);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v7);
  return v7;
}

uint64_t CalDatabaseRemoveRecurrenceChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalRecurrenceCopyChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveRecurrenceChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E5D61B08;
  v9[4] = &v11;
  v9[5] = v5;
  int v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A8EAC77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveRecurrenceChangesInCalendarToIndex_block_invoke(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassToIndexWhere();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseRemoveRecurrenceChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  CFTypeRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = __CalDatabaseRemoveRecurrenceChangesWithIndices_block_invoke;
  v7[3] = &unk_1E5D61B30;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A8EAC8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveRecurrenceChangesWithIndices_block_invoke(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassWithIndices();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL _CalRecurrenceShouldPinMonthDays(uint64_t a1)
{
  uint64_t Owner = _CalRecurrenceGetOwner(a1, 0);
  if (!Owner) {
    return 0;
  }
  CFTypeRef Calendar = _CalCalendarItemGetCalendar(Owner);
  if (!Calendar) {
    return 0;
  }
  CFTypeRef Store = _CalCalendarGetStore((uint64_t)Calendar);
  if (!Store) {
    return 0;
  }
  return _CalStoreAreRecurrencesPinnedToMonthDays((uint64_t)Store);
}

uint64_t _CalDatabasePrepareRecurrencesInStoreForMigration(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t ID = CPRecordGetID();
  uint64_t result = _CalDatabaseRemoveRecurrenceChangesInStoreToIndex(a1, a3);
  if (result)
  {
    uint64_t result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE Recurrence SET external_id = NULL, external_mod_tag = NULL, external_id_tag = NULL, external_rep = NULL WHERE owner_id IN (SELECT CalendarItem.ROWID FROM CalendarItem JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = %d);",
                        ID);
    if (result)
    {
      uint64_t v8 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v8);
      return 1;
    }
  }
  return result;
}

uint64_t _CalRecurrenceSpecifierParse(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  if (!Property) {
    goto LABEL_233;
  }
  CFStringRef v4 = Property;
  CFIndex Length = CFStringGetLength(Property);
  if (Length < 1) {
    goto LABEL_233;
  }
  CFIndex v6 = Length;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v93 = 0u;
  CFStringRef theString = v4;
  uint64_t v103 = 0;
  CFIndex v104 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v4);
  CStringPtr = 0;
  uint64_t v101 = (UniChar *)CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v4, 0x600u);
  }
  CFIndex v9 = 0;
  UniChar v10 = 0;
  LODWORD(v11) = 0;
  int v12 = 0;
  int64_t v105 = 0;
  int64_t v106 = 0;
  int v102 = CStringPtr;
  CFIndex v90 = v6;
  uint64_t v89 = v1;
  do
  {
    if ((v11 & 0x80000000) != 0 || (CFIndex v13 = v104, v104 <= v9))
    {
      UniChar v16 = 0;
      goto LABEL_17;
    }
    char v14 = v101;
    if (v101)
    {
      CFIndex v15 = v103 + v9;
    }
    else
    {
      if (v102)
      {
        UniChar v16 = v102[v103 + v9];
        goto LABEL_23;
      }
      if (v106 <= v9 || (int64_t v23 = v105, v105 > v9))
      {
        int64_t v24 = v9 - 4;
        if (v11 < 4) {
          int64_t v24 = 0;
        }
        if (v24 + 64 < v104) {
          CFIndex v13 = v24 + 64;
        }
        int64_t v105 = v24;
        int64_t v106 = v13;
        v109.id location = v103 + v24;
        v109.length = v13 - v24;
        CFStringGetCharacters(theString, v109, buffer);
        int64_t v23 = v105;
      }
      CFIndex v15 = v9 - v23;
      char v14 = buffer;
    }
    UniChar v16 = v14[v15];
LABEL_23:
    if (v16 != 61) {
      goto LABEL_17;
    }
    if (v11 - v12 != 1 && (int)v11 - v12 < 3) {
      UniChar v10 = 0;
    }
    uint64_t v18 = (v11 + 1);
    if (v6 <= v18)
    {
      UniChar v16 = 61;
      LODWORD(v11) = v11 + 1;
      goto LABEL_60;
    }
    CFIndex v11 = (v11 + 1);
    while (1)
    {
      CFIndex v19 = v104;
      if (v104 > v11) {
        break;
      }
      UniChar v16 = 0;
LABEL_48:
      if (v6 <= ++v11) {
        goto LABEL_60;
      }
    }
    if (v101)
    {
      UniChar v16 = v101[v11 + v103];
    }
    else if (v102)
    {
      UniChar v16 = v102[v103 + v11];
    }
    else
    {
      int64_t v20 = v105;
      if (v106 <= v11 || v105 > v11)
      {
        int64_t v22 = v11 - 4;
        if ((v11 & 0xFFFFFFFC) == 0) {
          int64_t v22 = 0;
        }
        if (v22 + 64 < v104) {
          CFIndex v19 = v22 + 64;
        }
        int64_t v105 = v22;
        int64_t v106 = v19;
        v108.id location = v103 + v22;
        v108.length = v19 - v22;
        CFStringGetCharacters(theString, v108, buffer);
        int64_t v20 = v105;
      }
      UniChar v16 = buffer[v11 - v20];
    }
    if (v16 != 59) {
      goto LABEL_48;
    }
    UniChar v16 = 59;
LABEL_60:
    if (v10 > 0x52u)
    {
      if (v10 != 83 && v10 != 89 && v10 != 87) {
        goto LABEL_232;
      }
LABEL_165:
      if ((int)v11 - (int)v18 < 1)
      {
        CFMutableDictionaryRef Mutable = 0;
        if (v1) {
          goto LABEL_226;
        }
      }
      else
      {
        int v62 = 0;
        int v63 = 0;
        CFMutableDictionaryRef Mutable = 0;
        int64_t v64 = v18 + (int)v11 - (int)v18;
        while (2)
        {
          CFMutableArrayRef theArray = Mutable;
          char v65 = 0;
          uint64_t v66 = -v18;
          uint64_t v67 = v18 + 64;
          int64_t v68 = v18;
          while (1)
          {
            if ((unint64_t)v68 >= 4) {
              uint64_t v69 = 4;
            }
            else {
              uint64_t v69 = v68;
            }
            if (v18 < 0 || (CFIndex v70 = v104, v104 <= v68))
            {
              UniChar v71 = 0;
LABEL_190:
              unsigned int v77 = v71;
              uint64_t v78 = 1 << v71;
              BOOL v79 = (v78 & 0x280100000000) == 0;
              if ((v78 & 0x280100000000) != 0) {
                int v80 = v63 | (v77 == 45);
              }
              else {
                int v80 = 0;
              }
              if (v79) {
                int v81 = 0;
              }
              else {
                int v81 = v62;
              }
              if (v77 <= 0x2D)
              {
                int v82 = v81;
              }
              else
              {
                int v80 = 0;
                int v82 = 0;
              }
              if (v65) {
                int v63 = 0;
              }
              else {
                int v63 = v80;
              }
              if (v65) {
                int v62 = 0;
              }
              else {
                int v62 = v82;
              }
              CFMutableDictionaryRef Mutable = theArray;
              goto LABEL_212;
            }
            if (v101)
            {
              UniChar v71 = v101[v68 + v103];
            }
            else if (v102)
            {
              UniChar v71 = v102[v103 + v68];
            }
            else
            {
              if (v106 <= v68 || (int64_t v72 = v105, v105 > v68))
              {
                uint64_t v73 = v69 + v66;
                CFIndex v74 = v67 - v69;
                int64_t v75 = v68 - v69;
                CFIndex v76 = v75 + 64;
                if (v75 + 64 >= v104) {
                  CFIndex v76 = v104;
                }
                int64_t v105 = v75;
                int64_t v106 = v76;
                if (v104 >= v74) {
                  CFIndex v70 = v74;
                }
                v113.length = v70 + v73;
                v113.id location = v75 + v103;
                CFStringGetCharacters(theString, v113, buffer);
                int64_t v72 = v105;
              }
              UniChar v71 = buffer[v68 - v72];
            }
            if (v71 == 44 && (v65 & 1) != 0) {
              break;
            }
            if ((unsigned __int16)(v71 - 48) >= 0xAu) {
              goto LABEL_190;
            }
            int v62 = v71 + 10 * v62 - 48;
            ++v68;
            --v66;
            ++v67;
            char v65 = 1;
            if (v68 >= v64)
            {
              if (v63) {
                int v85 = -v62;
              }
              else {
                int v85 = v62;
              }
              CFMutableDictionaryRef Mutable = theArray;
              if (!theArray) {
                CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, 0);
              }
              CFArrayAppendValue(Mutable, (const void *)v85);
              uint64_t v1 = v89;
              goto LABEL_220;
            }
          }
          if (v63) {
            int v83 = -v62;
          }
          else {
            int v83 = v62;
          }
          uint64_t v84 = theArray;
          if (!theArray) {
            uint64_t v84 = CFArrayCreateMutable(0, 0, 0);
          }
          CFArrayAppendValue(v84, (const void *)v83);
          int v63 = 0;
          int v62 = 0;
          CFMutableDictionaryRef Mutable = v84;
LABEL_212:
          uint64_t v18 = v68 + 1;
          if (v68 + 1 < v64) {
            continue;
          }
          break;
        }
        uint64_t v1 = v89;
LABEL_220:
        CFIndex v6 = v90;
        if (!v1) {
          goto LABEL_230;
        }
LABEL_226:
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            char v86 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v86) {
              os_unfair_lock_assert_owner(v86 + 20);
            }
          }
        }
      }
LABEL_230:
      CPRecordInitializeProperty();
      if (Mutable) {
        CFRelease(Mutable);
      }
      goto LABEL_232;
    }
    if (v10 == 68)
    {
      unint64_t value = 0xFFFFFFFF00000000;
      if ((int)v11 - (int)v18 < 1)
      {
        CFMutableDictionaryRef Mutable = 0;
LABEL_225:
        uint64_t v1 = v89;
        if (!v89) {
          goto LABEL_230;
        }
        goto LABEL_226;
      }
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v26 = 0;
      char v27 = 0;
      char v28 = 0;
      uint64_t v29 = v18 + (int)v11 - (int)v18;
      uint64_t v30 = (int)v18 - (uint64_t)(int)v11 - v18;
      uint64_t v31 = v29;
      while (2)
      {
        if (v18 < 0 || (CFIndex v32 = v104, v104 <= v18))
        {
          UniChar v35 = 0;
        }
        else
        {
          CFIndex v33 = v101;
          if (v101)
          {
            uint64_t v34 = v103 + v18;
            goto LABEL_75;
          }
          if (v102)
          {
            UniChar v35 = v102[v103 + v18];
          }
          else
          {
            if (v106 <= v18 || (int64_t v42 = v105, v105 > v18))
            {
              uint64_t v43 = v18 - 4;
              if ((unint64_t)v18 < 4) {
                uint64_t v43 = 0;
              }
              if (v43 + 64 < v104) {
                CFIndex v32 = v43 + 64;
              }
              int64_t v105 = v43;
              int64_t v106 = v32;
              v110.id location = v103 + v43;
              v110.length = v32 - v43;
              uint64_t v44 = v26;
              CFStringGetCharacters(theString, v110, buffer);
              uint64_t v26 = v44;
              uint64_t v29 = v31;
              int64_t v42 = v105;
            }
            uint64_t v34 = v18 - v42;
            CFIndex v33 = buffer;
LABEL_75:
            UniChar v35 = v33[v34];
          }
          if ((unsigned __int16)(v35 - 48) <= 9u)
          {
            uint64_t v26 = 10 * v26 + v35 - 48;
            char v27 = 1;
            goto LABEL_163;
          }
        }
        if ((v27 & 1) == 0 && v35 <= 0x2Du && ((1 << v35) & 0x280100000000) != 0)
        {
          char v27 = 0;
          v28 |= v35 == 45;
          goto LABEL_163;
        }
        uint64_t v36 = v18 + 1;
        if (v18 < -1) {
          goto LABEL_131;
        }
        if (v36 >= v29) {
          goto LABEL_131;
        }
        CFIndex v37 = v104;
        if (v104 <= v36) {
          goto LABEL_131;
        }
        unsigned int v38 = v101;
        if (v101)
        {
          uint64_t v39 = v103 + v36;
          goto LABEL_83;
        }
        if (v102)
        {
          UniChar v40 = v102[v103 + v36];
        }
        else
        {
          if (v106 <= v36 || (int64_t v45 = v105, v105 > v36))
          {
            uint64_t v46 = v18 - 3;
            if ((unint64_t)v36 < 4) {
              uint64_t v46 = 0;
            }
            if (v46 + 64 < v104) {
              CFIndex v37 = v46 + 64;
            }
            int64_t v105 = v46;
            int64_t v106 = v37;
            v111.id location = v103 + v46;
            v111.length = v37 - v46;
            int v47 = v26;
            CFStringGetCharacters(theString, v111, buffer);
            LODWORD(v26) = v47;
            uint64_t v29 = v31;
            int64_t v45 = v105;
          }
          uint64_t v39 = v36 - v45;
          unsigned int v38 = buffer;
LABEL_83:
          UniChar v40 = v38[v39];
        }
        if (v35 == 77 && v40 == 79)
        {
          int v41 = 1;
          goto LABEL_130;
        }
        if (v35 == 84 && v40 == 85)
        {
          int v41 = 2;
          goto LABEL_130;
        }
        if (v35 == 87 && v40 == 69)
        {
          int v41 = 3;
          goto LABEL_130;
        }
        if (v35 == 84 && v40 == 72)
        {
          int v41 = 4;
          goto LABEL_130;
        }
        if (v35 == 70 && v40 == 82)
        {
          int v41 = 5;
          goto LABEL_130;
        }
        if (v35 == 83 && v40 == 65)
        {
          int v41 = 6;
          goto LABEL_130;
        }
        if (v35 == 83 && v40 == 85)
        {
          int v41 = 0;
LABEL_130:
          HIDWORD(CFSetAddValue(theSet, value) = v41;
LABEL_132:
          if (v28) {
            int v48 = -(int)v26;
          }
          else {
            int v48 = v26;
          }
          LODWORD(CFSetAddValue(theSet, value) = v48;
          if (!Mutable) {
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F578A0]);
          }
          CFArrayAppendValue(Mutable, &value);
          uint64_t v29 = v31;
        }
        else
        {
LABEL_131:
          if (HIDWORD(value) != -1) {
            goto LABEL_132;
          }
        }
        if (v36 < v29)
        {
          id v49 = Mutable;
          uint64_t v50 = ~v18;
          uint64_t v51 = v18 + 65;
          while (1)
          {
            uint64_t v52 = v18 + 1;
            uint64_t v53 = (unint64_t)v36 >= 4 ? 4 : v36;
            if ((v52 & 0x8000000000000000) == 0)
            {
              CFIndex v54 = v104;
              if (v104 > v52)
              {
                if (v101)
                {
                  UniChar v55 = v101[v18 + 1 + v103];
                }
                else if (v102)
                {
                  UniChar v55 = v102[v103 + 1 + v18];
                }
                else
                {
                  if (v106 <= v52 || (int64_t v56 = v105, v105 > v52))
                  {
                    uint64_t v57 = v53 + v50;
                    CFIndex v58 = v51 - v53;
                    uint64_t v59 = v18 - v53;
                    int64_t v60 = v59 + 1;
                    CFIndex v61 = v59 + 65;
                    if (v61 >= v104) {
                      CFIndex v61 = v104;
                    }
                    int64_t v105 = v60;
                    int64_t v106 = v61;
                    if (v104 >= v58) {
                      CFIndex v54 = v58;
                    }
                    v112.length = v54 + v57;
                    v112.id location = v60 + v103;
                    CFStringGetCharacters(theString, v112, buffer);
                    uint64_t v29 = v31;
                    int64_t v56 = v105;
                  }
                  UniChar v55 = buffer[v18 + 1 - v56];
                }
                if (v55 == 44) {
                  break;
                }
              }
            }
            ++v36;
            --v50;
            ++v51;
            ++v18;
            if (v30 + v52 == -1)
            {
              uint64_t v36 = v29;
              goto LABEL_161;
            }
          }
          uint64_t v36 = v18 + 1;
LABEL_161:
          CFMutableDictionaryRef Mutable = v49;
        }
        char v28 = 0;
        char v27 = 0;
        uint64_t v26 = 0;
        unint64_t value = 0xFFFFFFFF00000000;
        uint64_t v18 = v36;
        CFIndex v6 = v90;
LABEL_163:
        if (++v18 >= v29) {
          goto LABEL_225;
        }
        continue;
      }
    }
    if (v10 == 77 || v10 == 79) {
      goto LABEL_165;
    }
LABEL_232:
    UniChar v10 = 0;
    int v12 = v11 + 1;
LABEL_17:
    LODWORD(v11) = v11 + 1;
    if (((v11 - v12) | 2) == 3) {
      UniChar v10 = v16;
    }
    CFIndex v9 = (int)v11;
  }
  while (v6 > (int)v11);
LABEL_233:
  if (v1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v87 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v87) {
          os_unfair_lock_assert_owner(v87 + 20);
        }
      }
    }
  }
  return CPRecordInitializeProperty();
}

uint64_t _CalRecurrenceSpecifierDerivedLoad(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalRecurrenceLoadStoreId(uint64_t a1)
{
  uint64_t result = _CalRecurrenceGetOwner(a1, 1);
  if (result)
  {
    _CalCalendarItemGetStoreId(result);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return CPRecordInitializeProperty();
  }
  return result;
}

uint64_t _CalRecurrenceLoadCalendarId(uint64_t a1)
{
  uint64_t result = _CalRecurrenceGetOwner(a1, 1);
  if (result)
  {
    uint64_t result = (uint64_t)_CalCalendarItemGetCalendar(result);
    if (result)
    {
      CPRecordGetID();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      return CPRecordInitializeProperty();
    }
  }
  return result;
}

void _CalRecurrenceAppendIndexListForSubproperty(__CFString *a1, CFArrayRef theArray, int a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  UniChar chars = _CalRecurrenceSubpropertyNameForProperty___SubpropertyNames[a3 - 11];
  if (CFStringGetLength(a1) >= 1) {
    CFStringAppendCString(a1, ";", 0x8000100u);
  }
  CFStringAppendCharacters(a1, &chars, 1);
  CFStringAppendCString(a1, "=", 0x8000100u);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (i) {
        CFStringAppendFormat(a1, 0, @",%d", ValueAtIndex);
      }
      else {
        CFStringAppendFormat(a1, 0, @"%d", ValueAtIndex);
      }
    }
  }
}

uint64_t ICSStatusFromCalCalendarItemStatus(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 5) {
    return dword_1A8F7E258[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalEventStatus: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalCalendarItemStatusFromICSStatus(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  switch((int)a1)
  {
    case 0:
      return v1;
    case 1:
      uint64_t v1 = 2;
      break;
    case 2:
      uint64_t v1 = 1;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      BOOL v2 = CDBiCalendarConversionHandle;
      if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_5;
      }
      int v5 = 67109120;
      int v6 = v1;
      BOOL v3 = "Encountered an unhandled ICSStatus: %d";
      goto LABEL_4;
    case 8:
      uint64_t v1 = 3;
      break;
    default:
      BOOL v2 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        int v5 = 67109120;
        int v6 = v1;
        BOOL v3 = "Encountered an unknown ICSStatus: %d";
LABEL_4:
        _os_log_impl(&dword_1A8E81000, v2, OS_LOG_TYPE_DEBUG, v3, (uint8_t *)&v5, 8u);
      }
LABEL_5:
      uint64_t v1 = 0;
      break;
  }
  return v1;
}

uint64_t ICSCalendarServerAccessFromCalEventPrivacyLevel(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 4) {
    return dword_1A8F7E360[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalEventPrivacyLevel: %d", (uint8_t *)v4, 8u);
  }
  return 1;
}

uint64_t CalEventPrivacyLevelFromICSCalendarServerAccess(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 5) {
    return dword_1A8F7E26C[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSCalendarServerAccess: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t ICSActionFromCalAlarmType(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 5) {
    return dword_1A8F7E280[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalAlarmType: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAlarmTypeFromICSAction(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 5) {
    return dword_1A8F7E294[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSAction: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAlarmProximityFromICSProximityString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:*MEMORY[0x1E4FB8328]])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:*MEMORY[0x1E4FB8338]])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:*MEMORY[0x1E4FB8330]])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:*MEMORY[0x1E4FB8340]])
  {
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id ICSProximityStringFromCalAlarmProximity(int a1)
{
  if ((a1 - 1) > 3)
  {
    id v2 = 0;
  }
  else
  {
    id v2 = **((id **)&unk_1E5D61B80 + a1 - 1);
  }
  return v2;
}

uint64_t ICSFrequencyFromCalRecurrenceFrequency(int a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (a1 - 1);
  if (v1 < 4) {
    return v1 + 4;
  }
  CFStringRef v4 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    v5[0] = 67109120;
    v5[1] = a1;
    _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_DEBUG, "Encountered an unknown calendar frequency: %d", (uint8_t *)v5, 8u);
  }
  return 4;
}

uint64_t CalRecurrenceFrequencyFromICSFrequency(uint64_t a1)
{
  int v1 = a1;
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 - 1;
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
      CFStringRef v4 = CDBiCalendarConversionHandle;
      if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_7;
      }
      int v6 = 67109120;
      int v7 = v1;
      uint64_t v5 = "Encountered an ICS frequency that the calendar database doesn't handle: %d. Defaulting to daily";
      goto LABEL_6;
    case 3:
      return result;
    case 4:
      uint64_t result = 2;
      break;
    case 5:
      uint64_t result = 3;
      break;
    case 6:
      uint64_t result = 4;
      break;
    default:
      CFStringRef v4 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 67109120;
        int v7 = v1;
        uint64_t v5 = "Encountered an unknown ICS frequency: %d";
LABEL_6:
        _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_DEBUG, v5, (uint8_t *)&v6, 8u);
      }
LABEL_7:
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t ICSWeekdayFromCalDayOfWeek(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 7) {
    return a1 + 1;
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalDayOfWeek: %d", (uint8_t *)v4, 8u);
  }
  return 1;
}

unint64_t CalDayOfWeekFromICSWeekday(uint64_t a1)
{
  int v1 = a1;
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unint64_t result = a1 - 1;
  if (result >= 7)
  {
    BOOL v3 = CDBiCalendarConversionHandle;
    unint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSWeekday: %d", (uint8_t *)v4, 8u);
      return 0;
    }
  }
  return result;
}

uint64_t ICSMonthFromCalMonthOfYear(uint64_t result)
{
  int v1 = result;
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if ((int)result > 63)
  {
    if ((int)result > 511)
    {
      switch(result)
      {
        case 0x200:
          return 10;
        case 0x400:
          return 11;
        case 0x800:
          return 12;
      }
    }
    else
    {
      switch(result)
      {
        case 0x40:
          return 7;
        case 0x80:
          return 8;
        case 0x100:
          return 9;
      }
    }
LABEL_16:
    uint64_t v2 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      v3[0] = 67109120;
      v3[1] = v1;
      _os_log_impl(&dword_1A8E81000, v2, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalMonthOfYear: %d", (uint8_t *)v3, 8u);
    }
    return 1;
  }
  else
  {
    unint64_t result = result;
    switch((int)result)
    {
      case 1:
        return result;
      case 2:
        return 2;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_16;
      case 4:
        return 3;
      case 8:
        return 4;
      default:
        if (result == 16)
        {
          unint64_t result = 5;
        }
        else
        {
          if (result != 32) {
            goto LABEL_16;
          }
          unint64_t result = 6;
        }
        break;
    }
  }
  return result;
}

uint64_t CalMonthOfYearFromICSMonth(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a1 - 1) < 0xC) {
    return dword_1A8F7E2A8[a1 - 1];
  }
  int v2 = a1;
  BOOL v3 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSMonth: %d", (uint8_t *)v4, 8u);
  }
  return 1;
}

uint64_t ICSCalendarUserFromCalAttendeeType(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 5) {
    return dword_1A8F7E2D8[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalAttendeeType: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAttendeeTypeFromICSCalendarUser(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 6) {
    return dword_1A8F7E2EC[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSCalendarUser: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t ICSRoleFromCalAttendeeRole(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 6) {
    return dword_1A8F7E304[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalAttendeeRole: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAttendeeRoleFromICSRole(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 6) {
    return dword_1A8F7E31C[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSRole: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t ICSParticipationStatusFromCalAttendeeStatus(unsigned int a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1 < 8) {
    return dword_1A8F7E334[a1];
  }
  BOOL v3 = CDBiCalendarConversionHandle;
  uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalAttendeeStatus: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAttendeeStatusFromICSParticipationStatus(int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = 7;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      return 0;
    case 2:
      return 1;
    case 3:
      return 2;
    case 4:
      return 3;
    case 5:
      return 4;
    case 6:
      return 5;
    case 7:
      return 6;
    case 8:
    case 9:
      uint64_t v4 = CDBiCalendarConversionHandle;
      uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      int v6 = 67109120;
      int v7 = a1;
      uint64_t v5 = "Encountered an unhandled ICSParticipationStatus: %d";
      break;
    default:
      uint64_t v4 = CDBiCalendarConversionHandle;
      uint64_t result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      int v6 = 67109120;
      int v7 = a1;
      uint64_t v5 = "Encountered an unknown ICSParticipationStatus: %d";
      break;
  }
  _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_DEBUG, v5, (uint8_t *)&v6, 8u);
  return 0;
}

uint64_t ICSScheduleAgentFromCalScheduleAgent(int a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 2) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CalScheduleAgentFromICSScheduleAgent(int a1)
{
  if (a1) {
    return a1 == 1;
  }
  else {
    return 2;
  }
}

void CalCalendarItemSetSummary(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 0, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemSetDescription(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecordSetPropertyIfDifferent(a1, 3, a2)) {
    _CalEventInvalidateDetectedConferenceURL(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarItemGetDescription(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalCalendarItemCopyDescription(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarItemHasPreferredLocation(uint64_t a1)
{
  if (a1)
  {
    if (CalCalendarItemHasLocation(a1))
    {
      return 1;
    }
    else
    {
      return CalCalendarItemHasClientLocation(a1);
    }
  }
  else
  {
    BOOL v3 = CDBLogHandle;
    uint64_t result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_ERROR, "NULL 'item' given.  Will not determine if there is a preferred location.", v4, 2u);
      return 0;
    }
  }
  return result;
}

BOOL CalCalendarItemHasLocation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Locatiouint64_t n = _CalCalendarItemGetLocation(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Location != 0;
}

BOOL CalCalendarItemHasClientLocation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ClientLocatiouint64_t n = _CalCalendarItemGetClientLocation(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ClientLocation != 0;
}

CFTypeRef CalCalendarItemCopyPreferredLocation(uint64_t a1)
{
  if (a1)
  {
    CFTypeRef result = CalCalendarItemCopyClientLocation(a1);
    if (!result)
    {
      return CalCalendarItemCopyLocation(a1);
    }
  }
  else
  {
    BOOL v3 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_ERROR, "NULL 'item' given.  Will not return a preferred location.", v4, 2u);
    }
    return 0;
  }
  return result;
}

CFTypeRef CalCalendarItemCopyClientLocation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ClientLocatiouint64_t n = _CalCalendarItemGetClientLocation(a1);
  CFTypeRef v4 = ClientLocation;
  if (ClientLocation) {
    CFRetain(ClientLocation);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalCalendarItemCopyLocation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Locatiouint64_t n = _CalCalendarItemGetLocation(a1);
  CFTypeRef v4 = Location;
  if (Location) {
    CFRetain(Location);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalCalendarItemGetLocation(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void *_CalCalendarItemSetLocation(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    CalRelationSetRelatedObject(result, a2);
    return (void *)_CalEventInvalidateDetectedConferenceURL(a1);
  }
  return result;
}

void CalCalendarItemSetLocation(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetLocation(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalCalendarItemGetClientLocation(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void *_CalCalendarItemSetClientLocation(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    CalRelationSetRelatedObject(result, a2);
    return (void *)_CalEventInvalidateDetectedConferenceURL(a1);
  }
  return result;
}

void CalCalendarItemSetClientLocation(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetClientLocation(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void *_CalCalendarItemSetStartLocation(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

CFTypeRef _CalCalendarItemGetStartLocation(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void CalCalendarItemSetStartLocation(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetStartLocation(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopyStartLocation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  StartLocatiouint64_t n = _CalCalendarItemGetStartLocation(a1);
  CFTypeRef v4 = StartLocation;
  if (StartLocation) {
    CFRetain(StartLocation);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void *_CalCalendarItemSetEndLocation(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

CFTypeRef _CalCalendarItemGetEndLocation(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void CalCalendarItemSetEndLocation(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetEndLocation(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopyEndLocation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  EndLocatiouint64_t n = _CalCalendarItemGetEndLocation(a1);
  CFTypeRef v4 = EndLocation;
  if (EndLocation) {
    CFRetain(EndLocation);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarItemCopyCreationDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreationDate(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 41, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyLastModifiedDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalCalendarItemSetLastModifiedDateWhileLocked(uint64_t a1, uint64_t a2)
{
  return _CalCalendarItemSetRecordProperty(a1, 19, a2);
}

void CalCalendarItemSetLastModifiedDate(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 19, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyStartDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void _CalCalendarItemInvalidateAllRecurrenceRuleCachedEndDates(uint64_t a1)
{
  CFArrayRef v1 = _CalCalendarItemCopyRecurrences(a1);
  if (v1)
  {
    CFArrayRef v2 = v1;
    CFIndex Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      CFIndex v5 = 0;
      uint64_t v6 = *MEMORY[0x1E4F57888];
      do
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
        _CalRecurrenceSetCachedEndDate((uint64_t)ValueAtIndex, v6);
        ++v5;
      }
      while (v4 != v5);
    }
    CFRelease(v2);
  }
}

CFMutableArrayRef _CalCalendarItemCopyRecurrencesWhileLocked(uint64_t a1, int a2)
{
  if (a2) {
    return _CalCalendarItemCopyRecurrences(a1);
  }
  else {
    return CalCalendarItemCopyRecurrences(a1);
  }
}

void CalCalendarItemSetStartDate(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecordSetPropertyIfDifferent(a1, 4, a2)) {
    _CalCalendarItemInvalidateAllRecurrenceRuleCachedEndDates(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarItemCopyStartTimeZone(uint64_t a1)
{
  if (_CalCalendarItemIsFloating(a1)) {
    return 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  return CalTimeZoneCopyCFTimeZone();
}

uint64_t CalCalendarItemCopyStartTimeZone(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t started = _CalCalendarItemCopyStartTimeZone(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return started;
}

void CalCalendarItemSetStartTimeZone(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFStringRef v5 = (const __CFString *)MEMORY[0x1AD0E8C40](a2);
  }
  else {
    CFStringRef v5 = @"_float";
  }
  _CalRecordSetPropertyIfDifferent(a1, 5, v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarItemCopyEndTimeZone(uint64_t a1)
{
  if (_CalCalendarItemIsFloating(a1)) {
    return 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (!CPRecordGetProperty()) {
    return 0;
  }
  return CalTimeZoneCopyCFTimeZone();
}

uint64_t CalCalendarItemCopyEndTimeZone(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarItemCopyEndTimeZone(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetEndTimeZone(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFStringRef v5 = (const __CFString *)MEMORY[0x1AD0E8C40](a2);
  }
  else {
    CFStringRef v5 = @"_float";
  }
  _CalRecordSetPropertyIfDifferent(a1, 7, v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemIsFloating(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsFloating = _CalCalendarItemIsFloating(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsFloating;
}

BOOL CalCalendarItemIsAllDay(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsAllDay = _CalCalendarItemIsAllDay(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsAllDay;
}

BOOL _CalCalendarItemIsAllDay(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetIntegerProperty() != 0;
}

void CalCalendarItemSetAllDay(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 8, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemSetAvailability(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 16, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemGetAvailability(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalCalendarItemSetPrivacyLevel(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 17, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemGetPrivacyLevel(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalCalendarItemSetPriority(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2 <= 9) {
    CFStringRef v5 = (const __CFString *)a2;
  }
  else {
    CFStringRef v5 = 0;
  }
  _CalRecordSetPropertyIfDifferent(a1, 36, v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemGetPriority(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  Integeruint64_t Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalCalendarItemSetAction(uint64_t a1, const __CFURL *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFStringRef v5 = CFURLGetString(a2);
  }
  else {
    CFStringRef v5 = 0;
  }
  _CalRecordSetPropertyIfDifferent(a1, 42, v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalCalendarItemCopyAction(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  CFURLRef result = 0;
  if (v4)
  {
    CFURLRef v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

uint64_t CalCalendarItemCopyAppLink(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarItemGetSequenceNumber(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  Integeruint64_t Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalCalendarItemSetSequenceNumber(uint64_t a1, int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 20, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

__CFArray *CalCalendarItemCopyCategories(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property && (CFMutableArrayRef v5 = CalToManyRelationCopyObjects(Property)) != 0)
  {
    CFArrayRef v6 = v5;
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFIndex Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 0; i != v9; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
        CFTypeRef Category = _CalCategoryLinkGetCategory((uint64_t)ValueAtIndex);
        CFArrayAppendValue(Mutable, Category);
      }
    }
    CFRelease(v6);
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Mutable;
}

void CalCalendarItemRemoveAllCategories(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalToManyRelationRemoveAllObjects(Property);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemAddCategory(const void *a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddCategory(a1, a2, 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalCalendarItemAddCategory(const void *a1, CFTypeRef a2, int a3)
{
  Entityint Type = _CalCategoryGetEntityType((uint64_t)a2);
  if (EntityType == _CalEntityGetType(a1))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t Property = CPRecordGetProperty();
    if (Property)
    {
      CFIndex v9 = (void *)Property;
      CFArrayRef v10 = CalToManyRelationCopyObjects(Property);
      if (v10)
      {
        CFArrayRef v11 = v10;
        CFIndex Count = CFArrayGetCount(v10);
        if (Count < 1)
        {
LABEL_14:
          CFRelease(v11);
          uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
          CategoryLinkWithOwnerAndCFTypeRef Category = (void *)_CalDatabaseCreateCategoryLinkWithOwnerAndCategory(DatabaseForRecord, a1, a2);
          _CalCategoryLinkSetGroup((uint64_t)CategoryLinkWithOwnerAndCategory);
          CalToManyRelationAddObject(v9, CategoryLinkWithOwnerAndCategory);
          CFArrayRef v18 = (const __CFArray *)CategoryLinkWithOwnerAndCategory;
        }
        else
        {
          CFIndex v13 = Count;
          CFIndex v14 = 0;
          while (1)
          {
            int ValueAtIndex = CFArrayGetValueAtIndex(v11, v14);
            if (_CalCategoryLinkGetCategory((uint64_t)ValueAtIndex) == a2
              && _CalRecurrenceGetWeekStartRaw((uint64_t)ValueAtIndex) == a3)
            {
              break;
            }
            if (v13 == ++v14) {
              goto LABEL_14;
            }
          }
          CFArrayRef v18 = v11;
        }
        CFRelease(v18);
      }
    }
  }
}

void _CalCalendarItemRemoveCategory(const void *a1, CFTypeRef a2)
{
  Entityint Type = _CalCategoryGetEntityType((uint64_t)a2);
  if (EntityType == _CalEntityGetType(a1))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t Property = CPRecordGetProperty();
    if (Property)
    {
      int v7 = (void *)Property;
      CFArrayRef v8 = CalToManyRelationCopyObjects(Property);
      if (v8)
      {
        CFArrayRef v9 = v8;
        CFIndex Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          CFIndex v12 = 0;
          while (1)
          {
            int ValueAtIndex = (void *)CFArrayGetValueAtIndex(v9, v12);
            if (_CalCategoryLinkGetCategory((uint64_t)ValueAtIndex) == a2) {
              break;
            }
            if (v11 == ++v12) {
              goto LABEL_16;
            }
          }
          CalToManyRelationRemoveObject(v7, ValueAtIndex);
        }
LABEL_16:
        CFRelease(v9);
      }
    }
  }
}

void CalCalendarItemRemoveCategory(const void *a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveCategory(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemAddGroupedCategory(const void *a1, const void *a2, int a3)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddCategory(a1, a2, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

id CalCalendarItemCopyGroupedCategories(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CFMutableArrayRef v5 = CalToManyRelationCopyObjects(Property);
  }
  else {
    CFMutableArrayRef v5 = 0;
  }
  if ([(__CFArray *)v5 count])
  {
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    CFArrayRef v18 = v5;
    int v7 = v5;
    uint64_t v8 = [(__CFArray *)v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v19 + 1) + 8 * i);
          CFTypeRef Category = _CalCategoryLinkGetCategory(v12);
          if (Category)
          {
            CFTypeRef v14 = Category;
            CFIndex v15 = [NSNumber numberWithInt:_CalRecurrenceGetWeekStartRaw(v12)];
            id v16 = [v6 objectForKeyedSubscript:v15];
            if (!v16)
            {
              id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
              [v6 setObject:v16 forKeyedSubscript:v15];
            }
            objc_msgSend(v16, "addObject:", v14, v18);
          }
        }
        uint64_t v9 = [(__CFArray *)v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v9);
    }

    CFMutableArrayRef v5 = v18;
  }
  else
  {
    id v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);

  return v6;
}

uint64_t _CalCalendarItemCopyURL(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef v2 = (void *)CPRecordCopyProperty();
  if (v2)
  {
    uint64_t v3 = objc_msgSend(MEMORY[0x1E4F1CB10], "_lp_URLWithUserTypedString:relativeToURL:", v2, 0);
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t CalCalendarItemCopyURL(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarItemCopyURL(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetURL(uint64_t a1, const __CFURL *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFStringRef v5 = CFURLGetString(a2);
  }
  else {
    CFStringRef v5 = 0;
  }
  if (_CalCalendarItemSetRecordProperty(a1, 18, v5)) {
    _CalEventInvalidateDetectedConferenceURL(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemGetStatus(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Status = _CalCalendarItemGetStatus(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Status;
}

void CalCalendarItemSetStatus(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalCalendarItemGetStatus(a1) != a2) {
    _CalCalendarItemSetRecordProperty(a1, 14, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemStillExists()
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL v1 = _CalRecordStillExists();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v1;
}

void CalCalendarItemSetSuppressNotificationForChanges(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 124, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemSuppressNotificationForChanges(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void *_CalCalendarItemSetOrganizer(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFURLRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalCalendarItemSetOrganizer(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetOrganizer(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopyOrganizer(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Organizer = _CalCalendarItemGetOrganizer(a1);
  CFTypeRef v4 = Organizer;
  if (Organizer) {
    CFRetain(Organizer);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarItemIsSelfOrganizedWithScheduleAgentClient(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFTypeRef v4 = CalCalendarItemCopyOrganizer(a1);
  uint64_t v5 = (uint64_t)v4;
  if (v4)
  {
    int ScheduleAgent = CalParticipantGetScheduleAgent((uint64_t)v4);
    CFRelease((CFTypeRef)v5);
    if (ScheduleAgent == 1)
    {
      if (v3)
      {
        int v7 = (void *)CalOrganizerCopyAddress(v5);
        uint64_t v8 = [v7 absoluteString];
        uint64_t v5 = [v3 addressIsAccountOwner:v8];
      }
      else
      {
        uint64_t v5 = 1;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
  }

  return v5;
}

void CalCalendarItemSetupOrganizerAndSelfAttendeeForImportedItem(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (CalCalendarGetSharingStatus(a2) != 2)
  {
    id v19 = v5;
    if (!a1)
    {
      id v6 = 0;
      goto LABEL_47;
    }
    id v6 = (void *)CalCalendarItemCopySelfAttendee(a1);
    if (!v6)
    {
      CFMutableArrayRef v20 = CalCalendarItemCopyAttendees(a1);
      if (![(__CFArray *)v20 count])
      {
        id v6 = 0;
        goto LABEL_46;
      }
      uint64_t v21 = 0;
      while (1)
      {
        id v6 = [(__CFArray *)v20 objectAtIndexedSubscript:v21];

        long long v22 = (void *)CalAttendeeCopyAddress(v6);
        if ([v19 addressURLIsAccountOwner:v22])
        {
          CFRetain(v6);
          goto LABEL_45;
        }
        int64_t v23 = (void *)CalAttendeeCopyEmailAddress(v6);
        if (v23)
        {
          uint64_t v24 = (void *)MEMORY[0x1E4F1CB10];
          double v25 = [NSString stringWithFormat:@"mailto:%@", v23];
          uint64_t v26 = [v24 URLWithString:v25];

          if ([v19 addressURLIsAccountOwner:v26])
          {
            CFRetain(v6);

            long long v22 = (void *)v26;
LABEL_45:

LABEL_46:
            break;
          }
          long long v22 = (void *)v26;
        }

        if (++v21 >= (unint64_t)[(__CFArray *)v20 count])
        {
          id v6 = 0;
          goto LABEL_46;
        }
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (!a1)
  {
    id v6 = 0;
    goto LABEL_48;
  }
  id v6 = (void *)CalCalendarItemCopySelfAttendee(a1);
  if (v6) {
    goto LABEL_48;
  }
  UniChar v35 = (void *)CalCalendarCopySharedOwnerAddresses(a2);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  obCFIndex j = CalCalendarItemCopyAttendees(a1);
  uint64_t v7 = [(__CFArray *)obj countByEnumeratingWithState:&v41 objects:v46 count:16];
  if (!v7)
  {
    id v6 = 0;
    goto LABEL_41;
  }
  uint64_t v8 = v7;
  uint64_t v33 = a1;
  uint64_t v36 = *(void *)v42;
  while (2)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v42 != v36) {
        objc_enumerationMutation(obj);
      }
      id v6 = *(void **)(*((void *)&v41 + 1) + 8 * i);
      uint64_t v10 = (void *)CalAttendeeCopyEmailAddress(v6);
      if (v10)
      {
        CFIndex v11 = (void *)MEMORY[0x1E4F1CB10];
        uint64_t v12 = [NSString stringWithFormat:@"mailto:%@", v10];
        CFIndex v13 = [v11 URLWithString:v12];

        if (!v13) {
          goto LABEL_23;
        }
      }
      else
      {
        CFIndex v13 = (void *)CalAttendeeCopyAddress(v6);
        if (!v13) {
          goto LABEL_23;
        }
      }
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v14 = v35;
      uint64_t v15 = [v14 countByEnumeratingWithState:&v37 objects:v45 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v38;
LABEL_15:
        uint64_t v18 = 0;
        while (1)
        {
          if (*(void *)v38 != v17) {
            objc_enumerationMutation(v14);
          }
          if ([MEMORY[0x1E4F56800] compareAddressURL:v13 localString:*(void *)(*((void *)&v37 + 1) + 8 * v18)])break; {
          if (v16 == ++v18)
          }
          {
            uint64_t v16 = [v14 countByEnumeratingWithState:&v37 objects:v45 count:16];
            if (v16) {
              goto LABEL_15;
            }
            goto LABEL_21;
          }
        }
        CFRetain(v6);

        if (!v6) {
          goto LABEL_23;
        }

        goto LABEL_39;
      }
LABEL_21:

LABEL_23:
    }
    uint64_t v8 = [(__CFArray *)obj countByEnumeratingWithState:&v41 objects:v46 count:16];
    if (v8) {
      continue;
    }
    break;
  }
  id v6 = 0;
LABEL_39:
  a1 = v33;
LABEL_41:

LABEL_48:
  CFTypeRef v27 = CalCalendarItemCopyOrganizer(a1);
  if (v27)
  {
    char v28 = v27;
    uint64_t v29 = (void *)CalOrganizerCopyAddress(v27);
    if ([v5 addressURLIsAccountOwner:v29])
    {
      unsigned int v30 = 1;
    }
    else
    {
      uint64_t v31 = (void *)CalOrganizerCopyEmailAddress(v28);
      unsigned int v30 = [v5 addressIsAccountOwner:v31];
    }
    CalOrganizerSetIsSelf(v28, v30);
    CalCalendarItemSetOrganizer(a1, v28);
    CFRelease(v28);
  }
  CalCalendarItemSetSelfAttendee(a1, v6);
  ProposedStartdouble Date = CalAttendeeGetProposedStartDate((uint64_t)v6);
  CalEventSetProposedStartDate(a1, ProposedStartDate);
  if (v6) {
    CFRelease(v6);
  }
}

void CalCalendarItemSetSelfAttendee(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetSelfAttendee(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemSetHidden(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 31, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemIsHidden(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

uint64_t _CalCalendarItemSetIsPhantomMaster(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 53, (const __CFString *)a2);
}

void CalCalendarItemSetIsPhantomMaster(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 53, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalCalendarItemIsPhantomMaster(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL CalCalendarItemIsPhantomMaster(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsPhantomMaster = _CalCalendarItemIsPhantomMaster(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsPhantomMaster;
}

uint64_t _CalCalendarItemSetCalendarScale(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 55, a2);
}

uint64_t _CalCalendarItemCopyCalendarScale(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalCalendarItemSetCalendarScale(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 55, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCalendarScale(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarItemCopyCalendarScale(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetCreatedByDisplayName(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 107, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedByDisplayName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreatedByAddress(uint64_t a1, const __CFURL *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFStringRef v5 = CFURLGetString(a2);
  }
  else {
    CFStringRef v5 = 0;
  }
  _CalRecordSetPropertyIfDifferent(a1, 108, v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalCalendarItemCopyCreatedByAddress(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  if (Property) {
    CFURLRef v5 = CFURLCreateWithString(0, Property, 0);
  }
  else {
    CFURLRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalCalendarItemSetCreatedByFirstName(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 111, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedByFirstName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreatedByLastName(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 112, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedByLastName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreatedDate(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 47, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreatedTimezone(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFStringRef v5 = (const __CFString *)MEMORY[0x1AD0E8C40](a2);
  _CalRecordSetPropertyIfDifferent(a1, 48, v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedTimezone(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  uint64_t v4 = CalTimeZoneCopyCFTimeZone();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedByDisplayName(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 109, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedByDisplayName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedByAddress(uint64_t a1, const __CFURL *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFStringRef v5 = CFURLGetString(a2);
  }
  else {
    CFStringRef v5 = 0;
  }
  _CalRecordSetPropertyIfDifferent(a1, 110, v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalCalendarItemCopyModifiedByAddress(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef v4 = (const __CFString *)CPRecordCopyProperty();
  if (v4)
  {
    CFStringRef v5 = v4;
    CFURLRef v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v5);
  }
  else
  {
    CFURLRef v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

void CalCalendarItemSetModifiedByFirstName(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 113, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedByFirstName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedByLastName(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 114, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedByLastName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedTimezone(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  MEMORY[0x1AD0E8C40](a2);
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedTimezone(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  uint64_t v4 = CalTimeZoneCopyCFTimeZone();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalCalendarItemClearExternalProperties(uint64_t a1)
{
  _CalRecordSetPropertyIfDifferent(a1, 24, 0);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3) {
          os_unfair_lock_assert_owner(v3 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalCalendarItemClearExternalProperties(const void *a1, int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemClearExternalProperties((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  if (a2)
  {
    CFArrayRef v5 = CalCalendarItemCopyAlarms((uint64_t)a1);
    if (v5)
    {
      CFArrayRef v6 = v5;
      CFIndex Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0; i != v8; ++i)
        {
          int ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
          CalAlarmClearExternalProperties((uint64_t)ValueAtIndex);
        }
      }
      CFRelease(v6);
    }
    CFArrayRef v11 = CalCalendarItemCopyRecurrences((uint64_t)a1);
    if (v11)
    {
      CFArrayRef v12 = v11;
      CFIndex v13 = CFArrayGetCount(v11);
      if (v13 >= 1)
      {
        CFIndex v14 = v13;
        for (CFIndex j = 0; j != v14; ++j)
        {
          uint64_t v16 = CFArrayGetValueAtIndex(v12, j);
          CalRecurrenceClearExternalProperties((uint64_t)v16);
        }
      }
      CFRelease(v12);
    }
    uint64_t v17 = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(v17);
    if (_CalEntityGetType(a1) == 2)
    {
      CFArrayRef v18 = _CalEventCopyDetachedEvents((uint64_t)a1);
      if (v18)
      {
        CFArrayRef v19 = v18;
        CFIndex v20 = CFArrayGetCount(v18);
        if (v20 >= 1)
        {
          CFIndex v21 = v20;
          for (CFIndex k = 0; k != v21; ++k)
          {
            int64_t v23 = CFArrayGetValueAtIndex(v19, k);
            _CalCalendarItemClearExternalProperties((uint64_t)v23);
          }
        }
        CFRelease(v19);
      }
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v17);
    }
    os_unfair_lock_unlock(v17);
  }
}

CFMutableArrayRef CalCalendarItemCopyAlarms(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarItemCopyAlarms(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetExternalID(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 24, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarItemCopyExternalID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarItemCopyExternalID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarItemCopyExternalID(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetExternalScheduleID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyExternalScheduleID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetExternalModificationTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyExternalModificationTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetExternalRepresentation(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 28, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyExternalRepresentation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarItemCopyUniqueIdentifier(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetUniqueIdentifier(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 26, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalCalendarItemCopyExceptionDates(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFArrayRef _CalCalendarItemAddExceptionDate(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void *_CalCalendarItemRemoveExceptionDate(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

void _CalCalendarItemRemoveAllExceptionDates(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (void *)CPRecordGetProperty();
  if (Property)
  {
    CalToManyRelationRemoveAllObjects(Property);
  }
}

void _CalCalendarItemAddExceptionDateWithCalDate(uint64_t a1, CFAbsoluteTime a2)
{
  CFDateRef v3 = CFDateCreate(0, a2);
  _CalCalendarItemAddExceptionDateWithCFDate(a1, (uint64_t)v3);
  CFRelease(v3);
}

void _CalCalendarItemAddExceptionDateWithCFDate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void *)CalCopyDatabaseForEntity();
  ExceptionDateWithDateAndOrder = (void *)_CalDatabaseCreateExceptionDateWithDateAndOrder(v4, a2, 0);
  _CalCalendarItemAddExceptionDate(a1, ExceptionDateWithDateAndOrder);
  CFRelease(ExceptionDateWithDateAndOrder);
  CFRelease(v4);
}

void _CalCalendarItemRemoveExceptionDateWithCalDate(uint64_t a1, double a2)
{
  CFArrayRef v4 = _CalCalendarItemCopyExceptionDates(a1);
  if (v4)
  {
    CFArrayRef v5 = v4;
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        int ValueAtIndex = (void *)CFArrayGetValueAtIndex(v5, i);
        if (_CalExceptionDateGetDate((uint64_t)ValueAtIndex) && vabdd_f64(MEMORY[0x1AD0E87A0](), a2) < 2.22044605e-16) {
          _CalCalendarItemRemoveExceptionDate(a1, ValueAtIndex);
        }
      }
    }
    CFRelease(v5);
  }
}

__CFArray *_CalCalendarItemCopyExceptionDatesForRecurrences(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v3 = _CalCalendarItemCopyExceptionDates(a1);
  if (v3)
  {
    CFArrayRef v4 = v3;
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      for (CFIndex i = 0; i != v6; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
        double Date = (const void *)_CalExceptionDateGetDate((uint64_t)ValueAtIndex);
        if (Date) {
          CFArrayAppendValue(Mutable, Date);
        }
      }
    }
    CFRelease(v4);
  }
  CFArrayRef v10 = _CalEventCopyDetachedEvents(a1);
  if (v10)
  {
    CFArrayRef v11 = v10;
    CFIndex v12 = CFArrayGetCount(v10);
    if (v12 >= 1)
    {
      CFIndex v13 = v12;
      CFIndex v14 = 0;
      double v15 = *MEMORY[0x1E4F57888];
      do
      {
        uint64_t v16 = CFArrayGetValueAtIndex(v11, v14);
        OriginalStartdouble Date = _CalEventGetOriginalStartDate((uint64_t)v16);
        CFDateRef v18 = CFDateCreate(0, OriginalStartDate);
        CFArrayAppendValue(Mutable, v18);
        CFRelease(v18);
        ProposedStartdouble Date = _CalEventGetProposedStartDate((uint64_t)v16);
        if (ProposedStartDate != v15)
        {
          CFDateRef v20 = CFDateCreate(0, ProposedStartDate);
          CFArrayAppendValue(Mutable, v20);
          CFRelease(v20);
        }
        ++v14;
      }
      while (v13 != v14);
    }
    CFRelease(v11);
  }
  v22.length = CFArrayGetCount(Mutable);
  v22.id location = 0;
  CFArraySortValues(Mutable, v22, MEMORY[0x1E4F1C228], 0);
  return Mutable;
}

__CFArray *CalCalendarItemCopyExceptionDatesForRecurrences(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFArrayRef v3 = _CalCalendarItemCopyExceptionDatesForRecurrences(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFMutableArrayRef CalCalendarItemCopyExceptionDates(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarItemCopyExceptionDates(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemAddExceptionDate(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddExceptionDate(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveExceptionDate(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveExceptionDate(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalCalendarItemRemoveExceptionDatesBeyondDate(uint64_t a1, const __CFDate *a2)
{
  if (a2)
  {
    CFArrayRef v4 = _CalCalendarItemCopyExceptionDates(a1);
    if (v4)
    {
      CFArrayRef v5 = v4;
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        for (CFIndex i = 0; i != v7; ++i)
        {
          int ValueAtIndex = (void *)CFArrayGetValueAtIndex(v5, i);
          CFDateRef Date = (const __CFDate *)_CalExceptionDateGetDate((uint64_t)ValueAtIndex);
          if (Date && CFDateCompare(Date, a2, 0) == kCFCompareLessThan) {
            _CalCalendarItemRemoveExceptionDate(a1, ValueAtIndex);
          }
        }
      }
      CFRelease(v5);
    }
  }
}

void CalCalendarItemRemoveExceptionDatesBeyondDate(uint64_t a1, const __CFDate *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveExceptionDatesBeyondDate(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAllExceptionDates(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAllExceptionDates(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

__CFArray *CalCalendarItemCopyExceptionDatesAsCFDates(uint64_t a1, int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v6 = _CalCalendarItemCopyExceptionDates(a1);
  if (v6)
  {
    CFArrayRef v7 = v6;
    CFIndex Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 0; i != v9; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
        CFDateRef Date = (const void *)_CalExceptionDateGetDate((uint64_t)ValueAtIndex);
        if (Date) {
          CFArrayAppendValue(Mutable, Date);
        }
      }
    }
    CFRelease(v7);
  }
  if (a2)
  {
    v14.length = CFArrayGetCount(Mutable);
    v14.id location = 0;
    CFArraySortValues(Mutable, v14, MEMORY[0x1E4F1C228], 0);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Mutable;
}

void CalCalendarItemAddExceptionDateWithCFDate(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddExceptionDateWithCFDate(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveExceptionDateWithCFDate(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    double v5 = MEMORY[0x1AD0E87A0](a2);
    _CalCalendarItemRemoveExceptionDateWithCalDate(a1, v5);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

__CFArray *CalCalendarItemCopyExceptionDatesAsCFDatesInSyncOrder(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v4 = _CalCalendarItemCopyExceptionDates(a1);
  if (v4)
  {
    CFArrayRef v5 = v4;
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, v4);
    if (MutableCopy)
    {
      CFArrayRef v7 = MutableCopy;
      v14.length = CFArrayGetCount(MutableCopy);
      v14.id location = 0;
      CFArraySortValues(v7, v14, (CFComparatorFunction)_CompareExceptionDatesBySyncOrder, 0);
      CFIndex Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        for (CFIndex i = 0; i != v9; ++i)
        {
          int ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
          CFDateRef Date = (const void *)_CalExceptionDateGetDate((uint64_t)ValueAtIndex);
          if (Date) {
            CFArrayAppendValue(Mutable, Date);
          }
        }
      }
      CFRelease(v7);
    }
    CFRelease(v5);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Mutable;
}

void CalCalendarItemSetExceptionDatesAsCFDatesInSyncOrder(uint64_t a1, const __CFArray *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAllExceptionDates(a1);
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    CFArrayRef v6 = (const void *)CalCopyDatabaseForEntity(a1);
    int valuePtr = 0;
    if (Count >= 1)
    {
      for (CFIndex i = 0; i < Count; CFIndex i = ++valuePtr)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
        CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        ExceptionDateWithDateAndOrder = (void *)_CalDatabaseCreateExceptionDateWithDateAndOrder(v6, ValueAtIndex, v9);
        _CalCalendarItemAddExceptionDate(a1, ExceptionDateWithDateAndOrder);
        CFRelease(ExceptionDateWithDateAndOrder);
        CFRelease(v9);
      }
    }
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalCalendarItemCopyAlarms(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFArrayRef _CalCalendarItemAddAlarm(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void *_CalCalendarItemRemoveAlarm(uint64_t a1, void *a2)
{
  if (_CalAlarmIsDefaultAlarm((uint64_t)a2)) {
    _CalCalendarItemSetRecordProperty(a1, 52, 1);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

uint64_t _CalCalendarItemSetDefaultAlarmRemoved(uint64_t a1, unsigned int a2)
{
  return _CalCalendarItemSetRecordProperty(a1, 52, a2);
}

uint64_t CalCalendarItemHasAlarms(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t HasAlarms = _CalCalendarItemHasAlarms(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return HasAlarms;
}

uint64_t _CalCalendarItemHasAlarms(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationHasObjects(result);
  }
  return result;
}

void CalCalendarItemAddAlarm(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAlarm(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemIsDefaultAlarmRemoved(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  IntegerCFStringRef Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty != 0;
}

void CalCalendarItemSetDefaultAlarmRemoved(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 52, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalCalendarItemCopyAttachments(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFArrayRef _CalCalendarItemAddAttachment(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void *_CalCalendarItemRemoveAttachment(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

CFMutableArrayRef CalCalendarItemCopyAttachments(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarItemCopyAttachments(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemAddAttachment(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddAttachment(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAttachment(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAttachment(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalCalendarItemCopyContacts(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFArrayRef _CalCalendarItemAddContact(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void *_CalCalendarItemRemoveContact(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

CFMutableArrayRef CalCalendarItemCopyContacts(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarItemCopyContacts(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemAddContact(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddContact(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveContact(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveContact(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemHasAttendees(uint64_t a1, int a2)
{
  if (a2)
  {
    RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
  }
  else
  {
    RecordLocCFIndex k = 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property)
  {
    BOOL HasObjects = CalToManyRelationHasObjects(Property);
    if (!a2) {
      return HasObjects;
    }
  }
  else
  {
    BOOL HasObjects = 0;
    if (!a2) {
      return HasObjects;
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return HasObjects;
}

void *_CalCalendarItemSetSelfAttendee(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

CFMutableArrayRef _CalCalendarItemCopyAttendees(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFMutableArrayRef _CalCalendarItemCopyAttendeesPendingDeletion(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFArrayRef _CalCalendarItemAddAttendee(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void *_CalCalendarItemRemoveAttendeeImmediate(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

CFArrayRef _CalCalendarItemAddPendingDeleteAttendee(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

CFMutableArrayRef CalCalendarItemCopyAttendees(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarItemCopyAttendees(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFMutableArrayRef CalCalendarItemCopyAttendeesPendingDeletion(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarItemCopyAttendeesPendingDeletion(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void _CalCalendarItemFixupParticipantsOnEvent(uint64_t a1)
{
  uint64_t v1 = a1;
  CFTypeRef Calendar = _CalCalendarItemGetCalendar(a1);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  CFTypeRef cf = Calendar;
  if (!Calendar) {
    return;
  }
  uint64_t v4 = DatabaseForRecord;
  CFTypeRef SelfAttendee = (void *)_CalCalendarItemGetSelfAttendee(v1);
  CFArrayRef v6 = _CalCalendarItemCopyAttendees(v1);
  CFArrayRef v7 = &CDBLockingAssertionsEnabled;
  uint64_t v66 = v1;
  uint64_t v67 = SelfAttendee;
  uint64_t v62 = v4;
  if (!v6)
  {
    CFIndex v10 = 0;
    BOOL v63 = 0;
    BOOL v61 = SelfAttendee != 0;
    if (!v1) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }
  CFArrayRef v8 = v6;
  CFIndex Count = CFArrayGetCount(v6);
  CFIndex v10 = Count;
  BOOL v61 = SelfAttendee != 0;
  if (SelfAttendee)
  {
    if (Count < 1) {
      goto LABEL_39;
    }
    CFIndex v11 = 0;
    char v12 = 0;
    do
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
      if (ValueAtIndex)
      {
        if (*v7)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      Integeruint64_t Property = CPRecordGetIntegerProperty();
      if (ValueAtIndex)
      {
        if (*v7)
        {
          if (CPRecordGetStore())
          {
            uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
      int v17 = CPRecordGetIntegerProperty();
      if (IntegerProperty == -1 || v17 == -1)
      {
        int v68 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        int v19 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        int v20 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        CFIndex v21 = v10;
        CFRange v22 = v7;
        int v23 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        int v24 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        if (v20) {
          BOOL v25 = v68 == 0;
        }
        else {
          BOOL v25 = 1;
        }
        BOOL v27 = v25 || v19 == 0 || v23 == 0;
        CFArrayRef v7 = v22;
        CFIndex v10 = v21;
        BOOL v18 = !v27 && v24 != 0;
      }
      else
      {
        BOOL v18 = IntegerProperty == v17;
      }
      if (v18) {
        char v12 = 1;
      }
      ++v11;
    }
    while (v10 != v11);
    BOOL v25 = v12 == 0;
    uint64_t v1 = v66;
    CFTypeRef SelfAttendee = v67;
    if (v25)
    {
LABEL_39:
      _CalCalendarItemAddAttendee(v1, SelfAttendee);
      ++v10;
    }
    BOOL v63 = v10 == 1;
  }
  else
  {
    BOOL v63 = 0;
  }
  CFRelease(v8);
  if (v1)
  {
LABEL_45:
    if (*v7)
    {
      if (CPRecordGetStore())
      {
        uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
LABEL_49:
  uint64_t Property = CPRecordGetProperty();
  CalToManyRelationUnload(Property);
  _CalCalendarItemGetStoreId(v1);
  uint64_t Store = CPRecordGetStore();
  StoreWithUuint64_t ID = _CalGetStoreWithUID(Store);
  if (StoreWithUID) {
    BOOL v33 = _CalStoreUsesSelfAttendee(StoreWithUID);
  }
  else {
    BOOL v33 = 1;
  }
  uint64_t v34 = (uint64_t)cf;
  uint64_t v35 = _CalCalendarCopyOwnerIdentityDisplayName((uint64_t)cf);
  CFStringRef v36 = _CalCalendarCopyOwnerIdentityAddress((uint64_t)cf);
  uint64_t Name = _CalCalendarCopyOwnerIdentityFirstName((uint64_t)cf);
  uint64_t v38 = _CalCalendarCopyOwnerIdentityLastName((uint64_t)cf);
  uint64_t v39 = _CalCalendarCopySelfIdentityDisplayName((uint64_t)cf);
  CFStringRef cfa = _CalCalendarCopySelfIdentityAddress((uint64_t)cf);
  uint64_t v69 = _CalCalendarCopySelfIdentityFirstName(v34);
  uint64_t v40 = _CalCalendarCopySelfIdentityLastName(v34);
  CFTypeRef Organizer = _CalCalendarItemGetOrganizer(v66);
  long long v42 = Organizer;
  if (!Organizer)
  {
    if (!v10 || v63) {
      goto LABEL_77;
    }
    if (v35 | Name | v38)
    {
      if (v36)
      {
        long long v43 = _CalDatabaseCreateOrganizer(v62);
        if (v43)
        {
          long long v44 = v43;
          _CalAttendeeSetDisplayName((uint64_t)v43, (const __CFString *)v35);
          _CalAttendeeSetFirstName((uint64_t)v44, (const __CFString *)Name);
          _CalAttendeeSetLastName((uint64_t)v44, (const __CFString *)v38);
          CFStringRef v45 = (const __CFString *)_CalCalendarCopyOwnerIdentityEmail(v34);
          if (v45)
          {
            CFStringRef v46 = v45;
            _CalAttendeeSetEmailAddress((uint64_t)v44, v45);
            CFRelease(v46);
          }
          CFStringRef v47 = (const __CFString *)_CalCalendarCopyOwnerIdentityPhoneNumber(v34);
          if (v47)
          {
            CFStringRef v48 = v47;
            _CalAttendeeSetPhoneNumber((uint64_t)v44, v47);
            CFRelease(v48);
          }
          _CalAttendeeSetAddress(v44, v36);
          _CalOrganizerSetIsSelf((uint64_t)v44, 1u);
          _CalCalendarItemSetOrganizer(v66, v44);
          CFRelease(v44);
        }
      }
    }
    goto LABEL_67;
  }
  if (_CalOrganizerIsSelf((uint64_t)Organizer))
  {
    if (!v10 || v63)
    {
LABEL_77:
      if (v35 | Name | v38 && v36 && v42)
      {
        _CalCalendarItemSetOrganizer(v66, 0);
        _CalDatabaseRemoveEntity(v62, v42);
      }
      BOOL v56 = v61;
      if (!v33) {
        BOOL v56 = 0;
      }
      if (v56 && v39 | v69 | v40 && cfa)
      {
        _CalCalendarItemRemoveAttendeeImmediate(v66, v67);
        _CalCalendarItemSetSelfAttendee(v66, 0);
      }
      goto LABEL_87;
    }
LABEL_67:
    if (!v67 && v33)
    {
      if (v39 | v69 | v40)
      {
        if (cfa)
        {
          Attendee = (void *)_CalDatabaseCreateAttendee(v62);
          if (Attendee)
          {
            uint64_t v50 = Attendee;
            _CalAttendeeSetDisplayName((uint64_t)Attendee, (const __CFString *)v39);
            _CalAttendeeSetFirstName((uint64_t)v50, (const __CFString *)v69);
            uint64_t v51 = v40;
            _CalAttendeeSetLastName((uint64_t)v50, (const __CFString *)v40);
            CFStringRef v52 = (const __CFString *)_CalCalendarCopySelfIdentityEmail(v34);
            if (v52)
            {
              CFStringRef v53 = v52;
              _CalAttendeeSetEmailAddress((uint64_t)v50, v52);
              CFRelease(v53);
            }
            CFStringRef v54 = (const __CFString *)_CalCalendarCopySelfIdentityPhoneNumber(v34);
            if (v54)
            {
              CFStringRef v55 = v54;
              _CalAttendeeSetPhoneNumber((uint64_t)v50, v54);
              CFRelease(v55);
            }
            _CalAttendeeSetAddress(v50, cfa);
            _CalAttendeeSetStatus(v50, 1);
            _CalAttendeeSetType((uint64_t)v50, 1u);
            _CalCalendarItemAddAttendee(v66, v50);
            _CalCalendarItemSetSelfAttendee(v66, v50);
            CFRelease(v50);
            uint64_t v40 = v51;
          }
        }
      }
    }
  }
LABEL_87:
  if (v35) {
    CFRelease((CFTypeRef)v35);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (Name) {
    CFRelease((CFTypeRef)Name);
  }
  if (v38) {
    CFRelease((CFTypeRef)v38);
  }
  if (v39) {
    CFRelease((CFTypeRef)v39);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (v69) {
    CFRelease((CFTypeRef)v69);
  }
  if (v40) {
    CFRelease((CFTypeRef)v40);
  }
  CFTypeRef v57 = _CalCalendarItemGetSelfAttendee(v66);
  if (v57)
  {
    uint64_t v58 = (uint64_t)v57;
    ParticipationStatusModifiedCFDateRef Date = _CalEventGetParticipationStatusModifiedDate(v66);
    double LastModified = _CalAttendeeGetLastModified(v58);
    if (LastModified > ParticipationStatusModifiedDate)
    {
      _CalEventSetParticipationStatusModifiedDate(v66, LastModified);
    }
  }
}

void CalCalendarItemAddAttendee(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetWeekStartRaw((uint64_t)a2) == -1) {
    _CalCalendarItemAddPendingDeleteAttendee(a1, a2);
  }
  else {
    _CalCalendarItemAddAttendee(a1, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFArrayRef _CalCalendarItemRemoveAttendee(uint64_t a1, const __CFArray *a2)
{
  _CalCalendarItemGetStoreId(a1);
  uint64_t Store = CPRecordGetStore();
  StoreWithUuint64_t ID = _CalGetStoreWithUID(Store);
  BOOL v7 = StoreWithUID
    && _CalAttendeeGetUseDeletedByOrganizerStatusInStore(StoreWithUID)
    && (CFTypeRef Organizer = _CalCalendarItemGetOrganizer(a1)) != 0
    && _CalOrganizerIsSelf((uint64_t)Organizer);
  if (_CalRecurrenceGetWeekStartRaw((uint64_t)a2) == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t Property = (void *)CPRecordGetProperty();
    if (Property) {
      CalToManyRelationRemoveObject(Property, a2);
    }
    _CalAttendeeSetStatus(a2, 7);
    goto LABEL_19;
  }
  _CalCalendarItemRemoveAttendeeImmediate(a1, a2);
  if (!v7)
  {
LABEL_19:
    CFArrayRef result = (const __CFArray *)_CalCalendarItemGetSelfAttendee(a1);
    if (result == a2)
    {
      return (const __CFArray *)_CalCalendarItemSetSelfAttendee(a1, 0);
    }
    return result;
  }
  _CalAttendeeSetStatus(a2, -1);
  return _CalCalendarItemAddPendingDeleteAttendee(a1, a2);
}

void CalCalendarItemRemoveAttendee(uint64_t a1, const __CFArray *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAttendee(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopySelfAttendee(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef SelfAttendee = _CalCalendarItemGetSelfAttendee(a1);
  CFTypeRef v4 = SelfAttendee;
  if (SelfAttendee) {
    CFRetain(SelfAttendee);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalCalendarItemGetFlags(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalCalendarItemGetIsCompleted(uint64_t a1)
{
  return _CalCalendarItemGetFlags(a1) & 1;
}

CFArrayRef _CalCalendarItemAddRecurrence(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void _CalCalendarItemRemoveRecurrence(uint64_t a1, void *a2, int a3)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property)
  {
    CalToManyRelationRemoveObject(Property, a2);
    if (a3)
    {
      _CalCalendarItemRemoveAllExceptionDates(a1);
      _CalEventDeleteAllDetachedEvents(a1);
    }
  }
}

void *_CalCalendarItemRemoveAllRecurrences(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationRemoveAllObjects(result);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4) {
            os_unfair_lock_assert_owner(v4 + 20);
          }
        }
      }
    }
    return (void *)CPRecordSetProperty();
  }
  return result;
}

BOOL _CalCalendarItemHasRecurrenceRules(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL CalCalendarItemHasRecurrenceRules(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL HasRecurrenceRules = _CalCalendarItemHasRecurrenceRules(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return HasRecurrenceRules;
}

void CalCalendarItemAddRecurrence(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddRecurrence(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemAddRecurrenceDirectly(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddRecurrence(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveRecurrence(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveRecurrence(a1, a2, 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveRecurrenceDirectly(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveRecurrence(a1, a2, 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopyFirstRecurrence(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFArrayRef v3 = _CalCalendarItemCopyRecurrences(a1);
  if (v3)
  {
    CFArrayRef v4 = v3;
    if (CFArrayGetCount(v3) < 1)
    {
      CFTypeRef v6 = 0;
    }
    else
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(v4, 0);
      CFTypeRef v6 = CFRetain(ValueAtIndex);
    }
    CFRelease(v4);
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

void CalCalendarItemSetRecurrence(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Owner = _CalRecurrenceGetOwner((uint64_t)a2, 0);
  if (Owner && Owner != a1) {
    _CalCalendarItemRemoveRecurrence(Owner, a2, 1);
  }
  CFArrayRef v6 = _CalCalendarItemCopyRecurrences(a1);
  if (v6)
  {
    CFArrayRef v7 = v6;
    CFIndex Count = CFArrayGetCount(v6);
    CFIndex v9 = Count - 1;
    if (Count < 1) {
      goto LABEL_14;
    }
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    char v12 = 0;
    do
    {
      while (1)
      {
        int ValueAtIndex = (void *)CFArrayGetValueAtIndex(v7, v11);
        if (ValueAtIndex != a2) {
          break;
        }
        char v12 = 1;
        if (v9 == v11++) {
          goto LABEL_15;
        }
      }
      _CalCalendarItemRemoveRecurrence(a1, ValueAtIndex, 0);
      ++v11;
    }
    while (v10 != v11);
    if ((v12 & 1) == 0) {
LABEL_14:
    }
      _CalCalendarItemAddRecurrence(a1, a2);
LABEL_15:
    CFRelease(v7);
  }
  _CalCalendarItemRemoveAllExceptionDates(a1);
  _CalEventDeleteAllDetachedEvents(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAllRecurrences(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAllRecurrences(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalCalendarItemHasDirtyNotifiableAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalCalendarItemClearDirtyAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordUnloadProperty();
}

void CalDatabaseRemoveAllCalendarItemsWithCalendarAndEntityType(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  CFArrayRef v4 = (const __CFArray *)CalDatabaseCopyCalendarItemsWithCalendar(a1);
  if (v4)
  {
    CFArrayRef v5 = v4;
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        int ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
        if (a3 == 2) {
          CalRemoveEventAndDetachedEvents(ValueAtIndex);
        }
        else {
          CalRemoveTask(ValueAtIndex);
        }
      }
    }
    CFRelease(v5);
  }
}

uint64_t CalDatabaseCopyCalendarItemsWithCalendar(os_unfair_lock_s *a1)
{
  CFArrayRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = _CalDatabaseCopyCalendarItemsWithCalendar((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

CFMutableArrayRef _CalCalendarItemCopyRelatedResourceChanges(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFMutableArrayRef CalCalendarItemCopyRelatedResourceChanges(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarItemCopyRelatedResourceChanges(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t CalCalendarItemCopyStructuredData(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetStructuredData(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 67, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyLocalStructuredData(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetLocalStructuredData(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalCalendarItemCopyConferences(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CFMutableArrayRef v5 = CalToManyRelationCopyObjects(Property);
  }
  else {
    CFMutableArrayRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalCalendarItemAddConference(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalToManyRelationAddObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void *_CalCalendarItemRemoveConference(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

void CalCalendarItemRemoveConference(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveConference(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAllConferences(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalToManyRelationRemoveAllObjects(Property);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void *_CalCalendarItemSetError(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalCalendarItemSetError(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetError(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalCalendarItemGetError(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

CFTypeRef CalCalendarItemCopyError(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Error = _CalCalendarItemGetError(a1);
  if (Error) {
    CFTypeRef v4 = CFRetain(Error);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetErrorCodeAndUserInfo(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((CalCalendarItemHasErrorCodeAndMaybeUserInfo(a1, a2, 1, a3) & 1) == 0)
  {
    CFArrayRef v6 = (os_unfair_lock_s *)CalCopyDatabaseForEntity(a1);
    CFTypeRef Error = CalDatabaseCreateError(v6);
    CalErrorSetCalendarItemErrorCode((uint64_t)Error, a2, a3);
    CalCalendarItemSetError(a1, Error);
    CFRelease(Error);
    CFRelease(v6);
  }
}

uint64_t CalCalendarItemHasErrorCode(uint64_t a1, uint64_t a2)
{
  return CalCalendarItemHasErrorCodeAndMaybeUserInfo(a1, a2, 0, 0);
}

uint64_t CalCalendarItemHasErrorCodeAndMaybeUserInfo(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  CFTypeRef v7 = CalCalendarItemCopyError(a1);
  if (!v7) {
    return 0;
  }
  CFArrayRef v8 = v7;
  Errorint Type = CalErrorGetErrorType((uint64_t)v7);
  uint64_t ErrorCode = CalErrorGetErrorCode((uint64_t)v8);
  uint64_t v12 = ErrorType == 1 && ErrorCode == a2;
  if (v12 == 1 && a3 != 0)
  {
    CFRange v14 = (void *)CalErrorCopyUserInfo((uint64_t)v8);
    unint64_t v15 = (unint64_t)CalErrorDecodeUserInfo((uint64_t)v14);
    if (a4 | v15) {
      uint64_t v12 = [(id)a4 isEqual:v15];
    }
    else {
      uint64_t v12 = 1;
    }
  }
  CFRelease(v8);
  return v12;
}

CFTypeRef CalDatabaseCopyCalendarItemWithUUID(os_unfair_lock_s *a1)
{
  CFArrayRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v6 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (v6)
  {
    CFArrayRef v7 = v6;
    if (CFArrayGetCount(v6) < 1)
    {
      CFTypeRef v9 = 0;
    }
    else
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      CFTypeRef v9 = CFRetain(ValueAtIndex);
    }
    CFRelease(v7);
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v9;
}

uint64_t __CalDatabaseCopyCalendarItemWithUUID_block_invoke(uint64_t a1, uint64_t a2)
{
  CFArrayRef v2 = *(sqlite3_stmt **)(a2 + 8);
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(*(const __CFString **)(a1 + 32));
  BOOL v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
  return sqlite3_bind_text(v2, 1, CStringFromCFString, -1, v4);
}

uint64_t CalDatabaseCopyCalendarItemsWithUUIDs(os_unfair_lock_s *a1, const __CFArray *a2, const __CFArray *a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"WHERE UUID IN (");
  CFIndex Count = CFArrayGetCount(a2);
  CFIndex v8 = Count - 1;
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    for (CFIndex i = 0; i != v9; ++i)
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      if (v8 == i) {
        CFStringAppendFormat(Mutable, 0, @"'%@'"), ValueAtIndex);
      }
      else {
        CFStringAppendFormat(Mutable, 0, @"'%@',", ValueAtIndex);
      }
    }
  }
  if (a3)
  {
    CFIndex v12 = CFArrayGetCount(a3);
    CFIndex v13 = v12 - 1;
    if (v12 >= 1)
    {
      CFIndex v14 = v12;
      CFStringAppendFormat(Mutable, 0, @" AND calendar_id IN (");
      for (CFIndex j = 0; j != v14; ++j)
      {
        uint64_t v16 = CFArrayGetValueAtIndex(a3, j);
        uint64_t v17 = [v16 intValue];
        if (v13 == j) {
          CFStringAppendFormat(Mutable, 0, @"'%i'"), v17);
        }
        else {
          CFStringAppendFormat(Mutable, 0, @"'%i',", v17);
        }
      }
    }
  }
  BOOL v18 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v20 = RecordStore == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v22 = CPRecordStoreCopyAllInstancesOfClassWhere();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v18);
  }
  os_unfair_lock_unlock(v18);
  CFRelease(Mutable);
  return v22;
}

uint64_t CalDatabaseCopyCalendarItemsWithCalendarFilter(os_unfair_lock_s *a1, int a2, void *a3)
{
  if ((a2 & 0xFFFFFFFE) != 2) {
    CalDatabaseCopyCalendarItemsWithCalendarFilter_cold_1();
  }
  CFMutableArrayRef v5 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"WHERE entity_type = ?");
  if (a3)
  {
    CFArrayRef v7 = _CalFilterCopyCalendarIDClauseForQuery(a3, @"calendar_id");
    if (v7)
    {
      CFIndex v8 = v7;
      CFStringAppendFormat(Mutable, 0, @" AND %@", v7);
      CFRelease(v8);
    }
  }
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = RecordStore == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v12 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5);
  }
  os_unfair_lock_unlock(v5);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v12;
}

uint64_t __CalDatabaseCopyCalendarItemsWithCalendarFilter_block_invoke(uint64_t a1, uint64_t a2)
{
  return sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 32));
}

id CalDatabaseCopyCalendarItemUUIDs(os_unfair_lock_s *a1, int a2)
{
  if ((a2 + 1) > 4 || ((1 << (a2 + 1)) & 0x19) == 0)
  {
    CFMutableArrayRef v5 = [MEMORY[0x1E4F28B00] currentHandler];
    CFArrayRef v6 = objc_msgSend(NSString, "stringWithUTF8String:", "NSArray<NSString *> *CalDatabaseCopyCalendarItemUUIDs(CalDatabaseRef, CalEntityType)");
    [v5 handleFailureInFunction:v6, @"CalCalendarItem.m", 3247, @"Invalid parameter not satisfying: %@", @"entityType == CalEventEntity || entityType == CalTaskEntity || entityType == CalUndefinedEntity" file lineNumber description];
  }
  id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  CFIndex v8 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = RecordStore == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        CFIndex v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    uint64_t v14 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    if (v14)
    {
      uint64_t v15 = v14;
      MutableCFArrayRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT UUID FROM CalendarItem");
      uint64_t v17 = MutableCopy;
      if (a2 != -1) {
        CFStringAppend(MutableCopy, @" WHERE entity_type = ?");
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v15)
        {
          if (*(void *)(*(void *)v15 + 104))
          {
            BOOL v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18) {
              os_unfair_lock_assert_owner(v18 + 20);
            }
          }
        }
      }
      int v19 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      CFRelease(v17);
      if (v19)
      {
        if (a2 != -1) {
          sqlite3_bind_int((sqlite3_stmt *)v19[1], 1, a2);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v19)
          {
            uint64_t v20 = **v19;
            if (v20)
            {
              if (*(void *)(v20 + 104))
              {
                CFIndex v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v21) {
                  os_unfair_lock_assert_owner(v21 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v19)
          {
            uint64_t v22 = **v19;
            if (v22)
            {
              if (*(void *)(v22 + 104))
              {
                int v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v23) {
                  os_unfair_lock_assert_owner(v23 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v15)
        {
          if (*(void *)(*(void *)v15 + 104))
          {
            int v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v24) {
              os_unfair_lock_assert_owner(v24 + 20);
            }
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v8);
  }
  os_unfair_lock_unlock(v8);
  BOOL v25 = (void *)[v7 copy];

  return v25;
}

uint64_t __CalendarItemUUIDRowHandler(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    BOOL v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
    if (v4)
    {
      CFMutableArrayRef v5 = v4;
      CFArrayRef v6 = [NSString stringWithUTF8String:v4];
      if (v6)
      {
        [v3 addObject:v6];
      }
      else
      {
        BOOL v10 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          int v12 = 136315138;
          CFIndex v13 = v5;
          _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_ERROR, "Could not get uuid string from utf8 string = %s", (uint8_t *)&v12, 0xCu);
        }
      }
    }
    else
    {
      CFIndex v9 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_ERROR, "Could not get uuid column text for sqlite statement", (uint8_t *)&v12, 2u);
      }
    }
    uint64_t v8 = 0;
  }
  else
  {
    id v7 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_ERROR, "Calendar item row handler has no uuid context. Aborting sqlite statement.", (uint8_t *)&v12, 2u);
    }
    uint64_t v8 = 1;
  }

  return v8;
}

uint64_t CalDatabaseCopyCalendarItems(os_unfair_lock_s *a1, int a2)
{
  return CalDatabaseCopyCalendarItemsWithCalendarFilter(a1, a2, 0);
}

uint64_t CalDatabaseCopyCalendarItemsWithStoreID(os_unfair_lock_s *a1, int a2)
{
  if ((a2 & 0xFFFFFFFE) != 2) {
    CalDatabaseCopyCalendarItemsWithStoreID_cold_1();
  }
  id v3 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v7 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3);
  }
  os_unfair_lock_unlock(v3);
  return v7;
}

uint64_t __CalDatabaseCopyCalendarItemsWithStoreID_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 32));
  BOOL v4 = *(sqlite3_stmt **)(a2 + 8);
  int v5 = *(_DWORD *)(a1 + 36);
  return sqlite3_bind_int(v4, 2, v5);
}

uint64_t _CalDatabaseCopyCalendarItemsWithCalendar(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
}

BOOL _CalDatabaseCalendarHasCalendarItemsWithEntityType(uint64_t a1, uint64_t a2, int a3)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = Database == 0;
  }
  else {
    BOOL v8 = 1;
  }
  int v9 = !v8;
  if (a3 == 101)
  {
    if (!v9) {
      goto LABEL_22;
    }
    if (!*(void *)(Database + 104)) {
      goto LABEL_22;
    }
    BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!v10) {
      goto LABEL_22;
    }
LABEL_21:
    os_unfair_lock_assert_owner(v10 + 20);
    goto LABEL_22;
  }
  if (v9)
  {
    if (*(void *)(Database + 104))
    {
      BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v11 = CPSqliteDatabaseStatementForReading();
  if (!v11) {
    return 0;
  }
  uint64_t v12 = v11;
  CFIndex v13 = *(sqlite3_stmt **)(v11 + 8);
  if (v13)
  {
    if (a3 == 101)
    {
      int v14 = 1;
    }
    else
    {
      sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 1, a3);
      CFIndex v13 = *(sqlite3_stmt **)(v12 + 8);
      int v14 = 2;
    }
    int ID = CPRecordGetID();
    sqlite3_bind_int(v13, v14, ID);
    BOOL v15 = sqlite3_step(*(sqlite3_stmt **)(v12 + 8)) == 100;
  }
  else
  {
    BOOL v15 = 0;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)v12)
    {
      uint64_t v17 = **(void **)v12;
      if (v17)
      {
        if (*(void *)(v17 + 104))
        {
          BOOL v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18) {
            os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  return v15;
}

uint64_t CalDatabaseGetCountOfCalendarItemsInStore(const void *a1, int a2, uint64_t a3)
{
  if (a3) {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    BOOL v5 = (os_unfair_lock_s *)CFRetain(a1);
  }
  CFArrayRef v6 = v5;
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  os_unfair_lock_lock(v6 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v6);
  if (a2 == 101) {
    a2 = 0;
  }
  if (a3)
  {
    CFStringAppend(Mutable, @"JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = ?");
    if (a2 < 1) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  CFStringAppend(Mutable, @"WHERE 1=1");
  if (a2 > 0) {
LABEL_8:
  }
    CFStringAppend(Mutable, @" AND entity_type = ?");
LABEL_9:
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = RecordStore == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CountOfInstancesOfClassWithFilterAndBindBos_unfair_lock_t lock = CPRecordStoreGetCountOfInstancesOfClassWithFilterAndBindBlock();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6 + 20);
  }
  os_unfair_lock_unlock(v6 + 20);
  CFRelease(v6);
  CFRelease(Mutable);
  return CountOfInstancesOfClassWithFilterAndBindBlock & ~(CountOfInstancesOfClassWithFilterAndBindBlock >> 31);
}

uint64_t __CalDatabaseGetCountOfCalendarItemsInStore_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    BOOL v5 = *(sqlite3_stmt **)(a2 + 8);
    int ID = CPRecordGetID();
    uint64_t result = sqlite3_bind_int(v5, 1, ID);
    int v7 = 2;
  }
  else
  {
    int v7 = 1;
  }
  int v8 = *(_DWORD *)(a1 + 40);
  if (v8 >= 1)
  {
    BOOL v9 = *(sqlite3_stmt **)(a2 + 8);
    return sqlite3_bind_int(v9, v7, v8);
  }
  return result;
}

CFTypeRef CalDatabaseCopyEntityWithPropertyInCalendarOrStore(os_unfair_lock_s *a1, int a2, uint64_t a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFArrayRef v7 = (const __CFArray *)CalDatabaseCopyAllEntitiesWithPropertyInCalendarOrStore(a1, a2, a3, a4, a5, a6, a7, 1);
  if (!v7) {
    return 0;
  }
  CFArrayRef v8 = v7;
  if (CFArrayGetCount(v7) < 1)
  {
    CFTypeRef v10 = 0;
  }
  else
  {
    int ValueAtIndex = CFArrayGetValueAtIndex(v8, 0);
    CFTypeRef v10 = CFRetain(ValueAtIndex);
  }
  CFRelease(v8);
  return v10;
}

uint64_t CalDatabaseCopyAllEntitiesWithPropertyInCalendarOrStore(os_unfair_lock_s *cf, int a2, uint64_t a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v14 = cf;
  if (!a5 && !a6)
  {
    if (cf)
    {
      CFRetain(cf);
      if (!a4) {
        goto LABEL_13;
      }
      goto LABEL_5;
    }
    return 0;
  }
  int v14 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v14) {
    return 0;
  }
  if (!a4)
  {
LABEL_13:
    CFRelease(v14);
    return 0;
  }
LABEL_5:
  CStringFromCFString = CalCreateCStringFromCFString(a4);
  if (!CStringFromCFString) {
    goto LABEL_13;
  }
  uint64_t v16 = CStringFromCFString;
  CFStringRef SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
  {
    free(v16);
    CFRelease(v14);
    return 0;
  }
  BOOL v18 = SelectPrefix;
  CFStringAppendFormat(SelectPrefix, 0, @" WHERE");
  if (a2 != -1) {
    CFStringAppendFormat(v18, 0, @" entity_type = ? AND");
  }
  CFStringAppendFormat(v18, 0, @" %@ = ?", a3);
  if (a5)
  {
    CFStringRef v19 = @" AND calendar_id = ?";
LABEL_19:
    CFStringAppend(v18, v19);
    goto LABEL_20;
  }
  if (a6)
  {
    CFStringRef v19 = @" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)";
    goto LABEL_19;
  }
LABEL_20:
  if (a8) {
    CFStringAppend(v18, @" LIMIT 1");
  }
  os_unfair_lock_lock(v14 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v14);
  uint64_t v23 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26) {
          os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
  }
  uint64_t v27 = CPSqliteDatabaseStatementForReading();
  if (v27)
  {
    uint64_t v28 = v27;
    if (a2 == -1)
    {
      int v29 = 1;
    }
    else
    {
      sqlite3_bind_int(*(sqlite3_stmt **)(v27 + 8), 1, a2);
      int v29 = 2;
    }
    sqlite3_bind_text(*(sqlite3_stmt **)(v28 + 8), v29, (const char *)v16, -1, 0);
    if (a5 || a6)
    {
      int v30 = v29 + 1;
      uint64_t v31 = *(sqlite3_stmt **)(v28 + 8);
      int ID = CPRecordGetID();
      sqlite3_bind_int(v31, v30, ID);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (v23)
      {
        BOOL v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33) {
          os_unfair_lock_assert_owner(v33 + 20);
        }
      }
    }
    uint64_t v20 = CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v14 + 20);
  }
  os_unfair_lock_unlock(v14 + 20);
  CFRelease(v18);
  free(v16);
  CFRelease(v14);
  return v20;
}

CFTypeRef CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyEntityWithPropertyInCalendarOrStore(a1, a2, @"unique_identifier", a3, a4, a5, (uint64_t)&kCalEventClass);
}

uint64_t CalDatabaseCopyAllCalendarItemsWithUniqueIdentifierInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyAllEntitiesWithPropertyInCalendarOrStore(a1, a2, @"unique_identifier", a3, a4, a5, (uint64_t)&kCalEventClass, 0);
}

uint64_t CalDatabaseCopyCalendarItemsWithUniqueIdentifier(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  id v3 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock(v3);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3);
  }
  os_unfair_lock_unlock(v3);
  return v6;
}

uint64_t __CalDatabaseCopyCalendarItemsWithUniqueIdentifier_block_invoke(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(sqlite3_stmt **)(a2 + 8);
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(*(const __CFString **)(a1 + 32));
  BOOL v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
  return sqlite3_bind_text(v2, 1, CStringFromCFString, -1, v4);
}

CFTypeRef CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyEntityWithPropertyInCalendarOrStore(a1, a2, @"external_id", a3, a4, a5, (uint64_t)&kCalEventClass);
}

uint64_t _CompareAttendeeStringProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v2 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      id v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v3) {
        os_unfair_lock_assert_owner(v3 + 20);
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (!(v2 | v4)) {
    return 1;
  }
  CFStringRef v5 = (const __CFString *)v4;
  if (v2 && v4)
  {
    BOOL v6 = CFStringGetLength((CFStringRef)v2) >= 1
      && CFStringGetLength(v5) >= 1
      && CFEqual((CFStringRef)v2, v5);
LABEL_22:
    CFRelease((CFTypeRef)v2);
    if (!v5) {
      return v6;
    }
    goto LABEL_19;
  }
  BOOL v6 = 0;
  if (v2) {
    goto LABEL_22;
  }
  if (v4) {
LABEL_19:
  }
    CFRelease(v5);
  return v6;
}

void CalMigrateTableFull(void *a1, const char **a2, uint64_t a3, const char **a4, const char **a5, const char **a6, const char **a7, const char **a8, unsigned int a9)
{
  CFStringRef v15 = CFStringCreateWithCStringNoCopy(0, *a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  CFStringRef v16 = v15;
  if (a3) {
    uint64_t v17 = a3;
  }
  else {
    uint64_t v17 = (uint64_t)v15;
  }
  if (a5)
  {
    CFStringRef v18 = CFStringCreateWithFormat(0, 0, @"%@Changes", v17);
    CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"%@Changes", v16);
  }
  else
  {
    CFStringRef v18 = 0;
    CFStringRef v19 = 0;
  }
  CalMigrationDropIndexes(a1, a6);
  CalMigrationDropIndexes(a1, a7);
  CalMigrationDropTriggers(a1, a8);
  RenameTableToTemp(a1, v17);
  if (v18) {
    RenameTableToTemp(a1, (uint64_t)v18);
  }
  CPRecordStoreCreateTablesForClass();
  MoveTableData(a1, v17, (uint64_t)v16, a4, a9);
  if (a5)
  {
    MoveTableData(a1, (uint64_t)v18, (uint64_t)v19, a5, a9);
    DropTempTable(a1, v17);
    uint64_t v17 = (uint64_t)v18;
  }
  DropTempTable(a1, v17);
  CalMigrationCreateIndexes(a1, a2, a6, a7);
  CalMigrationCreateTriggers(a1, a2, a8);
  if (v18) {
    CFRelease(v18);
  }
  if (v19) {
    CFRelease(v19);
  }
  CFRelease(v16);
}

void CalMigrationDropIndexes(void *a1, const char **a2)
{
  if (a2)
  {
    id v3 = *a2;
    if (v3)
    {
      CFStringRef v5 = a2 + 5;
      do
      {
        CFStringRef v6 = CFStringCreateWithCString(0, v3, 0x600u);
        if (v6)
        {
          CFStringRef v7 = v6;
          CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"DROP INDEX IF EXISTS %@;", v6);
          if (v8)
          {
            CFStringRef v9 = v8;
            CalPerformSQLWithConnection(a1, (uint64_t)v8);
            CFRelease(v9);
          }
          CFRelease(v7);
        }
        CFTypeRef v10 = *v5;
        v5 += 5;
        id v3 = v10;
      }
      while (v10);
    }
  }
}

void CalMigrationDropTriggers(void *a1, const char **a2)
{
  if (a2)
  {
    id v3 = *a2;
    if (v3)
    {
      CFStringRef v5 = a2 + 4;
      do
      {
        CFStringRef v6 = CFStringCreateWithCString(0, v3, 0x600u);
        if (v6)
        {
          CFStringRef v7 = v6;
          CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"DROP TRIGGER IF EXISTS %@;", v6);
          if (v8)
          {
            CFStringRef v9 = v8;
            CalPerformSQLWithConnection(a1, (uint64_t)v8);
            CFRelease(v9);
          }
          CFRelease(v7);
        }
        CFTypeRef v10 = *v5;
        v5 += 4;
        id v3 = v10;
      }
      while (v10);
    }
  }
}

void RenameTableToTemp(void *a1, uint64_t a2)
{
  DropTempTable(a1, a2);
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"ALTER TABLE %@ RENAME TO %@_;", a2, a2);
  if (v4)
  {
    CFStringRef v5 = v4;
    CalPerformSQLWithConnection(a1, (uint64_t)v4);
    CFRelease(v5);
  }
}

void MoveTableData(void *a1, uint64_t a2, uint64_t a3, const char **a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringRef v8 = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, @"ROWID");
  CFStringRef theString = v8;
  CFStringAppend(v8, @"ROWID");
  CFStringRef v9 = *a4;
  if (*a4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v40 = Mutable;
    uint64_t v12 = 1;
    while (1)
    {
      uint64_t v13 = v10;
      uint64_t v10 = v12;
      CFStringRef v14 = CFStringCreateWithCString(0, v9, 0x600u);
      CFStringRef v15 = &a4[4 * v13];
      int v17 = *((_DWORD *)v15 + 3);
      CFStringRef v16 = (_DWORD *)v15 + 3;
      if (v17 == -1)
      {
        CFStringAppend(theString, @", ");
        CFStringAppend(theString, v14);
        if (SLODWORD(a4[4 * v13 + 1]) > (int)a5 || (*v16 != -1 ? (BOOL v18 = *v16 < (int)a5) : (BOOL v18 = 0), v18))
        {
          uint64_t v19 = a5;
          uint64_t v20 = &a4[4 * v13];
          if (!v20[2]) {
            goto LABEL_33;
          }
          if (!v11)
          {
            uint64_t v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (*a4)
            {
              CFIndex v21 = a4 + 2;
              do
              {
                uint64_t v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, v21 - 1);
                CFDictionaryAddValue(v22, @"firstVersion", v23);
                CFRelease(v23);
                if (*((_DWORD *)v21 - 1) != -1)
                {
                  CFNumberRef v24 = CFNumberCreate(0, kCFNumberIntType, (char *)v21 - 4);
                  CFDictionaryAddValue(v22, @"lastVersion", v24);
                  CFRelease(v24);
                }
                if (*v21)
                {
                  CFStringRef v25 = CFStringCreateWithCString(0, *v21, 0x600u);
                  CFDictionaryAddValue(v22, @"oldName", v25);
                  CFRelease(v25);
                }
                uint64_t v26 = v21[1];
                if (v26)
                {
                  CFStringRef v27 = CFStringCreateWithCString(0, v26, 0x600u);
                  CFDictionaryAddValue(v22, @"defaultText", v27);
                  CFRelease(v27);
                }
                CFStringRef v28 = CFStringCreateWithCString(0, *(v21 - 2), 0x600u);
                CFDictionaryAddValue(v11, v28, v22);
                CFRelease(v28);
                CFRelease(v22);
                int v29 = v21[2];
                v21 += 4;
              }
              while (v29);
              CFMutableDictionaryRef Mutable = v40;
            }
          }
          CFStringRef v30 = CFStringCreateWithCString(0, v20[2], 0x600u);
          int v31 = -1;
          int valuePtr = -1;
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, v30);
          if (Value && (CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(Value, @"firstVersion")) != 0)
          {
            CFNumberGetValue(v33, kCFNumberIntType, &valuePtr);
            int v34 = valuePtr;
          }
          else
          {
            int v34 = -1;
          }
          int v46 = -1;
          CFDictionaryRef v35 = (const __CFDictionary *)CFDictionaryGetValue(v11, v30);
          if (v35)
          {
            CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v35, @"lastVersion");
            if (v36)
            {
              CFNumberGetValue(v36, kCFNumberIntType, &v46);
              int v31 = v46;
            }
          }
          if (v34 > (int)v19 || v31 != -1 && v31 < (int)v19)
          {
            CFRelease(v30);
LABEL_33:
            long long v37 = v20[3];
            if (v37) {
              CFStringRef v38 = CFStringCreateWithCString(0, v37, 0x600u);
            }
            else {
              CFStringRef v38 = @"NULL";
            }
            a5 = v19;
            CFStringAppend(Mutable, @", ");
            CFStringAppend(Mutable, v38);
            CFRelease(v38);
            goto LABEL_37;
          }
          CFStringAppend(Mutable, @", ");
          CFStringAppend(Mutable, v30);
          CFRelease(v30);
          a5 = v19;
        }
        else
        {
          CFStringAppend(Mutable, @", ");
          CFStringAppend(Mutable, v14);
        }
      }
LABEL_37:
      CFRelease(v14);
      uint64_t v12 = v10 + 1;
      CFStringRef v9 = a4[4 * v10];
      if (!v9) {
        goto LABEL_41;
      }
    }
  }
  uint64_t v11 = 0;
LABEL_41:
  CFStringRef v39 = CFStringCreateWithFormat(0, 0, @"INSERT INTO %@ (%@) SELECT %@ FROM %@_;", a3, theString, Mutable, a2);
  CFRelease(Mutable);
  CFRelease(theString);
  if (v11) {
    CFRelease(v11);
  }
  if (v39)
  {
    CalPerformSQLWithConnection(a1, (uint64_t)v39);
    CFRelease(v39);
  }
}

void DropTempTable(void *a1, uint64_t a2)
{
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"DROP TABLE IF EXISTS %@_;", a2);
  if (v3)
  {
    CFStringRef v4 = v3;
    CalPerformSQLWithConnection(a1, (uint64_t)v3);
    CFRelease(v4);
  }
}

void CalMigrationCreateIndexes(void *a1, const char **a2, const char **a3, const char **a4)
{
  CFStringRef v8 = (__CFString *)CFStringCreateWithCStringNoCopy(0, *a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  _CalMigrationCreateIndexes(a1, (uint64_t)v8, a3);
  if (a4)
  {
    CFStringRef v7 = [(__CFString *)v8 stringByAppendingString:@"Changes"];
    _CalMigrationCreateIndexes(a1, (uint64_t)v7, a4);
  }
}

void CalMigrationCreateTriggers(void *a1, const char **a2, const char **a3)
{
  CFStringRef v5 = CFStringCreateWithCStringNoCopy(0, *a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (a3)
  {
    CFStringRef v6 = *a3;
    if (*a3)
    {
      CFStringRef v7 = a3 + 2;
      do
      {
        if (*((_DWORD *)v7 - 1) == -1 && !*(_DWORD *)v7)
        {
          CFStringRef v8 = CFStringCreateWithCString(0, v6, 0x600u);
          CFStringRef v9 = CFStringCreateWithCString(0, v7[1], 0x600u);
          CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"CREATE TRIGGER %@ %@ ON %@\nBEGIN\n%@\nEND;",
                  v8,
                  @"AFTER DELETE",
                  v5,
                  v9);
          if (v10)
          {
            CFStringRef v11 = v10;
            CalPerformSQLWithConnection(a1, (uint64_t)v10);
            CFRelease(v11);
          }
          CFRelease(v8);
          CFRelease(v9);
        }
        CFStringRef v6 = v7[2];
        v7 += 4;
      }
      while (v6);
    }
  }
  CFRelease(v5);
}

void CalMigrateTableFull2(void *a1, const char **a2, uint64_t a3, const char **a4, void *a5, const char **a6, void *a7, void *a8, const char **a9, const char **a10, const char **a11, int a12)
{
  uint64_t v26 = a4;
  id v27 = a7;
  BOOL v18 = a8;
  uint64_t v19 = *a2;
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  id v21 = a5;
  CFStringRef v22 = CFStringCreateWithCStringNoCopy(0, v19, 0x8000100u, v20);
  CFStringRef v23 = v22;
  if (!a3) {
    a3 = (uint64_t)v22;
  }
  if (a6)
  {
    CFStringRef v24 = CFStringCreateWithFormat(0, 0, @"%@Changes", a3, v26);
    CFStringRef v25 = CFStringCreateWithFormat(0, 0, @"%@Changes", v23);
  }
  else
  {
    CFStringRef v24 = 0;
    CFStringRef v25 = 0;
  }
  CalMigrationDropIndexes(a1, a9);
  CalMigrationDropIndexes(a1, a10);
  CalMigrationDropTriggers(a1, a11);
  RenameTableToTemp(a1, a3);
  if (v24) {
    RenameTableToTemp(a1, (uint64_t)v24);
  }
  CPRecordStoreCreateTablesForClass();
  MoveTableData2((uint64_t)a1, a3, (uint64_t)v23, v26, v21, a12);

  if (a6) {
    MoveTableData2((uint64_t)a1, (uint64_t)v24, (uint64_t)v25, a6, v27, a12);
  }
  if (v18) {
    v18[2](v18);
  }
  DropTempTable(a1, a3);
  if (a6) {
    DropTempTable(a1, (uint64_t)v24);
  }
  CalMigrationCreateIndexes(a1, a2, a9, a10);
  CalMigrationCreateTriggers(a1, a2, a11);
  if (v24) {
    CFRelease(v24);
  }
  if (v25) {
    CFRelease(v25);
  }
  CFRelease(v23);
}

void MoveTableData2(uint64_t a1, uint64_t a2, uint64_t a3, const char **a4, void *a5, int a6)
{
  id v47 = a5;
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, @"ROWID");
  CFStringRef v11 = *a4;
  if (*a4)
  {
    uint64_t v12 = a4 + 6;
    do
    {
      if (*((_DWORD *)v12 - 9) <= a6)
      {
        int v13 = *((_DWORD *)v12 - 8);
        if (v13 == -1 || v13 >= a6)
        {
          CFStringRef v15 = CFStringCreateWithCString(0, v11, 0x600u);
          CFStringAppendFormat(Mutable, 0, @", %@", v15);
          CFRelease(v15);
        }
      }
      CFStringRef v16 = (const char *)*v12;
      v12 += 6;
      CFStringRef v11 = v16;
    }
    while (v16);
  }
  CFStringRef v48 = CFStringCreateWithFormat(0, 0, @"SELECT %@ FROM %@_;", Mutable, a2);
  CFRelease(Mutable);
  int v17 = CFStringCreateMutable(0, 0);
  BOOL v18 = CFStringCreateMutable(0, 0);
  CFStringAppend(v17, @"ROWID");
  CFStringAppend(v18, @"?");
  uint64_t v19 = *a4;
  if (*a4)
  {
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    id v21 = a4 + 6;
    do
    {
      if (*((_DWORD *)v21 - 8) == -1)
      {
        CFStringRef v22 = CFStringCreateWithCStringNoCopy(0, v19, 0x600u, v20);
        CFStringAppendFormat(v17, 0, @", %@", v22);
        CFStringAppend(v18, @", ?");
        CFRelease(v22);
      }
      CFStringRef v23 = (const char *)*v21;
      v21 += 6;
      uint64_t v19 = v23;
    }
    while (v23);
  }
  CFStringRef v24 = CFStringCreateWithFormat(0, 0, @"INSERT INTO %@ (%@) VALUES(%@);", a3, v17, v18);
  CFRelease(v17);
  CFRelease(v18);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a1)
      {
        if (*(void *)(*(void *)a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  if (CPSqliteConnectionStatementForSQL())
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a1)
        {
          if (*(void *)(*(void *)a1 + 104))
          {
            uint64_t v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v26) {
              os_unfair_lock_assert_owner(v26 + 20);
            }
          }
        }
      }
    }
    uint64_t v27 = CPSqliteConnectionStatementForSQL();
    if (v27)
    {
      long long v44 = (uint64_t **)v27;
      CFStringRef v46 = v24;
      CFStringRef v28 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (*a4)
      {
        int v29 = a4 + 3;
        CFStringRef v30 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
        int v31 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
        do
        {
          CFIndex v32 = CFDictionaryCreateMutable(0, 0, v30, v31);
          CFNumberRef v33 = CFNumberCreate(0, kCFNumberIntType, (char *)v29 - 12);
          CFDictionaryAddValue(v32, @"firstVersion", v33);
          CFRelease(v33);
          if (*((_DWORD *)v29 - 2) != -1)
          {
            CFNumberRef v34 = CFNumberCreate(0, kCFNumberIntType, v29 - 1);
            CFDictionaryAddValue(v32, @"lastVersion", v34);
            CFRelease(v34);
          }
          if (*v29)
          {
            CFStringRef v35 = CFStringCreateWithCString(0, *v29, 0x600u);
            CFDictionaryAddValue(v32, @"oldName", v35);
            CFRelease(v35);
          }
          CFNumberRef v36 = v29[1];
          if (v36)
          {
            CFStringRef v37 = CFStringCreateWithCString(0, v36, 0x600u);
            CFDictionaryAddValue(v32, @"defaultText", v37);
            CFRelease(v37);
          }
          CFStringRef v38 = CFStringCreateWithCString(0, *(v29 - 3), 0x600u);
          CFDictionaryAddValue(v28, v38, v32);
          CFRelease(v38);
          CFRelease(v32);
          CFStringRef v39 = v29[3];
          v29 += 6;
        }
        while (v39);
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*v44)
        {
          uint64_t v40 = **v44;
          if (v40)
          {
            if (*(void *)(v40 + 104))
            {
              long long v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v41) {
                os_unfair_lock_assert_owner(v41 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      CFStringRef v24 = v46;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v44)
        {
          uint64_t v42 = **v44;
          if (v42)
          {
            if (*(void *)(v42 + 104))
            {
              long long v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v43) {
                os_unfair_lock_assert_owner(v43 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
      CFRelease(v28);
    }
  }
  CFRelease(v48);
  CFRelease(v24);
}

void CalMigrateTable(void *a1, uint64_t a2, uint64_t a3, const char **a4, uint64_t a5)
{
  if (a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a3;
  }
  MoveTableData(a1, v6, a3, a4, a5);
  DropTempTable(a1, v6);
}

void _CalMigrationCreateIndexes(void *a1, uint64_t a2, const char **a3)
{
  if (a3)
  {
    CFStringRef v4 = *a3;
    if (*a3)
    {
      uint64_t v6 = a3 + 5;
      do
      {
        if (*((_DWORD *)v6 - 6) == -1)
        {
          CFStringRef v7 = CFStringCreateWithCString(0, v4, 0x600u);
          CFStringRef v8 = CFStringCreateWithCString(0, (const char *)*(v6 - 2), 0x600u);
          CFStringRef v9 = (const char *)*(v6 - 1);
          if (v9) {
            CFStringRef v10 = (void *)CFStringCreateWithCString(0, v9, 0x600u);
          }
          else {
            CFStringRef v10 = (void *)CFRetain(&stru_1EFF6D0F0);
          }
          CFStringRef v11 = v10;
          uint64_t v12 = @"UNIQUE ";
          if (!*((unsigned char *)v6 - 32)) {
            uint64_t v12 = &stru_1EFF6D0F0;
          }
          if (*(v6 - 1)) {
            int v13 = @" WHERE ";
          }
          else {
            int v13 = &stru_1EFF6D0F0;
          }
          CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"CREATE %@INDEX %@ on %@(%@)%@%@;", v12, v7, a2, v8, v13, v10);
          if (v14)
          {
            CFStringRef v15 = v14;
            CalPerformSQLWithConnection(a1, (uint64_t)v14);
            CFRelease(v15);
          }
          CFRelease(v7);
          CFRelease(v8);
          CFRelease(v11);
        }
        CFStringRef v16 = (const char *)*v6;
        v6 += 5;
        CFStringRef v4 = v16;
      }
      while (v16);
    }
  }
}

uint64_t MigrateRow(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v5 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  if (v5 >= 1)
  {
    int v6 = v5;
    int v7 = 0;
    CFStringRef v8 = (const void *)*MEMORY[0x1E4F1D260];
    do
    {
      CFStringRef v9 = sqlite3_column_name(*(sqlite3_stmt **)(a1 + 8), v7);
      CFStringRef v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
      CFStringRef v11 = v8;
      switch(sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), v7))
      {
        case 1:
          LODWORD(valuePtr) = 0;
          LODWORD(valuePtr) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v7);
          CFNumberType v12 = kCFNumberIntType;
          goto LABEL_6;
        case 2:
          double valuePtr = 0.0;
          double valuePtr = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), v7);
          CFNumberType v12 = kCFNumberDoubleType;
LABEL_6:
          int v13 = CFNumberCreate(0, v12, &valuePtr);
          break;
        case 3:
          CFStringRef v14 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v7);
          CFStringRef v11 = v8;
          if (!v14) {
            goto LABEL_12;
          }
          int v13 = (void *)CFStringCreateWithCString(0, (const char *)v14, 0x8000100u);
          break;
        case 4:
          unsigned int v15 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), v7);
          CFStringRef v16 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 8), v7);
          CFStringRef v11 = v8;
          if (!v16) {
            goto LABEL_12;
          }
          int v13 = CFDataCreate(0, v16, v15);
          break;
        case 5:
          goto LABEL_12;
        default:
          goto LABEL_14;
      }
      CFStringRef v11 = v13;
LABEL_12:
      if (v11)
      {
        CFDictionarySetValue(Mutable, v10, v11);
        CFRelease(v11);
      }
LABEL_14:
      CFRelease(v10);
      ++v7;
    }
    while (v6 != v7);
  }
  int v17 = *(sqlite3_stmt **)(*(void *)(a2 + 24) + 8);
  int v18 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  sqlite3_bind_int(v17, 1, v18);
  uint64_t v19 = *(const char ***)(a2 + 8);
  CFAllocatorRef v20 = *v19;
  if (*v19)
  {
    uint64_t v21 = 0;
    CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    int v23 = 2;
    while (LODWORD(v19[v21 + 2]) != -1)
    {
LABEL_43:
      CFAllocatorRef v20 = v19[v21 + 6];
      v21 += 6;
      if (!v20) {
        goto LABEL_54;
      }
    }
    CFStringRef v24 = CFStringCreateWithCStringNoCopy(0, v20, 0x8000100u, v22);
    CFDictionaryRef Value = CFDictionaryGetValue(Mutable, v24);
    if (Value) {
      goto LABEL_19;
    }
    uint64_t v30 = *(void *)(a2 + 40);
    if (v30)
    {
      CFDictionaryRef Value = (const void *)(*(uint64_t (**)(uint64_t, CFStringRef, __CFDictionary *))(v30 + 16))(v30, v24, Mutable);
      if (Value)
      {
LABEL_20:
        CFTypeID v26 = CFGetTypeID(Value);
        if (v26 == CFNumberGetTypeID())
        {
          int v27 = (int)v19[v21 + 1];
          if (v27 == 1)
          {
            LODWORD(valuePtr) = 0;
            CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr);
            sqlite3_bind_int(*(sqlite3_stmt **)(*(void *)(a2 + 24) + 8), v23, SLODWORD(valuePtr));
          }
          else if (v27 == 2)
          {
            double valuePtr = 0.0;
            CFNumberGetValue((CFNumberRef)Value, kCFNumberDoubleType, &valuePtr);
            sqlite3_bind_double(*(sqlite3_stmt **)(*(void *)(a2 + 24) + 8), v23, valuePtr);
          }
          goto LABEL_41;
        }
        CFTypeID v28 = CFGetTypeID(Value);
        if (v28 == CFStringGetTypeID())
        {
          int v29 = (const char *)_CPCreateUTF8StringFromCFString();
          sqlite3_bind_text(*(sqlite3_stmt **)(*(void *)(a2 + 24) + 8), v23, v29, -1, MEMORY[0x1E4F14838]);
LABEL_41:
          CFRelease(Value);
          goto LABEL_42;
        }
        CFTypeID v35 = CFGetTypeID(Value);
        if (v35 == CFDataGetTypeID())
        {
          BytePtr = CFDataGetBytePtr((CFDataRef)Value);
          CFIndex Length = CFDataGetLength((CFDataRef)Value);
          if (Length == (int)Length)
          {
            sqlite3_bind_blob(*(sqlite3_stmt **)(*(void *)(a2 + 24) + 8), v23, BytePtr, Length, 0);
            goto LABEL_41;
          }
        }
        else
        {
          CFTypeID v38 = CFGetTypeID(Value);
          if (v38 != CFNullGetTypeID()) {
            goto LABEL_41;
          }
        }
        sqlite3_bind_null(*(sqlite3_stmt **)(*(void *)(a2 + 24) + 8), v23);
        goto LABEL_41;
      }
    }
    int v31 = &v19[v21];
    CFIndex v32 = v19[v21 + 3];
    if (!v32) {
      goto LABEL_33;
    }
    if (*((_DWORD *)v31 + 3) > *(_DWORD *)(a2 + 16))
    {
      CFStringRef v33 = CFStringCreateWithCStringNoCopy(0, v32, 0x8000100u, v22);
      CFDictionaryRef Value = CFDictionaryGetValue(Mutable, v33);
      CFRelease(v33);
      if (Value)
      {
LABEL_19:
        CFRetain(Value);
        goto LABEL_20;
      }
      if (!v31[3]) {
        goto LABEL_33;
      }
    }
    if (*((_DWORD *)v31 + 3) <= *(_DWORD *)(a2 + 16))
    {
LABEL_33:
      CFNumberRef v34 = v31[4];
      if (v34)
      {
        sqlite3_bind_text(*(sqlite3_stmt **)(*(void *)(a2 + 24) + 8), v23, v34, -1, 0);
        goto LABEL_42;
      }
      double v39 = *(double *)&v19[v21 + 5];
      int v40 = (int)v19[v21 + 1];
      if (fabs(v39) >= 2.22044605e-16)
      {
        long long v41 = *(sqlite3_stmt **)(*(void *)(a2 + 24) + 8);
        if (v40 != 1)
        {
          sqlite3_bind_double(v41, v23, v39);
          goto LABEL_42;
        }
        int v43 = (int)v39;
        int v42 = v23;
        goto LABEL_51;
      }
      if ((v40 - 3) < 2)
      {
        sqlite3_bind_null(*(sqlite3_stmt **)(*(void *)(a2 + 24) + 8), v23);
        goto LABEL_42;
      }
      if ((v40 - 1) <= 1)
      {
        long long v41 = *(sqlite3_stmt **)(*(void *)(a2 + 24) + 8);
        int v42 = v23;
        int v43 = 0;
LABEL_51:
        sqlite3_bind_int(v41, v42, v43);
      }
    }
LABEL_42:
    CFRelease(v24);
    ++v23;
    uint64_t v19 = *(const char ***)(a2 + 8);
    goto LABEL_43;
  }
LABEL_54:
  long long v44 = *(uint64_t ***)(a2 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v45 = v44 == 0;
  }
  else {
    BOOL v45 = 1;
  }
  if (!v45)
  {
    if (*v44)
    {
      uint64_t v46 = **v44;
      if (v46)
      {
        if (*(void *)(v46 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  CFStringRef v48 = *(uint64_t ***)(a2 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v49 = v48 == 0;
  }
  else {
    BOOL v49 = 1;
  }
  if (!v49)
  {
    if (*v48)
    {
      uint64_t v50 = **v48;
      if (v50)
      {
        if (*(void *)(v50 + 104))
        {
          uint64_t v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v51) {
            os_unfair_lock_assert_owner(v51 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  CFRelease(Mutable);
  return 0;
}

void _CalDatabaseRestoreNotification()
{
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"kCalDatabaseRestoredNotification" object:0];
}

uint64_t CalDatabaseBackupDatabaseFile(os_unfair_lock *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  CFStringRef v4 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_DEFAULT, "Beginning backup of database file to %@", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v5 = CalDatabaseBackupCore(a1, v3, 0);
  int v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 67109120;
    LODWORD(v9) = v5;
    _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_DEFAULT, "Finished backup of database file with uint64_t result = %{BOOL}d", (uint8_t *)&v8, 8u);
  }

  return v5;
}

uint64_t CalDatabaseBackupCore(os_unfair_lock *a1, void *a2, int a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  if (!CalDatabaseValidateBackupDestinationURLForDatabaseFile(v4))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  int v62 = a3;
  if (a3)
  {
    uint64_t v5 = [v4 URLByDeletingLastPathComponent];
    BOOL v63 = [MEMORY[0x1E4F57670] attachmentContainerWithBaseURL:v5];
    int v6 = CalDatabaseValidateBackupDestinationURLForDatabaseFile(v63);

    if (!v6) {
      goto LABEL_80;
    }
  }
  else
  {
    BOOL v63 = 0;
  }
  CalDatabaseLockForThread(a1);
  id v8 = v4;
  BOOL v61 = v8;
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = RecordStore == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v13 = Database == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14) {
        os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  int64_t v60 = (sqlite3 **)CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (!v60)
  {
    CFNumberRef v36 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v36, OS_LOG_TYPE_ERROR, "Failed to open database connection for source database while attempting to backup", buf, 2u);
    }
    char v35 = 0;
    goto LABEL_60;
  }
  if (!__CalDatabaseBeginReadTransaction((uint64_t)a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabaseBackup.m:224"))
  {
    CFStringRef v37 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v37, OS_LOG_TYPE_ERROR, "Failed to start transaction while attempting to backup", buf, 2u);
    }
    char v35 = 0;
    goto LABEL_54;
  }
  if (!v62) {
    goto LABEL_35;
  }
  id v59 = [v8 URLByDeletingLastPathComponent];
  long long v71 = 0u;
  long long v72 = 0u;
  *(_OWORD *)ppDb = 0u;
  long long v70 = 0u;
  obCFIndex j = (id)_CalDatabaseCopyOfAllAttachmentFilesInStore((uint64_t)a1);
  uint64_t v15 = [obj countByEnumeratingWithState:ppDb objects:buf count:16];
  if (!v15) {
    goto LABEL_34;
  }
  uint64_t v16 = *(void *)v70;
  while (2)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      if (*(void *)v70 != v16) {
        objc_enumerationMutation(obj);
      }
      int v18 = (void *)*((void *)ppDb[1] + i);
      uint64_t v19 = _CalColorGetRecordID((uint64_t)v18);
      if (v19)
      {
        CFAllocatorRef v20 = (void *)_CalAttachmentFileCopyLocalURL(v18);
        uint64_t v21 = [v59 URLByAppendingPathComponent:v19];
        CFAllocatorRef v22 = [v21 URLByDeletingLastPathComponent];
        int v23 = [v22 path];
        char v24 = CPFileBuildDirectoriesToPath();

        if (v24)
        {
          CFStringRef v25 = [MEMORY[0x1E4F28CB8] defaultManager];
          id v68 = 0;
          char v26 = [v25 copyItemAtURL:v20 toURL:v21 error:&v68];
          id v27 = v68;

          if (v26)
          {

            continue;
          }
          int v40 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v73 = 138412546;
            id v74 = v20;
            __int16 v75 = 2112;
            id v76 = v27;
            _os_log_impl(&dword_1A8E81000, v40, OS_LOG_TYPE_ERROR, "Failed to copy attachment (%@): %@", v73, 0x16u);
          }
        }
        else
        {
          double v39 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v73 = 138412290;
            id v74 = v21;
            _os_log_impl(&dword_1A8E81000, v39, OS_LOG_TYPE_ERROR, "Failed to create a directory for copying attachment: %@.", v73, 0xCu);
          }
        }

        char v35 = 0;
        goto LABEL_53;
      }
    }
    uint64_t v15 = [obj countByEnumeratingWithState:ppDb objects:buf count:16];
    if (v15) {
      continue;
    }
    break;
  }
LABEL_34:

  id v8 = v61;
LABEL_35:
  id v28 = v8;
  ppDb[0] = 0;
  id v29 = [v28 path];
  int v30 = sqlite3_open_v2((const char *)[v29 UTF8String], ppDb, 6, 0);

  if (v30)
  {
    int v31 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      CFIndex v32 = ppDb[0];
      CFStringRef v33 = v31;
      CFNumberRef v34 = sqlite3_errmsg(v32);
      *(_DWORD *)long long buf = 136446210;
      uint64_t v78 = v34;
      _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_ERROR, "Failed to open destination database for backup: %{public}s", buf, 0xCu);
    }
    sqlite3_close(ppDb[0]);
    char v35 = 0;
  }
  else
  {
    BOOL v38 = _CalDatabaseBackupDatabaseFileWithSourceAndDestinationConnections(v60[1], ppDb[0]);
    char v35 = _CalDatabaseVacuumAndCloseDBConnection(ppDb[0], v28, 1) & v38;
  }

LABEL_53:
  id v8 = v61;
  __CalDatabaseRollbackTransaction((uint64_t)a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabaseBackup.m:241");
LABEL_54:
  if (CDBLockingAssertionsEnabled)
  {
    if (*v60)
    {
      if (*((void *)*v60 + 13))
      {
        long long v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v41) {
          os_unfair_lock_assert_owner(v41 + 20);
        }
      }
    }
  }
  CPSqliteDatabaseReleaseSqliteConnection();
LABEL_60:

  CalDatabaseUnlockForThread(a1);
  if (v35)
  {
    uint64_t v7 = 1;
    goto LABEL_81;
  }
  int v42 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v73 = 0;
    _os_log_impl(&dword_1A8E81000, v42, OS_LOG_TYPE_DEFAULT, "Cleaning up failed backup database output", v73, 2u);
  }
  int v43 = [MEMORY[0x1E4F28CB8] defaultManager];
  long long v44 = [v61 path];
  if ([v43 fileExistsAtPath:v44])
  {
    BOOL v45 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v67 = 0;
    char v46 = [v45 removeItemAtURL:v61 error:&v67];
    id v47 = v67;

    if ((v46 & 1) == 0)
    {
      CFStringRef v48 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v73 = 138412290;
        id v74 = v47;
        _os_log_impl(&dword_1A8E81000, v48, OS_LOG_TYPE_ERROR, "Failed to clean up backup database output: %@", v73, 0xCu);
      }
    }
  }
  else
  {

    id v47 = 0;
  }
  char v66 = 0;
  if (v62)
  {
    BOOL v49 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v50 = [v63 path];
    char v51 = [v49 fileExistsAtPath:v50 isDirectory:&v66];
    if (v66) {
      char v52 = v51;
    }
    else {
      char v52 = 0;
    }
    if (v52)
    {
      CFStringRef v53 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v65 = v47;
      char v54 = [v53 removeItemAtURL:v63 error:&v65];
      id v55 = v65;

      if ((v54 & 1) == 0)
      {
        BOOL v56 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v73 = 138412290;
          id v74 = v55;
          _os_log_impl(&dword_1A8E81000, v56, OS_LOG_TYPE_ERROR, "Failed to clean up backup attachments output: %@", v73, 0xCu);
        }
      }
      id v47 = v55;
    }
    else
    {
    }
  }

LABEL_80:
  uint64_t v7 = 0;
LABEL_81:

LABEL_82:
  return v7;
}

void sub_1A8EBA6A0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1A8EBA3C4);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t CalDatabaseBackupDatabaseFileAndAttachments(os_unfair_lock *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_DEFAULT, "Beginning backup of database file and attachments to %@", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v5 = CalDatabaseBackupCore(a1, v3, 1);
  int v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 67109120;
    LODWORD(v9) = v5;
    _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_DEFAULT, "Finished backup of database file and attachments with uint64_t result = %{BOOL}d", (uint8_t *)&v8, 8u);
  }

  return v5;
}

uint64_t CalDatabaseBackupToICBU(os_unfair_lock_s *a1, void *a2, void *a3)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v73 = a3;
  int v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v94 = v5;
    _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_DEFAULT, "Beginning ICBU backup to %@", buf, 0xCu);
  }
  id v7 = v5;
  int v8 = v7;
  if (!v7)
  {
    uint64_t v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v91 = 0;
      uint64_t v16 = "Nil path given for backup destination";
      int v17 = v15;
      uint32_t v18 = 2;
LABEL_15:
      _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, v16, v91, v18);
    }
LABEL_16:

    goto LABEL_23;
  }
  uint64_t v71 = (uint64_t)a1;
  if (([v7 isFileURL] & 1) == 0)
  {
    uint64_t v19 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v91 = 138412290;
      *(void *)&v91[4] = v8;
      uint64_t v16 = "Backup destination URL is not a file URL: %@";
      int v17 = v19;
      uint32_t v18 = 12;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  id v9 = [MEMORY[0x1E4F28CB8] defaultManager];
  char v76 = 0;
  uint64_t v10 = [v8 path];
  char v11 = [v9 fileExistsAtPath:v10 isDirectory:&v76];

  if ((v11 & 1) == 0)
  {
    CFAllocatorRef v20 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v91 = 138412290;
      *(void *)&v91[4] = v8;
      uint64_t v21 = "Backup destination URL does not exist: %@";
LABEL_21:
      _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_ERROR, v21, v91, 0xCu);
    }
LABEL_22:

    goto LABEL_23;
  }
  if (!v76)
  {
    CFAllocatorRef v20 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v91 = 138412290;
      *(void *)&v91[4] = v8;
      uint64_t v21 = "Backup destination URL is not a directory: %@";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  *(void *)uint64_t v91 = 0;
  *(void *)&v91[8] = v91;
  *(void *)&v91[16] = 0x2020000000;
  char v92 = 0;
  uint64_t v77 = MEMORY[0x1E4F143A8];
  uint64_t v78 = 3221225472;
  uint64_t v79 = __CalDatabaseValidateBackupDestinationURLForICBU_block_invoke;
  int v80 = &unk_1E5D61C78;
  int v81 = v91;
  CFNumberType v12 = [v9 enumeratorAtURL:v8 includingPropertiesForKeys:0 options:0 errorHandler:&v77];
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  id v13 = v12;
  if ([v13 countByEnumeratingWithState:&v83 objects:buf count:16])
  {
    CFStringRef v14 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v89 = 138412290;
      CFIndex v90 = v8;
      _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_ERROR, "Destination directory is not empty: %@", v89, 0xCu);
    }

    _Block_object_dispose(v91, 8);
    goto LABEL_23;
  }

  BOOL v24 = *(unsigned char *)(*(void *)&v91[8] + 24) == 0;
  _Block_object_dispose(v91, 8);

  if (!v24)
  {
LABEL_23:
    uint64_t v22 = 0;
    goto LABEL_24;
  }
  long long v70 = [v8 URLByAppendingPathComponent:@"Calendar.sqlitedb"];
  if (!CalDatabaseBackupDatabaseFileAndAttachments(a1, v70))
  {
    id v48 = 0;
LABEL_57:
    BOOL v61 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v61, OS_LOG_TYPE_DEFAULT, "Cleaning up failed backup output", buf, 2u);
    }
    int v62 = [MEMORY[0x1E4F28CB8] defaultManager];
    BOOL v63 = [v8 path];
    if ([v62 fileExistsAtPath:v63])
    {
      int64_t v64 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v74 = v48;
      char v65 = [v64 removeItemAtURL:v8 error:&v74];
      id v66 = v74;

      if ((v65 & 1) == 0)
      {
        id v67 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v94 = v66;
          _os_log_impl(&dword_1A8E81000, v67, OS_LOG_TYPE_ERROR, "Failed to clean up backup output: %@", buf, 0xCu);
        }
      }
      uint64_t v22 = 0;
      id v48 = v66;
    }
    else
    {

      uint64_t v22 = 0;
    }
    goto LABEL_65;
  }
  id v25 = v73;
  char v26 = CalDatabaseCopySubscribedCalendarStore(a1);
  CFTypeRef cf = v26;
  if (v26)
  {
    CFMutableArrayRef v27 = CalStoreCopyCalendars((uint64_t)v26);
    long long v72 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", -[__CFArray count](v27, "count"));
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    id v28 = v27;
    uint64_t v29 = [(__CFArray *)v28 countByEnumeratingWithState:&v83 objects:buf count:16];
    if (v29)
    {
      uint64_t v30 = *(void *)v84;
      do
      {
        for (uint64_t i = 0; i != v29; ++i)
        {
          if (*(void *)v84 != v30) {
            objc_enumerationMutation(v28);
          }
          uint64_t v32 = *(void *)(*((void *)&v83 + 1) + 8 * i);
          if (!CalCalendarIsHolidaySubscribedCalendar(v32))
          {
            CFStringRef v33 = (void *)CalCalendarCopySubCalAccountID(v32);
            CFNumberRef v34 = objc_msgSend(v25, "accountWithIdentifier:", v33, cf, v70);
            if (v34)
            {
              char v35 = [v72 objectForKeyedSubscript:v33];
              BOOL v36 = v35 == 0;

              if (v36)
              {
                int v43 = objc_opt_new();
                long long v44 = CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup();
                uint64_t v77 = MEMORY[0x1E4F143A8];
                uint64_t v78 = 3221225472;
                uint64_t v79 = __CalDatabaseBackupLocalSubscribedAccountInfos_block_invoke;
                int v80 = &unk_1E5D61CA0;
                int v81 = v34;
                id v82 = v43;
                id v45 = v43;
                [v44 enumerateKeysAndObjectsUsingBlock:&v77];

                char v46 = (void *)[v45 copy];
                [v72 setObject:v46 forKeyedSubscript:v33];
              }
              else
              {
                CFStringRef v37 = (void *)CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  BOOL v38 = v37;
                  Uint ID = CalCalendarGetUID();
                  *(_DWORD *)uint64_t v91 = 138543618;
                  *(void *)&v91[4] = v33;
                  *(_WORD *)&v91[12] = 1024;
                  *(_DWORD *)&v91[14] = UID;
                  _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_ERROR, "Multiple local subscribed calendar accounts have the same account identifier (%{public}@). This one (ROWID=%d) will not be included in the Info.plist for backup", v91, 0x12u);
                }
              }
            }
            else
            {
              int v40 = (void *)CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                long long v41 = v40;
                int v42 = CalCalendarGetUID();
                *(_DWORD *)uint64_t v91 = 67109378;
                *(_DWORD *)&v91[4] = v42;
                *(_WORD *)&v91[8] = 2114;
                *(void *)&v91[10] = v33;
                _os_log_impl(&dword_1A8E81000, v41, OS_LOG_TYPE_ERROR, "Account not found for subscribed calendar (ROWID=%d): %{public}@. Will not be included in Info.plist for backup", v91, 0x12u);
              }
            }
          }
        }
        uint64_t v29 = [(__CFArray *)v28 countByEnumeratingWithState:&v83 objects:buf count:16];
      }
      while (v29);
    }

    CFRelease(cf);
    id v47 = (void *)[v72 copy];
  }
  else
  {
    id v47 = 0;
  }

  BOOL v49 = CalDatabaseGetPreferences(v71);
  uint64_t v50 = objc_msgSend(v49, "get_defaultCalendarDatabaseID");
  char v51 = (void *)MEMORY[0x1E4F1CC08];
  char v52 = (void *)MEMORY[0x1E4F1CC08];
  if (!v50)
  {
    char v52 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:3];
    CFStringRef v53 = objc_msgSend(v49, "get_defaultCalendarID");
    [v52 setObject:v53 forKeyedSubscript:@"defaultCalendarID"];

    char v54 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v49, "get_defaultCalendarStoreUID"));
    [v52 setObject:v54 forKeyedSubscript:@"defaultCalendarStoreUID"];
  }
  v88[0] = @"3.0";
  v87[0] = @"version";
  v87[1] = @"date";
  id v55 = [MEMORY[0x1E4F1C9C8] date];
  v88[1] = v55;
  if (v47) {
    BOOL v56 = v47;
  }
  else {
    BOOL v56 = v51;
  }
  v87[2] = @"LocalSubscribedCalendarAccounts";
  v87[3] = @"preferences";
  v88[2] = v56;
  v88[3] = v52;
  CFTypeRef v57 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v88, v87, 4, cf);

  uint64_t v58 = [v8 URLByAppendingPathComponent:@"Info.plist"];
  id v75 = 0;
  char v59 = [v57 writeToURL:v58 error:&v75];
  id v48 = v75;
  if ((v59 & 1) == 0)
  {
    int64_t v60 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v94 = v48;
      _os_log_impl(&dword_1A8E81000, v60, OS_LOG_TYPE_ERROR, "Failed to create destination .icbu Info.plist file: %@", buf, 0xCu);
    }

    goto LABEL_57;
  }

  uint64_t v22 = 1;
LABEL_65:
  id v68 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v94) = v22;
    _os_log_impl(&dword_1A8E81000, v68, OS_LOG_TYPE_DEFAULT, "Finished ICBU backup with uint64_t result = %{BOOL}d", buf, 8u);
  }

LABEL_24:
  return v22;
}

void sub_1A8EBB33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t CalDatabaseRestoreFromBackupDatabaseFile(uint64_t a1, void *a2, void *a3, int *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412290;
    id v15 = v7;
    _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_DEFAULT, "Beginning restore of database file from %@", (uint8_t *)&v14, 0xCu);
  }
  if (v8) {
    char v10 = 3;
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = CalDatabaseRestoreDatabaseCore(a1, v7, 0, v8, v10, a4);
  CFNumberType v12 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 67109120;
    LODWORD(v15) = v11;
    _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_DEFAULT, "Finished restore of database file with uint64_t result = %{BOOL}d", (uint8_t *)&v14, 8u);
  }

  return v11;
}

uint64_t CalDatabaseRestoreDatabaseCore(uint64_t a1, void *a2, void *a3, void *a4, char a5, int *a6)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v169 = a3;
  id v170 = a4;
  id v10 = v9;
  uint64_t v11 = v10;
  double v176 = v10;
  if (!v10)
  {
    uint64_t v17 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(buf) = 0;
    uint32_t v18 = "Nil path given for restore database";
    uint64_t v19 = v17;
    uint32_t v20 = 2;
LABEL_11:
    _os_log_impl(&dword_1A8E81000, v19, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, v20);
    goto LABEL_12;
  }
  if (([v10 isFileURL] & 1) == 0)
  {
    uint64_t v21 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v11;
    uint32_t v18 = "Restore database backup URL is not a file URL: %@";
    uint64_t v19 = v21;
    uint32_t v20 = 12;
    goto LABEL_11;
  }
  CFNumberType v12 = [MEMORY[0x1E4F28CB8] defaultManager];
  LOBYTE(ppDb[0]) = 0;
  id v13 = [v176 path];
  char v14 = [v12 fileExistsAtPath:v13 isDirectory:ppDb];

  if ((v14 & 1) == 0)
  {
    id v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v176;
      uint64_t v16 = "Restore database backup URL is not an existing file: %@";
      goto LABEL_15;
    }
LABEL_16:

    uint64_t v22 = 0;
    uint64_t v11 = v176;
    goto LABEL_17;
  }
  if (LOBYTE(ppDb[0]))
  {
    id v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v176;
      uint64_t v16 = "Restore database backup URL is a directory: %@";
LABEL_15:
      _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&buf, 0xCu);
      goto LABEL_16;
    }
    goto LABEL_16;
  }

  id v167 = v176;
  id v174 = v169;
  id v164 = v170;
  BOOL v24 = CalTemporaryDirectory();
  id v25 = [v24 stringByAppendingPathComponent:@"StagedBackup.XXXXXXXX"];

  id v26 = v25;
  CFMutableArrayRef v27 = strdup((const char *)[v26 fileSystemRepresentation]);
  if (!v27) {
    goto LABEL_80;
  }
  id v28 = v27;
  if (!mkdtemp(v27))
  {
    free(v28);
LABEL_80:

LABEL_81:
    uint64_t v77 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A8E81000, v77, OS_LOG_TYPE_ERROR, "Failed to create temp directory for staging backup for restore", (uint8_t *)&buf, 2u);
    }
    goto LABEL_108;
  }
  uint64_t v29 = [NSString stringWithUTF8String:v28];
  uint64_t v30 = [v29 stringByAppendingString:@"/"];

  free(v28);
  uint64_t v163 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v30];

  if (!v163) {
    goto LABEL_81;
  }
  uint64_t v31 = *MEMORY[0x1E4F57870];
  id v32 = v167;
  CFStringRef v33 = [v163 URLByAppendingPathComponent:v31];
  CFNumberRef v34 = [MEMORY[0x1E4F28CB8] defaultManager];
  char v35 = CalDatabaseURLByAddingSuffix(v32, @"-wal");
  BOOL v36 = [v35 path];
  int v37 = [v34 fileExistsAtPath:v36];

  if (v37)
  {
    char v38 = CalDatabaseBackupRawDatabase(v32, v33);

    if ((v38 & 1) == 0) {
      goto LABEL_102;
    }
    goto LABEL_23;
  }
  *(void *)id v190 = 0;
  char v78 = [v34 copyItemAtURL:v32 toURL:v33 error:v190];

  id v79 = *(id *)v190;
  if ((v78 & 1) == 0)
  {
    uint64_t v86 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v79;
      uint64_t v87 = "Failed to copy backup database to staged location: %@";
      BOOL v88 = v86;
      uint32_t v89 = 12;
LABEL_100:
      _os_log_impl(&dword_1A8E81000, v88, OS_LOG_TYPE_ERROR, v87, (uint8_t *)&buf, v89);
    }
LABEL_101:

    goto LABEL_102;
  }
  ppDb[0] = 0;
  id v80 = [v33 path];
  int v81 = sqlite3_open_v2((const char *)[v80 UTF8String], ppDb, 2, 0);

  if (v81)
  {
    id v82 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      long long v83 = ppDb[0];
      long long v84 = v82;
      long long v85 = sqlite3_errmsg(v83);
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v85;
      _os_log_impl(&dword_1A8E81000, v84, OS_LOG_TYPE_ERROR, "Failed to open database when attempting to validate it: %{public}s", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_95;
  }
  if (sqlite3_exec(ppDb[0], "VACUUM", 0, 0, 0))
  {
    uint64_t v91 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      char v92 = ppDb[0];
      long long v93 = v91;
      id v94 = sqlite3_errmsg(v92);
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v94;
      _os_log_impl(&dword_1A8E81000, v93, OS_LOG_TYPE_ERROR, "Failed to execute vacuum on database when attempting to validate it: %{public}s", (uint8_t *)&buf, 0xCu);
    }
LABEL_95:
    int v95 = sqlite3_close(ppDb[0]);
    if (!v95) {
      goto LABEL_98;
    }
    goto LABEL_96;
  }
  int v95 = sqlite3_close(ppDb[0]);
  if (v95)
  {
LABEL_96:
    long long v96 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      long long v97 = v96;
      long long v98 = sqlite3_errstr(v95);
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v98;
      _os_log_impl(&dword_1A8E81000, v97, OS_LOG_TYPE_ERROR, "Failed to close database when attempting to validate it: %{public}s", (uint8_t *)&buf, 0xCu);
    }
LABEL_98:
    uint64_t v99 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      uint64_t v87 = "Backup file is not a valid database!";
      BOOL v88 = v99;
      uint32_t v89 = 2;
      goto LABEL_100;
    }
    goto LABEL_101;
  }

LABEL_23:
  id v39 = v163;
  id v158 = v174;
  obuint64_t j = v164;
  int v162 = v39;
  int v40 = (os_unfair_lock_s *)CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(1805, v39);
  CFTypeRef cf = v40;
  if (!v40)
  {
    CFIndex v90 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A8E81000, v90, OS_LOG_TYPE_ERROR, "Failed to open staged backup database for schema migration", (uint8_t *)&buf, 2u);
    }

    goto LABEL_102;
  }
  _CalDatabasePerformSchemaMigrationIfNeededOnDatabase(v40);
  CalDatabaseCleanupStoresWithoutIdentifiers(cf);
  CalDatabaseClearAllChangeHistoryForAllClients(cf);
  if (!v158) {
    goto LABEL_37;
  }
  id v177 = v158;
  long long v41 = (void *)CalDatabaseCopyOfAllAttachmentsInStore(cf, 0);
  long long v187 = 0u;
  long long v188 = 0u;
  *(_OWORD *)ppDb = 0u;
  long long v186 = 0u;
  id v42 = v41;
  uint64_t v43 = [v42 countByEnumeratingWithState:ppDb objects:&buf count:16];
  if (!v43) {
    goto LABEL_36;
  }
  uint64_t v44 = *(void *)v186;
  while (2)
  {
    for (uint64_t i = 0; i != v43; ++i)
    {
      if (*(void *)v186 != v44) {
        objc_enumerationMutation(v42);
      }
      char v46 = (void *)CalAttachmentCopyLocalRelativePath(*((void *)ppDb[1] + i));
      if (v46)
      {
        id v47 = [v177 URLByAppendingPathComponent:v46];
        LOBYTE(v18 0) = 0;
        id v48 = [MEMORY[0x1E4F28CB8] defaultManager];
        BOOL v49 = [v47 path];
        char v50 = [v48 fileExistsAtPath:v49 isDirectory:&v180];

        if (v50)
        {
          if (!(_BYTE)v180)
          {

            continue;
          }
          uint64_t v153 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id v190 = 138412290;
            *(void *)&v190[4] = v47;
            int v154 = "Attachment in backup is directory when a file was expected: %@";
            goto LABEL_196;
          }
        }
        else
        {
          uint64_t v153 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id v190 = 138412290;
            *(void *)&v190[4] = v47;
            int v154 = "Failed to find expected attachment in backup: %@";
LABEL_196:
            _os_log_impl(&dword_1A8E81000, v153, OS_LOG_TYPE_ERROR, v154, v190, 0xCu);
          }
        }

        CFRelease(cf);
        goto LABEL_102;
      }
    }
    uint64_t v43 = [v42 countByEnumeratingWithState:ppDb objects:&buf count:16];
    if (v43) {
      continue;
    }
    break;
  }
LABEL_36:

LABEL_37:
  id v178 = obj;
  char v51 = (void *)CalDatabaseCopyOfAllStores(cf);
  long long v191 = 0u;
  long long v192 = 0u;
  memset(v190, 0, sizeof(v190));
  id v52 = v51;
  uint64_t v53 = [v52 countByEnumeratingWithState:v190 objects:&buf count:16];
  if (!v53)
  {

    goto LABEL_189;
  }
  uint64_t v54 = 0;
  int v55 = 0;
  char obja = 0;
  uint64_t v56 = **(void **)&v190[16];
  do
  {
    for (uint64_t j = 0; j != v53; ++j)
    {
      if (**(void **)&v190[16] != v56) {
        objc_enumerationMutation(v52);
      }
      uint64_t v58 = *(void *)(*(void *)&v190[8] + 8 * j);
      int Type = CalStoreGetType(v58);
      if ((Type - 5) >= 2)
      {
        if (Type == 4)
        {
          uint64_t v54 = v58;
        }
        else if (Type)
        {
          if (a5)
          {
            int64_t v60 = (void *)CalStoreCopyExternalID(v58);
            if (v60
              && ([v178 accountWithIdentifier:v60],
                  BOOL v61 = objc_claimAutoreleasedReturnValue(),
                  BOOL v62 = v61 == 0,
                  v61,
                  v62))
            {
              BOOL v63 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v189 = 138543362;
                *(void *)&v189[4] = v60;
                _os_log_impl(&dword_1A8E81000, v63, OS_LOG_TYPE_DEFAULT, "Removing store for non-existent account %{public}@ from backup during restore", v189, 0xCu);
              }
              CalRemoveStore();
              char obja = 1;
            }
            else
            {
              int v55 = 1;
            }
          }
          else
          {
            int v55 = 1;
          }
        }
        else
        {
          v55 |= CalStoreAllowsEvents(v58);
        }
      }
    }
    uint64_t v53 = [v52 countByEnumeratingWithState:v190 objects:&buf count:16];
  }
  while (v53);

  if (v54)
  {
    CFMutableArrayRef v64 = CalStoreCopyCalendars(v54);
    long long v182 = 0u;
    long long v183 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    char v65 = v64;
    uint64_t v66 = [(__CFArray *)v65 countByEnumeratingWithState:&v180 objects:ppDb count:16];
    if (v66)
    {
      uint64_t v67 = *(void *)v181;
      do
      {
        for (uint64_t k = 0; k != v66; ++k)
        {
          if (*(void *)v181 != v67) {
            objc_enumerationMutation(v65);
          }
          uint64_t v69 = *(void **)(*((void *)&v180 + 1) + 8 * k);
          uint64_t v70 = CalCalendarCopySubCalAccountID((uint64_t)v69);
          uint64_t v71 = (void *)v70;
          if ((a5 & 2) != 0
            && (!v70
             || ([v178 accountWithIdentifier:v70],
                 long long v72 = objc_claimAutoreleasedReturnValue(),
                 BOOL v73 = v72 == 0,
                 v72,
                 v73)))
          {
            id v74 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v189 = 138543362;
              *(void *)&v189[4] = v71;
              _os_log_impl(&dword_1A8E81000, v74, OS_LOG_TYPE_DEFAULT, "Removing subscribed calendar for non-existent account %{public}@ from backup during restore", v189, 0xCu);
            }
            CalRemoveCalendar(v69);
            char obja = 1;
          }
          else
          {
            LOBYTE(v55) = 1;
          }
        }
        uint64_t v66 = [(__CFArray *)v65 countByEnumeratingWithState:&v180 objects:ppDb count:16];
      }
      while (v66);
    }
  }
  if (obja)
  {
    if (CalDatabaseSave((uint64_t)cf))
    {
      if ((v55 & 1) == 0)
      {
        id v75 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v189 = 0;
          char v76 = "Attempted to restore from a database in which all data belonged to accounts not signed in. Failing the r"
                "estore to prevent wiping all useful data.";
          goto LABEL_200;
        }
        goto LABEL_201;
      }
      goto LABEL_189;
    }
    id v75 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v189 = 0;
      char v76 = "Failed to save database to remove stores/calendars for non-existent accounts";
LABEL_200:
      _os_log_impl(&dword_1A8E81000, v75, OS_LOG_TYPE_ERROR, v76, v189, 2u);
    }
LABEL_201:

    CFRelease(cf);
LABEL_102:
    uint64_t v100 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A8E81000, v100, OS_LOG_TYPE_DEFAULT, "Cleaning up staged temp directory", (uint8_t *)&buf, 2u);
    }
    uint64_t v101 = [MEMORY[0x1E4F28CB8] defaultManager];
    ppDb[0] = 0;
    char v102 = [v101 removeItemAtURL:v163 error:ppDb];
    uint64_t v103 = ppDb[0];

    if ((v102 & 1) == 0)
    {
      CFIndex v104 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v103;
        _os_log_impl(&dword_1A8E81000, v104, OS_LOG_TYPE_ERROR, "Failed to clean up staged temp directory: %@", (uint8_t *)&buf, 0xCu);
      }
    }

LABEL_108:
    int v162 = 0;
  }
  else
  {
LABEL_189:

    CFRelease(cf);
  }

  uint64_t v11 = v162;
  if (!v162)
  {
LABEL_12:
    uint64_t v22 = 0;
    goto LABEL_17;
  }
  id v161 = v162;
  id v159 = v174;
  CalDatabaseLockForThread((os_unfair_lock_s *)a1);
  int v157 = *(_DWORD *)(a1 + 16);
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  int LastSequenceNumber = CPRecordStoreGetLastSequenceNumber();
  if (LastSequenceNumber == -1) {
    int LastSequenceNumber = *(_DWORD *)(a1 + 124);
  }
  int v107 = LastSequenceNumber + 1;
  if (LastSequenceNumber == -1) {
    int v107 = 1;
  }
  int v156 = v107;
  RestoreGeneratiouint64_t n = _CalDatabaseGetRestoreGeneration(a1);
  id v108 = v161;
  CFRange v109 = CalDatabaseCopyDirectoryPathForDatabase(a1);
  if (![(__CFString *)v109 length])
  {
    long long v139 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A8E81000, v139, OS_LOG_TYPE_ERROR, "Failed to get destination path for restore", (uint8_t *)&buf, 2u);
    }

    goto LABEL_156;
  }
  CFRange v110 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v109];
  uint64_t v111 = *MEMORY[0x1E4F57870];
  CFRange v112 = [v108 URLByAppendingPathComponent:*MEMORY[0x1E4F57870]];
  CFRange v113 = [v110 URLByAppendingPathComponent:v111];
  LOBYTE(v111) = CalDatabaseBackupRawDatabase(v112, v113);

  if ((v111 & 1) == 0) {
    goto LABEL_156;
  }
  _CalDatabaseRevertInternal(a1, 1);
  uint64_t v114 = a6;
  id v179 = v159;
  if (!v179) {
    goto LABEL_168;
  }
  uint64_t v168 = [MEMORY[0x1E4F28CB8] defaultManager];
  int v115 = (void *)_CalDatabaseCopyOfAllAttachmentFilesInStore(a1);
  long long v187 = 0u;
  long long v188 = 0u;
  *(_OWORD *)ppDb = 0u;
  long long v186 = 0u;
  id objb = v115;
  uint64_t v116 = [objb countByEnumeratingWithState:ppDb objects:&buf count:16];
  if (!v116)
  {

    uint64_t v114 = a6;
LABEL_168:
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(a1 + 24))
      {
        long long v145 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v145) {
          os_unfair_lock_assert_owner(v145 + 20);
        }
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
    {
      if (Database)
      {
        if (*(void *)(Database + 104))
        {
          uint64_t v147 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v147) {
            os_unfair_lock_assert_owner(v147 + 20);
          }
        }
      }
    }
    uint64_t v148 = CPSqliteDatabaseConnectionForWriting();
    uint64_t v149 = v148;
    if (!v148)
    {
      int v152 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LOWORD(ppDb[0]) = 0;
        _os_log_impl(&dword_1A8E81000, v152, OS_LOG_TYPE_ERROR, "Failed to get connection for writing to database to update its sequence number after restoring", (uint8_t *)ppDb, 2u);
      }
      goto LABEL_156;
    }
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    v194 = ___CalDatabaseSetSequenceNumberAfterRestore_block_invoke;
    CFIndex v195 = &__block_descriptor_44_e5_v8__0l;
    uint64_t v196 = v148;
    int v197 = v156;
    _CalDatabaseLockForWriteTransaction(a1, (uint64_t)&buf);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v149)
      {
        if (*(void *)(*(void *)v149 + 104))
        {
          int v150 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v150) {
            os_unfair_lock_assert_owner(v150 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    int v151 = (RestoreGeneration & ~(RestoreGeneration >> 31)) + 1;
    _CalDatabaseSetRestoreGeneration(a1, v151);
    if (v114) {
      *uint64_t v114 = v151;
    }
    uint64_t v22 = 1;
    goto LABEL_157;
  }
  uint64_t v117 = *(void *)v186;
  char v175 = 1;
  do
  {
    for (uint64_t m = 0; m != v116; ++m)
    {
      if (*(void *)v186 != v117) {
        objc_enumerationMutation(objb);
      }
      v119 = (void *)*((void *)ppDb[1] + m);
      int v120 = _CalColorGetRecordID((uint64_t)v119);
      if (v120)
      {
        v121 = [v179 URLByAppendingPathComponent:v120];
        uint64_t v122 = (void *)_CalAttachmentFileCopyLocalURL(v119);
        CFArrayRef v123 = v122;
        if (v122)
        {
          CFIndex v124 = [v122 URLByDeletingLastPathComponent];
          os_log_type_t v125 = [v123 path];
          char v126 = CPFileBuildDirectoriesToPath();

          if (v126)
          {
            v127 = [v123 path];
            if ([v168 fileExistsAtPath:v127])
            {
              *(void *)&long long v180 = 0;
              char v128 = [v168 removeItemAtURL:v123 error:&v180];
              id v129 = (id)v180;

              if (v128)
              {
                CFIndex v130 = v129;
                goto LABEL_139;
              }
              uint64_t v138 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)id v190 = 138412802;
                *(void *)&v190[4] = v120;
                *(_WORD *)&v190[12] = 2112;
                *(void *)&v190[14] = v123;
                *(_WORD *)&v190[22] = 2112;
                *(void *)&v190[24] = v129;
                v135 = v138;
                BOOL v136 = "Attachment from backup (%@) already exists in destination (%@), but we could not replace it: %@";
                uint32_t v137 = 32;
LABEL_144:
                _os_log_impl(&dword_1A8E81000, v135, OS_LOG_TYPE_ERROR, v136, v190, v137);
              }
              goto LABEL_145;
            }

            CFIndex v130 = 0;
LABEL_139:
            *(void *)v189 = v130;
            char v133 = [v168 copyItemAtURL:v121 toURL:v123 error:v189];
            id v129 = *(id *)v189;

            if ((v133 & 1) == 0)
            {
              uint64_t v134 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)id v190 = 138412546;
                *(void *)&v190[4] = v120;
                *(_WORD *)&v190[12] = 2112;
                *(void *)&v190[14] = v129;
                v135 = v134;
                BOOL v136 = "Failed to copy attachment (%@) when restoring backup: %@";
                uint32_t v137 = 22;
                goto LABEL_144;
              }
LABEL_145:
              char v175 = 0;
            }
          }
          else
          {
            long long v132 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)id v190 = 138412290;
              *(void *)&v190[4] = v124;
              _os_log_impl(&dword_1A8E81000, v132, OS_LOG_TYPE_ERROR, "Failed to create directory for attachment when restoring backup: %@", v190, 0xCu);
            }
            char v175 = 0;
          }
        }
        else
        {
          long long v131 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id v190 = 138412290;
            *(void *)&v190[4] = v120;
            _os_log_impl(&dword_1A8E81000, v131, OS_LOG_TYPE_ERROR, "Failed to get destination URL for attachment: %@", v190, 0xCu);
          }
          char v175 = 0;
        }
      }
    }
    uint64_t v116 = [objb countByEnumeratingWithState:ppDb objects:&buf count:16];
  }
  while (v116);

  uint64_t v114 = a6;
  if (v175) {
    goto LABEL_168;
  }
LABEL_156:
  uint64_t v22 = 0;
LABEL_157:
  CalDatabaseUnlockForThread((const os_unfair_lock *)a1);
  if (v22)
  {
    if ((v157 & 8) == 0)
    {
      _CalDatabasePostDBChangeNotificationToInternalAndExternalClients(a1);
      _CalDatabaseRestoreNotification();
    }
    CalDatabaseCleanUpOrphanedLocalAttachments((os_unfair_lock_s *)a1);
  }
  BOOL v140 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v190 = 0;
    _os_log_impl(&dword_1A8E81000, v140, OS_LOG_TYPE_DEFAULT, "Cleaning up staged backup directory", v190, 2u);
  }
  CFIndex v141 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v184 = 0;
  char v142 = [v141 removeItemAtURL:v161 error:&v184];
  id v143 = v184;

  if ((v142 & 1) == 0)
  {
    CFArrayRef v144 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v190 = 138412290;
      *(void *)&v190[4] = v143;
      _os_log_impl(&dword_1A8E81000, v144, OS_LOG_TYPE_ERROR, "Failed to clean up staged backup directory: %@", v190, 0xCu);
    }
  }

  uint64_t v11 = v162;
LABEL_17:

  return v22;
}

void sub_1A8EBCAC4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2)
  {
    if (v24) {
      objc_end_catch();
    }
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1A8EBC668);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t CalDatabaseRestoreFromBackupDatabaseFileAndAttachments(uint64_t a1, void *a2, void *a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = [v7 URLByDeletingLastPathComponent];
  id v10 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 138412290;
    id v16 = v7;
    _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_DEFAULT, "Beginning restore of database file and attachments from %@", (uint8_t *)&v15, 0xCu);
  }
  if (v8) {
    char v11 = 3;
  }
  else {
    char v11 = 0;
  }
  uint64_t v12 = CalDatabaseRestoreDatabaseCore(a1, v7, v9, v8, v11, a4);

  id v13 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 67109120;
    LODWORD(v16) = v12;
    _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_DEFAULT, "Finished restore of database file with uint64_t result = %{BOOL}d", (uint8_t *)&v15, 8u);
  }

  return v12;
}

uint64_t CalDatabaseRestoreFromICBU(os_unfair_lock_s *a1, void *a2, void *a3, int *a4)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a3;
  id v8 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_DEFAULT, "Beginning restore of database file and attachments from %@", buf, 0xCu);
  }
  id v9 = v6;
  id v10 = v7;
  char v11 = [v9 URLByAppendingPathComponent:@"Info.plist"];
  uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v11];

  if (!v12)
  {
    id v25 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_1A8E81000, v25, OS_LOG_TYPE_ERROR, "Could not open Info.plist from .icbu (%@) for restore", buf, 0xCu);
    }
    uint64_t v26 = 0;
    goto LABEL_129;
  }
  id v13 = [v12 objectForKeyedSubscript:@"version"];
  char v14 = v13;
  if (!v13)
  {
    uint64_t v27 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v9;
    id v28 = "Could not find version key in Info.plist for .icbu (%@)";
    goto LABEL_21;
  }
  if (![v13 isEqualToString:@"3.0"])
  {
    int v29 = [v14 isEqualToString:@"2.0"];
    uint64_t v27 = CDBLogHandle;
    BOOL v30 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (v29)
    {
      if (v30)
      {
        *(_WORD *)long long buf = 0;
        id v28 = "Restoring from a 2.0 .icbu is not supported on this platform";
        uint64_t v31 = v27;
        uint32_t v32 = 2;
LABEL_22:
        _os_log_impl(&dword_1A8E81000, v31, OS_LOG_TYPE_ERROR, v28, buf, v32);
      }
LABEL_23:
      uint64_t v26 = 0;
      goto LABEL_128;
    }
    if (!v30) {
      goto LABEL_23;
    }
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v14;
    id v28 = "Could not restore from unsupported .icbu version: \"%{public}@\"";
LABEL_21:
    uint64_t v31 = v27;
    uint32_t v32 = 12;
    goto LABEL_22;
  }
  int v15 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_DEFAULT, "Restoring from version 3.0 .icbu", buf, 2u);
  }
  id v16 = v9;
  id v17 = v12;
  id v131 = v10;
  id v129 = [v16 URLByAppendingPathComponent:@"Calendar.sqlitedb"];
  id v130 = v16;
  char v128 = v17;
  id v18 = [v17 objectForKeyedSubscript:@"LocalSubscribedCalendarAccounts"];
  char v126 = v12;
  id v127 = v10;
  os_log_type_t v125 = v14;
  if (v18)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v19 = CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup();
      uint32_t v20 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v18, "count"));
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = __CalDatabaseSanitizeLocalSubscribedCalendarInfosDictionary_block_invoke;
      id v169 = &unk_1E5D61CC8;
      id v170 = v19;
      id v171 = v20;
      id v21 = v19;
      id v22 = v20;
      [v18 enumerateKeysAndObjectsUsingBlock:buf];
      uint64_t v23 = [v22 copy];

      int v24 = (void *)v23;
      goto LABEL_27;
    }
    CFStringRef v33 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_ERROR, "Local subscribed calendar info from backup Info.plist was not a dictionary. Ignoring", buf, 2u);
    }
  }
  int v24 = 0;
LABEL_27:

  uint64_t v34 = CalDatabaseRestoreDatabaseCore((uint64_t)a1, v129, v130, v131, 1, a4);
  uint64_t v26 = v34;
  if (!v34 || !v24) {
    goto LABEL_122;
  }
  id v122 = v9;
  CFArrayRef v123 = v24;
  unsigned int v124 = v34;
  id v138 = v24;
  id v35 = v131;
  uint64_t v36 = *MEMORY[0x1E4F17858];
  uint64_t v164 = 0;
  id v142 = v35;
  uint64_t v134 = v36;
  int v37 = objc_msgSend(v35, "topLevelAccountsWithAccountTypeIdentifier:error:");
  id v38 = 0;
  id v39 = v38;
  if (v37 || !v38)
  {
    id v42 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v37, "count"));
    long long v160 = 0u;
    long long v161 = 0u;
    long long v162 = 0u;
    long long v163 = 0u;
    id v43 = v37;
    uint64_t v44 = [v43 countByEnumeratingWithState:&v160 objects:buf count:16];
    if (v44)
    {
      uint64_t v45 = v44;
      uint64_t v46 = *(void *)v161;
      do
      {
        for (uint64_t i = 0; i != v45; ++i)
        {
          if (*(void *)v161 != v46) {
            objc_enumerationMutation(v43);
          }
          id v48 = *(void **)(*((void *)&v160 + 1) + 8 * i);
          BOOL v49 = [v48 identifier];
          [v42 setObject:v48 forKeyedSubscript:v49];
        }
        uint64_t v45 = [v43 countByEnumeratingWithState:&v160 objects:buf count:16];
      }
      while (v45);
    }

    long long v41 = v42;
  }
  else
  {
    int v40 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v39;
      _os_log_impl(&dword_1A8E81000, v40, OS_LOG_TYPE_ERROR, "Failed to get existing subscribed calendar accounts when attempting to update subscribed calendars for .icbu restore: %@", buf, 0xCu);
    }
    long long v41 = 0;
  }

  uint64_t v26 = v124;
  int v24 = v123;
  if (!v41)
  {

    goto LABEL_120;
  }
  char v50 = (void *)MEMORY[0x1E4F1CA80];
  char v51 = [v41 allKeys];
  BOOL v136 = [v50 setWithArray:v51];

  v135 = objc_opt_new();
  CFIndex v141 = objc_opt_new();
  id v52 = CalDatabaseCopySubscribedCalendarStore(a1);
  if (v52)
  {
    uint64_t v53 = v52;
    CFMutableArrayRef v54 = CalStoreCopyCalendars((uint64_t)v52);
    CFRelease(v53);
  }
  else
  {
    CFMutableArrayRef v54 = 0;
  }
  long long v158 = 0u;
  long long v159 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  int v55 = v54;
  uint64_t v56 = [(__CFArray *)v55 countByEnumeratingWithState:&v156 objects:v167 count:16];
  long long v139 = v41;
  uint32_t v137 = v55;
  if (!v56)
  {

    char v140 = 0;
LABEL_80:
    long long v152 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v149 = 0u;
    id v82 = v136;
    uint64_t v83 = [v82 countByEnumeratingWithState:&v149 objects:v166 count:16];
    if (v83)
    {
      uint64_t v84 = v83;
      uint64_t v85 = *(void *)v150;
      uint64_t v86 = *MEMORY[0x1E4F17660];
      char v87 = 1;
      do
      {
        for (uint64_t j = 0; j != v84; ++j)
        {
          if (*(void *)v150 != v85) {
            objc_enumerationMutation(v82);
          }
          uint32_t v89 = [v41 objectForKeyedSubscript:*(void *)(*((void *)&v149 + 1) + 8 * j)];
          CFIndex v90 = [v89 accountPropertyForKey:v86];

          if (!v90)
          {
            id v148 = 0;
            uint64_t v91 = [v142 removeAccount:v89 error:&v148];
            id v92 = v148;
            if ((v91 & 1) == 0)
            {
              long long v93 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138412290;
                *(void *)&uint8_t buf[4] = v92;
                _os_log_impl(&dword_1A8E81000, v93, OS_LOG_TYPE_ERROR, "Failed to remove subscribed calendar account after restore: %@", buf, 0xCu);
              }
              char v87 = 0;
              long long v41 = v139;
            }
          }
        }
        uint64_t v84 = [v82 countByEnumeratingWithState:&v149 objects:v166 count:16];
      }
      while (v84);
    }
    else
    {
      char v87 = 1;
    }

    long long v146 = 0u;
    long long v147 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    id v95 = v135;
    uint64_t v96 = [v95 countByEnumeratingWithState:&v144 objects:v165 count:16];
    if (v96)
    {
      uint64_t v97 = v96;
      uint64_t v98 = *(void *)v145;
      id v9 = v122;
      do
      {
        for (uint64_t k = 0; k != v97; ++k)
        {
          if (*(void *)v145 != v98) {
            objc_enumerationMutation(v95);
          }
          uint64_t v100 = *(void **)(*((void *)&v144 + 1) + 8 * k);
          id v143 = 0;
          char v101 = [v142 saveAccount:v100 withError:&v143];
          id v102 = v143;
          if ((v101 & 1) == 0)
          {
            uint64_t v103 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v102;
              _os_log_impl(&dword_1A8E81000, v103, OS_LOG_TYPE_ERROR, "Failed to save subscribed calendar account after restore: %@", buf, 0xCu);
            }
            CFIndex v104 = [v100 identifier];
            int64_t v105 = [v141 objectForKeyedSubscript:v104];

            if (v105)
            {
              int64_t v106 = (void *)CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                int v107 = v106;
                Uint ID = CalCalendarGetUID();
                *(_DWORD *)long long buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = UID;
                _os_log_impl(&dword_1A8E81000, v107, OS_LOG_TYPE_ERROR, "Removing subscribed calendar %d because we failed to save its account", buf, 8u);
              }
              CFTypeRef v109 = CalCalendarCopyStore((uint64_t)v105);
              CalStoreRemoveCalendar((uint64_t)v109, v105);
              CFRelease(v109);
              char v140 = 1;
            }

            char v87 = 0;
          }
        }
        uint64_t v97 = [v95 countByEnumeratingWithState:&v144 objects:v165 count:16];
      }
      while (v97);
    }
    else
    {
      id v9 = v122;
    }

    uint64_t v26 = v124;
    int v24 = v123;
    id v94 = v139;
    int v55 = v137;
    goto LABEL_114;
  }
  uint64_t v57 = v56;
  char v140 = 0;
  uint64_t v58 = *(void *)v157;
  uint64_t v59 = *MEMORY[0x1E4F177C8];
  char v132 = 1;
  uint64_t v60 = *MEMORY[0x1E4F177C8];
  do
  {
    uint64_t v61 = 0;
    do
    {
      if (*(void *)v157 != v58) {
        objc_enumerationMutation(v55);
      }
      BOOL v62 = *(void **)(*((void *)&v156 + 1) + 8 * v61);
      BOOL v63 = (void *)CalCalendarCopySubCalAccountID((uint64_t)v62);
      if (CalCalendarIsHolidaySubscribedCalendar((uint64_t)v62))
      {
        CFMutableArrayRef v64 = [v142 topLevelAccountsWithAccountTypeIdentifier:v59 error:0];
        char v65 = [v64 firstObject];

        if (v65)
        {
          uint64_t v66 = [v65 identifier];

          if (v63 != v66)
          {
            uint64_t v67 = [v65 identifier];
            CalCalendarSetSubCalAccountID((uint64_t)v62);
          }
        }
        else
        {
          CFTypeRef v71 = CalCalendarCopyStore((uint64_t)v62);
          CalStoreRemoveCalendar((uint64_t)v71, v62);
          CFRelease(v71);
          char v140 = 1;
        }
LABEL_63:

        goto LABEL_71;
      }
      if (![v63 length])
      {
        long long v72 = (void *)CDBLogHandle;
        if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_71;
        }
        char v65 = v72;
        int v73 = CalCalendarGetUID();
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v73;
        _os_log_impl(&dword_1A8E81000, v65, OS_LOG_TYPE_DEFAULT, "Local subscribed calendar in database (ROWID=%d) has no account ID. Will not update account for this subscription", buf, 8u);
        goto LABEL_63;
      }
      id v68 = [v138 objectForKeyedSubscript:v63];
      if (!v68)
      {
        id v74 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
        {
          id v75 = v74;
          int v76 = CalCalendarGetUID();
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v76;
          *(_WORD *)&buf[8] = 2114;
          *(void *)&buf[10] = v63;
          _os_log_impl(&dword_1A8E81000, v75, OS_LOG_TYPE_DEFAULT, "Did not find subscription account info for local subscribed calendar in database (ROWID=%d, accountId= %{public}@). Will not update account for this subscription", buf, 0x12u);
        }
        goto LABEL_70;
      }
      uint64_t v69 = [v139 objectForKeyedSubscript:v63];
      if (v69)
      {
        uint64_t v70 = (void *)v69;
      }
      else
      {
        id v155 = 0;
        uint64_t v70 = [v142 createAccountWithAccountTypeIdentifier:v134 error:&v155];
        id v77 = v155;
        if (!v70)
        {
          id v80 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)&uint8_t buf[4] = v77;
            _os_log_impl(&dword_1A8E81000, v80, OS_LOG_TYPE_ERROR, "Failed to create subscription account after restore: %@", buf, 0xCu);
          }
          char v132 = 0;
          goto LABEL_69;
        }
        char v78 = [v70 identifier];
        CalCalendarSetSubCalAccountID((uint64_t)v62);

        char v140 = 1;
      }
      id v79 = [v70 identifier];
      [v141 setObject:v62 forKeyedSubscript:v79];

      v153[0] = MEMORY[0x1E4F143A8];
      v153[1] = 3221225472;
      v153[2] = __CalDatabaseUpdateSubscribedCalendarAccountsAfterRestore_block_invoke;
      v153[3] = &unk_1E5D61CF0;
      id v154 = v70;
      id v77 = v70;
      [v68 enumerateKeysAndObjectsUsingBlock:v153];
      [v135 addObject:v77];
      [v136 removeObject:v63];

      uint64_t v59 = v60;
LABEL_69:

      int v55 = v137;
LABEL_70:

LABEL_71:
      ++v61;
    }
    while (v57 != v61);
    uint64_t v81 = [(__CFArray *)v55 countByEnumeratingWithState:&v156 objects:v167 count:16];
    uint64_t v57 = v81;
  }
  while (v81);

  if (v132)
  {
    long long v41 = v139;
    goto LABEL_80;
  }
  char v87 = 0;
  uint64_t v26 = v124;
  id v9 = v122;
  int v24 = v123;
  id v94 = v139;
LABEL_114:
  if ((v140 & 1) != 0 && (CalDatabaseSave((uint64_t)a1) & 1) == 0)
  {
    CFRange v110 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v110, OS_LOG_TYPE_ERROR, "Failed to save local subscribed calendar changes to database after restoring from .icbu", buf, 2u);
    }
    char v87 = 0;
  }

  if ((v87 & 1) == 0)
  {
LABEL_120:
    uint64_t v111 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v111, OS_LOG_TYPE_ERROR, "Failed to update subscribed calendars after restore.", buf, 2u);
    }
  }
LABEL_122:
  uint64_t v12 = v126;
  id v10 = v127;
  char v14 = v125;
  if (v26)
  {
    CFRange v112 = v24;
    uint64_t v113 = v26;
    uint64_t v114 = [v128 objectForKeyedSubscript:@"preferences"];
    int v115 = [v114 objectForKeyedSubscript:@"defaultCalendarID"];
    uint64_t v116 = [v114 objectForKeyedSubscript:@"defaultCalendarStoreUID"];
    uint64_t v117 = (void *)v116;
    if (v115 && v116)
    {
      uint64_t v118 = CalDatabaseGetPreferences((uint64_t)a1);
      objc_msgSend(v118, "set_defaultCalendarID:", v115);
      objc_msgSend(v118, "set_defaultCalendarStoreUID:", objc_msgSend(v117, "integerValue"));
      objc_msgSend(v118, "set_defaultCalendarDatabaseID:", 0);
      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      objc_msgSend(v118, "set_defaultCalendarChangedTimestamp:", (uint64_t)v119);
      objc_msgSend(v118, "set_defaultCalendarChangedReason:", @"restore");
    }
    uint64_t v26 = v113;
    int v24 = v112;
  }

LABEL_128:
LABEL_129:

  int v120 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26;
    _os_log_impl(&dword_1A8E81000, v120, OS_LOG_TYPE_DEFAULT, "Finished restore of database file with uint64_t result = %{BOOL}d", buf, 8u);
  }

  return v26;
}

uint64_t CalDatabaseValidateBackupDestinationURLForDatabaseFile(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ([v1 isFileURL])
    {
      id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v4 = [v2 path];
      int v5 = [v3 fileExistsAtPath:v4];

      if (v5)
      {
        id v6 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v21 = v2;
          _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "Backup destination URL is an existing file: %@", buf, 0xCu);
        }
        uint64_t v7 = 0;
        goto LABEL_23;
      }
      char v19 = 0;
      id v13 = [v2 URLByDeletingLastPathComponent];
      char v14 = [v13 path];
      char v15 = [v3 fileExistsAtPath:v14 isDirectory:&v19];

      if (v15)
      {
        if (v19)
        {
          uint64_t v7 = 1;
LABEL_22:

LABEL_23:
          goto LABEL_24;
        }
        id v16 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v21 = v2;
          id v17 = "Backup destination URL has a parent that is not a directory: %@";
          goto LABEL_20;
        }
      }
      else
      {
        id v16 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v21 = v2;
          id v17 = "Backup destination URL has non-existent parent directory: %@";
LABEL_20:
          _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);
        }
      }
      uint64_t v7 = 0;
      goto LABEL_22;
    }
    uint64_t v12 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v21 = v2;
      id v9 = "Backup destination URL is not a file URL: %@";
      id v10 = v12;
      uint32_t v11 = 12;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v8 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      id v9 = "Nil path given for backup destination";
      id v10 = v8;
      uint32_t v11 = 2;
LABEL_11:
      _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    }
  }
  uint64_t v7 = 0;
LABEL_24:

  return v7;
}

BOOL _CalDatabaseBackupDatabaseFileWithSourceAndDestinationConnections(sqlite3 *pSource, sqlite3 *pDest)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = sqlite3_backup_init(pDest, "main", pSource, "main");
  if (!v3)
  {
    uint64_t v8 = (void *)CDBLogHandle;
    BOOL result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    id v9 = v8;
    int v12 = 136446210;
    id v13 = sqlite3_errmsg(pDest);
    id v10 = "Failed to initialize backup: %{public}s";
    goto LABEL_10;
  }
  id v4 = v3;
  do
    int v5 = sqlite3_backup_step(v4, -1);
  while (!v5);
  int v6 = v5;
  sqlite3_backup_finish(v4);
  if (v6 == 101) {
    return 1;
  }
  uint32_t v11 = (void *)CDBLogHandle;
  BOOL result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
  if (result)
  {
    id v9 = v11;
    int v12 = 136446210;
    id v13 = sqlite3_errmsg(pDest);
    id v10 = "Failure while performing backup: %{public}s";
LABEL_10:
    _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v12, 0xCu);

    return 0;
  }
  return result;
}

uint64_t _CalDatabaseVacuumAndCloseDBConnection(sqlite3 *a1, void *a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (sqlite3_exec(a1, "VACUUM", 0, 0, 0))
  {
    int v6 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = v6;
      *(_DWORD *)long long buf = 136446210;
      id v28 = sqlite3_errmsg(a1);
      uint64_t v8 = "Failed to vacuum DB: %{public}s";
LABEL_7:
      _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_ERROR, v8, buf, 0xCu);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if (sqlite3_wal_checkpoint_v2(a1, 0, 3, 0, 0))
  {
    id v9 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = v9;
      *(_DWORD *)long long buf = 136446210;
      id v28 = sqlite3_errmsg(a1);
      uint64_t v8 = "Failed to checkpoint DB: %{public}s";
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  uint64_t v10 = 1;
LABEL_9:
  if (sqlite3_close(a1))
  {
    uint32_t v11 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v12 = v11;
      id v13 = sqlite3_errmsg(a1);
      *(_DWORD *)long long buf = 136446210;
      id v28 = v13;
      _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, "Failed to close DB: %{public}s", buf, 0xCu);
    }
    uint64_t v10 = 0;
  }
  else
  {
    char v14 = v10 ^ 1;
    if (a3 != 1) {
      char v14 = 1;
    }
    if ((v14 & 1) == 0)
    {
      CalDatabaseURLByAddingSuffix(v5, @"-wal");
      char v15 = (char *)objc_claimAutoreleasedReturnValue();
      CalDatabaseURLByAddingSuffix(v5, @"-shm");
      id v16 = (char *)objc_claimAutoreleasedReturnValue();
      id v17 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v26 = 0;
      uint64_t v10 = [v17 removeItemAtURL:v15 error:&v26];
      id v18 = v26;

      if ((v10 & 1) == 0)
      {
        char v19 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          id v28 = v15;
          __int16 v29 = 2112;
          id v30 = v18;
          _os_log_impl(&dword_1A8E81000, v19, OS_LOG_TYPE_ERROR, "Failed to remove backup -wal file (%@): %@", buf, 0x16u);
        }
      }
      uint32_t v20 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v25 = v18;
      char v21 = [v20 removeItemAtURL:v16 error:&v25];
      id v22 = v25;

      if ((v21 & 1) == 0)
      {
        uint64_t v23 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          id v28 = v16;
          __int16 v29 = 2112;
          id v30 = v22;
          _os_log_impl(&dword_1A8E81000, v23, OS_LOG_TYPE_ERROR, "Failed to remove backup -shm file (%@): %@", buf, 0x16u);
        }
        uint64_t v10 = 0;
      }
    }
  }

  return v10;
}

id CalDatabaseURLByAddingSuffix(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = [v4 URLByDeletingLastPathComponent];
  int v6 = [v4 lastPathComponent];

  uint64_t v7 = [v6 stringByAppendingString:v3];

  uint64_t v8 = [v5 URLByAppendingPathComponent:v7];

  return v8;
}

uint64_t __CalDatabaseValidateBackupDestinationURLForICBU_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    int v9 = 138412546;
    id v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_ERROR, "Failed to list destination URL (%@): %@", (uint8_t *)&v9, 0x16u);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;

  return 0;
}

id CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup()
{
  if (CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup_onceToken != -1) {
    dispatch_once(&CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup_onceToken, &__block_literal_global_1);
  }
  id v0 = (void *)CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup_properties;
  return v0;
}

void __CalDatabaseBackupLocalSubscribedAccountInfos_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = objc_msgSend(*(id *)(a1 + 32), "accountPropertyForKey:");
  if (v3 && (objc_opt_isKindOfClass() & 1) != 0) {
    [*(id *)(a1 + 40) setObject:v3 forKeyedSubscript:v4];
  }
}

void __CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup_block_invoke()
{
  v3[7] = *MEMORY[0x1E4F143B8];
  v2[0] = *MEMORY[0x1E4F17668];
  v3[0] = objc_opt_class();
  v2[1] = *MEMORY[0x1E4F57948];
  v3[1] = objc_opt_class();
  v2[2] = *MEMORY[0x1E4F57938];
  _DWORD v3[2] = objc_opt_class();
  v2[3] = *MEMORY[0x1E4F57960];
  v3[3] = objc_opt_class();
  v2[4] = *MEMORY[0x1E4F57940];
  v3[4] = objc_opt_class();
  v2[5] = *MEMORY[0x1E4F57958];
  v3[5] = objc_opt_class();
  v2[6] = *MEMORY[0x1E4F57980];
  v3[6] = objc_opt_class();
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:v2 count:7];
  id v1 = (void *)CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup_properties;
  CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup_properties = v0;
}

uint64_t CalDatabaseBackupRawDatabase(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  char v15 = 0;
  ppDb = 0;
  id v5 = [v3 path];
  int v6 = sqlite3_open_v2((const char *)[v5 UTF8String], &ppDb, 1, 0);

  if (v6)
  {
    uint64_t v7 = (id)CDBLogHandle;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = sqlite3_errmsg(ppDb);
      *(_DWORD *)long long buf = 136446210;
      id v18 = v8;
      _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_ERROR, "Failed to open source database for restore: %{public}s", buf, 0xCu);
    }

    goto LABEL_11;
  }
  id v9 = [v4 path];
  int v10 = sqlite3_open_v2((const char *)[v9 UTF8String], &v15, 6, 0);

  if (v10)
  {
    __int16 v11 = (id)CDBLogHandle;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = sqlite3_errmsg(v15);
      *(_DWORD *)long long buf = 136446210;
      id v18 = v12;
      _os_log_impl(&dword_1A8E81000, v11, OS_LOG_TYPE_ERROR, "Failed to open destination database for staging restore: %{public}s", buf, 0xCu);
    }

    goto LABEL_11;
  }
  if (!_CalDatabaseBackupDatabaseFileWithSourceAndDestinationConnections(ppDb, v15))
  {
LABEL_11:
    char v13 = 0;
    goto LABEL_12;
  }
  char v13 = _CalDatabaseVacuumAndCloseDBConnection(v15, v4, 0);
  char v15 = 0;
LABEL_12:
  sqlite3_close(ppDb);
  sqlite3_close(v15);

  return v13 & 1;
}

void sub_1A8EBEA58(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1A8EBEA00);
  }
  _Unwind_Resume(exception_object);
}

void __CalDatabaseSanitizeLocalSubscribedCalendarInfosDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    __int16 v11 = (void *)CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    id v12 = v11;
    *(_DWORD *)long long buf = 138543362;
    id v23 = (id)objc_opt_class();
    id v13 = v23;
    char v14 = "Entry in subscribed calendar info from backup Info.plist has wrong key type (%{public}@). Ignoring.";
LABEL_8:
    _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);

    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    char v15 = (void *)CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    id v12 = v15;
    *(_DWORD *)long long buf = 138543362;
    id v23 = (id)objc_opt_class();
    id v13 = v23;
    char v14 = "Entry in subscribed calendar info from backup Info.plist has wrong value type (%{public}@). Ignoring.";
    goto LABEL_8;
  }
  uint64_t v7 = (void *)MEMORY[0x1E4F1CA60];
  id v8 = v6;
  id v9 = objc_msgSend(v7, "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  id v18 = __CalDatabaseSanitizeLocalSubscribedCalendarInfosDictionary_block_invoke_67;
  uint64_t v19 = &unk_1E5D61CC8;
  id v20 = *(id *)(a1 + 32);
  id v21 = v9;
  id v10 = v9;
  [v8 enumerateKeysAndObjectsUsingBlock:&v16];

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, v5, v16, v17, v18, v19);
LABEL_9:
}

void __CalDatabaseSanitizeLocalSubscribedCalendarInfosDictionary_block_invoke_67(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = (void *)CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    id v8 = v7;
    int v15 = 138543362;
    id v16 = (id)objc_opt_class();
    id v9 = v16;
    id v10 = "Entry in subscribed calendar info inner dictionary from backup Info.plist has wrong key type (%{public}@). Ignoring.";
    __int16 v11 = v8;
    uint32_t v12 = 12;
    goto LABEL_11;
  }
  if ([*(id *)(a1 + 32) objectForKeyedSubscript:v5])
  {
    if (objc_opt_isKindOfClass())
    {
      [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v5];
      goto LABEL_12;
    }
    char v14 = (void *)CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    id v8 = v14;
    int v15 = 138543618;
    id v16 = v5;
    __int16 v17 = 2114;
    id v18 = (id)objc_opt_class();
    id v9 = v18;
    id v10 = "Entry in subscribed calendar info inner dictionary from backup Info.plist has wrong value type (key = %{public"
          "}@, type = %{public}@). Ignoring.";
    __int16 v11 = v8;
    uint32_t v12 = 22;
LABEL_11:
    _os_log_impl(&dword_1A8E81000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v15, v12);

    goto LABEL_12;
  }
  id v13 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    int v15 = 138543362;
    id v16 = v5;
    _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Unexpected property (%{public}@) in subscribed calendar info inner dictionary from backup Info.plist. Ignoring.", (uint8_t *)&v15, 0xCu);
  }
LABEL_12:
}

uint64_t __CalDatabaseUpdateSubscribedCalendarAccountsAfterRestore_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setAccountProperty:a3 forKey:a2];
}

void _CalColorPrepareForSave(uint64_t a1)
{
  if (!_CalColorGetStoreID(a1))
  {
    id v1 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl(&dword_1A8E81000, v1, OS_LOG_TYPE_ERROR, "Attempting to save an color that is not in any store", v2, 2u);
    }
  }
}

void CalColorInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalColorClass, (const char **)&kCalColorIndexes, 0);
  CalMigrationCreateTriggers(a2, (const char **)&kCalColorClass, (const char **)&kCalColorTriggers);
}

void CalColorMigrateTables(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 18006) {
    CalColorInitializeTables(a1, a2);
  }
}

uint64_t CalColorGetPropertyIDWithPropertyName(void *key)
{
  if (CalColorGetPropertyIDWithPropertyName_onceToken != -1) {
    dispatch_once(&CalColorGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_2);
  }
  unint64_t value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalColorGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void __CalColorGetPropertyIDWithPropertyName_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = @"data";
  int v2 = 1;
  id v3 = @"providerIdentifier";
  int v4 = 2;
  id v5 = @"UUID";
  int v6 = 3;
  uint64_t v7 = @"externalID";
  int v8 = 4;
  id v9 = @"source";
  int v10 = 6;
  CalColorGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&v1, 5);
  for (uint64_t i = 64; i != -16; i -= 16)
}

void sub_1A8EBF5C4(_Unwind_Exception *a1)
{
  for (uint64_t i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

const void *_CalDatabaseCreateColor(uint64_t a1)
{
  int v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 29);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateColor(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Color = _CalDatabaseCreateColor((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Color;
}

uint64_t _CalRemoveColor(const void *a1)
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalRemoveColor(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorHasValidParent(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v1 = _CalColorCopyEvents(a1);
  uint64_t v2 = [(__CFArray *)v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v7;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v1);
        }
        if (_CalCalendarItemHasValidParent(*(void *)(*((void *)&v6 + 1) + 8 * i)))
        {
          uint64_t v2 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v2 = [(__CFArray *)v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v2;
}

CFMutableArrayRef _CalColorCopyEvents(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

BOOL _CalColorIsUnused(uint64_t a1)
{
  CFMutableArrayRef v1 = _CalColorCopyEvents(a1);
  BOOL v2 = [(__CFArray *)v1 count] == 0;

  return v2;
}

void _CalColorCleanUpDanglingEntities(uint64_t a1, void *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM Color WHERE (NOT EXISTS (SELECT 1 FROM CalendarItem where color_id > 0 AND color_id=Color.ROWID));",
    0);
}

uint64_t _CalColorSaveAddedRecords(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalColorGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyColorWithUID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  BOOL v4 = (const void *)_CalColorGetWithUID(RecordStore);
  id v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *CalDatabaseCopyColorWithProviderAndExternalID(os_unfair_lock_s *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = RecordStore == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  id v16 = v5;
  __int16 v17 = v6;
  id v11 = v6;
  id v12 = v5;
  CFArrayRef v13 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();

  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);
  if (!v13) {
    return 0;
  }
  if (CFArrayGetCount(v13) < 1)
  {
    int ValueAtIndex = 0;
  }
  else
  {
    int ValueAtIndex = CFArrayGetValueAtIndex(v13, 0);
    CFRetain(ValueAtIndex);
  }
  CFRelease(v13);
  return ValueAtIndex;
}

uint64_t __CalDatabaseCopyColorWithProviderAndExternalID_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 1, (const char *)[*(id *)(a1 + 32) UTF8String], -1, 0);
  BOOL v4 = *(sqlite3_stmt **)(a2 + 8);
  id v5 = (const char *)[*(id *)(a1 + 40) UTF8String];
  return sqlite3_bind_text(v4, 2, v5, -1, 0);
}

CFMutableArrayRef CalColorCopyEvents(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalColorCopyEvents(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void *_CalColorAddEvent(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationAddObject(result, a2);
    uint64_t Store = CPRecordGetStore();
    if (CDBLockingAssertionsEnabled) {
      BOOL v6 = Store == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      long long v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
    return (void *)CPRecordStoreAddRecord();
  }
  return result;
}

void CalColorAddEvent(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalColorAddEvent(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorRemoveEvent(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationRemoveObject((void *)result, a2);
    uint64_t result = _CalColorIsUnused(a1);
    if (result)
    {
      uint64_t Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled) {
        BOOL v7 = Store == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        long long v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
      return CPRecordStoreRemoveRecord();
    }
  }
  return result;
}

void CalColorRemoveEvent(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalColorRemoveEvent(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalColorGetUID()
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalColorSetStoreID(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 0, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetStoreID(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if ((int)Property <= 0)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    BOOL v4 = _CalColorCopyEvents(a1);
    uint64_t v5 = [(__CFArray *)v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t Property = _CalCalendarItemGetStoreId(*(void *)(*((void *)&v10 + 1) + 8 * i));
          if ((int)Property > 0)
          {

            _CalRecordSetPropertyIfDifferent(a1, 0, (const __CFString *)Property);
            goto LABEL_19;
          }
        }
        uint64_t v6 = [(__CFArray *)v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t Property = 0;
    }

LABEL_19:
  }
  return Property;
}

uint64_t CalColorGetStoreID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Storeuint64_t ID = _CalColorGetStoreID(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return StoreID;
}

uint64_t _CalColorGetStore(uint64_t a1)
{
  if ((int)_CalColorGetStoreID(a1) < 1) {
    return 0;
  }
  uint64_t Store = CPRecordGetStore();
  return _CalGetStoreWithUID(Store);
}

CFTypeRef CalColorCopyStore(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Store = (const void *)_CalColorGetStore(a1);
  if (Store) {
    CFTypeRef v4 = CFRetain(Store);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalColorSetData(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetData(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalColorCopyData(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Data = (const void *)_CalColorGetData(a1);
  CFTypeRef v4 = Data;
  if (Data) {
    CFRetain(Data);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalColorSetProviderIdentifier(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 2, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetProviderIdentifier(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalColorCopyProviderIdentifier(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ProviderIdentifier = (const void *)_CalColorGetProviderIdentifier(a1);
  CFTypeRef v4 = ProviderIdentifier;
  if (ProviderIdentifier) {
    CFRetain(ProviderIdentifier);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalColorSetUUID(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 3, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *CalColorCopyUUID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Descriptiouint64_t n = (const void *)_CalCalendarItemGetDescription(a1);
  CFTypeRef v4 = Description;
  if (Description) {
    CFRetain(Description);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalColorSetExternalIdentifier(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 4, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetExternalIdentifier(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalColorCopyExternalIdentifier(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ExternalIdentifier = (const void *)_CalColorGetExternalIdentifier(a1);
  CFTypeRef v4 = ExternalIdentifier;
  if (ExternalIdentifier) {
    CFRetain(ExternalIdentifier);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalDatabaseMigrateToMultipleDatabases(uint64_t a1)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  BOOL v2 = _CalDatabaseGetCalendarDataContainerProvider(a1);
  uint64_t v86 = a1;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  CFMutableArrayRef v3 = (id)_CalDatabaseCopyOfAllStores(a1);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v93 objects:v106 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v92 = *(void *)v94;
    uint64_t v85 = *MEMORY[0x1E4F57870];
    id v82 = v2;
    char v87 = v3;
    do
    {
      uint64_t v6 = 0;
      uint64_t v88 = v5;
      do
      {
        if (*(void *)v94 != v92) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v93 + 1) + 8 * v6);
        long long v8 = _CalErrorGetRecordID(v7);
        if (v8)
        {
          BOOL v9 = [v2 containerInfoForAccountIdentifier:v8];
          if ([v9 usesDataSeparatedContainer])
          {
            uint64_t v10 = [v9 containerURL];
            long long v11 = CDBLogHandle;
            if (v10)
            {
              long long v12 = (void *)v10;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543618;
                *(void *)&uint8_t buf[4] = v8;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v12;
                _os_log_impl(&dword_1A8E81000, v11, OS_LOG_TYPE_DEFAULT, "Account ID %{public}@ will be migrated to %@", buf, 0x16u);
              }
              id v13 = [v9 personaID];
              id v14 = v12;
              uint64_t v91 = _CalErrorGetRecordID(v7);
              uint64_t v15 = [MEMORY[0x1E4F28CB8] defaultManager];
              id v105 = 0;
              CFIndex v90 = v15;
              char v16 = [v15 createDirectoryAtURL:v14 withIntermediateDirectories:1 attributes:0 error:&v105];
              id v17 = v105;
              if ((v16 & 1) == 0)
              {
                uint64_t v24 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)uint64_t v111 = 138543874;
                  *(void *)&v111[4] = v91;
                  *(_WORD *)&v111[12] = 2112;
                  *(void *)&v111[14] = v14;
                  *(_WORD *)&v111[22] = 2112;
                  CFRange v112 = v17;
                  _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_ERROR, "Can't create directories for new separated database for account %{public}@ at path %@: %@", v111, 0x20u);
                }
                int v25 = 0;
                id v26 = v90;
                goto LABEL_79;
              }
              CFTypeRef v18 = _CalDatabaseCopyAuxDatabaseForPersonaID(v86);
              if (!v18)
              {
                id v89 = [v14 URLByAppendingPathComponent:v85];
                uint64_t v27 = [v89 path];
                int v28 = [v90 fileExistsAtPath:v27];

                if (v28)
                {
                  __int16 v29 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)uint64_t v111 = 138543618;
                    *(void *)&v111[4] = v91;
                    *(_WORD *)&v111[12] = 2112;
                    *(void *)&v111[14] = v14;
                    _os_log_impl(&dword_1A8E81000, v29, OS_LOG_TYPE_ERROR, "Found old database file in directory for account %{public}@ to be migrated to (%@). Deleting it.", v111, 0x16u);
                  }
                  id v104 = v17;
                  char v30 = [v90 removeItemAtURL:v89 error:&v104];
                  id v31 = v104;

                  if ((v30 & 1) == 0)
                  {
                    uint64_t v66 = CDBLogHandle;
                    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t v111 = 138543618;
                      *(void *)&v111[4] = v91;
                      *(_WORD *)&v111[12] = 2112;
                      id v17 = v31;
                      *(void *)&v111[14] = v31;
                      _os_log_impl(&dword_1A8E81000, v66, OS_LOG_TYPE_ERROR, "Unable to remove old database for account %{public}@: %@", v111, 0x16u);
                      int v25 = 0;
                      goto LABEL_76;
                    }
                    int v25 = 0;
                    id v26 = v90;
                    id v17 = v31;
                    goto LABEL_77;
                  }
                  id v78 = v14;
                  id v17 = v31;
                }
                else
                {
                  id v78 = v14;
                }
                uint32_t v32 = (void *)MEMORY[0x1E4F1CB10];
                CFStringRef v33 = [v89 path];
                uint64_t v34 = [v33 stringByAppendingString:@"-shm"];
                id v35 = [v32 fileURLWithPath:v34];

                uint64_t v36 = [v35 path];
                id v26 = v90;
                LODWORD(v33) = [v90 fileExistsAtPath:v36];

                uint64_t v83 = v35;
                if (v33)
                {
                  id v103 = v17;
                  char v37 = [v90 removeItemAtURL:v35 error:&v103];
                  id v38 = v103;

                  if ((v37 & 1) == 0)
                  {
                    id v68 = CDBLogHandle;
                    id v17 = v38;
                    id v14 = v78;
                    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t v111 = 138543618;
                      *(void *)&v111[4] = v91;
                      *(_WORD *)&v111[12] = 2112;
                      *(void *)&v111[14] = v38;
                      _os_log_impl(&dword_1A8E81000, v68, OS_LOG_TYPE_ERROR, "Unable to remove old database-shm for account %{public}@: %@", v111, 0x16u);
                    }

                    int v25 = 0;
                    BOOL v2 = v82;
                    goto LABEL_78;
                  }
                  id v80 = v13;
                  id v17 = v38;
                }
                else
                {
                  id v80 = v13;
                }
                id v14 = v78;
                id v39 = (void *)MEMORY[0x1E4F1CB10];
                int v40 = [v89 path];
                long long v41 = [v40 stringByAppendingString:@"-wal"];
                id v42 = [v39 fileURLWithPath:v41];

                id v43 = [v42 path];
                LODWORD(v41) = [v90 fileExistsAtPath:v43];

                if (v41)
                {
                  id v102 = v17;
                  char v44 = [v90 removeItemAtURL:v42 error:&v102];
                  id v45 = v102;

                  if ((v44 & 1) == 0)
                  {
                    uint64_t v69 = CDBLogHandle;
                    id v13 = v80;
                    id v17 = v45;
                    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)uint64_t v111 = 138543618;
                      *(void *)&v111[4] = v91;
                      *(_WORD *)&v111[12] = 2112;
                      *(void *)&v111[14] = v45;
                      _os_log_impl(&dword_1A8E81000, v69, OS_LOG_TYPE_ERROR, "Unable to remove old database-shm for account %{public}@: %@", v111, 0x16u);
                    }

                    int v25 = 0;
                    goto LABEL_76;
                  }
                  id v17 = v45;
                }
                id v13 = v80;
                BOOL v2 = v82;

                uint64_t v20 = v86;
                goto LABEL_37;
              }
              CFRelease(v18);
              id v89 = [v14 URLByAppendingPathComponent:v85];
              uint64_t v19 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t v111 = 138543618;
                *(void *)&v111[4] = v13;
                *(_WORD *)&v111[12] = 2114;
                *(void *)&v111[14] = v91;
                _os_log_impl(&dword_1A8E81000, v19, OS_LOG_TYPE_DEFAULT, "Database already exists for persona %{public}@; also migrating account %{public}@ to the same database",
                  v111,
                  0x16u);
              }
              uint64_t v20 = v86;
LABEL_37:
              if (!_CalDatabaseGetRecordStore(v20))
              {
                uint64_t v60 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)uint64_t v111 = 0;
                  _os_log_impl(&dword_1A8E81000, v60, OS_LOG_TYPE_ERROR, "No record store.", v111, 2u);
                }
                int v25 = 0;
                id v26 = v90;
                goto LABEL_78;
              }
              id v84 = v17;
              if (CDBLockingAssertionsEnabled)
              {
                uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (Context) {
                  os_unfair_lock_assert_owner(Context + 20);
                }
              }
              uint64_t Database = CPRecordStoreGetDatabase();
              if (Database)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*(void *)(Database + 104))
                  {
                    id v48 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v48) {
                      os_unfair_lock_assert_owner(v48 + 20);
                    }
                  }
                }
                uint64_t v49 = CPSqliteDatabaseConnectionForWriting();
                if (v49)
                {
                  char v50 = (void *)v49;
                  char v51 = (const void *)CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(2688, v14);
                  if (v51)
                  {
                    uint64_t v81 = v13;
                    CFRelease(v51);
                    v100[0] = MEMORY[0x1E4F143A8];
                    v100[1] = 3221225472;
                    v100[2] = ___CalDatabaseMigrateStoreToSeparateDB_block_invoke;
                    v100[3] = &unk_1E5D61F58;
                    id v89 = v89;
                    id v101 = v89;
                    CalPerformSQLWithConnectionAndBindBlock(v50, 0, @"ATTACH DATABASE ? AS aux", v100);
                    CPRecordGetID();
                    if (CDBLockingAssertionsEnabled)
                    {
                      id v52 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v52) {
                        os_unfair_lock_assert_owner(v52 + 20);
                      }
                    }
                    RowidForRecorduint64_t ID = CPRecordStoreGetRowidForRecordID();
                    v99[0] = MEMORY[0x1E4F143A8];
                    v99[1] = 3221225472;
                    v99[2] = ___CalDatabaseMigrateStoreToSeparateDB_block_invoke_2;
                    v99[3] = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    v99[4] = RowidForRecordID;
                    id v79 = (void *)MEMORY[0x1AD0E9DC0](v99);
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalStoreClass, @"WHERE ROWuint64_t ID = ?", v79, @"WHERE record = ?", v79);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalCalendarClass, @"WHERE store_id = ?", v79, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalEventClass, @"WHERE calendar_id IN (SELECT ROWID FROM aux.Calendar)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalAlarmClass, @"WHERE calendaritem_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR calendar_owner_id IN (SELECT ROWID FROM aux.Calendar)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalLocationClass, @"WHERE item_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR client_loc_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR start_loc_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR end_loc_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR alarm_owner_id IN (SELECT ROWID FROM aux.Alarm)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalParticipantClass, @"WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalErrorClass, @"WHERE store_owner_id = ? OR calendar_owner_id IN (SELECT ROWID FROM aux.Calendar) OR calendaritem_owner_id IN (SELECT ROWID FROM aux.CalendarItem)", v79, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalRecurrenceClass, @"WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalEventActionClass, @"WHERE event_id IN (SELECT ROWID FROM aux.CalendarItem)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalExceptionDateClass, @"WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalAttachmentFileClass, @"WHERE store_id = ?", v79, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalAttachmentClass, @"WHERE file_id IN (SELECT ROWID FROM aux.AttachmentFile)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalCategoryLinkClass, @"WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalCategoryClass, @"WHERE ROWID IN (SELECT category_id FROM aux.CategoryLink)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalShareeClass, @"WHERE owner_id IN (SELECT ROWID FROM aux.Calendar)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalNotificationClass, @"WHERE calendar_id IN (SELECT ROWID FROM aux.Calendar) OR invite_reply_calendar_id IN (SELECT ROWID FROM aux.Calendar)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalResourceChangeClass, @"WHERE notification_id IN (SELECT ROWID FROM aux.Notification)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalSuggestedEventInfoClass, @"WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalContactClass, @"WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)", 0, @"WHERE store_id = ?", v111);
                    *(void *)uint64_t v111 = MEMORY[0x1E4F143A8];
                    *(void *)&v111[8] = 3221225472;
                    *(void *)&v111[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                    CFRange v112 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                    uint64_t v113 = RowidForRecordID;
                    _CalDatabaseCopyToAuxDatabaseWithChanges(v50, &kCalConferenceClass, @"WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)", 0, @"WHERE store_id = ?", v111);
                    uint64_t v54 = v86;
                    CalIdentityCopyDataToAuxDatabase(v86, RowidForRecordID, v50);
                    CalDatabasePersistentChangeTrackingCopyToAuxDatabase(v50, RowidForRecordID);
                    CalPerformSQLWithConnection(v50, @"INSERT OR REPLACE INTO aux._SqliteDatabaseProperties SELECT * FROM _SqliteDatabaseProperties WHERE key IN (\"CalLastCategoryChanges\", \"CalLastCalendarChanges\", \"CalLastEventRecurrenceChanges\", \"CalLastEventAlarmChanges\", \"__CPRecordSequenceNumber\")");
                    CalPerformSQLWithConnection(v50, @"DETACH DATABASE aux");
                    CFTypeRef v55 = _CalDatabaseCopyAuxDatabaseForPersonaID(v86);
                    if (v55)
                    {
LABEL_54:
                      v97[0] = MEMORY[0x1E4F143A8];
                      v97[1] = 3221225472;
                      v97[2] = ___CalDatabaseMigrateStoreToSeparateDB_block_invoke_63;
                      v97[3] = &unk_1E5D61F80;
                      v98[0] = v91;
                      v98[1] = v55;
                      CalPerformSQLWithConnectionAndBindBlock(v50, 0, @"INSERT OR REPLACE INTO AuxDatabaseAccount (account_id, database_id) VALUES (?, ?)", v97);
                      CFRelease(v55);
                      int v25 = 1;
                      *(unsigned char *)(v54 + 379) = 1;
                      CalPerformSQLWithConnectionAndBindBlock(v50, 0, @"DELETE FROM Store WHERE ROWuint64_t ID = ?", v79);
                      *(unsigned char *)(v54 + 379) = 0;
                      [*(id *)(v54 + 328) removeAllObjects];
                      uint64_t v57 = (os_unfair_lock_s *)CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(2176, v14);
                      uint64_t v58 = (const void *)CalDatabaseCopyEventOccurrenceCache(v57);
                      _CalEventOccurrenceCacheForceRebuild((uint64_t)v58);
                      CFRelease(v58);
                      CFRelease(v57);
                      uint64_t v59 = (id *)v98;
                    }
                    else
                    {
                      *(void *)long long buf = MEMORY[0x1E4F143A8];
                      *(void *)&buf[8] = 3221225472;
                      *(void *)&uint8_t buf[16] = ___CalDatabaseMigrateStoreToSeparateDB_block_invoke_3;
                      id v108 = &unk_1E5D61ED0;
                      id v109 = v14;
                      id v110 = v81;
                      CalPerformSQLWithConnectionAndBindBlock(v50, 0, @"INSERT INTO AuxDatabase (path, persona_id) VALUES (?, ?)", buf);
                      CFTypeRef v56 = _CalDatabaseCopyAuxDatabaseForPersonaID(v86);
                      if (v56)
                      {
                        CFTypeRef v55 = v56;

                        uint64_t v54 = v86;
                        goto LABEL_54;
                      }
                      id v75 = CDBLogHandle;
                      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)uint64_t v111 = 0;
                        _os_log_impl(&dword_1A8E81000, v75, OS_LOG_TYPE_ERROR, "Couldn't insert aux db reference into main db", v111, 2u);
                      }

                      int v25 = 0;
                      uint64_t v59 = &v109;
                    }
                    id v13 = v81;
                    id v17 = v84;

LABEL_76:
                    id v26 = v90;
LABEL_77:
                    BOOL v2 = v82;
LABEL_78:

LABEL_79:
                    uint64_t v70 = CDBLogHandle;
                    if (v25)
                    {
                      uint64_t v5 = v88;
                      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)long long buf = 138543618;
                        *(void *)&uint8_t buf[4] = v8;
                        *(_WORD *)&buf[12] = 2112;
                        *(void *)&buf[14] = v14;
                        CFTypeRef v71 = v70;
                        os_log_type_t v72 = OS_LOG_TYPE_DEFAULT;
                        int v73 = "Account ID %{public}@ successfully migrated to %@";
                        uint32_t v74 = 22;
                        goto LABEL_84;
                      }
                    }
                    else
                    {
                      uint64_t v5 = v88;
                      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)long long buf = 138543362;
                        *(void *)&uint8_t buf[4] = v8;
                        CFTypeRef v71 = v70;
                        os_log_type_t v72 = OS_LOG_TYPE_ERROR;
                        int v73 = "Account ID %{public}@ NOT migrated. Migration failed.";
                        uint32_t v74 = 12;
LABEL_84:
                        _os_log_impl(&dword_1A8E81000, v71, v72, v73, buf, v74);
                      }
                    }

                    CFMutableArrayRef v3 = v87;
LABEL_86:

                    goto LABEL_87;
                  }
                  uint64_t v67 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)uint64_t v111 = 138543618;
                    *(void *)&v111[4] = v91;
                    *(_WORD *)&v111[12] = 2112;
                    *(void *)&v111[14] = v14;
                    BOOL v62 = v67;
                    BOOL v63 = "Couldn't create database for account %{public}@ in directory %@";
                    uint32_t v65 = 22;
LABEL_64:
                    _os_log_impl(&dword_1A8E81000, v62, OS_LOG_TYPE_ERROR, v63, v111, v65);
                  }
LABEL_65:
                  int v25 = 0;
                  id v26 = v90;
                  id v17 = v84;
                  goto LABEL_77;
                }
                uint64_t v64 = CDBLogHandle;
                if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_65;
                }
                *(_WORD *)uint64_t v111 = 0;
                BOOL v62 = v64;
                BOOL v63 = "Couldn't get writer connection to database";
              }
              else
              {
                uint64_t v61 = CDBLogHandle;
                if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_65;
                }
                *(_WORD *)uint64_t v111 = 0;
                BOOL v62 = v61;
                BOOL v63 = "No sqliteDB";
              }
              uint32_t v65 = 2;
              goto LABEL_64;
            }
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              id v21 = v11;
              id v22 = [v9 personaID];
              *(_DWORD *)long long buf = 138543618;
              *(void *)&uint8_t buf[4] = v8;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v22;
              _os_log_impl(&dword_1A8E81000, v21, OS_LOG_TYPE_ERROR, "Account ID %{public}@ with persona ID %@{public}@ is data separated, but we couldn't get a container for it.", buf, 0x16u);
            }
          }
          id v23 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v8;
            _os_log_impl(&dword_1A8E81000, v23, OS_LOG_TYPE_DEFAULT, "Account ID %{public}@ does not need to be migrated out of the main database", buf, 0xCu);
          }
          goto LABEL_86;
        }
LABEL_87:

        ++v6;
      }
      while (v5 != v6);
      uint64_t v76 = [v3 countByEnumeratingWithState:&v93 objects:v106 count:16];
      uint64_t v5 = v76;
    }
    while (v76);
  }

  return 1;
}

void _CalDatabaseCopyToAuxDatabaseWithChanges(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  char v30 = a3;
  id v11 = a4;
  long long v12 = a5;
  id v13 = a6;
  id v14 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  [v14 appendString:@"ROWID"];
  int v15 = *((_DWORD *)a2 + 18);
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    for (uint64_t i = 0; i < v15; ++i)
    {
      uint64_t v18 = a2[10];
      if ((*(unsigned char *)(v18 + v16 + 24) & 4) == 0 && *(_DWORD *)(v18 + v16 + 8))
      {
        [v14 appendFormat:@", %s", *(void *)(v18 + v16)];
        int v15 = *((_DWORD *)a2 + 18);
      }
      v16 += 40;
    }
  }
  uint64_t v19 = &stru_1EFF6D0F0;
  if (v30) {
    uint64_t v19 = v30;
  }
  uint64_t v20 = [NSString stringWithFormat:@"INSERT INTO aux.%s (%@) SELECT %@ FROM %s %@", *a2, v14, v14, *a2, v19];
  CalPerformSQLWithConnectionAndBindBlock(a1, 0, (uint64_t)v20, v11);
  if ((a2[7] & 2) != 0)
  {
    __int16 v29 = v13;
    id v21 = objc_msgSend(@"ROWID, record, type", "mutableCopy");
    id v22 = v21;
    if ((a2[7] & 0x10) != 0) {
      [v21 appendString:@", sequence_number"];
    }
    int v23 = *((_DWORD *)a2 + 18);
    if (v23 >= 1)
    {
      uint64_t v24 = 0;
      for (uint64_t j = 0; j < v23; ++j)
      {
        uint64_t v26 = a2[10];
        if ((*(unsigned char *)(v26 + v24 + 24) & 0xA) != 0)
        {
          [v22 appendFormat:@", %s", *(void *)(v26 + v24)];
          int v23 = *((_DWORD *)a2 + 18);
        }
        v24 += 40;
      }
    }
    uint64_t v27 = &stru_1EFF6D0F0;
    if (v12) {
      uint64_t v27 = v12;
    }
    int v28 = [NSString stringWithFormat:@"INSERT INTO aux.%sChanges (%@) SELECT %@ FROM %sChanges %@", *a2, v22, v22, *a2, v27];
    id v13 = v29;
    CalPerformSQLWithConnectionAndBindBlock(a1, 0, (uint64_t)v28, v29);
  }
}

void sub_1A8EC3010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4 0) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void CalErrorInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalErrorClass, (const char **)&kCalErrorIndexes, 0);
}

void CalErrorMigrateTables(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 16004)
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalErrorClass, (const char **)&kCalErrorIndexes, 0);
  }
}

uint64_t CalErrorGetPropertyIDWithPropertyName(void *key)
{
  if (CalErrorGetPropertyIDWithPropertyName_onceToken != -1) {
    dispatch_once(&CalErrorGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_3);
  }
  unint64_t value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalErrorGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void __CalErrorGetPropertyIDWithPropertyName_block_invoke()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef v1 = @"storeOwner";
  int v2 = 7;
  uint64_t v3 = @"calendarOwner";
  int v4 = 8;
  uint64_t v5 = @"calendarItemOwner";
  int v6 = 9;
  uint64_t v7 = @"errorType";
  int v8 = 3;
  uint64_t v9 = @"errorCode";
  int v10 = 4;
  id v11 = @"userInfoData";
  int v12 = 5;
  CalErrorGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&v1, 6);
  for (uint64_t i = 80; i != -16; i -= 16)
}

void sub_1A8EC3BD4(_Unwind_Exception *a1)
{
  for (uint64_t i = 80; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

const void *_CalDatabaseCreateError(uint64_t a1)
{
  int v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateError(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFTypeRef Error = _CalDatabaseCreateError((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Error;
}

void *_CalRemoveError(const void *a1)
{
  CFTypeRef Owner = _CalErrorGetOwner((uint64_t)a1);
  if (Owner)
  {
    uint64_t v3 = Owner;
    if (_CalEntityIsOfType(Owner, 6))
    {
      return _CalStoreSetError((uint64_t)v3, 0);
    }
    else if (_CalEntityIsOfType(v3, 1))
    {
      return _CalCalendarSetError((uint64_t)v3, 0);
    }
    else
    {
      return _CalCalendarItemSetError((uint64_t)v3, 0);
    }
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return (void *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

CFTypeRef _CalErrorGetOwner(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (!Property || (uint64_t v4 = Property, !CalRelationGetRelatedObject(Property)))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5) {
            os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
    uint64_t v6 = CPRecordGetProperty();
    if (!v6 || (uint64_t v4 = v6, !CalRelationGetRelatedObject(v6)))
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      uint64_t v8 = CPRecordGetProperty();
      if (!v8) {
        return 0;
      }
      uint64_t v4 = v8;
      if (!CalRelationGetRelatedObject(v8)) {
        return 0;
      }
    }
  }
  return CalRelationGetRelatedObject(v4);
}

void CalRemoveError(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveError(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalErrorCopyOwner(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalErrorGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalErrorHasValidParent(uint64_t a1)
{
  CFTypeRef result = _CalErrorGetOwner(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalErrorCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

uint64_t _CalErrorGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t CalDatabaseCopyAllErrors(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    Recorduint64_t Store = CPRecordStoreCopyAllInstancesOfClass();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return RecordStore;
}

id CalDatabaseGetIDOfOneEventWithAnErrorPerSource(int a1, os_unfair_lock_s *a2)
{
  CFTypeRef v4 = a2 + 20;
  os_unfair_lock_lock(a2 + 20);
  if (!_CalDatabaseGetRecordStore((uint64_t)a2)) {
    goto LABEL_30;
  }
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_30;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  uint64_t v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (!v8) {
    goto LABEL_30;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)v8)
    {
      if (*(void *)(*(void *)v8 + 104))
      {
        uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
  }
  uint64_t v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    id v11 = (uint64_t **)v10;
    int v12 = objc_opt_new();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        uint64_t v13 = **v11;
        if (v13)
        {
          if (*(void *)(v13 + 104))
          {
            id v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        uint64_t v15 = **v11;
        if (v15)
        {
          if (*(void *)(v15 + 104))
          {
            uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    id v17 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v12, "count"));
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = ___CalDatabaseGetIDOfOneEventWithAnErrorPerSource_block_invoke;
    void v20[3] = &unk_1E5D62250;
    int v22 = a1;
    id v18 = v17;
    id v21 = v18;
    [v12 enumerateKeysAndObjectsUsingBlock:v20];
  }
  else
  {
LABEL_30:
    id v18 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v18;
}

uint64_t _CalErrorGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalErrorGetErrorType(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

uint64_t CalErrorGetErrorCode(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef CalErrorCopyUserInfo(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (const void *)CPRecordGetProperty();
  if (Property) {
    CFTypeRef v5 = CFRetain(Property);
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalErrorSetUserInfo(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalErrorSetUserInfo(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalErrorSetAccountErrorCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorType(a1);
  _CalErrorSetErrorCode(a1);
  CalErrorEncodeUserInfo(a3);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalErrorSetErrorType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t _CalErrorSetErrorCode(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

CFTypeRef CalErrorEncodeUserInfo(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  id v6 = 0;
  uint64_t v1 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v6];
  id v2 = v6;
  if (v1)
  {
    CFTypeRef v3 = CFAutorelease(v1);
  }
  else
  {
    CFTypeRef v4 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v8 = v2;
      _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_ERROR, "Error encoding user info: %@", buf, 0xCu);
    }
    CFTypeRef v3 = 0;
  }

  return v3;
}

void CalErrorSetCalendarErrorCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorType(a1);
  _CalErrorSetErrorCode(a1);
  CalErrorEncodeUserInfo(a3);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalErrorSetCalendarItemErrorCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorType(a1);
  _CalErrorSetErrorCode(a1);
  CalErrorEncodeUserInfo(a3);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalErrorDecodeUserInfo(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  id v2 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_msgSend(v2, "setWithObjects:", v3, v4, v5, v6, v7, v8, objc_opt_class(), 0);
  id v15 = 0;
  uint64_t v10 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClasses:v9 fromData:a1 error:&v15];
  id v11 = v15;
  if (v10)
  {
    CFTypeRef v12 = CFAutorelease(v10);
  }
  else
  {
    uint64_t v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v17 = v11;
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Error decoding user info: %@", buf, 0xCu);
    }
    CFTypeRef v12 = 0;
  }

  return v12;
}

uint64_t eventWithErrorAndSouceHandler(uint64_t a1, void *a2)
{
  uint64_t v3 = *(sqlite3_stmt **)(a1 + 8);
  id v4 = a2;
  uint64_t v5 = sqlite3_column_int(v3, 0);
  uint64_t v6 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1));
  uint64_t v7 = [NSNumber numberWithInt:v5];
  [v4 setObject:v7 forKeyedSubscript:v6];

  return 0;
}

os_unfair_lock *CalDatabaseCreateWithAuxDatabaseRef(os_unfair_lock *a1, const void *a2, int a3)
{
  return CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(a1, a2, 0, a3);
}

os_unfair_lock *CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(os_unfair_lock *a1, const void *a2, void *a3, int a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  Uuint64_t ID = CalAuxDatabaseGetUID();
  CFTypeRef v9 = CalAuxDatabaseCopyPath((uint64_t)a2);
  if (v9)
  {
    uint64_t v10 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v9];
    id v11 = objc_alloc_init(CalDatabaseInitializationConfiguration);
    [(CalDatabaseInitializationConfiguration *)v11 setOptions:a4 | 0x1A00u];
    [(CalDatabaseInitializationConfiguration *)v11 setDirectoryURL:v10];
    CFTypeRef v12 = CalDatabaseGetCalendarDataContainerProvider((uint64_t)a1);
    [(CalDatabaseInitializationConfiguration *)v11 setDataContainerProvider:v12];

    uint64_t v13 = CalDatabaseGetPreferences((uint64_t)a1);
    [(CalDatabaseInitializationConfiguration *)v11 setPreferences:v13];

    uint64_t v14 = CalDatabaseCreateWithConfiguration(v11);
    if (v14)
    {
      id v15 = (os_unfair_lock *)v14;
      CalDatabaseSetAuxilliaryDatabaseID(v14, UID);

      uint64_t v16 = 0;
      id v17 = 0;
LABEL_27:
      CFRelease(v9);
      goto LABEL_28;
    }
    uint64_t v19 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)id v35 = UID;
      *(_WORD *)&v35[4] = 2112;
      *(void *)&v35[6] = v9;
      _os_log_impl(&dword_1A8E81000, v19, OS_LOG_TYPE_DEFAULT, "Failed to open aux db [%d] with cached path %@", buf, 0x12u);
    }
  }
  else
  {
    uint64_t v18 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)id v35 = UID;
      _os_log_impl(&dword_1A8E81000, v18, OS_LOG_TYPE_ERROR, "Unexpected NULL path for auxDatabase [%d]", buf, 8u);
    }
  }
  uint64_t v20 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)id v35 = UID;
    *(_WORD *)&v35[4] = 2114;
    *(void *)&v35[6] = 0;
    _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_DEFAULT, "Attempting to derive path for auxDatabase [%d], persona: %{public}@", buf, 0x12u);
  }
  if (!v7)
  {
    CFTypeRef v26 = CalAuxDatabaseCopyPersonaID((uint64_t)a2);
    if (v26)
    {
      uint64_t v16 = v26;
      uint64_t v27 = CalDatabaseGetCalendarDataContainerProvider((uint64_t)a1);
      uint64_t v28 = [v27 containerInfoForPersonaIdentifier:v16];
      if (v28)
      {
        id v7 = (id)v28;

        goto LABEL_13;
      }
      id v31 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138543362;
        *(void *)id v35 = v16;
        _os_log_impl(&dword_1A8E81000, v31, OS_LOG_TYPE_ERROR, "Couldn't look up persona ID %{public}@", buf, 0xCu);
      }
      CalRemoveAuxDatabase(a2);
      CalDatabaseSave((uint64_t)a1);

      id v17 = 0;
    }
    else
    {
      char v30 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)id v35 = UID;
        _os_log_impl(&dword_1A8E81000, v30, OS_LOG_TYPE_ERROR, "AuxDatabase entry [%d] missing persona ID", buf, 8u);
      }
      id v17 = 0;
      uint64_t v16 = 0;
    }
    id v15 = 0;
    id v7 = 0;
    if (v9) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  uint64_t v16 = 0;
LABEL_13:
  if ([v7 usesDataSeparatedContainer])
  {
    id v33 = 0;
    id v15 = (os_unfair_lock *)CalDatabaseDeriveAuxDatabaseForContainerInfo((uint64_t)a1, a4 | 0x1201u, v7, &v33);
    id v21 = v33;
    int v22 = v21;
    if (v15)
    {
      id v17 = v21;
    }
    else
    {
      id v32 = v21;
      id v15 = (os_unfair_lock *)CalDatabaseDeriveAuxDatabaseForContainerInfo((uint64_t)a1, a4 | 0x201u, v7, &v32);
      id v17 = v32;

      if (!v15) {
        goto LABEL_26;
      }
      CalDatabaseSetupNewlyCreatedAuxDatabase(a1, v15);
    }
    CalDatabaseSetAuxilliaryDatabaseID((uint64_t)v15, UID);
    CalAuxDatabaseSetPath((uint64_t)a2);
    CalDatabaseSave((uint64_t)a1);
LABEL_26:
    if (!v9) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v23 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    uint64_t v24 = v23;
    int v25 = [v7 accountID];
    *(_DWORD *)long long buf = 138543618;
    *(void *)id v35 = v25;
    *(_WORD *)&v35[8] = 2114;
    *(void *)&v35[10] = v16;
    _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_ERROR, "Account [%{public}@] with persona [%{public}@] is not data-separated, but we have an aux db entry in the main db. Removing the aux entry", buf, 0x16u);
  }
  CalRemoveAuxDatabase(a2);
  CalDatabaseSave((uint64_t)a1);
  id v17 = 0;
  id v15 = 0;
  if (v9) {
    goto LABEL_27;
  }
LABEL_28:
  if (v16) {
    CFRelease(v16);
  }

  return v15;
}

os_unfair_lock *CalDatabaseCreateWithOptionsForAccountID(uint64_t a1, __CFString *a2)
{
  if (a1)
  {
    id v4 = objc_alloc_init(CalDatabaseInitializationConfiguration);
    [(CalDatabaseInitializationConfiguration *)v4 setOptions:a1];
  }
  else
  {
    id v4 = 0;
  }
  uint64_t v5 = CalDatabaseCreateWithConfigurationForAccountOrAccountID(v4, 0, a2);

  return v5;
}

os_unfair_lock *CalDatabaseCreateWithConfigurationForAccountID(void *a1, __CFString *a2)
{
  return CalDatabaseCreateWithConfigurationForAccountOrAccountID(a1, 0, a2);
}

os_unfair_lock *CalDatabaseCreateWithOptionsMainDatabaseDirectoryAndContainerProviderForAccountID(uint64_t a1, __CFString *a2, void *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = v7;
  if (a1 || a3 || v7)
  {
    id v10 = a3;
    CFTypeRef v9 = [[CalDatabaseInitializationConfiguration alloc] initWithDirectoryURL:v10];

    [(CalDatabaseInitializationConfiguration *)v9 setOptions:a1];
    if (v8) {
      [(CalDatabaseInitializationConfiguration *)v9 setDataContainerProvider:v8];
    }
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  id v11 = CalDatabaseCreateWithConfigurationForAccountOrAccountID(v9, 0, a2);

  return v11;
}

os_unfair_lock *CalDatabaseCreateWithConfigurationForPersonaID(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = (os_unfair_lock *)CalDatabaseCreateWithConfiguration(v3);
  CFTypeRef v5 = CalDatabaseCopyAuxDatabaseForPersonaID(v4);
  if (!v5)
  {
    uint64_t v8 = CalDatabaseGetCalendarDataContainerProvider((uint64_t)v4);
    CFTypeRef v9 = [v8 containerInfoForPersonaIdentifier:a2];
    id v10 = v9;
    if (v9)
    {
      char v11 = [v9 usesDataSeparatedContainer];
      CFTypeRef v12 = CDBLogHandle;
      BOOL v13 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          *(_DWORD *)long long buf = 138543362;
          uint64_t v22 = a2;
          _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_DEFAULT, "Attempting to create aux DB for persona %{public}@", buf, 0xCu);
        }
        id v20 = 0;
        id v7 = (os_unfair_lock *)CalDatabaseDeriveAuxDatabaseForContainerInfo((uint64_t)v4, [v3 options] | 1, v10, &v20);
        id v14 = v20;
        if (v7)
        {
          Auxuint64_t Database = CalDatabaseCreateAuxDatabase(v4);
          uint64_t v16 = [v10 personaID];
          CalAuxDatabaseSetPersonaID((uint64_t)AuxDatabase);

          CalAuxDatabaseSetPath((uint64_t)AuxDatabase);
          CalDatabaseSave((uint64_t)v4);
          Uuint64_t ID = CalAuxDatabaseGetUID();
          CalDatabaseSetAuxilliaryDatabaseID((uint64_t)v7, UID);
          CalDatabaseSetupNewlyCreatedAuxDatabase(v4, v7);
          CFRelease(AuxDatabase);
        }
        CFRelease(v4);

        goto LABEL_16;
      }
      if (v13)
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v22 = a2;
        uint64_t v18 = "Persona %{public}@ is not data separated. Using main database.";
        goto LABEL_14;
      }
    }
    else
    {
      CFTypeRef v12 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v22 = a2;
        uint64_t v18 = "Couldn't get container info for persona %{public}@. Using main database for this persona.";
LABEL_14:
        _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_DEFAULT, v18, buf, 0xCu);
      }
    }
    id v7 = v4;
LABEL_16:

    goto LABEL_17;
  }
  uint64_t v6 = v5;
  id v7 = CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(v4, v5, 0, [v3 options]);
  CFRelease(v6);
  CFRelease(v4);
LABEL_17:

  return v7;
}

uint64_t CalDatabaseDeriveAuxDatabaseForContainerInfo(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  uint64_t v8 = [v7 containerURL];
  if (!v8)
  {
    char v11 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v12 = v11;
      BOOL v13 = [v7 accountID];
      id v14 = [v7 personaID];
      int v20 = 138543618;
      id v21 = v13;
      __int16 v22 = 2114;
      uint64_t v23 = v14;
      id v15 = "Unexpected nil auxURL for account %{public}@ with persona %{public}@.  Giving up.";
      uint64_t v16 = v12;
      uint32_t v17 = 22;
LABEL_9:
      _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v20, v17);
    }
LABEL_10:
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  uint64_t v9 = CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(a2 | 0x800u, v8);
  if (!v9)
  {
    uint64_t v18 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v12 = v18;
      BOOL v13 = [v7 accountID];
      id v14 = [v7 personaID];
      int v20 = 138412802;
      id v21 = v8;
      __int16 v22 = 2114;
      uint64_t v23 = v13;
      __int16 v24 = 2114;
      int v25 = v14;
      id v15 = "Failed to create aux db with derived path [%@] for account: %{public}@ persona=%{public}@.  Giving up.";
      uint64_t v16 = v12;
      uint32_t v17 = 32;
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  uint64_t v10 = v9;
  objc_storeStrong((id *)(v9 + 288), *(id *)(a1 + 288));
  if (a4)
  {
    *a4 = [v8 path];
  }
LABEL_11:

  return v10;
}

void CalDatabaseSetupNewlyCreatedAuxDatabase(os_unfair_lock *a1, os_unfair_lock *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CalDatabaseMultiLock(a1, a2);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = (id)_CalDatabaseCopyRegisteredClientIdentifiersForPersistentChangeTrackingWithStoreUID((uint64_t)a1, 0);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        _CalDatabaseRegisterClientForPersistentChangeTracking((uint64_t)a2, *(void **)(*((void *)&v9 + 1) + 8 * v8++), 0);
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }

  CalDatabaseMultiUnlock(a1, a2);
}

os_unfair_lock *CalDatabaseCreateWithConfigurationForAccountOrAccountID(void *a1, void *a2, __CFString *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a1;
  int v7 = [v6 options];
  uint64_t v8 = (os_unfair_lock *)CalDatabaseCreateWithConfiguration(v6);

  if (v8)
  {
    long long v9 = CalDatabaseGetCalendarDataContainerProvider((uint64_t)v8);
    if (!a3)
    {
      a3 = [v5 identifier];

      if (!a3) {
        goto LABEL_7;
      }
    }
    if (!_os_feature_enabled_impl()) {
      goto LABEL_7;
    }
    long long v10 = CalDatabaseCopyStoreWithExternalID(v8, a3);
    if (v10)
    {
      CFRelease(v10);
LABEL_7:
      id v11 = 0;
      goto LABEL_11;
    }
    CFTypeRef v14 = CalDatabaseCopyAuxDatabaseAccountForAccountID(v8);
    if (v14)
    {
      AuxDatabaseAccount = (void *)v14;
      Auxuint64_t Database = CalAuxDatabaseAccountCopyAuxDatabase((uint64_t)v14);
      uint32_t v17 = CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(v8, AuxDatabase, 0, v7);
      uint64_t v18 = 0;
      id v11 = 0;
LABEL_14:
      CFRelease(AuxDatabaseAccount);
LABEL_15:
      if (AuxDatabase) {
        CFRelease(AuxDatabase);
      }
      if (v17 != v18 && v18) {
        CFRelease(v18);
      }
      goto LABEL_34;
    }
    uint64_t v19 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v35 = a3;
      _os_log_impl(&dword_1A8E81000, v19, OS_LOG_TYPE_DEFAULT, "No store or aux db entry for account: %@.", buf, 0xCu);
    }
    if (v5) {
      [v9 containerInfoForAccount:v5];
    }
    else {
    int v20 = [v9 containerInfoForAccountIdentifier:a3];
    }
    if ([v20 usesDataSeparatedContainer])
    {
      id v21 = [v20 personaID];
      Auxuint64_t Database = CalDatabaseCopyAuxDatabaseForPersonaID(v8);

      __int16 v22 = (void *)CDBLogHandle;
      BOOL v23 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT);
      if (AuxDatabase)
      {
        if (v23)
        {
          __int16 v24 = v22;
          int v25 = [v20 personaID];
          *(_DWORD *)long long buf = 138543618;
          id v35 = v25;
          __int16 v36 = 2114;
          char v37 = a3;
          _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_DEFAULT, "Found existing aux database with persona [%{public}@] for account [%{public}@]. Attaching account to existing auxiliary database.", buf, 0x16u);
        }
        AuxDatabaseAccount = (void *)CalDatabaseCreateAuxDatabaseAccount(v8);
        CalAuxDatabaseAccountSetAccountID((uint64_t)AuxDatabaseAccount);
        CalAuxDatabaseAddAccount((uint64_t)AuxDatabase, AuxDatabaseAccount);
        CalDatabaseSave((uint64_t)v8);
        uint32_t v17 = CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(v8, AuxDatabase, v20, v7);
        id v11 = 0;
        uint64_t v18 = 0;
LABEL_40:

        if (!AuxDatabaseAccount) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      if (v23)
      {
        __int16 v29 = v22;
        char v30 = [v20 personaID];
        *(_DWORD *)long long buf = 138543618;
        id v35 = a3;
        __int16 v36 = 2114;
        char v37 = v30;
        _os_log_impl(&dword_1A8E81000, v29, OS_LOG_TYPE_DEFAULT, "Account [%{public}@, persona=%{public}@] is data-separated. Attempting to create aux DB", buf, 0x16u);
      }
      id v33 = 0;
      uint64_t v18 = (os_unfair_lock *)CalDatabaseDeriveAuxDatabaseForContainerInfo((uint64_t)v8, v7 | 1u, v20, &v33);
      id v11 = v33;
      if (v18)
      {
        Auxuint64_t Database = CalDatabaseCreateAuxDatabase(v8);
        id v31 = [v20 personaID];
        CalAuxDatabaseSetPersonaID((uint64_t)AuxDatabase);

        CalAuxDatabaseSetPath((uint64_t)AuxDatabase);
        AuxDatabaseAccount = (void *)CalDatabaseCreateAuxDatabaseAccount(v8);
        CalAuxDatabaseAccountSetAccountID((uint64_t)AuxDatabaseAccount);
        CalAuxDatabaseAddAccount((uint64_t)AuxDatabase, AuxDatabaseAccount);
        CalDatabaseSave((uint64_t)v8);
        Uuint64_t ID = CalAuxDatabaseGetUID();
        CalDatabaseSetAuxilliaryDatabaseID((uint64_t)v18, UID);
        CalDatabaseSetupNewlyCreatedAuxDatabase(v8, v18);
        uint32_t v17 = v18;
        goto LABEL_40;
      }
      uint32_t v17 = 0;
    }
    else
    {
      uint64_t v26 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = v26;
        uint64_t v28 = [v20 personaID];
        *(_DWORD *)long long buf = 138543618;
        id v35 = a3;
        __int16 v36 = 2114;
        char v37 = v28;
        _os_log_impl(&dword_1A8E81000, v27, OS_LOG_TYPE_DEFAULT, "Account [%{public}@, persona=%{public}@] is not data-separated. Using main DB.", buf, 0x16u);
      }
      id v11 = 0;
      uint32_t v17 = v8;
    }

LABEL_34:
    if (v17 != v8)
    {
      CFRelease(v8);
      uint64_t v8 = v17;
    }
    goto LABEL_11;
  }
  long long v12 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, "Failed to open main db.", buf, 2u);
  }
  uint64_t v8 = 0;
  id v11 = 0;
  long long v9 = 0;
LABEL_11:

  return v8;
}

os_unfair_lock *CalDatabaseCreateWithConfigurationForAccount(void *a1, void *a2)
{
  return CalDatabaseCreateWithConfigurationForAccountOrAccountID(a1, a2, 0);
}

uint64_t CalDatabaseCopyDirectoryPathForAccountID(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!_os_feature_enabled_impl()) {
    goto LABEL_8;
  }
  if (!v8)
  {
    id v8 = [MEMORY[0x1E4F57800] sharedInstance];
  }
  int v9 = [v8 accountUsesDataSeparatedContainer:a1];
  if (a4) {
    *a4 = v9;
  }
  if (v9)
  {
    long long v10 = [v8 containerForAccountIdentifier:a1];
    uint64_t v11 = [v10 path];
  }
  else
  {
LABEL_8:
    if (v7)
    {
      uint64_t v12 = [v7 path];
    }
    else
    {
      uint64_t v12 = (uint64_t)CalDatabaseCopyDirectoryPath();
    }
    uint64_t v11 = v12;
  }

  return v11;
}

uint64_t CalDatabaseCopyDirectoryPathForAuxDatabaseRef(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (_os_feature_enabled_impl())
  {
    if (!v8)
    {
      id v8 = [MEMORY[0x1E4F57800] sharedInstance];
    }
    int v9 = (void *)CalAuxDatabaseCopyPersonaID(a1);
    long long v10 = [v8 containerInfoForPersonaIdentifier:v9];
    uint64_t v11 = v10;
    if (a4) {
      *a4 = [v10 usesDataSeparatedContainer];
    }
    if ([v11 usesDataSeparatedContainer])
    {
      uint64_t v12 = [v11 containerURL];
      uint64_t v13 = [v12 path];

      goto LABEL_13;
    }
  }
  if (v7)
  {
    uint64_t v14 = [v7 path];
  }
  else
  {
    uint64_t v14 = (uint64_t)CalDatabaseCopyDirectoryPath();
  }
  uint64_t v13 = v14;
LABEL_13:

  return v13;
}

void CalDatabaseEnumerateDatabases(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(CalDatabaseInitializationConfiguration);
  [(CalDatabaseInitializationConfiguration *)v4 setOptions:a1];
  CalDatabaseEnumerateDatabasesWithConfiguration(v4, v3);
}

void CalDatabaseEnumerateDatabasesWithConfiguration(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = CalDatabaseCreateWithConfiguration(v3);
  if (v5)
  {
    id v6 = (os_unfair_lock *)v5;
    char v19 = 0;
    v4[2](v4, v5, 0, &v19);
    if (!v19)
    {
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v7 = (id)CalDatabaseCopyAllAuxDatabases(v6);
      uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v20 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v16;
LABEL_5:
        uint64_t v11 = 0;
        while (1)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(const void **)(*((void *)&v15 + 1) + 8 * v11);
          uint64_t v13 = CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(v6, v12, 0, objc_msgSend(v3, "options", (void)v15) | 0x1000);
          if (v13)
          {
            uint64_t v14 = v13;
            ((void (**)(id, uint64_t, const void *, char *))v4)[2](v4, (uint64_t)v13, v12, &v19);
            CFRelease(v14);
            if (v19) {
              break;
            }
          }
          if (v9 == ++v11)
          {
            uint64_t v9 = [v7 countByEnumeratingWithState:&v15 objects:v20 count:16];
            if (v9) {
              goto LABEL_5;
            }
            break;
          }
        }
      }
    }
    CFRelease(v6);
  }
}

uint64_t _applicationOccurrencesCancellationCallback(void *a1)
{
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1
    && *((unsigned char *)v1 + 184)
    && (id WeakRetained = objc_loadWeakRetained(v1 + 5),
        int v4 = [WeakRetained calSearchShouldStopSearching:v2],
        WeakRetained,
        v4))
  {
    [v2 stopSearching];
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void *_EKCreateMSUIDStringForEvent(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    _CalEventGetStartDate(a1);
    uint64_t v5 = v4;
    if (!a2)
    {
      id v6 = 0;
      if (v4) {
        goto LABEL_19;
      }
      goto LABEL_9;
    }
    if (a2 != a1)
    {
      id v6 = _CalEventGetUniqueIdentifier(a2);
      if (v6)
      {
        if (v5) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      long long v15 = [MEMORY[0x1E4F28B00] currentHandler];
      long long v16 = objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef _EKCreateMSUIDStringForEvent(CalEventRef, CalEventRef)");
      [v15 handleFailureInFunction:v16 file:@"EKMSUID.m" lineNumber:99 description:@"You must set a parent event's unique id before constructing one for a detached event"];
    }
    id v6 = 0;
    if (v5) {
      goto LABEL_19;
    }
LABEL_18:
    _CalEventGetStartDate(a2);
    uint64_t v5 = v17;
    if (v17)
    {
LABEL_19:
      if ([@"_float" isEqualToString:v5]) {
        [MEMORY[0x1E4F1CAF0] defaultTimeZone];
      }
      else {
      uint64_t v5 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:v5];
      }
      if (!v6) {
        goto LABEL_23;
      }
      goto LABEL_10;
    }
LABEL_9:
    if (!v6)
    {
LABEL_23:
      id v7 = _create64ByteGUID();
LABEL_24:

      return v7;
    }
LABEL_10:
    if (vabdd_f64(_CalEventGetOriginalStartDate(a1), *MEMORY[0x1E4F57888]) >= 2.22044605e-16)
    {
      uint64_t v10 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:_CalEventGetOriginalStartDate(a1)];
    }
    else
    {
      uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef _EKCreateMSUIDStringForEvent(CalEventRef, CalEventRef)");
      [v8 handleFailureInFunction:v9 file:@"EKMSUID.m" lineNumber:120 description:@"Event has no original start date?"];

      uint64_t v10 = 0;
    }
    uint64_t v11 = [v10 dateWithCalendarFormat:0 timeZone:v5];
    if (_CalEventIsAllDay(a2))
    {
      uint64_t v12 = [v11 ekmsuidGMTDateToDateInTimeZone:v5];

      uint64_t v11 = (void *)v12;
    }
    id v13 = [NSString alloc];
    uint64_t v14 = [v11 ekmsuidStringForYearMonthDay];
    id v7 = (void *)[v13 initWithFormat:@"%@%@%@", v6, @"<!ExceptionDate!>", v14];

    CFRetain(v7);
    goto LABEL_24;
  }
  return 0;
}

id _create64ByteGUID()
{
  CFUUIDRef v0 = CFUUIDCreate(0);
  uint64_t v1 = CFUUIDCreateString(0, v0);
  CFRelease(v0);
  id v2 = (void *)[v1 mutableCopy];
  CFRelease(v1);
  objc_msgSend(v2, "replaceOccurrencesOfString:withString:options:range:", @"-", &stru_1EFF6D0F0, 0, 0, objc_msgSend(v2, "length"));
  id v3 = objc_msgSend(NSString, "stringWithFormat:", @"%%0.%ld", 64 - objc_msgSend(v2, "length"));
  int v4 = objc_msgSend(v2, "stringByAppendingFormat:", v3, 0);
  uint64_t v5 = CFRetain(v4);

  return v5;
}

CFTypeRef _EKMSUUIDString()
{
  id v0 = _create64ByteGUID();
  return CFAutorelease(v0);
}

id _EKMSUUIDStringForDetachedEvent(void *a1, void *a2, void *a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (!v9)
  {
    id v9 = [MEMORY[0x1E4F1CAF0] defaultTimeZone];
    if (v7) {
      goto LABEL_3;
    }
LABEL_9:
    long long v15 = _create64ByteGUID();
    goto LABEL_10;
  }
  if (!v7) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v8)
  {
    long long v17 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v18 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString *_EKMSUUIDStringForDetachedEvent(NSString *__strong, NSDate *__strong, NSTimeZone *__strong, BOOL)");
    [v17 handleFailureInFunction:v18 file:@"EKMSUID.m" lineNumber:152 description:@"Event has no original start date?"];
  }
  uint64_t v10 = [v8 dateWithCalendarFormat:0 timeZone:v9];
  uint64_t v11 = v10;
  if (a4)
  {
    uint64_t v12 = [v10 ekmsuidGMTDateToDateInTimeZone:v9];

    uint64_t v11 = (void *)v12;
  }
  id v13 = [NSString alloc];
  uint64_t v14 = [v11 ekmsuidStringForYearMonthDay];
  long long v15 = (void *)[v13 initWithFormat:@"%@%@%@", v7, @"<!ExceptionDate!>", v14];

  CFRetain(v15);
LABEL_10:

  return v15;
}

uint64_t CalToManyRelationRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  __CalToManyRelationTypeuint64_t ID = result;
  return result;
}

uint64_t CalToManyRelationCreate(uint64_t a1, int a2, uint64_t a3, const __CFArray *a4)
{
  pthread_once(&__CalToManyRelationRegisterOnce, (void (*)(void))CalToManyRelationRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = a1;
  *(_DWORD *)(Instance + 24) = a2;
  *(void *)(Instance + 56) = a3;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 8 0) = 0u;
  *(void *)(Instance + 96) = 0;
  *(_DWORD *)(Instance + 48) = -1;
  *(void *)(Instance + 4 0) = 0;
  CFArrayRef Copy = 0;
  if (a4) {
    CFArrayRef Copy = CFArrayCreateCopy(0, a4);
  }
  *(void *)(Instance + 32) = Copy;
  return Instance;
}

uint64_t CalToManyRelationGetOwner(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t CalToManyRelationSetAddedHook(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t CalToManyRelationSetRemovedHook(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

BOOL CalToManyRelationHasObjects(uint64_t a1)
{
  _EnsureLoaded(a1);
  CFSetRef v2 = *(const __CFSet **)(a1 + 80);
  if (!v2) {
    CalToManyRelationHasObjects_cold_1();
  }
  return CFSetGetCount(v2) > 0;
}

uint64_t _CalToManyRelationAddObject(void *a1, void *value)
{
  int v4 = (__CFSet *)a1[10];
  if (v4) {
    CFSetAddValue(v4, value);
  }
  CFMutableDictionaryRef Mutable = (__CFSet *)a1[11];
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
    a1[11] = Mutable;
  }
  CFSetAddValue(Mutable, value);
  id v6 = (__CFSet *)a1[12];
  if (v6) {
    CFSetRemoveValue(v6, value);
  }
  CPRecordGetStore();
  uint64_t Context = CPRecordStoreGetContext();
  _CalDatabaseAddEntity(Context, value);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = a1[2] == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      id v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  return CPRecordMarkPropertyChanged();
}

uint64_t _CalToManyRelationRemoveObject(void *a1, void *value)
{
  int v4 = (__CFSet *)a1[10];
  if (v4)
  {
    CFSetRemoveValue(v4, value);
  }
  else
  {
    CFMutableDictionaryRef Mutable = (__CFSet *)a1[12];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
      a1[12] = Mutable;
    }
    CFSetAddValue(Mutable, value);
  }
  id v6 = (__CFSet *)a1[11];
  if (v6) {
    CFSetRemoveValue(v6, value);
  }
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = a1[2] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordMarkPropertyChanged();
}

CFArrayRef CalToManyRelationAddObject(void *a1, void *a2)
{
  _CalToManyRelationAddObject(a1, a2);
  int v4 = (void (*)(void *, void))a1[8];
  if (v4) {
    v4(a2, a1[2]);
  }
  return _UpdateInverseRelation((uint64_t)a1, (uint64_t)a2, 1);
}

CFArrayRef _UpdateInverseRelation(uint64_t a1, uint64_t a2, int a3)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 32);
  if (result)
  {
    CFIndex v7 = 0;
    do
    {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result <= v7) {
        break;
      }
      int valuePtr = -1;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v7);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      uint64_t PropertyDescriptor = CPRecordGetPropertyDescriptor();
      if (PropertyDescriptor && !*(_DWORD *)(PropertyDescriptor + 8))
      {
        if (a2)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context) {
                os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
        }
        uint64_t Property = (const void *)CPRecordGetProperty();
        if (Property)
        {
          uint64_t v12 = (uint64_t)Property;
          CFTypeID v13 = CFGetTypeID(Property);
          if (v13 == CalRelationGetTypeID())
          {
            if (a3) {
              uint64_t v14 = *(const void **)(a1 + 16);
            }
            else {
              uint64_t v14 = 0;
            }
            _CalRelationUpdateSetRelationProperties(v12, v14);
          }
        }
      }
      else
      {
        CFLog();
      }
      ++v7;
      CFArrayRef result = *(const __CFArray **)(a1 + 32);
    }
    while (result);
  }
  return result;
}

uint64_t CalToManyRelationRemoveObject(void *a1, void *a2)
{
  _CalToManyRelationRemoveObject(a1, a2);
  int v4 = (void (*)(void *))a1[9];
  if (v4) {
    v4(a2);
  }
  _UpdateInverseRelation((uint64_t)a1, (uint64_t)a2, 0);
  CPRecordGetStore();
  uint64_t Context = CPRecordStoreGetContext();
  return _CalDatabaseRemoveEntity(Context, a2);
}

void CalToManyRelationRemoveAllObjects(void *a1)
{
  CFArrayRef v2 = CalToManyRelationCopyObjects((uint64_t)a1);
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, i);
        CalToManyRelationRemoveObject(a1, ValueAtIndex);
      }
    }
    CFRelease(v3);
  }
}

void CalToManyRelationSave(void *context)
{
  CFArrayRef v2 = (const void *)*((void *)context + 10);
  if (v2)
  {
    CFRelease(v2);
    *((void *)context + 1 0) = 0;
  }
  CFSetRef v3 = (const __CFSet *)*((void *)context + 11);
  if (v3)
  {
    CFSetApplyFunction(v3, (CFSetApplierFunction)_UpdateOwnerID, context);
    CFRelease(*((CFTypeRef *)context + 11));
    *((void *)context + 11) = 0;
  }
  int v4 = (const void *)*((void *)context + 12);
  if (v4)
  {
    CFRelease(v4);
    *((void *)context + 12) = 0;
  }
}

CFArrayRef _UpdateOwnerID(uint64_t a1, uint64_t a2)
{
  CFArrayRef result = *(const __CFArray **)(a2 + 32);
  if (result)
  {
    CFIndex v5 = 0;
    do
    {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result <= v5) {
        break;
      }
      int valuePtr = -1;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 32), v5);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      int v7 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 8);
      BOOL v8 = !a1 || CDBLockingAssertionsEnabled == 0;
      BOOL v9 = !v8;
      if (v7)
      {
        if (v9 && CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
        CPRecordGetID();
        CPRecordSetProperty();
      }
      else
      {
        if (v9)
        {
          if (CPRecordGetStore())
          {
            uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11) {
              os_unfair_lock_assert_owner(v11 + 20);
            }
          }
        }
        uint64_t Property = (const void *)CPRecordGetProperty();
        if (Property)
        {
          uint64_t v13 = (uint64_t)Property;
          CFTypeID v14 = CFGetTypeID(Property);
          if (v14 == CalRelationGetTypeID())
          {
            CPRecordGetID();
            _CalRelationUpdateSetRelationID(v13);
          }
        }
      }
      ++v5;
      CFArrayRef result = *(const __CFArray **)(a2 + 32);
    }
    while (result);
  }
  return result;
}

void CalToManyRelationUnload(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 80);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 8 0) = 0;
  }
}

CFSetRef CalToManyRelationIsDirty(uint64_t a1)
{
  CFSetRef v2 = *(const __CFSet **)(a1 + 88);
  if (!v2 || CFSetGetCount(v2) <= 0)
  {
    CFSetRef result = *(const __CFSet **)(a1 + 96);
    if (!result) {
      return result;
    }
    if (CFSetGetCount(result) < 1) {
      return 0;
    }
  }
  return (const __CFSet *)1;
}

void CalToManyRelationDestroy(void *a1)
{
  CFSetRef v2 = (const void *)a1[10];
  if (v2) {
    CFRelease(v2);
  }
  CFSetRef v3 = (const void *)a1[11];
  if (v3) {
    CFRelease(v3);
  }
  int v4 = (const void *)a1[12];
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  id v6 = (const void *)a1[4];
  if (v6)
  {
    CFRelease(v6);
  }
}

CFStringRef CalToManyRelationCopyDescription(void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<CalToManyRelation: %p> loaded: %@; added: %@; deleted %@",
           a1,
           a1[10],
           a1[11],
           a1[12]);
}

void _AddItemToSet(void *value, CFMutableSetRef theSet)
{
}

void _RemoveItemFromSet(void *value, CFMutableSetRef theSet)
{
}

id ICSRecurrenceRuleFromCalRecurrence(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    id v6 = 0;
    goto LABEL_65;
  }
  id v4 = objc_alloc(MEMORY[0x1E4FB7F78]);
  int Frequency = CalRecurrenceGetFrequency(a1);
  id v6 = (void *)[v4 initWithFrequency:ICSFrequencyFromCalRecurrenceFrequency(Frequency)];
  uint64_t Interval = CalRecurrenceGetInterval(a1);
  if ((int)Interval >= 2)
  {
    BOOL v8 = [NSNumber numberWithInt:Interval];
    [v6 setInterval:v8];
  }
  unsigned int WeekStart = CalRecurrenceGetWeekStart(a1);
  if (WeekStart != 1)
  {
    uint64_t v10 = [NSNumber numberWithInteger:ICSWeekdayFromCalDayOfWeek(WeekStart)];
    [v6 setWkst:v10];
  }
  EndCFDateRef Date = CalRecurrenceGetEndDate(a1);
  uint64_t Count = CalRecurrenceGetCount(a1);
  if (Count)
  {
    uint64_t v13 = [NSNumber numberWithInt:Count];
    [v6 setCount:v13];
LABEL_21:

    goto LABEL_22;
  }
  if (vabdd_f64(EndDate, *MEMORY[0x1E4F57888]) >= 2.22044605e-16)
  {
    CFDateRef v14 = CFDateCreate(0, EndDate);
    if (CalEventIsFloating(a2))
    {
      if (CalEventIsAllDay(a2))
      {
        uint64_t v13 = ICSFloatingDateOnlyFromCFDate((uint64_t)v14, 0);
LABEL_16:
        if (v14) {
          CFRelease(v14);
        }
        long long v17 = (void *)CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          long long v18 = v17;
          char v19 = [v13 value];
          *(_DWORD *)long long buf = 138412546;
          id v55 = v19;
          __int16 v56 = 2048;
          double v57 = EndDate;
          _os_log_impl(&dword_1A8E81000, v18, OS_LOG_TYPE_DEBUG, "Setting until date: %@ (%f)", buf, 0x16u);
        }
        int v20 = [v13 value];
        [v6 setUntil:v20];

        goto LABEL_21;
      }
      long long v15 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
      uint64_t v16 = ICSFloatingDateTimeFromCFDateInTimezone((uint64_t)v14, v15);
    }
    else
    {
      long long v15 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
      uint64_t v16 = ICSDateFromCFDateInTimezone((uint64_t)v14, v15);
    }
    uint64_t v13 = (void *)v16;

    goto LABEL_16;
  }
LABEL_22:
  CFArrayRef v21 = (const __CFArray *)CalRecurrenceCopyByDayDays(a1);
  if (v21)
  {
    CFArrayRef v22 = v21;
    CFIndex v23 = CFArrayGetCount(v21);
    if (v23 >= 1)
    {
      CFIndex v24 = v23;
      uint64_t v53 = v6;
      id v25 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      for (CFIndex i = 0; i != v24; ++i)
      {
        CFNumberRef ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(v22, i);
        id v28 = objc_alloc(MEMORY[0x1E4FB7EF8]);
        uint64_t v29 = ICSWeekdayFromCalDayOfWeek(ValueAtIndex[1]);
        char v30 = [NSNumber numberWithInt:*ValueAtIndex];
        id v31 = (void *)[v28 initWithWeekday:v29 number:v30];

        [v25 addObject:v31];
      }
      id v32 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        id v55 = v25;
        _os_log_impl(&dword_1A8E81000, v32, OS_LOG_TYPE_DEBUG, "Setting by day days array: %@", buf, 0xCu);
      }
      id v6 = v53;
      [v53 setByday:v25];
    }
    CFRelease(v22);
  }
  int v33 = CalRecurrenceGetByMonthMonths(a1);
  if (v33)
  {
    int v34 = v33;
    id v35 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    for (uint64_t j = 0; j != 12; ++j)
    {
      uint64_t v37 = (1 << j);
      if ((v37 & v34) != 0)
      {
        uint64_t v38 = [NSNumber numberWithUnsignedInteger:ICSMonthFromCalMonthOfYear(v37)];
        [v35 addObject:v38];
      }
    }
    if ([v35 count])
    {
      id v39 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        id v55 = v35;
        _os_log_impl(&dword_1A8E81000, v39, OS_LOG_TYPE_DEBUG, "Setting by month array: %@", buf, 0xCu);
      }
      [v6 setBymonth:v35];
    }
  }
  CFArrayRef v40 = (const __CFArray *)CalRecurrenceCopyByMonthDayDays(a1);
  long long v41 = _NSNumberArrayFromIntArray(v40);
  if ([v41 count])
  {
    id v42 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v55 = v41;
      _os_log_impl(&dword_1A8E81000, v42, OS_LOG_TYPE_DEBUG, "setting by month day array: %@", buf, 0xCu);
    }
    [v6 setBymonthday:v41];
  }
  if (v40) {
    CFRelease(v40);
  }
  CFArrayRef v43 = (const __CFArray *)CalRecurrenceCopyByWeekWeeks(a1);
  char v44 = _NSNumberArrayFromIntArray(v43);
  if ([v44 count])
  {
    id v45 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v55 = v44;
      _os_log_impl(&dword_1A8E81000, v45, OS_LOG_TYPE_DEBUG, "Setting by weekno array: %@", buf, 0xCu);
    }
    [v6 setByweekno:v44];
  }
  if (v43) {
    CFRelease(v43);
  }
  CFArrayRef v46 = (const __CFArray *)CalRecurrenceCopyByYearDayDays(a1);
  id v47 = _NSNumberArrayFromIntArray(v46);
  if ([v47 count])
  {
    id v48 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v55 = v47;
      _os_log_impl(&dword_1A8E81000, v48, OS_LOG_TYPE_DEBUG, "Setting by year day array: %@", buf, 0xCu);
    }
    [v6 setByyearday:v47];
  }
  if (v46) {
    CFRelease(v46);
  }
  CFArrayRef v49 = (const __CFArray *)CalRecurrenceCopyBySetPos(a1);
  char v50 = _NSNumberArrayFromIntArray(v49);
  if ([v50 count])
  {
    char v51 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v55 = v50;
      _os_log_impl(&dword_1A8E81000, v51, OS_LOG_TYPE_DEBUG, "Setting by set pos array: %@", buf, 0xCu);
    }
    [v6 setBysetpos:v50];
  }
  if (v49) {
    CFRelease(v49);
  }

LABEL_65:
  return v6;
}

id _NSNumberArrayFromIntArray(const __CFArray *a1)
{
  if (a1 && (CFIndex Count = CFArrayGetCount(a1), Count >= 1))
  {
    CFIndex v3 = Count;
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    for (CFIndex i = 0; i != v3; ++i)
    {
      id v6 = objc_msgSend(NSNumber, "numberWithInt:", CFArrayGetValueAtIndex(a1, i));
      [v4 addObject:v6];
    }
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

BOOL CalRecurrenceUpdateFromICSRecurrenceRule(void *a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!a2) {
    goto LABEL_45;
  }
  unsigned int v5 = CalRecurrenceFrequencyFromICSFrequency([v3 freq]);
  CalRecurrenceSetFrequency(a2, v5);
  id v6 = [v4 interval];
  int v7 = [v6 intValue];

  if (v7 <= 1) {
    unsigned int v8 = 1;
  }
  else {
    unsigned int v8 = v7;
  }
  CalRecurrenceSetInterval(a2, v8);
  BOOL v9 = [v4 wkst];
  uint64_t v10 = v9;
  if (v9 && [v9 intValue] != 2) {
    unsigned int v11 = CalDayOfWeekFromICSWeekday((int)[v10 intValue]);
  }
  else {
    unsigned int v11 = 7;
  }
  CalRecurrenceSetWeekStart(a2, v11);
  uint64_t v12 = [v4 until];
  if (v12)
  {
    uint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4FB7F28]) initWithValue:v12];
    double v14 = CalDateFromICSDateAsUTC(v13);
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    double v16 = v14 + 86399.0;
    if (isKindOfClass) {
      double v16 = v14;
    }
    CalRecurrenceSetEndDate(a2, v16);
  }
  else
  {
    long long v17 = [v4 count];

    if (!v17)
    {
      CalRecurrenceSetEndDate(a2, 0.0);
      CalRecurrenceSetCount(a2, 0);
      goto LABEL_16;
    }
    uint64_t v13 = [v4 count];
    CalRecurrenceSetCount(a2, [v13 intValue]);
  }

LABEL_16:
  long long v18 = [v4 byday];
  if ([v18 count])
  {
    CFArrayRef v43 = v10;
    CFIndex v19 = [v18 count];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, v19, MEMORY[0x1E4F578A0]);
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id v21 = v18;
    uint64_t v22 = [v21 countByEnumeratingWithState:&v49 objects:v54 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v50;
      do
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          if (*(void *)v50 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v26 = *(void **)(*((void *)&v49 + 1) + 8 * i);
          uint64_t value = 0;
          HIDWORD(CFSetRemoveValue(theSet, value) = CalDayOfWeekFromICSWeekday([v26 weekday]);
          uint64_t v27 = [v26 number];
          LODWORD(CFSetRemoveValue(theSet, value) = [v27 intValue];

          CFArrayAppendValue(Mutable, &value);
        }
        uint64_t v23 = [v21 countByEnumeratingWithState:&v49 objects:v54 count:16];
      }
      while (v23);
    }

    CalRecurrenceSetByDayDays(a2, (uint64_t)Mutable);
    uint64_t v10 = v43;
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    CalRecurrenceSetByDayDays(a2, 0);
  }
  id v28 = [v4 bymonth];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v29 = [v28 countByEnumeratingWithState:&v44 objects:v53 count:16];
  if (v29)
  {
    uint64_t v30 = v29;
    unsigned int v31 = 0;
    uint64_t v32 = *(void *)v45;
    do
    {
      for (uint64_t j = 0; j != v30; ++j)
      {
        if (*(void *)v45 != v32) {
          objc_enumerationMutation(v28);
        }
        v31 |= CalMonthOfYearFromICSMonth((int)[*(id *)(*((void *)&v44 + 1) + 8 * j) intValue]);
      }
      uint64_t v30 = [v28 countByEnumeratingWithState:&v44 objects:v53 count:16];
    }
    while (v30);
  }
  else
  {
    unsigned int v31 = 0;
  }
  CalRecurrenceSetByMonthMonths(a2, v31);
  int v34 = [v4 bymonthday];
  IntArrayFromNSNumberArray = _CreateIntArrayFromNSNumberArray(v34);

  CalRecurrenceSetByMonthDayDays(a2, (uint64_t)IntArrayFromNSNumberArray);
  if (IntArrayFromNSNumberArray) {
    CFRelease(IntArrayFromNSNumberArray);
  }
  __int16 v36 = [v4 byweekno];
  uint64_t v37 = _CreateIntArrayFromNSNumberArray(v36);

  CalRecurrenceSetByWeekWeeks(a2, (uint64_t)v37);
  if (v37) {
    CFRelease(v37);
  }
  uint64_t v38 = [v4 byyearday];
  id v39 = _CreateIntArrayFromNSNumberArray(v38);

  CalRecurrenceSetByYearDayDays(a2, (uint64_t)v39);
  if (v39) {
    CFRelease(v39);
  }
  CFArrayRef v40 = [v4 bysetpos];
  long long v41 = _CreateIntArrayFromNSNumberArray(v40);

  CalRecurrenceSetBySetPos(a2, (uint64_t)v41);
  if (v41) {
    CFRelease(v41);
  }

LABEL_45:
  return a2 != 0;
}

__CFArray *_CreateIntArrayFromNSNumberArray(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  CFSetRef v2 = v1;
  if (v1)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, [v1 count], 0);
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v4 = v2;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v4);
          }
          CFArrayAppendValue(Mutable, (const void *)(int)objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "intValue", (void)v10));
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v6);
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }

  return Mutable;
}

uint64_t CalRecurrenceUpdateFromVCal10String(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a1 componentsSeparatedByString:@" "];
  uint64_t v7 = [v6 count];
  if (v7)
  {
    unint64_t v8 = v7;
    BOOL v9 = [v6 objectAtIndex:0];
    unint64_t v10 = [v9 length];
    if (v10)
    {
      long long v11 = [v9 substringToIndex:1];
    }
    else
    {
      long long v11 = 0;
    }
    if ([v11 isEqualToString:@"Y"]) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 1;
    }
    CalRecurrenceSetFrequency(a2, v12);
    if (v10 < 2)
    {
      long long v13 = 0;
    }
    else
    {
      long long v13 = objc_msgSend(v9, "substringWithRange:", 1, 1);
    }
    if ([v13 isEqualToString:@"M"])
    {
      uint64_t v26 = a2;
      if (v10 < 3)
      {
        double v14 = 0;
      }
      else
      {
        double v14 = [v9 substringFromIndex:2];
      }
      int v15 = objc_msgSend(v14, "intValue", v11);
      unsigned int v16 = 0;
      if (v15 >= 1 && v8 >= 2)
      {
        unsigned int v16 = 0;
        if (v8 - 2 >= (v15 - 1)) {
          unint64_t v17 = (v15 - 1);
        }
        else {
          unint64_t v17 = v8 - 2;
        }
        uint64_t v18 = -1;
        do
        {
          CFIndex v19 = [v6 objectAtIndex:v18 + 2];
          v16 |= CalMonthOfYearFromICSMonth((int)[v19 intValue]);

          ++v18;
        }
        while (v17 != v18);
      }
      a2 = v26;
      CalRecurrenceSetByMonthMonths(v26, v16);

      long long v11 = v25;
    }
    if (v8 < 2)
    {
      int v20 = 0;
    }
    else
    {
      int v20 = [v6 lastObject];
    }
    if ([v20 length])
    {
      uint64_t v21 = [v20 rangeOfString:@"#"];
      if (v21 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v22 = objc_msgSend(v20, "substringWithRange:", v21 + 1, objc_msgSend(v20, "length") + ~v21);
        if ([v22 length]) {
          CalRecurrenceSetCount(a2, [v22 intValue]);
        }
      }
    }
    if (v5)
    {
      double v23 = CalDateFromICSDateAsUTC(v5);
      CalRecurrenceSetEndDate(a2, v23);
    }
  }
  return 1;
}

uint64_t __CDBLogInitIfNeeded_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.calendar.database", "CalendarDatabase");
  id v1 = (void *)CDBLogHandle;
  CDBLogHandle = (uint64_t)v0;

  os_log_t v2 = os_log_create("com.apple.calendar.database", "WidgetReload");
  id v3 = (void *)CDBWidgetReloadHandle;
  CDBWidgetReloadHandle = (uint64_t)v2;

  os_log_t v4 = os_log_create("com.apple.calendar.database", "iCalendarConversion");
  id v5 = (void *)CDBiCalendarConversionHandle;
  CDBiCalendarConversionHandle = (uint64_t)v4;

  os_log_t v6 = os_log_create("com.apple.calendar.database", "SQLProfile");
  uint64_t v7 = (void *)CDBSQLProfileHandle;
  CDBSQLProfileHandle = (uint64_t)v6;

  os_log_t v8 = os_log_create("com.apple.calendar.database", "CalendarDatabasePerf");
  BOOL v9 = (void *)CDBPerfSignpostsHandle;
  CDBPerfSignpostsHandle = (uint64_t)v8;

  os_log_t v10 = os_log_create("com.apple.calendar.database", "AppEntity");
  long long v11 = (void *)CDBAppEntityHandle;
  CDBAppEntityHandle = (uint64_t)v10;

  os_log_t v12 = os_log_create("com.apple.calendar.database", "GroupContainerMigration");
  uint64_t v13 = CDBGroupContainerMigrationHandle;
  CDBGroupContainerMigrationHandle = (uint64_t)v12;
  return MEMORY[0x1F41817F8](v12, v13);
}

uint64_t _CalResourceChangePrepareForSave(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CalRelationOwnerWillSave(Property);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        os_log_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetIntegerProperty();
  if (result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          os_log_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
    CFStringRef v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          os_log_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CFStringRef v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          os_log_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CFStringRef v13 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          double v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    CFStringRef v15 = (const __CFString *)result;
    if (v9 && (uint64_t result = CFStringGetLength(v9)) != 0
      || v11 && (uint64_t result = CFStringGetLength(v11)) != 0
      || v13 && (uint64_t result = CFStringGetLength(v13)) != 0)
    {
      if (!a2) {
        return result;
      }
    }
    else
    {
      if (!v15) {
        return result;
      }
      uint64_t result = CFStringGetLength(v15);
      if (!a2 || !result) {
        return result;
      }
    }
    uint64_t result = _CalIdentityGetID(v9, v11, v13, v15, a2);
    if (result != -1)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            unsigned int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t _CalResourceChangePropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  if (a2 == 1)
  {
    if (a3 != -1) {
      return result;
    }
    if (!result) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  if (!a2)
  {
    if (a3 != -1) {
      return result;
    }
    if (!result) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  if (a2 != 2 || a3 != -1) {
    return result;
  }
  if (result)
  {
LABEL_12:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
LABEL_16:
  return CPRecordGetProperty();
}

void CalResourceChangeInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalResourceChangeClass, (const char **)&kCalResourceChangeIndexes, 0);
  CalMigrationCreateTriggers(a2, (const char **)&kCalResourceChangeClass, (const char **)&kCalResourceChangeTriggers);
}

void CalResourceChangeMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 > 82)
  {
    if (a3 <= 0x64) {
      CalMigrateTableFull(a2, (const char **)&kCalResourceChangeClass, 0, (const char **)&kCalResourceChangeUpgradeInfo, 0, (const char **)&kCalResourceChangeIndexes, 0, (const char **)&kCalResourceChangeTriggers, a3);
    }
  }
  else
  {
    CalResourceChangeInitializeTables(a1, a2);
  }
}

CFTypeRef _CalResourceChangeHasValidParent(uint64_t a1)
{
  CFTypeRef result = _CalResourceChangeGetNotification(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

CFTypeRef _CalResourceChangeGetNotification(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

const void *_CalCreateResourceChangeOfType(uint64_t a1)
{
  os_log_t v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 18);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v2 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      CFStringRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = v2 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v2)
    {
      if (CPRecordGetStore())
      {
        os_log_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateResourceChangeOfType(os_unfair_lock_s *a1)
{
  os_log_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = _CalCreateResourceChangeOfType((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalResourceChangeGetType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetIntegerProperty();
}

uint64_t _CalRemoveResourceChange(void *a1)
{
  uint64_t result = CPRecordGetStore();
  if (result)
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context)
    {
      uint64_t v4 = Context;
      CFTypeRef v5 = _CalResourceChangeGetNotification((uint64_t)a1);
      if (v5)
      {
        BOOL v6 = v5;
        CFArrayRef v7 = _CalResourceChangeNotificationCopyChanges((uint64_t)v5);
        if (v7)
        {
          CFArrayRef v8 = v7;
          CFIndex Count = CFArrayGetCount(v7);
          CFRelease(v8);
          _CalResourceChangeNotificationRemoveChange((uint64_t)v6, a1);
          if (Count == 1) {
            _CalRemoveNotification(v6);
          }
        }
        else
        {
          _CalResourceChangeNotificationRemoveChange((uint64_t)v6, a1);
        }
      }
      else
      {
        _CalDatabaseRemoveEntity(v4, a1);
      }
    }
    if (CDBLockingAssertionsEnabled)
    {
      BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

void CalRemoveResourceChange(void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveResourceChange(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalResourceChangeCopyNotification(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef v3 = _CalResourceChangeGetNotification(a1);
  CFTypeRef v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void *_CalResourceChangeSetCalendar(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalResourceChangeSetCalendar(uint64_t a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeSetCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalResourceChangeCopyCalendar(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CFTypeRef v5 = CalRelationCopyRelatedObject(Property);
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void *_CalResourceChangeSetCalendarItem(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalResourceChangeSetCalendarItem(uint64_t a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeSetCalendarItem(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalResourceChangeCopyCalendarItem(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CFTypeRef v5 = CalRelationCopyRelatedObject(Property);
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalResourceChangeSetChangedByDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyChangedByDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalResourceChangeSetChangedByAddress(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFURLGetString(a2);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalResourceChangeCopyChangedByAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  if (Property) {
    CFURLRef v5 = CFURLCreateWithString(0, Property, 0);
  }
  else {
    CFURLRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalResourceChangeSetChangedByFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyChangedByFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalResourceChangeSetChangedByLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyChangedByLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalResourceChangeGetType(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  IntegerCFStringRef Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetTimestamp(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyTimestamp(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalResourceChangeSetChangedProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalResourceChangeSetChangedProperties(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeSetChangedProperties(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeGetChangedProperties(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  IntegerCFStringRef Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetCreateCount(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeGetCreateCount(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  IntegerCFStringRef Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetUpdateCount(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeGetUpdateCount(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  IntegerCFStringRef Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetDeleteCount(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeGetDeleteCount(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  IntegerCFStringRef Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetDeletedSummary(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyDeletedSummary(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalResourceChangeSetDeletedStartDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyDeletedStartDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalResourceChangeSetAlerted(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalResourceChangeSetAlerted(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeSetAlerted(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalResourceChangeIsAlerted(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  IntegerCFStringRef Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty != 0;
}

void CalResourceChangeSetPublicStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalResourceChangeGetPublicStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  IntegerCFStringRef Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty != 0;
}

uint64_t _CalResourceChangeGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyResourceChangeWithUID(os_unfair_lock_s *a1)
{
  os_log_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v4 = (const void *)_CalResourceChangeGetWithUID(RecordStore);
  CFURLRef v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalResourceChangeGetUID()
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalDatabaseCopyOfAllResourceChanges(os_unfair_lock_s *a1)
{
  os_log_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCopyAllInstancesOfClass();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t _CalResourceChangeGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalResourceChangeGetPropertyIDWithPropertyName(void *key)
{
  if (CalResourceChangeGetPropertyIDWithPropertyName_onceToken != -1) {
    dispatch_once(&CalResourceChangeGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_7);
  }
  uint64_t value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalResourceChangeGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void __CalResourceChangeGetPropertyIDWithPropertyName_block_invoke()
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v1 = @"changeType";
  int v2 = 4;
  CFTypeRef v3 = @"timestamp";
  int v4 = 5;
  CFURLRef v5 = @"changedProperties";
  int v6 = 6;
  CFArrayRef v7 = @"createCount";
  int v8 = 7;
  CFStringRef v9 = @"updateCount";
  int v10 = 8;
  CFStringRef v11 = @"deleteCount";
  int v12 = 9;
  CFStringRef v13 = @"deletedTitle";
  int v14 = 10;
  CFStringRef v15 = @"alerted";
  int v16 = 12;
  unint64_t v17 = @"publicStatus";
  int v18 = 13;
  CFIndex v19 = @"notification";
  int v20 = 14;
  uint64_t v21 = @"calendar";
  int v22 = 15;
  double v23 = @"calendarItem";
  int v24 = 16;
  id v25 = @"changedByDisplayName";
  int v26 = 17;
  uint64_t v27 = @"changedByAddress";
  int v28 = 18;
  uint64_t v29 = @"changedByFirstName";
  int v30 = 20;
  unsigned int v31 = @"changedByLastName";
  int v32 = 21;
  CalResourceChangeGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&v1, 16);
  for (uint64_t i = 240; i != -16; i -= 16)
}

void sub_1A8ECC3DC(_Unwind_Exception *a1)
{
  for (uint64_t i = 240; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

void _CalResourceChangeLoadIdentityProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetIntegerProperty() != -1)
  {
    uint64_t Store = CPRecordGetStore();
    IdentityWithRowuint64_t ID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      uint64_t v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            int v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFArrayRef v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            int v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      uint64_t v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        int v10 = (const void *)v9;
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11) {
                os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

void sub_1A8ECC634(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A8ECC648(_Unwind_Exception *a1)
{
}

uint64_t CalEnableTravelAdvisoriesForAutomaticBehavior()
{
  os_log_t v0 = +[CDBPreferences shared];
  uint64_t v1 = objc_msgSend(v0, "get_enableTravelAdvisoriesForAutomaticBehavior");

  return v1;
}

void CalSetEnableTravelAdvisoriesForAutomaticBehavior(uint64_t a1)
{
  id v2 = +[CDBPreferences shared];
  objc_msgSend(v2, "set_enableTravelAdvisoriesForAutomaticBehavior:", a1);
}

uint64_t CalLocationSuggestionsEnabled()
{
  os_log_t v0 = +[CDBPreferences shared];
  uint64_t v1 = objc_msgSend(v0, "get_suggestEventLocations");

  return v1;
}

uint64_t CalDaysToSync()
{
  os_log_t v0 = +[CDBPreferences shared];
  uint64_t v1 = objc_msgSend(v0, "get_kCalPreferredDaysToSyncKey");

  return v1;
}

void CalSetLocationSuggestionsEnabled(uint64_t a1)
{
  id v2 = +[CDBPreferences shared];
  objc_msgSend(v2, "set_suggestEventLocations:", a1);
}

void CalSetDaysToSync(uint64_t a1)
{
  id v2 = +[CDBPreferences shared];
  objc_msgSend(v2, "set_kCalPreferredDaysToSyncKey:", a1);
}

void _CalAttachmentFilePrepareForSave(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (_CalAttachmentFileGetStoreID((uint64_t)a1))
  {
    if (!_CalColorGetRecordID((uint64_t)a1))
    {
      CFURLRef v2 = (const __CFURL *)_CalAttachmentFileCopyURLForPendingFileCopy((uint64_t)a1);
      if (v2)
      {
        CFURLRef v3 = v2;
        CFURLStartAccessingSecurityScopedResource(v2);
        int v4 = [(__CFURL *)v3 path];
        if (v4)
        {
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (Context) {
                  os_unfair_lock_assert_owner(Context + 20);
                }
              }
            }
          }
          CPRecordGetProperty();
          char v6 = _CalAttachmentFileSetFileData(a1, (uint64_t)v4);
          _CalAttachmentFileSetURLForPendingFileCopy((uint64_t)a1, 0);
          MEMORY[0x1AD0E8CF0](v3);
          CFRelease(v3);
          if (v6) {
            goto LABEL_17;
          }
        }
        else
        {
          MEMORY[0x1AD0E8CF0](v3);
          CFRelease(v3);
        }
        int v8 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          uint64_t v9 = v8;
          v10[0] = 67109120;
          v10[1] = CPRecordGetID();
          _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_ERROR, "Attachment failed to copy to local storage: %d", (uint8_t *)v10, 8u);
        }
LABEL_17:
      }
    }
  }
  else
  {
    CFArrayRef v7 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_ERROR, "Attempting to save an attachment file that is not in any store", (uint8_t *)v10, 2u);
    }
  }
}

void CalAttachmentFilePropertyWillChange(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2 < 9 || a2 == 12)
  {
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    CFURLRef v2 = _CalAttachmentFileCopyAttachments(a1);
    uint64_t v3 = [(__CFArray *)v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v8;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v8 != v5) {
            objc_enumerationMutation(v2);
          }
          _CalAttachmentMarkDirty(*(void *)(*((void *)&v7 + 1) + 8 * i), 1);
        }
        uint64_t v4 = [(__CFArray *)v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      }
      while (v4);
    }
  }
}

void CalAttachmentFileInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalAttachmentFileClass, (const char **)&kCalAttachmentFileIndexes, 0);
  _CalAttachmentFileRegisterFunctions(a1, (uint64_t)a2);
  CalMigrationCreateTriggers(a2, (const char **)&kCalAttachmentFileClass, (const char **)&kCalAttachmentFileTriggers);
}

void CalAttachmentFileMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 > 16008)
  {
    if (a3 <= 0x4651) {
      CalMigrateTableFull(a2, (const char **)&kCalAttachmentFileClass, 0, (const char **)&kCalAttachmentFileUpgradeInfo, 0, (const char **)&kCalAttachmentFileIndexes, 0, (const char **)&kCalAttachmentFileTriggers, a3);
    }
  }
  else
  {
    CalAttachmentFileInitializeTables(a1, a2);
  }
}

void _CalAttachmentFileNoteAttachmentDeleted(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2 == 2)
  {
    uint64_t v5 = sqlite3_user_data(a1);
    uint64_t v6 = sqlite3_value_int(*a3);
    Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v5);
    long long v8 = (void *)v5[41];
    long long v9 = [NSNumber numberWithInt:v6];
    long long v10 = [v8 objectForKeyedSubscript:v9];

    if (v10) {
      goto LABEL_3;
    }
    StoreWithUuint64_t ID = _CalGetStoreWithUID(RecordStore);
    if (!StoreWithUID)
    {
      int v16 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v17[0] = 67109120;
        v17[1] = v6;
        _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_ERROR, "Unable to find store with storeUID when attachment deleted: %d", (uint8_t *)v17, 8u);
      }
      goto LABEL_4;
    }
    long long v10 = [[CalAttachmentFileCleanupContext alloc] initWithStore:StoreWithUID];
    int v14 = (void *)v5[41];
    CFStringRef v15 = [NSNumber numberWithInt:v6];
    [v14 setObject:v10 forKeyedSubscript:v15];

    if (v10)
    {
LABEL_3:
      uint64_t v11 = (void *)[[NSString alloc] initWithUTF8String:sqlite3_value_text(a3[1])];
      [(CalAttachmentFileCleanupContext *)v10 addAttachmentToDelete:v11];
    }
LABEL_4:
    sqlite3_result_null(a1);
    return;
  }
  uint64_t v12 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v17[0]) = 0;
    _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, "Wrong number of arguments for CalNoteAttachmentDeleted", (uint8_t *)v17, 2u);
  }
}

void _CalAttachmentFileNoteStoreDeleted(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  if (a2 == 3)
  {
    uint64_t v5 = sqlite3_user_data(a1);
    uint64_t v6 = sqlite3_value_int(*a3);
    long long v7 = (unsigned __int8 *)sqlite3_value_text(a3[1]);
    long long v8 = (unsigned __int8 *)sqlite3_value_text(a3[2]);
    if (v7) {
      long long v7 = (unsigned __int8 *)[[NSString alloc] initWithBytesNoCopy:v7 length:strlen((const char *)v7) encoding:4 freeWhenDone:0];
    }
    if (v8) {
      long long v8 = (unsigned __int8 *)[[NSString alloc] initWithBytesNoCopy:v8 length:strlen((const char *)v8) encoding:4 freeWhenDone:0];
    }
    int v16 = v7;
    long long v9 = v8;
    long long v10 = (void *)v5[41];
    uint64_t v11 = [NSNumber numberWithInt:v6];
    uint64_t v12 = [v10 objectForKeyedSubscript:v11];

    if (!v12)
    {
      uint64_t v12 = [[CalAttachmentFileCleanupContext alloc] initWithExternalID:v16 storeUUID:v9 database:v5];
      CFStringRef v13 = (void *)v5[41];
      int v14 = [NSNumber numberWithInt:v6];
      [v13 setObject:v12 forKeyedSubscript:v14];
    }
    [(CalAttachmentFileCleanupContext *)v12 markStoreAsDeleted];
    sqlite3_result_null(a1);
  }
  else
  {
    CFStringRef v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_ERROR, "Wrong number of arguments for CalNoteStoreDeleted", buf, 2u);
    }
  }
}

const void *_CalDatabaseCreateAttachmentFile(uint64_t a1)
{
  CFURLRef v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 25);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      long long v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CalGenerateUUID();
  CPRecordInitializeProperty();
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateAttachmentFile(os_unfair_lock_s *a1)
{
  CFURLRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AttachmentFile = _CalDatabaseCreateAttachmentFile((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return AttachmentFile;
}

const void *_CalAttachmentFileCopy(uint64_t a1, void *a2)
{
  AttachmentFile = _CalDatabaseCreateAttachmentFile(a1);
  BOOL v4 = AttachmentFile;
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = AttachmentFile == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        long long v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      long long v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        long long v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        unint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFIndex v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        double v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23) {
          os_unfair_lock_assert_owner(v23 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25) {
          os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26) {
          os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28) {
          os_unfair_lock_assert_owner(v28 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  id v30 = _CalAttachmentFileCopyLocalURLForArchivedData(a2);
  if (v30)
  {
    unsigned int v31 = (void *)[objc_alloc(MEMORY[0x1E4F28FF8]) initWithURL:v30 readonly:1];
    if (CDBLockingAssertionsEnabled)
    {
      if (v4)
      {
        if (CPRecordGetStore())
        {
          int v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v32) {
            os_unfair_lock_assert_owner(v32 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
  }
  return v4;
}

id _CalAttachmentFileCopyLocalURLForArchivedData(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFURLRef v2 = _CalColorGetRecordID((uint64_t)a1);
  if (v2)
  {
    uint64_t v3 = _CalAttachmentFileGetCalendarDataContainerForAttachmentFile(a1);
    if (v3)
    {
      BOOL v4 = [MEMORY[0x1E4F57670] localURLForAttachmentWithRelativePath:v2 baseURL:v3];
      if (_CalAttachmentFileGetFlag((uint64_t)a1, 2))
      {
        id v5 = [v4 URLByAppendingPathExtension:@"zip"];
        BOOL v6 = [MEMORY[0x1E4F28CB8] defaultManager];
        long long v7 = [v5 path];
        char v8 = [v6 fileExistsAtPath:v7];

        if ((v8 & 1) == 0)
        {
          long long v9 = [MEMORY[0x1E4F28CB8] defaultManager];
          long long v10 = [v4 path];
          BOOL v11 = [v5 path];
          id v16 = 0;
          char v12 = [v9 archivePathToFile:v10 toFile:v11 createPKZipArchive:1 error:&v16];
          id v13 = v16;

          if ((v12 & 1) == 0)
          {
            int v14 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              id v18 = v13;
              _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_ERROR, "Unable to archive data: %@", buf, 0xCu);
            }
          }
        }
      }
      else
      {
        id v5 = v4;
      }
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

uint64_t _CalRemoveAttachmentFile(const void *a1)
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

id _CalAttachmentFileAccountIdentifierForAttachmentFile(void *StoreWithUID)
{
  if (StoreWithUID)
  {
    _CalAttachmentFileGetStoreID((uint64_t)StoreWithUID);
    uint64_t Store = CPRecordGetStore();
    StoreWithUuint64_t ID = (void *)_CalGetStoreWithUID(Store);
    if (StoreWithUID)
    {
      StoreWithUuint64_t ID = _CalErrorGetRecordID((uint64_t)StoreWithUID);
    }
    uint64_t v1 = vars8;
  }
  return StoreWithUID;
}

uint64_t _CalAttachmentFileGetStoreID(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if ((int)Property <= 0)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    BOOL v4 = _CalAttachmentFileCopyAttachments(a1);
    uint64_t v5 = [(__CFArray *)v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t Property = 0;
      uint64_t v7 = *(void *)v13;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          CFTypeRef Owner = _CalAttachmentGetOwner(*(void *)(*((void *)&v12 + 1) + 8 * i));
          if (Owner)
          {
            uint64_t Property = _CalCalendarItemGetStoreId((uint64_t)Owner);
            if ((int)Property >= 1)
            {

              if (a1)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (CPRecordGetStore())
                  {
                    long long v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v10) {
                      os_unfair_lock_assert_owner(v10 + 20);
                    }
                  }
                }
              }
              CPRecordSetProperty();
              goto LABEL_26;
            }
          }
        }
        uint64_t v6 = [(__CFArray *)v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
    else
    {

      uint64_t Property = 0;
    }
LABEL_26:
  }
  return Property;
}

id CalAttachmentFileCopyAttachmentContainerForStore(uint64_t a1, os_unfair_lock_s *a2)
{
  BOOL v4 = a2 + 20;
  os_unfair_lock_lock(a2 + 20);
  uint64_t v5 = _CalAttachmentFileCopyAttachmentContainerForStore(a1, (uint64_t)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v5;
}

id _CalAttachmentFileCopyAttachmentContainerForStore(uint64_t a1, uint64_t a2)
{
  id v4 = 0;
  _CalAttachmentFileGetAttachmentContainerURLsForStore(a1, a2, &v4, 0);
  id v2 = v4;
  return v2;
}

id _CalAttachmentFileCopyAttachmentContainerForStoreProperties(void *a1, void *a2, uint64_t a3)
{
  id v5 = 0;
  _CalAttachmentFileGetAttachmentContainerURLsForStoreProperties(a1, a2, a3, &v5, 0);
  id v3 = v5;
  return v3;
}

void _CalAttachmentFileGetAttachmentContainerURLsForStoreProperties(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v16 = a1;
  id v9 = a2;
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  long long v10 = _CalDatabaseGetCalendarDataContainerProvider(a3);
  BOOL v11 = v10;
  if (v10)
  {
    long long v12 = [v10 containerForAccountIdentifier:v16];
    long long v13 = v12;
    if (v12)
    {
      if (a5) {
        *a5 = v12;
      }
      if (v9
        && ([v9 containsString:@"/"] & 1) == 0
        && ([v9 containsString:@".."] & 1) == 0)
      {
        long long v14 = [MEMORY[0x1E4F57670] attachmentContainerForSourceIdentifier:v9 calendarDataContainer:v13];
        long long v15 = v14;
        if (a4) {
          *a4 = v14;
        }
      }
    }
  }
}

void _CalAttachmentFileGetAttachmentContainerURLsForStore(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  _CalErrorGetRecordID(a1);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  char v8 = (void *)_CalStoreCopyUUID(a1);
  _CalAttachmentFileGetAttachmentContainerURLsForStoreProperties(v9, v8, a2, a3, a4);
}

void CalAttachmentFileSetDataProtection(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (CalAttachmentFileSetDataProtection_onceToken != -1) {
    dispatch_once(&CalAttachmentFileSetDataProtection_onceToken, &__block_literal_global_9);
  }
  id v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v6 = 0;
  char v3 = [v2 setAttributes:CalAttachmentFileSetDataProtection_classBDataProtection ofItemAtPath:v1 error:&v6];
  id v4 = v6;

  if ((v3 & 1) == 0)
  {
    id v5 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      id v8 = v1;
      __int16 v9 = 2112;
      id v10 = v4;
      _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_ERROR, "Failed to change dataclass of attachment at path %@. CFTypeRef Error = %@", buf, 0x16u);
    }
  }
}

void __CalAttachmentFileSetDataProtection_block_invoke()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *MEMORY[0x1E4F28370];
  v3[0] = *MEMORY[0x1E4F28348];
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:&v2 count:1];
  id v1 = (void *)CalAttachmentFileSetDataProtection_classBDataProtection;
  CalAttachmentFileSetDataProtection_classBDataProtectiouint64_t n = v0;
}

void CalAttachmentPrepareFileForDownload(void *a1)
{
  id v2 = [a1 absoluteURL];
  id v1 = [v2 path];
  CalAttachmentFileSetDataProtection(v1);
}

uint64_t _CalAttachmentFileSetFileData(void *a1, uint64_t a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v4 = _CalAttachmentFileGetCalendarDataContainerForAttachmentFile(a1);
  if (!v4
    || ([MEMORY[0x1E4F57670] attachmentContainerWithBaseURL:v4],
        (uint64_t v5 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    id v24 = 0;
    __int16 v9 = 0;
    goto LABEL_23;
  }
  CFURLRef v6 = (const __CFURL *)v5;
  _CalAttachmentFileGetStoreID((uint64_t)a1);
  uint64_t Store = CPRecordGetStore();
  StoreWithUint ID = _CalGetStoreWithUID(Store);
  __int16 v9 = (__CFString *)_CalStoreCopyUUID(StoreWithUID);
  if (!v9) {
    goto LABEL_19;
  }
  CFURLRef v10 = CFURLCreateCopyAppendingPathComponent(0, v6, v9, 0);
  CFRelease(v9);
  if (!v10) {
    goto LABEL_18;
  }
  CFStringRef v11 = CFURLCopyFileSystemPath(v10, kCFURLPOSIXPathStyle);
  if (!v11) {
    goto LABEL_17;
  }
  CFStringRef v12 = v11;
  if ((CPFileBuildDirectoriesToPath() & 1) == 0)
  {
    long long v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      CFStringRef v71 = v12;
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Unable to create directories to attachment directory \"%{public}@\"", buf, 0xCu);
    }
  }
  CFRelease(v12);
  Descriptiouint64_t n = (const __CFString *)_CalCalendarItemGetDescription((uint64_t)a1);
  CFURLRef v15 = CFURLCreateCopyAppendingPathComponent(0, v10, Description, 1u);
  if (!v15)
  {
LABEL_17:
    CFRelease(v10);
LABEL_18:
    __int16 v9 = 0;
LABEL_19:
    id v25 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v71 = 0;
      __int16 v72 = 2112;
      *(void *)int v73 = v4;
      _os_log_impl(&dword_1A8E81000, v25, OS_LOG_TYPE_ERROR, "Could not get local url for components. local absolute CFURLRef url = %@, calendar data container CFURLRef url = %@", buf, 0x16u);
    }
    id v24 = 0;
    goto LABEL_22;
  }
  CFURLRef v16 = v15;
  CFStringRef pathComponent = Description;
  uint64_t v17 = _CalAttachmentFileCopyURLForPendingFileCopy((uint64_t)a1);
  if (v17
    || (CFStringRef v60 = _CalAttachmentFileCopyFilename((uint64_t)a1)) != 0
    && (CFStringRef v61 = v60, v17 = (uint64_t)CFURLCreateWithFileSystemPath(0, v60, kCFURLPOSIXPathStyle, 0), CFRelease(v61), v17))
  {
    CFURLRef url = (CFURLRef)v17;
    id v18 = (id)(id)_CalAttachmentFileCopyFilename((uint64_t)a1);
    uint64_t v19 = v18;
    if ((unint64_t)[(__CFString *)v18 length] >= 0x101)
    {
      uint64_t v20 = [(__CFString *)v18 rangeOfComposedCharacterSequenceAtIndex:[(__CFString *)v18 length] - 256];
      uint64_t v19 = [(__CFString *)v18 substringFromIndex:v20 + v21];
    }
    int v22 = [v19 stringByReplacingOccurrencesOfString:@"/" withString:@"_"];

    if ([(__CFString *)v22 hasPrefix:@"."])
    {
      do
      {
        double v23 = [(__CFString *)v22 substringFromIndex:1];

        int v22 = v23;
      }
      while (([(__CFString *)v23 hasPrefix:@"."] & 1) != 0);
    }
    else
    {
      double v23 = v22;
    }

    if (v23 && [(__CFString *)v23 length])
    {
      CFURLRef v55 = CFURLCreateCopyAppendingPathComponent(0, v16, v23, 0);
      if (!v55)
      {
LABEL_65:
        __int16 v9 = 0;
LABEL_66:
        CFRelease(url);

        if (v9) {
          goto LABEL_69;
        }
        goto LABEL_67;
      }
    }
    else
    {
      CFURLRef v56 = CFURLCreateCopyAppendingPathComponent(0, v16, pathComponent, 0);
      if (!v56) {
        goto LABEL_65;
      }
      CFURLRef v55 = v56;
      CFStringRef v57 = CFURLCopyPathExtension(url);
      if (v57)
      {
        CFStringRef v58 = v57;
        CFURLRef v59 = CFURLCreateCopyAppendingPathExtension(0, v55, v57);
        CFRelease(v58);
        CFRelease(v55);
        CFURLRef v55 = v59;
        if (!v59) {
          goto LABEL_65;
        }
      }
    }
    __int16 v9 = (__CFString *)CFURLCopyFileSystemPath(v55, kCFURLPOSIXPathStyle);
    CFRelease(v55);
    goto LABEL_66;
  }
LABEL_67:
  CFURLRef v62 = CFURLCreateCopyAppendingPathComponent(0, v16, pathComponent, 0);
  __int16 v9 = (__CFString *)CFURLCopyFileSystemPath(v16, kCFURLPOSIXPathStyle);
  if (v62) {
    CFRelease(v62);
  }
LABEL_69:
  CFRelease(v16);
  CFRelease(v10);
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v63 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v9];
  if (!v63) {
    goto LABEL_19;
  }
  uint64_t v64 = (void *)v63;
  id v24 = [MEMORY[0x1E4F57670] localRelativePathForLocalAbsoluteURL:v63 localBaseURL:v4];

LABEL_22:
  CFRelease(v6);
LABEL_23:

  id v26 = v24;
  if (v9)
  {
    uint64_t v27 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v28 = [(__CFString *)v9 stringByDeletingLastPathComponent];
    [v27 createDirectoryAtPath:v28 withIntermediateDirectories:1 attributes:0 error:0];

    LODWORD(v28) = _CalAttachmentFileGetFlag((uint64_t)a1, 2);
    char v68 = 0;
    [v27 fileExistsAtPath:a2 isDirectory:&v68];
    if (!v28 || v68)
    {
      id v67 = 0;
      char v36 = [v27 copyItemAtPath:a2 toPath:v9 error:&v67];
      unsigned int v31 = (__CFString *)v67;
      if (v36) {
        goto LABEL_32;
      }
      id v42 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v71 = v31;
        _os_log_impl(&dword_1A8E81000, v42, OS_LOG_TYPE_ERROR, "Failed to copy attachment (error: %@).", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v29 = [(__CFString *)v9 stringByDeletingLastPathComponent];
      char v30 = UnzipArchive();

      if (v30)
      {
        unsigned int v31 = 0;
LABEL_32:
        CFURLRef v37 = CFURLCreateWithFileSystemPath(0, v9, kCFURLPOSIXPathStyle, 0);
        CFURLRef v38 = v37;
        if (v26 && v37)
        {
          _CalAttachmentFileSetLocalRelativePath((uint64_t)a1);
          id v39 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
          {
            CFArrayRef v40 = v39;
            uint64_t v41 = _CalCalendarItemGetDescription((uint64_t)a1);
            *(_DWORD *)long long buf = 138543874;
            CFStringRef v71 = (CFStringRef)v41;
            __int16 v72 = 2112;
            *(void *)int v73 = v26;
            *(_WORD *)&v73[8] = 2112;
            *(void *)&v73[10] = v38;
            _os_log_impl(&dword_1A8E81000, v40, OS_LOG_TYPE_INFO, "Set local relative path for attachment. file UUint ID = %{public}@, local relative path = %@, local absolute url = %@", buf, 0x20u);
          }
        }
        else
        {
          CFArrayRef v43 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            long long v44 = v43;
            uint64_t v45 = _CalCalendarItemGetDescription((uint64_t)a1);
            *(_DWORD *)long long buf = 138543874;
            CFStringRef v71 = (CFStringRef)v45;
            __int16 v72 = 2112;
            *(void *)int v73 = v26;
            *(_WORD *)&v73[8] = 2112;
            *(void *)&v73[10] = v38;
            _os_log_impl(&dword_1A8E81000, v44, OS_LOG_TYPE_ERROR, "Could not set local relative path for attachment. file UUint ID = %{public}@, local relative path = %@, local absolute url = %@", buf, 0x20u);
          }
          if (!v38) {
            goto LABEL_43;
          }
        }
        CFRelease(v38);
LABEL_43:
        CalAttachmentFileSetDataProtection(v9);
        long long v46 = v9;
        long long v47 = [MEMORY[0x1E4F28CB8] defaultManager];
        id v69 = 0;
        id v48 = [MEMORY[0x1E4F57670] getFileSizeForPath:v46 fileManager:v47 error:&v69];
        long long v49 = (__CFString *)v69;
        if (v48)
        {
          _CalAttachmentFileSetFileSize((uint64_t)a1);
        }
        else
        {
          long long v51 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            long long v52 = v51;
            int ID = CPRecordGetID();
            *(_DWORD *)long long buf = 138412802;
            CFStringRef v71 = v49;
            __int16 v72 = 1024;
            *(_DWORD *)int v73 = ID;
            *(_WORD *)&uint8_t v73[4] = 2112;
            *(void *)&v73[6] = v46;
            _os_log_impl(&dword_1A8E81000, v52, OS_LOG_TYPE_ERROR, "Could not set file size for attachment. error = %@, file uid = %d, local absolute path = %@", buf, 0x1Cu);
          }
        }

        uint64_t v35 = 1;
        goto LABEL_51;
      }
      long long v50 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v71 = 0;
        _os_log_impl(&dword_1A8E81000, v50, OS_LOG_TYPE_ERROR, "Failed to unzip attachment (error: %@).", buf, 0xCu);
      }
    }
    uint64_t v35 = 0;
LABEL_51:

    goto LABEL_52;
  }
  int v32 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    uint64_t v33 = v32;
    int v34 = CPRecordGetID();
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v71) = v34;
    _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_ERROR, "Couldn't create a local attachment path for the attachment file %d", buf, 8u);
  }
  uint64_t v35 = 0;
LABEL_52:

  return v35;
}

BOOL _CalAttachmentFileIsAutoArchived(uint64_t a1)
{
  return _CalAttachmentFileGetFlag(a1, 2);
}

uint64_t _CalAttachmentFileSetLocalRelativePath(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalAttachmentFileSetFileData(void *a1, uint64_t a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v5 = _CalAttachmentFileSetFileData(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

uint64_t CalAttachmentFileCopyLocalURL(void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalAttachmentFileCopyLocalURL(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAttachmentFileCopyLocalURL(void *a1)
{
  id v2 = _CalColorGetRecordID((uint64_t)a1);
  if (v2)
  {
    uint64_t v3 = _CalAttachmentFileGetCalendarDataContainerForAttachmentFile(a1);
    if (v3)
    {
      uint64_t v4 = [MEMORY[0x1E4F57670] localURLForAttachmentWithRelativePath:v2 baseURL:v3];
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id _CalAttachmentFileGetCalendarDataContainerForAttachmentFile(void *a1)
{
  uint64_t v2 = CalCopyDatabaseForEntity(a1);
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    uint64_t v4 = _CalDatabaseGetCalendarDataContainerProvider(v2);
    CFRelease(v3);
    if (v4)
    {
      uint64_t v5 = _CalAttachmentFileAccountIdentifierForAttachmentFile(a1);
      CFURLRef v6 = [v4 containerForAccountIdentifier:v5];
    }
    else
    {
      CFURLRef v6 = 0;
    }
  }
  else
  {
    CFURLRef v6 = 0;
  }
  return v6;
}

id CalAttachmentFileCopyURLAppropriateForFile(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Store = _CalAttachmentFileGetStore(a1);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  id v8 = 0;
  _CalAttachmentFileGetAttachmentContainerURLsForStore(Store, DatabaseForRecord, &v8, 0);
  id v5 = v8;
  if (v5)
  {
    CFURLRef v6 = [MEMORY[0x1E4F28CB8] defaultManager];
    [v6 createDirectoryAtURL:v5 withIntermediateDirectories:1 attributes:0 error:0];
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

uint64_t _CalAttachmentFileGetStore(uint64_t a1)
{
  if ((int)_CalAttachmentFileGetStoreID(a1) < 1) {
    return 0;
  }
  uint64_t Store = CPRecordGetStore();
  return _CalGetStoreWithUID(Store);
}

void _CalAttachmentFileMigrateAttachmentsInStoreFromOldPersistentIDToNewPersistentID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  uint64_t v7 = _CalDatabaseGetCalendarDataContainerProvider(DatabaseForRecord);
  id v8 = _CalErrorGetRecordID(a1);
  __int16 v9 = [v7 containerForAccountIdentifier:v8];
  CFURLRef v10 = [MEMORY[0x1E4F57670] attachmentContainerWithBaseURL:v9];
  CFStringRef v11 = v10;
  if (v10)
  {
    uint64_t v41 = DatabaseForRecord;
    id v42 = v8;
    CFArrayRef v43 = v7;
    CFStringRef v12 = [v10 URLByAppendingPathComponent:a2];
    long long v13 = [MEMORY[0x1E4F28CB8] defaultManager];
    long long v14 = [v12 path];
    int v15 = [v13 fileExistsAtPath:v14];

    CFURLRef v16 = v12;
    if (v15)
    {
      uint64_t v17 = [v11 URLByAppendingPathComponent:a3];
      id v44 = 0;
      char v18 = [v13 moveItemAtURL:v16 toURL:v17 error:&v44];
      id v40 = v44;
      if (v18)
      {
        uint64_t v19 = [MEMORY[0x1E4F57670] localRelativePathForLocalAbsoluteURL:v16 localBaseURL:v9];
        id v39 = [MEMORY[0x1E4F57670] localRelativePathForLocalAbsoluteURL:v17 localBaseURL:v9];
        Recorduint64_t Store = _CalDatabaseGetRecordStore(v41);
        uint64_t v21 = RecordStore;
        if (CDBLockingAssertionsEnabled)
        {
          if (RecordStore)
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
        uint64_t Database = CPRecordStoreGetDatabase();
        if (CDBLockingAssertionsEnabled)
        {
          if (Database)
          {
            if (*(void *)(Database + 104))
            {
              id v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v24) {
                os_unfair_lock_assert_owner(v24 + 20);
              }
            }
          }
        }
        uint64_t v25 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
        id v26 = v19;
        if (v25)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v25)
            {
              if (*(void *)(*(void *)v25 + 104))
              {
                uint64_t v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v27) {
                  os_unfair_lock_assert_owner(v27 + 20);
                }
              }
            }
          }
          uint64_t v28 = CPSqliteConnectionStatementForSQL();
          if (v28)
          {
            uint64_t v29 = v28;
            sqlite3_bind_text(*(sqlite3_stmt **)(v28 + 8), 1, (const char *)[v39 UTF8String], -1, 0);
            sqlite3_bind_int64(*(sqlite3_stmt **)(v29 + 8), 2, [v19 length] + 1);
            char v30 = *(sqlite3_stmt **)(v29 + 8);
            if (CDBLockingAssertionsEnabled)
            {
              if (v21)
              {
                unsigned int v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v31) {
                  os_unfair_lock_assert_owner(v31 + 20);
                }
              }
            }
            CPRecordGetID();
            RowidForRecordint ID = CPRecordStoreGetRowidForRecordID();
            sqlite3_bind_int64(v30, 3, RowidForRecordID);
            sqlite3_bind_int64(*(sqlite3_stmt **)(v29 + 8), 4, [v26 length]);
            sqlite3_bind_text(*(sqlite3_stmt **)(v29 + 8), 5, (const char *)[v26 UTF8String], -1, 0);
            _CalDatabasePerformStatementWithWriteLock(v41, v29);
            if (CDBLockingAssertionsEnabled)
            {
              if (*(void *)v29)
              {
                uint64_t v33 = **(void **)v29;
                if (v33)
                {
                  if (*(void *)(v33 + 104))
                  {
                    int v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v34) {
                      os_unfair_lock_assert_owner(v34 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementReset();
          }
        }

        uint64_t v35 = v40;
      }
      else
      {
        CFURLRef v38 = CDBLogHandle;
        uint64_t v35 = v40;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138543874;
          *(void *)long long v46 = a2;
          *(_WORD *)&v46[8] = 2114;
          *(void *)&v46[10] = a3;
          *(_WORD *)&v46[18] = 2112;
          *(void *)&v46[20] = v40;
          _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_ERROR, "Couldn't rename attachment directory from %{public}@ to %{public}@: %@", buf, 0x20u);
        }
      }
    }
    id v8 = v42;
    uint64_t v7 = v43;
  }
  else
  {
    char v36 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      CFURLRef v37 = v36;
      *(_DWORD *)long long buf = 67109634;
      *(_DWORD *)long long v46 = CPRecordGetID();
      *(_WORD *)&void v46[4] = 2114;
      *(void *)&v46[6] = a2;
      *(_WORD *)&v46[14] = 2114;
      *(void *)&v46[16] = a3;
      _os_log_impl(&dword_1A8E81000, v37, OS_LOG_TYPE_ERROR, "Changing store uid %d persistent id from %{public}@ to %{public}@: couldn't get attachment base URL, so won't migrate any attachments.", buf, 0x1Cu);
    }
  }
}

uint64_t CalDatabaseDeleteOrphanedAttachmentsInDirectory(void *a1, void *a2, uint64_t a3)
{
  v80[1] = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  id v59 = a2;
  unint64_t v5 = 0x1E4F28000uLL;
  CFURLRef v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v7 = [v4 path];
  int v8 = [v6 fileExistsAtPath:v7];

  if (!v8)
  {
    uint64_t v44 = 1;
    int v15 = v59;
    goto LABEL_50;
  }
  __int16 v9 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v63 = *MEMORY[0x1E4F1C628];
  v80[0] = *MEMORY[0x1E4F1C628];
  CFURLRef v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v80 count:1];
  CFStringRef v11 = [v9 enumeratorAtURL:v4 includingPropertiesForKeys:v10 options:1 errorHandler:&__block_literal_global_14];

  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  id v12 = v11;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v71 objects:v79 count:16];
  id v60 = v12;
  if (!v13)
  {

    int v15 = v59;
    goto LABEL_42;
  }
  uint64_t v14 = v13;
  id v54 = v4;
  uint64_t v62 = *(void *)v72;
  uint64_t v55 = *MEMORY[0x1E4F1C540];
  int v61 = 1;
  int v15 = v59;
  do
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if (*(void *)v72 != v62) {
        objc_enumerationMutation(v12);
      }
      uint64_t v17 = *(void **)(*((void *)&v71 + 1) + 8 * i);
      char v18 = objc_msgSend(MEMORY[0x1E4F57670], "localRelativePathForLocalAbsoluteURL:localBaseURL:", v17, v15, v54);
      CFTypeRef v19 = CalDatabaseCopyAttachmentFileInStoreWithLocalPath();
      id v69 = 0;
      id v70 = 0;
      char v20 = [v17 getResourceValue:&v70 forKey:v63 error:&v69];
      id v21 = v70;
      id v22 = v69;
      if (v20)
      {
        if ([v21 BOOLValue])
        {
          if (!v19)
          {
            v61 &= CalDatabaseDeleteOrphanedAttachmentsInDirectory(v17, v15, a3);
            goto LABEL_36;
          }
LABEL_16:
          CFRelease(v19);
          int v61 = 0;
          goto LABEL_36;
        }
        if (v19) {
          goto LABEL_16;
        }
        id v24 = [v17 pathExtension];
        uint64_t v25 = [v24 lowercaseString];
        int v26 = [v25 isEqualToString:@"zip"];

        if (!v26) {
          goto LABEL_29;
        }
        uint64_t v27 = (void *)MEMORY[0x1E4F57670];
        uint64_t v28 = [v17 URLByDeletingPathExtension];
        uint64_t v29 = [v27 localRelativePathForLocalAbsoluteURL:v28 localBaseURL:v15];

        CFTypeRef v30 = CalDatabaseCopyAttachmentFileInStoreWithLocalPath();
        if (!v30) {
          goto LABEL_28;
        }
        unsigned int v31 = v30;
        if (!CalAttachmentFileIsAutoArchived((uint64_t)v30)) {
          goto LABEL_27;
        }
        id v67 = 0;
        id v68 = 0;
        int loga = [v17 getResourceValue:&v68 forKey:v55 error:&v67];
        id v32 = v68;
        id v58 = v67;
        if (!loga)
        {
          log = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            id v76 = v17;
            __int16 v77 = 2112;
            id v78 = v58;
            _os_log_impl(&dword_1A8E81000, log, OS_LOG_TYPE_ERROR, "Error checking creation date for %@: %@", buf, 0x16u);
          }

LABEL_27:
          CFRelease(v31);
LABEL_28:

LABEL_29:
          char v36 = [MEMORY[0x1E4F28CB8] defaultManager];
          id v66 = 0;
          int v37 = [v36 removeItemAtURL:v17 error:&v66];
          id v38 = v66;

          uint64_t v39 = CDBLogHandle;
          if (v37)
          {
            id v12 = v60;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v76 = v17;
              id v40 = v39;
              os_log_type_t v41 = OS_LOG_TYPE_DEFAULT;
              id v42 = "Attachment cleanup: removed orphaned file %@";
              uint32_t v43 = 12;
              goto LABEL_34;
            }
          }
          else
          {
            id v12 = v60;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412546;
              id v76 = v17;
              __int16 v77 = 2112;
              id v78 = v38;
              id v40 = v39;
              os_log_type_t v41 = OS_LOG_TYPE_ERROR;
              id v42 = "Attachment cleanup: failed to remove orphaned file %@: %@";
              uint32_t v43 = 22;
LABEL_34:
              _os_log_impl(&dword_1A8E81000, v40, v41, v42, buf, v43);
            }
          }

          int v15 = v59;
          goto LABEL_36;
        }
        [v32 timeIntervalSinceNow];
        double v34 = fabs(v33);

        CFRelease(v31);
        if (v34 >= 86400.0) {
          goto LABEL_29;
        }
        uint64_t v35 = CDBLogHandle;
        id v12 = v60;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v76 = v17;
          _os_log_impl(&dword_1A8E81000, v35, OS_LOG_TYPE_DEFAULT, "Attachment cleanup: skipping removing file because it is archived and is too young: %@", buf, 0xCu);
        }
      }
      else
      {
        double v23 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          id v76 = v17;
          __int16 v77 = 2112;
          id v78 = v22;
          _os_log_impl(&dword_1A8E81000, v23, OS_LOG_TYPE_ERROR, "Error checking if %@ is a directory: %@", buf, 0x16u);
        }
        if (v19) {
          CFRelease(v19);
        }
      }
LABEL_36:
    }
    uint64_t v14 = [v12 countByEnumeratingWithState:&v71 objects:v79 count:16];
  }
  while (v14);

  id v4 = v54;
  unint64_t v5 = 0x1E4F28000;
  if ((v61 & 1) == 0)
  {
    uint64_t v44 = 0;
    goto LABEL_49;
  }
LABEL_42:
  uint64_t v45 = [*(id *)(v5 + 3256) defaultManager];
  id v65 = 0;
  int v46 = [v45 removeItemAtURL:v4 error:&v65];
  id v47 = v65;

  uint64_t v48 = CDBLogHandle;
  if (v46)
  {
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v76 = v4;
      long long v49 = "Attachment cleanup: removed empty directory %@";
      long long v50 = v48;
      os_log_type_t v51 = OS_LOG_TYPE_DEFAULT;
      uint32_t v52 = 12;
      goto LABEL_47;
    }
  }
  else if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412546;
    id v76 = v4;
    __int16 v77 = 2112;
    id v78 = v47;
    long long v49 = "Attachment cleanup: failed to remove empty store directory %@: %@";
    long long v50 = v48;
    os_log_type_t v51 = OS_LOG_TYPE_ERROR;
    uint32_t v52 = 22;
LABEL_47:
    _os_log_impl(&dword_1A8E81000, v50, v51, v49, buf, v52);
  }

  uint64_t v44 = 1;
  id v12 = v60;
LABEL_49:

LABEL_50:
  return v44;
}

uint64_t __CalDatabaseDeleteOrphanedAttachmentsInDirectory_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  CFURLRef v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    int v8 = 138412546;
    id v9 = v4;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "Attachment cleanup: Ignoring error for url %@: %@", (uint8_t *)&v8, 0x16u);
  }

  return 1;
}

CFTypeRef CalDatabaseCopyAttachmentFileInStoreWithLocalPath()
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  Recorduint64_t Store = _CalDatabaseGetRecordStore(DatabaseForRecord);
  CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v5 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  if (!v5) {
    return 0;
  }
  if (CFArrayGetCount(v5) < 1)
  {
    CFTypeRef v7 = 0;
  }
  else
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    CFTypeRef v7 = CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return v7;
}

BOOL CalAttachmentFileIsAutoArchived(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL Flag = _CalAttachmentFileGetFlag(a1, 2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalDatabaseCleanUpOrphanedLocalAttachments(os_unfair_lock_s *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = (const __CFArray *)CalDatabaseCopyOfAllStores(a1);
  if (v2)
  {
    CFArrayRef v3 = v2;
    id v4 = objc_opt_new();
    long long v50 = objc_opt_new();
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v5 = 0;
      CFURLRef v6 = (os_unfair_lock_s *)(v1 + 80);
      while (1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v5);
        uint64_t v8 = CalStoreCopyUUID((uint64_t)ValueAtIndex);
        if (!v8) {
          break;
        }
        id v9 = (void *)v8;
        [v50 addObject:v8];
        id v68 = 0;
        id v69 = 0;
        os_unfair_lock_lock(v6);
        _CalAttachmentFileGetAttachmentContainerURLsForStore((uint64_t)ValueAtIndex, v1, &v69, &v68);
        if (CDBLockingAssertionsEnabled) {
          os_unfair_lock_assert_owner(v6);
        }
        os_unfair_lock_unlock(v6);
        id v10 = v69;
        id v11 = v68;
        if (v11 && v10)
        {
          [v4 addObject:v11];
          CalDatabaseDeleteOrphanedAttachmentsInDirectory(v10, v11, (uint64_t)ValueAtIndex);
        }
        else
        {
          uint64_t v12 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            log = v12;
            uint64_t v13 = v1;
            uint64_t v14 = v4;
            CFArrayRef v15 = v3;
            Uint ID = CalStoreGetUID();
            uint64_t v17 = (void *)CalStoreCopyName((uint64_t)ValueAtIndex);
            *(_DWORD *)long long buf = 67109378;
            *(_DWORD *)long long v71 = UID;
            CFArrayRef v3 = v15;
            id v4 = v14;
            uint64_t v1 = v13;
            *(_WORD *)&v71[4] = 2112;
            *(void *)&v71[6] = v17;
            _os_log_impl(&dword_1A8E81000, log, OS_LOG_TYPE_ERROR, "Attachment cleanup: Unable to get URLs for store %d (%@). Skipping cleanup for it", buf, 0x12u);
          }
        }

        if (Count == ++v5) {
          goto LABEL_13;
        }
      }

      id v40 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        os_log_type_t v41 = v40;
        int v42 = CalStoreGetUID();
        uint32_t v43 = (void *)CalStoreCopyName((uint64_t)ValueAtIndex);
        *(_DWORD *)long long buf = 67109378;
        *(_DWORD *)long long v71 = v42;
        *(_WORD *)&v71[4] = 2112;
        *(void *)&v71[6] = v43;
        _os_log_impl(&dword_1A8E81000, v41, OS_LOG_TYPE_ERROR, "Attachment cleanup: Unable to get persistent ID for store %d (%@). Aborting cleanup.", buf, 0x12u);
      }
      long long v50 = 0;
      id v4 = 0;
    }
LABEL_13:
    CFRelease(v3);
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    obuint64_t j = v4;
    uint64_t v46 = [obj countByEnumeratingWithState:&v64 objects:v74 count:16];
    if (!v46) {
      goto LABEL_43;
    }
    uint64_t v45 = *(void *)v65;
    uint64_t v18 = *MEMORY[0x1E4F1C628];
    uint64_t v51 = *MEMORY[0x1E4F1C6E8];
    uint64_t v52 = *MEMORY[0x1E4F1C628];
LABEL_15:
    uint64_t v19 = 0;
    while (1)
    {
      if (*(void *)v65 != v45) {
        objc_enumerationMutation(obj);
      }
      uint64_t v48 = v19;
      uint64_t v20 = [MEMORY[0x1E4F57670] attachmentContainerWithBaseURL:*(void *)(*((void *)&v64 + 1) + 8 * v19)];
      id v21 = [MEMORY[0x1E4F28CB8] defaultManager];
      v73[0] = v18;
      v73[1] = v51;
      id v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v73 count:2];
      id v47 = (void *)v20;
      double v23 = [v21 enumeratorAtURL:v20 includingPropertiesForKeys:v22 options:1 errorHandler:&__block_literal_global_17];

      uint64_t v18 = v52;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      id v55 = v23;
      uint64_t v24 = [v55 countByEnumeratingWithState:&v60 objects:v72 count:16];
      if (v24) {
        break;
      }
LABEL_41:

      uint64_t v19 = v48 + 1;
      if (v48 + 1 == v46)
      {
        uint64_t v46 = [obj countByEnumeratingWithState:&v64 objects:v74 count:16];
        if (!v46)
        {
LABEL_43:

          return;
        }
        goto LABEL_15;
      }
    }
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v61;
LABEL_20:
    uint64_t v27 = 0;
    while (1)
    {
      if (*(void *)v61 != v26) {
        objc_enumerationMutation(v55);
      }
      uint64_t v28 = *(void **)(*((void *)&v60 + 1) + 8 * v27);
      id v58 = 0;
      id v59 = 0;
      char v29 = [v28 getResourceValue:&v59 forKey:v18 error:&v58];
      id v30 = v59;
      id v31 = v58;
      if ((v29 & 1) == 0)
      {
        id v38 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)long long v71 = v28;
          *(_WORD *)&v71[8] = 2112;
          *(void *)&v71[10] = v31;
          _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_ERROR, "Error checking if %@ is a directory: %@", buf, 0x16u);
        }
        goto LABEL_39;
      }
      if ([v30 BOOLValue]) {
        break;
      }
LABEL_39:

      if (v25 == ++v27)
      {
        uint64_t v25 = [v55 countByEnumeratingWithState:&v60 objects:v72 count:16];
        if (!v25) {
          goto LABEL_41;
        }
        goto LABEL_20;
      }
    }
    id v57 = 0;
    char v32 = [v28 getResourceValue:&v57 forKey:v51 error:0];
    id v33 = v57;
    if (v32)
    {
      if (([v50 containsObject:v33] & 1) == 0)
      {
        double v34 = [MEMORY[0x1E4F28CB8] defaultManager];
        id v56 = v31;
        int v35 = [v34 removeItemAtURL:v28 error:&v56];
        id v49 = v56;

        char v36 = CDBLogHandle;
        BOOL v37 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
        if (v35)
        {
          uint64_t v18 = v52;
          if (v37)
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)long long v71 = v28;
            _os_log_impl(&dword_1A8E81000, v36, OS_LOG_TYPE_ERROR, "Attachment cleanup: found and removed orphaned store directory %@", buf, 0xCu);
          }
          goto LABEL_37;
        }
        uint64_t v18 = v52;
        if (!v37)
        {
LABEL_37:
          id v31 = v49;
          goto LABEL_38;
        }
        *(_DWORD *)long long buf = 138412546;
        *(void *)long long v71 = v28;
        *(_WORD *)&v71[8] = 2112;
        *(void *)&v71[10] = v49;
        _os_log_impl(&dword_1A8E81000, v36, OS_LOG_TYPE_ERROR, "Attachment cleanup: failed to remove orphaned store directory %@: %@", buf, 0x16u);
        id v31 = v49;
LABEL_38:

        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v39 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        *(void *)long long v71 = v28;
        *(_WORD *)&v71[8] = 2112;
        *(void *)&v71[10] = v31;
        _os_log_impl(&dword_1A8E81000, v39, OS_LOG_TYPE_ERROR, "Error getting name of %@: %@", buf, 0x16u);
      }
    }
    uint64_t v18 = v52;
    goto LABEL_38;
  }
}

uint64_t __CalDatabaseCleanUpOrphanedLocalAttachments_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  CFURLRef v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    int v8 = 138412546;
    id v9 = v4;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "Attachment cleanup: Ignoring error for url %@: %@", (uint8_t *)&v8, 0x16u);
  }

  return 1;
}

CFMutableArrayRef _CalAttachmentFileCopyAttachments(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFArrayRef _CalAttachmentFileAddAttachment(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void *_CalAttachmentFileRemoveAttachment(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

CFMutableArrayRef CalAttachmentFileCopyAttachments(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalAttachmentFileCopyAttachments(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalAttachmentFileAddAttachment(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileAddAttachment(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalAttachmentFileRemoveAttachment(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileRemoveAttachment(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentFileHasValidParent(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v1 = _CalAttachmentFileCopyAttachments(a1);
  uint64_t v2 = [(__CFArray *)v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v7;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v1);
        }
        if (_CalAttachmentHasValidParent(*(void *)(*((void *)&v6 + 1) + 8 * i)))
        {
          uint64_t v2 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v2 = [(__CFArray *)v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v2;
}

void _CalAttachmentFileCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

uint64_t _CalAttachmentFileSaveAddedRecords(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalAttachmentFileGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t CalDatabaseCopyAttachmentFileInStoreWithURL(uint64_t a1, const __CFURL *a2)
{
  uint64_t v29 = 0;
  id v30 = &v29;
  uint64_t v31 = 0x2020000000;
  uint64_t v32 = 0;
  uint64_t v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  id v4 = v3 + 20;
  os_unfair_lock_lock(v3 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v3);
  uint64_t v6 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = RecordStore == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordGetID();
  RowidForRecordint ID = CPRecordStoreGetRowidForRecordID();
  __int16 v10 = CFURLGetString(a2);
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v6 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v12) {
      os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  uint64_t v23 = MEMORY[0x1E4F143A8];
  uint64_t v24 = 3221225472;
  uint64_t v25 = __CalDatabaseCopyAttachmentFileInStoreWithURL_block_invoke;
  uint64_t v26 = &unk_1E5D61F80;
  uint64_t v28 = RowidForRecordID;
  id v13 = v10;
  id v27 = v13;
  CFArrayRef v14 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();

  if (v14)
  {
    if (CFArrayGetCount(v14) >= 1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v14, 0);
      CFTypeRef v16 = CFRetain(ValueAtIndex);
      v30[3] = (uint64_t)v16;
    }
    CFRelease(v14);
  }
  if (!v30[3])
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __CalDatabaseCopyAttachmentFileInStoreWithURL_block_invoke_2;
    v19[3] = &unk_1E5D63008;
    id v20 = v13;
    id v21 = &v29;
    uint64_t v22 = RowidForRecordID;
    _CalDatabaseEnumerateAddedEntitiesOfType((uint64_t)v3, 25, v19);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  CFRelease(v3);
  uint64_t v17 = v30[3];

  _Block_object_dispose(&v29, 8);
  return v17;
}

void sub_1A8ED14A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseCopyAttachmentFileInStoreWithURL_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int64(*(sqlite3_stmt **)(a2 + 8), 1, *(void *)(a1 + 40));
  id v4 = *(sqlite3_stmt **)(a2 + 8);
  id v5 = (const char *)[*(id *)(a1 + 32) UTF8String];
  return sqlite3_bind_text(v4, 2, v5, -1, 0);
}

uint64_t __CalDatabaseCopyAttachmentFileInStoreWithURL_block_invoke_2(uint64_t a1, const void *a2, unsigned char *a3)
{
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  Storeint ID = CPRecordGetProperty();
  uint64_t v8 = StoreID;
  if (StoreID)
  {
    uint64_t v10 = StoreID;
    Storeint ID = [*(id *)(a1 + 32) isEqualToString:StoreID];
    uint64_t v8 = v10;
    if (StoreID)
    {
      Storeint ID = _CalAttachmentFileGetStoreID((uint64_t)a2);
      uint64_t v8 = v10;
      if (*(void *)(a1 + 48) == (int)StoreID)
      {
        Storeint ID = (uint64_t)CFRetain(a2);
        uint64_t v8 = v10;
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = StoreID;
        *a3 = 1;
      }
    }
  }
  return MEMORY[0x1F41817F8](StoreID, v8);
}

uint64_t _CalDatabaseGetAttachmentFileWithUUID(uint64_t a1, uint64_t a2)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  uint64_t v13 = 0;
  CFArrayRef v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  v12[6] = MEMORY[0x1E4F143A8];
  v12[7] = 3221225472;
  v12[8] = ___CalDatabaseGetAttachmentFileWithUUID_block_invoke;
  v12[9] = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  v12[10] = a2;
  CFArrayRef v7 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  CFArrayRef v8 = v7;
  if (v7)
  {
    if (CFArrayGetCount(v7) >= 1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v8, 0);
      v14[3] = (uint64_t)ValueAtIndex;
    }
    CFRelease(v8);
  }
  uint64_t v10 = v14[3];
  if (!v10)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = ___CalDatabaseGetAttachmentFileWithUUID_block_invoke_2;
    v12[3] = &unk_1E5D63030;
    v12[4] = &v13;
    v12[5] = a2;
    _CalDatabaseEnumerateAddedEntitiesOfType(a1, 25, v12);
    uint64_t v10 = v14[3];
  }
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1A8ED17B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

CFTypeRef CalDatabaseCopyAttachmentFileWithUUID(os_unfair_lock_s *a1, uint64_t a2)
{
  id v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AttachmentFileWithUUint ID = (const void *)_CalDatabaseGetAttachmentFileWithUUID((uint64_t)a1, a2);
  if (AttachmentFileWithUUID) {
    CFTypeRef v6 = CFRetain(AttachmentFileWithUUID);
  }
  else {
    CFTypeRef v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v6;
}

uint64_t CalDatabaseCopyAttachmentFileWithExternalIDInStore(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFTypeRef v6 = (void *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v7 = [v6 firstObject];

  return v7;
}

uint64_t __CalDatabaseCopyAttachmentFileWithExternalIDInStore_block_invoke(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(sqlite3_stmt **)(a2 + 8);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = *(void *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordGetID();
  RowidForRecordint ID = CPRecordStoreGetRowidForRecordID();
  sqlite3_bind_int64(v4, 1, RowidForRecordID);
  CFArrayRef v8 = *(sqlite3_stmt **)(a2 + 8);
  long long v9 = (const char *)[*(id *)(a1 + 48) UTF8String];
  return sqlite3_bind_text(v8, 2, v9, -1, 0);
}

uint64_t _CalDatabaseCopyOfAllAttachmentFilesInStore(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
}

uint64_t CalDatabaseCopyOfAllAttachmentFilesInStoreWithoutLocalFilesAndDownloadAttemptsBelow(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t __CalDatabaseCopyOfAllAttachmentFilesInStoreWithoutLocalFilesAndDownloadAttemptsBelow_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    BOOL v4 = *(sqlite3_stmt **)(a2 + 8);
    if (CDBLockingAssertionsEnabled) {
      BOOL v5 = *(void *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    CPRecordGetID();
    RowidForRecordint ID = CPRecordStoreGetRowidForRecordID();
    sqlite3_bind_int64(v4, 1, RowidForRecordID);
    int v8 = 2;
  }
  else
  {
    int v8 = 1;
  }
  long long v9 = *(sqlite3_stmt **)(a2 + 8);
  int v10 = *(_DWORD *)(a1 + 48);
  return sqlite3_bind_int(v9, v8, v10);
}

uint64_t _CalAttachmentFileGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef CalAttachmentFileCopyLocalRelativePath(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Recordint ID = (const void *)_CalColorGetRecordID(a1);
  if (RecordID) {
    CFTypeRef v4 = CFRetain(RecordID);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentFileSetLocalRelativePath(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetLocalRelativePath(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentFileCopyURLForPendingFileCopy(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  BOOL v2 = (void *)CPRecordCopyProperty();
  uint64_t v3 = [v2 url];

  return v3;
}

void _CalAttachmentFileSetURLForPendingFileCopy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = (id)[objc_alloc(MEMORY[0x1E4F28FF8]) initWithURL:a2 readonly:1];
    if (!a1) {
      goto LABEL_9;
    }
  }
  else
  {
    id v4 = 0;
    if (!a1) {
      goto LABEL_9;
    }
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
LABEL_9:
  CPRecordSetProperty();
}

uint64_t _CalAttachmentFileSetExternalModTag(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalAttachmentFileSetExternalModTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetExternalModTag(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAttachmentFileCopyExternalModTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Data = (const void *)_CalColorGetData(a1);
  if (Data) {
    CFTypeRef v4 = CFRetain(Data);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalAttachmentFileCopyUUID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Descriptiouint64_t n = (const void *)_CalCalendarItemGetDescription(a1);
  if (Description) {
    CFTypeRef v4 = CFRetain(Description);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalAttachmentFileSetFilename(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

CFStringRef _CalAttachmentFileCopyFilename(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef result = (const __CFString *)CPRecordCopyProperty();
  if (!result)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4) {
            os_unfair_lock_assert_owner(v4 + 20);
          }
        }
      }
    }
    CFStringRef result = (const __CFString *)CPRecordGetProperty();
    if (result)
    {
      CFStringRef result = (const __CFString *)CFURLCreateWithString(0, result, 0);
      if (result)
      {
        CFStringRef v5 = result;
        CFStringRef PathComponent = CFURLCopyLastPathComponent((CFURLRef)result);
        CFRelease(v5);
        return PathComponent;
      }
    }
  }
  return result;
}

CFStringRef CalAttachmentFileCopyFilename(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFStringRef v3 = _CalAttachmentFileCopyFilename(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalAttachmentFileSetFilename(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetFilename(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalAttachmentFileIsBinary(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL Flag = _CalAttachmentFileGetFlag(a1, 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalAttachmentFileSetAutoArchived(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalAttachmentFileGetFlag(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return (CPRecordGetProperty() & a2) != 0;
}

void CalAttachmentFileSetFormat(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorCode(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFStringRef CalAttachmentFileCopyURL(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFStringRef v3 = _CalAttachmentFileCopyURL(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFStringRef _CalAttachmentFileCopyURL(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef result = (const __CFString *)CPRecordGetProperty();
  if (result)
  {
    return (const __CFString *)CFURLCreateWithString(0, result, 0);
  }
  return result;
}

void CalAttachmentFileSetFileSize(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetFileSize(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentFileSetFileSize(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalAttachmentFileSetDownloadTries(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentFileGetDownloadTries(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  Integeruint64_t Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalAttachmentFileSetDownloadStart(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAttachmentFileCopyDownloadStart(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (const void *)CPRecordGetProperty();
  if (Property) {
    CFTypeRef v5 = CFRetain(Property);
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFTypeRef CalAttachmentFileCopyStore(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Store = (const void *)_CalAttachmentFileGetStore(a1);
  if (Store) {
    CFTypeRef v4 = CFRetain(Store);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t __CalDatabaseCopyAttachmentFileInStoreWithLocalPath_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 40));
  CFTypeRef v4 = *(sqlite3_stmt **)(a2 + 8);
  CFTypeRef v5 = (const char *)[*(id *)(a1 + 32) UTF8String];
  return sqlite3_bind_text(v4, 2, v5, -1, 0);
}

uint64_t _CalCalendarLoad(uint64_t a1)
{
  uint64_t result = CPRecordGetPropertyDescriptor();
  if (result)
  {
    if (!*(void *)(result + 32)) {
      _CalCalendarLoad_cold_1();
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    uint64_t Store = CPRecordGetStore();
    _CalGetCalendarWithUID(Store);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFTypeRef v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5) {
            os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
    return CPRecordInitializeProperty();
  }
  return result;
}

uint64_t _CalCalendarLoadOldFlags(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordInitializeProperty();
}

void _CalCalendarInvalidateSubentities(int a1, uint64_t a2, void *a3)
{
  if ((a1 & 0x80000000) == 0)
  {
    uint64_t Store = CPRecordGetStore();
    int StoreId = _CalCalendarGetStoreId(a2);
    if (!*(unsigned char *)(CPRecordStoreGetContext() + 382))
    {
      _CalInvalidateCalendarItemsForCalendarId(Store);
      _CalInvalidateShareesWithOwnerID(Store);
      _CalInvalidateNotificationsWithCalendarID(Store);
    }
    if (a1 == 1 && StoreId == 1)
    {
      _CalCalendarInsertNewDefault(a3);
    }
  }
}

void _CalCalendarPrepareForSave(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (!CPRecordGetProperty())
  {
    CFTypeRef Store = _CalCalendarGetStore(a1);
    if (Store && _CalStoreIsFacebook((uint64_t)Store))
    {
      EKGetFacebookCalendarColor();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      CPRecordSetProperty();
    }
    else
    {
      uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
      AssignableColor = _CalCalendarCopyNextAssignableColor(DatabaseForRecord);
      if (AssignableColor)
      {
        long long v9 = AssignableColor;
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              int v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10) {
                os_unfair_lock_assert_owner(v10 + 20);
              }
            }
          }
        }
        CPRecordSetProperty();
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              BOOL v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11) {
                os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
        }
        CPRecordSetProperty();
        CFRelease(v9);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a2)
      {
        if (*(void *)(*(void *)a2 + 104))
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
  }
  int v13 = CPSqliteConnectionIntegerForProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  if (v13 == CPRecordGetProperty())
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15) {
            os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    int Property = CPRecordGetProperty();
    if ((Property | 5) != Property)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17) {
              os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
      CPRecordSetProperty();
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  Originalint Property = CPRecordGetOriginalProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  if (OriginalProperty != CPRecordGetProperty()) {
    _CalRecordSetPropertyIfDifferent(a1, 45, (const __CFString *)OriginalProperty);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  uint64_t v22 = CPRecordGetProperty();
  if (v22) {
    CalRelationOwnerWillSave(v22);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23) {
          os_unfair_lock_assert_owner(v23 + 20);
        }
      }
    }
  }
  uint64_t v24 = CPRecordGetProperty();
  if (v24) {
    CalRelationOwnerWillSave(v24);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25) {
          os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
  }
  uint64_t v26 = CPRecordGetProperty();
  if (v26) {
    CalRelationOwnerWillSave(v26);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  uint64_t v28 = CPRecordGetProperty();
  if (v28) {
    CalRelationOwnerWillSave(v28);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  uint64_t v30 = CPRecordGetProperty();
  if (v30) {
    CalRelationOwnerWillSave(v30);
  }
  _CalCalendarValidateIdentityForProperties(a1, a2);
  _CalCalendarValidateIdentityForProperties(a1, a2);
  _CalCalendarClearDirtyAttributes(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31) {
          os_unfair_lock_assert_owner(v31 + 20);
        }
      }
    }
  }
  if (CPRecordIsPendingAdd())
  {
    int ID = CPRecordGetID();
    id v33 = _CalCalendarGetTitle(a1);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          double v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v34) {
            os_unfair_lock_assert_owner(v34 + 20);
          }
        }
      }
    }
    id v35 = (id)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          char v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v36) {
            os_unfair_lock_assert_owner(v36 + 20);
          }
        }
      }
    }
    id v37 = (id)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v38) {
            os_unfair_lock_assert_owner(v38 + 20);
          }
        }
      }
    }
    id v39 = (id)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v40) {
            os_unfair_lock_assert_owner(v40 + 20);
          }
        }
      }
    }
    id v41 = (id)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v42) {
            os_unfair_lock_assert_owner(v42 + 20);
          }
        }
      }
    }
    id v43 = (id)CPRecordGetProperty();
    uint64_t v44 = CalGetDatabaseForRecord();
    if (v44)
    {
      uint64_t v45 = v44;
      uint64_t v46 = (void *)_CalDatabaseCopyClientName(v44);
      id v47 = (__CFString *)_CalDatabaseCopyClientIdentifier(v45);
    }
    else
    {
      uint64_t v46 = 0;
      id v47 = @"Database null during saving?";
    }
    uint64_t v48 = (id)CDBLogHandle;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      int v49 = 138545410;
      long long v50 = v46;
      __int16 v51 = 2114;
      uint64_t v52 = v47;
      __int16 v53 = 1024;
      int v54 = ID;
      __int16 v55 = 2112;
      id v56 = v33;
      __int16 v57 = 2112;
      id v58 = v35;
      __int16 v59 = 2114;
      id v60 = v37;
      __int16 v61 = 2114;
      id v62 = v39;
      __int16 v63 = 2114;
      id v64 = v41;
      __int16 v65 = 2114;
      id v66 = v43;
      _os_log_impl(&dword_1A8E81000, v48, OS_LOG_TYPE_DEFAULT, "Client %{public}@ (%{public}@) is adding a calendar with properties: [rowid=%i, title=%@, external_id=%@, external_mod_tag=%{public}@, external_id_tag=%{public}@, UUID=%{public}@, sync_token=%{public}@]", (uint8_t *)&v49, 0x58u);
    }
  }
}

uint64_t _CalCalendarPropertyChanged(uint64_t result, unsigned int a2)
{
  if (a2 > 0x3F) {
    return result;
  }
  uint64_t v2 = result;
  if (((1 << a2) & 0xFFF00E01D87FD0EFLL) != 0)
  {
    uint64_t result = _CalRecordHasValueChangedForProperty(result, a2);
    if (!result) {
      return result;
    }
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    _CalDatabaseSetChangeFlags(DatabaseForRecord, 2);
    if (!v2) {
      goto LABEL_9;
    }
  }
  else
  {
    if (((1 << a2) & 0x118000000000) == 0) {
      return result;
    }
    uint64_t result = _CalRecordHasValueChangedForProperty(result, a2);
    if (!result) {
      return result;
    }
    if (!v2) {
      goto LABEL_9;
    }
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
LABEL_9:
  return CPRecordSetProperty();
}

uint64_t _CalCalendarGetBirthdayCalendarId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a1)
      {
        if (*(void *)(*(void *)a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  return CPSqliteConnectionIntegerForProperty();
}

uint64_t CalCalendarInsertBirthdayCalendar(os_unfair_lock_s *a1)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      int v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = -1;
  if (v9)
  {
    uint64_t v10 = v9;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __CalCalendarInsertBirthdayCalendar_block_invoke;
    v18[3] = &unk_1E5D60E40;
    v18[4] = &v19;
    v18[5] = v9;
    _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v18);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v10)
      {
        if (*(void *)(*(void *)v10 + 104))
        {
          BOOL v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  uint64_t os_unfair_lock_opaque = a1[42]._os_unfair_lock_opaque;
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  uint64_t v13 = *((unsigned int *)v20 + 6);
  if ((v13 & 0x80000000) == 0)
  {
    CFArrayRef v14 = (void *)CalRecordIDCreate(1, *((_DWORD *)v20 + 6));
    v23[0] = v14;
    uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:1];

    uint64_t v16 = +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:a1];
    [v16 addChangeset:v15 deletes:MEMORY[0x1E4F1CBF0] clientID:os_unfair_lock_opaque changeType:0];
    _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
    CalDatabaseReset(a1);

    uint64_t v13 = *((unsigned int *)v20 + 6);
  }
  _Block_object_dispose(&v19, 8);
  return v13;
}

void sub_1A8ED4000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalCalendarInsertBirthdayCalendar_block_invoke(uint64_t a1)
{
  uint64_t result = _CalCalendarInsertBirthdayCalendar(*(void **)(a1 + 40), 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _CalCalendarInsertBirthdayCalendar(void *a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(void *)(*a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v5 = CPSqliteConnectionIntegerForProperty();
  if ((int)v5 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = v5;
  CFUUIDRef v7 = CFUUIDCreate(0);
  CFStringRef v8 = CFUUIDCreateString(0, v7);
  CFRelease(v7);
  uint64_t v9 = @"Birthdays";
  if (a2 == 1) {
    uint64_t v9 = @"Facebook Birthdays";
  }
  uint64_t v10 = 5;
  if (a2 == 1) {
    uint64_t v10 = 519;
  }
  CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"INSERT INTO Calendar (store_id, title, flags, supported_entity_types, UUID, color, self_identity_id, owner_identity_id) VALUES (%d, '%@', %d, %ld, '%@', '%@', -1, -1);",
          v6,
          v9,
          v10,
          4,
          v8,
          @"#8295AF");
  if (v11)
  {
    CFStringRef v12 = v11;
    CalPerformSQLWithConnection(a1, (uint64_t)v11);
    CFRelease(v12);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a1)
        {
          if (*(void *)(*a1 + 104))
          {
            uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13) {
              os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
    }
    uint64_t Insert = CPSqliteConnectionRowidOfLastInsert();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a1)
        {
          if (*(void *)(*a1 + 104))
          {
            uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15) {
              os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
  }
  else
  {
    uint64_t Insert = 0xFFFFFFFFLL;
  }
  CFRelease(v8);
  return Insert;
}

void CalDatabaseInsertSuggestionsCalendar(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseInsertSuggestionsCalendar_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v9;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v11);
  if (v9)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
}

void __CalDatabaseInsertSuggestionsCalendar_block_invoke(uint64_t a1)
{
}

void _CalCalendarInsertSuggestionsCalendar(void *a1, char a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(void *)(*a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v5 = CPSqliteConnectionIntegerForProperty();
  if (a2)
  {
    BOOL v6 = 0;
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a1)
        {
          if (*(void *)(*a1 + 104))
          {
            BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
    }
    BOOL v6 = CPSqliteConnectionIntegerForPropertyWithDefaultValue() != -1;
  }
  if ((int)v5 >= 1 && !v6)
  {
    CFUUIDRef v8 = CFUUIDCreate(0);
    CFStringRef v9 = CFUUIDCreateString(0, v8);
    CFRelease(v8);
    CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"INSERT INTO Calendar (store_id, title, flags, supported_entity_types, UUID, color, symbolic_color_name, self_identity_id, owner_identity_id) VALUES (%d, '%@', %d, %ld, '%@', '%@', '%@', -1, -1);",
            v5,
            @"Found in Mail",
            262149,
            4,
            v9,
            @"#8295AF",
            *MEMORY[0x1E4FB82F8]);
    if (v10)
    {
      CFStringRef v11 = v10;
      CalPerformSQLWithConnection(a1, (uint64_t)v10);
      CFRelease(v11);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a1)
          {
            if (*(void *)(*a1 + 104))
            {
              CFStringRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v12) {
                os_unfair_lock_assert_owner(v12 + 20);
              }
            }
          }
        }
      }
      CPSqliteConnectionRowidOfLastInsert();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a1)
          {
            if (*(void *)(*a1 + 104))
            {
              uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v13) {
                os_unfair_lock_assert_owner(v13 + 20);
              }
            }
          }
        }
      }
      CPSqliteConnectionSetIntegerForProperty();
    }
    CFRelease(v9);
  }
}

void CalDatabaseRemoveSuggestionsCalendar(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      CFUUIDRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseRemoveSuggestionsCalendar_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v9;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v11);
  if (v9)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          CFStringRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  CalDatabaseSave((uint64_t)a1);
  _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
}

uint64_t __CalDatabaseRemoveSuggestionsCalendar_block_invoke(uint64_t a1)
{
  return _CalCalendarRemoveAllPossibleSuggestionsCalendars(*(void **)(a1 + 32));
}

uint64_t _CalCalendarRemoveAllPossibleSuggestionsCalendars(void *a1)
{
  CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"DELETE FROM Notification WHERE calendar_id IN (SELECT ROWID FROM Calendar WHERE (flags & %d));",
         0x40000);
  if (v2)
  {
    CFStringRef v3 = v2;
    CalPerformSQLWithConnection(a1, (uint64_t)v2);
    CFRelease(v3);
  }
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"DELETE FROM NotificationChanges WHERE calendar_id IN (SELECT ROWID FROM Calendar WHERE (flags & %d));",
         0x40000);
  if (v4)
  {
    CFStringRef v5 = v4;
    CalPerformSQLWithConnection(a1, (uint64_t)v4);
    CFRelease(v5);
  }
  CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"DELETE FROM Calendar WHERE ROWID IN (SELECT ROWID FROM Calendar WHERE (flags & %d));",
         0x40000);
  if (v6)
  {
    CFStringRef v7 = v6;
    CalPerformSQLWithConnection(a1, (uint64_t)v6);
    CFRelease(v7);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(void *)(*a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  return CPSqliteConnectionRemoveProperty();
}

void CalDatabaseInsertNaturalLanguageSuggestionsCalendar(os_unfair_lock_s *a1)
{
  CFStringRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      CFUUIDRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseInsertNaturalLanguageSuggestionsCalendar_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v9;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v11);
  if (v9)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          CFStringRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
}

void __CalDatabaseInsertNaturalLanguageSuggestionsCalendar_block_invoke(uint64_t a1)
{
}

void _CalCalendarInsertNaturalLanguageSuggestionsCalendar(void *a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(void *)(*a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v3 = CPSqliteConnectionIntegerForProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(void *)(*a1 + 104))
        {
          BOOL v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4) {
            os_unfair_lock_assert_owner(v4 + 20);
          }
        }
      }
    }
  }
  int v5 = CPSqliteConnectionIntegerForPropertyWithDefaultValue();
  if ((int)v3 >= 1 && v5 == -1)
  {
    CFUUIDRef v6 = CFUUIDCreate(0);
    CFStringRef v7 = CFUUIDCreateString(0, v6);
    CFRelease(v6);
    CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"INSERT INTO Calendar (store_id, title, flags, supported_entity_types, UUID, color, symbolic_color_name, self_identity_id, owner_identity_id) VALUES (%d, '%@', %d, %ld, '%@', '%@', '%@', -1, -1);",
           v3,
           @"Found in Natural Language",
           524295,
           4,
           v7,
           @"#8295AF",
           *MEMORY[0x1E4FB82F8]);
    if (v8)
    {
      CFStringRef v9 = v8;
      CalPerformSQLWithConnection(a1, (uint64_t)v8);
      CFRelease(v9);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a1)
          {
            if (*(void *)(*a1 + 104))
            {
              CFStringRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10) {
                os_unfair_lock_assert_owner(v10 + 20);
              }
            }
          }
        }
      }
      CPSqliteConnectionRowidOfLastInsert();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a1)
          {
            if (*(void *)(*a1 + 104))
            {
              CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11) {
                os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
        }
      }
      CPSqliteConnectionSetIntegerForProperty();
    }
    CFRelease(v7);
  }
}

void CalDatabaseRemoveNaturalLanguageSuggestionsCalendar(os_unfair_lock_s *a1)
{
  CFStringRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseRemoveNaturalLanguageSuggestionsCalendar_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v9;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v11);
  if (v9)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          CFStringRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
}

uint64_t __CalDatabaseRemoveNaturalLanguageSuggestionsCalendar_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"DELETE FROM Notification WHERE calendar_id IN (SELECT ROWID FROM Calendar WHERE (flags & %d));",
         0x80000);
  if (v2)
  {
    CFStringRef v3 = v2;
    CalPerformSQLWithConnection(v1, (uint64_t)v2);
    CFRelease(v3);
  }
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"DELETE FROM NotificationChanges WHERE calendar_id IN (SELECT ROWID FROM Calendar WHERE (flags & %d));",
         0x80000);
  if (v4)
  {
    CFStringRef v5 = v4;
    CalPerformSQLWithConnection(v1, (uint64_t)v4);
    CFRelease(v5);
  }
  CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"DELETE FROM Calendar WHERE ROWID IN (SELECT ROWID FROM Calendar WHERE (flags & %d));",
         0x80000);
  if (v6)
  {
    CFStringRef v7 = v6;
    CalPerformSQLWithConnection(v1, (uint64_t)v6);
    CFRelease(v7);
  }
  if (v1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v1)
      {
        if (*(void *)(*v1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  return CPSqliteConnectionRemoveProperty();
}

const void *CalDatabaseCopyBirthdayCalendar(os_unfair_lock_s *a1, int a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  uint64_t v9 = Database;
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = Database == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  uint64_t v12 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v12)
  {
    uint64_t v13 = v12;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v12)
      {
        if (*(void *)(*(void *)v12 + 104))
        {
          CFArrayRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    int v15 = CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v13)
      {
        if (*(void *)(*(void *)v13 + 104))
        {
          uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16) {
            os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    int v15 = -1;
  }
  uint64_t v17 = _CalDatabaseGetRecordStore((uint64_t)a1);
  CalendarWithUint ID = (const void *)_CalGetCalendarWithUID(v17);
  uint64_t v19 = CalendarWithUID;
  if (!CalendarWithUID) {
    goto LABEL_76;
  }
  CFRetain(CalendarWithUID);
  if (a2) {
    goto LABEL_76;
  }
  CFTypeRef Store = _CalCalendarGetStore((uint64_t)v19);
  if (!Store)
  {
    uint64_t v27 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_44;
    }
    LOWORD(v41) = 0;
    uint64_t v24 = "Birthday calendar is invalid because it does not have a store";
LABEL_42:
    uint64_t v25 = v27;
    uint32_t v26 = 2;
    goto LABEL_43;
  }
  if (_CalStoreGetType((uint64_t)Store) != 5)
  {
    uint64_t v27 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      goto LABEL_44;
    }
    LOWORD(v41) = 0;
    uint64_t v24 = "Birthday calendar is invalid because its store is not the native store";
    goto LABEL_42;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v21) {
        os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  int Property = CPRecordGetProperty();
  if ((Property & 0xFFFEFFFF) != 5)
  {
    uint64_t v23 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v41 = 67109120;
      int v42 = Property;
      uint64_t v24 = "Birthday calendar is invalid because its flags are set incorrectly (%i)";
      uint64_t v25 = v23;
      uint32_t v26 = 8;
LABEL_43:
      _os_log_impl(&dword_1A8E81000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&v41, v26);
    }
LABEL_44:
    uint64_t v28 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v41 = 67109120;
      int v42 = v15;
      _os_log_impl(&dword_1A8E81000, v28, OS_LOG_TYPE_ERROR, "Birthday calendar is not a birthday calendar. Deleting calendar with UID %i", (uint8_t *)&v41, 8u);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (v9)
      {
        if (*(void *)(v9 + 104))
        {
          uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v29) {
            os_unfair_lock_assert_owner(v29 + 20);
          }
        }
      }
    }
    uint64_t v30 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (v30)
    {
      uint64_t v31 = v30;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v30)
        {
          if (*(void *)(*(void *)v30 + 104))
          {
            uint64_t v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v32) {
              os_unfair_lock_assert_owner(v32 + 20);
            }
          }
        }
      }
      uint64_t v33 = CPSqliteConnectionStatementForSQL();
      if (v33)
      {
        double v34 = (uint64_t **)v33;
        sqlite3_bind_int(*(sqlite3_stmt **)(v33 + 8), 1, v15);
        _CalDatabasePerformStatementWithWriteLock((uint64_t)a1, (uint64_t)v34);
        if (CDBLockingAssertionsEnabled)
        {
          if (*v34)
          {
            uint64_t v35 = **v34;
            if (v35)
            {
              if (*(void *)(v35 + 104))
              {
                char v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v36) {
                  os_unfair_lock_assert_owner(v36 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      else
      {
        id v38 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v41) = 0;
          _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_ERROR, "Failed to create statement", (uint8_t *)&v41, 2u);
        }
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v31)
        {
          if (*(void *)(*(void *)v31 + 104))
          {
            id v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v39) {
              os_unfair_lock_assert_owner(v39 + 20);
            }
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
    else
    {
      id v37 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v41) = 0;
        _os_log_impl(&dword_1A8E81000, v37, OS_LOG_TYPE_ERROR, "Failed to create write connection", (uint8_t *)&v41, 2u);
      }
    }
    _CalDatabaseNoteUntrackedChange((uint64_t)a1);
    CFRelease(v19);
    uint64_t v19 = 0;
  }
LABEL_76:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v19;
}

BOOL CalCalendarIsBirthdayCalendar()
{
  uint64_t DatabaseForRecord = (os_unfair_lock_s *)CalGetDatabaseForRecord();
  uint64_t v1 = DatabaseForRecord + 20;
  os_unfair_lock_lock(DatabaseForRecord + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)DatabaseForRecord);
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = Database == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  uint64_t v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v8)
  {
    uint64_t v9 = v8;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v8)
      {
        if (*(void *)(*(void *)v8 + 104))
        {
          BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    int v11 = CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    BOOL v13 = CPRecordGetID() == v11;
  }
  else
  {
    BOOL v13 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v1);
  }
  os_unfair_lock_unlock(v1);
  return v13;
}

uint64_t CalCalendarGetBirthdayCalendarVersion(os_unfair_lock_s *a1)
{
  CFStringRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v9)
  {
    uint64_t v10 = v9;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    uint64_t v12 = CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v10)
      {
        if (*(void *)(*(void *)v10 + 104))
        {
          BOOL v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13) {
            os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v12;
}

void CalCalendarSetBirthdayCalendarVersion(os_unfair_lock_s *a1)
{
  CFStringRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (v9)
  {
    uint64_t v10 = v9;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v10)
      {
        if (*(void *)(*(void *)v10 + 104))
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

BOOL CalCalendarIsFacebookBirthdayCalendar()
{
  uint64_t DatabaseForRecord = (os_unfair_lock_s *)CalGetDatabaseForRecord();
  uint64_t v1 = DatabaseForRecord + 20;
  os_unfair_lock_lock(DatabaseForRecord + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)DatabaseForRecord);
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = Database == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (*(void *)(Database + 104))
    {
      BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  uint64_t v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v8)
  {
    uint64_t v9 = v8;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v8)
      {
        if (*(void *)(*(void *)v8 + 104))
        {
          uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    int v11 = CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    BOOL v13 = CPRecordGetID() == v11;
  }
  else
  {
    BOOL v13 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v1);
  }
  os_unfair_lock_unlock(v1);
  return v13;
}

CFTypeRef CalDatabaseCopyStoreForBirthdayCalendar(os_unfair_lock_s *a1, int a2)
{
  CFTypeRef result = CalDatabaseCopyBirthdayCalendar(a1, a2);
  if (result)
  {
    BOOL v3 = result;
    CFTypeRef v4 = CalCalendarCopyStore((uint64_t)result);
    CFRelease(v3);
    return v4;
  }
  return result;
}

void _CalCalendarInsertNewDefault(void *a1)
{
  CFUUIDRef v2 = CFUUIDCreate(0);
  CFStringRef v3 = CFUUIDCreateString(0, v2);
  CFRelease(v2);
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"INSERT INTO Calendar (ROWID, store_id, title, flags, UUID, self_identity_id, owner_identity_id) VALUES (1, 1, 'Default', %u, '%@', -1, -1);",
         2,
         v3);
  if (v4)
  {
    CFStringRef v5 = v4;
    CalPerformSQLWithConnection(a1, (uint64_t)v4);
    CFRelease(v5);
  }
  CFRelease(v3);
}

void CalCalendarInsertInitialLocalCalendar(os_unfair_lock_s *a1)
{
  CFUUIDRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFStringRef AssignableColor = (const __CFString *)_CalCalendarCopyNextAssignableColor((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  if (AssignableColor)
  {
    CalendarForEntityint Type = (void *)CalDatabaseCreateCalendarForEntityType(a1, 2);
    CFStringRef v5 = CalDatabaseCopyLocalStore((uint64_t)a1);
    CalStoreAddCalendar((uint64_t)v5, CalendarForEntityType);
    CFRelease(v5);
    CalCalendarSetTitle((uint64_t)CalendarForEntityType);
    CalCalendarSetColorStringInternal((uint64_t)CalendarForEntityType, AssignableColor);
    CFRelease(AssignableColor);
  }
}

const void *_CalCalendarCopyNextAssignableColor(uint64_t a1)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFArrayRef v3 = (const __CFArray *)EKGetDefaultCalendarColors();
  MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, v3);
  if (a1)
  {
    RecordCFTypeRef Store = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v6 = RecordStore == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    CFArrayRef v8 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClass();
    if (v8)
    {
      CFArrayRef v9 = v8;
      CFIndex Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        CFIndex v11 = Count;
        for (CFIndex i = 0; i != v11; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
          _UpdateColorCountsWithCalendar((uint64_t)ValueAtIndex, Mutable);
        }
      }
      CFRelease(v9);
    }
    uint64_t v14 = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v15 = v14 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15)
    {
      uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16) {
        os_unfair_lock_assert_owner(v16 + 20);
      }
    }
    CFArrayRef v17 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
    if (v17)
    {
      CFArrayRef v18 = v17;
      CFIndex v19 = CFArrayGetCount(v17);
      if (v19 >= 1)
      {
        CFIndex v20 = v19;
        for (CFIndex j = 0; j != v20; ++j)
        {
          int v22 = CFArrayGetValueAtIndex(v18, j);
          if (_CalEntityGetType(v22) == 1) {
            _UpdateColorCountsWithCalendar((uint64_t)v22, Mutable);
          }
        }
      }
      CFRelease(v18);
    }
  }
  v25.length = CFArrayGetCount(MutableCopy);
  v25.id location = 0;
  CFArraySortValues(MutableCopy, v25, (CFComparatorFunction)_CompareColorFrequencies, Mutable);
  CFRelease(Mutable);
  if (!MutableCopy) {
    return 0;
  }
  if (CFArrayGetCount(MutableCopy) < 1)
  {
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = CFArrayGetValueAtIndex(MutableCopy, 0);
    CFRetain(v23);
    CFArrayRemoveValueAtIndex(MutableCopy, 0);
    CFArrayAppendValue(MutableCopy, v23);
  }
  CFRelease(MutableCopy);
  return v23;
}

const void *CalDatabaseCreateCalendarForEntityType(os_unfair_lock_s *a1, int a2)
{
  CFStringRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CalendarForEntityint Type = _CalDatabaseCreateCalendarForEntityType((uint64_t)a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return CalendarForEntityType;
}

void CalCalendarSetTitle(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetColorStringForDisplay(uint64_t a1, const __CFString *a2)
{
}

uint64_t _CalDatabaseCreateCalendarInStoreImmediately(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t ID = CPRecordGetID();
  CFUUIDRef v5 = CFUUIDCreate(0);
  CFStringRef v6 = CFUUIDCreateString(0, v5);
  CFRelease(v5);
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"INSERT INTO Calendar (store_id, title, UUID, self_identity_id, owner_identity_id) VALUES (%d, 'Default', '%@', -1, -1);",
         ID,
         v6);
  if (v7)
  {
    CFStringRef v8 = v7;
    CalPerformSQLWithConnection(a3, (uint64_t)v7);
    if (a3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a3)
        {
          if (*(void *)(*a3 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    uint64_t Insert = CPSqliteConnectionRowidOfLastInsert();
    CFRelease(v8);
  }
  else
  {
    uint64_t Insert = 0xFFFFFFFFLL;
  }
  CFRelease(v6);
  return Insert;
}

void CalCalendarInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalCalendarClass, (const char **)&kCalCalendarIndexes, (const char **)&kCalCalendarChangesIndexes);
  _CalCalendarInsertNewDefault(a2);
  if (*(unsigned char *)(CPRecordStoreGetContext() + 378))
  {
    CalPerformSQLWithConnection(a2, @"DELETE FROM Calendar WHERE ROWuint64_t ID = 1");
  }
  else
  {
    _CalCalendarInsertInitialLocalCalendar(a2, 4);
    _CalCalendarInsertInitialLocalCalendar(a2, 8);
    _CalCalendarInsertBirthdayCalendar(a2, 0);
    _CalCalendarInsertBirthdayCalendar(a2, 1);
    _CalCalendarInsertSuggestionsCalendar(a2, 0);
    _CalCalendarInsertNaturalLanguageSuggestionsCalendar(a2);
  }
  CalMigrationCreateTriggers(a2, (const char **)&kCalCalendarClass, (const char **)&kCalCalendarTriggers);
}

void _CalCalendarInsertInitialLocalCalendar(void *a1, uint64_t a2)
{
  CFUUIDRef v4 = CFUUIDCreate(0);
  CFStringRef v5 = CFUUIDCreateString(0, v4);
  CFRelease(v4);
  CFStringRef AssignableColor = _CalCalendarCopyNextAssignableColor(0);
  if (AssignableColor)
  {
    CFStringRef v7 = AssignableColor;
    CFStringRef v8 = @"DEFAULT_TASK_CALENDAR_NAME";
    if (a2 == 4) {
      CFStringRef v8 = @"DEFAULT_CALENDAR_NAME";
    }
    CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"INSERT INTO Calendar (store_id, title, flags, supported_entity_types, UUID, color, color_is_display, self_identity_id, owner_identity_id) VALUES (1, '%@', 0, %d, '%@', '%@', 1, -1, -1);",
           v8,
           a2,
           v5,
           AssignableColor);
    CFRelease(v7);
    if (v9)
    {
      CalPerformSQLWithConnection(a1, (uint64_t)v9);
      CFRelease(v9);
    }
  }
  CFRelease(v5);
}

void CalCalendarMigrateTables(uint64_t a1, void *a2, unsigned int a3)
{
  CFUUIDRef v4 = a2;
  if (a3 - 14008 <= 0x7CC) {
    CalPerformSQLWithConnection(a2, @"INSERT INTO Error (calendar_owner_id, error_code, user_info) SELECT ROWID, last_sync_error, last_sync_error_data FROM Calendar WHERE last_sync_error != 0");
  }
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = __CalCalendarMigrateTables_block_invoke;
  v43[3] = &__block_descriptor_44_e42__v24__0____CFString__8____CFDictionary__16l;
  unsigned int v44 = a3;
  v43[4] = v4;
  CFStringRef v5 = (void *)MEMORY[0x1AD0E9DC0](v43);
  if ((int)a3 < 9013)
  {
    _CalCalendarRemoveAllPossibleSuggestionsCalendars(v4);
    CalMigrateTableFull2(v4, (const char **)&kCalCalendarClass, 0, (const char **)&kCalCalendarUpgradeInfo, v5, (const char **)&kCalCalendarChangesUpgradeInfo, &__block_literal_global_10, 0, (const char **)&kCalCalendarIndexes, (const char **)&kCalCalendarChangesIndexes, (const char **)&kCalCalendarTriggers, a3);
    int v41 = v5;
    int v42 = v4;
    int v40 = a3;
    if ((int)a3 > 31)
    {
      if (a3 > 0x3D)
      {
        if (a3 > 0x41) {
          goto LABEL_61;
        }
        goto LABEL_55;
      }
    }
    else
    {
      _CalCalendarInsertBirthdayCalendar(v4, 0);
    }
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v4)
        {
          if (*(void *)(*v4 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    uint64_t v7 = CPSqliteConnectionIntegerForProperty();
    if ((int)v7 >= 1)
    {
      CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"UPDATE Calendar SET supported_entity_types = %ld, color = '%@' WHERE ROWID = %d;",
             4,
             @"#8295AF",
             v7);
      if (v8)
      {
        CFStringRef v9 = v8;
        CalPerformSQLWithConnection(v4, (uint64_t)v8);
        CFRelease(v9);
      }
    }
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v4)
        {
          if (*(void *)(*v4 + 104))
          {
            uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
    }
    CFIndex v11 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v4)
        {
          if (*(void *)(*v4 + 104))
          {
            uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12) {
              os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
      }
    }
    uint64_t v13 = CPSqliteConnectionStatementForSQL();
    if (v11 && v13)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
      CFArrayRef v15 = (const __CFArray *)EKGetDefaultCalendarColors();
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, v15);
      if (v4)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v4)
          {
            if (*(void *)(*v4 + 104))
            {
              CFArrayRef v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17) {
                os_unfair_lock_assert_owner(v17 + 20);
              }
            }
          }
        }
      }
      CFArrayRef v18 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (v18)
        {
          if (*v18)
          {
            uint64_t v19 = **v18;
            if (v19)
            {
              if (*(void *)(v19 + 104))
              {
                CFIndex v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v20) {
                  os_unfair_lock_assert_owner(v20 + 20);
                }
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      v45.length = CFArrayGetCount(MutableCopy);
      v45.id location = 0;
      CFArraySortValues(MutableCopy, v45, (CFComparatorFunction)_CompareColorFrequencies, Mutable);
      CFRelease(Mutable);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          uint64_t v21 = **v11;
          if (v21)
          {
            if (*(void *)(v21 + 104))
            {
              int v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v22) {
                os_unfair_lock_assert_owner(v22 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      CFRelease(MutableCopy);
    }
LABEL_55:
    CFArrayRef v23 = (const __CFArray *)EKGetBrightonCalendarColors();
    CFIndex Count = CFArrayGetCount(v23);
    CFArrayRef v25 = (const __CFArray *)EKGetWildcatDefaultCalendarColors();
    CFArrayRef v26 = (const __CFArray *)EKGetApexDefaultCalendarColors();
    CFArrayRef v27 = (const __CFArray *)EKGetSnowLeopardDefaultCalendarColors();
    CFIndex v28 = CFArrayGetCount(v25);
    if (Count < v28) {
      goto LABEL_62;
    }
    CFIndex v29 = v28;
    if (v28 < 1) {
      goto LABEL_62;
    }
    CFIndex v30 = 0;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v23, v30);
      uint64_t v32 = CFArrayGetValueAtIndex(v25, v30);
      uint64_t v33 = CFArrayGetValueAtIndex(v26, v30);
      double v34 = CFArrayGetValueAtIndex(v27, v30);
      CFStringRef v35 = CFStringCreateWithFormat(0, 0, @"UPDATE Calendar SET color = '%@' WHERE color in ('%@', '%@', '%@');",
              ValueAtIndex,
              v32,
              v33,
              v34);
      if (v35)
      {
        CFStringRef v36 = v35;
        CalPerformSQLWithConnection(v42, (uint64_t)v35);
        CFRelease(v36);
      }
      ++v30;
    }
    while (v29 != v30);
LABEL_61:
    if (v40 > 67)
    {
      CFStringRef v5 = v41;
      CFUUIDRef v4 = v42;
      if (v40 > 0x57)
      {
        if (v40 > 0x59)
        {
LABEL_67:
          if (_CalDatabaseIsSuggestionsEnabled()) {
            _CalCalendarInsertSuggestionsCalendar(v4, 0);
          }
          goto LABEL_69;
        }
LABEL_66:
        CalPerformSQLWithConnection(v4, @"UPDATE Calendar SET invitation_status = 3 WHERE invitation_status = 2");
        CalPerformSQLWithConnection(v4, @"UPDATE Calendar SET invitation_status = 2 WHERE invitation_status = 1");
        goto LABEL_67;
      }
LABEL_65:
      _CalCalendarInsertBirthdayCalendar(v4, 1);
      goto LABEL_66;
    }
LABEL_62:
    CFStringRef v37 = CFStringCreateWithFormat(0, 0, @"UPDATE Calendar SET supported_entity_types = %ld WHERE (supported_entity_types = 0 OR supported_entity_types IS NULL);",
            4);
    CFStringRef v5 = v41;
    CFUUIDRef v4 = v42;
    if (v37)
    {
      CFStringRef v38 = v37;
      CalPerformSQLWithConnection(v42, (uint64_t)v37);
      CFRelease(v38);
    }
    goto LABEL_65;
  }
  if (a3 <= 0x4653)
  {
    CalMigrateTableFull2(v4, (const char **)&kCalCalendarClass, 0, (const char **)&kCalCalendarUpgradeInfo, v5, (const char **)&kCalCalendarChangesUpgradeInfo, &__block_literal_global_10, 0, (const char **)&kCalCalendarIndexes, (const char **)&kCalCalendarChangesIndexes, (const char **)&kCalCalendarTriggers, a3);
    if (a3 >> 8 >= 0x2B)
    {
      if (a3 > 0x3EE4) {
        goto LABEL_72;
      }
      goto LABEL_71;
    }
LABEL_69:
    if (_CalDatabaseIsSuggestionsEnabled()) {
      _CalCalendarInsertNaturalLanguageSuggestionsCalendar(v4);
    }
LABEL_71:
    sqlite3_create_function((sqlite3 *)v4[1], "CalMigrateSubcalExternalID", 1, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalCalendarMigrateSubscribedCalendarExternalID, 0, 0);
    id v39 = objc_msgSend(NSString, "stringWithFormat:", @"UPDATE Calendar SET external_id = CalMigrateSubcalExternalID(external_id) WHERE (Calendar.flags & %i) != 0 AND EXISTS (SELECT Store.ROWID FROM Store WHERE Store.ROWID = store_id AND Store.type == %i)", 8, 2);
    CalPerformSQLWithConnection(v4, (uint64_t)v39);
    sqlite3_create_function((sqlite3 *)v4[1], "CalMigrateSubcalExternalID", 1, 526337, 0, 0, 0, 0);
  }
LABEL_72:
}

CFStringRef __CalCalendarMigrateTables_block_invoke(uint64_t a1, CFStringRef theString2, const __CFDictionary *a3)
{
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6 <= 52)
  {
    if (CFEqual(@"UUID", theString2))
    {
      CFUUIDRef v20 = CFUUIDCreate(0);
      CFStringRef v21 = CFUUIDCreateString(0, v20);
      CFRelease(v20);
      return v21;
    }
    int v6 = *(_DWORD *)(a1 + 40);
  }
  if ((v6 - 13) > 0x28)
  {
LABEL_7:
    if (v6 > 119 || CFStringCompare(@"symbolic_color_name", theString2, 0)) {
      goto LABEL_9;
    }
    CFDictionaryRef Value = CFDictionaryGetValue(a3, @"symbolic_color_name");
    CFIndex v30 = CFDictionaryGetValue(a3, @"color");
    if (Value)
    {
      if (Value != (const void *)*MEMORY[0x1E4F1D260] || v30 == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      if (!v30) {
        goto LABEL_9;
      }
      CFDictionaryRef Value = (const void *)*MEMORY[0x1E4F1D260];
    }
    if (v30 != Value) {
      return (CFStringRef)symbolicColorForLegacyRGB();
    }
LABEL_9:
    if ((*(_DWORD *)(a1 + 40) - 14008) <= 0x7CC)
    {
      CFComparisonResult v7 = CFStringCompare(@"error_id", theString2, 0);
      CFStringRef result = 0;
      if (v7) {
        return result;
      }
      CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a3, @"last_sync_error");
      CFStringRef result = 0;
      if (!v9 || v9 == (const __CFNumber *)*MEMORY[0x1E4F1D260]) {
        return result;
      }
      int valuePtr = 0;
      CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
      if (valuePtr)
      {
        CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a3, @"ROWID");
        int v33 = 0;
        CFNumberGetValue(v10, kCFNumberIntType, &v33);
        uint64_t v11 = *(void *)(a1 + 32);
        if (CDBLockingAssertionsEnabled)
        {
          if (v11)
          {
            if (*(void *)v11)
            {
              if (*(void *)(*(void *)v11 + 104))
              {
                uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (Context) {
                  os_unfair_lock_assert_owner(Context + 20);
                }
              }
            }
          }
        }
        uint64_t v13 = CPSqliteConnectionStatementForSQL();
        if (v13)
        {
          uint64_t v14 = (uint64_t **)v13;
          sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 1, v33);
          if (CDBLockingAssertionsEnabled)
          {
            if (*v14)
            {
              uint64_t v15 = **v14;
              if (v15)
              {
                if (*(void *)(v15 + 104))
                {
                  uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v16) {
                    os_unfair_lock_assert_owner(v16 + 20);
                  }
                }
              }
            }
          }
          uint64_t v17 = CPSqliteStatementIntegerResult();
          if (CDBLockingAssertionsEnabled)
          {
            if (*v14)
            {
              uint64_t v18 = **v14;
              if (v18)
              {
                if (*(void *)(v18 + 104))
                {
                  uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v19) {
                    os_unfair_lock_assert_owner(v19 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementReset();
          if (v17)
          {
            [NSNumber numberWithInt:v17];
            return (CFStringRef)objc_claimAutoreleasedReturnValue();
          }
        }
      }
    }
    return 0;
  }
  if (CFStringCompare(@"color", theString2, 0)) {
    goto LABEL_6;
  }
  int valuePtr = -1;
  int v32 = -1;
  int v33 = -1;
  CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a3, @"color_r");
  CFNumberRef v23 = (const __CFNumber *)*MEMORY[0x1E4F1D260];
  if (v22 && v22 != v23) {
    CFNumberGetValue(v22, kCFNumberIntType, &valuePtr);
  }
  CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(a3, @"color_g");
  if (v24 && v24 != v23) {
    CFNumberGetValue(v24, kCFNumberIntType, &v32);
  }
  CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(a3, @"color_b");
  if (v25 && v25 != v23) {
    CFNumberGetValue(v25, kCFNumberIntType, &v33);
  }
  if (valuePtr == -1 || v33 == -1 || v32 == -1)
  {
LABEL_6:
    int v6 = *(_DWORD *)(a1 + 40);
    goto LABEL_7;
  }
  if (valuePtr >= 255) {
    uint64_t v26 = 255;
  }
  else {
    uint64_t v26 = valuePtr;
  }
  int valuePtr = v26;
  if (v32 >= 255) {
    uint64_t v27 = 255;
  }
  else {
    uint64_t v27 = v32;
  }
  if (v33 >= 255) {
    uint64_t v28 = 255;
  }
  else {
    uint64_t v28 = v33;
  }
  int v32 = v27;
  int v33 = v28;
  return CFStringCreateWithFormat(0, 0, @"#%02X%02X%02X", v26, v27, v28);
}

void *__CalCalendarMigrateTables_block_invoke_2(uint64_t a1, void *a2)
{
  if ([a2 isEqualToString:@"old_flags"]) {
    return &unk_1EFF7A7D0;
  }
  else {
    return 0;
  }
}

uint64_t _CalCalendarAssignColorDuringMigration(uint64_t a1, CFArrayRef *a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  if ((sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1) & 2) == 0)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2[1], 0);
    CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(a2[1], 0);
    CFArrayAppendValue(a2[1], ValueAtIndex);
    CFRelease(ValueAtIndex);
    int v6 = (sqlite3_stmt *)*((void *)*a2 + 1);
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(ValueAtIndex);
    sqlite3_bind_text(v6, 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
    sqlite3_bind_int(*((sqlite3_stmt **)*a2 + 1), 2, v4);
    CFStringRef v8 = (void **)*a2;
    if (CDBLockingAssertionsEnabled) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (*v8)
      {
        uint64_t v10 = **v8;
        if (v10)
        {
          if (*(void *)(v10 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    uint64_t v12 = (void **)*a2;
    if (CDBLockingAssertionsEnabled)
    {
      if (v12)
      {
        if (*v12)
        {
          uint64_t v13 = **v12;
          if (v13)
          {
            if (*(void *)(v13 + 104))
            {
              uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14) {
                os_unfair_lock_assert_owner(v14 + 20);
              }
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  return 0;
}

uint64_t _CalDatabaseIsSuggestionsEnabled()
{
  uint64_t v0 = *MEMORY[0x1E4F57900];
  uint64_t v1 = (void *)CFPreferencesCopyAppValue(@"SiriCanLearnFromAppBlacklist", @"com.apple.suggestions");
  CFUUIDRef v2 = v1;
  if (v1) {
    CFArrayRef v3 = (void *)[v1 mutableCopy];
  }
  else {
    CFArrayRef v3 = objc_opt_new();
  }
  int v4 = v3;
  if (([v3 containsObject:v0] & 1) == 0) {
    [v4 addObject:v0];
  }
  CFPreferencesSetAppValue(@"SiriCanLearnFromAppBlacklist", v4, @"com.apple.suggestions");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.suggestions.settingsChanged", 0, 0, 1u);

  int v6 = (void *)CFPreferencesCopyAppValue(@"AppCanShowSiriSuggestionsBlacklist", @"com.apple.suggestions");
  uint64_t v7 = [v6 containsObject:v0] ^ 1;

  return v7;
}

BOOL _CalCalendarHasValidParent(uint64_t a1)
{
  unsigned int StoreId = _CalCalendarGetStoreId(a1);
  if ((StoreId & 0x80000000) != 0) {
    return 0;
  }
  unsigned int v2 = StoreId;
  uint64_t Store = CPRecordGetStore();
  return _CalRecordOfClassStillExists((uint64_t)&kCalStoreClass, Store, v2);
}

BOOL _CalCalendarHasDirtyInstanceAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL _CalCalendarHasDirtySyncAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalCalendarClearDirtyAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordUnloadProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3) {
          os_unfair_lock_assert_owner(v3 + 20);
        }
      }
    }
  }
  return CPRecordUnloadProperty();
}

void _CalCalendarCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

uint64_t _CalCalendarSaveAddedRecords(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

CFTypeRef _CalCalendarCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFTypeRef v16 = 0;
  CFArrayRef v6 = _CalCalendarCopySharees(a2);
  if (v6)
  {
    CFArrayRef v7 = v6;
    CalDatabaseAddChangesToArray(&v16, v6, a3);
    CFRelease(v7);
  }
  CFArrayRef v8 = _CalCalendarCopyNotifications(a2);
  if (v8)
  {
    CFArrayRef v9 = v8;
    CalDatabaseAddChangesToArray(&v16, v8, a3);
    CFRelease(v9);
  }
  CFArrayRef v10 = _CalCalendarCopyResourceChanges(a2);
  if (v10)
  {
    CFArrayRef v11 = v10;
    CalDatabaseAddChangesToArray(&v16, v10, a3);
    CFRelease(v11);
  }
  CFArrayRef v12 = (const __CFArray *)_CalDatabaseCopyCalendarItemsWithCalendar(a1);
  if (v12)
  {
    CFArrayRef v13 = v12;
    CalDatabaseAddChangesToArray(&v16, v12, a3);
    CFRelease(v13);
  }
  CFTypeRef Error = _CalCalendarGetError(a2);
  if (Error) {
    CalDatabaseAddChangeToArray(&v16, Error, a3);
  }
  return v16;
}

CFMutableArrayRef _CalCalendarCopySharees(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFMutableArrayRef _CalCalendarCopyNotifications(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFMutableArrayRef _CalCalendarCopyResourceChanges(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFTypeRef _CalCalendarGetError(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

const void *_CalDatabaseCreateCalendarForEntityType(uint64_t a1, int a2)
{
  uint64_t v4 = CPRecordCreate();
  CFStringRef v5 = (const void *)v4;
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      CFArrayRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = v5 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      CFArrayRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v12 = v5 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (CPRecordGetStore())
    {
      CFArrayRef v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v13) {
        os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 1);
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  CFStringRef v16 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v16);
  _CalDatabaseAddEntity(a1, v5);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18) {
            os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
  }
  return v5;
}

const void *CalDatabaseCreateCalendar(os_unfair_lock_s *a1)
{
  return CalDatabaseCreateCalendarForEntityType(a1, 0);
}

const void *CalDatabaseCopyCalendar(os_unfair_lock *a1, uint64_t a2)
{
  uint64_t DatabaseForRecord = (os_unfair_lock *)CalGetDatabaseForRecord();
  CalDatabaseMultiLock(DatabaseForRecord, a1);
  CFStringRef v5 = _CalDatabaseCopyCalendar((uint64_t)a1, a2);
  CalDatabaseMultiUnlock(DatabaseForRecord, a1);
  return v5;
}

const void *_CalDatabaseCopyCalendar(uint64_t a1, uint64_t a2)
{
  CalendarForEntityint Type = _CalDatabaseCreateCalendarForEntityType(a1, 0);
  uint64_t v4 = CalendarForEntityType;
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = CalendarForEntityType == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      CFArrayRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      BOOL v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFUUIDRef v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFNumberRef v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFNumberRef v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23) {
          os_unfair_lock_assert_owner(v23 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFNumberRef v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFNumberRef v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25) {
          os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26) {
          os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28) {
          os_unfair_lock_assert_owner(v28 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFIndex v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFIndex v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30) {
          os_unfair_lock_assert_owner(v30 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31) {
          os_unfair_lock_assert_owner(v31 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32) {
          os_unfair_lock_assert_owner(v32 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33) {
          os_unfair_lock_assert_owner(v33 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        double v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v34) {
          os_unfair_lock_assert_owner(v34 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35) {
          os_unfair_lock_assert_owner(v35 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v36) {
          os_unfair_lock_assert_owner(v36 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37) {
          os_unfair_lock_assert_owner(v37 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v38) {
          os_unfair_lock_assert_owner(v38 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v39) {
          os_unfair_lock_assert_owner(v39 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

uint64_t _CalInvalidateCalendarsForStoreId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClass();
}

BOOL _CalCalendarInvalidateWithStoreId(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  if (Property == a2 && (CPRecordGetID() & 0x80000000) == 0)
  {
    uint64_t Store = CPRecordGetStore();
    _CalInvalidateCalendarItemsForCalendarId(Store);
    _CalInvalidateShareesWithOwnerID(Store);
    _CalInvalidateNotificationsWithCalendarID(Store);
  }
  return Property == a2;
}

BOOL _CalCalendarGetCalendarSupportsExactlyOneEntityTypeInStore(uint64_t a1)
{
  return _CalCalendarGetBoolConstraintValueForStore(a1, @"SupportsExactlyOneEntityType");
}

BOOL _CalCalendarGetBoolConstraintValueForStore(uint64_t a1, const void *a2)
{
  CFArrayRef v3 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  Typeuint64_t ID = CFDictionaryGetTypeID();
  if (!v3) {
    return 0;
  }
  CFTypeID v5 = TypeID;
  if (CFGetTypeID(v3) == TypeID
    && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v3, @"CalCalendar")) != 0
    && (CFDictionaryRef v7 = Value, CFGetTypeID(Value) == v5)
    && (BOOL v8 = CFDictionaryGetValue(v7, a2)) != 0)
  {
    CFArrayRef v9 = v8;
    CFRetain(v8);
    CFRelease(v3);
    CFTypeID v10 = CFGetTypeID(v9);
    BOOL v11 = v10 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v9) != 0;
    CFArrayRef v3 = v9;
  }
  else
  {
    BOOL v11 = 0;
  }
  CFRelease(v3);
  return v11;
}

BOOL CalCalendarGetCalendarSupportsExactlyOneEntityTypeInStore(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForuint64_t Store = _CalCalendarGetBoolConstraintValueForStore(a1, @"SupportsExactlyOneEntityType");
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

__CFArray *CalDatabaseCopyOfAllCalendarsInStore(const void *a1, uint64_t a2)
{
  return CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, a2, 0);
}

BOOL _CalCalendarIsReadOnly(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 1);
}

BOOL _CalCalendarIsSharingInvitation(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 128);
}

uint64_t _CalCalendarGetSharingInvitationResponse(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalDatabaseCopyCalendarWithUID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  InstanceOfClassWithUuint64_t ID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
  CFDictionaryRef v7 = InstanceOfClassWithUID;
  if (InstanceOfClassWithUID) {
    CFRetain(InstanceOfClassWithUID);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v7;
}

uint64_t _CalCalendarCopyUUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyUUID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalCalendarSetUUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalCalendarSetUUID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetUUID(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

__CFArray *_CalDatabaseCopyCalendarsWithUIDs(os_unfair_lock_s *a1, const __CFArray *a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, 0);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    for (CFIndex i = 0; i != v6; ++i)
    {
      int valuePtr = 0;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, i);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      CFArrayRef v9 = CalDatabaseCopyCalendarWithUID(a1);
      if (v9)
      {
        CFTypeID v10 = v9;
        CFArrayAppendValue(Mutable, v9);
        CFRelease(v10);
      }
    }
  }
  return Mutable;
}

CFURLRef CalCalendarCopyURI(uint64_t a1)
{
  uint64_t v1 = (void *)CalCalendarCopyUUID(a1);
  if (v1)
  {
    BOOL v2 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@"/?&:$+,=@"];;
    CFArrayRef v3 = [v1 stringByAddingPercentEncodingWithAllowedCharacters:v2];
    CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"x-apple-calendar://%@", v3);
    if (v4)
    {
      CFStringRef v5 = v4;
      CFURLRef v6 = CFURLCreateWithString(0, v4, 0);
      CFRelease(v5);
    }
    else
    {
      CFURLRef v6 = 0;
    }
  }
  else
  {
    CFURLRef v6 = 0;
  }

  return v6;
}

const void *CalDatabaseCopyDefaultLocalCalendar(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 378)) {
    return 0;
  }
  CFArrayRef v3 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  InstanceOfClassWithUuint64_t ID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
  if (!InstanceOfClassWithUID)
  {
    InstanceOfClassWithUuint64_t ID = (const void *)_CalDatabaseGetRecordStore(a1);
    if (!InstanceOfClassWithUID) {
      goto LABEL_11;
    }
    if (CDBLockingAssertionsEnabled)
    {
      BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    InstanceOfClassWithUuint64_t ID = (const void *)Database;
    if (!Database) {
      goto LABEL_11;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        CFTypeID v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    uint64_t v11 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (!v11)
    {
      InstanceOfClassWithUuint64_t ID = 0;
      goto LABEL_11;
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __CalDatabaseCopyDefaultLocalCalendar_block_invoke;
    v14[3] = &__block_descriptor_40_e5_v8__0l;
    v14[4] = v11;
    _CalDatabaseLockForWriteTransaction(a1, (uint64_t)v14);
    uint64_t v12 = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (v12)
      {
        CFArrayRef v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    InstanceOfClassWithUuint64_t ID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
    if (!InstanceOfClassWithUID) {
      goto LABEL_11;
    }
  }
  CFRetain(InstanceOfClassWithUID);
LABEL_11:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3);
  }
  os_unfair_lock_unlock(v3);
  return InstanceOfClassWithUID;
}

void __CalDatabaseCopyDefaultLocalCalendar_block_invoke(uint64_t a1)
{
}

const void *CalDatabaseCopyNextAssignableColor(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFStringRef AssignableColor = _CalCalendarCopyNextAssignableColor((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return AssignableColor;
}

void *CalDatabaseCopyFirstReadWriteCalendarThatSupportsEntityType(void *a1, int a2, uint64_t a3)
{
  CFURLRef v6 = CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, a3, 11);
  if (!v6) {
    return 0;
  }
  CFArrayRef v7 = v6;
  CFIndex Count = CFArrayGetCount(v6);
  CFArrayRef v9 = CalDatabaseGetPreferences((uint64_t)a1);
  uint64_t v10 = objc_msgSend(v9, "get_defaultCalendarDatabaseID");
  if (v10 == (int)CalDatabaseGetAuxilliaryDatabaseID((uint64_t)a1)) {
    int v11 = objc_msgSend(v9, "get_defaultCalendarStoreUID");
  }
  else {
    int v11 = -1;
  }
  if (Count < 1) {
    goto LABEL_17;
  }
  CFNumberRef v25 = (id *)a1;
  uint64_t v26 = a3;
  uint64_t v27 = v9;
  CFIndex v13 = 0;
  uint64_t v14 = 0;
  int v15 = -1;
  do
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v13);
    if (CalCalendarCanContainEntityTypeAndStoreAllowsIt((uint64_t)ValueAtIndex, a2))
    {
      CFTypeRef v17 = CalCalendarCopyStore((uint64_t)ValueAtIndex);
      if (v17)
      {
        uint64_t v18 = v17;
        int v19 = 2 * (CalStoreGetUID() == v11);
        CFRelease(v18);
      }
      else
      {
        int v19 = 0;
      }
      int v20 = v19 | (CalCalendarGetSharingStatus((uint64_t)ValueAtIndex) == 0);
      if (v20 > v15)
      {
        int v15 = v20;
        uint64_t v14 = ValueAtIndex;
      }
    }
    ++v13;
  }
  while (Count != v13);
  CFArrayRef v9 = v27;
  if (v14)
  {
    uint64_t v12 = (void *)CFRetain(v14);
    CFStringRef v21 = NSString;
    CFNumberRef v22 = objc_msgSend(v25[37], "get_defaultCalendarID");
    CFNumberRef v23 = [v21 stringWithFormat:@"Old default (%@) not valid", v22];
    CalDatabaseSetDefaultCalendarForEntityType(v25, v12, a2, 1, v26, v23);
  }
  else
  {
LABEL_17:
    uint64_t v12 = 0;
  }
  CFRelease(v7);

  return v12;
}

void CalDatabaseCreateWritableCalendarForEntityTypeInStoreIfNeeded(os_unfair_lock_s *a1, int a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFURLRef v6 = CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, a3, 1);
  if (!v6) {
    goto LABEL_10;
  }
  CFArrayRef v7 = v6;
  CFIndex Count = CFArrayGetCount(v6);
  if (Count < 1)
  {
    CFRelease(v7);
LABEL_10:
    CFIndex v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = "reminders";
      if (a2 == 2) {
        uint64_t v14 = "events";
      }
      int v16 = 136315394;
      CFTypeRef v17 = "void CalDatabaseCreateWritableCalendarForEntityTypeInStoreIfNeeded(CalDatabaseRef, CalEntityType, CalStoreRef)";
      __int16 v18 = 2080;
      int v19 = v14;
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_INFO, "%s: Failed to find a non-hidden calendar for %s. Making one", (uint8_t *)&v16, 0x16u);
    }
    CalendarForEntityint Type = (void *)CalDatabaseCreateCalendarForEntityType(a1, a2);
    CalCalendarSetTitle((uint64_t)CalendarForEntityType);
    CalStoreAddCalendar(a3, CalendarForEntityType);
    CFRelease(CalendarForEntityType);
    return;
  }
  CFIndex v9 = Count;
  CFIndex v10 = 0;
  int v11 = 0;
  do
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v10);
    if (!CalCalendarGetFlag((uint64_t)ValueAtIndex, 2)) {
      v11 += CalCalendarCanContainEntityType((uint64_t)ValueAtIndex, a2);
    }
    ++v10;
  }
  while (v9 != v10);
  CFRelease(v7);
  if (!v11) {
    goto LABEL_10;
  }
}

BOOL CalCalendarIsHidden(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 2);
}

uint64_t CalCalendarCanContainEntityType(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CanContainEntityint Type = _CalCalendarCanContainEntityType(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return CanContainEntityType;
}

uint64_t _CalDatabaseCreateLimitedAccessVirtualCalendar(uint64_t a1)
{
  uint64_t v2 = CPRecordCreateWithRecordID();
  uint64_t v3 = v2;
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      CFArrayRef v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      CFIndex v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = v3 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        CFIndex v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        int v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        __int16 v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        int v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  LimitedAccessVirtualRecordIDForEntity = (const void *)_CalDatbaseCreateLimitedAccessVirtualRecordIDForEntity(1);
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(LimitedAccessVirtualRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        CFNumberRef v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  LimitedAccessVirtualuint64_t Store = (const void *)_CalDatabaseGetLimitedAccessVirtualStore(a1);
  CalRelationSetAndLoadRawRelatedObject(Property, LimitedAccessVirtualStore);
  return v3;
}

uint64_t _CalDatabaseGetLimitedAccessVirtualCalendar(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    uint64_t result = _CalDatabaseCreateLimitedAccessVirtualCalendar(a1);
    *(void *)(a1 + 48) = result;
  }
  return result;
}

const void *CalDatabaseCopyLimitedAccessVirtualCalendar(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  LimitedAccessVirtualCFTypeRef Calendar = *(const void **)(a1 + 48);
  if (LimitedAccessVirtualCalendar
    || (LimitedAccessVirtualCFTypeRef Calendar = (const void *)_CalDatabaseCreateLimitedAccessVirtualCalendar(a1),
        (*(void *)(a1 + 48) = LimitedAccessVirtualCalendar) != 0))
  {
    CFRetain(LimitedAccessVirtualCalendar);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return LimitedAccessVirtualCalendar;
}

BOOL CalCalendarIsReadOnly(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 1);
}

CFTypeRef CalDatabaseCopyDefaultCalendarForNewEvents(uint64_t a1)
{
  return CalDatabaseCopyDefaultCalendarForNewEventsInStore(a1, 0);
}

void CalDatabaseSetDefaultCalendarForNewEventsInStore(const void *a1, void *a2, int a3, uint64_t a4, void *a5)
{
}

void CalDatabaseSetDefaultCalendarForEntityType(const void *a1, void *a2, int a3, int a4, uint64_t a5, void *a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v13 = a6;
  if (!a2)
  {
    CFTypeRef v18 = CFRetain(a1);
    goto LABEL_8;
  }
  CFTypeRef v14 = CalCalendarCopyStore((uint64_t)a2);
  if (!v14 || (int v15 = v14, Type = CalStoreGetType((uint64_t)v14), CFRelease(v15), Type != 6))
  {
    CFTypeRef v18 = CalCopyDatabaseForRecord();
LABEL_8:
    uint64_t v19 = (uint64_t)v18;
    if (a4)
    {
      CFTypeRef v20 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore((uint64_t)v18, a3, a5, 0);
      if (v20)
      {
        CFRelease(v20);
LABEL_68:
        CFRelease((CFTypeRef)v19);
        goto LABEL_69;
      }
    }
    if (a5)
    {
      CalStoreSetDelegatedAccountDefaultCalendarForNewEvents(a5, a2);
      CalDatabaseSave(v19);
LABEL_67:
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, (CFNotificationName)kCalDefaultCalendarChangedNotification, 0, 0, 1u);
      goto LABEL_68;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v19 + 80));
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CFNumberRef v22 = (void *)CPRecordCopyProperty();
    if (!v22)
    {
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFNumberRef v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23) {
              os_unfair_lock_assert_owner(v23 + 20);
            }
          }
        }
      }
      CFNumberRef v22 = (void *)CPRecordCopyProperty();
    }
    if (a3 != 2)
    {
      Recorduint64_t Store = _CalDatabaseGetRecordStore(v19);
      if (CDBLockingAssertionsEnabled)
      {
        if (RecordStore)
        {
          uint64_t v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v26) {
            os_unfair_lock_assert_owner(v26 + 20);
          }
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled)
      {
        if (Database)
        {
          if (*(void *)(Database + 104))
          {
            uint64_t v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28) {
              os_unfair_lock_assert_owner(v28 + 20);
            }
          }
        }
      }
      uint64_t v29 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (!v29)
      {
        int v32 = 1;
        goto LABEL_64;
      }
      uint64_t v30 = v29;
      v41[0] = MEMORY[0x1E4F143A8];
      v41[1] = 3221225472;
      v41[2] = __CalDatabaseSetDefaultCalendarForEntityType_block_invoke;
      v41[3] = &unk_1E5D64C70;
      uint64_t v43 = a2;
      uint64_t v44 = v29;
      CFRange v45 = @"DefaultTaskCalendarID";
      id v42 = v22;
      uint64_t v46 = @"DefaultTaskCalendarStoreUID";
      id v47 = @"DefaultTaskCalendarName";
      _CalDatabaseLockForWriteTransaction(v19, (uint64_t)v41);
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v30)
        {
          if (*(void *)(*(void *)v30 + 104))
          {
            uint64_t v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v31) {
              os_unfair_lock_assert_owner(v31 + 20);
            }
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
      int v32 = 1;
      a2 = v42;
LABEL_63:

LABEL_64:
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner((const os_unfair_lock *)(v19 + 80));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 80));

      if (!v32) {
        goto LABEL_68;
      }
      goto LABEL_67;
    }
    if (a2)
    {
      int ID = CPRecordGetID();
      int StoreId = _CalCalendarGetStoreId((uint64_t)a2);
      a2 = _CalCalendarGetTitle((uint64_t)a2);
      int v40 = *(_DWORD *)(v19 + 172);
      if (v22) {
        goto LABEL_47;
      }
    }
    else
    {
      int ID = 0;
      int StoreId = 0;
      int v40 = 0;
      if (v22) {
        goto LABEL_47;
      }
    }
    BOOL v6 = objc_msgSend(*(id *)(v19 + 296), "get_defaultCalendarID");
    if (!v6)
    {
      int v33 = 0;
LABEL_51:
      if (objc_msgSend(*(id *)(v19 + 296), "get_defaultCalendarStoreUID") == StoreId)
      {
        BOOL v34 = objc_msgSend(*(id *)(v19 + 296), "get_defaultCalendarDatabaseID") != v40;
        if ((v33 & 1) == 0) {
          goto LABEL_54;
        }
      }
      else
      {
        BOOL v34 = 1;
        if (!v33)
        {
LABEL_54:
          if (v22)
          {
            if (v34)
            {
LABEL_56:
              CFStringRef v35 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 67110402;
                int v49 = ID;
                __int16 v50 = 2112;
                __int16 v51 = v22;
                __int16 v52 = 2112;
                __int16 v53 = a2;
                __int16 v54 = 1024;
                int v55 = StoreId;
                __int16 v56 = 1024;
                int v57 = v40;
                __int16 v58 = 2114;
                id v59 = v13;
                _os_log_impl(&dword_1A8E81000, v35, OS_LOG_TYPE_DEFAULT, "Setting default calendar to %i (%@, \"%@\" in store %i db %i). Reason: %{public}@", buf, 0x32u);
              }
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarID:", v22);
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarStoreUID:", StoreId);
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarDatabaseID:", v40);
              [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarChangedTimestamp:", (uint64_t)v36);
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarChangedReason:", v13);
              int v32 = 1;
              goto LABEL_63;
            }
          }
          else
          {

            if (v34) {
              goto LABEL_56;
            }
          }
          CFStringRef v37 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1A8E81000, v37, OS_LOG_TYPE_INFO, "Ignoring request to set default calendar as the new value is the same as the old value", buf, 2u);
          }
          int v32 = 0;
          goto LABEL_63;
        }
      }
LABEL_53:

      goto LABEL_54;
    }
LABEL_47:
    CFArrayRef v7 = objc_msgSend(*(id *)(v19 + 296), "get_defaultCalendarID");
    int v33 = 1;
    BOOL v34 = 1;
    if (![v22 isEqual:v7]) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  CFTypeRef v17 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, "Can't set the default calendar to an integration calendar.", buf, 2u);
  }
LABEL_69:
}

void CalDatabaseSetDefaultCalendarForNewEvents(const void *a1, void *a2, int a3)
{
}

void CalDatabaseSetDefaultCalendarForNewEventsWithReason(const void *a1, void *a2, int a3, void *a4)
{
}

CFTypeRef CalDatabaseCopyDefaultCalendarForNewTasksForReminderMigration(uint64_t a1)
{
  return CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore(a1, 3, 0, 1);
}

CFTypeRef CalDatabaseCopySelectedDefaultCalendarForNewTasks(uint64_t a1)
{
  return CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore(a1, 3, 0, 0);
}

void CalDatabaseSetDefaultCalendarForNewTasks(const void *a1, void *a2, int a3)
{
}

void CalDatabaseEnsureDefaultCalendarForNewTasksExists(os_unfair_lock_s *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CalDatabaseCopyDefaultCalendarForNewTasks(a1);
  if (v2)
  {
    CFRelease(v2);
    return;
  }
  if (_CalDatabaseGetRecordStore((uint64_t)a1))
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          BOOL v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5) {
            os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
      uint64_t v6 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v6)
      {
        uint64_t v7 = v6;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v6)
          {
            if (*(void *)(*(void *)v6 + 104))
            {
              BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v8) {
                os_unfair_lock_assert_owner(v8 + 20);
              }
            }
          }
        }
        CPSqliteConnectionBeginTransactionType();
        CFTypeRef v9 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore((uint64_t)a1, 3, 0, 0);
        if (v9)
        {
          BOOL v10 = v9;
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v7)
            {
              if (*(void *)(*(void *)v7 + 104))
              {
                int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v11) {
                  os_unfair_lock_assert_owner(v11 + 20);
                }
              }
            }
          }
          CPSqliteConnectionRollback();
        }
        else
        {
          id v13 = CalDatabaseCopyLocalStore((uint64_t)a1);
          if (!v13)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (*(void *)v7)
              {
                if (*(void *)(*(void *)v7 + 104))
                {
                  int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v16) {
                    os_unfair_lock_assert_owner(v16 + 20);
                  }
                }
              }
            }
            CPSqliteConnectionRollback();
            goto LABEL_28;
          }
          BOOL v10 = v13;
          if (CalStoreAllowsTasks((uint64_t)v13))
          {
            CFTypeRef v14 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
            {
              int v17 = 136315138;
              CFTypeRef v18 = "void CalDatabaseEnsureDefaultCalendarForNewTasksExists(CalDatabaseRef)";
              _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_INFO, "%s: Failed to get default calendar for reminders. Making one", (uint8_t *)&v17, 0xCu);
            }
            CalendarForEntityint Type = (void *)CalDatabaseCreateCalendarForEntityType(a1, 3);
            CalCalendarSetTitle((uint64_t)CalendarForEntityType);
            CalStoreAddCalendar((uint64_t)v10, CalendarForEntityType);
            CalDatabaseSave((uint64_t)a1);
            CalDatabaseSetDefaultCalendarForEntityType(a1, CalendarForEntityType, 3, 0, 0, @"vestigial");
            CFRelease(CalendarForEntityType);
          }
        }
        CFRelease(v10);
LABEL_28:
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v7)
          {
            if (*(void *)(*(void *)v7 + 104))
            {
              uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v12) {
                os_unfair_lock_assert_owner(v12 + 20);
              }
            }
          }
        }
        CPSqliteDatabaseReleaseSqliteConnection();
      }
    }
  }
}

const void *CalDatabaseCopyDefaultCalendarForNewTasks(void *a1)
{
  uint64_t v2 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore((uint64_t)a1, 3, 0, 0);
  if (!v2)
  {
    CFTypeRef v3 = CalDatabaseCopyDefaultCalendarForNewEventsInStore((uint64_t)a1, 0);
    if (v3)
    {
      uint64_t v2 = v3;
      if (CalCalendarCanContainEntityTypeAndStoreAllowsIt((uint64_t)v3, 3)) {
        return v2;
      }
      CFRelease(v2);
    }
    uint64_t v2 = CalDatabaseCopyFirstReadWriteCalendarThatSupportsEntityType(a1, 3, 0);
    if (!v2)
    {
      if (!_CalDatabaseGetRecordStore((uint64_t)a1)) {
        return 0;
      }
      if (CDBLockingAssertionsEnabled)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (!Database) {
        return 0;
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      uint64_t v7 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v7)
      {
        uint64_t v8 = v7;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v7)
          {
            if (*(void *)(*(void *)v7 + 104))
            {
              CFTypeRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v9) {
                os_unfair_lock_assert_owner(v9 + 20);
              }
            }
          }
        }
        CPSqliteConnectionBeginTransactionType();
        uint64_t v2 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore((uint64_t)a1, 3, 0, 0);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v8)
          {
            if (*(void *)(*(void *)v8 + 104))
            {
              BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10) {
                os_unfair_lock_assert_owner(v10 + 20);
              }
            }
          }
        }
        CPSqliteConnectionRollback();
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v8)
          {
            if (*(void *)(*(void *)v8 + 104))
            {
              int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11) {
                os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
        }
        CPSqliteDatabaseReleaseSqliteConnection();
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

void CalCalendarSetExternalID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetExternalModificationTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyExternalModificationTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetExternalIdentificationTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyExternalIdentificationTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetSyncToken(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySyncToken(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetExternalRepresentation(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyExternalRepresentation(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAddCalendarToStore(const void *a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (v4)
  {
    BOOL v5 = v4;
    uint64_t v6 = v4 + 20;
    os_unfair_lock_lock(v4 + 20);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordGetID();
    CPRecordSetProperty();
    if (CPRecordGetID() == -1
      && _CalCalendarGetBoolConstraintValueForStore(a2, @"SupportsExactlyOneEntityType"))
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      if (CPRecordGetProperty()) {
        _CalDatabaseAddEntity((uint64_t)v5, a1);
      }
      else {
        CFLog();
      }
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v6);
    }
    os_unfair_lock_unlock(v6);
    CFRelease(v5);
  }
}

void *_CalRemoveCalendar(void *a1)
{
  CFTypeRef Store = _CalCalendarGetStore((uint64_t)a1);
  if ((_CalCalendarCanContainEntityType((uint64_t)a1, 2) & 1) == 0 && (CalShouldSyncReminders() & 1) == 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
  }
  if (Store)
  {
    return _CalStoreRemoveCalendar((uint64_t)Store, a1);
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return (void *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

void CalRemoveCalendar(void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveCalendar(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalRemoveCalendarIfEmpty(void *a1)
{
  uint64_t v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v2) {
    return 0;
  }
  CFTypeRef v3 = v2;
  uint64_t v4 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  HasCalendarItemsWithEntityint Type = _CalDatabaseCalendarHasCalendarItemsWithEntityType((uint64_t)v3, (uint64_t)a1, 101);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  BOOL v6 = !HasCalendarItemsWithEntityType;
  if (!HasCalendarItemsWithEntityType) {
    CalRemoveCalendar(a1);
  }
  CFRelease(v3);
  return v6;
}

void CalCalendarRemoveAllRecords(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (v2)
  {
    CFTypeRef v3 = v2;
    uint64_t v4 = v2 + 20;
    os_unfair_lock_lock(v2 + 20);
    RecordCFTypeRef Store = (void *)_CalDatabaseGetRecordStore((uint64_t)v3);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CFArrayRef Property = (const __CFArray *)CPRecordGetProperty();
    if (Property)
    {
      CFArrayRef v8 = Property;
      v21.length = CFArrayGetCount(Property);
      v21.id location = 0;
      CFArrayApplyFunction(v8, v21, (CFArrayApplierFunction)_CalCalendarRemoveAddedSubentity, RecordStore);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFTypeRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9) {
              os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
      }
      CPRecordSetProperty();
    }
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v10 = (id)_CalDatabaseCopyCalendarItemsWithCalendar((uint64_t)v3);
    uint64_t v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v16;
      do
      {
        uint64_t v14 = 0;
        do
        {
          if (*(void *)v16 != v13) {
            objc_enumerationMutation(v10);
          }
          _CalRemoveEvent(*(const void **)(*((void *)&v15 + 1) + 8 * v14++), 0, 0);
        }
        while (v12 != v14);
        uint64_t v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v12);
    }

    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v4);
    }
    os_unfair_lock_unlock(v4);
    CFRelease(v3);
  }
}

uint64_t _CalCalendarSetStoreId(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result != a2)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          BOOL v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    return CPRecordSetProperty();
  }
  return result;
}

uint64_t _CalCalendarGetTitle(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalCalendarCopyUnlocalizedTitle(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarCopyTitle(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = (void *)CPRecordCopyProperty();
  CFTypeRef Store = _CalCalendarGetStore(a1);
  int Type = _CalStoreGetType((uint64_t)Store);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  uint64_t v7 = (void *)MEMORY[0x1E4F57738];
  BOOL Flag = CalCalendarGetFlag(a1, 0x40000);
  IsBirthdayCFTypeRef Calendar = CalCalendarIsBirthdayCalendar();
  uint64_t v10 = objc_msgSend(v7, "localizedTitleForTitle:isSuggestedEventCalendar:isBirthdayCalendar:allowsReminders:isIntegrationCalendar:", v4, Flag, IsBirthdayCalendar, CalCalendarCanContainEntityType(a1, 3), Type == 6);

  return v10;
}

BOOL CalCalendarIsSuggestionsCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x40000);
}

void CalCalendarSetLastSyncTitle(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyLastSyncTitle(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarDefaultReminderListTitleLocalized()
{
  return [MEMORY[0x1E4F57738] localizedDefaultReminderListTitle];
}

uint64_t _CalCalendarCopyTitle(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalCalendarSetReadOnly(uint64_t a1)
{
}

void CalCalendarSetFlag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetFlag(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetHidden(uint64_t a1)
{
}

void CalCalendarSetImmutable(uint64_t a1)
{
}

BOOL CalCalendarIsImmutable(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 4);
}

void CalCalendarSetIsInbox(uint64_t a1)
{
}

BOOL CalCalendarIsInbox(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 32);
}

void CalCalendarSetIsNotificationsCollection(uint64_t a1)
{
}

BOOL CalCalendarIsNotificationsCollection(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 64);
}

void CalCalendarSetIsSharingInvitation(uint64_t a1)
{
}

BOOL CalCalendarIsSharingInvitation(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 128);
}

void CalCalendarSetSubscribed(uint64_t a1)
{
}

void CalCalendarSetRefreshDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarCopyRefreshDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef Property = (const void *)CPRecordGetProperty();
  if (Property) {
    CFTypeRef v5 = CFRetain(Property);
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

BOOL CalCalendarIsSubscribed(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 8);
}

BOOL _CalCalendarIsSubscribed(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 8);
}

void CalCalendarSetSchedulingProhibited(uint64_t a1)
{
}

BOOL CalCalendarIsSchedulingProhibited(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 16);
}

void CalCalendarSetDefaultCalendarForStore(uint64_t a1)
{
}

BOOL CalCalendarIsDefaultCalendarForStore(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 1024);
}

void CalCalendarSetIsHolidaySubscribedCalendar(uint64_t a1)
{
}

BOOL CalCalendarIsHolidaySubscribedCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 4096);
}

BOOL CalCalendarIsHolidaySyncedCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x1000000);
}

BOOL CalCalendarIsFamilyCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x2000);
}

void CalCalendarSetIsFamilyCalendar(uint64_t a1)
{
}

void CalCalendarSetIsFoundInMailCalendar(uint64_t a1)
{
}

BOOL CalCalendarIsFoundInMailCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x40000);
}

BOOL _CalCalendarIsSuggestionsCalendar(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 0x40000);
}

BOOL CalCalendarIsMarkedUndeletable(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x4000);
}

void CalCalendarSetIsMarkedUndeletable(uint64_t a1)
{
}

BOOL CalCalendarIsMarkedImmutableSharees(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x8000);
}

void CalCalendarSetIsMarkedImmutableSharees(uint64_t a1)
{
}

void CalCalendarSetMaxAttendees(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarGetMaxAttendees(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

BOOL CalCalendarIsIgnoringEventAlerts(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x10000);
}

BOOL _CalCalendarIsIgnoringEventAlerts(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 0x10000);
}

void CalCalendarSetIsIgnoringEventAlerts(uint64_t a1)
{
}

BOOL CalCalendarIsIgnoringSharedCalendarNotifications(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x20000);
}

void CalCalendarSetIsIgnoringSharedCalendarNotifications(uint64_t a1)
{
}

void CalCalendarSetSharingStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarGetSharingStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalCalendarSetSharedOwnerName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySharedOwnerName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetSharedOwnerAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySharedOwnerAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetCachedExternalInfo(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v12 = 0;
    uint64_t v4 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v3 format:200 options:0 error:&v12];
    id v5 = v12;
    if (!v4)
    {
      BOOL v6 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v14 = v5;
        _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "Couldn't serialize external info: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  unint64_t v9 = (unint64_t)(id)CPRecordGetProperty();
  uint64_t v10 = (void *)v9;
  if (v4 | v9 && ([(id)v9 isEqual:v4] & 1) == 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
  }

  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

id CalCalendarCopyCachedExternalInfo(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = (void *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  if (v4)
  {
    id v14 = 0;
    id v5 = [MEMORY[0x1E4F28F98] propertyListWithData:v4 options:0 format:0 error:&v14];
    id v6 = v14;
    if (v5)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v7 = v5;
LABEL_18:

        goto LABEL_19;
      }
      unint64_t v9 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = v9;
        uint64_t v11 = objc_opt_class();
        *(_DWORD *)long long buf = 138543362;
        id v16 = v11;
        id v12 = v11;
        _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_ERROR, "Deserialized data wasn't a dictionary (it was a %{public}@", buf, 0xCu);
      }
    }
    else
    {
      CFArrayRef v8 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v16 = v6;
        _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_ERROR, "Error deserializing cached external store info: %@", buf, 0xCu);
      }
    }
    id v7 = 0;
    goto LABEL_18;
  }
  id v7 = 0;
LABEL_19:

  return v7;
}

void CalCalendarSetSharedOwnerAddresses(uint64_t a1, const void *a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)CalCalendarCopyCachedExternalInfo(a1);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v4) {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v5, 0, v4);
  }
  else {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  id v7 = MutableCopy;
  CFDictionarySetValue(MutableCopy, @"sharedOwnerAddresses", a2);
  CalCalendarSetCachedExternalInfo(a1, v7);
  if (v4) {
    CFRelease(v4);
  }
  CFRelease(v7);
}

uint64_t CalCalendarCopySharedOwnerAddresses(uint64_t a1)
{
  id v1 = CalCalendarCopyCachedExternalInfo(a1);
  uint64_t v2 = [v1 objectForKeyedSubscript:@"sharedOwnerAddresses"];

  return v2;
}

void CalCalendarSetSharingInvitationResponse(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarGetSharingInvitationResponse(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalCalendarSetPublishedURL(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFURLGetString(a2);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalCalendarCopyPublishedURL(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  CFURLRef result = 0;
  if (v4)
  {
    CFURLRef v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

uint64_t _CalCalendarSetCanBePublished(uint64_t a1)
{
  return _CalCalendarSetFlag(a1);
}

uint64_t _CalCalendarSetFlag(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3) {
          os_unfair_lock_assert_owner(v3 + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalCalendarSetCanBePublished(uint64_t a1)
{
}

BOOL CalCalendarGetCanBePublished(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 256);
}

uint64_t _CalCalendarSetCanBeShared(uint64_t a1)
{
  return _CalCalendarSetFlag(a1);
}

void CalCalendarSetCanBeShared(uint64_t a1)
{
}

BOOL CalCalendarGetCanBeShared(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 2048);
}

uint64_t _CalCalendarSetIsNaturalLanguageSuggestedEventsCalendar(uint64_t a1)
{
  return _CalCalendarSetFlag(a1);
}

BOOL _CalCalendarIsNaturalLanguageSuggestedEventsCalendar(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 0x80000);
}

void CalCalendarSetIsNaturalLanguageSuggestedEventsCalendar(uint64_t a1)
{
}

BOOL CalCalendarIsNaturalLanguageSuggestedEventsCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x80000);
}

void CalCalendarSetIsAffectingAvailability(uint64_t a1)
{
}

BOOL CalCalendarIsAffectingAvailability(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x100000);
}

void CalCalendarSetIsPublished(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarGetIsPublished(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

uint64_t CalCalendarGetInvitationStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Invitationuint64_t Status = _CalCalendarGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus;
}

uint64_t _CalCalendarGetInvitationStatus(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void CalCalendarSetInvitationStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetNeedsNotification(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalCalendarHasBeenAlerted(uint64_t a1)
{
  return _CalCalendarGetInvitationStatus(a1) != 3;
}

BOOL CalCalendarHasBeenAlerted(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Invitationuint64_t Status = _CalCalendarGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus != 3;
}

uint64_t CalCalendarCopyNotes(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetNotes(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetBulkRequests(uint64_t a1, const void *a2)
{
  if (a2) {
    CFDataRef Data = CFPropertyListCreateData(0, a2, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  }
  else {
    CFDataRef Data = 0;
  }
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  if (Data)
  {
    CFRelease(Data);
  }
}

CFPropertyListRef CalCalendarCopyBulkRequests(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFDataRef v4 = (const __CFData *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  CFPropertyListRef result = 0;
  if (v4)
  {
    CFPropertyListRef v6 = CFPropertyListCreateWithData(0, v4, 0, 0, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

void CalCalendarSetSubCalAccountID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetSubCalAccountID(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarSetSubCalAccountID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalCalendarCopySubCalAccountID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetPubCalAccountID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyPubCalAccountID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetPushKey(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyPushKey(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

BOOL CalCalendarGetColorComponents(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  return CalCalendarGetColorComponentsPossiblyForDisplay(a1, a2, a3, a4, 0);
}

BOOL CalCalendarGetColorComponentsPossiblyForDisplay(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, char a5)
{
  BOOL result = 0;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 && a3 && a4)
  {
    *a4 = -1;
    *a3 = -1;
    *a2 = -1;
    RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
    if (a5) {
      goto LABEL_26;
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    if (!CPRecordGetProperty())
    {
LABEL_26:
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13) {
              os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
      CFStringRef Property = (const __CFString *)CPRecordGetProperty();
      if (Property)
      {
        CFStringGetCString(Property, buffer, 100, 0x8000100u);
        sscanf(buffer, "#%02X%02X%02X", a2, a3, a4);
      }
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(RecordLock);
    }
    os_unfair_lock_unlock(RecordLock);
    return *a2 != -1 && *a3 != -1 && *a4 != -1;
  }
  return result;
}

void CalCalendarSetColorComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if ((a3 | a2 | a4) > 0xFF) {
    CFStringRef v9 = 0;
  }
  else {
    CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"#%02X%02X%02X", a2, a3, a4);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (v9) {
    CFRelease(v9);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarGetColorComponentsForDisplay(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  return CalCalendarGetColorComponentsPossiblyForDisplay(a1, a2, a3, a4, 1);
}

void CalCalendarSetColorComponentsForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if ((a3 | a2 | a4) > 0xFF) {
    CFStringRef v9 = 0;
  }
  else {
    CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"#%02X%02X%02X", a2, a3, a4);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (v9) {
    CFRelease(v9);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *CalCalendarCopySymbolicColorName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const void *)CPRecordGetProperty();
  CFAllocatorRef v5 = Property;
  if (Property) {
    CFRetain(Property);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalCalendarSetSymbolicColorName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *CalCalendarGetColorString(uint64_t a1)
{
  id v1 = CalCalendarCopyColorStringPossiblyForDisplay(a1, 0);
  uint64_t v2 = v1;
  if (v1) {
    CFAutorelease(v1);
  }
  return v2;
}

const void *CalCalendarCopyColorStringPossiblyForDisplay(uint64_t a1, char a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    goto LABEL_21;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (!CPRecordGetProperty())
  {
LABEL_21:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7) {
            os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    CFStringRef Property = (const void *)CPRecordGetProperty();
    CFPropertyListRef v6 = Property;
    if (Property) {
      CFRetain(Property);
    }
  }
  else
  {
    CFPropertyListRef v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

const void *CalCalendarCopyColorString(uint64_t a1)
{
  return CalCalendarCopyColorStringPossiblyForDisplay(a1, 0);
}

void CalCalendarSetColorString(uint64_t a1, const __CFString *a2)
{
}

void CalCalendarSetColorStringInternal(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
    if (CStringFromCFString)
    {
      CFPropertyListRef v6 = (char *)CStringFromCFString;
      uint64_t v10 = 0;
      int v9 = 0;
      sscanf(CStringFromCFString, "#%02X%02X%02X", (char *)&v10 + 4, &v10, &v9);
      free(v6);
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *CalCalendarGetColorStringForDisplay(uint64_t a1)
{
  id v1 = CalCalendarCopyColorStringPossiblyForDisplay(a1, 1);
  uint64_t v2 = v1;
  if (v1) {
    CFAutorelease(v1);
  }
  return v2;
}

const void *CalCalendarCopyColorStringForDisplay(uint64_t a1)
{
  return CalCalendarCopyColorStringPossiblyForDisplay(a1, 1);
}

uint64_t CalCalendarGetDisplayOrder(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

uint64_t _CalCalendarGetDisplayOrder(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void CalCalendarSetDisplayOrder(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetType(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyType(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarCopyType(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetDigest(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyDigest(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetSubscriptionID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySubscriptionID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetSubscriptionURL(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySubscriptionURL(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetRefreshInterval(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarGetRefreshInterval(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

uint64_t CalCalendarCopyLocale(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetLocale(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFStringRef CalCalendarCopyLanguage(uint64_t a1)
{
  CFStringRef v1 = (const __CFString *)CalCalendarCopyLocale(a1);
  if (v1)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v1, @"-");
    CFRelease(v1);
    if ([(__CFArray *)ArrayBySeparatingStrings count])
    {
      CFStringRef v1 = [(__CFArray *)ArrayBySeparatingStrings firstObject];
    }
    else
    {
      CFStringRef v1 = 0;
    }
  }
  return v1;
}

CFStringRef CalCalendarCopyRegion(uint64_t a1)
{
  CFStringRef v1 = (const __CFString *)CalCalendarCopyLocale(a1);
  if (v1)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v1, @"-");
    CFRelease(v1);
    CFStringRef v1 = 0;
    if ((unint64_t)[(__CFArray *)ArrayBySeparatingStrings count] >= 2)
    {
      CFStringRef v1 = [(__CFArray *)ArrayBySeparatingStrings objectAtIndex:1];
    }
  }
  return v1;
}

void CalCalendarSetStripAttachments(uint64_t a1)
{
}

BOOL CalCalendarGetStripAttachments(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x400000);
}

void CalCalendarSetStripAlarms(uint64_t a1)
{
}

BOOL CalCalendarGetStripAlarms(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x200000);
}

uint64_t CalCalendarMigrateSubscribedCalendarToStore(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  CFAllocatorRef v5 = (os_unfair_lock_s *)(DatabaseForRecord + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(DatabaseForRecord + 80));
  CFPropertyListRef v6 = (void *)_CalDatabaseCopyCalendar(DatabaseForRecord, a1);
  _CalStoreAddCalendar(a2, v6);
  _CalCalendarSetSubCalAccountID((uint64_t)v6);
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v7 = (id)_CalDatabaseCopyCalendarItemsWithCalendar(DatabaseForRecord);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v43 objects:v49 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v44 != v10) {
          objc_enumerationMutation(v7);
        }
        _CalCalendarAddCalendarItem(v6, *(const void **)(*((void *)&v43 + 1) + 8 * i));
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v43 objects:v49 count:16];
    }
    while (v9);
  }

  RecordCFTypeRef Store = _CalDatabaseGetRecordStore(DatabaseForRecord);
  if (__CalDatabaseBeginWriteTransaction(DatabaseForRecord, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalCalendar.m:4210"))
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    int v33 = (void *)a1;
    CPRecordProcessAddImmediate();
    int ID = CPRecordGetID();
    if (ID <= 0)
    {
      id v14 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_ERROR, "New calendar not assigned an ID when migrating calendar. This won't end well!", buf, 2u);
      }
    }
    _CalEventOccurrenceCacheBeginTrackingUpdates(*(CFMutableSetRef *)(DatabaseForRecord + 32));
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v15 = v7;
    uint64_t v16 = [v15 countByEnumeratingWithState:&v38 objects:v48 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)v39;
      do
      {
        for (uint64_t j = 0; j != v17; ++j)
        {
          if (*(void *)v39 != v18) {
            objc_enumerationMutation(v15);
          }
          if (CDBLockingAssertionsEnabled) {
            BOOL v20 = RecordStore == 0;
          }
          else {
            BOOL v20 = 1;
          }
          if (!v20)
          {
            CFRange v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21) {
              os_unfair_lock_assert_owner(v21 + 20);
            }
          }
          CPRecordProcessChangesImmediate();
        }
        uint64_t v17 = [v15 countByEnumeratingWithState:&v38 objects:v48 count:16];
      }
      while (v17);
    }

    _CalEventOccurrenceCacheStopTrackingUpdates(*(void *)(DatabaseForRecord + 32));
    __CalDatabaseCommitTransaction(DatabaseForRecord, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalCalendar.m:4233");
    CFNumberRef v22 = +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:DatabaseForRecord];
    unint64_t v23 = [v15 count] + 1;
    if (v23 < 0x201)
    {
      CFNumberRef v25 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v23];
      [v25 addObject:_CalCalendarGetRecordID((uint64_t)v6)];
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v26 = v15;
      uint64_t v27 = [v26 countByEnumeratingWithState:&v34 objects:v47 count:16];
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v29 = *(void *)v35;
        do
        {
          for (uint64_t k = 0; k != v28; ++k)
          {
            if (*(void *)v35 != v29) {
              objc_enumerationMutation(v26);
            }
            [v25 addObject:_CalCalendarItemGetRecordID(*(void *)(*((void *)&v34 + 1) + 8 * k))];
          }
          uint64_t v28 = [v26 countByEnumeratingWithState:&v34 objects:v47 count:16];
        }
        while (v28);
      }

      [v22 addChangeset:v25 deletes:MEMORY[0x1E4F1CBF0] clientID:0 changeType:0];
    }
    else
    {
      [v22 clearAllChangesets];
    }
    _CalRemoveCalendar(v33);
    CalDatabaseSaveWithOptions(DatabaseForRecord, 2);
    CFRelease(v6);

    uint64_t v24 = ID;
  }
  else
  {
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v5);
    }
    os_unfair_lock_unlock(v5);
    CFRelease(v6);
    uint64_t v24 = 0;
  }

  return v24;
}

void _CalCalendarAddCalendarItem(const void *a1, const void *a2)
{
  _CalCalendarItemSetCalendar((uint64_t)a2, a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (!Property)
  {
    uint64_t Property = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFPropertyListRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
    CFRelease(Property);
  }
  CFArrayAppendValue((CFMutableArrayRef)Property, a2);
}

void CalCalendarAddCalendarItem(const void *a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarAddCalendarItem(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarAddCalendarItemAndDetached(const void *a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarAddCalendarItem(a1, a2);
  if (_CalEntityGetType(a2) == 2)
  {
    CFArrayRef v5 = _CalEventCopyDetachedEvents((uint64_t)a2);
    if (v5)
    {
      CFArrayRef v6 = v5;
      CFIndex Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
          _CalCalendarAddCalendarItem(a1, ValueAtIndex);
        }
      }
      CFRelease(v6);
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyEvents()
{
  uint64_t v0 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  uint64_t v1 = CalDatabaseCopyCalendarItemsWithCalendar(v0);
  CFRelease(v0);
  return v1;
}

BOOL CalCalendarHasEvents(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  BOOL HasEvents = _CalDatabaseCalendarHasEvents((uint64_t)v3, a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  CFRelease(v3);
  return HasEvents;
}

BOOL CalCalendarHasEventsWithRoomAsAttendee(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  HasEventsWithAttendeeAsAttendeeint Type = _CalDatabaseCalendarHasEventsWithAttendeeAsAttendeeType((uint64_t)v3, a1, 2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  CFRelease(v3);
  return HasEventsWithAttendeeAsAttendeeType;
}

BOOL CalCalendarHasTasks(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  BOOL HasTasks = _CalDatabaseCalendarHasTasks((uint64_t)v3, a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  CFRelease(v3);
  return HasTasks;
}

void CalCalendarSetCanContainEntityType(uint64_t a1, unsigned int a2)
{
  if (a2 <= 3 && a2 != 1)
  {
    uint64_t v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (v4)
    {
      CFArrayRef v5 = v4;
      CFArrayRef v6 = v4 + 20;
      os_unfair_lock_lock(v4 + 20);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      int Property = CPRecordGetProperty();
      if (a2) {
        int v9 = 1 << a2;
      }
      else {
        int v9 = 0;
      }
      if (v9 != Property)
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10) {
                os_unfair_lock_assert_owner(v10 + 20);
              }
            }
          }
        }
        CPRecordSetProperty();
      }
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(v6);
      }
      os_unfair_lock_unlock(v6);
      CFRelease(v5);
    }
  }
}

os_unfair_lock_s *CalCalendarCopyEventsWithRespondedExternalStatus()
{
  BOOL result = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (result)
  {
    uint64_t v1 = result;
    Uint ID = CalCalendarGetUID();
    uint64_t v3 = CalDatabaseCopyOfAllEventsWithRespondedExternalStatusAndCalendarUID(v1, UID);
    CFRelease(v1);
    return (os_unfair_lock_s *)v3;
  }
  return result;
}

os_unfair_lock_s *CalCalendarCopyEventsWithExternalTrackingStatus()
{
  BOOL result = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (result)
  {
    uint64_t v1 = result;
    Uint ID = CalCalendarGetUID();
    uint64_t v3 = CalDatabaseCopyOfAllEventsWithExternalTrackingStatusAndCalendarUID(v1, UID);
    CFRelease(v1);
    return (os_unfair_lock_s *)v3;
  }
  return result;
}

uint64_t CalCalendarCopyTasks()
{
  uint64_t v0 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  uint64_t v1 = CalDatabaseCopyCalendarItemsWithCalendar(v0);
  CFRelease(v0);
  return v1;
}

CFMutableArrayRef CalDatabaseCopyOfAllCalendarsWithStoreUID(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = CalDatabaseCopyStoreWithUID(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    CFMutableArrayRef v5 = CalStoreCopyCalendars((uint64_t)v3);
    CFRelease(v4);
  }
  else
  {
    CFMutableArrayRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

CFIndex CalDatabaseGetCountOfCalendarsInStore(uint64_t a1, uint64_t a2)
{
  return CalDatabaseGetCountOfCalendarsInStoreWithOptions(a1, a2, 0);
}

CFIndex CalDatabaseGetCountOfCalendarsInStoreWithOptions(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = _CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, a2, a3);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  CFIndex Count = CFArrayGetCount(v3);
  CFRelease(v4);
  return Count;
}

void *_CalCalendarSetError(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  BOOL result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalCalendarSetError(uint64_t a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetError(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarCopyError(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Error = _CalCalendarGetError(a1);
  if (Error) {
    CFTypeRef v4 = CFRetain(Error);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalCalendarHasErrorTypeAndCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef result = CalCalendarCopyError(a1);
  if (result)
  {
    CFArrayRef v6 = result;
    Errorint Type = CalErrorGetErrorType((uint64_t)result);
    uint64_t ErrorCode = CalErrorGetErrorCode((uint64_t)v6);
    CFRelease(v6);
    return (CFTypeRef)(ErrorType == a2 && ErrorCode == a3);
  }
  return result;
}

CFTypeRef CalCalendarHasAccountErrorWithCode(uint64_t a1, uint64_t a2)
{
  return CalCalendarHasErrorTypeAndCode(a1, 0, a2);
}

CFTypeRef CalCalendarHasCalendarErrorWithCode(uint64_t a1, uint64_t a2)
{
  return CalCalendarHasErrorTypeAndCode(a1, 2, a2);
}

void *_CalCalendarSetImage(void *a1, uint64_t a2)
{
  CFTypeRef result = _CalCalendarGetImage((uint64_t)a1);
  if (result != (void *)a2)
  {
    if (result) {
      CFTypeRef result = (void *)_CalImageRemoveCalendar((uint64_t)result, a1);
    }
    if (a2)
    {
      return _CalImageAddCalendar(a2, a1);
    }
  }
  return result;
}

CFTypeRef _CalCalendarGetImage(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void CalCalendarSetImage(void *a1, uint64_t a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetImage(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarCopyImage(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Image = _CalCalendarGetImage(a1);
  if (Image) {
    CFTypeRef v4 = CFRetain(Image);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarAddSharee(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalToManyRelationAddObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalCalendarCopySharees(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarCopySharees(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void *_CalCalendarRemoveSharee(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

void CalCalendarRemoveSharee(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarRemoveSharee(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarAddNotification(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalToManyRelationAddObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalCalendarCopyNotifications(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarCopyNotifications(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarRemoveNotification(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalToManyRelationRemoveObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalCalendarCopyResourceChanges(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarCopyResourceChanges(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalCalendarCopySelfIdentityDisplayName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarCopySelfIdentityDisplayName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetSelfIdentityDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopySelfIdentityEmail(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityEmail(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarCopySelfIdentityEmail(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetSelfIdentityEmail(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopySelfIdentityPhoneNumber(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityPhoneNumber(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarCopySelfIdentityPhoneNumber(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetSelfIdentityPhoneNumber(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFStringRef _CalCalendarCopySelfIdentityAddress(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef result = (const __CFString *)CPRecordGetProperty();
  if (result)
  {
    return (const __CFString *)CFURLCreateWithString(0, result, 0);
  }
  return result;
}

CFStringRef CalCalendarCopySelfIdentityAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFStringRef v3 = _CalCalendarCopySelfIdentityAddress(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetSelfIdentityAddress(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a2) {
    CFURLGetString(a2);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopySelfIdentityFirstName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Name = _CalCalendarCopySelfIdentityFirstName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

void CalCalendarSetSelfIdentityFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopySelfIdentityLastName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Name = _CalCalendarCopySelfIdentityLastName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

void CalCalendarSetSelfIdentityLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityDisplayName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarCopyOwnerIdentityDisplayName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetOwnerIdentityDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityEmail(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityEmail(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarCopyOwnerIdentityEmail(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetOwnerIdentityEmail(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityPhoneNumber(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityPhoneNumber(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalCalendarCopyOwnerIdentityPhoneNumber(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetOwnerIdentityPhoneNumber(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFStringRef _CalCalendarCopyOwnerIdentityAddress(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef result = (const __CFString *)CPRecordGetProperty();
  if (result)
  {
    return (const __CFString *)CFURLCreateWithString(0, result, 0);
  }
  return result;
}

CFStringRef CalCalendarCopyOwnerIdentityAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFStringRef v3 = _CalCalendarCopyOwnerIdentityAddress(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetOwnerIdentityAddress(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a2) {
    CFURLGetString(a2);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityFirstName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Name = _CalCalendarCopyOwnerIdentityFirstName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

void CalCalendarSetOwnerIdentityFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityLastName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Name = _CalCalendarCopyOwnerIdentityLastName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

void CalCalendarSetOwnerIdentityLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyCalendarChangesInStore(const void *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2) {
    CFMutableArrayRef v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    CFMutableArrayRef v5 = (os_unfair_lock_s *)CFRetain(a1);
  }
  CFArrayRef v6 = v5;
  id v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v8 = _CalCalendarCopyChangeHistoryWhereClauseForStore((uint64_t)v6, a2);
  if (!a3)
  {
LABEL_7:
    RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)v6);
    if (CDBLockingAssertionsEnabled) {
      BOOL v11 = RecordStore == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t v13 = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
    if (v8) {
      CFRelease(v8);
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v7);
    }
    os_unfair_lock_unlock(v7);
    CFRelease(v6);
    return v13;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    *a3 = Mutable;
    goto LABEL_7;
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0xFFFFFFFFLL;
}

CFStringRef _CalCalendarCopyChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN     (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN     (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 1, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveCalendarChangesInStoreToIndex(const void *a1, uint64_t a2, int a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  if (a2) {
    CFMutableArrayRef v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    CFMutableArrayRef v5 = (os_unfair_lock_s *)CFRetain(a1);
  }
  CFStringRef v6 = v5;
  id v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  _DWORD v10[2] = __CalDatabaseRemoveCalendarChangesInStoreToIndex_block_invoke;
  v10[3] = &unk_1E5D61B08;
  v10[4] = &v12;
  v10[5] = v6;
  void v10[6] = a2;
  int v11 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v6, (uint64_t)v10);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);
  CFRelease(v6);
  uint64_t v8 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1A8EDFCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveCalendarChangesInStoreToIndex_block_invoke(void *a1)
{
  uint64_t result = _CalDatabaseRemoveCalendarChangesInStoreToIndex(a1[5], a1[6]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t _CalDatabaseRemoveCalendarChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = _CalCalendarCopyChangeHistoryWhereClauseForStore(a1, a2);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

uint64_t CalDatabaseRemoveCalendarChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  CFTypeRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = __CalDatabaseRemoveCalendarChangesWithIndices_block_invoke;
  v7[3] = &unk_1E5D61B30;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A8EDFEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveCalendarChangesWithIndices_block_invoke(uint64_t a1)
{
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassWithIndices();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseCopyCalendarChangesWithIndicesInStore(const void *a1, uint64_t a2)
{
  if (a2) {
    BOOL v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    BOOL v3 = (os_unfair_lock_s *)CFRetain(a1);
  }
  CFTypeRef v4 = v3;
  uint64_t v5 = v3 + 20;
  os_unfair_lock_lock(v3 + 20);
  CFStringRef v6 = _CalCalendarCopyChangeHistoryWhereClauseForStore((uint64_t)v4, a2);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)v4);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v10 = CPRecordStoreGetChangesAndChangeIndicesForClassWithProperties();
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5);
  }
  os_unfair_lock_unlock(v5);
  CFRelease(v4);
  return v10;
}

void CalCalendarClearExternalProperties(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        char v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  if (a2)
  {
    uint64_t v13 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (v13)
    {
      uint64_t v14 = v13;
      CFArrayRef v15 = (const __CFArray *)CalDatabaseCopyCalendarItemsWithCalendar(v13);
      if (v15)
      {
        CFArrayRef v16 = v15;
        CFIndex Count = CFArrayGetCount(v15);
        if (Count >= 1)
        {
          CFIndex v18 = Count;
          for (CFIndex i = 0; i != v18; ++i)
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v16, i);
            CalCalendarItemClearExternalProperties(ValueAtIndex, 1);
          }
        }
        CFRelease(v16);
      }
      CFRelease(v14);
    }
  }
}

uint64_t _CalDatabasePrepareCalendarsInStoreForMigration(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t ID = CPRecordGetID();
  uint64_t result = _CalDatabaseRemoveCalendarChangesInStoreToIndex(a1, a3);
  if (result)
  {
    uint64_t result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE Calendar SET external_id = NULL, external_mod_tag = NULL, external_id_tag = NULL, external_rep = NULL, shared_owner_name = NULL, shared_owner_address = NULL, sharing_status = 0, sync_token = NULL, is_published = 0, published_URL = NULL WHERE store_id = %d;",
                        ID);
    if (result)
    {
      BOOL v8 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v8);
      return 1;
    }
  }
  return result;
}

BOOL _CalDatabaseMigrateCalendarsWithConnection(void *a1)
{
  uint64_t ID = CPRecordGetID();
  uint64_t v3 = CPRecordGetID();
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE Calendar SET store_id = %d WHERE store_id = %d AND ROWID != %d;",
         v3,
         ID,
         1);
  if (v4)
  {
    CalPerformSQLWithConnection(a1, (uint64_t)v4);
    CFRelease(v4);
  }
  return v4 != 0;
}

BOOL _CalDatabaseMigrateCalendarWithConnection(void *a1)
{
  uint64_t ID = CPRecordGetID();
  uint64_t v3 = CPRecordGetID();
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v5 = CPRecordGetID();
  CFStringRef v6 = CFStringCreateWithFormat(v4, 0, @"UPDATE Calendar SET store_id = %d WHERE store_id = %d AND ROWID = %d;",
         v3,
         ID,
         v5);
  if (v6)
  {
    CalPerformSQLWithConnection(a1, (uint64_t)v6);
    CFRelease(v6);
  }
  return v6 != 0;
}

CFMutableArrayRef _CalCalendarCopyAlarms(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFArrayRef _CalCalendarAddAlarm(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void *_CalCalendarRemoveAlarm(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

uint64_t _CalCalendarHasAlarms(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationHasObjects(result);
  }
  return result;
}

uint64_t CalCalendarHasAlarms(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t HasAlarms = _CalCalendarHasAlarms(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return HasAlarms;
}

CFMutableArrayRef CalCalendarCopyAlarms(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalCalendarCopyAlarms(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarAddAlarm(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarAddAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarRemoveAlarm(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarRemoveAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalCalendarLoadSelfIdentityProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    uint64_t Store = CPRecordGetStore();
    IdentityWithRowuint64_t ID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      uint64_t v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFStringRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      uint64_t v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        uint64_t v10 = (const void *)v9;
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              char v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11) {
                os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

void _CalCalendarLoadOwnerIdentityProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    uint64_t Store = CPRecordGetStore();
    IdentityWithRowuint64_t ID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      uint64_t v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFStringRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      uint64_t v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        uint64_t v10 = (const void *)v9;
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              char v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11) {
                os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

void _CalCalendarMigrateSubscribedCalendarExternalID(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  CFAllocatorRef v4 = sqlite3_value_text(*a3);
  if (v4)
  {
    uint64_t v5 = (void *)[[NSString alloc] initWithBytesNoCopy:v4 length:strlen((const char *)v4) encoding:4 freeWhenDone:0];
    id v10 = [MEMORY[0x1E4F1CB10] URLWithString:v5];
    if (v10
      && ([v10 path],
          CFStringRef v6 = objc_claimAutoreleasedReturnValue(),
          [v6 appendSlashIfNeeded],
          id v7 = (id)objc_claimAutoreleasedReturnValue(),
          v6,
          v7)
      || (id v7 = v5) != 0)
    {
      id v8 = v7;
      uint64_t v9 = strdup((const char *)[v8 UTF8String]);
      sqlite3_result_text(a1, v9, -1, MEMORY[0x1E4F14838]);

      goto LABEL_8;
    }
  }
  else
  {
    id v10 = 0;
  }
  sqlite3_result_null(a1);
LABEL_8:
}

uint64_t _CalCalendarValidateIdentityForProperties(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFStringRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    CFStringRef Property = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
    CFStringRef v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CFStringRef v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    CFStringRef v13 = (const __CFString *)result;
    if (Property && (uint64_t result = CFStringGetLength(Property)) != 0)
    {
      if (!a2) {
        return result;
      }
    }
    else
    {
      if (!v9) {
        return result;
      }
      uint64_t result = CFStringGetLength(v9);
      if (!a2 || !result) {
        return result;
      }
    }
    uint64_t result = _CalIdentityGetID(Property, v9, v11, v13, a2);
    if (result != -1)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
      CPRecordSetProperty();
      uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
      return _CalDatabaseSetChangeFlags(DatabaseForRecord, 1);
    }
  }
  return result;
}

uint64_t __CalDatabaseSetDefaultCalendarForEntityType_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (*(void *)(a1 + 40))
  {
    if (v4)
    {
      if (*(void *)v2)
      {
        if (*(void *)(*(void *)v2 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
    uint64_t v6 = *(void *)(a1 + 48);
    if (CDBLockingAssertionsEnabled) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      if (*(void *)v6)
      {
        if (*(void *)(*(void *)v6 + 104))
        {
          id v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
    _CalCalendarGetStoreId(*(void *)(a1 + 40));
    CPSqliteConnectionSetIntegerForProperty();
    uint64_t v9 = *(void *)(a1 + 48);
    if (CDBLockingAssertionsEnabled) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      if (*(void *)v9)
      {
        if (*(void *)(*(void *)v9 + 104))
        {
          CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    _CalCalendarGetTitle(*(void *)(a1 + 40));
  }
  else
  {
    if (v4)
    {
      if (*(void *)v2)
      {
        if (*(void *)(*(void *)v2 + 104))
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
    uint64_t v13 = *(void *)(a1 + 48);
    if (CDBLockingAssertionsEnabled) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      if (*(void *)v13)
      {
        if (*(void *)(*(void *)v13 + 104))
        {
          CFArrayRef v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15) {
            os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
    uint64_t v16 = *(void *)(a1 + 48);
    if (CDBLockingAssertionsEnabled) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      if (*(void *)v16)
      {
        if (*(void *)(*(void *)v16 + 104))
        {
          CFIndex v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18) {
            os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
  }
  return CPSqliteConnectionSetValueForProperty();
}

uint64_t _CalCalendarRemoveAddedSubentity(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreRemoveRecord();
}

uint64_t __GatherColorCounts(uint64_t a1, const __CFDictionary *a2)
{
  int v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if ((sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1) & 2) == 0)
  {
    if (v4)
    {
      CFStringRef v5 = CFStringCreateWithCString(0, (const char *)v4, 0x8000100u);
      if (v5)
      {
        CFStringRef v6 = v5;
        _UpdateColorCountsWithColorString(v5, a2);
        CFRelease(v6);
      }
    }
  }
  return 0;
}

uint64_t _CompareColorFrequencies(void *key, const void *a2, CFDictionaryRef theDict)
{
  signed int Value = CFDictionaryGetValue(theDict, key);
  signed int v6 = CFDictionaryGetValue(theDict, a2);
  if (Value < v6) {
    return -1;
  }
  else {
    return Value > v6;
  }
}

void _UpdateColorCountsWithColorString(const __CFString *a1, const __CFDictionary *a2)
{
  if (a1)
  {
    CFArrayRef v4 = (const __CFArray *)EKGetDefaultCalendarColors();
    CFIndex Count = CFArrayGetCount(v4);
    float HueFromColorString = _GetHueFromColorString(a1);
    if (Count >= 1)
    {
      float v7 = HueFromColorString;
      uint64_t v8 = 1;
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, v8 - 1);
        float v10 = v7 - _GetHueFromColorString(ValueAtIndex);
        if (v10 < 0.0) {
          float v10 = -v10;
        }
        if (v10 >= 0.004) {
          CFStringRef ValueAtIndex = 0;
        }
        if (v8 >= Count) {
          break;
        }
        ++v8;
      }
      while (!ValueAtIndex);
      if (ValueAtIndex)
      {
        CFStringRef v11 = (const void *)(int)(CFDictionaryGetValue(a2, ValueAtIndex) + 1);
        CFDictionarySetValue(a2, ValueAtIndex, v11);
      }
    }
  }
}

float _GetHueFromColorString(const __CFString *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v21 = 0;
  uint64_t v20 = 0;
  CFStringGetCString(a1, buffer, 100, 0x8000100u);
  sscanf(buffer, "#%02X%02X%02X", &v21, (char *)&v20 + 4, &v20);
  float v1 = (double)v21 / 255.0;
  float v2 = (double)SHIDWORD(v20) / 255.0;
  double v3 = (double)(int)v20 / 255.0;
  float v4 = v3;
  BOOL v5 = v1 < v2 || v1 < v4;
  if (v5)
  {
    if (v2 < v1 || v2 < v4)
    {
      if (v2 >= v1) {
        float v7 = (double)v21 / 255.0;
      }
      else {
        float v7 = (double)SHIDWORD(v20) / 255.0;
      }
      float v8 = v3;
    }
    else
    {
      if (v1 >= v4) {
        float v7 = v3;
      }
      else {
        float v7 = (double)v21 / 255.0;
      }
      float v8 = (double)SHIDWORD(v20) / 255.0;
    }
  }
  else
  {
    if (v2 >= v4) {
      float v7 = v3;
    }
    else {
      float v7 = (double)SHIDWORD(v20) / 255.0;
    }
    float v8 = (double)v21 / 255.0;
  }
  float result = 0.0;
  if (v8 > 0.0 && vabds_f32(v8, v7) >= 0.00000011921)
  {
    float v10 = vabds_f32(v8, v1);
    float v11 = vabds_f32(v8, v2);
    BOOL v5 = vabds_f32(v7, v1) < 0.00000011921;
    float v12 = (float)(v8 - v1) / (float)(v8 - v7);
    float v13 = 5.0 - v12;
    float v14 = (float)(v8 - v2) / (float)(v8 - v7);
    if (v5) {
      float v13 = v14 + 3.0;
    }
    float v15 = vabds_f32(v7, v4);
    float v16 = (float)(v8 - v4) / (float)(v8 - v7);
    float v17 = 3.0 - v16;
    float v18 = v12 + 1.0;
    if (v15 < 0.00000011921) {
      float v17 = v18;
    }
    if (v11 >= 0.00000011921) {
      float v17 = v13;
    }
    float v19 = v16 + 5.0;
    if (vabds_f32(v7, v2) >= 0.00000011921) {
      float v19 = 1.0 - v14;
    }
    if (v10 >= 0.00000011921) {
      float v19 = v17;
    }
    return v19 / 6.0;
  }
  return result;
}

void _UpdateColorCountsWithCalendar(uint64_t a1, const __CFDictionary *a2)
{
  if (!_CalCalendarGetFlag(a1, 2))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CFStringRef Property = (const __CFString *)CPRecordGetProperty();
    _UpdateColorCountsWithColorString(Property, a2);
  }
}

void CalDatabasePerformMigrationBetweenDirectoriesIfNeeded(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  id v82 = a1;
  id v83 = a2;
  id v81 = a3;
  id v80 = a4;
  id v84 = [v80 lastObject];
  if (v84)
  {
    id v7 = v82;
    id v8 = v84;
    uint64_t v9 = [v83 URLByAppendingPathComponent:v8];
    if ([v9 checkResourceIsReachableAndReturnError:0])
    {

      goto LABEL_81;
    }
    float v10 = [v7 URLByAppendingPathComponent:v8];
    char v11 = [v10 checkResourceIsReachableAndReturnError:0];

    if ((v11 & 1) == 0)
    {
LABEL_81:
      uint64_t v79 = CDBGroupContainerMigrationHandle;
      if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)os_log_type_t v125 = v8;
        uint64_t v75 = "Skipping migration because %@ is already migrated";
        id v76 = v79;
        os_log_type_t v77 = OS_LOG_TYPE_INFO;
        uint32_t v78 = 12;
        goto LABEL_83;
      }
      goto LABEL_84;
    }
  }
  float v12 = (void *)CDBGroupContainerMigrationHandle;
  if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_DEFAULT))
  {
    float v13 = v12;
    *(_DWORD *)long long buf = 134218754;
    *(void *)os_log_type_t v125 = [v81 count];
    *(_WORD *)&v125[8] = 2048;
    uint64_t v126 = [v80 count];
    *(_WORD *)id v127 = 2112;
    *(void *)&v127[2] = v82;
    __int16 v128 = 2112;
    id v129 = v83;
    _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_DEFAULT, "Beginning migration of up to %lu directories and %lu files from %@ to %@", buf, 0x2Au);
  }
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  int v103 = 0;
  if (v81)
  {
    id v88 = v82;
    id v87 = v83;
    id v14 = v81;
    uint64_t v97 = [MEMORY[0x1E4F28CB8] defaultManager];
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    obuint64_t j = v14;
    uint64_t v89 = [obj countByEnumeratingWithState:&v107 objects:buf count:16];
    if (!v89) {
      goto LABEL_55;
    }
    uint64_t v86 = *(void *)v108;
    uint64_t v15 = *MEMORY[0x1E4F1C628];
    uint64_t v16 = *MEMORY[0x1E4F1C658];
    id v94 = (id)*MEMORY[0x1E4F281F8];
    while (1)
    {
      for (uint64_t i = 0; i != v89; ++i)
      {
        if (*(void *)v108 != v86) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void *)(*((void *)&v107 + 1) + 8 * i);
        float v18 = CDBGroupContainerMigrationHandle;
        if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_INFO))
        {
          LODWORD(v121) = 138543362;
          *(void *)((char *)&v121 + 4) = v17;
          _os_log_impl(&dword_1A8E81000, v18, OS_LOG_TYPE_INFO, "Beginning migration for directory %{public}@", (uint8_t *)&v121, 0xCu);
        }
        *(void *)&long long v121 = 0;
        *((void *)&v121 + 1) = &v121;
        uint64_t v122 = 0x2020000000;
        char v123 = 1;
        uint64_t v92 = [v88 URLByAppendingPathComponent:v17 isDirectory:1];
        uint64_t v99 = [v87 URLByAppendingPathComponent:v17 isDirectory:1];
        uint64_t v91 = v17;
        v120[0] = v15;
        v120[1] = v16;
        float v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v120 count:2];
        *(void *)int v115 = MEMORY[0x1E4F143A8];
        *(void *)&v115[8] = 3221225472;
        *(void *)&v115[16] = __CalDatabaseMigrateDirectories_block_invoke;
        uint64_t v116 = &unk_1E5D64C98;
        double v119 = &v101;
        uint64_t v117 = v17;
        uint64_t v118 = &v121;
        uint64_t v20 = [v97 enumeratorAtURL:v92 includingPropertiesForKeys:v19 options:16 errorHandler:v115];

        int v21 = 0;
        char v22 = 0;
        while (1)
        {
          uint64_t v23 = [v20 nextObject];

          if (!v23) {
            break;
          }
          uint64_t v24 = [v23 relativePath];
          v114[0] = v15;
          v114[1] = v16;
          CFNumberRef v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:v114 count:2];
          id v26 = [v23 resourceValuesForKeys:v25 error:0];

          uint64_t v27 = [v26 objectForKeyedSubscript:v15];
          if ([v27 BOOLValue])
          {
          }
          else
          {
            uint64_t v28 = [v26 objectForKeyedSubscript:v16];
            int v29 = [v28 BOOLValue];

            if (!v29)
            {
              if ((v22 & 1) == 0)
              {
                id v106 = 0;
                char v31 = [v97 createDirectoryAtURL:v99 withIntermediateDirectories:1 attributes:0 error:&v106];
                id v32 = v106;
                if ((v31 & 1) == 0)
                {
                  int v33 = CDBGroupContainerMigrationHandle;
                  if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)uint64_t v111 = 138543618;
                    *(void *)&v111[4] = v91;
                    __int16 v112 = 2112;
                    id v113 = v32;
                    _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_ERROR, "Error migrating directory %{public}@: can't create target directory: %@", v111, 0x16u);
                  }
                }
              }
              long long v34 = [v99 URLByAppendingPathComponent:v24];
              id v105 = 0;
              char v35 = [v97 moveItemAtURL:v23 toURL:v34 error:&v105];
              id v36 = v105;
              long long v37 = v36;
              if (v35)
              {
                long long v38 = CDBGroupContainerMigrationHandle;
                if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)uint64_t v111 = 138543362;
                  *(void *)&v111[4] = v24;
                  _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_INFO, "Migrated file %{public}@", v111, 0xCu);
                }
                ++v103;
                goto LABEL_41;
              }
              long long v39 = [v36 domain];
              if ([v39 isEqualToString:v94])
              {
                BOOL v40 = [v37 code] == 516;

                if (v40)
                {
                  long long v41 = CDBGroupContainerMigrationHandle;
                  if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)uint64_t v111 = 138543362;
                    *(void *)&v111[4] = v24;
                    _os_log_impl(&dword_1A8E81000, v41, OS_LOG_TYPE_INFO, "Skipping migrating file %{public}@ because the file already exists in the destination", v111, 0xCu);
                  }
                  id v42 = &v101;
LABEL_40:
                  ++*(_DWORD *)v42;
                  *(unsigned char *)(*((void *)&v121 + 1) + 24) = 0;
LABEL_41:

                  char v22 = 1;
                  goto LABEL_42;
                }
              }
              else
              {
              }
              long long v43 = CDBGroupContainerMigrationHandle;
              BOOL v44 = os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_ERROR);
              id v42 = (uint64_t *)((char *)&v102 + 4);
              if (v44)
              {
                *(_DWORD *)uint64_t v111 = 138543618;
                *(void *)&v111[4] = v24;
                __int16 v112 = 2112;
                id v113 = v37;
                _os_log_impl(&dword_1A8E81000, v43, OS_LOG_TYPE_ERROR, "Error migrating %{public}@: %@", v111, 0x16u);
                id v42 = (uint64_t *)((char *)&v102 + 4);
              }
              goto LABEL_40;
            }
          }
          uint64_t v30 = CDBGroupContainerMigrationHandle;
          if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v111 = 138412290;
            *(void *)&v111[4] = v24;
            _os_log_impl(&dword_1A8E81000, v30, OS_LOG_TYPE_INFO, "Skipped unexpected file %@", v111, 0xCu);
          }
          ++HIDWORD(v101);
          *(unsigned char *)(*((void *)&v121 + 1) + 24) = 0;
LABEL_42:

          int v21 = v23;
        }
        if (*(unsigned char *)(*((void *)&v121 + 1) + 24))
        {
          id v104 = 0;
          char v45 = [v97 removeItemAtURL:v92 error:&v104];
          id v46 = v104;
          uint64_t v47 = CDBGroupContainerMigrationHandle;
          if (v45)
          {
            if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t v111 = 138543362;
              *(void *)&v111[4] = v91;
              uint64_t v48 = v47;
              os_log_type_t v49 = OS_LOG_TYPE_INFO;
              uint64_t v50 = "Removed successfully migrated directory %{public}@";
              uint32_t v51 = 12;
              goto LABEL_51;
            }
          }
          else if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v111 = 138543618;
            *(void *)&v111[4] = v91;
            __int16 v112 = 2112;
            id v113 = v46;
            uint64_t v48 = v47;
            os_log_type_t v49 = OS_LOG_TYPE_ERROR;
            uint64_t v50 = "Error removing source directory %{public}@: %@";
            uint32_t v51 = 22;
LABEL_51:
            _os_log_impl(&dword_1A8E81000, v48, v49, v50, v111, v51);
          }
        }
        else
        {
          __int16 v52 = CDBGroupContainerMigrationHandle;
          if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v111 = 138543362;
            *(void *)&v111[4] = v91;
            _os_log_impl(&dword_1A8E81000, v52, OS_LOG_TYPE_INFO, "Skipped removing migrated directory %{public}@ because there are unmigrated files in it", v111, 0xCu);
          }
        }

        _Block_object_dispose(&v121, 8);
      }
      uint64_t v89 = [obj countByEnumeratingWithState:&v107 objects:buf count:16];
      if (!v89)
      {
LABEL_55:

        break;
      }
    }
  }
  if (v80)
  {
    id v96 = v82;
    id v100 = v83;
    id v53 = v80;
    uint64_t v98 = [MEMORY[0x1E4F28CB8] defaultManager];
    *(void *)&long long v121 = 0;
    char v54 = [v98 createDirectoryAtURL:v100 withIntermediateDirectories:1 attributes:0 error:&v121];
    id v55 = (id)v121;
    if ((v54 & 1) == 0)
    {
      __int16 v56 = CDBGroupContainerMigrationHandle;
      if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412546;
        *(void *)os_log_type_t v125 = v100;
        *(_WORD *)&v125[8] = 2112;
        uint64_t v126 = (uint64_t)v55;
        _os_log_impl(&dword_1A8E81000, v56, OS_LOG_TYPE_ERROR, "Error migrating: can't create new directory %@: %@", buf, 0x16u);
      }
    }
    long long v109 = 0u;
    long long v110 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    id v95 = v53;
    uint64_t v57 = [v95 countByEnumeratingWithState:&v107 objects:buf count:16];
    if (v57)
    {
      uint64_t v58 = *(void *)v108;
      uint64_t v93 = *MEMORY[0x1E4F281F8];
      do
      {
        for (uint64_t j = 0; j != v57; ++j)
        {
          if (*(void *)v108 != v58) {
            objc_enumerationMutation(v95);
          }
          uint64_t v60 = *(void *)(*((void *)&v107 + 1) + 8 * j);
          __int16 v61 = [v96 URLByAppendingPathComponent:v60];
          id v62 = [v100 URLByAppendingPathComponent:v60];
          *(void *)uint64_t v111 = 0;
          char v63 = [v98 moveItemAtURL:v61 toURL:v62 error:v111];
          id v64 = *(id *)v111;
          __int16 v65 = v64;
          if (v63)
          {
            id v66 = CDBGroupContainerMigrationHandle;
            BOOL v67 = os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_INFO);
            id v68 = (uint64_t *)&v103;
            if (v67)
            {
              *(_DWORD *)int v115 = 138543362;
              *(void *)&v115[4] = v60;
              _os_log_impl(&dword_1A8E81000, v66, OS_LOG_TYPE_INFO, "Migrated file %{public}@", v115, 0xCu);
              id v68 = (uint64_t *)&v103;
            }
            goto LABEL_76;
          }
          id v69 = [v64 domain];
          if ([v69 isEqualToString:v93])
          {
            BOOL v70 = [v65 code] == 516;

            if (v70)
            {
              long long v71 = CDBGroupContainerMigrationHandle;
              if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)int v115 = 138543362;
                *(void *)&v115[4] = v60;
                _os_log_impl(&dword_1A8E81000, v71, OS_LOG_TYPE_INFO, "Skipping migrating file %{public}@ because the file already exists in the destination", v115, 0xCu);
              }
              id v68 = &v101;
              goto LABEL_76;
            }
          }
          else
          {
          }
          long long v72 = CDBGroupContainerMigrationHandle;
          BOOL v73 = os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_ERROR);
          id v68 = (uint64_t *)((char *)&v102 + 4);
          if (v73)
          {
            *(_DWORD *)int v115 = 138543618;
            *(void *)&v115[4] = v60;
            *(_WORD *)&v115[12] = 2112;
            *(void *)&v115[14] = v65;
            _os_log_impl(&dword_1A8E81000, v72, OS_LOG_TYPE_ERROR, "Error migrating %{public}@: %@", v115, 0x16u);
            id v68 = (uint64_t *)((char *)&v102 + 4);
          }
LABEL_76:
          ++*(_DWORD *)v68;
        }
        uint64_t v57 = [v95 countByEnumeratingWithState:&v107 objects:buf count:16];
      }
      while (v57);
    }
  }
  uint64_t v74 = CDBGroupContainerMigrationHandle;
  if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)os_log_type_t v125 = v103;
    *(_WORD *)&v125[4] = 1024;
    *(_DWORD *)&v125[6] = v101;
    LOWORD(v126) = 1024;
    *(_DWORD *)((char *)&v126 + 2) = HIDWORD(v101);
    HIWORD(v126) = 1024;
    *(_DWORD *)id v127 = HIDWORD(v102);
    uint64_t v75 = "Finished migration. Successfully moved %i files. Skipped %i files or directories that already existed in the d"
          "estination directory. Skipped %i subdirectories. Failed to move %i files.";
    id v76 = v74;
    os_log_type_t v77 = OS_LOG_TYPE_DEFAULT;
    uint32_t v78 = 26;
LABEL_83:
    _os_log_impl(&dword_1A8E81000, v76, v77, v75, buf, v78);
  }
LABEL_84:
}

void sub_1A8EE234C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseMigrateDirectories_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 domain];
  if ([v7 isEqualToString:*MEMORY[0x1E4F28798]])
  {
    uint64_t v8 = [v6 code];

    if (v8 == 2)
    {
      ++*(_DWORD *)(a1[6] + 8);
      goto LABEL_7;
    }
  }
  else
  {
  }
  uint64_t v9 = CDBGroupContainerMigrationHandle;
  if (os_log_type_enabled((os_log_t)CDBGroupContainerMigrationHandle, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = a1[4];
    int v12 = 138543874;
    uint64_t v13 = v10;
    __int16 v14 = 2112;
    id v15 = v5;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_ERROR, "Error migrating %{public}@; encountered error for %@: %@",
      (uint8_t *)&v12,
      0x20u);
  }
LABEL_7:
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;

  return 1;
}

void CalParticipantPropagateUUIDsFromMainEventToDetachments(uint64_t a1)
{
  CFMutableArrayRef v2 = CalEventCopyDetachedEvents(a1);
  if (v2)
  {
    CFMutableArrayRef v36 = v2;
    long long v34 = (void *)CalEventCopyAttendees(a1);
    if (v34)
    {
      double v3 = objc_opt_new();
      float v4 = objc_opt_new();
      uint64_t v5 = CalEventCopyOrganizer(a1);
      if (v5)
      {
        id v6 = (const void *)v5;
        uint64_t v7 = CalParticipantSemanticIdentifier(v5);
        uint64_t v8 = CalOrganizerCopyUUID(v6);
        char v35 = (__CFString *)v8;
        if (v7 && v8) {
          [v4 setObject:v8 forKeyedSubscript:v7];
        }
        CFRelease(v6);
      }
      else
      {
        char v35 = 0;
        uint64_t v7 = 0;
      }
      if (objc_msgSend(v34, "count", v7))
      {
        for (unint64_t i = 0; i < [v34 count]; ++i)
        {
          uint64_t v10 = [v34 objectAtIndexedSubscript:i];

          char v11 = CalParticipantSemanticIdentifier((uint64_t)v10);
          int v12 = (void *)CalAttendeeCopyUUID(v10);
          Entityint Type = CalParticipantGetEntityType((uint64_t)v10);
          if (!v11 || !v12) {
            goto LABEL_18;
          }
          if (EntityType == 8)
          {
            __int16 v14 = [v4 objectForKeyedSubscript:v11];

            id v15 = v4;
            if (!v14) {
              goto LABEL_17;
            }
          }
          else
          {
            __int16 v16 = [v3 objectForKeyedSubscript:v11];

            id v15 = v3;
            if (!v16) {
LABEL_17:
            }
              [v15 setObject:v12 forKeyedSubscript:v11];
          }
LABEL_18:
        }
      }
      if ([(__CFArray *)v36 count])
      {
        unint64_t v17 = 0;
        do
        {
          uint64_t v18 = [(__CFArray *)v36 objectAtIndexedSubscript:v17];

          uint64_t v19 = CalEventCopyOrganizer(v18);
          if (v19)
          {
            uint64_t v20 = (const void *)v19;
            int v21 = CalParticipantSemanticIdentifier(v19);
            uint64_t v22 = CalOrganizerCopyUUID(v20);
            uint64_t v23 = (void *)v22;
            if (v21 && v22)
            {
              if (v35) {
                CalParticipantSetUUID((uint64_t)v20, v35);
              }
              else {
                [v4 setObject:v22 forKeyedSubscript:v21];
              }
            }
            CFRelease(v20);
          }
          uint64_t v24 = (void *)CalEventCopyAttendees(v18);
          if ([v24 count])
          {
            unint64_t v25 = 0;
            do
            {
              id v26 = [v24 objectAtIndexedSubscript:v25];

              uint64_t v27 = CalParticipantSemanticIdentifier((uint64_t)v26);
              uint64_t v28 = (void *)CalAttendeeCopyUUID(v26);
              int v29 = CalParticipantGetEntityType((uint64_t)v26);
              if (v27 && v28)
              {
                if (v29 == 8) {
                  uint64_t v30 = v4;
                }
                else {
                  uint64_t v30 = v3;
                }
                id v31 = v30;
                id v32 = [v31 objectForKeyedSubscript:v27];
                if (v32) {
                  CalParticipantSetUUID((uint64_t)v26, v32);
                }
                else {
                  [v31 setObject:v28 forKeyedSubscript:v27];
                }
              }
              ++v25;
            }
            while (v25 < [v24 count]);
          }

          ++v17;
        }
        while (v17 < [(__CFArray *)v36 count]);
      }
    }
    CFMutableArrayRef v2 = v36;
  }
}

BOOL CalAttendeeUpdateFromICSUserAddress(void *a1, const void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if (a2)
  {
    id v9 = a4;
    uint64_t v10 = [v7 cn];

    if (v10)
    {
      char v11 = [v7 cn];
      CalAttendeeSetDisplayName(a2, v11);
    }
    CalAttendeeSetAddress(a2, [v7 value]);
    CalAttendeeSetEmailAddress(a2, [v7 emailAddress]);
    CalAttendeeSetPhoneNumber(a2, [v7 phoneNumber]);
    unsigned int v12 = CalAttendeeTypeFromICSCalendarUser([v7 cutype]);
    CalAttendeeSetType((uint64_t)a2, v12);
    int v13 = CalAttendeeStatusFromICSParticipationStatus([v7 partstat]);
    CalAttendeeSetStatus(a2, v13);
    unsigned int v14 = CalAttendeeRoleFromICSRole([v7 role]);
    CalAttendeeSetRole((uint64_t)a2, v14);
    id v15 = [v9 valueForKey:@"ItemBridgeOptions"];

    uint64_t v16 = [v15 unsignedIntegerValue];
    unsigned int v17 = CalScheduleAgentFromICSScheduleAgent([v7 scheduleAgentWithDefaultValue:2 * ((~v16 & 2) == 0)]);
    CalParticipantSetScheduleAgent((uint64_t)a2, v17);
    CalParticipantSetRSVP((uint64_t)a2, [v7 rsvp]);
    CalAttendeeSetScheduleStatus((uint64_t)a2, [v7 schedulestatus]);
    CalAttendeeSetScheduleForceSend(a2, [v7 scheduleforcesend] != 0);
    uint64_t v18 = [v7 partstatModified];
    uint64_t v19 = (double *)MEMORY[0x1E4F57888];
    if (v18)
    {
      id v20 = objc_alloc(MEMORY[0x1E4FB7F28]);
      int v21 = [v7 partstatModified];
      uint64_t v22 = (void *)[v20 initWithValue:v21];

      double v23 = CalDateFromICSDate(v22, v8);
      if (vabdd_f64(v23, *v19) >= 2.22044605e-16) {
        CalAttendeeSetLastModified((uint64_t)a2, v23);
      }
    }
    uint64_t v24 = [v7 alternateTimeProposal];

    if (v24)
    {
      id v25 = objc_alloc(MEMORY[0x1E4FB7F28]);
      id v26 = [v7 alternateTimeProposal];
      uint64_t v27 = [v26 startDate];
      uint64_t v28 = (void *)[v25 initWithValue:v27];

      double v29 = CalDateFromICSDateAsUTC(v28);
      CalAttendeeSetProposedStartDate((uint64_t)a2, v29);
      uint64_t v30 = [v7 alternateTimeProposal];
      CalAttendeeSetProposedStartDateStatus((uint64_t)a2, [v30 status]);
    }
    else
    {
      CalAttendeeSetProposedStartDate((uint64_t)a2, *v19);
      CalAttendeeSetProposedStartDateStatus((uint64_t)a2, 0);
    }
    CalParticipantSaveUnrecognizedPararmeters(v7, (uint64_t)a2);
  }
  return a2 != 0;
}

void CalParticipantSaveUnrecognizedPararmeters(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = [v3 allParameters];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        char v11 = [v10 uppercaseString];
        if ((_isSavedParameter(v11) & 1) == 0)
        {
          unsigned int v12 = [v5 objectForKey:v10];
          if (v12) {
            [v4 setObject:v12 forKey:v10];
          }
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v7);
  }
  if ([v4 count])
  {
    id v20 = @"extraParams";
    id v21 = v4;
    int v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    uint64_t v15 = 0;
    unsigned int v14 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v13 requiringSecureCoding:1 error:&v15];
  }
  else
  {
    unsigned int v14 = 0;
  }
  CalParticipantSetExternalRepresentation(a2, v14);
}

id ICSUserAddressFromCalAttendee(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v6 = 0;
    goto LABEL_19;
  }
  CFMutableArrayRef v2 = (void *)CalAttendeeCopyAddress(a1);
  id v3 = (const void *)CalAttendeeCopyEmailAddress(a1);
  uint64_t v4 = CalAttendeeCopyPhoneNumber(a1);
  uint64_t v5 = (const void *)v4;
  if (v2)
  {
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4FB7FB0]) initWithURL:v2];
    [v6 setEmail:v3];
    objc_msgSend(v6, "setX_apple_telephone:", v5);
    if (!v3)
    {
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v3)
  {
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4FB7FB0]) initWithEmailAddress:v3];
    objc_msgSend(v6, "setX_apple_telephone:", v5);
LABEL_9:
    CFRelease(v3);
    if (!v5)
    {
LABEL_11:
      uint64_t v7 = CalAttendeeCopyDisplayName(a1);
      if (v7)
      {
        uint64_t v8 = (const void *)v7;
        [v6 setCn:v7];
        CFRelease(v8);
      }
      unsigned int Type = CalAttendeeGetType(a1);
      [v6 setCutype:ICSCalendarUserFromCalAttendeeType(Type)];
      unsigned int Status = CalAttendeeGetStatus(a1);
      [v6 setPartstat:ICSParticipationStatusFromCalAttendeeStatus(Status)];
      unsigned int Role = CalAttendeeGetRole(a1);
      [v6 setRole:ICSRoleFromCalAttendeeRole(Role)];
      int ScheduleAgent = CalParticipantGetScheduleAgent(a1);
      [v6 setScheduleagent:ICSScheduleAgentFromCalScheduleAgent(ScheduleAgent)];
      [v6 setRsvp:CalParticipantGetRSVP(a1)];
      [v6 setScheduleforcesend:CalAttendeeGetScheduleForceSend(a1)];
      double LastModified = CalAttendeeGetLastModified(a1);
      double v14 = *MEMORY[0x1E4F57888];
      if (vabdd_f64(LastModified, *MEMORY[0x1E4F57888]) >= 2.22044605e-16)
      {
        long long v34 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
        id v15 = objc_alloc(MEMORY[0x1E4F1C9A8]);
        id v32 = (void *)[v15 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
        int v33 = (void *)[objc_alloc(MEMORY[0x1E4F1CAF0]) initWithName:@"GMT"];
        [v32 setTimeZone:v33];
        long long v16 = [v32 components:252 fromDate:v34];
        id v17 = objc_alloc(MEMORY[0x1E4FB7F30]);
        uint64_t v18 = [v16 year];
        uint64_t v19 = [v16 month];
        uint64_t v20 = [v16 day];
        uint64_t v21 = [v16 hour];
        uint64_t v22 = v2;
        uint64_t v23 = [v16 minute];
        uint64_t v24 = [v16 second];
        uint64_t v25 = v23;
        CFMutableArrayRef v2 = v22;
        id v26 = (void *)[v17 initWithYear:v18 month:v19 day:v20 hour:v21 minute:v25 second:v24];
        [v6 setPartstatModified:v26];
      }
      ProposedStartCFDateRef Date = CalAttendeeGetProposedStartDate(a1);
      if (ProposedStartDate != v14)
      {
        double v28 = ProposedStartDate;
        double v29 = objc_opt_new();
        uint64_t v30 = ICSDateTimeForCalDate(v28);
        [v29 setStartDate:v30];

        [v29 setStatus:CalAttendeeGetProposedStartDateStatus(a1)];
        [v6 setAlternateTimeProposal:v29];
      }
      CalParticipantApplyExternalRepresentationToICSUser(a1, v6);
      goto LABEL_18;
    }
LABEL_10:
    CFRelease(v5);
    goto LABEL_11;
  }
  if (v4)
  {
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4FB7FB0]) initWithPhoneNumber:v4];
    goto LABEL_10;
  }
  uint64_t v6 = 0;
LABEL_18:

LABEL_19:
  return v6;
}

void CalParticipantApplyExternalRepresentationToICSUser(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (void *)CalParticipantCopyExternalRepresentation(a1);
  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4FB7F70] valueAndParameterClasses];
    id v28 = 0;
    uint64_t v6 = [MEMORY[0x1E4F28DC0] unarchivedObjectOfClasses:v5 fromData:v4 error:&v28];
    id v7 = v28;
    uint64_t v8 = v7;
    if (v6)
    {
      id v21 = v7;
      uint64_t v22 = v5;
      uint64_t v23 = v4;
      id v9 = [v6 objectForKeyedSubscript:@"extraParams"];
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v24 objects:v29 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v25;
        do
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v25 != v12) {
              objc_enumerationMutation(v9);
            }
            double v14 = *(void **)(*((void *)&v24 + 1) + 8 * i);
            id v15 = [v14 uppercaseString];
            char isSavedParameter = _isSavedParameter(v15);

            if ((isSavedParameter & 1) == 0)
            {
              id v17 = [v3 parameterValueForName:v14];

              if (v17)
              {
                uint64_t v18 = CDBiCalendarConversionHandle;
                if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  id v31 = v14;
                  _os_log_impl(&dword_1A8E81000, v18, OS_LOG_TYPE_FAULT, "We have a saved value for an unrecognized parameter %{public}@ on an attachment, but the property already has a parameter with that name! _isSavedParameter may be out of date.", buf, 0xCu);
                }
              }
              else
              {
                uint64_t v19 = [v9 objectForKeyedSubscript:v14];
                [v3 setParameterValue:v19 forName:v14];
              }
            }
          }
          uint64_t v11 = [v9 countByEnumeratingWithState:&v24 objects:v29 count:16];
        }
        while (v11);
      }

      uint64_t v5 = v22;
      uint64_t v4 = v23;
      uint64_t v8 = v21;
    }
    else
    {
      uint64_t v20 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v31 = v8;
        _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_ERROR, "Error decoding extra parameters for attendee: %@", buf, 0xCu);
      }
    }
  }
}

id ICSAttendeeCommentFromCalAttendee(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (void *)CalAttendeeCopyResponseComment(a1);
    if (v4)
    {
      uint64_t v5 = [v3 value];
      uint64_t v6 = [v5 absoluteString];
      if (v6)
      {
        id v7 = (void *)[objc_alloc(MEMORY[0x1E4FB7EE0]) initWithComment:v4];
        objc_msgSend(v7, "setX_calendarserver_attendee_ref:", v6);
        Commentdouble LastModified = CalParticipantGetCommentLastModified(a1);
        id v9 = ICSDateTimeForCalDate(CommentLastModified);
        objc_msgSend(v7, "setX_calendarserver_dtstamp:", v9);
      }
      else
      {
        id v7 = 0;
      }
    }
    else
    {
      id v7 = 0;
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

BOOL CalOrganizerUpdateFromICSUserAddress(void *a1, void *a2, uint64_t a3, int a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  if (a3)
  {
    id v11 = a5;
    uint64_t v12 = [v9 cn];

    if (v12)
    {
      int v13 = [v9 cn];
      CalOrganizerSetDisplayName(a3, v13);
    }
    CalOrganizerSetAddress(a3, [v9 value]);
    double v14 = [v9 emailAddress];
    id v15 = v14;
    if (v14)
    {
      id v16 = v14;
    }
    else
    {
      id v16 = [v10 emailAddress];
    }
    id v17 = v16;

    CalOrganizerSetEmailAddress(a3, v17);
    uint64_t v18 = [v9 phoneNumber];
    uint64_t v19 = v18;
    if (v18)
    {
      id v20 = v18;
    }
    else
    {
      id v20 = [v10 phoneNumber];
    }
    id v21 = v20;

    CalOrganizerSetPhoneNumber(a3, v21);
    uint64_t v22 = [v11 valueForKey:@"ItemBridgeOptions"];

    uint64_t v23 = [v22 unsignedIntegerValue];
    if (a4) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = 2 * ((~v23 & 2) == 0);
    }
    unsigned int v25 = CalScheduleAgentFromICSScheduleAgent([v9 scheduleAgentWithDefaultValue:v24]);
    CalParticipantSetScheduleAgent(a3, v25);
    CalParticipantSetRSVP(a3, [v9 rsvp]);
    CalParticipantSetScheduleForceSend(a3, [v9 scheduleforcesend] != 0);
    CalParticipantSaveUnrecognizedPararmeters(v9, a3);
  }
  return a3 != 0;
}

id ICSUserAddressFromCalOrganizer(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v6 = 0;
    goto LABEL_17;
  }
  CFMutableArrayRef v2 = (void *)CalOrganizerCopyAddress(a1);
  id v3 = (const void *)CalOrganizerCopyEmailAddress(a1);
  uint64_t v4 = CalOrganizerCopyPhoneNumber(a1);
  uint64_t v5 = (const void *)v4;
  if (v2)
  {
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4FB7FB0]) initWithURL:v2];
    [v6 setEmail:v3];
    objc_msgSend(v6, "setX_apple_telephone:", v5);
    if (!v3)
    {
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else
  {
    if (!v3)
    {
      if (!v4)
      {
        uint64_t v6 = 0;
        goto LABEL_11;
      }
      uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4FB7FB0]) initWithPhoneNumber:v4];
      goto LABEL_10;
    }
    uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4FB7FB0]) initWithEmailAddress:v3];
    objc_msgSend(v6, "setX_apple_telephone:", v5);
  }
  CFRelease(v3);
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  uint64_t v7 = CalOrganizerCopyDisplayName(a1);
  if (v7)
  {
    uint64_t v8 = (const void *)v7;
    [v6 setCn:v7];
    CFRelease(v8);
  }
  int ScheduleAgent = CalParticipantGetScheduleAgent(a1);
  [v6 setScheduleagent:ICSScheduleAgentFromCalScheduleAgent(ScheduleAgent)];
  [v6 setRsvp:CalParticipantGetRSVP(a1)];
  if (CalParticipantGetScheduleForceSend(a1)) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 0;
  }
  [v6 setScheduleforcesend:v10];
  CalParticipantApplyExternalRepresentationToICSUser(a1, v6);

LABEL_17:
  return v6;
}

uint64_t _isSavedParameter(void *a1)
{
  uint64_t v1 = _isSavedParameter_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&_isSavedParameter_onceToken, &__block_literal_global_11);
  }
  uint64_t v3 = [(id)_isSavedParameter_savedAttendeeParameters containsObject:v2];

  return v3;
}

uint64_t ___isSavedParameter_block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", *MEMORY[0x1E4FB8168], *MEMORY[0x1E4FB81C0], *MEMORY[0x1E4FB8108], *MEMORY[0x1E4FB7FC0], *MEMORY[0x1E4FB8188], *MEMORY[0x1E4FB8228], *MEMORY[0x1E4FB8258], *MEMORY[0x1E4FB8270], *MEMORY[0x1E4FB8268], *MEMORY[0x1E4FB8280], *MEMORY[0x1E4FB8278], *MEMORY[0x1E4FB8100], *MEMORY[0x1E4FB8140], 0);
  uint64_t v1 = _isSavedParameter_savedAttendeeParameters;
  _isSavedParameter_savedAttendeeParameters = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

const void *_CalRecurrenceCopyOwningEventTimeZoneIfDifferent(uint64_t a1, const void *a2)
{
  uint64_t Owner = _CalRecurrenceGetOwner(a1, 0);
  if (!Owner) {
    return 0;
  }
  uint64_t started = (const void *)_CalCalendarItemCopyStartTimeZone(Owner);
  uint64_t v5 = started;
  if (started && CFEqual(started, a2))
  {
    CFRelease(v5);
    return 0;
  }
  return v5;
}

__CFArray *_CalRecurrenceCopyOccurrenceDatesDispatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t GregorianDateWithFallbackToDefaultTimeZone, uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, CFAbsoluteTime a10, double a11, const __CFTimeZone *a12)
{
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = (uint64_t)a12;
  switch(_CalRecurrenceGetFrequency(a1))
  {
    case 1u:
      CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      unsigned int Interval = _CalRecurrenceGetInterval(a1);
      *(void *)values = 0;
      *(void *)&values[8] = 0;
      CalGregorianDateGetGregorianDateForDay();
      CalGregorianDateGetGregorianDateForDay();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTime v26 = v25;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v227, v27, v26, a12, 4uLL);
      if ((int)(v227.days % Interval) >= 1)
      {
        *(void *)(&v226.minutes + 1) = 0;
        v226.minutes = 0;
        HIDWORD(v226.seconds) = 0;
        *(void *)&v226.years = 0;
        *(void *)&v226.days = Interval - v227.days % Interval;
        CalAbsoluteTimeAddGregorianUnits();
        a10 = v28;
        uint64_t GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
        a5 = v29;
      }
      CFArrayRef v30 = (const __CFArray *)_CalRecurrenceCopyByDayDays(a1);
      unsigned int v31 = _CalRecurrenceGetByMonthMonths(a1);
      int v32 = a8;
      if (v31)
      {
        *(void *)&v226.years = _CalRecurrenceByMonthFilter;
        *(void *)&v226.days = v31;
        CFArrayRef v33 = (const __CFArray *)_CalRecurrenceCopyByMonthDayDays(a1);
        CFArrayRef v34 = v33;
        if (v33 && CFArrayGetCount(v33) >= 1)
        {
          BOOL ShouldPinMonthDays = _CalRecurrenceShouldPinMonthDays(a1);
          CFMutableArrayRef v36 = _CalRecurrenceByMonthDayFilter;
          if (ShouldPinMonthDays) {
            CFMutableArrayRef v36 = _CalRecurrenceByMonthDayFilterPinned;
          }
          *(void *)&v226.minutes = v36;
          *(void *)&v226.seconds = v34;
          unsigned int v37 = 2;
          if (!v30)
          {
LABEL_57:
            *(void *)values = GregorianDateWithFallbackToDefaultTimeZone;
            *(void *)&values[8] = a5;
            if (a8)
            {
              if (fabs(a11) < 2.22044605e-16 || a11 > 1577840000.0) {
                a11 = 1577840000.0;
              }
            }
            if (a10 < a11)
            {
              int v111 = a8;
              do
              {
                if (!v37 || vabdd_f64(a10, a9) < 2.22044605e-16) {
                  goto LABEL_71;
                }
                p_days = &v226.days;
                unint64_t v113 = 1;
                do
                {
                  int v114 = (*((uint64_t (**)(void, unsigned char *, const __CFTimeZone *, CFAbsoluteTime))p_days - 1))(*(void *)p_days, values, a12, a10);
                  if (v113 >= v37) {
                    break;
                  }
                  ++v113;
                  p_days += 4;
                }
                while ((v114 & 1) != 0);
                int v32 = a8;
                if (v114)
                {
LABEL_71:
                  CFDateRef v115 = CFDateCreate(0, a10);
                  if (v115)
                  {
                    CFDateRef v116 = v115;
                    CFArrayAppendValue(theArray, v115);
                    CFRelease(v116);
                  }
                  if (v111) {
                    --v111;
                  }
                  else {
                    int v111 = 0;
                  }
                }
                *(void *)values = CalGregorianDateAddDays();
                *(void *)&values[8] = v117;
                CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
                if (v32) {
                  BOOL v119 = v111 == 0;
                }
                else {
                  BOOL v119 = 0;
                }
                char v120 = !v119;
                if (v118 >= a11) {
                  break;
                }
                a10 = v118;
              }
              while ((v120 & 1) != 0);
            }
            if (v34) {
              CFRelease(v34);
            }
            if (v30)
            {
              CFArrayRef v121 = v30;
              goto LABEL_352;
            }
            return theArray;
          }
        }
        else
        {
          unsigned int v37 = 1;
          if (!v30) {
            goto LABEL_57;
          }
        }
      }
      else
      {
        CFArrayRef v34 = 0;
        unsigned int v37 = 0;
        if (!v30) {
          goto LABEL_57;
        }
      }
      if (CFArrayGetCount(v30) >= 1)
      {
        long long v109 = (uint64_t (**))&v226 + 2 * v37;
        __CFString *v109 = _CalRecurrenceByDayMaskFilter;
        ++v37;
        v109[1] = (uint64_t (*))_CalRecurrenceByDayMaskFromArrayByDayItems(v30);
      }
      goto LABEL_57;
    case 2u:
      CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      unsigned int v38 = _CalRecurrenceGetInterval(a1);
      LODWORD(v221) = 0;
      unsigned int WeekStart = _CalRecurrenceGetWeekStart(a1);
      CalAbsoluteTimeGetGregorianDateForWeek();
      CalAbsoluteTimeGetGregorianDateForWeek();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTime v41 = v40;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v226, v42, v41, a12, 4uLL);
      signed int v43 = v226.days / 7 % v38;
      if (v43 <= 0) {
        int v44 = 0;
      }
      else {
        int v44 = 7 * (v38 - v43);
      }
      *(void *)(&v227.minutes + 1) = 0;
      v227.minutes = 0;
      *(void *)&v227.years = 0;
      HIDWORD(v227.seconds) = 0;
      *(void *)&v227.days = (v44 - v221);
      CalAbsoluteTimeAddGregorianUnits();
      double v46 = v45;
      CFArrayRef v47 = (const __CFArray *)_CalRecurrenceCopyByDayDays(a1);
      uint64_t v48 = (const void *)_CalRecurrenceCopyBySetPos(a1);
      unsigned int v49 = _CalRecurrenceGetByMonthMonths(a1);
      CFAbsoluteTime v223 = 0.0;
      double v224 = 0.0;
      if (v49)
      {
        *(void *)&v227.years = _CalRecurrenceByMonthFilter;
        *(void *)&v227.days = v49;
        unsigned int v50 = 1;
      }
      else
      {
        unsigned int v50 = 0;
      }
      v228[0] = 0uLL;
      if (!v48 || !CFArrayGetCount((CFArrayRef)v48))
      {
        *(CFAbsoluteTime *)uint64_t v228 = a10;
        *((double *)v228 + 1) = a11;
        uint64_t v122 = (BOOL (**)(double *, double))&v227 + 2 * v50++;
        *uint64_t v122 = _CalRecurrenceRangeFilter;
        v122[1] = (BOOL (*)(double *, double))v228;
        if (v48)
        {
          CFRelease(v48);
          uint64_t v48 = 0;
        }
      }
      if (v47)
      {
        if (CFArrayGetCount(v47) < 1) {
          int v123 = 1 << CalAbsoluteTimeGetDayOfWeek();
        }
        else {
          int v123 = _CalRecurrenceByDayMaskFromArrayByDayItems(v47);
        }
        CFRelease(v47);
      }
      else
      {
        int v123 = 1 << CalAbsoluteTimeGetDayOfWeek();
      }
      int v128 = (v123 >> WeekStart) | (v123 << (7 - WeekStart));
      if (!WeekStart) {
        int v128 = v123;
      }
      int v209 = v128;
      int v129 = a8;
      if (a9 >= a10)
      {
        if (a9 < a11 || (int v129 = a8, fabs(a11) < 2.22044605e-16))
        {
          _CalInsertAbsoluteTimeIntoArrayAtIndex(theArray, 0, a9);
          int v129 = a8 ? a8 - 1 : 0;
          if (v48) {
            *(void *)&CFAbsoluteTime v223 = 1;
          }
        }
      }
      double v130 = a11;
      if (a8)
      {
        if (fabs(a11) >= 2.22044605e-16 && a11 <= 1577840000.0) {
          double v130 = a11;
        }
        else {
          double v130 = 1577840000.0;
        }
      }
      if (v129) {
        BOOL v132 = 1;
      }
      else {
        BOOL v132 = a8 == 0;
      }
      if (v132 && v46 < v130)
      {
        int v206 = 7 * v38;
        if (v48) {
          double v133 = 0.0;
        }
        else {
          double v133 = a9;
        }
        double v134 = fabs(a11);
        do
        {
          *(double *)&uint64_t v135 = 0.0;
          unsigned int v136 = WeekStart;
          int v137 = v209;
          do
          {
            if (v137)
            {
              int v138 = v136 >= WeekStart ? 0 : 7;
              *(_DWORD *)&values[16] = 0;
              *(void *)&values[20] = 0;
              *(_DWORD *)&values[28] = 0;
              *(void *)values = 0;
              *(void *)&values[8] = v136 - WeekStart + v138;
              CalAbsoluteTimeAddGregorianUnits();
              CFAbsoluteTime v140 = v139;
              BOOL v141 = vabdd_f64(v139, a9) < 2.22044605e-16 && v48 == 0;
              if (!v141
                && (!v50
                 || _CalRecurrenceApplyFiltersToSingleDate(0, (uint64_t)&v227, v50, (uint64_t)a12, v139, v133)))
              {
                _CalAppendAbsoluteTimeToArray(theArray, v140);
                if (v129) {
                  BOOL v142 = v48 == 0;
                }
                else {
                  BOOL v142 = 0;
                }
                int v143 = v142;
                v129 -= v143;
                ++v135;
              }
            }
            if (v137 < 2) {
              break;
            }
            unsigned int v136 = (v136 + 1) % 7;
            if (v136 == WeekStart) {
              break;
            }
            v137 >>= 1;
          }
          while (v134 >= 2.22044605e-16 || v129);
          double v224 = *(double *)&v135;
          if (v48 && v135 >= 1)
          {
            _CalRecurrenceApplyBySetPosToRange(theArray, (CFArrayRef)v48, (CFIndex *)&v223, v129, a10, a11, a9);
            *(double *)&uint64_t v135 = v224;
            if (v129) {
              v129 -= LODWORD(v224);
            }
            else {
              int v129 = 0;
            }
          }
          *(void *)values = 0;
          *(_DWORD *)&values[8] = v206;
          memset(&values[12], 0, 20);
          CalAbsoluteTimeAddGregorianUnits();
          *(void *)&v223 += v135;
          double v224 = 0.0;
          if (a8) {
            BOOL v145 = v129 == 0;
          }
          else {
            BOOL v145 = 0;
          }
          char v146 = !v145;
        }
        while (v144 < v130 && (v146 & 1) != 0);
      }
      if (v48)
      {
        CFArrayRef v121 = (const __CFArray *)v48;
        goto LABEL_352;
      }
      return theArray;
    case 3u:
      LODWORD(v217) = a8;
      CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      unsigned int v51 = _CalRecurrenceGetInterval(a1);
      memset(v228, 0, 24);
      unsigned __int8 v52 = BYTE5(a2);
      CalGregorianDateGetGregorianDateForMonth();
      CalGregorianDateGetGregorianDateForMonth();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTime v54 = v53;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v227, v55, v54, a12, 2uLL);
      *(void *)&v226.years = 0;
      v226.days = 1 - ((int)((unint64_t)GregorianDateWithFallbackToDefaultTimeZone >> 16) >> 24);
      int v56 = v227.months % v51;
      memset(&v226.hours, 0, 20);
      CalAbsoluteTimeAddGregorianUnits();
      double v58 = v57;
      if (v56 >= 1)
      {
        v226.years = 0;
        v226.months = v51 - v56;
        memset(&v226.days, 0, 24);
        CalAbsoluteTimeAddGregorianUnits();
        double v58 = v59;
      }
      BOOL v207 = _CalRecurrenceShouldPinMonthDays(a1);
      uint64_t v60 = (const void *)_CalRecurrenceCopyBySetPos(a1);
      unsigned int v61 = _CalRecurrenceGetByMonthMonths(a1);
      unsigned int v62 = v61;
      CFAbsoluteTime v223 = 0.0;
      double v224 = 0.0;
      CFIndex v221 = 0;
      uint64_t v222 = 0;
      if (v61)
      {
        *(void *)&v226.years = _CalRecurrenceByMonthFilter;
        *(void *)&v226.days = v61;
        unsigned int v63 = 1;
      }
      else
      {
        unsigned int v63 = 0;
      }
      CFArrayRef v124 = (const __CFArray *)_CalRecurrenceCopyByMonthDayDays(a1);
      *(double *)&CFArrayRef v125 = COERCE_DOUBLE(_CalRecurrenceCopyByDayDays(a1));
      double v126 = *(double *)&v125;
      CFAbsoluteTime v219 = 0.0;
      double v220 = 0.0;
      CFArrayRef cf = v125;
      if (*(double *)&v125 == 0.0)
      {
        int v127 = 1;
        if (!v124) {
          goto LABEL_184;
        }
      }
      else if (CFArrayGetCount(v125) < 1)
      {
        LOBYTE(v126) = 0;
        int v127 = 1;
        if (!v124) {
          goto LABEL_184;
        }
      }
      else
      {
        int v127 = 0;
        CFAbsoluteTime v219 = COERCE_DOUBLE(_CalRecurrenceByDayGenerator);
        double v220 = v126;
        LOBYTE(v126) = 1;
        if (!v124) {
          goto LABEL_184;
        }
      }
      if (CFArrayGetCount(v124))
      {
        if (v127)
        {
          unsigned int v213 = 0;
          long long v147 = _CalRecurrenceByMonthDayGenerator;
          if (v207) {
            long long v147 = _CalRecurrenceByMonthDayGeneratorPinned;
          }
          CFAbsoluteTime v219 = *(double *)&v147;
          id v148 = &v220;
        }
        else
        {
          if (v207) {
            long long v150 = _CalRecurrenceByMonthDayFilterPinned;
          }
          else {
            long long v150 = _CalRecurrenceByMonthDayFilter;
          }
          long long v151 = (BOOL (**)(const __CFArray *, uint64_t, uint64_t))&v226 + 2 * v63;
          void *v151 = v150;
          id v148 = (double *)(v151 + 1);
          unsigned int v213 = 1;
        }
        *(void *)id v148 = v124;
        goto LABEL_191;
      }
LABEL_184:
      unsigned int v213 = 0;
      if ((LOBYTE(v126) & 1) == 0)
      {
        int v149 = 0;
        goto LABEL_196;
      }
LABEL_191:
      if (!v60 || !CFArrayGetCount((CFArrayRef)v60))
      {
        CFAbsoluteTime v223 = a10;
        double v224 = a11;
        long long v152 = (BOOL (**)(double *, double))&v226 + 2 * v213++ + 2 * v63;
        *long long v152 = _CalRecurrenceRangeFilter;
        v152[1] = (BOOL (*)(double *, double))&v223;
        if (v60)
        {
          CFRelease(v60);
          uint64_t v60 = 0;
        }
      }
      int v149 = 1;
LABEL_196:
      if (a9 >= a10 && (a9 < a11 || fabs(a11) < 2.22044605e-16))
      {
        _CalInsertAbsoluteTimeIntoArrayAtIndex(theArray, 0, a9);
        if (a8) {
          LODWORD(v217) = a8 - 1;
        }
        if (v60) {
          CFIndex v221 = 1;
        }
      }
      double v153 = a11;
      if (a8)
      {
        if (fabs(a11) >= 2.22044605e-16 && a11 <= 1577840000.0) {
          double v153 = a11;
        }
        else {
          double v153 = 1577840000.0;
        }
      }
      if (v58 < v153)
      {
        double v155 = fabs(a11);
        if (v60) {
          double v156 = 0.0;
        }
        else {
          double v156 = a9;
        }
        long long v157 = &v217;
        if (v60) {
          long long v157 = 0;
        }
        int v204 = v157;
        do
        {
          if (a8 && !v217) {
            break;
          }
          if (!v62
            || (uint64_t v158 = 0, _CalRecurrenceApplyFiltersToSingleDate(0, (uint64_t)&v226, 1, v23, v58, a9)))
          {
            if (v149)
            {
              uint64_t v158 = _CalRecurrenceApplyGenerator(theArray, (uint64_t)&v219, (uint64_t)&v226 + 16 * v63, v213, 3, v204, v23, v156, a10, a11, v58);
LABEL_223:
              uint64_t v222 = v158;
              if (v60)
              {
                if (v158)
                {
                  _CalRecurrenceApplyBySetPosToRange(theArray, (CFArrayRef)v60, &v221, v217, a10, a11, a9);
                  uint64_t v158 = v222;
                  if (v217) {
                    LODWORD(v217) = v217 - v222;
                  }
                }
              }
              goto LABEL_239;
            }
            uint64_t v159 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
            double v161 = v160;
            unint64_t v162 = v159 & 0xFFFF00FFFFFFFFFFLL;
            unsigned __int8 v163 = v52;
            if (v207)
            {
              int DaysInMonth = CalGregorianDateGetDaysInMonth();
              unsigned __int8 v163 = DaysInMonth;
              if ((char)v52 <= DaysInMonth) {
                unsigned __int8 v163 = v52;
              }
            }
            *(void *)&v230.year = ((unint64_t)v163 << 40) | v162;
            v230.second = v161;
            if (CFGregorianDateIsValid(v230, 7uLL))
            {
              uint64_t v23 = (uint64_t)a12;
              CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
              uint64_t v158 = 0;
              BOOL v166 = v165 < a11 || v155 < 2.22044605e-16;
              if (v165 >= a10 && v166)
              {
                if (vabdd_f64(v165, a9) >= 2.22044605e-16)
                {
                  _CalAppendAbsoluteTimeToArray(theArray, v165);
                  if (!v217)
                  {
                    uint64_t v158 = 1;
                    goto LABEL_223;
                  }
                  uint64_t v158 = 1;
                  if (v60) {
                    goto LABEL_223;
                  }
                  LODWORD(v217) = v217 - 1;
                  uint64_t v158 = 1;
                }
                else
                {
                  uint64_t v158 = 0;
                }
              }
            }
            else
            {
              uint64_t v158 = 0;
              uint64_t v23 = (uint64_t)a12;
            }
          }
LABEL_239:
          *(_DWORD *)values = 0;
          *(_DWORD *)&values[4] = v51;
          *(_OWORD *)&values[8] = v228[0];
          *(void *)&values[24] = *(void *)&v228[1];
          CalAbsoluteTimeAddGregorianUnits();
          double v58 = v167;
          v221 += v158;
          uint64_t v222 = 0;
        }
        while (v167 < v153);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v124) {
        CFRelease(v124);
      }
      if (v60)
      {
        CFArrayRef v121 = (const __CFArray *)v60;
        goto LABEL_352;
      }
      return theArray;
    case 4u:
      if (_CalRecurrenceIsSimpleYearly(a1))
      {
        uint64_t v64 = a2;
        double v65 = *(double *)&a5;
        double v66 = *(double *)&a7;
        BOOL v67 = (void *)_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar;
        if (!_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar)
        {
          id v68 = [MEMORY[0x1E4F1C9A8] CalGregorianGMTCalendar];
          uint64_t v69 = [v68 copy];
          BOOL v70 = (void *)_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar;
          _CalRecurrenceCopyOccurrenceDatesDispatch_sCFTypeRef Calendar = v69;

          BOOL v67 = (void *)_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar;
        }
        [v67 setTimeZone:a12];
        id v71 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
        id v72 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
        id v73 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
        [v71 setYear:(int)v64];
        [v71 setMonth:v64 << 24 >> 56];
        [v71 setDay:v64 << 16 >> 56];
        [v71 setHour:v64 << 8 >> 56];
        [v71 setMinute:v64 >> 56];
        [v71 setSecond:(uint64_t)*(double *)&a3];
        [v72 setYear:(int)GregorianDateWithFallbackToDefaultTimeZone];
        [v72 setMonth:GregorianDateWithFallbackToDefaultTimeZone << 24 >> 56];
        [v72 setDay:GregorianDateWithFallbackToDefaultTimeZone << 16 >> 56];
        [v72 setHour:GregorianDateWithFallbackToDefaultTimeZone << 8 >> 56];
        [v72 setMinute:GregorianDateWithFallbackToDefaultTimeZone >> 56];
        [v72 setSecond:(uint64_t)v65];
        [v73 setYear:(int)a6];
        [v73 setMonth:a6 << 24 >> 56];
        [v73 setDay:a6 << 16 >> 56];
        [v73 setHour:a6 << 8 >> 56];
        [v73 setMinute:a6 >> 56];
        v215 = v73;
        [v73 setSecond:(uint64_t)v66];
        uint64_t v74 = (void *)_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar;
        unsigned int v75 = _CalRecurrenceGetInterval(a1);
        BOOL v76 = _CalRecurrenceShouldPinMonthDays(a1);
        id v77 = v74;
        id v78 = v71;
        id v79 = v72;
        CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        id v80 = (void *)[v78 copy];
        v211 = v79;
        objc_msgSend(v80, "setYear:", objc_msgSend(v79, "year"));
        BOOL v81 = _CalValidateCalDate(v77, v80, v76);
        id v82 = [v77 dateFromComponents:v80];
        [v82 timeIntervalSinceReferenceDate];
        if (a8)
        {
          if (fabs(a11) < 2.22044605e-16 || a11 > 1577840000.0) {
            a11 = 1577840000.0;
          }
        }
        if (v83 <= a11)
        {
          int v85 = a8;
          unsigned int v86 = v75;
          if (a8) {
            int v87 = -1;
          }
          else {
            int v87 = 0;
          }
          uint64_t v88 = v86;
          do
          {
            if (v83 >= a10 && v81)
            {
              CFArrayAppendValue(theArray, v82);
              v85 += v87;
            }
            objc_msgSend(v80, "setYear:", objc_msgSend(v80, "year") + v88);
            objc_msgSend(v80, "setDay:", objc_msgSend(v78, "day"));
            BOOL v81 = _CalValidateCalDate(v77, v80, v76);
            uint64_t v89 = [v77 dateFromComponents:v80];

            [v89 timeIntervalSinceReferenceDate];
            id v82 = v89;
            if (a8) {
              BOOL v90 = v85 == 0;
            }
            else {
              BOOL v90 = 0;
            }
            char v91 = !v90;
          }
          while (v83 <= a11 && (v91 & 1) != 0);
        }

        return theArray;
      }
      int v225 = a8;
      CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      unsigned int v92 = _CalRecurrenceGetInterval(a1);
      memset(v228, 0, 28);
      unint64_t v93 = a2;
      CalGregorianDateGetGregorianDateForYear();
      CalGregorianDateGetGregorianDateForYear();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTime v95 = v94;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v227, v96, v95, a12, 1uLL);
      int v97 = v227.years % v92;
      *(void *)&v226.years = 0;
      v226.days = 1 - CFAbsoluteTimeGetDayOfYear(a10, a12);
      memset(&v226.hours, 0, 20);
      CalAbsoluteTimeAddGregorianUnits();
      double v99 = v98;
      unsigned int v208 = v92;
      if (v97 >= 1)
      {
        v226.years = v92 - v97;
        memset(&v226.months, 0, 28);
        CalAbsoluteTimeAddGregorianUnits();
        double v99 = v100;
      }
      unint64_t v101 = v93;
      unint64_t v212 = v93 >> 40;
      BOOL v205 = _CalRecurrenceShouldPinMonthDays(a1);
      CFAbsoluteTime v223 = 0.0;
      double v224 = 0.0;
      CFIndex v221 = 0;
      uint64_t v222 = 0;
      CFAbsoluteTime v219 = 0.0;
      double v220 = 0.0;
      *(double *)&CFArrayRef v102 = COERCE_DOUBLE(_CalRecurrenceCopyByYearDayDays(a1));
      *(double *)&uint64_t v103 = COERCE_DOUBLE(_CalRecurrenceCopyByDayDays(a1));
      *(double *)&CFArrayRef v104 = COERCE_DOUBLE(_CalRecurrenceCopyByMonthDayDays(a1));
      CFArrayRef v105 = (const __CFArray *)_CalRecurrenceCopyByWeekWeeks(a1);
      id v106 = (const void *)_CalRecurrenceCopyBySetPos(a1);
      unsigned int v107 = _CalRecurrenceGetByMonthMonths(a1);
      CFTypeRef v202 = (CFTypeRef)v103;
      if (*(double *)&v102 != 0.0 && CFArrayGetCount(v102) >= 1)
      {
        CFArrayRef v199 = v104;
        *(double *)&uint64_t v103 = 0.0;
        long long v108 = _CalRecurrenceByYearDayGenerator;
        CFAbsoluteTime v223 = COERCE_DOUBLE(_CalRecurrenceByYearDayGenerator);
        double v224 = *(double *)&v102;
LABEL_267:
        if (v107) {
          goto LABEL_275;
        }
        if (!v105)
        {
          unsigned int v172 = v208;
          if (v108 == _CalRecurrenceByYearDayGenerator)
          {
            char v177 = 1;
            goto LABEL_283;
          }
LABEL_274:
          unsigned int v107 = 1 << (((v101 >> 8) >> 24) - 1);
          goto LABEL_275;
        }
        unsigned int v172 = v208;
LABEL_270:
        if (CFArrayGetCount(v105) || v108 == _CalRecurrenceByYearDayGenerator) {
          goto LABEL_277;
        }
        goto LABEL_274;
      }
      if (*(double *)&v104 != 0.0 && CFArrayGetCount(v104) >= 1)
      {
        if (_CalRecurrenceShouldPinMonthDays(a1)) {
          long long v108 = (void (*)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t))_CalRecurrenceByMonthDayGeneratorPinned;
        }
        else {
          long long v108 = (void (*)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t))_CalRecurrenceByMonthDayGenerator;
        }
        CFAbsoluteTime v223 = *(double *)&v108;
        double v224 = *(double *)&v104;
        CFArrayRef v199 = v104;
        if (*(double *)&v103 == 0.0)
        {
          CFTypeRef v202 = 0;
        }
        else if (CFArrayGetCount((CFArrayRef)v103) < 1)
        {
          *(double *)&uint64_t v103 = 0.0;
        }
        else
        {
          *(void *)&v226.years = _CalRecurrenceByDayFilter;
          *(void *)&v226.days = v103;
          uint64_t v103 = 1;
        }
        goto LABEL_267;
      }
      if (*(double *)&v103 != 0.0 && CFArrayGetCount((CFArrayRef)v103) >= 1)
      {
        CFArrayRef v199 = v104;
        double v168 = *(double *)&v103;
        *(double *)&uint64_t v103 = 0.0;
        long long v108 = (void (*)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t))_CalRecurrenceByDayGenerator;
        CFAbsoluteTime v223 = COERCE_DOUBLE(_CalRecurrenceByDayGenerator);
        double v224 = v168;
        goto LABEL_267;
      }
      if (!v107)
      {
        CFArrayRef v199 = v104;
        if (!v105)
        {
          int v175 = 0;
          *(double *)&uint64_t v103 = 0.0;
          char v198 = 1;
          unsigned int v172 = v208;
          goto LABEL_288;
        }
        unsigned int v172 = v208;
        if (CFArrayGetCount(v105) < 1)
        {
          int v175 = 0;
          LODWORD(v103) = 0;
          if (!CFArrayGetCount(v105))
          {
            char v198 = 0;
            *(double *)&uint64_t v103 = 0.0;
            goto LABEL_288;
          }
          goto LABEL_279;
        }
        if (*(double *)&v103 != 0.0) {
          CFRelease((CFTypeRef)v103);
        }
        v226.years = 0;
        v226.months = CalAbsoluteTimeGetDayOfWeek();
        *(void *)values = &v226;
        *(double *)&CFArrayRef v173 = COERCE_DOUBLE(CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E4F578A0]));
        *(double *)&uint64_t v103 = 0.0;
        long long v108 = (void (*)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t))_CalRecurrenceByDayGenerator;
        CFAbsoluteTime v223 = COERCE_DOUBLE(_CalRecurrenceByDayGenerator);
        double v224 = *(double *)&v173;
        CFTypeRef v202 = v173;
        goto LABEL_270;
      }
      if (*(double *)&v104 != 0.0) {
        CFRelease(v104);
      }
      *(void *)&v226.years = (char)v212;
      *(double *)&CFArrayRef v169 = COERCE_DOUBLE(CFArrayCreate(0, (const void **)&v226, 1, 0));
      BOOL v170 = _CalRecurrenceShouldPinMonthDays(a1);
      LODWORD(v103) = 0;
      id v171 = _CalRecurrenceByMonthDayGenerator;
      if (v170) {
        id v171 = _CalRecurrenceByMonthDayGeneratorPinned;
      }
      CFAbsoluteTime v223 = *(double *)&v171;
      double v224 = *(double *)&v169;
      CFArrayRef v199 = v169;
LABEL_275:
      id v174 = (uint64_t (**)(unsigned int, uint64_t))&v226 + 2 * v103;
      uint64_t v103 = (v103 + 1);
      *id v174 = _CalRecurrenceByMonthFilter;
      v174[1] = (uint64_t (*)(unsigned int, uint64_t))v107;
      if (!v105)
      {
        char v177 = 1;
        unsigned int v172 = v208;
        goto LABEL_283;
      }
      unsigned int v172 = v208;
LABEL_277:
      if (!CFArrayGetCount(v105))
      {
        char v177 = 0;
        goto LABEL_283;
      }
      int v175 = 1;
LABEL_279:
      uint64_t v222 = (uint64_t)v105;
      int v176 = _CalRecurrenceGetWeekStart(a1);
      char v177 = 0;
      LODWORD(v221) = v176;
      id v178 = (BOOL (**)(uint64_t))&v226 + 2 * v103;
      uint64_t v103 = (v103 + 1);
      *id v178 = _CalRecurrenceByWeekNoFilter;
      v178[1] = (BOOL (*)(uint64_t))&v221;
      if (!v175)
      {
        char v198 = 0;
        int v175 = 0;
        goto LABEL_288;
      }
LABEL_283:
      char v198 = v177;
      if (!v106 || !CFArrayGetCount((CFArrayRef)v106))
      {
        CFAbsoluteTime v219 = a10;
        double v220 = a11;
        id v179 = (BOOL (**)(double *, double))&v226 + 2 * v103;
        uint64_t v103 = (v103 + 1);
        const os_unfair_lock *v179 = _CalRecurrenceRangeFilter;
        v179[1] = (BOOL (*)(double *, double))&v219;
        if (v106)
        {
          CFRelease(v106);
          id v106 = 0;
        }
      }
      int v175 = 1;
LABEL_288:
      CFArrayRef v201 = v102;
      CFIndex v217 = 0;
      uint64_t v218 = 0;
      double v180 = fabs(a11);
      if (a9 >= a10 && (a9 < a11 || v180 < 2.22044605e-16))
      {
        _CalInsertAbsoluteTimeIntoArrayAtIndex(theArray, 0, a9);
        if (a8) {
          int v225 = a8 - 1;
        }
        if (v106) {
          CFIndex v217 = 1;
        }
      }
      CFArrayRef v200 = v105;
      double v181 = a11;
      if (a8)
      {
        if (v180 >= 2.22044605e-16 && a11 <= 1577840000.0) {
          double v181 = a11;
        }
        else {
          double v181 = 1577840000.0;
        }
      }
      if (v99 < v181)
      {
        if (v106) {
          double v183 = 0.0;
        }
        else {
          double v183 = a9;
        }
        if (v106) {
          id v184 = 0;
        }
        else {
          id v184 = &v225;
        }
        while (1)
        {
          if (a8 && !v225) {
            goto LABEL_342;
          }
          if (v175)
          {
            uint64_t v185 = _CalRecurrenceApplyGenerator(theArray, (uint64_t)&v223, (uint64_t)&v226, v103, 4, v184, v23, v183, a10, a11, v99);
LABEL_313:
            uint64_t v218 = v185;
            if (v106)
            {
              if (v185)
              {
                _CalRecurrenceApplyBySetPosToRange(theArray, (CFArrayRef)v106, &v217, v225, a10, a11, a9);
                uint64_t v185 = v218;
                if (v225) {
                  v225 -= v218;
                }
              }
            }
            goto LABEL_332;
          }
          uint64_t v186 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
          double v188 = v187;
          unint64_t v189 = v186 & 0xFFFF0000FFFFFFFFLL;
          unsigned __int8 v190 = v212;
          if (v205)
          {
            int v191 = CalGregorianDateGetDaysInMonth();
            unsigned __int8 v190 = v191;
            if (v191 >= (char)v212) {
              unsigned __int8 v190 = v212;
            }
          }
          *(void *)&v231.year = v101 & 0xFF00000000 | ((unint64_t)v190 << 40) | v189;
          v231.second = v188;
          if (!CFGregorianDateIsValid(v231, 7uLL)) {
            break;
          }
          uint64_t v23 = (uint64_t)a12;
          CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
          BOOL v193 = v192 < a11 || v180 < 2.22044605e-16;
          if (v192 < a10 || !v193)
          {
            uint64_t v185 = 0;
LABEL_331:
            unsigned int v172 = v208;
            goto LABEL_332;
          }
          CFAbsoluteTime v196 = v192;
          unsigned int v172 = v208;
          if (vabdd_f64(v192, a9) >= 2.22044605e-16)
          {
            if (!v103
              || (uint64_t v185 = 0,
                  _CalRecurrenceApplyFiltersToSingleDate(0, (uint64_t)&v226, v103, (uint64_t)a12, v192, a9)))
            {
              _CalAppendAbsoluteTimeToArray(theArray, v196);
              if (!v225)
              {
                uint64_t v185 = 1;
                goto LABEL_313;
              }
              uint64_t v185 = 1;
              if (v106) {
                goto LABEL_313;
              }
              --v225;
              uint64_t v185 = 1;
            }
          }
          else
          {
            uint64_t v185 = 0;
          }
LABEL_332:
          *(_DWORD *)values = v172;
          *(_OWORD *)&values[4] = v228[0];
          *(_OWORD *)&values[16] = *(_OWORD *)((char *)v228 + 12);
          CalAbsoluteTimeAddGregorianUnits();
          double v99 = v195;
          v217 += v185;
          uint64_t v218 = 0;
          if (v195 >= v181) {
            goto LABEL_342;
          }
        }
        uint64_t v185 = 0;
        uint64_t v23 = (uint64_t)a12;
        goto LABEL_331;
      }
LABEL_342:
      if (v202) {
        CFRelease(v202);
      }
      if (v199) {
        CFRelease(v199);
      }
      if (v201) {
        CFRelease(v201);
      }
      if ((v198 & 1) == 0) {
        CFRelease(v200);
      }
      if (v106)
      {
        CFArrayRef v121 = (const __CFArray *)v106;
LABEL_352:
        CFRelease(v121);
      }
      return theArray;
    default:
      return 0;
  }
}

double _CalRecurrenceGetOrComputeCachedEndDate(uint64_t a1, int a2, int a3, const void *a4, double a5)
{
  uint64_t v10 = _CalRecurrenceCopyCachedEndDate(a1);
  double v11 = *(double *)&v10;
  double v12 = *MEMORY[0x1E4F57888];
  if (vabdd_f64(*(double *)&v10, *MEMORY[0x1E4F57888]) < 2.22044605e-16) {
    goto LABEL_9;
  }
  double v13 = *(double *)&v10;
  if (a3)
  {
    double v14 = (const void *)CalTimeZoneCopyCFTimeZone();
    double v13 = v12;
    if (v14)
    {
      id v15 = v14;
      if (CFEqual(v14, a4)) {
        double v13 = v11;
      }
      else {
        double v13 = v12;
      }
      CFRelease(v15);
    }
  }
  if (vabdd_f64(v13, v12) < 2.22044605e-16)
  {
LABEL_9:
    uint64_t GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    uint64_t v18 = v17;
    uint64_t Owner = _CalRecurrenceGetOwner(a1, 0);
    if (Owner && (uint64_t v20 = Owner, IsAllDay = _CalCalendarItemIsAllDay(Owner), a2) && IsAllDay)
    {
      uint64_t v22 = objc_alloc_init(CDBRecurrenceGenerator);
      uint64_t v23 = [(CDBRecurrenceGenerator *)v22 computeRecurrenceEndDateForCalEvent:v20 recurrenceRule:a1 locked:1];
      uint64_t v24 = v23;
      if (v23) {
        CFTypeRef v25 = CFRetain(v23);
      }
      else {
        CFTypeRef v25 = 0;
      }

      if (!v25)
      {
LABEL_24:
        uint64_t v34 = *(void *)&a5;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t Null = CalGregorianDateGetNull();
      double v28 = _CalRecurrenceCopyOccurrenceDatesDispatch(a1, GregorianDateWithFallbackToDefaultTimeZone, v18, GregorianDateWithFallbackToDefaultTimeZone, v18, Null, v27, a2, a5, a5, 0.0, (const __CFTimeZone *)a4);
      if (!v28) {
        goto LABEL_24;
      }
      CFArrayRef v29 = v28;
      CFIndex Count = CFArrayGetCount(v28);
      if (Count < 1)
      {
        CFTypeRef v25 = 0;
      }
      else
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v29, Count - 1);
        CFTypeRef v25 = ValueAtIndex;
        if (ValueAtIndex) {
          CFRetain(ValueAtIndex);
        }
      }
      CFRelease(v29);
      if (!v25) {
        goto LABEL_24;
      }
    }
    a5 = MEMORY[0x1AD0E87A0](v25);
    uint64_t v34 = *(void *)&a5;
    CFRelease(v25);
LABEL_25:
    int v32 = (const void *)CalCFTimeZoneCopyCalTimeZone();
    CalDateTimeSetTimeZone();
    CFRelease(v32);
    _CalRecurrenceSetCachedEndDate(a1, v34);
    CalDateTimeRelease();
    return a5;
  }
  CalDateTimeRelease();
  return v13;
}

__CFArray *_CalRecurrenceCopyOccurrenceDatesInDateRange(uint64_t a1, uint64_t a2, const __CFString *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10)
{
  if (a10) {
    return _CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited(a1, a2, a3, a4, a5, a6, a7, a8, 0, a9);
  }
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v20 = _CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited(a1, a2, a3, a4, a5, a6, a7, a8, 0, a9);
  if (RecordLock)
  {
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(RecordLock);
    }
    os_unfair_lock_unlock(RecordLock);
  }
  return v20;
}

__CFArray *_CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited(uint64_t a1, uint64_t a2, const __CFString *a3, unsigned int a4, uint64_t GregorianDateWithFallbackToDefaultTimeZone, uint64_t a6, uint64_t a7, uint64_t a8, int a9, const void *a10)
{
  id v15 = a10;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  double v17 = v16;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  double v19 = v18;
  uint64_t v20 = _CalRecurrenceCopyOwningEventTimeZoneIfDifferent(a1, a10);
  if (v20 && !CFEqual(a10, v20))
  {
    uint64_t GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    a7 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    a8 = v21;
    id v15 = v20;
  }
  uint64_t Owner = (const void *)_CalRecurrenceGetOwner(a1, 0);
  uint64_t v23 = (uint64_t)Owner;
  if (Owner && _CalEntityIsOfType(Owner, 2)) {
    _CalEventIsAllDay(v23);
  }
  CalDateTimeGetAbsoluteTime();
  double v25 = v24;
  EndCFDateRef Date = _CalRecurrenceGetEndDate(a1);
  double v27 = *MEMORY[0x1E4F57888];
  if (vabdd_f64(EndDate, *MEMORY[0x1E4F57888]) >= 2.22044605e-16)
  {
    if (_CalCalendarItemIsFloating(v23))
    {
      unsigned int v31 = (const void *)CalTimeZoneCopyCFTimeZone();
      CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
      EndCFDateRef Date = v32;
      CFRelease(v31);
    }
  }
  else
  {
    int Count = _CalRecurrenceGetCount(a1);
    if (Count)
    {
      int v29 = Count;
      BOOL v30 = CFEqual(a3, @"_float");
      EndCFDateRef Date = _CalRecurrenceGetOrComputeCachedEndDate(a1, v29, v30, v15, v25);
    }
  }
  if (v25 > v17
    || ((double v35 = vabdd_f64(EndDate, v27), v36 = (double)a4, v35 >= 2.22044605e-16)
      ? (BOOL v37 = v19 > EndDate + (double)a4)
      : (BOOL v37 = 0),
        v37))
  {
    CFArrayRef v33 = 0;
    if (!v20) {
      return v33;
    }
LABEL_14:
    CFRelease(v20);
    return v33;
  }
  uint64_t v38 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
  uint64_t v40 = v38;
  uint64_t v41 = v39;
  uint64_t v42 = v39;
  if (v19 < v25 || v25 < v19 && v25 + v36 > v19)
  {
    CFAbsoluteTime v43 = v25;
    uint64_t v44 = v38;
    goto LABEL_31;
  }
  uint64_t v58 = v38;
  uint64_t v59 = v39;
  uint64_t v44 = v38 & 0xFFFF000000000000 | GregorianDateWithFallbackToDefaultTimeZone & 0xFFFFFFFFFFFFLL;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  CFAbsoluteTime v43 = v45;
  double v46 = v19 - v45;
  if (v46 <= 0.0)
  {
    CalAbsoluteTimeAddGregorianUnits();
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    uint64_t v40 = v58;
    uint64_t v41 = v59;
    if (v49 <= v19) {
      goto LABEL_31;
    }
    CalAbsoluteTimeAddGregorianUnits();
    CFAbsoluteTime v43 = v50;
    uint64_t v51 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    uint64_t v41 = v59;
    uint64_t v44 = v51;
    uint64_t v42 = v52;
  }
  else
  {
    if (v46 >= v36)
    {
      CalAbsoluteTimeAddGregorianUnits();
      CFAbsoluteTime v43 = v47;
      uint64_t v44 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      uint64_t v42 = v48;
    }
    uint64_t v41 = v59;
  }
  uint64_t v40 = v58;
LABEL_31:
  if (v35 >= 2.22044605e-16 && v17 > EndDate)
  {
    double v17 = EndDate + 1.0;
    uint64_t v54 = v41;
    uint64_t v55 = v40;
    uint64_t v56 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    uint64_t v40 = v55;
    uint64_t v41 = v54;
    a7 = v56;
    a8 = v57;
  }
  CFArrayRef v33 = _CalRecurrenceCopyOccurrenceDatesDispatch(a1, v40, v41, v44, v42, a7, a8, a9, v25, v43, v17, (const __CFTimeZone *)v15);
  if (v20) {
    goto LABEL_14;
  }
  return v33;
}

void _CalEventGetLargestPossibleAlarmOffsets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *a2 = 0x7FFFFFFFFFFFFFFFLL;
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  if (_CalCalendarItemHasAlarms(a1))
  {
    double v19 = (void *)_CalEventCopyTravelTime(a1);
    int v20 = [v19 intValue];
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v6 = _CalCalendarItemCopyAlarms(a1);
    uint64_t v7 = [(__CFArray *)v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (!v7) {
      goto LABEL_31;
    }
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v22;
    uint64_t v10 = -604800 - v20;
    uint64_t v11 = 32400 - v20;
    while (1)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v22 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v13 = *(void *)(*((void *)&v21 + 1) + 8 * i);
        if (_CalAlarmIsDefaultAlarm(v13))
        {
          if (v10 < 0)
          {
            double v14 = a2;
            if (*a2 != 0x7FFFFFFFFFFFFFFFLL)
            {
              double v14 = a2;
              if (*a2 <= v10) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            double v14 = a3;
            if (*a3 != 0x7FFFFFFFFFFFFFFFLL)
            {
              double v14 = a3;
              if (*a3 >= v10)
              {
LABEL_11:
                if ((v11 & 0x8000000000000000) == 0) {
                  goto LABEL_12;
                }
LABEL_23:
                id v15 = a2;
                if (*a2 == 0x7FFFFFFFFFFFFFFFLL || (id v15 = a2, *a2 > v11))
                {
LABEL_25:
                  *id v15 = v11;
                  continue;
                }
                continue;
              }
            }
          }
          *double v14 = v10;
          if ((v11 & 0x8000000000000000) == 0)
          {
LABEL_12:
            id v15 = a3;
            if (*a3 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_25;
            }
            id v15 = a3;
            if (*a3 < v11) {
              goto LABEL_25;
            }
            continue;
          }
          goto LABEL_23;
        }
        if (_CalAlarmGetTriggerDate(v13) != 1.17549435e-38) {
          continue;
        }
        Triggerunsigned int Interval = _CalAlarmGetTriggerInterval(v13);
        uint64_t v17 = TriggerInterval - v20;
        if (TriggerInterval - v20 < 0)
        {
          double v18 = a2;
          if (*a2 == 0x7FFFFFFFFFFFFFFFLL || (double v18 = a2, *a2 > v17))
          {
LABEL_28:
            *double v18 = v17;
            continue;
          }
        }
        else
        {
          double v18 = a3;
          if (*a3 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_28;
          }
          double v18 = a3;
          if (*a3 < v17) {
            goto LABEL_28;
          }
        }
      }
      uint64_t v8 = [(__CFArray *)v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (!v8)
      {
LABEL_31:

        return;
      }
    }
  }
}

__CFArray *_CalEventCopyOccurrenceDatesInDateRange(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  return _CalEventCopyOccurrenceDatesInDateRangeWhileLocked(a1, a2, a3, a4, 1, 0, a5);
}

__CFArray *_CalEventCopyOccurrenceDatesInDateRangeWhileLocked(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  id v13 = a2;
  id v14 = a3;
  id v61 = a4;
  CFArrayRef v15 = _CalCalendarItemCopyRecurrencesWhileLocked(a1, a5);
  _CalEventCopyStartDateWhileLocked(a1, a5);
  CFStringRef theString1 = v16;
  unsigned int DurationWhileLocked = _CalEventGetDurationWhileLocked(a1, a5);
  if (v15) {
    CFIndex Count = CFArrayGetCount(v15);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef cf = v15;
  if (a6)
  {
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    double v19 = v13;
    if (a5)
    {
      _CalEventGetLargestPossibleAlarmOffsets(a1, &v63, &v62);
      if (v63 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v63;
      }
      if (v62 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v62;
      }
    }
    else
    {
      RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
      os_unfair_lock_lock(RecordLock);
      _CalEventGetLargestPossibleAlarmOffsets(a1, &v63, &v62);
      if (v63 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v63;
      }
      if (v62 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v62;
      }
      long long v23 = (const os_unfair_lock *)CalGetRecordLock();
      long long v24 = (os_unfair_lock_s *)v23;
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(v23);
      }
      os_unfair_lock_unlock(v24);
    }
    uint64_t v25 = [v19 dateByAddingTimeInterval:(double)-v21];

    uint64_t v26 = [v14 dateByAddingTimeInterval:(double)-v20];

    id v14 = (id)v26;
    id v13 = (id)v25;
  }
  if (Count < 1)
  {
    unsigned int v31 = (void *)MEMORY[0x1E4F1C9C8];
    CalDateTimeGetAbsoluteTime();
    objc_msgSend(v31, "dateWithTimeIntervalSinceReferenceDate:");
    double v27 = (CDBRecurrenceGenerator *)objc_claimAutoreleasedReturnValue();
    double v32 = (double)DurationWhileLocked;
    int v29 = [(CDBRecurrenceGenerator *)v27 dateByAddingTimeInterval:(double)DurationWhileLocked];
    if ([(CDBRecurrenceGenerator *)v27 CalIsAfterOrSameAsDate:v13]
      && ([(CDBRecurrenceGenerator *)v27 CalIsBeforeDate:v14] & 1) != 0
      || [v29 CalIsAfterDate:v13]
      && ([v29 CalIsBeforeOrSameAsDate:v14] & 1) != 0
      || [(CDBRecurrenceGenerator *)v27 CalIsBeforeDate:v13]
      && [v29 CalIsAfterDate:v14])
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      CFArrayAppendValue(Mutable, v27);
    }
    else
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    if (a5) {
      ProposedStartCFDateRef Date = _CalEventGetProposedStartDate(a1);
    }
    else {
      CalEventGetProposedStartDate(a1);
    }
    if (ProposedStartDate != *MEMORY[0x1E4F57888])
    {
      uint64_t v34 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
      uint64_t v35 = [v34 dateByAddingTimeInterval:v32];
      id v36 = v13;
      BOOL v37 = (void *)v35;
      uint64_t v38 = v36;
      if (objc_msgSend(v34, "CalIsAfterOrSameAsDate:")
        && ([v34 CalIsBeforeDate:v14] & 1) != 0
        || [v37 CalIsAfterDate:v38]
        && ([v37 CalIsBeforeOrSameAsDate:v14] & 1) != 0
        || [v34 CalIsBeforeDate:v38]
        && [v37 CalIsAfterDate:v14])
      {
        if (!Mutable) {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        }
        CFArrayAppendValue(Mutable, v34);
      }

      id v13 = v38;
    }
  }
  else
  {
    double v27 = objc_alloc_init(CDBRecurrenceGenerator);
    id v28 = [(CDBRecurrenceGenerator *)v27 copyOccurrenceDatesWithCalEvent:a1 startDate:v13 endDate:v14 timeZone:v61 includeExtraOccurrencesPastEndDate:a7 locked:a5];
    int v29 = (void *)[v28 mutableCopy];

    CFMutableDictionaryRef Mutable = (__CFArray *)CFRetain(v29);
  }

  CFArrayRef v39 = cf;
  if (Mutable)
  {
    CFIndex v40 = CFArrayGetCount(Mutable);
    if (v40 >= 1)
    {
      CFIndex v41 = v40;
      CFArrayRef v42 = a5
          ? _CalCalendarItemCopyExceptionDatesForRecurrences(a1)
          : CalCalendarItemCopyExceptionDatesForRecurrences(a1);
      CFArrayRef v43 = v42;
      if (v42)
      {
        id v58 = v14;
        CFIndex v44 = CFArrayGetCount(v42);
        if (v44 >= 1)
        {
          CFIndex v45 = v44;
          id v57 = v13;
          CFComparisonResult v46 = CFStringCompare(theString1, @"_float", 0);
          double v47 = 0;
          if (v46 == kCFCompareEqualTo) {
            double v47 = (void *)CalTimeZoneCopyCFTimeZone();
          }
          for (CFIndex i = 0; i != v45; ++i)
          {
            uint64_t v49 = CFArrayGetValueAtIndex(v43, i);
            if (v49)
            {
              double v50 = (void *)v49;
              if (v46)
              {
                uint64_t v51 = (void *)v49;
              }
              else
              {
                id v52 = v47;
                if (!v47)
                {
                  id v13 = (id)CalCopyTimeZone();
                  id v52 = v13;
                }
                uint64_t v51 = objc_msgSend(v50, "dateInTimeZone:fromTimeZone:", v61, v52, v57);

                if (!v47) {
              }
                }
              v64.id location = 0;
              v64.length = v41;
              CFIndex v53 = CFArrayBSearchValues(Mutable, v64, v51, MEMORY[0x1E4F1C228], 0);
              if (v53 < v41)
              {
                CFIndex v54 = v53;
                CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v53);
                if (CFEqual(ValueAtIndex, v51))
                {
                  CFArrayRemoveValueAtIndex(Mutable, v54);
                  --v41;
                }
              }
            }
            else
            {
              uint64_t v51 = 0;
            }
          }
          id v13 = v57;
          CFArrayRef v39 = cf;
          if (v47) {
            CFRelease(v47);
          }
        }
        CFRelease(v43);
        id v14 = v58;
      }
    }
  }
  if (v39) {
    CFRelease(v39);
  }
  CalDateTimeRelease();

  return Mutable;
}

__CFArray *_CalEventCopyOccurrenceDatesInDateRangeExpandedForAlarms(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  return _CalEventCopyOccurrenceDatesInDateRangeWhileLocked(a1, a2, a3, a4, 1, 1, a5);
}

__CFArray *CalEventCopyOccurrenceDatesInDateRange(uint64_t a1, void *a2, void *a3, void *a4)
{
  return _CalEventCopyOccurrenceDatesInDateRangeWhileLocked(a1, a2, a3, a4, 0, 0, 0);
}

uint64_t _CalEventOccurrencesExistInDateRange(uint64_t a1, uint64_t GregorianDateWithFallbackToDefaultTimeZone, uint64_t a3, uint64_t a4, uint64_t a5, int a6, const void *a7)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  StartCFDateRef Date = _CalEventGetStartDate(a1);
  CFStringRef v53 = v14;
  uint64_t v54 = StartDate;
  CFArrayRef v15 = _CalCalendarItemCopyRecurrencesWhileLocked(a1, 1);
  Duratiouint64_t n = _CalEventGetDuration(a1);
  if (!v15)
  {
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v15);
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  CFIndex v50 = Count;
  if (Count < 1)
  {
    uint64_t v44 = 0;
    goto LABEL_63;
  }
  double v18 = v17;
  uint64_t v48 = a1;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  double v20 = v19;
  char v21 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  CFIndex range = 0;
  CFIndex v22 = 0;
  if (Duration) {
    int v23 = 1;
  }
  else {
    int v23 = 2;
  }
  int v47 = v23;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v49 = v15;
  do
  {
    CFIndex v51 = v22;
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v15, v22);
    if ((v21 & 1) != 0 || v20 > v18) {
      goto LABEL_54;
    }
    int v24 = v47;
    double v25 = v20;
    while (1)
    {
      uint64_t v26 = _CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited((uint64_t)ValueAtIndex, v54, v53, Duration, GregorianDateWithFallbackToDefaultTimeZone, a3, a4, a5, v24, a7);
      if (!v26)
      {
        double v20 = v25;
        goto LABEL_54;
      }
      CFArrayRef v27 = v26;
      CFIndex v28 = CFArrayGetCount(v26);
      if (v28 < 1)
      {
        double v20 = v25;
        goto LABEL_53;
      }
      CFIndex v29 = v28;
      uint64_t v55 = GregorianDateWithFallbackToDefaultTimeZone;
      uint64_t v56 = a3;
      uint64_t v30 = a4;
      uint64_t v31 = a5;
      double v32 = CFArrayGetValueAtIndex(v27, 0);
      CFArrayRef v33 = 0;
      if (v29 != 1) {
        CFArrayRef v33 = CFArrayGetValueAtIndex(v27, 1);
      }
      if (!v32 || MEMORY[0x1AD0E87A0](v32) > v18)
      {
LABEL_45:
        double v20 = v25;
        a5 = v31;
LABEL_46:
        a4 = v30;
        uint64_t GregorianDateWithFallbackToDefaultTimeZone = v55;
        a3 = v56;
        goto LABEL_53;
      }
      if (!a6 || MEMORY[0x1AD0E87A0](v32) >= v25)
      {
        if (theArray) {
          goto LABEL_19;
        }
        CFIndex v41 = _CalCalendarItemCopyExceptionDatesForRecurrences(v48);
        if (!v41) {
          CFIndex v41 = CFArrayCreate(allocator, 0, 0, MEMORY[0x1E4F1D510]);
        }
        CFArrayRef theArray = v41;
        CFIndex range = CFArrayGetCount(v41);
        _CalEventGetStartDate(v48);
        if (!v42)
        {
LABEL_19:
          uint64_t v34 = (uint64_t)cf;
        }
        else
        {
          uint64_t v34 = (uint64_t)cf;
          if (CFEqual(v42, @"_float") && !cf) {
            uint64_t v34 = CalTimeZoneCopyCFTimeZone();
          }
        }
        uint64_t v35 = CFRetain(v32);
        CFTypeRef cf = (CFTypeRef)v34;
        if (v34)
        {
          MEMORY[0x1AD0E87A0](v32);
          CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
          CFRelease(v35);
          CFArrayRef v15 = v49;
          CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
          uint64_t v35 = CFDateCreate(0, v36);
        }
        v71.id location = 0;
        v71.length = range;
        CFIndex v37 = CFArrayBSearchValues(theArray, v71, v35, MEMORY[0x1E4F1C228], 0);
        if (v37 < 0 || v37 >= range || (uint64_t v38 = CFArrayGetValueAtIndex(theArray, v37), !CFEqual(v35, v38)))
        {
          char v21 = 1;
          if (!v35) {
            goto LABEL_29;
          }
LABEL_28:
          CFRelease(v35);
          goto LABEL_29;
        }
        char v21 = 0;
        if (v35) {
          goto LABEL_28;
        }
      }
LABEL_29:
      if (v21) {
        goto LABEL_45;
      }
      if (v24 < 2)
      {
        MEMORY[0x1AD0E87A0](v32);
        a5 = v31;
      }
      else
      {
        a5 = v31;
        if (!v33)
        {
          double v20 = v25;
          goto LABEL_46;
        }
        MEMORY[0x1AD0E87A0](v33);
      }
      a4 = v30;
      uint64_t GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      a3 = v39;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      double v20 = v40;
      if (v40 <= v25) {
        break;
      }
LABEL_37:
      CFRelease(v27);
      double v25 = v20;
      if (v20 > v18) {
        goto LABEL_54;
      }
    }
    if (v24 < 2)
    {
      int v24 = 2;
      goto LABEL_37;
    }
    CFArrayRef v43 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218754;
      double v63 = v20;
      __int16 v64 = 2048;
      double v65 = v25;
      __int16 v66 = 1024;
      unsigned int v67 = Duration;
      __int16 v68 = 2114;
      uint64_t v69 = a7;
      _os_log_impl(&dword_1A8E81000, v43, OS_LOG_TYPE_FAULT, "_CalEventOccurrencesExistInDateRange is not making any progress. currentStartAbs=%f, lastStartAbs=%f, duration=%u, tz=%{public}@", buf, 0x26u);
    }
    CFArrayRef v15 = v49;
LABEL_53:
    CFRelease(v27);
LABEL_54:
    CFIndex v22 = v51 + 1;
  }
  while (v51 + 1 < v50 && (v21 & 1) == 0);
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v44 = v21 & 1;
LABEL_63:
  CFRelease(v15);
  return v44;
}

uint64_t _CalEventOccurrencesExistWithinTimeInterval(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, double a5, uint64_t a6, uint64_t a7, const void *a8)
{
  CFArrayRef v12 = _CalCalendarItemCopyRecurrencesWhileLocked(a1, 1);
  if (!v12) {
    return 0;
  }
  CFArrayRef v13 = v12;
  CFIndex Count = CFArrayGetCount(v12);
  if (Count < 1)
  {
    uint64_t v35 = 0;
  }
  else
  {
    if (!a2 || (CFStringCompare(a2, @"_float", 0), (CFStringRef v14 = (const void *)CalTimeZoneCopyCFTimeZone()) == 0)) {
      CFStringRef v14 = CFRetain(a8);
    }
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    double v16 = v15;
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    signed int v41 = (int)(v17 - v16);
    if (v14) {
      CFRelease(v14);
    }
    char v42 = 0;
    CFIndex v18 = 0;
    uint64_t v39 = *(void *)&v16;
    CFStringRef v19 = a2;
    uint64_t v37 = a3;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v13, v18);
      _CalRecurrenceGetFrequency((uint64_t)ValueAtIndex);
      _CalRecurrenceGetInterval((uint64_t)ValueAtIndex);
      uint64_t v21 = CalGregorianDateAddUnits();
      int v23 = _CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited((uint64_t)ValueAtIndex, v39, v19, v41, a3, a4, v21, v22, 0, a8);
      if (v23)
      {
        CFArrayRef v24 = v23;
        CFIndex v25 = CFArrayGetCount(v23);
        if (v25 >= 1 && (v42 & 1) == 0)
        {
          CFIndex v26 = v25;
          uint64_t v27 = a4;
          CFArrayRef v28 = v13;
          CFIndex v29 = a8;
          uint64_t v30 = 0;
          CFIndex v31 = 0;
          while (1)
          {
            double v32 = CFArrayGetValueAtIndex(v24, v31);
            CFArrayRef v33 = v32;
            if (v30)
            {
              double v34 = MEMORY[0x1AD0E87A0](v32);
              if (v34 - (MEMORY[0x1AD0E87A0](v30) + (double)v41) < a5) {
                break;
              }
            }
            ++v31;
            uint64_t v30 = v33;
            if (v31 >= v26) {
              goto LABEL_18;
            }
          }
          char v42 = 1;
LABEL_18:
          a8 = v29;
          CFArrayRef v13 = v28;
          a4 = v27;
          a3 = v37;
          CFStringRef v19 = a2;
        }
        CFRelease(v24);
      }
      ++v18;
      uint64_t v35 = v42 & 1;
    }
    while (v18 < Count && (v42 & 1) == 0);
  }
  CFRelease(v13);
  return v35;
}

uint64_t _CalRecurrenceByMonthFilter(unsigned int a1, uint64_t a2)
{
  if (*(_DWORD *)a2)
  {
    LOBYTE(v4) = *(unsigned char *)(a2 + 4);
  }
  else
  {
    unint64_t GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    *(void *)a2 = GregorianDateWithFallbackToDefaultTimeZone;
    *(void *)(a2 + 8) = v6;
    unint64_t v4 = HIDWORD(GregorianDateWithFallbackToDefaultTimeZone);
  }
  return (a1 >> (v4 - 1)) & 1;
}

BOOL _CalRecurrenceByMonthDayFilterPinned(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  return _CalRecurrenceByMonthDayFilterInternal(a1, a2, a3, 1);
}

BOOL _CalRecurrenceByMonthDayFilter(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  return _CalRecurrenceByMonthDayFilterInternal(a1, a2, a3, 0);
}

uint64_t _CalRecurrenceByDayMaskFilter(unsigned int a1)
{
  return (a1 >> CalAbsoluteTimeGetDayOfWeek()) & 1;
}

uint64_t _CalRecurrenceByDayMaskFromArrayByDayItems(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  uint64_t v5 = 0;
  do
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    if (*ValueAtIndex <= 1u) {
      uint64_t v5 = (1 << ValueAtIndex[1]) | v5;
    }
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t _CalRecurrenceApplyFiltersToSingleDate(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6)
{
  if (vabdd_f64(a5, a6) < 2.22044605e-16) {
    return 1;
  }
  p_uint64_t Null = a1;
  uint64_t Null = 0;
  uint64_t v16 = 0;
  if (!a1)
  {
    uint64_t Null = CalGregorianDateGetNull();
    uint64_t v16 = v11;
    p_uint64_t Null = &Null;
  }
  if (a3 < 1) {
    return 1;
  }
  CFArrayRef v12 = (void *)(a2 + 8);
  unint64_t v13 = 1;
  do
  {
    uint64_t result = ((uint64_t (*)(void, uint64_t *, uint64_t, double))*(v12 - 1))(*v12, p_Null, a4, a5);
    if (v13 >= a3) {
      break;
    }
    v12 += 2;
    ++v13;
  }
  while ((result & 1) != 0);
  return result;
}

BOOL _CalRecurrenceByMonthDayFilterInternal(const __CFArray *a1, uint64_t a2, uint64_t a3, int a4)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    signed int DaysInMonth = 0;
    uint64_t v10 = 1;
    while (1)
    {
      signed int ValueAtIndex = CFArrayGetValueAtIndex(a1, v10 - 1);
      if (ValueAtIndex < 0)
      {
        if (!DaysInMonth)
        {
          if (!*(_DWORD *)a2)
          {
            *(void *)a2 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
            *(void *)(a2 + 8) = v12;
          }
          signed int DaysInMonth = CalGregorianDateGetDaysInMonth();
        }
        ValueAtIndex += DaysInMonth + 1;
      }
      if (*(_DWORD *)a2)
      {
        if (a4) {
          goto LABEL_13;
        }
      }
      else
      {
        *(void *)a2 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
        *(void *)(a2 + 8) = v13;
        if (a4)
        {
LABEL_13:
          if (!DaysInMonth) {
            signed int DaysInMonth = CalGregorianDateGetDaysInMonth();
          }
          if (ValueAtIndex >= DaysInMonth) {
            signed int ValueAtIndex = DaysInMonth;
          }
        }
      }
      int v14 = *(char *)(a2 + 5);
      BOOL result = ValueAtIndex == v14;
      if (v10 < v8)
      {
        ++v10;
        if (ValueAtIndex != v14) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

BOOL _CalRecurrenceRangeFilter(double *a1, double a2)
{
  if (*a1 > a2) {
    return 0;
  }
  double v3 = a1[1];
  return v3 > a2 || fabs(v3) < 2.22044605e-16;
}

void _CalRecurrenceApplyBySetPosToRange(__CFArray *a1, CFArrayRef theArray, CFIndex *a3, int a4, double a5, double a6, double a7)
{
  CFIndex v32 = a3[1];
  CFIndex Count = CFArrayGetCount(theArray);
  if (a3[1] >= 1)
  {
    uint64_t v15 = Count;
    uint64_t v16 = 0;
    CFIndex v17 = *a3;
    double v18 = fabs(a6);
    do
    {
      BOOL v19 = v18 < 2.22044605e-16 && a4 == 0;
      if (v19
        || ((double v20 = CFArrayGetValueAtIndex(a1, v17), v21 = MEMORY[0x1AD0E87A0](v20), v22 = vabdd_f64(v21, a7), v21 >= a6)
          ? (BOOL v23 = v18 >= 2.22044605e-16)
          : (BOOL v23 = 0),
            v22 >= 2.22044605e-16 ? (BOOL v24 = v21 < a5) : (BOOL v24 = 1),
            v24 || v23 || v15 < 1))
      {
LABEL_22:
        CFArrayRemoveValueAtIndex(a1, v17);
        uint64_t v31 = a3[1] - 1;
        a3[1] = v31;
        --v17;
        ++v16;
      }
      else
      {
        CFIndex v25 = 0;
        CFIndex v26 = v17 - *a3 + v16;
        CFIndex v27 = v26 + 1;
        CFIndex v28 = v26 - v32;
        while (1)
        {
          unsigned int ValueAtIndex = CFArrayGetValueAtIndex(theArray, v25);
          if (ValueAtIndex == v27 || ValueAtIndex == v28) {
            break;
          }
          if (v15 == ++v25) {
            goto LABEL_22;
          }
        }
        a4 -= a4 > 0;
        uint64_t v31 = a3[1];
      }
      ++v17;
    }
    while (v17 < *a3 + v31);
  }
}

uint64_t _CalRecurrenceByDayGenerator(const __CFArray *a1, CFRange *a2, int a3, CFArrayRef theArray, double a5, double a6, double a7, uint64_t a8, int a9, uint64_t a10)
{
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t result = CalAbsoluteTimeAddGregorianUnits();
  if (v20 > a5)
  {
    double v21 = v20;
    int v38 = a9;
    int v22 = 0;
    double v23 = 0.0;
    int v24 = 1;
    double v25 = a5;
    do
    {
      DayOfWeeuint64_t k = CalAbsoluteTimeGetDayOfWeek();
      if (fabs(v23) < 2.22044605e-16) {
        int v24 = DayOfWeek;
      }
      CalAbsoluteTimeAddGregorianUnits();
      CalAbsoluteTimeAddGregorianUnits();
      double v23 = v27;
      CalAbsoluteTimeGetDayOfWeek();
      int v37 = v24;
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          unsigned int ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          if (*ValueAtIndex)
          {
            CalAbsoluteTimeAddGregorianUnits();
            BOOL v31 = v30 < v25 || v30 > v23;
            if (!v31) {
              _CalRecurrenceResultsAddValueIfNotPresent(a1, a2, a8, v38, a10, v30, a7);
            }
          }
          else
          {
            v22 |= 1 << ValueAtIndex[1];
          }
        }
      }
      uint64_t result = CalAbsoluteTimeAddGregorianUnits();
      double v25 = v32;
      int v24 = v37;
    }
    while (v32 < v21);
    if (v22)
    {
      int v33 = 0;
      do
      {
        if (v22)
        {
          uint64_t result = CalAbsoluteTimeAddGregorianUnits();
          if (v34 <= v21)
          {
            CFAbsoluteTime v35 = v34;
            do
            {
              _CalRecurrenceResultsAddValueIfNotPresent(a1, a2, a8, v38, a10, v35, a7);
              uint64_t result = CalAbsoluteTimeAddGregorianUnits();
              CFAbsoluteTime v35 = v36;
            }
            while (v36 <= v21);
          }
        }
        ++v33;
        BOOL v31 = v22 > 1;
        v22 >>= 1;
      }
      while (v31);
    }
  }
  return result;
}

CFIndex _CalRecurrenceByMonthDayGeneratorPinned(const __CFArray *a1, CFRange *a2, int a3, CFArrayRef theArray, double a5, double a6, double a7, uint64_t a8, int a9, uint64_t a10)
{
  return _CalRecurrenceByMonthDayGeneratorInternal(a1, a2, theArray, a8, a9, a10, 1u, a5, a6, a7);
}

CFIndex _CalRecurrenceByMonthDayGenerator(const __CFArray *a1, CFRange *a2, int a3, CFArrayRef theArray, double a5, double a6, double a7, uint64_t a8, int a9, uint64_t a10)
{
  return _CalRecurrenceByMonthDayGeneratorInternal(a1, a2, theArray, a8, a9, a10, 0, a5, a6, a7);
}

uint64_t _CalRecurrenceApplyGenerator(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  CFIndex Count = CFArrayGetCount(a1);
  uint64_t v26 = 0;
  CalAbsoluteTimeAddGregorianUnits();
  (*(void (**)(const __CFArray *, CFIndex *, uint64_t, void, uint64_t, uint64_t, uint64_t, double, double, double, double, double))a2)(a1, &Count, a5, *(void *)(a2 + 8), a3, a4, a7, a11, v22, a8, a9, a10);
  if (!a6) {
    return v26;
  }
  uint64_t v23 = *a6;
  uint64_t result = v26;
  if (v23)
  {
    if (v23 >= v26)
    {
LABEL_6:
      *a6 = v23 - result;
      return result;
    }
    v27.length = v26 - v23;
    v27.id location = Count + v23;
    CFArrayReplaceValues(a1, v27, 0, 0);
    uint64_t result = *a6;
    if (result)
    {
      LODWORD(v23) = *a6;
      goto LABEL_6;
    }
    return 0;
  }
  return result;
}

void _CalRecurrenceResultsAddValueIfNotPresent(const __CFArray *a1, CFRange *a2, uint64_t a3, int a4, uint64_t a5, CFAbsoluteTime a6, double a7)
{
  if (vabdd_f64(a6, a7) >= 2.22044605e-16)
  {
    CFIndex location = a2->location;
    CFIndex length = a2->length;
    if (!a4 || _CalRecurrenceApplyFiltersToSingleDate(0, a3, a4, a5, a6, a7))
    {
      CFIndex v12 = length + location;
      CFDateRef v13 = CFDateCreate(0, a6);
      CFIndex v14 = CFArrayBSearchValues(a1, *a2, v13, MEMORY[0x1E4F1C228], 0);
      CFIndex v15 = v14;
      if (v14 >= v12 || v14 < 0 || (unsigned int ValueAtIndex = CFArrayGetValueAtIndex(a1, v14), !CFEqual(ValueAtIndex, v13)))
      {
        if (v15 >= v12) {
          CFIndex v17 = v12;
        }
        else {
          CFIndex v17 = v15;
        }
        CFArrayInsertValueAtIndex(a1, v17, v13);
        ++a2->length;
      }
      CFRelease(v13);
    }
  }
}

CFIndex _CalRecurrenceByMonthDayGeneratorInternal(const __CFArray *a1, CFRange *a2, CFArrayRef theArray, uint64_t a4, int a5, uint64_t a6, unsigned __int8 a7, double a8, double a9, double a10)
{
  CFIndex result = CFArrayGetCount(theArray);
  if (a8 < a9)
  {
    uint64_t v19 = result;
    do
    {
      CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      int DaysInMonth = CalGregorianDateGetDaysInMonth();
      if (v19 >= 1)
      {
        int v21 = DaysInMonth;
        CFIndex v22 = 0;
        int v23 = DaysInMonth + 1;
        do
        {
          int ValueAtIndex = CFArrayGetValueAtIndex(theArray, v22);
          if ((a7 & ((v23 & (ValueAtIndex >> 31)) + ValueAtIndex > v21)) != 0) {
            int v25 = v21;
          }
          else {
            int v25 = (v23 & (ValueAtIndex >> 31)) + ValueAtIndex;
          }
          if (v25 >= 1 && v25 <= v21)
          {
            CalAbsoluteTimeAddGregorianUnits();
            _CalRecurrenceResultsAddValueIfNotPresent(a1, a2, a4, a5, a6, v27, a10);
          }
          ++v22;
        }
        while (v19 != v22);
      }
      CFIndex result = CalAbsoluteTimeAddGregorianUnits();
    }
    while (v28 < a9);
  }
  return result;
}

BOOL _CalValidateCalDate(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = [v5 calendarIdentifier];
  CFIndex v8 = [MEMORY[0x1E4F1C9A8] CalGregorianGMTCalendar];
  uint64_t v9 = [v8 calendarIdentifier];
  int v10 = [v7 isEqualToString:v9];

  if (v10)
  {
    [v6 year];
    [v6 month];
    uint64_t DaysInMonth = (int)CalGregorianDateGetDaysInMonth();
  }
  else
  {
    CFIndex v12 = [v5 dateFromComponents:v6];
    [v5 rangeOfUnit:16 inUnit:8 forDate:v12];
    uint64_t DaysInMonth = v13;
  }
  uint64_t v14 = [v6 day];
  BOOL v15 = v14 <= DaysInMonth;
  if (v14 > DaysInMonth && a3)
  {
    [v6 setDay:DaysInMonth];
    BOOL v15 = 1;
  }

  return v15;
}

void _CalRecurrenceByYearDayGenerator(const __CFArray *a1, CFRange *a2, int a3, CFArrayRef theArray, double a5, double a6, double a7, uint64_t a8, int a9, uint64_t a10)
{
  CFIndex Count = CFArrayGetCount(theArray);
  int DaysInYear = CalAbsoluteTimeGetDaysInYear();
  if (Count >= 1)
  {
    int v18 = DaysInYear;
    CFIndex v19 = 0;
    int v20 = DaysInYear + 1;
    do
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(theArray, v19);
      int v22 = (v20 & (ValueAtIndex >> 31)) + ValueAtIndex;
      if (v22 >= 1 && v22 <= v18)
      {
        CalAbsoluteTimeAddGregorianUnits();
        _CalRecurrenceResultsAddValueIfNotPresent(a1, a2, a8, a9, a10, v24, a7);
      }
      ++v19;
    }
    while (Count != v19);
  }
}

uint64_t _CalRecurrenceByDayFilter(const __CFArray *a1, uint64_t *a2, const __CFTimeZone *a3, CFAbsoluteTime a4)
{
  CFIndex Count = CFArrayGetCount(a1);
  DayOfWeeuint64_t k = CalAbsoluteTimeGetDayOfWeek();
  if (Count < 1) {
    return 0;
  }
  unsigned int v10 = DayOfWeek;
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = 1;
  while (1)
  {
    int ValueAtIndex = (int *)CFArrayGetValueAtIndex(a1, v13 - 1);
    if (ValueAtIndex[1] == v10) {
      break;
    }
    uint64_t result = 0;
LABEL_24:
    if (v13 < Count)
    {
      ++v13;
      if (!result) {
        continue;
      }
    }
    return result;
  }
  BOOL v15 = ValueAtIndex;
  int v16 = *ValueAtIndex;
  if (*ValueAtIndex)
  {
    if (!*(_DWORD *)a2)
    {
      *a2 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      a2[1] = v17;
      int v16 = *v15;
    }
    if (v16 < 1)
    {
      if (!v12)
      {
        CalGregorianDateGetDaysInMonth();
        CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
        unsigned int v23 = CalAbsoluteTimeGetDayOfWeek();
        uint64_t v28 = 0;
        if (v23 >= v10) {
          int v24 = 0;
        }
        else {
          int v24 = 7;
        }
        int v29 = v23 - v10 + v24;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        int v32 = 0;
        CalAbsoluteTimeAddGregorianUnits();
        CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v26, v25, a4, a3, 4uLL);
        int v12 = v26.days / 7 + 1;
        int v16 = *v15;
      }
      BOOL v21 = v16 + v12 == 0;
    }
    else
    {
      if (!v11)
      {
        CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
        unsigned int v18 = CalAbsoluteTimeGetDayOfWeek();
        uint64_t v28 = 0;
        if (v10 >= v18) {
          int v19 = 0;
        }
        else {
          int v19 = 7;
        }
        int v29 = v10 - v18 + v19;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        int v32 = 0;
        CalAbsoluteTimeAddGregorianUnits();
        CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v27, a4, v20, a3, 4uLL);
        int v11 = v27.days / 7 + 1;
        int v16 = *v15;
      }
      BOOL v21 = v16 == v11;
    }
    uint64_t result = v21;
    goto LABEL_24;
  }
  return 1;
}

BOOL _CalRecurrenceByWeekNoFilter(uint64_t a1)
{
  int WeekOfYear = CalAbsoluteTimeGetWeekOfYear();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (Count < 1) {
    return 0;
  }
  CFIndex v4 = Count;
  int WeeksInYear = 0;
  uint64_t v6 = 1;
  do
  {
    unsigned int ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v6 - 1);
    if ((ValueAtIndex & 0x80000000) != 0)
    {
      if (!WeeksInYear) {
        int WeeksInYear = CalAbsoluteTimeGetWeeksInYear();
      }
      ValueAtIndex += WeeksInYear + 1;
    }
    BOOL result = ValueAtIndex == WeekOfYear;
    if (v6 >= v4) {
      break;
    }
    ++v6;
  }
  while (ValueAtIndex != WeekOfYear);
  return result;
}

void CalCategoryInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalCategoryClass, (const char **)&kCalCategoryIndexes, 0);
}

void CalCategoryMigrateTables(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 58)
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalCategoryClass, (const char **)&kCalCategoryIndexes, 0);
  }
}

const void *_CalDatabaseCreateCategory(uint64_t a1)
{
  id v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 12);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateCategoryWithNameAndEntityType(os_unfair_lock_s *a1)
{
  id v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFTypeRef Category = _CalDatabaseCreateCategory((uint64_t)a1);
  BOOL v4 = Category;
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = Category == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      CFIndex v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

const void *CalDatabaseCreateCategory(os_unfair_lock_s *a1)
{
  id v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFTypeRef Category = _CalDatabaseCreateCategory((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Category;
}

uint64_t _CalCategoryRemove(const void *a1)
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  CFArrayRef v3 = (const __CFArray *)_CalDatabaseCopyCalendarItemsInCategory(DatabaseForRecord);
  if (v3)
  {
    CFArrayRef v4 = v3;
    CFIndex Count = CFArrayGetCount(v3);
    if (Count < 1)
    {
      CFRelease(v4);
    }
    else
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      char v8 = 0;
      do
      {
        unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
        if (_CalCalendarItemIsInvite((uint64_t)ValueAtIndex)) {
          char v8 = 1;
        }
        else {
          _CalCalendarItemRemoveCategory(ValueAtIndex, a1);
        }
        ++v7;
      }
      while (v6 != v7);
      CFRelease(v4);
      if (v8)
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context) {
                os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
        }
        return CPRecordSetProperty();
      }
    }
  }
  uint64_t v12 = CalGetDatabaseForRecord();
  return _CalDatabaseRemoveEntity(v12, a1);
}

uint64_t _CalDatabaseCopyCalendarItemsInCategory(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
}

void CalCategoryRemove(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCategoryRemove(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCategoryGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyCategoryWithUID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  CFArrayRef v4 = (const void *)_CalCategoryGetWithUID(RecordStore);
  BOOL v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *CalDatabaseCopyCategoryWithNameAndEntityType(os_unfair_lock_s *a1, const __CFString *a2, int a3)
{
  CFIndex v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v10 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (v10)
  {
    CFArrayRef v11 = v10;
    CFIndex Count = CFArrayGetCount(v10);
    if (Count <= 0)
    {
      CFRelease(v11);
    }
    else
    {
      if (Count != 1) {
        CFLog();
      }
      unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v11, 0);
      CFRetain(ValueAtIndex);
      CFRelease(v11);
      if (ValueAtIndex) {
        goto LABEL_31;
      }
    }
  }
  uint64_t v14 = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v16) {
      os_unfair_lock_assert_owner(v16 + 20);
    }
  }
  CFArrayRef v17 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
  if (v17)
  {
    CFArrayRef v18 = v17;
    CFIndex v19 = CFArrayGetCount(v17);
    if (v19 < 1)
    {
LABEL_28:
      unsigned int ValueAtIndex = 0;
    }
    else
    {
      CFIndex v20 = v19;
      CFIndex v21 = 0;
      while (1)
      {
        int v22 = CFArrayGetValueAtIndex(v18, v21);
        if (_CalEntityGetType(v22) == 12 && _CalCategoryGetEntityType((uint64_t)v22) == a3)
        {
          CFStringRef Name = (const __CFString *)_CalCategoryGetName((uint64_t)v22);
          if (Name)
          {
            if (CFStringCompare(Name, a2, 1uLL) == kCFCompareEqualTo) {
              break;
            }
          }
        }
        if (v20 == ++v21) {
          goto LABEL_28;
        }
      }
      unsigned int ValueAtIndex = CFRetain(v22);
    }
    CFRelease(v18);
  }
  else
  {
    unsigned int ValueAtIndex = 0;
  }
LABEL_31:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  return ValueAtIndex;
}

uint64_t __CalDatabaseCopyCategoryWithNameAndEntityType_block_invoke(uint64_t a1, uint64_t a2)
{
  CFArrayRef v4 = *(sqlite3_stmt **)(a2 + 8);
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(*(const __CFString **)(a1 + 32));
  sqlite3_bind_text(v4, 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
  CFIndex v6 = *(sqlite3_stmt **)(a2 + 8);
  int v7 = *(_DWORD *)(a1 + 40);
  return sqlite3_bind_int(v6, 2, v7);
}

uint64_t _CalCategoryGetEntityType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalCategoryGetName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalDatabaseCopyCategoriesWithEntityType(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t __CalDatabaseCopyCategoriesWithEntityType_block_invoke(uint64_t a1, uint64_t a2)
{
  return sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 32));
}

uint64_t CalDatabaseCopyCalendarItemsInCategory(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = _CalDatabaseCopyCalendarItemsInCategory((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalCategoryGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalCategoryGetUID()
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalCategorySetName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCategoryCopyName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCategorySetEntityType(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCategoryGetEntityType(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Entityunsigned int Type = _CalCategoryGetEntityType(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return EntityType;
}

void CalCategorySetHidden(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCategoryIsHidden(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void _CalSaveRelation(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  Cacheduint64_t Property = (void *)CPRecordGetCachedProperty();
  if (CachedProperty)
  {
    uint64_t v3 = CachedProperty;
    CFTypeID v4 = CFGetTypeID(CachedProperty);
    if (v4 == CalToManyRelationGetTypeID())
    {
      CalToManyRelationSave(v3);
    }
    else
    {
      CFTypeID v5 = CFGetTypeID(v3);
      pthread_once(&__CalRelationRegisterOnce, (void (*)(void))CalRelationRegisterClass);
      if (v5 == __CalRelationTypeID)
      {
        CalRelationOwnerDidSave((uint64_t)v3);
      }
    }
  }
}

uint64_t CalRelationRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  __CalRelationTypeuint64_t ID = result;
  return result;
}

uint64_t CalRelationGetOwner(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

CFTypeRef CalRelationCopyRelatedObject(uint64_t a1)
{
  _EnsureLoaded_0(a1);
  CFTypeRef RelatedObject = CalRelationRawGetRelatedObject(a1);
  CFTypeRef v3 = RelatedObject;
  if (RelatedObject) {
    CFRetain(RelatedObject);
  }
  return v3;
}

uint64_t _CalRelationUpdateSetRelationProperties(uint64_t a1, CFTypeRef a2)
{
  if (a2) {
    int ID = CPRecordGetID();
  }
  else {
    int ID = -1;
  }
  CFTypeRef RelatedObject = CalRelationRawGetRelatedObject(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = *(void *)(a1 + 16) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (ID != result || ID == -1 && RelatedObject != a2)
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v9 = *(void *)(a1 + 16) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPRecordSetProperty();
    if (RelatedObject)
    {
      if (*(unsigned char *)(a1 + 40))
      {
        if (*(void *)(a1 + 16))
        {
          uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
          _CalDatabaseRemoveEntity(DatabaseForRecord, RelatedObject);
        }
      }
      else
      {
        uint64_t v12 = CDBGetCommonEntityFunctionalityHandler(RelatedObject, 0, 0);
        [v12 removeDestructionObserver:a1];
      }
    }
    CalRelationRawSetRelatedObject(a1, a2);
    if (a2 && !*(unsigned char *)(a1 + 40))
    {
      uint64_t v13 = CDBGetCommonEntityFunctionalityHandler(a2, 1, 0);
      [v13 addDestructionObserver:a1];
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(a1 + 16))
      {
        if (CPRecordGetStore())
        {
          uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    return CPRecordMarkPropertyChanged();
  }
  return result;
}

uint64_t _CalRelationUpdateSetRelationID(uint64_t a1)
{
  if (CDBLockingAssertionsEnabled) {
    BOOL v1 = *(void *)(a1 + 16) == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

CFTypeRef CalRelationSetRelatedObject(void *a1, CFTypeRef a2)
{
  _EnsureLoaded_0((uint64_t)a1);
  CFTypeRef result = CalRelationRawGetRelatedObject((uint64_t)a1);
  if (result != a2)
  {
    if (result) {
      _CalRelationUpdateInverseProperty(a1, (uint64_t)result, 0);
    }
    if (a2) {
      _CalRelationUpdateInverseProperty(a1, (uint64_t)a2, 1);
    }
    return (CFTypeRef)_CalRelationUpdateSetRelationProperties((uint64_t)a1, a2);
  }
  return result;
}

uint64_t _CalRelationUpdateInverseProperty(void *a1, uint64_t a2, int a3)
{
  uint64_t result = a1[4];
  if (result)
  {
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      uint64_t v7 = result;
      for (CFIndex i = 0; i != v7; ++i)
      {
        unsigned int valuePtr = -1;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1[4], i);
        uint64_t result = CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
        CFArrayRef v10 = (uint64_t (*)(void *, uint64_t, void))a1[8];
        if (v10)
        {
          uint64_t result = v10(a1, a2, valuePtr);
          int v11 = result;
        }
        else
        {
          int v11 = 1;
        }
        if (valuePtr != -1)
        {
          uint64_t result = CPRecordGetPropertyDescriptor();
          if (result)
          {
            if (*(_UNKNOWN **)(result + 16) == &kCalRelationMethods && *(void *)(result + 32))
            {
              if (CDBLockingAssertionsEnabled)
              {
                if (CPRecordGetStore())
                {
                  uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (Context) {
                    os_unfair_lock_assert_owner(Context + 20);
                  }
                }
              }
              uint64_t result = CPRecordGetProperty();
              if (result && v11)
              {
                uint64_t v13 = (void *)result;
                CFTypeID v14 = CFGetTypeID((CFTypeRef)result);
                pthread_once(&__CalRelationRegisterOnce, (void (*)(void))CalRelationRegisterClass);
                if (v14 == __CalRelationTypeID)
                {
                  if (a3)
                  {
                    _EnsureLoaded_0((uint64_t)v13);
                    CFTypeRef RelatedObject = CalRelationRawGetRelatedObject((uint64_t)v13);
                    if (RelatedObject)
                    {
                      int v16 = RelatedObject;
                      if (RelatedObject != (CFTypeRef)a1[2])
                      {
                        _CalRelationUpdateInverseProperty(v13, RelatedObject, 0);
                        int v16 = (const void *)a1[2];
                      }
                    }
                    else
                    {
                      int v16 = (const void *)a1[2];
                    }
                  }
                  else
                  {
                    int v16 = 0;
                  }
                  uint64_t result = _CalRelationUpdateSetRelationProperties((uint64_t)v13, v16);
                }
                else
                {
                  CFTypeID v17 = CFGetTypeID(v13);
                  uint64_t result = CalToManyRelationGetTypeID();
                  if (v17 == result)
                  {
                    CFArrayRef v18 = (void *)a1[2];
                    if (a3) {
                      uint64_t result = (uint64_t)CalToManyRelationAddObject(v13, v18);
                    }
                    else {
                      uint64_t result = CalToManyRelationRemoveObject(v13, v18);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void CDBRelationEliminateRelatedObjectReference(uint64_t a1)
{
  if (a1)
  {
    CalRelationRawSetRelatedObject(a1, 0);
  }
  else
  {
    uint64_t v5 = v1;
    uint64_t v6 = v2;
    CFTypeRef v3 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CFTypeID v4 = 0;
      _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_ERROR, "Given 'relation' is NULL.  Will not eliminate related object reference.", v4, 2u);
    }
  }
}

uint64_t CalRelationOwnerWillSave(uint64_t a1)
{
  CFTypeID v2 = CFGetTypeID((CFTypeRef)a1);
  uint64_t result = pthread_once(&__CalRelationRegisterOnce, (void (*)(void))CalRelationRegisterClass);
  if (v2 == __CalRelationTypeID)
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v4 = *(void *)(a1 + 16) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    if (result == -1)
    {
      _EnsureLoaded_0(a1);
      if (CalRelationRawGetRelatedObject(a1) && CPRecordGetID() == -1 && *(unsigned char *)(a1 + 40))
      {
        uint64_t Store = CPRecordGetStore();
        if (CDBLockingAssertionsEnabled)
        {
          if (Store)
          {
            uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
        if (CPRecordProcessAddImmediate()) {
          CPRecordGetID();
        }
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(a1 + 16))
        {
          if (CPRecordGetStore())
          {
            BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t CalRelationOwnerDidSave(uint64_t a1)
{
  uint64_t result = (uint64_t)CalRelationRawGetRelatedObject(a1);
  if (result)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v3 = result;
      uint64_t result = *(void *)(a1 + 32);
      if (result)
      {
        uint64_t result = CFArrayGetCount((CFArrayRef)result);
        if (result >= 1)
        {
          for (CFIndex i = 0; result > i; ++i)
          {
            unsigned int valuePtr = -1;
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
            CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
            uint64_t PropertyDescriptor = CPRecordGetPropertyDescriptor();
            if (PropertyDescriptor && *(_UNKNOWN **)(PropertyDescriptor + 16) == &kCalRelationMethods) {
              uint64_t v7 = *(void *)(PropertyDescriptor + 32);
            }
            else {
              uint64_t v7 = 0;
            }
            BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 64);
            if (v8)
            {
              int v9 = v8(a1, v3, valuePtr);
              if (v7) {
                goto LABEL_14;
              }
            }
            else
            {
              int v9 = 1;
              if (v7)
              {
LABEL_14:
                if (v9)
                {
                  if (CDBLockingAssertionsEnabled && CPRecordGetStore())
                  {
                    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (Context) {
                      os_unfair_lock_assert_owner(Context + 20);
                    }
                  }
                  CPRecordGetID();
                  CPRecordSetProperty();
                }
              }
            }
            uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
          }
        }
      }
    }
  }
  return result;
}

uint64_t CalRelationMarkDirty(uint64_t a1)
{
  if (CDBLockingAssertionsEnabled) {
    BOOL v1 = *(void *)(a1 + 16) == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordMarkPropertyChanged();
}

void CalRelationDestroy(uint64_t a1)
{
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 72));
  *(void *)(a1 + 16) = 0;
  CFTypeID v2 = *(const void **)(a1 + 56);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      CFRelease(v2);
    }
    else
    {
      uint64_t v3 = CDBGetCommonEntityFunctionalityHandler(v2, 0, 0);
      [v3 removeDestructionObserver:a1];
    }
    *(void *)(a1 + 56) = 0;
  }
  BOOL v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 32) = 0;
  }
}

CFStringRef CalRelationCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<CalRelation: %p> owner: [%@] related object: [%@]", a1, *(void *)(a1 + 16), *(void *)(a1 + 56));
}

CFTypeRef _CalEntityGetDebugDescription(const void *a1)
{
  if (a1)
  {
    int Type = _CalEntityGetType(a1);
    uint64_t v3 = CalEntityTypeGetName(Type);
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CFArrayRef v5 = (const __CFArray *)CPRecordCopyChangedProperties();
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (v5)
    {
      CFIndex Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFArrayGetValueAtIndex(v5, i);
          uint64_t PropertyDescriptor = (void *)CPRecordGetPropertyDescriptor();
          if (PropertyDescriptor && *PropertyDescriptor)
          {
            int v11 = objc_msgSend(NSString, "stringWithUTF8String:");
            [v6 addObject:v11];
          }
        }
      }
      CFRelease(v5);
    }
    uint64_t v12 = [v6 componentsJoinedByString:@", "];
    id v13 = [NSString alloc];
    CFTypeID v14 = [NSNumber numberWithInt:CPRecordGetID()];
    BOOL v15 = (void *)[v13 initWithFormat:@"entityType: [%@] address: [%p] row ID: [%@] changedProperties: [%@]", v3, a1, v14, v12];

    if ((Type - 7) < 2 || Type == 100)
    {
      CFTypeRef DebugDescription = _CalParticipantGetDebugDescription(a1);
    }
    else
    {
      if (Type != 2)
      {
        CFTypeRef v19 = 0;
        goto LABEL_24;
      }
      CFTypeRef DebugDescription = _CalEventGetDebugDescription((uint64_t)a1);
    }
    CFTypeRef v19 = DebugDescription;
LABEL_24:
    CFIndex v20 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:v15];
    CFIndex v21 = v20;
    if (v19) {
      [v20 appendFormat:@" %@", v19];
    }
    CFTypeRef v22 = CFRetain(v21);
    CFTypeRef v23 = CFAutorelease(v22);

    return v23;
  }
  CFTypeID v17 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, "NULL 'entity' given.  Will not generate a debug description.", buf, 2u);
  }
  return 0;
}

CFTypeRef CalEntityGetDebugDescription(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef DebugDescription = _CalEntityGetDebugDescription(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DebugDescription;
}

void CDBEntityDestroy(const void *a1)
{
  CDBGetCommonEntityFunctionalityHandler(a1, 0, 0);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  [v1 notifyOfEntityDestruction];
}

uint64_t CalEntityIsOfType(const void *a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v5 = _CalEntityIsOfType(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

const void *CalEntityCopyRecordID(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Recordint ID = (const void *)_CalEntityGetRecordID(a1);
  BOOL v4 = RecordID;
  if (RecordID) {
    CFRetain(RecordID);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

__CFArray *_CalEntityCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, const void *a2, unsigned char *a3)
{
  int Type = _CalEntityGetType(a2);
  if (Type > 16)
  {
    switch(Type)
    {
      case 17:
        uint64_t v8 = a1;
        uint64_t v9 = (uint64_t)a2;
        break;
      case 19:
        uint64_t v8 = a1;
        uint64_t v9 = (uint64_t)a2;
        break;
      case 101:
        goto LABEL_11;
      default:
        return 0;
    }
    return _CalResourceChangeNotificationCopyRelatedEntitiesDeletedByTriggers(v8, v9);
  }
  if ((Type - 2) < 2)
  {
LABEL_11:
    return _CalCalendarItemCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)a2);
  }
  if (Type != 1)
  {
    if (Type == 6)
    {
      return (__CFArray *)_CalStoreCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)a2, a3);
    }
    return 0;
  }
  return (__CFArray *)_CalCalendarCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)a2, a3);
}

uint64_t _CalEntityIsNew(BOOL a1)
{
  BOOL v1 = a1;
  if (a1)
  {
    if (CPRecordGetID() == -1)
    {
      return 1;
    }
    else
    {
      uint64_t Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled) {
        BOOL v3 = Store == 0;
      }
      else {
        BOOL v3 = 1;
      }
      if (!v3)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      CFArrayRef v5 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
      if (v5)
      {
        CFArrayRef v6 = v5;
        v8.CFIndex length = CFArrayGetCount(v5);
        v8.CFIndex location = 0;
        BOOL v1 = CFArrayContainsValue(v6, v8, (const void *)v1) != 0;
        CFRelease(v6);
      }
      else
      {
        return 0;
      }
    }
  }
  return v1;
}

uint64_t CalEntityIsNew(BOOL a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t IsNew = _CalEntityIsNew(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsNew;
}

const void *CalEntityCopyStore(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Store = (const void *)_CalEntityGetStore(a1);
  BOOL v4 = Store;
  if (Store) {
    CFRetain(Store);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEntityGetStore(const void *a1)
{
  BOOL v1 = a1;
  if (!a1) {
    return (uint64_t)v1;
  }
  while (1)
  {
    int RawType = CalEntityGetRawType(v1);
    if (RawType <= 99) {
      break;
    }
    switch(RawType)
    {
      case 'd':
        uint64_t Owner = (uint64_t)_CalParticipantGetOwner(v1);
        break;
      case 'e':
        uint64_t Owner = (uint64_t)_CalCalendarItemGetCalendar((uint64_t)v1);
        break;
      case 'f':
LABEL_8:
        uint64_t Owner = (uint64_t)_CalResourceChangeGetNotification((uint64_t)v1);
        break;
      default:
        return 0;
    }
LABEL_21:
    BOOL v1 = (const void *)Owner;
    if (!Owner) {
      return (uint64_t)v1;
    }
  }
  switch(RawType)
  {
    case 1:
      uint64_t result = (uint64_t)_CalCalendarGetStore((uint64_t)v1);
      break;
    case 4:
      uint64_t Owner = (uint64_t)_CalAlarmGetOwningEntity((uint64_t)v1);
      goto LABEL_21;
    case 5:
      uint64_t Owner = _CalRecurrenceGetOwner((uint64_t)v1, 1);
      goto LABEL_21;
    case 6:
      return (uint64_t)v1;
    case 9:
    case 23:
      uint64_t Owner = (uint64_t)_CalConferenceGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 10:
      uint64_t Owner = (uint64_t)_CalExceptionDateGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 11:
      uint64_t Owner = (uint64_t)_CalAttachmentGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 13:
      uint64_t Owner = (uint64_t)_CalCategoryLinkGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 14:
      uint64_t Owner = (uint64_t)_CalLocationGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 15:
      uint64_t Owner = (uint64_t)_CalShareeGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 18:
      goto LABEL_8;
    case 20:
      uint64_t Owner = (uint64_t)_CalSuggestedEventInfoGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 21:
      uint64_t Owner = (uint64_t)_CalContactGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 24:
      uint64_t Owner = (uint64_t)_CalErrorGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 25:
      uint64_t result = _CalAttachmentFileGetStore((uint64_t)v1);
      break;
    case 28:
      uint64_t result = _CalImageGetStore((uint64_t)v1);
      break;
    case 29:
      uint64_t result = _CalColorGetStore((uint64_t)v1);
      break;
    default:
      return 0;
  }
  return result;
}

__CFString *CalPrivacyLevelAsString(unsigned int a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return (__CFString *)*((void *)&off_1E5D64DD0 + (int)a1);
  }
}

uint64_t CalAttendeeTypeAsString(uint64_t a1)
{
  if (a1 < 5) {
    return *((void *)&off_1E5D64DF0 + (int)a1);
  }
  CFTypeID v2 = NSString;
  BOOL v3 = [NSNumber numberWithUnsignedInt:a1];
  uint64_t v4 = [v2 stringWithFormat:@"Unknown (%@)", v3];

  return v4;
}

uint64_t CalAttendeeRoleAsString(uint64_t a1)
{
  if (a1 < 6) {
    return *((void *)&off_1E5D64E18 + (int)a1);
  }
  CFTypeID v2 = NSString;
  BOOL v3 = [NSNumber numberWithUnsignedInt:a1];
  uint64_t v4 = [v2 stringWithFormat:@"Unknown (%@)", v3];

  return v4;
}

uint64_t CalAttendeeStatusAsString(uint64_t a1)
{
  if (a1 < 8) {
    return *((void *)&off_1E5D64E48 + (int)a1);
  }
  CFTypeID v2 = NSString;
  BOOL v3 = [NSNumber numberWithInt:a1];
  uint64_t v4 = [v2 stringWithFormat:@"Unknown (%@)", v3];

  return v4;
}

BOOL CalCalendarFlagsAreValid(int a1)
{
  return a1 >= 0;
}

uint64_t _CalParticipantPrepareForSave(const void *a1, uint64_t a2)
{
  int Type = _CalEntityGetType(a1);
  if (a1) {
    BOOL v5 = CDBLockingAssertionsEnabled == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  if (Type == 8)
  {
    if (!v6) {
      goto LABEL_16;
    }
    if (!CPRecordGetStore()) {
      goto LABEL_16;
    }
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context) {
      goto LABEL_16;
    }
LABEL_15:
    os_unfair_lock_assert_owner(Context + 20);
    goto LABEL_16;
  }
  if (v6)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  uint64_t Property = CPRecordGetProperty();
  CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CFStringRef v12 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13) {
            os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
    CFStringRef v14 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          BOOL v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15) {
            os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    CFStringRef v16 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFTypeID v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17) {
            os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    CFStringRef v18 = (const __CFString *)result;
    if (v12 && (uint64_t result = CFStringGetLength(v12)) != 0
      || v14 && (uint64_t result = CFStringGetLength(v14)) != 0
      || v16 && (uint64_t result = CFStringGetLength(v16)) != 0)
    {
      if (!a2) {
        return result;
      }
    }
    else
    {
      if (!v18) {
        return result;
      }
      uint64_t result = CFStringGetLength(v18);
      if (!a2 || !result) {
        return result;
      }
    }
    uint64_t result = _CalIdentityGetID(v12, v14, v16, v18, a2);
    if (result != -1)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFTypeRef v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19) {
              os_unfair_lock_assert_owner(v19 + 20);
            }
          }
        }
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

const void *_CalParticipantPropertyDidChange(const void *result, unsigned int a2)
{
  if (a2 <= 0x1D)
  {
    CFTypeRef v2 = result;
    if (((1 << a2) & 0x30600000) != 0)
    {
      if (result)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      uint64_t result = (const void *)CPRecordGetProperty();
      if (result != -1)
      {
        if (v2)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v4) {
                os_unfair_lock_assert_owner(v4 + 20);
              }
            }
          }
        }
        CPRecordSetProperty();
        uint64_t result = (const void *)CPRecordGetStore();
        if (result)
        {
          uint64_t result = (const void *)CPRecordStoreGetContext();
          if (result)
          {
            return (const void *)_CalDatabaseSetChangeFlags((uint64_t)result, 1);
          }
        }
      }
    }
    else if (a2 == 2)
    {
      CFTypeRef Owner = _CalParticipantGetOwner(result);
      if (Owner)
      {
        uint64_t v7 = (uint64_t)Owner;
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFRange v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
        CPRecordUnloadProperty();
        if (_CalCalendarItemGetSelfAttendee(v7) == v2)
        {
          if (v2)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v9) {
                  os_unfair_lock_assert_owner(v9 + 20);
                }
              }
            }
          }
          Originaluint64_t Property = CPRecordGetOriginalProperty();
          int WeekStartRaw = _CalRecurrenceGetWeekStartRaw((uint64_t)v2);
          if (WeekStartRaw != OriginalProperty)
          {
            if (WeekStartRaw == 2 || OriginalProperty == 2)
            {
              CFStringRef v12 = (const void *)CalCopyDatabaseForEntity(v2);
              _CalDatabaseSetChangeFlags((uint64_t)v12, 8);
              CFRelease(v12);
              _CalEventSelfAttendeeDeclinedChanged(v7);
            }
            _CalEventMarkAsModifiedForChangeTracking(v7);
          }
        }
      }
      return (const void *)_CalParticipantSetFlag((uint64_t)v2, 1u, 0);
    }
    else if (a2 == 6)
    {
      if (result)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5) {
              os_unfair_lock_assert_owner(v5 + 20);
            }
          }
        }
      }
      return (const void *)CPRecordUnloadProperty();
    }
  }
  return result;
}

uint64_t _CalParticipantPropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  if (a2 == 6 && a3 == -1)
  {
    uint64_t v3 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    if (result != -1)
    {
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5) {
              os_unfair_lock_assert_owner(v5 + 20);
            }
          }
        }
      }
      CPRecordGetProperty();
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            int v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      return CPRecordGetProperty();
    }
  }
  return result;
}

void CalAttendeeInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalParticipantClass, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes);
}

void CalAttendeeMigrateTables(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((int)a3 > 6)
  {
    if (a3 > 0x37)
    {
      if (a3 <= 0x50)
      {
        v9[0] = MEMORY[0x1E4F143A8];
        v9[1] = 3221225472;
        v9[2] = __CalAttendeeMigrateTables_block_invoke_3;
        v9[3] = &__block_descriptor_40_e5_v8__0l;
        v9[4] = a2;
        CFRange v8 = (void *)MEMORY[0x1AD0E9DC0](v9);
        CalMigrateTableFull2((void *)a2, (const char **)&kCalParticipantClass, 0, (const char **)&kCalParticipantMigrationInfo, 0, (const char **)&kCalParticipantChangesMigrationInfo, 0, v8, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes, 0, a3);

        goto LABEL_18;
      }
      if (a3 <= 0x3E82)
      {
        CalMigrateTableFull2((void *)a2, (const char **)&kCalParticipantClass, 0, (const char **)&kCalParticipantMigrationInfo, 0, (const char **)&kCalParticipantChangesMigrationInfo, 0, 0, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes, 0, a3);
        CalPerformSQLWithConnection((void *)a2, @"CREATE TEMP TABLE _MigrationParticipant (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, UUID TEXT, owner_id INTEGER, is_self INTEGER, entity_type INTEGER, identity_match_type INTEGER, identity_match_value TEXT);");
        CalPerformSQLWithConnection((void *)a2, @"CREATE INDEX temp._MigrationParticipantIndex on _MigrationParticipant(owner_id, is_self, entity_type, identity_match_type, identity_match_value);");
        CalPerformSQLWithConnection((void *)a2, @"        INSERT INTO temp._MigrationParticipant (ROWID, UUID, owner_id, is_self, entity_type, identity_match_type, identity_match_value) SELECT ROWID, UUID, owner_id, is_self, entity_type, CASE         WHEN Identity.address NOT NULL THEN 1         WHEN email NOT NULL THEN 2         WHEN phone_number NOT NULL THEN 3         WHEN Identity.display_name NOT NULL THEN 4         ELSE 5         END as identity_match_type,         CASE         WHEN Identity.address NOT NULL THEN Identity.address         WHEN email NOT NULL THEN email         WHEN phone_number NOT NULL THEN phone_number         WHEN Identity.display_name NOT NULL THEN Identity.display_name         ELSE Identity.first_name || \"_&NZB^^_\" || Identity.last_name         END as identity_match_value         FROM Participant LEFT JOIN Identity ON identity_id = Identity.ROWID;");
        CalPerformSQLWithConnection((void *)a2, @"        UPDATE temp._MigrationParticipant AS participantToUpdate         SET UUint ID = subQuery.mainParticipantUUID         FROM        (        SELECT detachedParticipant.ROWID as detachedParticipantROWID, mainParticipant.UUID AS mainParticipantUUID FROM temp._MigrationParticipant AS detachedParticipant         INNER JOIN CalendarItem AS detachedEvent ON detachedParticipant.owner_id = detachedEvent.ROWID         INNER JOIN CalendarItem AS mainEvent ON mainEvent.ROWint ID = detachedEvent.orig_item_id         INNER JOIN temp._MigrationParticipant AS mainParticipant ON mainEvent.ROWint ID = mainParticipant.owner_id         WHERE         detachedParticipant.is_self = mainParticipant.is_self AND         detachedParticipant.entity_type = mainParticipant.entity_type AND         detachedParticipant.identity_match_type = mainParticipant.identity_match_type AND         detachedParticipant.identity_match_value = mainParticipant.identity_match_value GROUP BY detachedParticipantROWID) AS subQuery         WHERE participantToUpdate.ROWint ID = subQuery.detachedParticipantROWID;");
        CalPerformSQLWithConnection((void *)a2, @"UPDATE Participant SET UUint ID = subQuery.UUID FROM (SELECT ROWID, UUID FROM temp._MigrationParticipant) AS subQuery WHERE Participant.ROWint ID = subQuery.ROWID;");
        CalPerformSQLWithConnection((void *)a2, @"DROP TABLE _MigrationParticipant;");
        goto LABEL_18;
      }
      if (a3 <= 0x4651)
      {
        CalMigrateTableFull2((void *)a2, (const char **)&kCalParticipantClass, 0, (const char **)&kCalParticipantMigrationInfo, 0, (const char **)&kCalParticipantChangesMigrationInfo, 0, 0, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes, 0, a3);
        goto LABEL_18;
      }
    }
    else
    {
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      v12[2] = __CalAttendeeMigrateTables_block_invoke;
      v12[3] = &__block_descriptor_36_e42__v24__0____CFString__8____CFDictionary__16l;
      unsigned int v13 = a3;
      BOOL v5 = (void *)MEMORY[0x1AD0E9DC0](v12);
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      _DWORD v10[2] = __CalAttendeeMigrateTables_block_invoke_2;
      v10[3] = &__block_descriptor_44_e5_v8__0l;
      if (a3 == 55) {
        int v6 = 0;
      }
      else {
        int v6 = @"Attendee";
      }
      unsigned int v11 = a3;
      v10[4] = a2;
      uint64_t v7 = (void *)MEMORY[0x1AD0E9DC0](v10);
      CalMigrateTableFull2((void *)a2, (const char **)&kCalParticipantClass, (uint64_t)v6, (const char **)&kCalParticipantMigrationInfo, v5, (const char **)&kCalParticipantChangesMigrationInfo, 0, v7, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes, 0, a3);
    }
    if ((a3 - 13) >> 3 > 0x8C8) {
      return;
    }
LABEL_18:
    sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalMigrateExtractCommentLastModifiedDate", 2, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalMigrateExtractCommentLastModifiedDate, 0, 0);
    CalPerformSQLWithConnection((void *)a2, @"UPDATE Participant SET comment_last_modified = CalMigrateExtractCommentLastModifiedDate(ci.external_rep, i.address) FROM Participant p2 JOIN CalendarItem ci ON p2.owner_id = ci.ROWID JOIN Identity i ON p2.identity_id = i.ROWID WHERE Participant.ROWint ID = p2.ROWID AND Participant.comment IS NOT NULL AND Participant.comment_last_modified IS NULL");
    sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalMigrateExtractCommentLastModifiedDate", 2, 526337, 0, 0, 0, 0);
    return;
  }
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes((void *)a2, (const char **)&kCalParticipantClass, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes);
}

CFStringRef __CalAttendeeMigrateTables_block_invoke(uint64_t a1, CFStringRef theString1)
{
  if (*(int *)(a1 + 32) > 52 || CFStringCompare(theString1, @"UUID", 0)) {
    return 0;
  }
  CFUUIDRef v3 = CFUUIDCreate(0);
  CFStringRef v4 = CFUUIDCreateString(0, v3);
  CFRelease(v3);
  return v4;
}

void __CalAttendeeMigrateTables_block_invoke_2(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  CFUUIDRef v3 = *(void **)(a1 + 32);
  if (v2 >= 55) {
    CFStringRef v4 = @"UPDATE Participant SET email = (SELECT Identity.address FROM Participant_, Identity WHERE Participant_.ROWID = Participant.ROWID AND Participant_.identity_id = Identity.ROWID);";
  }
  else {
    CFStringRef v4 = @"UPDATE Participant SET identity_id = (SELECT Attendee_.participant_id FROM Attendee_ WHERE Attendee_.ROWID = Participant.ROWID);";
  }
  if (v2 >= 55) {
    BOOL v5 = @"UPDATE Identity SET address = IFNULL((SELECT external_id FROM Participant_, Identity WHERE Identity.ROWID = Participant_.identity_id), 'mailto:' || address);";
  }
  else {
    BOOL v5 = @"UPDATE Participant SET email = (SELECT Identity.address FROM Attendee_, Identity WHERE Attendee_.ROWID = Participant.ROWID AND Attendee_.participant_id = Identity.ROWID);";
  }
  CalPerformSQLWithConnection(v3, (uint64_t)v4);
  int v6 = *(void **)(a1 + 32);
  CalPerformSQLWithConnection(v6, (uint64_t)v5);
}

void __CalAttendeeMigrateTables_block_invoke_3(uint64_t a1)
{
  CalPerformSQLWithConnection(*(void **)(a1 + 32), @"UPDATE Participant SET email = (SELECT Identity.address FROM Participant_, Identity WHERE Participant_.ROWint ID = Participant.ROWID AND Participant_.identity_id = Identity.ROWID);");
  int v2 = *(void **)(a1 + 32);
  CalPerformSQLWithConnection(v2, @"UPDATE Identity SET address = IFNULL((SELECT external_id FROM Participant_, Identity WHERE Identity.ROWint ID = Participant_.identity_id), 'mailto:' || address);");
}

uint64_t CalParticipantGetEntityType(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef _CalParticipantHasValidParent(const void *a1)
{
  CFTypeRef result = _CalParticipantGetOwner(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalParticipantCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

const void *_CalDatabaseCreateAttendee(uint64_t a1)
{
  return _CalCreateParticipant(a1, 7);
}

const void *_CalCreateParticipant(uint64_t a1, int a2)
{
  uint64_t v4 = CPRecordCreate();
  if ((a2 - 9) <= 0xFFFFFFFD) {
    _CalCreateParticipant_cold_1();
  }
  BOOL v5 = (const void *)v4;
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = v5 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (CPRecordGetStore())
    {
      CFArrayRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v5 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      CFStringRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        unsigned int v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        BOOL v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (a2 == 7)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          CFStringRef v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16) {
            os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          CFTypeID v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17) {
            os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          CFStringRef v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18) {
            os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          CFTypeRef v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19) {
            os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
  }
  CFStringRef v20 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        CFIndex v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v20);
  _CalDatabaseAddEntity(a1, v5);
  return v5;
}

const void *CalDatabaseCreateAttendee(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Participant = _CalCreateParticipant((uint64_t)a1, 7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Participant;
}

const void *_CalParticipantCopy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  Participant = _CalCreateParticipant(a1, Property);
  BOOL v7 = Participant;
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = Participant == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      CFStringRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        unsigned int v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeID v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFIndex v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23) {
          os_unfair_lock_assert_owner(v23 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        int v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFAbsoluteTime v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25) {
          os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        CFGregorianUnits v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26) {
          os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFGregorianUnits v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        uint64_t v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28) {
          os_unfair_lock_assert_owner(v28 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        uint64_t v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30) {
          os_unfair_lock_assert_owner(v30 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31) {
          os_unfair_lock_assert_owner(v31 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        int v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32) {
          os_unfair_lock_assert_owner(v32 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33) {
          os_unfair_lock_assert_owner(v33 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        double v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v34) {
          os_unfair_lock_assert_owner(v34 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFAbsoluteTime v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35) {
          os_unfair_lock_assert_owner(v35 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        double v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v36) {
          os_unfair_lock_assert_owner(v36 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37) {
          os_unfair_lock_assert_owner(v37 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        int v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v38) {
          os_unfair_lock_assert_owner(v38 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v39) {
          os_unfair_lock_assert_owner(v39 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        double v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v40) {
          os_unfair_lock_assert_owner(v40 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        signed int v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v41) {
          os_unfair_lock_assert_owner(v41 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        char v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v42) {
          os_unfair_lock_assert_owner(v42 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v43) {
          os_unfair_lock_assert_owner(v43 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        uint64_t v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v44) {
          os_unfair_lock_assert_owner(v44 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFIndex v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45) {
          os_unfair_lock_assert_owner(v45 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        CFComparisonResult v46 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v46) {
          os_unfair_lock_assert_owner(v46 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v47 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v47) {
          os_unfair_lock_assert_owner(v47 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        uint64_t v48 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v48) {
          os_unfair_lock_assert_owner(v48 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v49 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v49) {
          os_unfair_lock_assert_owner(v49 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        CFIndex v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v50) {
          os_unfair_lock_assert_owner(v50 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFIndex v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v51) {
          os_unfair_lock_assert_owner(v51 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v7;
}

uint64_t _CalInvalidateParticipantsWithOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalParticipantGetUID(const void *a1)
{
  if ((CalEntityIsOfType(a1, 100) & 1) == 0) {
    CalParticipantGetUID_cold_1();
  }
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalRemoveParticipant(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveParticipant(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRemoveParticipant(const void *a1)
{
  uint64_t result = CPRecordGetStore();
  if (result)
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context)
    {
      uint64_t v4 = Context;
      _CalDatabaseRemoveEntity(Context, a1);
      _CalDatabaseSetDeletionFlags(v4, 64);
    }
    if (CDBLockingAssertionsEnabled)
    {
      BOOL v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5) {
        os_unfair_lock_assert_owner(v5 + 20);
      }
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

uint64_t _CalParticipantGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

CFStringRef _CalParticipantSetUUID(uint64_t a1, const __CFString *a2)
{
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 8, a2);
}

CFStringRef _CalParticipantSetIdentityPropertyIfDifferent(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef result = (const __CFString *)CPRecordGetProperty();
  if (result != a3
    && ((a3 != 0) == (result == 0) || (CFStringRef result = (const __CFString *)CFStringCompare(a3, result, 0)) != 0))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7) {
            os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    return (const __CFString *)CPRecordSetProperty();
  }
  return result;
}

void CalParticipantSetUUID(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetIdentityPropertyIfDifferent(a1, 8, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyUUID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalParticipantCopyUUID(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalParticipantCopyUUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalDatabaseCopyOfAllAttendeesInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (a2)
  {
    if (v7)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  else if (v7)
  {
    BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v9) {
      os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  uint64_t v10 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v10;
}

void CalParticipantSetDisplayName(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetIdentityPropertyIfDifferent(a1, 21, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalParticipantCopyDisplayName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalParticipantCopyDisplayName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

CFStringRef _CalParticipantSetAddress(uint64_t a1, CFURLRef anURL)
{
  if (anURL) {
    CFStringRef v3 = CFURLGetString(anURL);
  }
  else {
    CFStringRef v3 = 0;
  }
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 22, v3);
}

void CalParticipantSetAddress(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetAddress(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFStringRef CalParticipantCopyAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFStringRef v3 = _CalParticipantCopyAddress(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFStringRef _CalParticipantCopyAddress(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef result = (const __CFString *)CPRecordCopyProperty();
  if (result)
  {
    CFStringRef v3 = result;
    CFURLRef v4 = CFURLCreateWithString(0, result, 0);
    CFRelease(v3);
    return (const __CFString *)v4;
  }
  return result;
}

void CalParticipantSetEmailAddress(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 9, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyEmailAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalRecurrenceCopyByDayDays(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalParticipantSetPhoneNumber(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 10, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyPhoneNumber(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalParticipantCopyPhoneNumber(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalParticipantSetFirstName(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetIdentityPropertyIfDifferent(a1, 28, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Name = _CalParticipantCopyFirstName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

uint64_t _CalParticipantCopyFirstName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalParticipantSetLastName(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetIdentityPropertyIfDifferent(a1, 29, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Name = _CalParticipantCopyLastName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

uint64_t _CalParticipantCopyLastName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalParticipantSetExternalRepresentation(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 7, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyExternalRepresentation(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalParticipantGetScheduleAgent(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalParticipantSetScheduleAgent(uint64_t a1, unsigned int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 13, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetRSVP(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL Flag = _CalParticipantGetFlag(a1, 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

BOOL _CalParticipantGetFlag(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return (CPRecordGetProperty() & a2) != 0;
}

void CalParticipantSetRSVP(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 1u, a2 != 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalParticipantSetFlag(uint64_t a1, unsigned int a2, int a3)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  if (a3) {
    unint64_t v8 = Property | a2;
  }
  else {
    unint64_t v8 = Property & ~a2;
  }
  return _CalRecordSetPropertyIfDifferent(a1, 14, (const __CFString *)v8);
}

BOOL CalParticipantGetCommentChanged(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL Flag = _CalParticipantGetFlag(a1, 2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalParticipantSetCommentChanged(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 2u, a2 != 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetStatusChanged(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL Flag = _CalParticipantGetFlag(a1, 4);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalParticipantSetStatusChanged(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 4u, a2 != 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetProposedStartDateChanged(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL Flag = _CalParticipantGetFlag(a1, 8);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalParticipantSetProposedStartDateChanged(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 8u, a2 != 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetAddedByForwarding(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL Flag = _CalParticipantGetFlag(a1, 32);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalParticipantSetAddedByForwarding(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 0x20u, a2 != 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalParticipantSetResponseComment(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 12, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyResponseComment(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalRecurrenceCopyByWeekWeeks(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalParticipantSetCommentLastModified(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 30, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double CalParticipantGetCommentLastModified(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Dateint Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

uint64_t _CalParticipantSetScheduleForceSend(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 20, (const __CFString *)a2);
}

BOOL _CalParticipantGetScheduleForceSend(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

void CalParticipantSetScheduleForceSend(uint64_t a1, unsigned int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 20, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetScheduleForceSend(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL ScheduleForceSend = _CalParticipantGetScheduleForceSend(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ScheduleForceSend;
}

void CalParticipantSetOwner(const void *a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEntityGetType(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalRelationSetRelatedObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyParticipantChangesInStore(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInStore(a1, a2, 100, a3);
}

uint64_t _CalDatabaseCopyParticipantOrAttendeeChangesInStore(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  BOOL v6 = (os_unfair_lock_s *)a1;
  CFStringRef v7 = _CalAttendeeCreateChangeHistoryWhereClauseForStore(a1, a2, a3);
  if (a2)
  {
    BOOL v6 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else if (v6)
  {
    CFRetain(v6);
  }
  uint64_t v8 = _CalDatabaseCopyParticipantChangesWithWhereClause(v6, (uint64_t)v7, a4);
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v8;
}

uint64_t CalDatabaseCopyAttendeeChangesInStore(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInStore(a1, a2, 7, a3);
}

uint64_t _CalDatabaseRemoveParticipantChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v11 = 0;
  CFStringRef v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = ___CalDatabaseRemoveParticipantChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E5D65DE0;
  v8[4] = &v11;
  v8[5] = v5;
  v8[6] = a2;
  int v9 = 100;
  int v10 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1A8EEEE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyAttendeeChangesInCalendar(os_unfair_lock_s *a1, const __CFString *a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInCalendar(a1, a2, 7, a3);
}

uint64_t _CalDatabaseCopyParticipantOrAttendeeChangesInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  CFStringRef v7 = _CalAttendeeCreateChangeHistoryWhereClauseForCalendar(a2, a3);
  if (a2)
  {
    a1 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else if (a1)
  {
    CFRetain(a1);
  }
  uint64_t v8 = _CalDatabaseCopyParticipantChangesWithWhereClause(a1, (uint64_t)v7, a4);
  if (v7) {
    CFRelease(v7);
  }
  if (a1) {
    CFRelease(a1);
  }
  return v8;
}

uint64_t CalDatabaseCopyParticipantChangesInCalendar(os_unfair_lock_s *a1, const __CFString *a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInCalendar(a1, a2, 100, a3);
}

uint64_t CalDatabaseCopyOrganizerChangesInCalendar(os_unfair_lock_s *a1, const __CFString *a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInCalendar(a1, a2, 8, a3);
}

uint64_t _CalDatabaseRemoveAttendeeChangesInCalendarToIndex(os_unfair_lock_s *a1, const __CFString *a2, int a3)
{
  uint64_t v11 = 0;
  CFStringRef v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalAttendeeCreateChangeHistoryWhereClauseForCalendar(a2, 100);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___CalDatabaseRemoveAttendeeChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E5D61B08;
  v9[4] = &v11;
  void v9[5] = v5;
  int v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A8EEF098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalDatabaseRemoveAttendeeChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  uint64_t v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = ___CalDatabaseRemoveAttendeeChangesWithIndices_block_invoke;
  v7[3] = &unk_1E5D61B30;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A8EEF1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCreateAttendeesSearchStatement(uint64_t *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1[5] + 80));
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1[5]);
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database
    && (uint64_t v6 = Database,
        !sqlite3_create_function(*(sqlite3 **)(*(void *)(Database + 8) + 8), "IDENTITY_MATCHES", 1, 1, a1, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))IdentityMatcherCallback, 0, 0)))
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v6 + 104))
      {
        int v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
    return CPSqliteDatabaseStatementForReading();
  }
  else
  {
    uint64_t v7 = (os_unfair_lock_s *)(a1[5] + 80);
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v7);
    }
    os_unfair_lock_unlock(v7);
    return 0;
  }
}

void IdentityMatcherCallback(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v5 = (CFSetRef *)sqlite3_user_data(a1);
  int v6 = sqlite3_value_int(*a3);
  BOOL v7 = CFSetGetValueIfPresent(v5[1], (const void *)v6, 0) != 0;
  sqlite3_result_int(a1, v7);
}

void CalDatabaseDeleteAttendeesSearchStatement(uint64_t **a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        uint64_t v3 = **a1;
        if (v3)
        {
          if (*(void *)(v3 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  uint64_t v5 = (os_unfair_lock_s *)(*(void *)(a2 + 40) + 80);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5);
  }
  os_unfair_lock_unlock(v5);
}

uint64_t _CalDatabasePrepareParticipantsInStoreForMigration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseRemoveParticipantChangesInStoreToIndexInternal(a1, 100, a3);
}

uint64_t _CalDatabaseRemoveParticipantChangesInStoreToIndexInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v4 = _CalAttendeeCreateChangeHistoryWhereClauseForStore(a1, a3, a2);
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v8 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v4) {
    CFRelease(v4);
  }
  return v8;
}

uint64_t CalAttendeeBasePropertiesMappingDict(int a1)
{
  if (CalAttendeeBasePropertiesMappingDict_onceToken != -1) {
    dispatch_once(&CalAttendeeBasePropertiesMappingDict_onceToken, &__block_literal_global_12);
  }
  int v2 = &CalAttendeeBasePropertiesMappingDict_sOrganizerPropDict;
  if (!a1) {
    int v2 = &CalAttendeeBasePropertiesMappingDict_sAttendeePropDict;
  }
  return *v2;
}

void __CalAttendeeBasePropertiesMappingDict_block_invoke()
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  CFGregorianUnits v26 = @"UUID";
  int v27 = 8;
  uint64_t v28 = @"displayNameRaw";
  int v29 = 21;
  uint64_t v30 = @"URLString";
  int v31 = 22;
  int v32 = @"emailAddress";
  int v33 = 9;
  double v34 = @"phoneNumber";
  int v35 = 10;
  double v36 = @"firstName";
  int v37 = 28;
  int v38 = @"lastName";
  int v39 = 29;
  double v40 = @"comment";
  int v41 = 12;
  char v42 = @"commentLastModifiedDate";
  int v43 = 30;
  uint64_t v44 = @"proposedStartDateStatus";
  int v45 = 18;
  uint64_t v0 = @"scheduleForceSend";
  CFComparisonResult v46 = v0;
  int v47 = 20;
  CalAttendeeBasePropertiesMappingDict_sOrganizerPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&v26, 11);
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)CalAttendeeBasePropertiesMappingDict_sOrganizerPropDict);
  CFStringRef v4 = @"proposedStartDate";
  int v5 = 16;
  BOOL v6 = @"inviterNameString";
  int v7 = 17;
  uint64_t v8 = @"flags";
  int v9 = 14;
  uint64_t v10 = @"lastModifiedParticipationStatus";
  int v11 = 15;
  CFStringRef v12 = @"participantType";
  int v13 = 1;
  char v14 = @"participantRole";
  int v15 = 4;
  CFStringRef v16 = @"statusRaw";
  int v17 = 2;
  CFStringRef v18 = @"pendingStatusRaw";
  int v19 = 3;
  CFStringRef v20 = @"scheduleStatus";
  int v21 = 19;
  CFTypeRef v22 = v0;
  int v23 = 20;
  int v24 = @"isCurrentUser";
  int v25 = 32;
  _CalDBInsertPropertyMap(MutableCopy, (uint64_t)&v4, 11);
  CalAttendeeBasePropertiesMappingDict_sAttendeePropDict = (uint64_t)MutableCopy;
  for (uint64_t i = 160; i != -16; i -= 16)

  for (uint64_t j = 160; j != -16; j -= 16)
}

void sub_1A8EEF848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  for (uint64_t i = 160; i != -16; i -= 16)

  for (uint64_t j = 160; j != -16; j -= 16)
  _Unwind_Resume(a1);
}

void __CalAttendeeGetPropertyIDWithPropertyName_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (CalAttendeeBasePropertiesMappingDict_onceToken != -1) {
    dispatch_once(&CalAttendeeBasePropertiesMappingDict_onceToken, &__block_literal_global_12);
  }
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)CalAttendeeBasePropertiesMappingDict_sAttendeePropDict);
  BOOL v1 = @"owner";
  int v2 = 26;
  _CalDBInsertPropertyMap(MutableCopy, (uint64_t)&v1, 1);
  CalAttendeeGetPropertyIDWithPropertyName_sPropDict = (uint64_t)MutableCopy;
}

void sub_1A8EEF968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

CFArrayRef _CalRemoveAttendee(const void *a1)
{
  CFTypeRef Owner = _CalParticipantGetOwner(a1);
  if (Owner)
  {
    return _CalCalendarItemRemoveAttendee((uint64_t)Owner, (const __CFArray *)a1);
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return (const __CFArray *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

void CalRemoveAttendee(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveAttendee(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *_CalDatabaseCopyParticipantWithUID(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  CFStringRef v4 = (const void *)_CalParticipantGetWithUID(RecordStore);
  int v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

CFTypeRef CalDatabaseCopyAttendeeWithUUID(os_unfair_lock_s *a1)
{
  return _CalDatabaseCopyParticipantWithUUID(a1);
}

CFTypeRef _CalDatabaseCopyParticipantWithUUID(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v6 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (v6)
  {
    CFArrayRef v7 = v6;
    if (CFArrayGetCount(v6) < 1)
    {
      CFTypeRef v9 = 0;
    }
    else
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      CFTypeRef v9 = CFRetain(ValueAtIndex);
    }
    CFRelease(v7);
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v9;
}

CFTypeRef CalDatabaseCopyAttendeeForEventWithAddress(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  Uuint64_t ID = CalEventGetUID(a2);
  CFArrayRef v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = RecordStore == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v26 = MEMORY[0x1E4F143A8];
  uint64_t v27 = 3221225472;
  uint64_t v28 = ___CalDatabaseCopyParticipantForEventWithAddress_block_invoke;
  int v29 = &__block_descriptor_44_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  int v31 = UID;
  uint64_t v30 = a3;
  int v11 = (const void *)CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);
  if (v11)
  {
    if (CFArrayGetCount((CFArrayRef)v11) <= 0)
    {
      CFRelease(v11);
    }
    else
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v11, 0);
      CFTypeRef v13 = CFRetain(ValueAtIndex);
      CFRelease(v11);
      if (v13) {
        return v13;
      }
    }
  }
  char v14 = (void *)CalEventCopyAttendees(a2);
  int v15 = [MEMORY[0x1E4F1CB10] URLWithString:a3];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v16 = v14;
  CFTypeRef v13 = (CFTypeRef)[v16 countByEnumeratingWithState:&v22 objects:v32 count:16];
  if (v13)
  {
    uint64_t v17 = *(void *)v23;
    while (2)
    {
      for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v17) {
          objc_enumerationMutation(v16);
        }
        int v19 = *(const void **)(*((void *)&v22 + 1) + 8 * i);
        CFStringRef v20 = (__CFString *)CalParticipantCopyAddress((uint64_t)v19);
        if (-[__CFString isEqual:](v20, "isEqual:", v15, (void)v22))
        {
          CFTypeRef v13 = CFRetain(v19);

          goto LABEL_24;
        }
      }
      CFTypeRef v13 = (CFTypeRef)[v16 countByEnumeratingWithState:&v22 objects:v32 count:16];
      if (v13) {
        continue;
      }
      break;
    }
  }
LABEL_24:

  return v13;
}

CFStringRef _CalAttendeeSetDisplayName(uint64_t a1, const __CFString *a2)
{
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 21, a2);
}

uint64_t _CalAttendeeSetEmailAddress(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 9, a2);
}

uint64_t _CalAttendeeSetPhoneNumber(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 10, a2);
}

CFStringRef _CalAttendeeSetFirstName(uint64_t a1, const __CFString *a2)
{
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 28, a2);
}

CFStringRef _CalAttendeeSetLastName(uint64_t a1, const __CFString *a2)
{
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 29, a2);
}

uint64_t _CalAttendeeSetType(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 1, (const __CFString *)a2);
}

void CalAttendeeSetType(uint64_t a1, unsigned int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 1, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetType(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Type = _CalAttendeeGetType(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Type;
}

uint64_t _CalAttendeeGetType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void CalAttendeeSetRole(uint64_t a1, unsigned int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 4, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetRole(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Role = _CalAttendeeGetRole(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Role;
}

uint64_t _CalAttendeeGetRole(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalAttendeeSetStatus(const void *a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property != a2) {
    goto LABEL_31;
  }
  uint64_t v6 = Property;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result != v6)
  {
LABEL_31:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
    uint64_t result = (uint64_t)_CalParticipantGetOwner(a1);
    if (result)
    {
      uint64_t v11 = result;
      uint64_t result = (uint64_t)_CalCalendarItemGetSelfAttendee(result);
      if ((const void *)result == a1)
      {
        return _CalEventMarkPropertyModified(v11);
      }
    }
  }
  return result;
}

void CalAttendeeSetStatus(const void *a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttendeeSetStatus(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t WeekStartRaw = _CalRecurrenceGetWeekStartRaw(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return WeekStartRaw;
}

BOOL CalAttendeeStatusGetNeedsResponse(int a1)
{
  return a1 == 7 || a1 == 0;
}

void CalAttendeeSetPendingStatus(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 3, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetPendingStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalAttendeeSetScheduleStatus(uint64_t a1, unsigned int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 19, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetScheduleStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalAttendeeSetLastModified(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 15, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double CalAttendeeGetLastModified(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

double _CalAttendeeGetLastModified(uint64_t a1)
{
  return _CalRecordGetDateProperty(a1);
}

void CalAttendeeSetProposedStartDate(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 16, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double CalAttendeeGetProposedStartDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalAttendeeSetProposedStartDateStatus(uint64_t a1, unsigned int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 18, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetProposedStartDateStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalAttendeeSetInvitedBy(uint64_t a1, const __CFString *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 17, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeCopyInvitedBy(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalAttendeeSetScheduleForceSend(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 20, (const __CFString *)a2);
}

CFTypeRef _CalParticipantGetDebugDescription(const void *a1)
{
  if (a1)
  {
    long long v23 = (const void *)_CalParticipantCopyUUID((uint64_t)a1);
    long long v22 = (const void *)_CalParticipantCopyDisplayName((uint64_t)a1);
    CFStringRef v2 = _CalParticipantCopyAddress((uint64_t)a1);
    uint64_t v3 = (const void *)_CalRecurrenceCopyByDayDays((uint64_t)a1);
    uint64_t v4 = (const void *)_CalParticipantCopyPhoneNumber((uint64_t)a1);
    int v5 = (const void *)_CalRecurrenceCopyByWeekWeeks((uint64_t)a1);
    uint64_t WeekStartRaw = _CalRecurrenceGetWeekStartRaw((uint64_t)a1);
    uint64_t v7 = CalAttendeeStatusAsString(WeekStartRaw);
    uint64_t Type = _CalAttendeeGetType((uint64_t)a1);
    uint64_t v9 = CalAttendeeTypeAsString(Type);
    uint64_t Role = _CalAttendeeGetRole((uint64_t)a1);
    uint64_t v11 = CalAttendeeRoleAsString(Role);
    CFTypeRef Owner = _CalParticipantGetOwner(a1);
    if (Owner)
    {
      CFTypeRef v13 = (const void *)_CalCalendarItemCopyUUID((uint64_t)Owner);
      uint64_t ID = CPRecordGetID();
    }
    else
    {
      CFTypeRef v13 = 0;
      uint64_t ID = 0xFFFFFFFFLL;
    }
    id v16 = [NSString alloc];
    uint64_t v17 = [NSNumber numberWithInt:ID];
    CFStringRef v18 = (void *)[v16 initWithFormat:@"uuid: [%@] displayName: [%@] address: [%@] emailAddress: [%@] phoneNumber: [%@] role: [%@] status: [%@] type: [%@] responseComment: [%@] calendarItemRowID: [%@] calendarItemUUID: [%@]", v23, v22, v2, v3, v4, v11, v7, v9, v5, v17, v13];

    if (v13) {
      CFRelease(v13);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v3) {
      CFRelease(v3);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v2) {
      CFRelease(v2);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (v23) {
      CFRelease(v23);
    }
    if (v18)
    {
      CFTypeRef v19 = CFRetain(v18);
      CFTypeRef v20 = CFAutorelease(v19);

      return v20;
    }
  }
  else
  {
    int v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_ERROR, "NULL 'participant' given.  Will not generate a debug description.", buf, 2u);
    }
  }
  return 0;
}

void __CalOrganizerGetPropertyIDWithPropertyName_block_invoke()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (CalAttendeeBasePropertiesMappingDict_onceToken != -1) {
    dispatch_once(&CalAttendeeBasePropertiesMappingDict_onceToken, &__block_literal_global_12);
  }
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)CalAttendeeBasePropertiesMappingDict_sOrganizerPropDict);
  CFStringRef v2 = @"owner";
  int v3 = 25;
  uint64_t v4 = @"isCurrentUser";
  int v5 = 11;
  uint64_t v6 = @"scheduleAgent";
  int v7 = 13;
  _CalDBInsertPropertyMap(MutableCopy, (uint64_t)&v2, 3);
  CalOrganizerGetPropertyIDWithPropertyName_sPropDict = (uint64_t)MutableCopy;
  for (uint64_t i = 32; i != -16; i -= 16)
}

void sub_1A8EF0CD8(_Unwind_Exception *a1)
{
  for (uint64_t i = 32; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

const void *_CalDatabaseCreateOrganizer(uint64_t a1)
{
  return _CalCreateParticipant(a1, 8);
}

const void *CalDatabaseCreateOrganizer(os_unfair_lock_s *a1)
{
  CFStringRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Participant = _CalCreateParticipant((uint64_t)a1, 8);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Participant;
}

uint64_t _CalOrganizerGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

CFTypeRef CalDatabaseCopyOrganizerWithUUID(os_unfair_lock_s *a1)
{
  return _CalDatabaseCopyParticipantWithUUID(a1);
}

uint64_t _CalOrganizerSetIsSelf(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 11, (const __CFString *)a2);
}

void CalOrganizerSetIsSelf(const void *a1, unsigned int a2)
{
  if (CalEntityIsOfType(a1, 8))
  {
    RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
    _CalRecordSetPropertyIfDifferent((uint64_t)a1, 11, (const __CFString *)a2);
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(RecordLock);
    }
    os_unfair_lock_unlock(RecordLock);
  }
}

BOOL CalOrganizerIsSelf(const void *a1)
{
  if (!CalEntityIsOfType(a1, 8)) {
    return 0;
  }
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsSelf = _CalOrganizerIsSelf((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsSelf;
}

void CalOrganizerSetOwner(const void *a1, const void *a2)
{
  if ((CalEntityIsOfType(a1, 8) & 1) == 0) {
    CalOrganizerSetOwner_cold_1();
  }
  CalParticipantSetOwner(a1, a2);
}

void *_CalRemoveOrganizer(const void *a1)
{
  CFTypeRef Owner = _CalParticipantGetOwner(a1);
  if (Owner)
  {
    return _CalCalendarItemSetOrganizer((uint64_t)Owner, 0);
  }
  else
  {
    return (void *)_CalRemoveParticipant(a1);
  }
}

void CalRemoveOrganizer(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveOrganizer(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

id CalParticipantSemanticIdentifier(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  int v3 = (__CFString *)_CalParticipantCopyAddress(a1);
  uint64_t v4 = (void *)_CalRecurrenceCopyByDayDays(a1);
  int v5 = (void *)_CalParticipantCopyPhoneNumber(a1);
  uint64_t v6 = (void *)_CalParticipantCopyDisplayName(a1);
  uint64_t Name = _CalParticipantCopyFirstName(a1);
  uint64_t v8 = _CalParticipantCopyLastName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  if (v3)
  {
    id v9 = [(__CFString *)v3 absoluteString];
  }
  else if (v4)
  {
    id v9 = v4;
  }
  else if (v5)
  {
    id v9 = v5;
  }
  else
  {
    if (!v6)
    {
      if (Name | v8)
      {
        CFStringRef v12 = [MEMORY[0x1E4F28E78] string];
        CFTypeRef v13 = v12;
        if (Name) {
          [v12 appendFormat:@"FIRST=%@;", Name];
        }
        if (v8) {
          [v13 appendFormat:@"LAST=%@;", v8];
        }
        uint64_t v10 = (void *)[v13 copy];
      }
      else
      {
        uint64_t v10 = 0;
      }
      goto LABEL_14;
    }
    id v9 = v6;
  }
  uint64_t v10 = v9;
LABEL_14:

LABEL_15:
  return v10;
}

BOOL CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithEmail(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithContactInfo(a1, (uint64_t)"email", a2);
}

BOOL CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithContactInfo(os_unfair_lock_s *a1, uint64_t a2, const __CFString *a3)
{
  int v5 = [NSString stringWithFormat:@"SELECT 1 WHERE EXISTS (SELECT CalendarItem.ROWID FROM Participant as SelfParticipant, Participant as Organizer, CalendarItem WHERE CalendarItem.organizer_id = Organizer.ROWID AND CalendarItem.self_attendee_id = SelfParticipant.ROWID AND (SelfParticipant.status = ? OR SelfParticipant.status = ?) AND Organizer.%s = ? AND SelfParticipant.ROWID != Organizer.ROWID)", a2];
  uint64_t v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = Database == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CFTypeRef v13 = (uint64_t **)CPSqliteDatabaseStatementForReading();
  sqlite3_bind_int((sqlite3_stmt *)v13[1], 1, 1);
  sqlite3_bind_int((sqlite3_stmt *)v13[1], 2, 3);
  char v14 = (sqlite3_stmt *)v13[1];
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(a3);
  sqlite3_bind_text(v14, 3, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v16 = **v13;
        if (v16)
        {
          if (*(void *)(v16 + 104))
          {
            uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17) {
              os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
    }
  }
  int v18 = CPSqliteStatementIntegerResult();
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v19 = **v13;
        if (v19)
        {
          if (*(void *)(v19 + 104))
          {
            CFTypeRef v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20) {
              os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);

  return v18 > 0;
}

BOOL CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithPhoneNumber(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithContactInfo(a1, (uint64_t)"phone_number", a2);
}

BOOL CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithEmail(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithContactInfo(a1, (uint64_t)"email", a2);
}

BOOL CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithContactInfo(os_unfair_lock_s *a1, uint64_t a2, const __CFString *a3)
{
  int v5 = [NSString stringWithFormat:@"SELECT 1 WHERE EXISTS (SELECT CalendarItem.ROWID FROM Participant as SelfParticipant, Participant as OtherParticipant, CalendarItem WHERE OtherParticipant.owner_id = CalendarItem.ROWID AND CalendarItem.self_attendee_id = SelfParticipant.ROWID AND (SelfParticipant.status = ? OR SelfParticipant.status = ?) AND OtherParticipant.%s = ? AND SelfParticipant.ROWID != OtherParticipant.ROWID)", a2];
  uint64_t v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = Database == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CFTypeRef v13 = (uint64_t **)CPSqliteDatabaseStatementForReading();
  sqlite3_bind_int((sqlite3_stmt *)v13[1], 1, 1);
  sqlite3_bind_int((sqlite3_stmt *)v13[1], 2, 3);
  char v14 = (sqlite3_stmt *)v13[1];
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(a3);
  sqlite3_bind_text(v14, 3, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v16 = **v13;
        if (v16)
        {
          if (*(void *)(v16 + 104))
          {
            uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17) {
              os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
    }
  }
  int v18 = CPSqliteStatementIntegerResult();
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v19 = **v13;
        if (v19)
        {
          if (*(void *)(v19 + 104))
          {
            CFTypeRef v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20) {
              os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);

  return v18 > 0;
}

BOOL CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithPhoneNumber(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithContactInfo(a1, (uint64_t)"phone_number", a2);
}

BOOL CalHasCurrentUserInvitedAttendeeWithEmail(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserInvitedAttendeeWithContactInfo(a1, (uint64_t)"email", a2);
}

BOOL CalHasCurrentUserInvitedAttendeeWithContactInfo(os_unfair_lock_s *a1, uint64_t a2, const __CFString *a3)
{
  int v5 = [NSString stringWithFormat:@"SELECT 1 WHERE EXISTS (SELECT CalendarItem.ROWID FROM Participant as SelfParticipant, Participant as OtherParticipant, CalendarItem WHERE OtherParticipant.owner_id = CalendarItem.ROWID AND CalendarItem.organizer_id = SelfParticipant.ROWID AND SelfParticipant.is_self = 1 AND OtherParticipant.%s = ? AND SelfParticipant.ROWID != OtherParticipant.ROWID)", a2];
  uint64_t v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = Database == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CFTypeRef v13 = (uint64_t **)CPSqliteDatabaseStatementForReading();
  char v14 = (sqlite3_stmt *)v13[1];
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(a3);
  sqlite3_bind_text(v14, 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v16 = **v13;
        if (v16)
        {
          if (*(void *)(v16 + 104))
          {
            uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17) {
              os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
    }
  }
  int v18 = CPSqliteStatementIntegerResult();
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v19 = **v13;
        if (v19)
        {
          if (*(void *)(v19 + 104))
          {
            CFTypeRef v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20) {
              os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);

  return v18 > 0;
}

BOOL CalHasCurrentUserInvitedAttendeeWithPhoneNumber(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserInvitedAttendeeWithContactInfo(a1, (uint64_t)"phone_number", a2);
}

CFTypeRef _CalParticipantLoadStoreId(const void *a1)
{
  CFTypeRef result = _CalParticipantGetOwner(a1);
  if (result)
  {
    _CalCalendarItemGetStoreId((uint64_t)result);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

CFTypeRef _CalParticipantLoadCalendarId(const void *a1)
{
  CFTypeRef result = _CalParticipantGetOwner(a1);
  if (result)
  {
    _CalEventGetCalendarId((uint64_t)result);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

void _CalMigrateExtractCommentLastModifiedDate(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v4 = sqlite3_value_bytes(*a3);
  int v5 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:sqlite3_value_blob(*a3) length:v4 freeWhenDone:0];
  uint64_t v6 = +[CalItemMetadata metadataWithData:v5];
  int v7 = sqlite3_value_bytes(a3[1]);
  BOOL v8 = (void *)[[NSString alloc] initWithBytesNoCopy:sqlite3_value_text(a3[1]) length:v7 encoding:4 freeWhenDone:0];
  id v9 = [v6 unrecognizedProperties];
  uint64_t v10 = [v9 objectForKeyedSubscript:*MEMORY[0x1E4FB80F0]];

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v11 = v10;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (!v12)
  {
LABEL_11:

LABEL_14:
    sqlite3_result_null(a1);
    goto LABEL_15;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)v26;
LABEL_3:
  uint64_t v15 = 0;
  while (1)
  {
    if (*(void *)v26 != v14) {
      objc_enumerationMutation(v11);
    }
    uint64_t v16 = *(void **)(*((void *)&v25 + 1) + 8 * v15);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_9;
    }
    id v17 = v16;
    int v18 = objc_msgSend(v17, "x_calendarserver_attendee_ref");
    if ([v8 isEqualToString:v18]) {
      break;
    }

LABEL_9:
    if (v13 == ++v15)
    {
      uint64_t v13 = [v11 countByEnumeratingWithState:&v25 objects:v29 count:16];
      if (v13) {
        goto LABEL_3;
      }
      goto LABEL_11;
    }
  }
  uint64_t v19 = objc_msgSend(v17, "x_calendarserver_dtstamp");

  if (!v19) {
    goto LABEL_14;
  }
  CFTypeRef v20 = [MEMORY[0x1E4F1C9A8] CalGregorianGMTCalendar];
  int v21 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
  long long v22 = NSDateFromICSValueInTimeZone();

  [v22 timeIntervalSinceReferenceDate];
  sqlite3_result_double(a1, v23);

LABEL_15:
}

CFStringRef _CalAttendeeCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v10 = 0;
  if (a2)
  {
    CFTypeRef v5 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (a3 == 100) {
      CFStringRef v8 = CFStringCreateWithFormat(v7, 0, @"store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class IN (%d, %d) AND client_identifier = '%@')", ID, v5, v5, 7, 8, v5);
    }
    else {
      CFStringRef v8 = CFStringCreateWithFormat(v7, 0, @"entity_type = %d  AND store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", a3, ID, v5, v5, a3, v5);
    }
    CFStringRef v10 = v8;
    CFRelease(v5);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v10);
  return v10;
}

uint64_t _CalDatabaseCopyParticipantChangesWithWhereClause(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  CFAllocatorRef v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = RecordStore == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);
  return v6;
}

CFStringRef _CalAttendeeCreateChangeHistoryWhereClauseForCalendar(CFStringRef result, uint64_t a2)
{
  if (result)
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    CFTypeRef v4 = _CalDatabaseCopyClientIdentifier(DatabaseForRecord);
    uint64_t ID = CPRecordGetID();
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (a2 == 100) {
      CFStringRef v7 = CFStringCreateWithFormat(v6, 0, @"calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class IN (%d, %d) AND client_identifier = '%@')", ID, v4, v4, 7, 8, v4);
    }
    else {
      CFStringRef v7 = CFStringCreateWithFormat(v6, 0, @"entity_type = %d  AND calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", a2, ID, v4, v4, a2, v4);
    }
    CFStringRef v8 = v7;
    CFRelease(v4);
    _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(DatabaseForRecord, (id *)&v8);
    return v8;
  }
  return result;
}

uint64_t CalRecordIDGetTypeID()
{
  return __CalRecordIDTypeID;
}

uint64_t CalRecordIDRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  __CalRecordIDTypeuint64_t ID = result;
  return result;
}

uint64_t CalRecordIDCreate(int a1, int a2)
{
  pthread_once(&__CalRecordIDRegisterOnce, (void (*)(void))CalRecordIDRegisterClass);
  uint64_t result = _CFRuntimeCreateInstance();
  *(_DWORD *)(result + 16) = a1;
  *(_DWORD *)(result + 2 0) = a2;
  return result;
}

uint64_t CalRecordIDGetEntityType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CalRecordIDGetRowID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t CalRecordIDIsTemporary(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) >> 31;
}

uint64_t _CalRecordIDSave(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if ((*(_DWORD *)(result + 20) & 0x80000000) != 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4) {
            os_unfair_lock_assert_owner(v4 + 20);
          }
        }
      }
    }
    return CPRecordUnloadProperty();
  }
  return result;
}

BOOL CalRecordIDIsEqual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

uint64_t CalRecordIDHash(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) ^ *(_DWORD *)(a1 + 16);
}

CFStringRef CalRecordIDCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<CalRecordID: %p> { entityType = %d; rowuint64_t ID = %d; }",
           a1,
           *(unsigned int *)(a1 + 16),
           *(unsigned int *)(a1 + 20));
}

void CalEntityUnloadProperties(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordInvalidateRecord();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalRecordSetDateProperty(uint64_t a1, int a2, CFAbsoluteTime a3)
{
  if (vabdd_f64(a3, *MEMORY[0x1E4F57888]) >= 2.22044605e-16)
  {
    CFStringRef v5 = (const __CFString *)CFDateCreate(0, a3);
    _CalRecordSetPropertyIfDifferent(a1, a2, v5);
    if (v5)
    {
      CFRelease(v5);
    }
  }
  else
  {
    _CalRecordSetPropertyIfDifferent(a1, a2, 0);
  }
}

uint64_t _CalRecordSetPropertyIfDifferent(uint64_t result, int a2, const __CFString *a3)
{
  if (result)
  {
    uint64_t v5 = result;
    if (!*(_DWORD *)(*(void *)(CPRecordGetClass() + 80) + 40 * a2 + 8)
      || (uint64_t result = _CalRecordValueIsDifferentFromCurrentPropertyValue(v5, a2, a3), result))
    {
      if (CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      CPRecordSetProperty();
      return 1;
    }
  }
  return result;
}

double _CalRecordGetOriginalDateProperty(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetOriginalProperty())
  {
    JUMPOUT(0x1AD0E87A0);
  }
  return *MEMORY[0x1E4F57888];
}

CFDateRef _CreateCFDateRefFromCalDate(CFAbsoluteTime a1)
{
  CFDateRef result = 0;
  if (vabdd_f64(a1, *MEMORY[0x1E4F57888]) >= 2.22044605e-16) {
    return CFDateCreate(0, a1);
  }
  return result;
}

double _CFDateRefToCalDate(uint64_t a1)
{
  if (a1) {
    JUMPOUT(0x1AD0E87A0);
  }
  return *MEMORY[0x1E4F57888];
}

void _CalInsertAbsoluteTimeIntoArrayAtIndex(__CFArray *a1, CFIndex a2, CFAbsoluteTime a3)
{
  CFDateRef v5 = CFDateCreate(0, a3);
  if (v5)
  {
    CFDateRef v6 = v5;
    CFArrayInsertValueAtIndex(a1, a2, v5);
    CFRelease(v6);
  }
}

void _CalAppendAbsoluteTimeToArray(__CFArray *a1, CFAbsoluteTime a2)
{
  CFDateRef v3 = CFDateCreate(0, a2);
  if (v3)
  {
    CFDateRef v4 = v3;
    CFArrayAppendValue(a1, v3);
    CFRelease(v4);
  }
}

CFStringRef _CalDBCreateUUIDString()
{
  CFUUIDRef v0 = CFUUIDCreate(0);
  CFStringRef v1 = CFUUIDCreateString(0, v0);
  CFRelease(v0);
  return v1;
}

void _CalDBFillInUUIDColumn(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"SELECT ROWID from %@ WHERE UUID IS NULL", a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a1)
      {
        if (*(void *)(*(void *)a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v6 = CPSqliteConnectionStatementForSQL();
  if (v6)
  {
    CFStringRef v7 = (uint64_t **)v6;
    CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"UPDATE %@ SET UUID= ? WHERE rowid = ?;", a2);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a1)
        {
          if (*(void *)(*(void *)a1 + 104))
          {
            BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9) {
              os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionStatementForSQL();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        uint64_t v10 = **v7;
        if (v10)
        {
          if (*(void *)(v10 + 104))
          {
            id v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11) {
              os_unfair_lock_assert_owner(v11 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        uint64_t v12 = **v7;
        if (v12)
        {
          if (*(void *)(v12 + 104))
          {
            uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13) {
              os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    CFRelease(v8);
  }
  CFRelease(v4);
}

uint64_t SetUUID(uint64_t a1, uint64_t ***a2)
{
  int v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFStringRef v4 = _CalDBCreateUUIDString();
  CFStringRef v5 = v4;
  if (*a2)
  {
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(v4);
    sqlite3_bind_text((sqlite3_stmt *)(*a2)[1], 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
    sqlite3_bind_int((sqlite3_stmt *)(*a2)[1], 2, v3);
    CFStringRef v7 = *a2;
    if (CDBLockingAssertionsEnabled) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (*v7)
      {
        uint64_t v9 = **v7;
        if (v9)
        {
          if (*(void *)(v9 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    id v11 = *a2;
    if (CDBLockingAssertionsEnabled) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      if (*v11)
      {
        uint64_t v13 = **v11;
        if (v13)
        {
          if (*(void *)(v13 + 104))
          {
            uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  CFRelease(v5);
  return 0;
}

__CFDictionary *_CalDBCreatePropertyMap(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0);
  CFStringRef v5 = Mutable;
  if ((int)v2 >= 1 && Mutable)
  {
    uint64_t v2 = v2;
    uint64_t v6 = (const void **)(a1 + 8);
    do
    {
      CFDictionarySetValue(v5, *(v6 - 1), (const void *)*(int *)v6);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  return v5;
}

void _CalDBInsertPropertyMap(CFMutableDictionaryRef theDict, uint64_t a2, int a3)
{
  if (theDict && a3 >= 1)
  {
    uint64_t v4 = a3;
    CFStringRef v5 = (const void **)(a2 + 8);
    do
    {
      CFDictionarySetValue(theDict, *(v5 - 1), (const void *)*(int *)v5);
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

uint64_t _CalRecordHasValueChangedForProperty(uint64_t a1, int a2)
{
  if (CPRecordGetID() == -1 || !*(_DWORD *)(*(void *)(CPRecordGetClass() + 80) + 40 * a2 + 8)) {
    return 1;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  Originaluint64_t Property = (const __CFString *)CPRecordGetOriginalProperty();
  return _CalRecordValueIsDifferentFromCurrentPropertyValue(a1, a2, OriginalProperty);
}

uint64_t _CalRecordValueIsDifferentFromCurrentPropertyValue(uint64_t a1, int a2, const __CFString *a3)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if ((const __CFString *)Property == a3) {
    return 0;
  }
  CFStringRef v7 = (const __CFString *)Property;
  if ((a3 != 0) == (Property == 0)) {
    return 1;
  }
  int v8 = *(_DWORD *)(*(void *)(CPRecordGetClass() + 80) + 40 * a2 + 8);
  uint64_t result = 1;
  switch(v8)
  {
    case 2:
      CFComparisonResult v10 = CFStringCompare(a3, v7, 0);
      goto LABEL_16;
    case 3:
      size_t Length = CFDataGetLength((CFDataRef)a3);
      if (Length != CFDataGetLength((CFDataRef)v7)) {
        return 1;
      }
      BytePtr = CFDataGetBytePtr((CFDataRef)a3);
      uint64_t v13 = CFDataGetBytePtr((CFDataRef)v7);
      BOOL v14 = memcmp(BytePtr, v13, Length) == 0;
      goto LABEL_17;
    case 6:
      CFComparisonResult v10 = CFNumberCompare((CFNumberRef)a3, (CFNumberRef)v7, 0);
      goto LABEL_16;
    case 7:
      CFComparisonResult v10 = CFDateCompare((CFDateRef)a3, (CFDateRef)v7, 0);
LABEL_16:
      BOOL v14 = v10 == kCFCompareEqualTo;
LABEL_17:
      uint64_t result = !v14;
      break;
    default:
      return result;
  }
  return result;
}

BOOL _CalRecordOfClassStillExists(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)&_CalRecordOfClassStillExists_lock);
  CFStringRef v7 = (void *)_CalRecordOfClassStillExists_entityTypeToSql;
  if (!_CalRecordOfClassStillExists_entityTypeToSql)
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v9 = (void *)_CalRecordOfClassStillExists_entityTypeToSql;
    _CalRecordOfClassStillExists_entityTypeToSql = (uint64_t)v8;

    CFStringRef v7 = (void *)_CalRecordOfClassStillExists_entityTypeToSql;
  }
  CFComparisonResult v10 = [NSNumber numberWithInt:v6];
  id v11 = [v7 objectForKeyedSubscript:v10];

  if (!v11)
  {
    id v11 = objc_msgSend(NSString, "stringWithFormat:", @"SELECT ROWID FROM %s WHERE ROWID = ?", *(void *)a1);
    BOOL v12 = (void *)_CalRecordOfClassStillExists_entityTypeToSql;
    uint64_t v13 = [NSNumber numberWithInt:v6];
    [v12 setObject:v11 forKeyedSubscript:v13];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_CalRecordOfClassStillExists_lock);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_34;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16) {
        os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  uint64_t v17 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v17)
  {
    uint64_t v18 = v17;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v17)
      {
        if (*(void *)(*(void *)v17 + 104))
        {
          uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19) {
            os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
    }
    uint64_t v20 = CPSqliteConnectionStatementForSQL();
    if (v20)
    {
      int v21 = (uint64_t **)v20;
      sqlite3_bind_int64(*(sqlite3_stmt **)(v20 + 8), 1, a3);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v21)
        {
          uint64_t v22 = **v21;
          if (v22)
          {
            if (*(void *)(v22 + 104))
            {
              double v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v23) {
                os_unfair_lock_assert_owner(v23 + 20);
              }
            }
          }
        }
      }
      uint64_t v24 = CPSqliteStatementInteger64Result();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v21)
        {
          uint64_t v25 = **v21;
          if (v25)
          {
            if (*(void *)(v25 + 104))
            {
              long long v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v26) {
                os_unfair_lock_assert_owner(v26 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
      BOOL v27 = v24 == a3;
    }
    else
    {
      BOOL v27 = 0;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v18)
      {
        if (*(void *)(*(void *)v18 + 104))
        {
          long long v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v28) {
            os_unfair_lock_assert_owner(v28 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
LABEL_34:
    BOOL v27 = 0;
  }

  return v27;
}

BOOL _CalRecordStillExists()
{
  uint64_t Class = CPRecordGetClass();
  uint64_t Store = CPRecordGetStore();
  CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = Store == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  RowidForRecorduint64_t ID = CPRecordStoreGetRowidForRecordID();
  return _CalRecordOfClassStillExists(Class, Store, RowidForRecordID);
}

uint64_t updatedHTMLFromEventNotes(uint64_t a1, uint64_t a2)
{
  return [MEMORY[0x1E4F57698] updateHTML:a1 withEventNotes:a2];
}

uint64_t CalShouldSyncReminders()
{
  return CalIsReminderBridgeEnabled() ^ 1;
}

uint64_t _CalSaveAddedCalendarItems(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef Property = (const __CFArray *)CPRecordGetProperty();
  if (!Property)
  {
    CPRecordGetID();
    if (!a1) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  CFArrayRef v4 = Property;
  CFIndex Count = CFArrayGetCount(Property);
  int ID = CPRecordGetID();
  if (Count >= 1)
  {
    int v7 = ID;
    CFIndex v8 = 0;
    CFStringRef v9 = (const __CFString *)ID;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v8);
      if (ValueAtIndex)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            id v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11) {
              os_unfair_lock_assert_owner(v11 + 20);
            }
          }
        }
      }
      if (v7 != CPRecordGetProperty()) {
        _CalRecordSetPropertyIfDifferent((uint64_t)ValueAtIndex, 9, v9);
      }
      ++v8;
    }
    while (Count != v8);
  }
  if (a1)
  {
LABEL_20:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
LABEL_24:
  return CPRecordInitializeProperty();
}

uint64_t _CalEventRemoveLinkedEventsAndSubentities(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((result & 0x80000000) == 0 && a2)
  {
    int v3 = result;
    if (a3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a3)
        {
          if (*(void *)(*(void *)a3 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    uint64_t v5 = CPSqliteConnectionStatementForSQL();
    if (v5)
    {
      uint64_t v6 = (uint64_t **)v5;
      sqlite3_bind_int(*(sqlite3_stmt **)(v5 + 8), 1, v3);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v6)
        {
          uint64_t v7 = **v6;
          if (v7)
          {
            if (*(void *)(v7 + 104))
            {
              CFIndex v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v8) {
                os_unfair_lock_assert_owner(v8 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v6)
        {
          uint64_t v9 = **v6;
          if (v9)
          {
            if (*(void *)(v9 + 104))
            {
              CFComparisonResult v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10) {
                os_unfair_lock_assert_owner(v10 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    uint64_t Store = CPRecordGetStore();
    if (!*(unsigned char *)(CPRecordStoreGetContext() + 382))
    {
      if (Store)
      {
        if (CDBLockingAssertionsEnabled)
        {
          BOOL v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
      CPRecordStoreInvalidateCachedInstancesOfClass();
    }
    uint64_t v13 = CPRecordGetStore();
    uint64_t result = CPRecordStoreGetContext();
    if (!*(unsigned char *)(result + 382))
    {
      _CalInvalidateRecurrencesWithOwnerID(v13);
      _CalInvalidateParticipantsWithOwnerID(v13);
      _CalInvalidateEventActionsWithOwnerID(v13);
      _CalInvalidateExceptionDatesWithOwnerID(v13);
      _CalInvalidateAlarmsWithCalendarItemOwnerID(v13);
      _CalInvalidateAttachmentsWithOwnerID(v13);
      _CalInvalidateContactsWithOwnerID(v13);
      return _CalInvalidateConferencesWithOwnerID(v13);
    }
  }
  return result;
}

uint64_t _CalEventPrepareForSave(void *a1, uint64_t a2)
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  if (_CalDatabaseIsPropertyModificationLoggingEnabled(DatabaseForRecord))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CFArrayRef v6 = (const __CFArray *)CPRecordCopyChangedProperties();
    if (v6)
    {
      CFArrayRef v7 = v6;
      CFIndex Count = CFArrayGetCount(v6);
      int IsNew = _CalEntityIsNew((BOOL)a1);
      if (Count >= 1)
      {
        int v10 = IsNew;
        char v11 = 0;
        char v12 = 0;
        int v13 = 0;
        uint64_t v14 = 1;
        while (2)
        {
          unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v7, v14 - 1);
          switch(ValueAtIndex)
          {
            case 3u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
            case 0xCu:
            case 0xDu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x1Cu:
            case 0x1Du:
            case 0x24u:
            case 0x28u:
            case 0x2Au:
            case 0x2Bu:
            case 0x38u:
            case 0x39u:
            case 0x3Eu:
            case 0x43u:
            case 0x44u:
            case 0x4Fu:
            case 0x51u:
            case 0x52u:
            case 0x53u:
            case 0x54u:
            case 0x55u:
            case 0x56u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
              goto LABEL_11;
            case 4u:
            case 6u:
            case 0xEu:
            case 0x25u:
            case 0x50u:
              char v11 = 1;
              goto LABEL_11;
            case 0xAu:
            case 0xBu:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x26u:
            case 0x27u:
            case 0x29u:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x57u:
            case 0x58u:
            case 0x59u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
              goto LABEL_12;
            case 0x13u:
              int v13 = 1;
              goto LABEL_12;
            case 0x14u:
              int v10 = 1;
              goto LABEL_11;
            default:
              if (ValueAtIndex) {
                goto LABEL_12;
              }
LABEL_11:
              char v12 = 1;
LABEL_12:
              if (v14 < Count)
              {
                ++v14;
                if ((v13 & v10 & 1) == 0) {
                  continue;
                }
              }
              if (!(v13 & 1 | ((v12 & 1) == 0))) {
                _CalEventUpdateLastModifiedDate((uint64_t)a1);
              }
              if (!(v10 & 1 | ((v11 & 1) == 0)))
              {
                if (a1)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (CPRecordGetStore())
                    {
                      uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v16) {
                        os_unfair_lock_assert_owner(v16 + 20);
                      }
                    }
                  }
                }
                CPRecordGetProperty();
                if (a1)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (CPRecordGetStore())
                    {
                      uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v17) {
                        os_unfair_lock_assert_owner(v17 + 20);
                      }
                    }
                  }
                }
                CPRecordSetProperty();
              }
              break;
          }
          break;
        }
      }
      CFRelease(v7);
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty())
  {
    if ((_CalEntityIsOfType(a1, 2) & 1) == 0) {
      _CalEventPrepareForSave_cold_3();
    }
    _CalEventUpdateOccurrenceCache(a1);
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19) {
            os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
    }
    if (CPRecordGetProperty())
    {
      if ((_CalEntityIsOfType(a1, 2) & 1) == 0) {
        _CalEventPrepareForSave_cold_2();
      }
      _CalEventUpdateAlarmCache(a1);
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty())
  {
    if ((_CalEntityIsOfType(a1, 3) & 1) == 0) {
      _CalEventPrepareForSave_cold_1();
    }
    if (CPRecordGetStore())
    {
      uint64_t v21 = CPRecordStoreGetContext();
      if (v21)
      {
        uint64_t v22 = _CalDatabaseCopyScheduledTaskCache(v21);
        if (v22)
        {
          double v23 = (const void *)v22;
          _CalScheduledTaskCacheMarkTaskForUpdate(v22, a1);
          CFRelease(v23);
        }
      }
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
  }
  if ((CPRecordIsPendingChange() & 1) == 0) {
    _CalCalendarItemFixupParticipantsOnEvent((uint64_t)a1);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25) {
          os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CalRelationOwnerWillSave(Property);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  uint64_t v28 = CPRecordGetProperty();
  if (v28) {
    CalRelationOwnerWillSave(v28);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  uint64_t v30 = CPRecordGetProperty();
  if (v30) {
    CalRelationOwnerWillSave(v30);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31) {
          os_unfair_lock_assert_owner(v31 + 20);
        }
      }
    }
  }
  uint64_t v32 = CPRecordGetProperty();
  if (v32) {
    CalRelationOwnerWillSave(v32);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33) {
          os_unfair_lock_assert_owner(v33 + 20);
        }
      }
    }
  }
  uint64_t v34 = CPRecordGetProperty();
  if (v34) {
    CalRelationOwnerWillSave(v34);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35) {
          os_unfair_lock_assert_owner(v35 + 20);
        }
      }
    }
  }
  uint64_t v36 = CPRecordGetProperty();
  if (v36) {
    CalRelationOwnerWillSave(v36);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37) {
          os_unfair_lock_assert_owner(v37 + 20);
        }
      }
    }
  }
  uint64_t v38 = CPRecordGetProperty();
  if (v38) {
    CalRelationOwnerWillSave(v38);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v39) {
          os_unfair_lock_assert_owner(v39 + 20);
        }
      }
    }
  }
  uint64_t v40 = CPRecordGetProperty();
  if (v40) {
    CalRelationOwnerWillSave(v40);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v41) {
          os_unfair_lock_assert_owner(v41 + 20);
        }
      }
    }
  }
  uint64_t v42 = CPRecordGetProperty();
  if (v42) {
    CalRelationOwnerWillSave(v42);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v43) {
          os_unfair_lock_assert_owner(v43 + 20);
        }
      }
    }
  }
  uint64_t v44 = CPRecordGetProperty();
  if (v44) {
    CalRelationOwnerWillSave(v44);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45) {
          os_unfair_lock_assert_owner(v45 + 20);
        }
      }
    }
  }
  uint64_t v46 = CPRecordGetProperty();
  if (v46) {
    CalRelationOwnerWillSave(v46);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v47 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v47) {
          os_unfair_lock_assert_owner(v47 + 20);
        }
      }
    }
  }
  uint64_t v48 = CPRecordGetProperty();
  if (v48) {
    CalRelationOwnerWillSave(v48);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v49 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v49) {
          os_unfair_lock_assert_owner(v49 + 20);
        }
      }
    }
  }
  uint64_t v50 = CPRecordGetProperty();
  if (v50) {
    CalRelationOwnerWillSave(v50);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFIndex v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v51) {
          os_unfair_lock_assert_owner(v51 + 20);
        }
      }
    }
  }
  uint64_t v52 = CPRecordGetProperty();
  if (v52) {
    CalRelationOwnerWillSave(v52);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v53) {
          os_unfair_lock_assert_owner(v53 + 20);
        }
      }
    }
  }
  uint64_t v54 = CPRecordGetProperty();
  if (v54) {
    CalRelationOwnerWillSave(v54);
  }
  _CalEventValidateIdentityForProperties((uint64_t)a1, a2);
  _CalEventValidateIdentityForProperties((uint64_t)a1, a2);
  if (_CalEventIsAllDay((uint64_t)a1))
  {
    uint64_t v55 = (const void *)CalTimeZoneCopyCFTimeZone();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v56 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v56) {
            os_unfair_lock_assert_owner(v56 + 20);
          }
        }
      }
    }
    if (CPRecordGetProperty())
    {
      MEMORY[0x1AD0E87A0]();
      CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFStringRef v58 = (const __CFString *)CFDateCreate(0, v57);
      _CalRecordSetPropertyIfDifferent((uint64_t)a1, 4, v58);
      CFRelease(v58);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v59 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v59) {
            os_unfair_lock_assert_owner(v59 + 20);
          }
        }
      }
    }
    if (CPRecordGetProperty())
    {
      MEMORY[0x1AD0E87A0]();
      CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFStringRef v61 = (const __CFString *)CFDateCreate(0, v60);
      _CalRecordSetPropertyIfDifferent((uint64_t)a1, 6, v61);
      CFRelease(v61);
    }
    if (!_CalCalendarItemIsFloating((uint64_t)a1))
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v62 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v62) {
              os_unfair_lock_assert_owner(v62 + 20);
            }
          }
        }
      }
      CPRecordSetProperty();
    }
    CFRelease(v55);
  }
  if (CPRecordGetID() != -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          double v63 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v63) {
            os_unfair_lock_assert_owner(v63 + 20);
          }
        }
      }
    }
    if (CPRecordGetProperty())
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            __int16 v64 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v64) {
              os_unfair_lock_assert_owner(v64 + 20);
            }
          }
        }
      }
      int v65 = CPRecordGetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            __int16 v66 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v66) {
              os_unfair_lock_assert_owner(v66 + 20);
            }
          }
        }
      }
      int v67 = CPRecordGetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            __int16 v68 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v68) {
              os_unfair_lock_assert_owner(v68 + 20);
            }
          }
        }
      }
      int v69 = CPRecordGetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v70 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v70) {
              os_unfair_lock_assert_owner(v70 + 20);
            }
          }
        }
      }
      CFRange v71 = (const void *)CPRecordGetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            id v72 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v72) {
              os_unfair_lock_assert_owner(v72 + 20);
            }
          }
        }
      }
      id v73 = (const void *)CPRecordGetProperty();
      if (v71) {
        CFRetain(v71);
      }
      if (v73) {
        CFRetain(v73);
      }
      uint64_t v74 = CalGetDatabaseForRecord();
      v81[0] = MEMORY[0x1E4F143A8];
      v81[1] = 3221225472;
      v81[2] = ___CalEventPrepareForSave_block_invoke;
      v81[3] = &__block_descriptor_76_e5_v8__0l;
      v81[4] = a2;
      v81[5] = v71;
      v81[6] = v73;
      v81[7] = a1;
      int v82 = v65;
      int v83 = v67;
      int v84 = v69;
      _CalDatabaseAddPostCommitActionWithBlock(v74, v81);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            unsigned int v75 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v75) {
              os_unfair_lock_assert_owner(v75 + 20);
            }
          }
        }
      }
      CPRecordSetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v76 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v76) {
              os_unfair_lock_assert_owner(v76 + 20);
            }
          }
        }
      }
      CPRecordSetProperty();
    }
  }
  _CalEventUpdateDetectedConferenceURLIfNeeded((uint64_t)a1);
  uint64_t v77 = CalGetDatabaseForRecord();
  if ((unint64_t)(_CalDatabaseGetChangeReason(v77) - 1) >= 2)
  {
    double v78 = COERCE_DOUBLE(_CalEventGetStartDate((uint64_t)a1));
    if (_CalRecordGetDateProperty((uint64_t)a1) - v78 > 864000000.0)
    {
      uint64_t v79 = CalGetDatabaseForRecord();
      _CalDatabaseIntegrityError(v79, @"Suspiciously large event duration");
    }
  }
  return _CalCalendarItemClearDirtyAttributes((uint64_t)a1);
}

uint64_t _CalCalendarItemDidSaveAllProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordUnloadProperty();
}

void _CalCalendarItemPropertyDidChange(const void *a1, int a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (a2 == 90 || !_CalRecordHasValueChangedForProperty((uint64_t)a1, a2)) {
    return;
  }
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  if (!DatabaseForRecord || !_CalDatabaseIsPropertyModificationLoggingEnabled(DatabaseForRecord))
  {
    if (a2 == 12)
    {
LABEL_34:
      if (CPRecordGetStore())
      {
        uint64_t Context = CPRecordStoreGetContext();
        if (Context) {
          _CalDatabaseSetChangeFlags(Context, 1);
        }
      }
      goto LABEL_97;
    }
    if (a2 != 81)
    {
      if (a2 != 80) {
        goto LABEL_97;
      }
      goto LABEL_11;
    }
LABEL_55:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16) {
            os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    uint64_t Property = CPRecordGetProperty();
    BOOL HasObjects = CalToManyRelationHasObjects(Property);
    if (a1) {
      BOOL v19 = CDBLockingAssertionsEnabled == 0;
    }
    else {
      BOOL v19 = 1;
    }
    int v20 = !v19;
    if (HasObjects)
    {
      if (v20)
      {
        if (CPRecordGetStore())
        {
          uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v21) {
            os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
      if (!CPRecordGetProperty())
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v22) {
                os_unfair_lock_assert_owner(v22 + 20);
              }
            }
          }
        }
        goto LABEL_88;
      }
    }
    else
    {
      if (v20)
      {
        if (CPRecordGetStore())
        {
          double v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v23) {
            os_unfair_lock_assert_owner(v23 + 20);
          }
        }
      }
      if (CPRecordGetProperty() == 1)
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v24) {
                os_unfair_lock_assert_owner(v24 + 20);
              }
            }
          }
        }
        goto LABEL_88;
      }
    }
    goto LABEL_97;
  }
  if (a2 <= 77)
  {
    switch(a2)
    {
      case 3:
        uint64_t v5 = (uint64_t)a1;
        goto LABEL_96;
      case 4:
        uint64_t v5 = (uint64_t)a1;
        goto LABEL_96;
      case 6:
        uint64_t v5 = (uint64_t)a1;
        goto LABEL_96;
      case 12:
        goto LABEL_34;
      case 15:
        if (CPRecordGetID() == -1) {
          goto LABEL_97;
        }
        uint64_t v5 = (uint64_t)a1;
        break;
      case 16:
        uint64_t v5 = (uint64_t)a1;
        goto LABEL_96;
      case 17:
        uint64_t v5 = (uint64_t)a1;
        goto LABEL_96;
      default:
        goto LABEL_97;
    }
    goto LABEL_96;
  }
  if (a2 > 80)
  {
    if (a2 != 81)
    {
      if (a2 != 104) {
        goto LABEL_97;
      }
      uint64_t v5 = (uint64_t)a1;
      goto LABEL_96;
    }
    goto LABEL_55;
  }
  if (a2 == 78)
  {
    uint64_t v5 = (uint64_t)a1;
LABEL_96:
    _CalEventMarkPropertyModified(v5);
    goto LABEL_97;
  }
  if (a2 != 80) {
    goto LABEL_97;
  }
  _CalEventMarkPropertyModified((uint64_t)a1);
LABEL_11:
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  uint64_t v7 = CPRecordGetProperty();
  BOOL v8 = CalToManyRelationHasObjects(v7);
  if (a1) {
    BOOL v9 = CDBLockingAssertionsEnabled == 0;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (v8)
  {
    if (v10)
    {
      if (CPRecordGetStore())
      {
        char v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    if (!CPRecordGetProperty())
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            char v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12) {
              os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
      }
LABEL_88:
      CPRecordSetProperty();
    }
  }
  else
  {
    if (v10)
    {
      if (CPRecordGetStore())
      {
        uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    if (CPRecordGetProperty() == 1)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15) {
              os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
      goto LABEL_88;
    }
  }
LABEL_97:
  if (!_CalEntityIsOfType(a1, 2))
  {
    int v25 = _CalEntityIsOfType(a1, 3);
    if ((a2 - 37) <= 3 && v25) {
      _CalTaskMarkAsNeedingScheduledTaskCacheUpdate(a1);
    }
    goto LABEL_105;
  }
  if (a2 <= 77)
  {
    if (a2 > 0x3E) {
      goto LABEL_110;
    }
    if (((1 << a2) & 0x41000000800063F0) == 0)
    {
      uint64_t v26 = 1 << a2;
      uint64_t v27 = 0x12000000000;
LABEL_107:
      if ((v26 & v27) != 0 && _CalCalendarItemHasAlarms((uint64_t)a1))
      {
        CPRecordGetStore();
        uint64_t v28 = CPRecordStoreGetContext();
        _CalDatabaseSetChangeFlags(v28, 8);
      }
      goto LABEL_110;
    }
    goto LABEL_101;
  }
  if ((a2 - 79) < 2) {
    goto LABEL_101;
  }
  if (a2 == 78)
  {
    _CalEventMarkEventAsNeedingAlarmCacheUpdate(a1);
LABEL_126:
    _CalEventMarkEventAsHavingDirtyNotifiableAttributes((uint64_t)a1);
    goto LABEL_127;
  }
  if (a2 == 94)
  {
LABEL_101:
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(a1);
LABEL_105:
    if (a2 > 0x38) {
      goto LABEL_110;
    }
    uint64_t v26 = 1 << a2;
    uint64_t v27 = 0x100012000000010;
    goto LABEL_107;
  }
LABEL_110:
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 20:
    case 28:
    case 29:
    case 36:
    case 37:
    case 40:
    case 42:
    case 43:
    case 56:
    case 57:
    case 62:
    case 67:
    case 68:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
      goto LABEL_111;
    case 2:
    case 10:
    case 11:
    case 16:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 38:
    case 39:
    case 41:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 58:
    case 59:
    case 60:
    case 61:
    case 63:
    case 64:
    case 65:
    case 66:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
      break;
    default:
      if ((a2 - 99) <= 0x1A && ((1 << (a2 - 99)) & 0x4070001) != 0) {
LABEL_111:
      }
        _CalEventMarkEventAsHavingDirtyInstanceAttributes((uint64_t)a1);
      break;
  }
  if ((a2 > 0x32 || ((1 << a2) & 0x600001B880000) == 0)
    && ((a2 - 87) > 0x27 || ((1 << (a2 - 87)) & 0x8000000063) == 0))
  {
    goto LABEL_126;
  }
LABEL_127:
  char v29 = a2 - 58;
  if ((a2 - 58) > 0x38)
  {
LABEL_145:
    if ((a2 - 1) >= 2) {
      return;
    }
LABEL_146:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v32) {
            os_unfair_lock_assert_owner(v32 + 20);
          }
        }
      }
    }
    int v33 = CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v34) {
            os_unfair_lock_assert_owner(v34 + 20);
          }
        }
      }
    }
    int v35 = CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v36) {
            os_unfair_lock_assert_owner(v36 + 20);
          }
        }
      }
    }
    int v37 = CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v38) {
            os_unfair_lock_assert_owner(v38 + 20);
          }
        }
      }
    }
    int v39 = CPRecordGetProperty();
    if (v33 >= 1 && v33 == v35)
    {
      uint64_t v40 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        int v41 = v40;
        int ID = CPRecordGetID();
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              int v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v43) {
                os_unfair_lock_assert_owner(v43 + 20);
              }
            }
          }
        }
        int v63 = 67110144;
        int v64 = ID;
        __int16 v65 = 1024;
        int v66 = v33;
        __int16 v67 = 1024;
        int v68 = v33;
        __int16 v69 = 1024;
        int v70 = a2;
        __int16 v71 = 1024;
        Originaluint64_t Property = CPRecordGetOriginalProperty();
        uint64_t v44 = "Multiple relationships to the same location: Location is the same value as clientLocation. recordID=%i, lo"
              "cation=%i, clientLocation=%i, currently setting %i; original value for property set = %i";
LABEL_193:
        _os_log_impl(&dword_1A8E81000, v41, OS_LOG_TYPE_ERROR, v44, (uint8_t *)&v63, 0x20u);
      }
    }
    else if (v33 >= 1 && v33 == v37)
    {
      int v45 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        int v41 = v45;
        int v46 = CPRecordGetID();
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              int v47 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v47) {
                os_unfair_lock_assert_owner(v47 + 20);
              }
            }
          }
        }
        int v63 = 67110144;
        int v64 = v46;
        __int16 v65 = 1024;
        int v66 = v33;
        __int16 v67 = 1024;
        int v68 = v33;
        __int16 v69 = 1024;
        int v70 = a2;
        __int16 v71 = 1024;
        Originaluint64_t Property = CPRecordGetOriginalProperty();
        uint64_t v44 = "Multiple relationships to the same location: Location is the same value as startLocation. recordID=%i, loc"
              "ation=%i, startLocation=%i, currently setting %i; original value for property set = %i";
        goto LABEL_193;
      }
    }
    else
    {
      if (v33 < 1 || v33 != v39)
      {
        if (v37 >= 1 && v37 == v39)
        {
          uint64_t v52 = (void *)CDBLogHandle;
          if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
            goto LABEL_194;
          }
          CFStringRef v53 = v52;
          int v54 = CPRecordGetID();
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v55) {
                  os_unfair_lock_assert_owner(v55 + 20);
                }
              }
            }
          }
          int v63 = 67110144;
          int v64 = v54;
          __int16 v65 = 1024;
          int v66 = v37;
          __int16 v67 = 1024;
          int v68 = v37;
          __int16 v69 = 1024;
          int v70 = a2;
          __int16 v71 = 1024;
          Originaluint64_t Property = CPRecordGetOriginalProperty();
          uint64_t v56 = "Multiple relationships to the same location: startLocation is the same value as endLocation. recordID=%i"
                ", startLocation=%i, endLocation=%i, currently setting %i; original value for property set = %i";
        }
        else if (v35 >= 1 && v35 == v37)
        {
          CFAbsoluteTime v57 = (void *)CDBLogHandle;
          if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
            goto LABEL_194;
          }
          CFStringRef v53 = v57;
          int v58 = CPRecordGetID();
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t v59 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v59) {
                  os_unfair_lock_assert_owner(v59 + 20);
                }
              }
            }
          }
          int v63 = 67110144;
          int v64 = v58;
          __int16 v65 = 1024;
          int v66 = v35;
          __int16 v67 = 1024;
          int v68 = v35;
          __int16 v69 = 1024;
          int v70 = a2;
          __int16 v71 = 1024;
          Originaluint64_t Property = CPRecordGetOriginalProperty();
          uint64_t v56 = "Multiple relationships to the same location: clientLocation is the same value as startLocation. recordID"
                "=%i, clientLocation=%i, startLocation=%i, currently setting %i; original value for property set = %i";
        }
        else
        {
          if (v35 < 1 || v35 != v39) {
            return;
          }
          CFAbsoluteTime v60 = (void *)CDBLogHandle;
          if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
            goto LABEL_194;
          }
          CFStringRef v53 = v60;
          int v61 = CPRecordGetID();
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t v62 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v62) {
                  os_unfair_lock_assert_owner(v62 + 20);
                }
              }
            }
          }
          int v63 = 67110144;
          int v64 = v61;
          __int16 v65 = 1024;
          int v66 = v35;
          __int16 v67 = 1024;
          int v68 = v35;
          __int16 v69 = 1024;
          int v70 = a2;
          __int16 v71 = 1024;
          Originaluint64_t Property = CPRecordGetOriginalProperty();
          uint64_t v56 = "Multiple relationships to the same location: clientLocation is the same value as endLocation. recordID=%"
                "i, clientLocation=%i, endLocation=%i, currently setting %i; original value for property set = %i";
        }
        _os_log_impl(&dword_1A8E81000, v53, OS_LOG_TYPE_ERROR, v56, (uint8_t *)&v63, 0x20u);

        goto LABEL_194;
      }
      uint64_t v48 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        int v41 = v48;
        int v49 = CPRecordGetID();
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v50) {
                os_unfair_lock_assert_owner(v50 + 20);
              }
            }
          }
        }
        int v63 = 67110144;
        int v64 = v49;
        __int16 v65 = 1024;
        int v66 = v33;
        __int16 v67 = 1024;
        int v68 = v33;
        __int16 v69 = 1024;
        int v70 = a2;
        __int16 v71 = 1024;
        Originaluint64_t Property = CPRecordGetOriginalProperty();
        uint64_t v44 = "Multiple relationships to the same location: Location is the same value as endLocation. recordID=%i, locat"
              "ion=%i, endLocation=%i, currently setting %i; original value for property set = %i";
        goto LABEL_193;
      }
    }
LABEL_194:
    uint64_t v51 = CalGetDatabaseForRecord();
    _CalDatabaseIntegrityError(v51, @"Duplicate Location Reference");
    return;
  }
  if (((1 << v29) & 0x66000000000000) != 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v31) {
            os_unfair_lock_assert_owner(v31 + 20);
          }
        }
      }
    }
    goto LABEL_141;
  }
  if (((1 << v29) & 0x198000000000000) == 0)
  {
    if (((1 << v29) & 3) != 0) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30) {
          os_unfair_lock_assert_owner(v30 + 20);
        }
      }
    }
  }
LABEL_141:
  CPRecordSetProperty();
}

uint64_t _CalCalendarItemPropertyWillChange(uint64_t result, int a2, int a3)
{
  uint64_t v3 = result;
  if (a2 == 24)
  {
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    if (!result)
    {
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9) {
              os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
      }
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            int v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
      CPRecordGetProperty();
      return CPRecordSetProperty();
    }
  }
  else if (a2 == 9)
  {
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5) {
            os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    int v6 = result;
    if (result != a3)
    {
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      uint64_t result = CPRecordGetProperty();
      if (v6 >= 1 && !result)
      {
        return _CalRecordSetPropertyIfDifferent(v3, 91, (const __CFString *)v6);
      }
    }
  }
  return result;
}

void CalEventInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalEventClass, (const char **)&kCalEventIndexes, (const char **)&kCalEventChangesIndexes);
  CalMigrationCreateTriggers(a2, (const char **)&kCalEventClass, (const char **)&kCalEventTriggers);
}

void CalEventMigrateTables(uint64_t a1, uint64_t a2, signed int a3)
{
  if (a3 <= 54)
  {
    if (a3 < 13) {
      goto LABEL_58;
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    int v6 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
    }
    BOOL v8 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9) {
              os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
      }
    }
    uint64_t v10 = CPSqliteConnectionStatementForSQL();
    char v11 = (uint64_t **)v10;
    if (v6 && v8 && v10)
    {
      uint64_t v62 = a2;
      uint64_t v63 = (uint64_t)v8;
      int v64 = (uint64_t (*)(uint64_t, uint64_t))v10;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v6)
        {
          uint64_t v12 = **v6;
          if (v12)
          {
            if (*(void *)(v12 + 104))
            {
              int v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v13) {
                os_unfair_lock_assert_owner(v13 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
    }
    else if (!v6)
    {
LABEL_42:
      if (v8)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v8)
          {
            uint64_t v17 = **v8;
            if (v17)
            {
              if (*(void *)(v17 + 104))
              {
                uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v18) {
                  os_unfair_lock_assert_owner(v18 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (v11)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v11)
          {
            uint64_t v19 = **v11;
            if (v19)
            {
              if (*(void *)(v19 + 104))
              {
                int v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v20) {
                  os_unfair_lock_assert_owner(v20 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
LABEL_58:
      uint64_t v21 = @"CalendarItem";
      if (a3 < 56) {
        uint64_t v21 = @"Event";
      }
      CFStringRef v22 = CFStringCreateWithFormat(0, 0, @"SELECT rowid, location FROM %@ WHERE location IS NOT NULL", v21, v62, v63, v64);
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)a2)
          {
            if (*(void *)(*(void *)a2 + 104))
            {
              double v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v23) {
                os_unfair_lock_assert_owner(v23 + 20);
              }
            }
          }
        }
      }
      uint64_t v24 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)a2)
          {
            if (*(void *)(*(void *)a2 + 104))
            {
              int v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v25) {
                os_unfair_lock_assert_owner(v25 + 20);
              }
            }
          }
        }
      }
      uint64_t v26 = CPSqliteConnectionStatementForSQL();
      uint64_t v27 = (uint64_t **)v26;
      if (v24 && v26)
      {
        uint64_t v63 = v26;
        int v64 = 0;
        uint64_t v62 = a2;
        if (CDBLockingAssertionsEnabled)
        {
          if (*v24)
          {
            uint64_t v28 = **v24;
            if (v28)
            {
              if (*(void *)(v28 + 104))
              {
                char v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v29) {
                  os_unfair_lock_assert_owner(v29 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementSendResults();
      }
      else if (!v24)
      {
LABEL_89:
        if (v27)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (*v27)
            {
              uint64_t v32 = **v27;
              if (v32)
              {
                if (*(void *)(v32 + 104))
                {
                  int v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v33) {
                    os_unfair_lock_assert_owner(v33 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        if (v22) {
          CFRelease(v22);
        }
        int v14 = 1;
        goto LABEL_100;
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*v24)
        {
          uint64_t v30 = **v24;
          if (v30)
          {
            if (*(void *)(v30 + 104))
            {
              int v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v31) {
                os_unfair_lock_assert_owner(v31 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
      goto LABEL_89;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*v6)
      {
        uint64_t v15 = **v6;
        if (v15)
        {
          if (*(void *)(v15 + 104))
          {
            uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    goto LABEL_42;
  }
  if (a3 <= 0x3E) {
    goto LABEL_58;
  }
  if (a3 <= 0x5C)
  {
    int v14 = 0;
LABEL_100:
    CalMigrationDropIndexes((void *)a2, (const char **)&kCalEventIndexes);
LABEL_101:
    CalMigrationDropTriggers((void *)a2, (const char **)&kCalEventTriggers);
LABEL_102:
    if (a3 >= 56) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = @"Event";
    }
    CalMigrateTableFull((void *)a2, (const char **)&kCalEventClass, (uint64_t)v34, (const char **)&kCalEventUpgradeInfo, (const char **)&kCalEventChangesUpgradeInfo, (const char **)&kCalEventIndexes, (const char **)&kCalEventChangesIndexes, (const char **)&kCalEventTriggers, a3);
    goto LABEL_106;
  }
  if (a3 <= 0x70)
  {
    int v14 = 0;
    goto LABEL_101;
  }
  if (a3 <= 0x4656)
  {
    int v14 = 0;
    goto LABEL_102;
  }
  if (a3 > 0x4659) {
    return;
  }
  int v14 = 0;
LABEL_106:
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalDetectedConferenceURL", 4, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalEventRedetectConferenceURLHandler, 0, 0);
  CalPerformSQLWithConnection((void *)a2, @"UPDATE CalendarItem SET conference_url_detected = (SELECT CalDetectedConferenceURL(description, url, Location.title, Location.address) FROM CalendarItem as ci LEFT JOIN Location ON Location.ROWint ID = IIF(client_location_id > 0, client_location_id, location_id) WHERE ci.ROWint ID = CalendarItem.ROWID)");
  if (a3 >= 17202)
  {
    if ((v14 & 1) == 0) {
      return;
    }
    goto LABEL_169;
  }
  int BirthdayCalendarId = _CalCalendarGetBirthdayCalendarId(a2);
  uint64_t v62 = MEMORY[0x1E4F143A8];
  uint64_t v63 = 3221225472;
  int v64 = ___CalEventCleanupBirthdayProperties_block_invoke;
  __int16 v65 = &__block_descriptor_36_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  int v66 = BirthdayCalendarId;
  CalPerformSQLWithConnectionAndBindBlock((void *)a2, 0, @"UPDATE CalendarItem SET (contact_identifier, contact_name) = (NULL, NULL) WHERE calendar_id != ? AND (contact_identifier IS NOT NULL OR contact_name IS NOT NULL)", &v62);
  if (a3 <= 36)
  {
    EnsureAllEventsHaveUIDsWithQuery(a2);
LABEL_112:
    CalPerformSQLWithConnection((void *)a2, @"UPDATE CalendarItem SET orig_date = NULL WHERE orig_date = -2147483648");
    CalPerformSQLWithConnection((void *)a2, @"UPDATE CalendarItem SET last_modified = NULL WHERE last_modified = -2147483648");
LABEL_113:
    _CalDBFillInUUIDColumn(a2, @"CalendarItem");
    goto LABEL_114;
  }
  if (a3 <= 0x30) {
    goto LABEL_112;
  }
  if (a3 <= 0x34) {
    goto LABEL_113;
  }
  if (a3 > 54) {
    goto LABEL_168;
  }
LABEL_114:
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        uint64_t v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v36) {
          os_unfair_lock_assert_owner(v36 + 20);
        }
      }
    }
  }
  int v37 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        uint64_t v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v38) {
          os_unfair_lock_assert_owner(v38 + 20);
        }
      }
    }
  }
  int v39 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        uint64_t v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v40) {
          os_unfair_lock_assert_owner(v40 + 20);
        }
      }
    }
  }
  uint64_t v41 = CPSqliteConnectionStatementForSQL();
  uint64_t v42 = (uint64_t **)v41;
  if (v37 && v39 && v41)
  {
    uint64_t v62 = a2;
    uint64_t v63 = (uint64_t)v39;
    int v64 = (uint64_t (*)(uint64_t, uint64_t))v41;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v37)
      {
        uint64_t v43 = **v37;
        if (v43)
        {
          if (*(void *)(v43 + 104))
          {
            uint64_t v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v44) {
              os_unfair_lock_assert_owner(v44 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
  }
  else if (!v37)
  {
    goto LABEL_147;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*v37)
    {
      uint64_t v45 = **v37;
      if (v45)
      {
        if (*(void *)(v45 + 104))
        {
          int v46 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v46) {
            os_unfair_lock_assert_owner(v46 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
LABEL_147:
  if (v39)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v39)
      {
        uint64_t v47 = **v39;
        if (v47)
        {
          if (*(void *)(v47 + 104))
          {
            uint64_t v48 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v48) {
              os_unfair_lock_assert_owner(v48 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (v42)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v42)
      {
        uint64_t v49 = **v42;
        if (v49)
        {
          if (*(void *)(v49 + 104))
          {
            uint64_t v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v50) {
              os_unfair_lock_assert_owner(v50 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    if ((v14 & 1) == 0) {
      goto LABEL_205;
    }
LABEL_169:
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a2)
      {
        if (*(void *)(*(void *)a2 + 104))
        {
          uint64_t v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v51) {
            os_unfair_lock_assert_owner(v51 + 20);
          }
        }
      }
    }
    uint64_t v52 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a2)
      {
        if (*(void *)(*(void *)a2 + 104))
        {
          CFStringRef v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v53) {
            os_unfair_lock_assert_owner(v53 + 20);
          }
        }
      }
    }
    uint64_t v54 = CPSqliteConnectionStatementForSQL();
    uint64_t v55 = (uint64_t **)v54;
    if (v52 && v54)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v52)
        {
          uint64_t v56 = **v52;
          if (v56)
          {
            if (*(void *)(v56 + 104))
            {
              CFAbsoluteTime v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v57) {
                os_unfair_lock_assert_owner(v57 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
    }
    else if (!v52)
    {
LABEL_196:
      if (v55)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v55)
          {
            uint64_t v60 = **v55;
            if (v60)
            {
              if (*(void *)(v60 + 104))
              {
                int v61 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v61) {
                  os_unfair_lock_assert_owner(v61 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      goto LABEL_204;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*v52)
      {
        uint64_t v58 = **v52;
        if (v58)
        {
          if (*(void *)(v58 + 104))
          {
            uint64_t v59 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v59) {
              os_unfair_lock_assert_owner(v59 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    goto LABEL_196;
  }
LABEL_168:
  if (v14) {
    goto LABEL_169;
  }
LABEL_204:
  if (a3 <= 68)
  {
LABEL_205:
    CalPerformSQLWithConnection((void *)a2, @"UPDATE CalendarItem SET has_attendees = 1 WHERE EXISTS (SELECT ROWID FROM Participant WHERE Participant.owner_id = CalendarItem.ROWID AND entity_type = 7)");
LABEL_207:
    CalPerformSQLWithConnection((void *)a2, @"UPDATE CalendarItem SET due_tz = start_tz, due_all_day = all_day WHERE entity_type = 3 AND due_date IS NOT NULL");
LABEL_208:
    CalPerformSQLWithConnection((void *)a2, @"UPDATE CalendarItem SET display_order = CAST(creation_date AS INT), external_mod_tag = NULL WHERE entity_type = 3");
LABEL_209:
    CalPerformSQLWithConnection((void *)a2, @"UPDATE CalendarItem SET invitation_status = 3 WHERE invitation_status = 2");
    CalPerformSQLWithConnection((void *)a2, @"UPDATE CalendarItem SET invitation_status = 2 WHERE invitation_status = 1");
LABEL_210:
    CalPerformSQLWithConnection((void *)a2, @"UPDATE CalendarItem SET end_tz = start_tz WHERE entity_type = 2");
    return;
  }
  if (a3 == 69) {
    goto LABEL_207;
  }
  if (a3 <= 0x51) {
    goto LABEL_208;
  }
  if (a3 <= 0x59) {
    goto LABEL_209;
  }
  if (a3 <= 0x7E) {
    goto LABEL_210;
  }
}

uint64_t _CalEventSaveAddedRecords(uint64_t a1)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionTypeMatchingPredicate();
  uint64_t v5 = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v7) {
      os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

CFSetRef _CalEventAddOriginalEventFilter(uint64_t a1, const void *a2)
{
  if (_CalEntityGetType(a2) != 2) {
    return 0;
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFSetRef result = (const __CFSet *)CPRecordGetProperty();
  if (result) {
    return CalToManyRelationIsDirty((uint64_t)result);
  }
  return result;
}

CFTypeRef _CalCalendarItemHasValidParent(uint64_t a1)
{
  CFTypeRef result = _CalCalendarItemGetCalendar(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalCalendarItemCleanUpDanglingEntities(uint64_t a1, void *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM CalendarItem WHERE calendar_id NOT IN (SELECT ROWID FROM Calendar);",
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM CalendarItem WHERE (orig_date != 0 AND orig_item_id = 0) OR orig_item_id IN (SELECT ROWID FROM CalendarItem WHERE orig_date != 0 AND orig_item_id = 0);",
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM CalendarItem WHERE orig_item_id = ROWID OR orig_item_id IN (SELECT ROWID FROM CalendarItem WHERE orig_item_id = ROWID);",
    0);
}

const void *_CalCalendarItemCreate(uint64_t a1, int a2)
{
  if ((a2 & 0xFFFFFFFE) != 2) {
    _CalCalendarItemCreate_cold_1();
  }
  CFArrayRef v4 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = v4 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      char v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v19 = CFDateCreate(0, Current);
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  MEMORY[0x1AD0E87A0](v19);
  CPRecordInitializeProperty();
  CFRelease(v19);
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        double v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23) {
          os_unfair_lock_assert_owner(v23 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFStringRef v25 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26) {
          os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v25);
  _CalDatabaseAddEntity(a1, v4);
  _CalEventMarkEventAsHavingDirtyInstanceAttributes((uint64_t)v4);
  if (a2 == 2) {
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(v4);
  }
  return v4;
}

uint64_t _CalEventMarkEventAsHavingDirtyInstanceAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(const void *a1)
{
  if ((_CalEntityIsOfType(a1, 2) & 1) == 0) {
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate_cold_1();
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

CFTypeRef _CalEventGetDebugDescription(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = _CalCalendarItemCopyUUID(a1);
    uint64_t v3 = _CalCalendarItemCopyExternalID(a1);
    uint64_t UniqueIdentifier = _CalEventGetUniqueIdentifier(a1);
    uint64_t v5 = _CalEventCopySummary(a1);
    StartCFDateRef Date = _CalEventGetStartDate(a1);
    Dateuint64_t Property = _CalRecordGetDateProperty(a1);
    BOOL IsAllDay = _CalEventIsAllDay(a1);
    uint64_t v9 = _CalCalendarItemCopyURL(a1);
    Originaluint64_t Event = _CalEventGetOriginalEvent(a1);
    Locatiouint64_t n = _CalCalendarItemGetLocation(a1);
    uint64_t v29 = UniqueIdentifier;
    if (Location) {
      CFTypeRef v12 = _CalLocationCopyFullDisplayString((uint64_t)Location);
    }
    else {
      CFTypeRef v12 = 0;
    }
    CFTypeRef Calendar = _CalCalendarItemGetCalendar(a1);
    int v31 = (const void *)v5;
    uint64_t v32 = (const void *)v3;
    CFTypeRef cf = (CFTypeRef)v9;
    uint64_t v15 = (const void *)v2;
    if (Calendar)
    {
      uint64_t v16 = (const void *)_CalCalendarCopyUUID((uint64_t)Calendar);
      uint64_t ID = CPRecordGetID();
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t ID = 0xFFFFFFFFLL;
    }
    BOOL v18 = OriginalEvent != 0;
    id v19 = [NSString alloc];
    int v20 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:*(double *)&StartDate];
    uint64_t v21 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:DateProperty];
    CFStringRef v22 = [NSNumber numberWithBool:IsAllDay];
    double v23 = [NSNumber numberWithBool:v18];
    uint64_t v24 = [NSNumber numberWithInt:ID];
    CFStringRef v25 = (void *)[v19 initWithFormat:@"uuid: [%@] externalID: [%@] uniqueIdentifier: [%@] summary: [%@] startDate: [%@] endDate: [%@] isAllDay: [%@] url: [%@] isDetached: [%@] locationFullDisplayString: [%@] calendarUUID: [%@] calendarRowID: [%@]", v15, v32, v29, v31, v20, v21, v22, cf, v23, v12, v16, v24];

    if (v16) {
      CFRelease(v16);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v31) {
      CFRelease(v31);
    }
    if (v32) {
      CFRelease(v32);
    }
    if (v15) {
      CFRelease(v15);
    }
    if (v25)
    {
      CFTypeRef v26 = CFRetain(v25);
      CFTypeRef v27 = CFAutorelease(v26);

      return v27;
    }
  }
  else
  {
    int v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "NULL 'event' given.  Will not generate a debug description.", buf, 2u);
    }
  }
  return 0;
}

uint64_t _CalCalendarItemCopyUUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t _CalEventCopySummary(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t _CalEventGetStartDate(uint64_t a1)
{
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  return *(void *)&DateProperty;
}

BOOL _CalEventIsAllDay(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL _CalEventIsDetached(uint64_t a1)
{
  return _CalEventGetOriginalEvent(a1) != 0;
}

const void *CalDatabaseCreateEvent(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = _CalCalendarItemCreate((uint64_t)a1, 2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

const void *_CalCalendarItemCreateCopyPreservingUniqueIdentifier(const void *a1, int a2)
{
  if (!a1) {
    _CalCalendarItemCreateCopyPreservingUniqueIdentifier_cold_1();
  }
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFArrayRef Copy = _CalCalendarItemCreateCopy(0, a1, 1, 1, a2, 1, -2147483650.0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Copy;
}

const void *_CalCalendarItemCreateCopy(const void *a1, const void *a2, char a3, int a4, int a5, uint64_t a6, double a7)
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  Entityuint64_t Type = _CalCalendarItemGetEntityType((uint64_t)a2);
  int v14 = _CalCalendarItemCreate(DatabaseForRecord, EntityType);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 0, Property);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CFStringRef v18 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 3, v18);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  CFStringRef v20 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 4, v20);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  CFStringRef v22 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 5, v22);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        double v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23) {
          os_unfair_lock_assert_owner(v23 + 20);
        }
      }
    }
  }
  CFStringRef v24 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 6, v24);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25) {
          os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
  }
  CFStringRef v26 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 7, v26);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  CFStringRef v28 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 8, v28);
  if (!a1)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v29) {
            os_unfair_lock_assert_owner(v29 + 20);
          }
        }
      }
    }
    CFStringRef v30 = (const __CFString *)CPRecordGetProperty();
    _CalRecordSetPropertyIfDifferent((uint64_t)v14, 9, v30);
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31) {
          os_unfair_lock_assert_owner(v31 + 20);
        }
      }
    }
  }
  CFStringRef v32 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 14, v32);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33) {
          os_unfair_lock_assert_owner(v33 + 20);
        }
      }
    }
  }
  CFStringRef v34 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 16, v34);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35) {
          os_unfair_lock_assert_owner(v35 + 20);
        }
      }
    }
  }
  CFStringRef v36 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 17, v36);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37) {
          os_unfair_lock_assert_owner(v37 + 20);
        }
      }
    }
  }
  CFStringRef v38 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 20, v38);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v39) {
          os_unfair_lock_assert_owner(v39 + 20);
        }
      }
    }
  }
  CFStringRef v40 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 56, v40);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v41) {
          os_unfair_lock_assert_owner(v41 + 20);
        }
      }
    }
  }
  CFStringRef v42 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 62, v42);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v43) {
          os_unfair_lock_assert_owner(v43 + 20);
        }
      }
    }
  }
  CFStringRef v44 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 57, v44);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45) {
          os_unfair_lock_assert_owner(v45 + 20);
        }
      }
    }
  }
  CFStringRef v46 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 63, v46);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v47 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v47) {
          os_unfair_lock_assert_owner(v47 + 20);
        }
      }
    }
  }
  CFStringRef v48 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 64, v48);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v49 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v49) {
          os_unfair_lock_assert_owner(v49 + 20);
        }
      }
    }
  }
  CFStringRef v50 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 66, v50);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v51) {
          os_unfair_lock_assert_owner(v51 + 20);
        }
      }
    }
  }
  CFStringRef v52 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 69, v52);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v53) {
          os_unfair_lock_assert_owner(v53 + 20);
        }
      }
    }
  }
  CFStringRef v54 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 115, v54);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v55) {
          os_unfair_lock_assert_owner(v55 + 20);
        }
      }
    }
  }
  CFStringRef v56 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 125, v56);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFAbsoluteTime v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v57) {
          os_unfair_lock_assert_owner(v57 + 20);
        }
      }
    }
  }
  CFStringRef v58 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 116, v58);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v59 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v59) {
          os_unfair_lock_assert_owner(v59 + 20);
        }
      }
    }
  }
  CFStringRef v60 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 117, v60);
  if (a6)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v61 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v61) {
            os_unfair_lock_assert_owner(v61 + 20);
          }
        }
      }
    }
    CFStringRef v62 = (const __CFString *)CPRecordGetProperty();
    _CalRecordSetPropertyIfDifferent((uint64_t)v14, 26, v62);
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v63 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v63) {
            os_unfair_lock_assert_owner(v63 + 20);
          }
        }
      }
    }
    CFStringRef v64 = (const __CFString *)CPRecordGetProperty();
    _CalRecordSetPropertyIfDifferent((uint64_t)v14, 34, v64);
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          __int16 v65 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v65) {
            os_unfair_lock_assert_owner(v65 + 20);
          }
        }
      }
    }
    CFStringRef v66 = (const __CFString *)CPRecordGetProperty();
    _CalRecordSetPropertyIfDifferent((uint64_t)v14, 24, v66);
  }
  LocatioCFIndex n = _CalCalendarItemGetLocation((uint64_t)a2);
  if (Location)
  {
    int v68 = _CalLocationCopy(DatabaseForRecord, (uint64_t)Location);
    if (v68)
    {
      __int16 v69 = v68;
      _CalCalendarItemSetLocation((uint64_t)v14, v68);
      CFRelease(v69);
    }
  }
  StartLocatioCFIndex n = _CalCalendarItemGetStartLocation((uint64_t)a2);
  if (StartLocation)
  {
    __int16 v71 = _CalLocationCopy(DatabaseForRecord, (uint64_t)StartLocation);
    if (v71)
    {
      id v72 = v71;
      _CalCalendarItemSetStartLocation((uint64_t)v14, v71);
      CFRelease(v72);
    }
  }
  EndLocatioCFIndex n = _CalCalendarItemGetEndLocation((uint64_t)a2);
  if (EndLocation)
  {
    uint64_t v74 = _CalLocationCopy(DatabaseForRecord, (uint64_t)EndLocation);
    if (v74)
    {
      unsigned int v75 = v74;
      _CalCalendarItemSetEndLocation((uint64_t)v14, v74);
      CFRelease(v75);
    }
  }
  ClientLocatioCFIndex n = _CalCalendarItemGetClientLocation((uint64_t)a2);
  if (ClientLocation)
  {
    uint64_t v77 = _CalLocationCopy(DatabaseForRecord, (uint64_t)ClientLocation);
    if (v77)
    {
      double v78 = v77;
      _CalCalendarItemSetClientLocation((uint64_t)v14, v77);
      CFRelease(v78);
    }
  }
  BOOL v145 = a1;
  if ((int)a7 != 0x7FFFFFFF)
  {
    CFArrayRef v79 = _CalCalendarItemCopyExceptionDates((uint64_t)a2);
    if (v79)
    {
      CFArrayRef v80 = v79;
      CFIndex Count = CFArrayGetCount(v79);
      if (Count >= 1)
      {
        CFIndex v82 = Count;
        for (CFIndex i = 0; i != v82; ++i)
        {
          unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v80, i);
          if (_CalExceptionDateGetDate((uint64_t)ValueAtIndex) && MEMORY[0x1AD0E87A0]() >= a7)
          {
            int v85 = (void *)_CalExceptionDateCopy(DatabaseForRecord, (uint64_t)ValueAtIndex);
            _CalCalendarItemAddExceptionDate((uint64_t)v14, v85);
            CFRelease(v85);
          }
        }
      }
      CFRelease(v80);
    }
  }
  CFArrayRef v86 = _CalCalendarItemCopyAlarms((uint64_t)a2);
  if (v86)
  {
    CFArrayRef v87 = v86;
    CFIndex v88 = CFArrayGetCount(v86);
    if (v88 >= 1)
    {
      CFIndex v89 = v88;
      for (CFIndex j = 0; j != v89; ++j)
      {
        char v91 = CFArrayGetValueAtIndex(v87, j);
        uint64_t v92 = (uint64_t)v91;
        if ((a3 & 1) != 0 || fabs(_CalAlarmGetTriggerDate((uint64_t)v91) + -1.17549435e-38) < 2.22044605e-16)
        {
          unint64_t v93 = (void *)_CalAlarmCopy(DatabaseForRecord, v92);
          _CalCalendarItemAddAlarm((uint64_t)v14, v93);
          CFRelease(v93);
        }
      }
    }
    CFRelease(v87);
  }
  if (a4)
  {
    CFArrayRef v94 = _CalCalendarItemCopyRecurrencesWhileLocked((uint64_t)a2, 1);
    if (v94)
    {
      CFArrayRef v95 = v94;
      CFIndex v96 = CFArrayGetCount(v94);
      if (v96 >= 1)
      {
        CFIndex v97 = v96;
        for (CFIndex k = 0; k != v97; ++k)
        {
          double v99 = CFArrayGetValueAtIndex(v95, k);
          double v100 = (void *)_CalRecurrenceCopy(DatabaseForRecord, (uint64_t)v99);
          _CalCalendarItemAddRecurrence((uint64_t)v14, v100);
          CFRelease(v100);
        }
      }
      CFRelease(v95);
    }
  }
  CFTypeRef Organizer = _CalCalendarItemGetOrganizer((uint64_t)a2);
  if (Organizer)
  {
    CFArrayRef v102 = _CalParticipantCopy(DatabaseForRecord, (uint64_t)Organizer);
    if (v102)
    {
      uint64_t v103 = v102;
      _CalCalendarItemSetOrganizer((uint64_t)v14, v102);
      CFRelease(v103);
    }
  }
  CFTypeRef SelfAttendee = _CalCalendarItemGetSelfAttendee((uint64_t)a2);
  CFArrayRef v105 = _CalCalendarItemCopyAttendees((uint64_t)a2);
  if (v105)
  {
    CFArrayRef v106 = v105;
    CFIndex v107 = CFArrayGetCount(v105);
    if (v107 >= 1)
    {
      CFIndex v108 = v107;
      for (CFIndex m = 0; m != v108; ++m)
      {
        CFTypeRef v110 = CFArrayGetValueAtIndex(v106, m);
        int v111 = (void *)_CalParticipantCopy(DatabaseForRecord, (uint64_t)v110);
        _CalCalendarItemAddAttendee((uint64_t)v14, v111);
        if (v110 == SelfAttendee) {
          _CalCalendarItemSetSelfAttendee((uint64_t)v14, v111);
        }
        CFRelease(v111);
      }
    }
    CFRelease(v106);
  }
  CFArrayRef v112 = _CalCalendarItemCopyAttendeesPendingDeletion((uint64_t)a2);
  if (v112)
  {
    CFArrayRef v113 = v112;
    CFIndex v114 = CFArrayGetCount(v112);
    if (v114 >= 1)
    {
      CFIndex v115 = v114;
      for (CFIndex n = 0; n != v115; ++n)
      {
        CFTypeRef v117 = CFArrayGetValueAtIndex(v113, n);
        double v118 = (void *)_CalParticipantCopy(DatabaseForRecord, (uint64_t)v117);
        _CalCalendarItemAddPendingDeleteAttendee((uint64_t)v14, v118);
        if (v117 == SelfAttendee) {
          _CalCalendarItemSetSelfAttendee((uint64_t)v14, v118);
        }
        CFRelease(v118);
      }
    }
    CFRelease(v113);
  }
  CFMutableArrayRef v119 = _CalCalendarItemCopyAttachments((uint64_t)a2);
  if (v119)
  {
    CFArrayRef v120 = v119;
    CFTypeRef Calendar = v145;
    if (v145 || (CFTypeRef Calendar = _CalCalendarItemGetCalendar((uint64_t)a2)) != 0) {
      CFTypeRef Store = _CalCalendarGetStore((uint64_t)Calendar);
    }
    else {
      CFTypeRef Store = 0;
    }
    CFIndex v123 = CFArrayGetCount(v120);
    if (v123 >= 1)
    {
      CFIndex v124 = v123;
      for (iCFIndex i = 0; ii != v124; ++ii)
      {
        double v126 = (void *)CFArrayGetValueAtIndex(v120, ii);
        int v127 = _CalAttachmentCopy((uint64_t)Store, v126);
        _CalCalendarItemAddAttachment((uint64_t)v14, v127);
        CFRelease(v127);
      }
    }
    CFRelease(v120);
  }
  CFArrayRef v128 = _CalCalendarItemCopyContacts((uint64_t)a2);
  if (v128)
  {
    CFArrayRef v129 = v128;
    CFIndex v130 = CFArrayGetCount(v128);
    if (v130 >= 1)
    {
      CFIndex v131 = v130;
      for (jCFIndex j = 0; jj != v131; ++jj)
      {
        double v133 = CFArrayGetValueAtIndex(v129, jj);
        double v134 = (void *)_CalContactCopy(DatabaseForRecord, (uint64_t)v133);
        _CalCalendarItemAddContact((uint64_t)v14, v134);
        CFRelease(v134);
      }
    }
    CFRelease(v129);
  }
  if (v145) {
    _CalCalendarAddCalendarItem(v145, v14);
  }
  if (a5)
  {
    if (_CalEntityGetType(a2) == 2)
    {
      CFArrayRef v135 = _CalEventCopyDetachedEvents((uint64_t)a2);
      if (v135)
      {
        CFArrayRef v136 = v135;
        CFIndex v137 = CFArrayGetCount(v135);
        if (v137 >= 1)
        {
          CFIndex v138 = v137;
          for (kCFIndex k = 0; kk != v138; ++kk)
          {
            CFAbsoluteTime v140 = CFArrayGetValueAtIndex(v136, kk);
            CFArrayRef Copy = (void *)_CalCalendarItemCreateCopy(v145, v140, 1, 1, 0, a6, -2147483650.0);
            _CalEventAddDetachedEvent((uint64_t)v14, Copy);
            DateCFStringRef Property = _CalRecordGetDateProperty((uint64_t)v140);
            _CalEventSetOriginalStartDate((uint64_t)Copy, DateProperty);
            CFRelease(Copy);
          }
        }
        CFRelease(v136);
      }
    }
  }
  return v14;
}

const void *CalCalendarItemCreateCopyInCalendar(const void *a1, const void *a2, int a3, uint64_t a4)
{
  uint64_t DatabaseForRecord = (os_unfair_lock *)CalGetDatabaseForRecord();
  uint64_t v9 = (os_unfair_lock *)CalGetDatabaseForRecord();
  CalDatabaseMultiLock(v9, DatabaseForRecord);
  CFArrayRef Copy = _CalCalendarItemCreateCopy(a1, a2, 1, 1, a3, a4, -2147483650.0);
  CalDatabaseMultiUnlock(v9, DatabaseForRecord);
  return Copy;
}

const void *CalCalendarItemCreateCopy(const void *a1, int a2)
{
  if (!a1) {
    CalCalendarItemCreateCopy_cold_1();
  }
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFArrayRef Copy = _CalCalendarItemCreateCopy(0, a1, 1, 1, a2, 0, -2147483650.0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Copy;
}

const void *CalEventCreateCopy(const void *a1)
{
  return CalCalendarItemCreateCopy(a1, 0);
}

CFMutableArrayRef _CalEventCopyDetachedEvents(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

void _CalEventAddDetachedEvent(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int ID = CPRecordGetID();
  int v5 = CPRecordGetID();
  if ((void *)a1 == a2 || ID != -1 && ID == v5)
  {
    BOOL v6 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:COERCE_DOUBLE(_CalEventGetStartDate(a1))];
    uint64_t v7 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      BOOL v8 = v7;
      v11[0] = 67109378;
      v11[1] = CPRecordGetID();
      __int16 v12 = 2114;
      int v13 = v6;
      _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_ERROR, "Attempting to add an event (ROWint ID = %d, startDate = %{public}@) as a detachment of itself. Ignoring.", (uint8_t *)v11, 0x12u);
    }
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CFStringRef Property = (void *)CPRecordGetProperty();
    if (Property)
    {
      CalToManyRelationAddObject(Property, a2);
    }
  }
}

void _CalEventSetOriginalStartDate(uint64_t a1, CFAbsoluteTime a2)
{
  uint64_t Store = CPRecordGetStore();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  CFDateRefFromCalCFDateRef Date = (const __CFString *)_CreateCFDateRefFromCalDate(a2);
  if (Property != -1)
  {
    if (Store)
    {
      uint64_t v8 = CPRecordGetStore();
      CalendarItemWithRowint ID = _CalGetCalendarItemWithRowID(v8);
      if (CalendarItemWithRowID)
      {
        uint64_t v10 = CalendarItemWithRowID;
        Dateint Property = _CalRecordGetDateProperty(a1);
        if (vabdd_f64(DateProperty, *MEMORY[0x1E4F57888]) >= 2.22044605e-16) {
          _CalCalendarItemRemoveExceptionDateWithCalDate(v10, DateProperty);
        }
      }
    }
  }
  _CalRecordSetPropertyIfDifferent(a1, 11, CFDateRefFromCalDate);
  if (CFDateRefFromCalDate)
  {
    CFRelease(CFDateRefFromCalDate);
  }
}

double _CalEventGetOriginalStartDate(uint64_t a1)
{
  return _CalRecordGetDateProperty(a1);
}

void _CalRemoveEvent(const void *a1, int a2, int a3)
{
  uint64_t Store = CPRecordGetStore();
  if (Store)
  {
    uint64_t v7 = Store;
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(a1);
    _CalEventMarkEventAsHavingDirtyInstanceAttributes((uint64_t)a1);
    if (_CalCalendarItemHasAlarms((uint64_t)a1))
    {
      CPRecordGetStore();
      uint64_t Context = CPRecordStoreGetContext();
      _CalDatabaseSetChangeFlags(Context, 8);
    }
    _CalEventRemoveAllEventActions((uint64_t)a1);
    if (a2)
    {
      CFArrayRef v9 = _CalEventCopyDetachedEvents((uint64_t)a1);
      if (v9)
      {
        CFArrayRef v10 = v9;
        CFIndex Count = CFArrayGetCount(v9);
        if (Count >= 1)
        {
          CFIndex v12 = Count;
          for (CFIndex i = 0; i != v12; ++i)
          {
            unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v10, i);
            _CalRemoveEvent(ValueAtIndex, 0, 0);
          }
        }
        CFRelease(v10);
      }
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15) {
            os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    if ((int)CPRecordGetProperty() >= 1)
    {
      CalendarItemWithRowint ID = _CalGetCalendarItemWithRowID(v7);
      if (CalendarItemWithRowID)
      {
        uint64_t v17 = CalendarItemWithRowID;
        if (_CalCalendarItemIsPhantomMaster(CalendarItemWithRowID))
        {
          CFArrayRef v18 = _CalEventCopyDetachedEvents(v17);
          if (v18)
          {
            CFArrayRef v19 = v18;
            if (CFArrayGetCount(v18) <= 1) {
              _CalRemoveEvent(v17, 0, 0);
            }
            CFRelease(v19);
          }
          else
          {
            _CalRemoveEvent(v17, 0, 0);
          }
        }
        else
        {
          if (a3)
          {
            Dateint Property = _CalRecordGetDateProperty((uint64_t)a1);
            if (vabdd_f64(DateProperty, *MEMORY[0x1E4F57888]) >= 2.22044605e-16) {
              _CalCalendarItemAddExceptionDateWithCalDate(v17, DateProperty);
            }
          }
          _CalEventMarkEventAsHavingDirtyInstanceAttributes(v17);
          if ((_CalEntityIsNew(v17) & 1) == 0)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v21) {
                  os_unfair_lock_assert_owner(v21 + 20);
                }
              }
            }
            CPRecordMarkChanged();
          }
        }
      }
    }
    CFStringRef v22 = CalCopyDatabaseForRecord();
    if (v22)
    {
      double v23 = v22;
      _CalDatabaseRemoveEntity((uint64_t)v22, a1);
      CFRelease(v23);
    }
  }
}

void _CalEventRemoveAllEventActions(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = (void *)CPRecordGetProperty();
  if (Property)
  {
    CalToManyRelationRemoveAllObjects(Property);
  }
}

__CFArray *_CalCalendarItemCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  LocatioCFIndex n = _CalCalendarItemGetLocation(a2);
  if (Location) {
    CFArrayAppendValue(Mutable, Location);
  }
  ClientLocatioCFIndex n = _CalCalendarItemGetClientLocation(a2);
  if (ClientLocation) {
    CFArrayAppendValue(Mutable, ClientLocation);
  }
  StartLocatioCFIndex n = _CalCalendarItemGetStartLocation(a2);
  if (StartLocation) {
    CFArrayAppendValue(Mutable, StartLocation);
  }
  EndLocatioCFIndex n = _CalCalendarItemGetEndLocation(a2);
  if (EndLocation) {
    CFArrayAppendValue(Mutable, EndLocation);
  }
  CFArrayRef v8 = _CalCalendarItemCopyAlarms(a2);
  if (v8)
  {
    CFArrayRef v9 = v8;
    v20.CFIndex length = CFArrayGetCount(v8);
    v20.CFIndex location = 0;
    CFArrayAppendArray(Mutable, v9, v20);
    CFRelease(v9);
  }
  CFArrayRef v10 = _CalCalendarItemCopyRecurrencesWhileLocked(a2, 1);
  if (v10)
  {
    CFArrayRef v11 = v10;
    v21.CFIndex length = CFArrayGetCount(v10);
    v21.CFIndex location = 0;
    CFArrayAppendArray(Mutable, v11, v21);
    CFRelease(v11);
  }
  CFArrayRef v12 = _CalCalendarItemCopyAttendees(a2);
  if (v12)
  {
    CFArrayRef v13 = v12;
    v22.CFIndex length = CFArrayGetCount(v12);
    v22.CFIndex location = 0;
    CFArrayAppendArray(Mutable, v13, v22);
    CFRelease(v13);
  }
  CFArrayRef v14 = _CalCalendarItemCopyAttachments(a2);
  if (v14)
  {
    CFArrayRef v15 = v14;
    v23.CFIndex length = CFArrayGetCount(v14);
    v23.CFIndex location = 0;
    CFArrayAppendArray(Mutable, v15, v23);
    CFRelease(v15);
  }
  CFArrayRef v16 = _CalCalendarItemCopyContacts(a2);
  if (v16)
  {
    CFArrayRef v17 = v16;
    v24.CFIndex length = CFArrayGetCount(v16);
    v24.CFIndex location = 0;
    CFArrayAppendArray(Mutable, v17, v24);
    CFRelease(v17);
  }
  CFTypeRef Error = _CalCalendarItemGetError(a2);
  if (Error) {
    CFArrayAppendValue(Mutable, Error);
  }
  return Mutable;
}

void CalRemoveEvent(const void *a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveEvent(a1, 0, 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventIsFloating(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsFloating = _CalCalendarItemIsFloating(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsFloating;
}

uint64_t _CalEventMarkPropertyModified(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3) {
          os_unfair_lock_assert_owner(v3 + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalEventGetModifiedProperties(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Invitationunsigned int Status = _CalCalendarGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus;
}

void CalEventClearModifiedProperties(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalEventMarkAsModifiedForChangeTracking(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordMarkChanged();
  return _CalEventMarkEventAsHavingDirtyNotifiableAttributes(a1);
}

uint64_t _CalEventMarkEventAsHavingDirtyNotifiableAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalRemoveEventAndDetachedEvents(const void *a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveEvent(a1, 1, 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalEventUpdateOccurrenceCache(void *a1)
{
  if (CPRecordGetStore())
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context)
    {
      uint64_t v3 = _CalDatabaseCopyEventOccurrenceCache(Context);
      if (v3)
      {
        CFArrayRef v4 = (const void *)v3;
        _CalEventOccurrenceCacheMarkEventForUpdate(v3, a1);
        CFRelease(v4);
      }
    }
  }
}

void _CalEventUpdateAlarmCache(void *a1)
{
  if (CPRecordGetStore())
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context)
    {
      uint64_t v3 = _CalDatabaseCopyEventOccurrenceCache(Context);
      if (v3)
      {
        CFArrayRef v4 = (const void *)v3;
        _CalEventOccurrenceCacheMarkEventForAlarmUpdate(v3, a1);
        CFRelease(v4);
      }
    }
  }
}

uint64_t _CalEventMarkEventAsNeedingAlarmCacheUpdate(const void *a1)
{
  if ((_CalEntityIsOfType(a1, 2) & 1) == 0) {
    _CalEventMarkEventAsNeedingAlarmCacheUpdate_cold_1();
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t _CalTaskMarkAsNeedingScheduledTaskCacheUpdate(const void *a1)
{
  if ((_CalEntityIsOfType(a1, 3) & 1) == 0) {
    _CalTaskMarkAsNeedingScheduledTaskCacheUpdate_cold_1();
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void _CalEventRectifyRecurrenceSeriesPrivacyLevels(CFTypeRef OriginalEvent)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t ID = CPRecordGetID();
  uint64_t v3 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    CFArrayRef v4 = v3;
    int v5 = (void *)_CalEventCopySummary((uint64_t)OriginalEvent);
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)CFAbsoluteTime v57 = ID;
    *(_WORD *)&v57[4] = 2112;
    *(void *)&v57[6] = v5;
    _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_DEBUG, "Rectifying recurrence series privacy levels for event with ID: [%d] title: [%@]", buf, 0x12u);
  }
  if (OriginalEvent)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef v7 = (const __CFArray *)CPRecordCopyChangedProperties();
  if (v7)
  {
    CFArrayRef v8 = v7;
    CFIndex Count = CFArrayGetCount(v7);
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      CFIndex v11 = 0;
      while (CFArrayGetValueAtIndex(v8, v11) != 17)
      {
        if (v10 == ++v11) {
          goto LABEL_37;
        }
      }
      CFArrayRef v12 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
      {
        CFArrayRef v13 = v12;
        unsigned int PrivacyLevel = _CalEventGetPrivacyLevel((uint64_t)OriginalEvent);
        CFArrayRef v15 = CalPrivacyLevelAsString(PrivacyLevel);
        *(_DWORD *)long long buf = 138412546;
        *(void *)CFAbsoluteTime v57 = v15;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)&v57[10] = ID;
        _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_DEBUG, "Privacy level change to [%@] detected on event with ID: [%d]", buf, 0x12u);
      }
      CFTypeRef Calendar = _CalCalendarItemGetCalendar((uint64_t)OriginalEvent);
      CFTypeRef Store = _CalCalendarGetStore((uint64_t)Calendar);
      BOOL v18 = _CalStoreRequiresSamePrivacyLevelAcrossRecurrenceSeries((uint64_t)Store);
      CFArrayRef v19 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
      {
        CFRange v20 = v19;
        CFRange v21 = CalBooleanAsString();
        *(_DWORD *)long long buf = 67109378;
        *(_DWORD *)CFAbsoluteTime v57 = ID;
        *(_WORD *)&v57[4] = 2112;
        *(void *)&v57[6] = v21;
        _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_DEBUG, "The store for the event with ID [%d] requires the same privacy level across the recurrence series: [%@]", buf, 0x12u);
      }
      if (v18)
      {
        unsigned int v22 = _CalEventGetPrivacyLevel((uint64_t)OriginalEvent);
        CFRange v23 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          CFRange v24 = v23;
          CFStringRef v25 = CalPrivacyLevelAsString(v22);
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)CFAbsoluteTime v57 = ID;
          *(_WORD *)&v57[4] = 2112;
          *(void *)&v57[6] = v25;
          _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_DEBUG, "Privacy level override for event with ID [%d] is [%@].", buf, 0x12u);
        }
        if (_CalEventGetOriginalEvent((uint64_t)OriginalEvent))
        {
          Originaluint64_t Event = _CalEventGetOriginalEvent((uint64_t)OriginalEvent);
          CFStringRef v26 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            CFTypeRef v27 = v26;
            int v28 = CPRecordGetID();
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)CFAbsoluteTime v57 = ID;
            *(_WORD *)&v57[4] = 1024;
            *(_DWORD *)&v57[6] = v28;
            _os_log_impl(&dword_1A8E81000, v27, OS_LOG_TYPE_DEBUG, "Event with ID [%d] is a detached event.  Grabbed the master event with ID [%d].", buf, 0xEu);
          }
        }
        else
        {
          uint64_t v29 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)CFAbsoluteTime v57 = ID;
            _os_log_impl(&dword_1A8E81000, v29, OS_LOG_TYPE_DEBUG, "Event with ID [%d] is a master event.", buf, 8u);
          }
        }
        unsigned int v30 = _CalEventGetPrivacyLevel((uint64_t)OriginalEvent);
        if (v30 != v22)
        {
          unsigned int v31 = v30;
          _CalRecordSetPropertyIfDifferent((uint64_t)OriginalEvent, 17, (const __CFString *)v22);
          CFStringRef v32 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            int v33 = v32;
            int v34 = CPRecordGetID();
            int v35 = CalPrivacyLevelAsString(v31);
            CFStringRef v36 = CalPrivacyLevelAsString(v22);
            *(_DWORD *)long long buf = 67109890;
            *(_DWORD *)CFAbsoluteTime v57 = v34;
            *(_WORD *)&v57[4] = 1024;
            *(_DWORD *)&v57[6] = ID;
            *(_WORD *)&v57[10] = 2112;
            *(void *)&v57[12] = v35;
            __int16 v58 = 2112;
            uint64_t v59 = v36;
            _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_DEBUG, "Master event with ID [%d] for event with ID [%d] had its privacy level changed from [%@] to [%@].", buf, 0x22u);
          }
        }
        CFArrayRef v37 = _CalEventCopyDetachedEvents((uint64_t)OriginalEvent);
        if (v37)
        {
          CFArrayRef v38 = v37;
          CFIndex v39 = CFArrayGetCount(v37);
          if (v39 >= 1)
          {
            CFIndex v40 = v39;
            CFIndex v41 = 0;
            CFStringRef v42 = (const __CFString *)v22;
            do
            {
              unsigned int ValueAtIndex = CFArrayGetValueAtIndex(v38, v41);
              unsigned int v44 = _CalEventGetPrivacyLevel((uint64_t)ValueAtIndex);
              if (v44 != v22)
              {
                unsigned int v45 = v44;
                _CalRecordSetPropertyIfDifferent((uint64_t)ValueAtIndex, 17, v42);
                CFStringRef v46 = (void *)CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
                {
                  log = v46;
                  CFArrayRef v47 = v38;
                  CFIndex v48 = v40;
                  CFTypeRef v49 = OriginalEvent;
                  CFStringRef v50 = v42;
                  uint64_t v51 = ID;
                  int v52 = CPRecordGetID();
                  CFStringRef v53 = CalPrivacyLevelAsString(v45);
                  CFStringRef v54 = CalPrivacyLevelAsString(v22);
                  *(_DWORD *)long long buf = 67109890;
                  *(_DWORD *)CFAbsoluteTime v57 = v52;
                  uint64_t ID = v51;
                  CFStringRef v42 = v50;
                  Originaluint64_t Event = v49;
                  CFIndex v40 = v48;
                  CFArrayRef v38 = v47;
                  *(_WORD *)&v57[4] = 1024;
                  *(_DWORD *)&v57[6] = ID;
                  *(_WORD *)&v57[10] = 2112;
                  *(void *)&v57[12] = v53;
                  __int16 v58 = 2112;
                  uint64_t v59 = v54;
                  _os_log_impl(&dword_1A8E81000, log, OS_LOG_TYPE_DEBUG, "Detached event with ID [%d] associated with event with ID [%d] had its privacy level changed from [%@] to [%@].", buf, 0x22u);
                }
              }
              ++v41;
            }
            while (v40 != v41);
          }
          CFRelease(v38);
        }
      }
    }
LABEL_37:
    CFRelease(v8);
  }
}

uint64_t _CalEventGetPrivacyLevel(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef _CalEventGetOriginalEvent(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

uint64_t _CalInvalidateCalendarItemsForCalendarId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClass();
}

uint64_t _CalEventInvalidateWithCalendarId(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  BOOL v5 = a2 != -1 && Property == a2;
  uint64_t v6 = v5;
  if (v5 && (CPRecordGetID() & 0x80000000) == 0)
  {
    uint64_t Store = CPRecordGetStore();
    _CalInvalidateRecurrencesWithOwnerID(Store);
    _CalInvalidateParticipantsWithOwnerID(Store);
    _CalInvalidateEventActionsWithOwnerID(Store);
    _CalInvalidateAlarmsWithCalendarItemOwnerID(Store);
    _CalInvalidateExceptionDatesWithOwnerID(Store);
    _CalInvalidateAttachmentsWithOwnerID(Store);
    _CalInvalidateContactsWithOwnerID(Store);
    _CalInvalidateConferencesWithOwnerID(Store);
  }
  return v6;
}

uint64_t CalDatabaseCopyOfAllEventsInStore(const void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    Uuint64_t ID = CalStoreGetUID();
    CFArrayRef v4 = CalEventCopyStoreUIDQuery();
    if (v4)
    {
      BOOL v5 = v4;
      os_unfair_lock_lock(v2 + 20);
      Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v2);
      uint64_t v7 = RecordStore;
      if (CDBLockingAssertionsEnabled) {
        BOOL v8 = RecordStore == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled) {
        BOOL v11 = Database == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        if (*(void *)(Database + 104))
        {
          CFArrayRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
      uint64_t v13 = CPSqliteDatabaseStatementForReading();
      if (v13)
      {
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 1, UID);
        if (CDBLockingAssertionsEnabled)
        {
          if (v7)
          {
            CFArrayRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
        uint64_t v15 = CPRecordStoreProcessStatementWithPropertyIndices();
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(v2 + 20);
      }
      os_unfair_lock_unlock(v2 + 20);
      CFRelease(v5);
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v2 = (os_unfair_lock_s *)CFRetain(a1);
    CFArrayRef v16 = v2 + 20;
    os_unfair_lock_lock(v2 + 20);
    uint64_t v17 = _CalDatabaseGetRecordStore((uint64_t)v2);
    if (CDBLockingAssertionsEnabled) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      CFArrayRef v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v19) {
        os_unfair_lock_assert_owner(v19 + 20);
      }
    }
    uint64_t v15 = CPRecordStoreCopyAllInstancesOfClass();
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v16);
    }
    os_unfair_lock_unlock(v16);
  }
  CFRelease(v2);
  return v15;
}

uint64_t CalDatabaseGetCountOfEventsInStore(const void *a1, uint64_t a2)
{
  return CalDatabaseGetCountOfCalendarItemsInStore(a1, 2, a2);
}

void CalDatabaseProcessEventsWithCalendarFilter(os_unfair_lock_s *a1, void *a2, uint64_t a3, void *a4)
{
  unsigned int v31 = a4;
  uint64_t v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  SelectPrefixFromRecordDescriptor = (void *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
  objc_msgSend(SelectPrefixFromRecordDescriptor, "appendFormat:", @" WHERE entity_type = %i AND ROWID > ?", 2);
  if (a2)
  {
    BOOL v8 = _CalFilterCopyCalendarIDClauseForQuery(a2, @"calendar_id");
    if (v8)
    {
      CFArrayRef v9 = v8;
      [SelectPrefixFromRecordDescriptor appendFormat:@" AND %@", v8];
      CFRelease(v9);
    }
  }
  objc_msgSend(SelectPrefixFromRecordDescriptor, "appendFormat:", @" LIMIT %i", a3);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v11 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v12 = RecordStore == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v15 = Database == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    if (*(void *)(Database + 104))
    {
      CFArrayRef v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16) {
        os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  uint64_t v17 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v17)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v17)
      {
        if (*(void *)(*(void *)v17 + 104))
        {
          BOOL v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18) {
            os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
    uint64_t v19 = CPSqliteConnectionStatementForSQL();
    if (v19)
    {
      uint64_t v20 = v19;
      RowidForRecorduint64_t ID = 0;
      do
      {
        sqlite3_bind_int64(*(sqlite3_stmt **)(v20 + 8), 1, RowidForRecordID);
        if (CDBLockingAssertionsEnabled) {
          BOOL v22 = v11 == 0;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22)
        {
          CFRange v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v23) {
            os_unfair_lock_assert_owner(v23 + 20);
          }
        }
        CFArrayRef v24 = (const __CFArray *)CPRecordStoreProcessStatement();
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v20)
          {
            uint64_t v25 = **(void **)v20;
            if (v25)
            {
              if (*(void *)(v25 + 104))
              {
                CFStringRef v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v26) {
                  os_unfair_lock_assert_owner(v26 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
        CFIndex Count = CFArrayGetCount(v24);
        if (Count >= 1)
        {
          CFArrayGetValueAtIndex(v24, Count - 1);
          CPRecordGetID();
          if (CDBLockingAssertionsEnabled) {
            BOOL v28 = v11 == 0;
          }
          else {
            BOOL v28 = 1;
          }
          if (!v28)
          {
            uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v29) {
              os_unfair_lock_assert_owner(v29 + 20);
            }
          }
          RowidForRecorduint64_t ID = CPRecordStoreGetRowidForRecordID();
          if (CDBLockingAssertionsEnabled) {
            os_unfair_lock_assert_owner(v6);
          }
          os_unfair_lock_unlock(v6);
          v31[2](v31, v24);
          os_unfair_lock_lock(v6);
          _CalDatabaseRevertInternal((uint64_t)a1, 1);
        }
        CFRelease(v24);
      }
      while (Count == (int)a3);
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
}

CFURLRef CalEventCopyURI(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = CalCalendarItemCopyCalendar(a1);
  if (!v4) {
    return 0;
  }
  BOOL v5 = v4;
  CFTypeRef v6 = CalCalendarCopyStore((uint64_t)v4);
  if (v6)
  {
    uint64_t v7 = v6;
    BOOL v8 = (void *)CalStoreCopyUUID((uint64_t)v6);
    if (v8)
    {
      CFArrayRef v9 = (void *)CalEventCopyUniqueIdentifier(a1);
      if (v9)
      {
        CFIndex v10 = (void *)MEMORY[0x1E4F28E58];
        uint64_t v11 = [MEMORY[0x1E4F28B88] URLPathAllowedCharacterSet];
        BOOL v12 = [v11 bitmapRepresentation];
        uint64_t v13 = [v10 characterSetWithBitmapRepresentation:v12];

        [v13 removeCharactersInString:@"/?&:$+,;=@"];
        CFArrayRef v14 = [v9 stringByAddingPercentEncodingWithAllowedCharacters:v13];
        uint64_t v15 = [v8 stringByAddingPercentEncodingWithAllowedCharacters:v13];
        CFArrayRef v16 = (void *)v15;
        if (a2)
        {
          unint64_t v21 = (unint64_t)MEMORY[0x1AD0E87A0](a2);
          CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"x-apple-calevent://%@/%@?o=%lld", v16, v14, v21);
        }
        else
        {
          CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"x-apple-calevent://%@/%@", v15, v14);
        }
        CFStringRef v19 = v17;
        if (v17)
        {
          CFURLRef v18 = CFURLCreateWithString(0, v17, 0);
          CFRelease(v19);
        }
        else
        {
          CFURLRef v18 = 0;
        }
      }
      else
      {
        CFURLRef v18 = 0;
      }
    }
    else
    {
      CFURLRef v18 = 0;
    }
    CFRelease(v7);
  }
  else
  {
    CFURLRef v18 = 0;
  }
  CFRelease(v5);
  return v18;
}

CFStringRef CalEventCopyPublicID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFStringRef v3 = _CalEventCopyPublicID(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFStringRef _CalEventCopyPublicID(uint64_t a1)
{
  uint64_t Calendar = _CalEventGetCalendar(a1);
  if (!Calendar) {
    return 0;
  }
  CFTypeRef Store = _CalCalendarGetStore(Calendar);
  if (!Store) {
    return 0;
  }
  CFTypeRef v4 = (void *)_CalStoreCopyUUID((uint64_t)Store);
  if (v4)
  {
    uint64_t v5 = _CalEventGetUniqueIdentifier(a1);
    CFTypeRef v6 = (void *)v5;
    if (v5) {
      CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%@%@%@", v4, *MEMORY[0x1E4F57918], v5);
    }
    else {
      CFStringRef v7 = 0;
    }
  }
  else
  {
    CFStringRef v7 = 0;
  }

  return v7;
}

CFTypeRef CalDatabaseCopyEventWithPublicID(os_unfair_lock_s *a1, CFStringRef theString)
{
  if (!theString || CFStringGetLength(theString) < 38) {
    return 0;
  }
  v12.CFIndex location = 0;
  v12.CFIndex length = 36;
  CFStringRef v4 = CFStringCreateWithSubstring(0, theString, v12);
  v13.CFIndex length = CFStringGetLength(theString) - 37;
  v13.CFIndex location = 37;
  CFStringRef v5 = CFStringCreateWithSubstring(0, theString, v13);
  CFStringRef v6 = v5;
  if (v4 && v5)
  {
    CFStringRef v7 = CalDatabaseCopyStoreWithUUID(a1, v4);
    if (v7)
    {
      BOOL v8 = v7;
      CFTypeRef v9 = CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(a1, 2, v6, 0, (uint64_t)v7);
      CFRelease(v8);
    }
    else
    {
      CFTypeRef v9 = 0;
    }
    goto LABEL_11;
  }
  CFTypeRef v9 = 0;
  CFTypeRef v10 = 0;
  if (v5)
  {
LABEL_11:
    CFRelease(v6);
    CFTypeRef v10 = v9;
  }
  if (v4) {
    CFRelease(v4);
  }
  return v10;
}

CFTypeRef CalDatabaseCopyEventWithUniqueIdentifierInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(a1, 2, a2, 0, a3);
}

CFTypeRef _CalEventGetStore(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  uint64_t Store = CPRecordGetStore();
  CFTypeRef result = (CFTypeRef)_CalGetCalendarWithUID(Store);
  if (result)
  {
    return _CalCalendarGetStore((uint64_t)result);
  }
  return result;
}

void _CalEventUpdateExternalIDWithOriginalEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef Store = _CalCalendarGetStore(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (!CPRecordGetProperty() && Store)
  {
    if (_CalStoreRequiresMSFormattedUIDKey((uint64_t)Store))
    {
      CFStringRef v7 = (const __CFString *)_EKCreateMSUIDStringForEvent(a1, a3);
    }
    else if (!a3 {
           || vabdd_f64(_CalRecordGetDateProperty(a1), *MEMORY[0x1E4F57888]) < 2.22044605e-16
    }
           || (uint64_t UniqueIdentifier = _CalEventGetUniqueIdentifier(a3)) == 0
           || (uint64_t v9 = UniqueIdentifier,
               Dateint Property = _CalRecordGetDateProperty(a1),
               (CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%@/RID=%llu", v9, (unint64_t)DateProperty)) == 0))
    {
      CFUUIDRef v11 = CFUUIDCreate(0);
      CFStringRef v7 = CFUUIDCreateString(0, v11);
      CFRelease(v11);
    }
    _CalRecordSetPropertyIfDifferent(a1, 26, v7);
    CFRelease(v7);
  }
}

uint64_t CalEventGetCalendarId(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t CalendarId = _CalEventGetCalendarId(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return CalendarId;
}

const void *CalDatabaseCopyCalendarItemWithRowID(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  CalendarItemWithRowuint64_t ID = (const void *)_CalGetCalendarItemWithRowID(RecordStore);
  CFStringRef v5 = CalendarItemWithRowID;
  if (CalendarItemWithRowID) {
    CFRetain(CalendarItemWithRowID);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalCalendarItemCopyUUID(uint64_t a1)
{
  if (!a1) {
    CalCalendarItemCopyUUID_cold_1();
  }
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t v3 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t CalCalendarItemGetEntityType(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Entityuint64_t Type = _CalCalendarItemGetEntityType(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return EntityType;
}

uint64_t _CalCalendarItemSetCalendar(uint64_t a1, const void *a2)
{
  uint64_t result = (uint64_t)_CalCalendarItemGetCalendar(a1);
  if ((const void *)result != a2)
  {
    uint64_t v5 = result;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    int Property = CPRecordGetProperty();
    if (v5 && !Property && (int)CPRecordGetID() >= 1)
    {
      int ID = CPRecordGetID();
      _CalRecordSetPropertyIfDifferent(a1, 91, (const __CFString *)ID);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    CFTypeRef v10 = (void *)CPRecordGetProperty();
    if (v10) {
      CalRelationSetRelatedObject(v10, a2);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFUUIDRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordUnloadProperty();
    if (a2)
    {
      Originaluint64_t Event = _CalEventGetOriginalEvent(a1);
      _CalEventUpdateExternalIDWithOriginalEvent(a1, (uint64_t)a2, (uint64_t)OriginalEvent);
      uint64_t result = CPRecordGetID();
      if (result == -1)
      {
        uint64_t Store = CPRecordGetStore();
        if (CDBLockingAssertionsEnabled)
        {
          if (Store)
          {
            CFArrayRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
        return CPRecordStoreAddRecord();
      }
    }
  }
  return result;
}

uint64_t _CalCalendarItemClearOldCalendarId(uint64_t a1)
{
  return _CalRecordSetPropertyIfDifferent(a1, 91, 0);
}

uint64_t _CalCalendarItemGetCalendarId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef CalDatabaseCopyEventWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(a1, 2, a2, 0, a3);
}

CFTypeRef CalDatabaseCopyEventWithExternalIDInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(a1, 2, a2, a3, 0);
}

void CalEventSetUniqueIdentifier(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 26, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyAllEventsWithUniqueIdentifierInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyAllCalendarItemsWithUniqueIdentifierInCalendarOrStore(a1, 2, a2, 0, a3);
}

uint64_t CalDatabaseCopyAllEventsWithUniqueIdentifierInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyAllCalendarItemsWithUniqueIdentifierInCalendarOrStore(a1, 2, a2, a3, 0);
}

CFTypeRef CalDatabaseCopyEventWithUniqueIdentifierInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(a1, 2, a2, a3, 0);
}

uint64_t CalDatabaseCopyExternalModificationTagsForEventsWithExternalIDsInStore(os_unfair_lock_s *cf, const __CFArray *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v5 = cf;
    if (!cf) {
      return 0;
    }
    CFRetain(cf);
  }
  CFStringRef v6 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v5);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  CFRange v12 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        CFRange v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    uint64_t v14 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    if (v14)
    {
      uint64_t v15 = v14;
      CFMutableDictionaryRef Mutable = CFStringCreateMutable(*v12, 0);
      CFStringAppend(Mutable, @"SELECT external_id, external_mod_tag FROM CalendarItem WHERE entity_type = 2 AND external_id IN (");
      if (Count >= 1)
      {
        for (uint64_t i = 0; i != Count; ++i)
        {
          if (i) {
            CFStringRef v18 = @", ?";
          }
          else {
            CFStringRef v18 = @"?";
          }
          CFStringAppend(Mutable, v18);
        }
      }
      if (a3) {
        CFStringRef v19 = @" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?);");
      }
      else {
        CFStringRef v19 = @";");
      }
      CFStringAppend(Mutable, v19);
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v15)
        {
          if (*(void *)(*(void *)v15 + 104))
          {
            uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20) {
              os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
      uint64_t v21 = CPSqliteConnectionStatementForSQL();
      if (v21)
      {
        BOOL v22 = (uint64_t **)v21;
        if (Count >= 1)
        {
          for (CFIndex j = 0; j != Count; sqlite3_bind_text((sqlite3_stmt *)v22[1], j, v27, -1, MEMORY[0x1E4F14838]))
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, j);
            CFIndex Length = CFStringGetLength(ValueAtIndex);
            size_t v26 = (int)(CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1);
            CFTypeRef v27 = (char *)malloc_type_malloc(v26, 0x9246266CuLL);
            CFStringGetCString(ValueAtIndex, v27, v26, 0x8000100u);
            ++j;
          }
        }
        if (a3)
        {
          BOOL v28 = (sqlite3_stmt *)v22[1];
          int ID = CPRecordGetID();
          sqlite3_bind_int(v28, Count + 1, ID);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v22)
          {
            uint64_t v30 = **v22;
            if (v30)
            {
              if (*(void *)(v30 + 104))
              {
                unsigned int v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v31) {
                  os_unfair_lock_assert_owner(v31 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        CFStringRef v6 = v5 + 20;
        if (CDBLockingAssertionsEnabled)
        {
          if (*v22)
          {
            uint64_t v32 = **v22;
            if (v32)
            {
              if (*(void *)(v32 + 104))
              {
                int v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v33) {
                  os_unfair_lock_assert_owner(v33 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return 0;
}

uint64_t _CalEventProcessExternalTagFromIDResults(uint64_t a1, __CFDictionary **a2)
{
  CFStringRef v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  uint64_t v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return 0;
  }
  CFStringRef v7 = (const char *)v5;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v4, 0x8000100u);
  CFStringRef v10 = CFStringCreateWithCString(v8, v7, 0x8000100u);
  CFStringRef v11 = v10;
  if (!a2 || (v9 ? (BOOL v12 = v10 == 0) : (BOOL v12 = 1), v12))
  {
    if (!v9) {
      goto LABEL_15;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = *a2;
    if (!*a2)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *a2 = Mutable;
    }
    CFDictionarySetValue(Mutable, v9, v11);
  }
  CFRelease(v9);
LABEL_15:
  if (v11) {
    CFRelease(v11);
  }
  return 0;
}

uint64_t CalDatabaseCopyOfAllEventsWithRespondedExternalStatusInStore(const void *a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    uint64_t v3 = (os_unfair_lock_s *)CFRetain(a1);
  }
  CFStringRef v4 = v3;
  CFStringRef SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    BOOL v6 = SelectPrefix;
    CFStringAppend(SelectPrefix, @" JOIN Participant ON self_attendee_id = Participant.rowid ");
    if (a2) {
      CFStringRef v7 = @" JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = ? AND ";
    }
    else {
      CFStringRef v7 = @" WHERE ";
    }
    CFStringAppend(v6, v7);
    CFStringAppend(v6, @"Participant.entity_type = ? AND Participant.pending_status IN (?, ?, ?)");
    os_unfair_lock_lock(v4 + 20);
    Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v4);
    if (RecordStore)
    {
      if (CDBLockingAssertionsEnabled)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (!Database) {
        goto LABEL_21;
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
      uint64_t v12 = CPSqliteDatabaseStatementForReading();
      if (v12)
      {
        uint64_t v13 = v12;
        if (a2)
        {
          uint64_t v14 = *(sqlite3_stmt **)(v12 + 8);
          int ID = CPRecordGetID();
          sqlite3_bind_int(v14, 1, ID);
          int v16 = 2;
        }
        else
        {
          int v16 = 1;
        }
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), v16, 7);
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), v16 + 1, 1);
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), v16 + 2, 3);
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), v16 + 3, 2);
        if (CDBLockingAssertionsEnabled)
        {
          CFStringRef v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17) {
            os_unfair_lock_assert_owner(v17 + 20);
          }
        }
        Recorduint64_t Store = CPRecordStoreProcessStatementWithPropertyIndices();
      }
      else
      {
LABEL_21:
        Recorduint64_t Store = 0;
      }
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v4 + 20);
    }
    os_unfair_lock_unlock(v4 + 20);
    CFRelease(v6);
  }
  else
  {
    Recorduint64_t Store = 0;
  }
  CFRelease(v4);
  return RecordStore;
}

uint64_t CalDatabaseCopyOfAllEventsWithRespondedExternalStatusAndCalendarUID(os_unfair_lock_s *a1, int a2)
{
  CFStringRef SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix) {
    return 0;
  }
  uint64_t v5 = SelectPrefix;
  CFStringAppend(SelectPrefix, @" JOIN Participant ON self_attendee_id = Participant.rowid WHERE Participant.entity_type = ? AND calendar_id = ? AND Participant.pending_status IN (?, ?, ?)");
  BOOL v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (!Database) {
      goto LABEL_17;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        CFStringRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    uint64_t v11 = CPSqliteDatabaseStatementForReading();
    if (v11)
    {
      uint64_t v12 = v11;
      sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 1, 7);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 2, a2);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 3, 1);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 4, 3);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 5, 2);
      if (CDBLockingAssertionsEnabled)
      {
        uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
      Recorduint64_t Store = CPRecordStoreProcessStatementWithPropertyIndices();
    }
    else
    {
LABEL_17:
      Recorduint64_t Store = 0;
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return RecordStore;
}

uint64_t CalDatabaseCopyOfAllEventsWithScheduleAgentClientAndCalendarUID(os_unfair_lock_s *a1, void *a2)
{
  CFStringRef SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix) {
    return 0;
  }
  uint64_t v5 = SelectPrefix;
  CFStringAppend(SelectPrefix, @" JOIN Participant ON organizer_id = Participant.rowid JOIN Calendar ON calendar_id = Calendar.rowid JOIN Store ON Calendar.store_id = Store.rowid WHERE (Participant.schedule_agent = ? OR Store.type = ?) AND Participant.is_self = 1");
  BOOL v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if (a2)
  {
    CFStringRef v7 = _CalFilterCopyCalendarIDClauseForQuery(a2, @"calendar_id");
    if (v7)
    {
      CFAllocatorRef v8 = v7;
      CFStringAppendFormat(v5, 0, @" AND %@", v7);
      CFRelease(v8);
    }
  }
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (!Database) {
      goto LABEL_20;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    uint64_t v13 = CPSqliteDatabaseStatementForReading();
    if (v13)
    {
      uint64_t v14 = v13;
      sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 1, 1);
      sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 2, 0);
      if (CDBLockingAssertionsEnabled)
      {
        uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
      Recorduint64_t Store = CPRecordStoreProcessStatementWithPropertyIndices();
    }
    else
    {
LABEL_20:
      Recorduint64_t Store = 0;
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return RecordStore;
}

uint64_t CalDatabaseCopyOfAllEventsWithExternalTrackingStatusInStore(const void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    CFStringRef v4 = CalEventCopyStoreUIDQuery();
    if (v4)
    {
      uint64_t v5 = v4;
      CFStringRef v6 = @" AND ";
      goto LABEL_6;
    }
LABEL_26:
    uint64_t v15 = 0;
    goto LABEL_27;
  }
  uint64_t v3 = (os_unfair_lock_s *)CFRetain(a1);
  uint64_t SelectPrefix = CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix) {
    goto LABEL_26;
  }
  uint64_t v5 = (__CFString *)SelectPrefix;
  CFStringRef v6 = @" WHERE ";
LABEL_6:
  CFStringAppend(v5, v6);
  CFStringAppend(v5, @"(external_tracking_status != 0)");
  os_unfair_lock_lock(v3 + 20);
  if (!_CalDatabaseGetRecordStore((uint64_t)v3)) {
    goto LABEL_22;
  }
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_22;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  uint64_t v11 = CPSqliteDatabaseStatementForReading();
  if (v11)
  {
    if (a2)
    {
      uint64_t v12 = *(sqlite3_stmt **)(v11 + 8);
      int ID = CPRecordGetID();
      sqlite3_bind_int(v12, 1, ID);
    }
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14) {
        os_unfair_lock_assert_owner(v14 + 20);
      }
    }
    uint64_t v15 = CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
LABEL_22:
    uint64_t v15 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3 + 20);
  }
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v5);
LABEL_27:
  CFRelease(v3);
  return v15;
}

__CFString *CalEventCopyStoreUIDQuery()
{
  uint64_t SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  CFStringRef v1 = SelectPrefix;
  if (SelectPrefix) {
    CFStringAppend(SelectPrefix, @" JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = ?");
  }
  return v1;
}

uint64_t CalDatabaseCopyOfAllEventsWithExternalTrackingStatusAndCalendarUID(os_unfair_lock_s *a1, int a2)
{
  uint64_t SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix) {
    return 0;
  }
  uint64_t v5 = SelectPrefix;
  CFStringAppend(SelectPrefix, @" WHERE calendar_id = ? AND external_tracking_status != 0;");
  CFStringRef v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if (!_CalDatabaseGetRecordStore((uint64_t)a1)) {
    goto LABEL_16;
  }
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_16;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  uint64_t v10 = CPSqliteDatabaseStatementForReading();
  if (v10)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 1, a2);
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
    uint64_t v12 = CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
LABEL_16:
    uint64_t v12 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return v12;
}

void CalEventSetAvailability(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 16, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetAvailability(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalEventSetPrivacyLevel(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 17, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetPrivacyLevel(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t PrivacyLevel = _CalEventGetPrivacyLevel(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return PrivacyLevel;
}

void CalEventSetExternalTrackingStatus(uint64_t a1, int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 23, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetExternalTrackingStatus(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef CalEventCopyTravelRoutingMode(uint64_t a1)
{
  CFTypeRef result = CalCalendarItemCopyStartLocation(a1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = CalLocationCopyRouting((uint64_t)result);
    CFRelease(v2);
    return (CFTypeRef)v3;
  }
  return result;
}

void CalEventSetLocation_Deprecated(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t DatabaseForRecord = (os_unfair_lock_s *)CalGetDatabaseForRecord();
    LocatioCFIndex n = CalDatabaseCreateLocation(DatabaseForRecord);
    if (Location)
    {
      uint64_t v5 = Location;
      CalLocationSetTitle((uint64_t)Location);
      CalCalendarItemSetLocation(a1, v5);
      CFRelease(v5);
    }
  }
  else
  {
    CalCalendarItemSetLocation(a1, 0);
  }
}

CFTypeRef CalEventCopyLocation_Deprecated(uint64_t a1)
{
  CFTypeRef result = CalCalendarItemCopyLocation(a1);
  if (result)
  {
    uint64_t v2 = result;
    CFTypeRef v3 = CalLocationCopyFullDisplayString((uint64_t)result);
    CFRelease(v2);
    return v3;
  }
  return result;
}

CFTypeRef CalEventPreferredLocationIsAConferenceRoom(uint64_t a1)
{
  CFTypeRef result = CalCalendarItemCopyPreferredLocation(a1);
  if (result)
  {
    CFTypeRef v3 = result;
    CFStringRef v4 = (const __CFString *)CalLocationCopyFullDisplayString((uint64_t)result);
    if (v4)
    {
      CFStringRef v5 = v4;
      if (CFStringGetLength(v4) >= 1 && (CFArrayRef v6 = CalCalendarItemCopyAttendees(a1)) != 0)
      {
        CFArrayRef v7 = v6;
        CFIndex Count = CFArrayGetCount(v6);
        if (Count < 1)
        {
LABEL_11:
          int v15 = 0;
        }
        else
        {
          CFIndex v9 = Count;
          CFIndex v10 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v10);
            if (CalAttendeeGetType((uint64_t)ValueAtIndex) == 2)
            {
              uint64_t v12 = (void *)CalParticipantCopyDisplayName((uint64_t)ValueAtIndex);
              if (v12)
              {
                uint64_t v13 = v12;
                char v14 = [v12 isEqualToString:v5];
                CFRelease(v13);
                if (v14) {
                  break;
                }
              }
            }
            if (v9 == ++v10) {
              goto LABEL_11;
            }
          }
          int v15 = 1;
        }
        CFRelease(v7);
      }
      else
      {
        int v15 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      int v15 = 0;
    }
    CFRelease(v3);
    return (CFTypeRef)(v15 != 0);
  }
  return result;
}

void _CalEventSetStartDate(uint64_t a1, uint64_t a2, const __CFString *cf1, int a4, int a5)
{
  CFStringRef v7 = cf1;
  double v26 = *(double *)&a2;
  CFStringRef v27 = cf1;
  double v9 = *(double *)&a2;
  if (cf1 && !CFEqual(cf1, @"_float"))
  {
    CFIndex v10 = (const void *)CalTimeZoneCopyCFTimeZone();
    if (v10)
    {
      CFRelease(v10);
    }
    else
    {
      CFLog();
      CFRelease(v7);
      CFStringRef v7 = (const __CFString *)CFRetain(@"_float");
      CFStringRef v27 = v7;
    }
  }
  if (vabdd_f64(_CalRecordGetDateProperty(a1), v9) >= 2.22044605e-16) {
    goto LABEL_36;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  if (!Property || CFStringCompare(Property, v7, 0))
  {
LABEL_36:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13) {
            os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
    uint64_t v14 = CPRecordGetProperty();
    uint64_t v15 = v14;
    if (a5 && v14)
    {
      _CalEventPinAllDayBoundaries(a1, &v26, 0);
      double v9 = v26;
    }
    CFDateRefFromCalCFDateRef Date = (const __CFString *)_CreateCFDateRefFromCalDate(v9);
    _CalRecordSetPropertyIfDifferent(a1, 4, CFDateRefFromCalDate);
    _CalRecordSetPropertyIfDifferent(a1, 5, v27);
    if (CFDateRefFromCalDate) {
      CFRelease(CFDateRefFromCalDate);
    }
    if (_CalCalendarItemHasAlarms(a1))
    {
      CPRecordGetStore();
      uint64_t v17 = CPRecordStoreGetContext();
      _CalDatabaseSetChangeFlags(v17, 8);
    }
    _CalCalendarItemInvalidateAllRecurrenceRuleCachedEndDates(a1);
    if (a4)
    {
      _CalCalendarItemRemoveAllExceptionDates(a1);
      if (!v15)
      {
        CFArrayRef v18 = _CalEventCopyDetachedEvents(a1);
        if (v18)
        {
          CFArrayRef v19 = v18;
          CFIndex Count = CFArrayGetCount(v18);
          if (Count >= 1)
          {
            CFIndex v21 = Count;
            _CalCalendarItemIsFloating(a1);
            BOOL v22 = (const void *)CalTimeZoneCopyCFTimeZone();
            CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
            for (CFIndex i = 0; i != v21; ++i)
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v19, i);
              _CalRecordGetDateProperty((uint64_t)ValueAtIndex);
              CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
              CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
              _CalEventSetOriginalStartDate((uint64_t)ValueAtIndex, v25);
            }
            CFRelease(v22);
          }
          CFRelease(v19);
        }
      }
    }
  }
}

void _CalEventPinAllDayBoundaries(uint64_t a1, void *a2, void *a3)
{
  CFArrayRef v6 = (const void *)CalTimeZoneCopyCFTimeZone();
  if (a2)
  {
    CFStringRef Property = (const __CFString *)a2[1];
    if (!Property) {
      goto LABEL_13;
    }
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CFStringRef Property = (const __CFString *)CPRecordGetProperty();
    if (!Property) {
      goto LABEL_13;
    }
  }
  if (CFStringCompare(@"_float", Property, 0))
  {
    double v9 = (const void *)CalTimeZoneCopyCFTimeZone();
    if (v9) {
      goto LABEL_14;
    }
    CFLog();
  }
LABEL_13:
  double v9 = CFRetain(v6);
LABEL_14:
  if (a2)
  {
    CalDateTimeGetGregorianDate();
    CalGregorianDateGetGregorianDateForDay();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    *a2 = v10;
    a2[1] = @"_float";
  }
  if (a3)
  {
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    *a3 = v11;
  }
  if (v9) {
    CFRelease(v9);
  }
  CFRelease(v6);
}

void CalEventSetStartDate(uint64_t a1, uint64_t a2, const __CFString *a3)
{
}

void CalEventSetStartDate_Internal(uint64_t a1, uint64_t a2, const __CFString *a3, int a4)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetStartDate(a1, a2, a3, a4, 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalEventSetStartDateDirectly(uint64_t a1, uint64_t a2, const __CFString *a3)
{
}

uint64_t CalEventCopyStartTimeZone(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t started = _CalCalendarItemCopyStartTimeZone(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return started;
}

double CalEventGetStartDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateCFStringRef Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

CFStringRef CalDatabaseCopyEventWithSummaryAndStartDateInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, double a4)
{
  return CalDatabaseCopyEventWithSummaryAndStartDateInCalendarOrStore(a1, a2, 0, a3, a4);
}

CFStringRef CalDatabaseCopyEventWithSummaryAndStartDateInCalendarOrStore(os_unfair_lock_s *cf, const __CFString *ValueAtIndex, uint64_t a3, uint64_t a4, double a5)
{
  double v9 = cf;
  if (!a3 && !a4)
  {
    if (!cf) {
      return 0;
    }
    CFRetain(cf);
    if (ValueAtIndex) {
      goto LABEL_5;
    }
LABEL_50:
    CFRelease(v9);
    return ValueAtIndex;
  }
  double v9 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v9) {
    return 0;
  }
  if (!ValueAtIndex) {
    goto LABEL_50;
  }
LABEL_5:
  CStringFromCFString = (char *)CalCreateCStringFromCFString(ValueAtIndex);
  uint64_t SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    uint64_t v12 = SelectPrefix;
    CFStringAppend(SelectPrefix, @" WHERE summary = ? AND start_date = ?");
    if (a3)
    {
      CFStringRef v13 = @" AND calendar_id = ?";
    }
    else
    {
      if (!a4) {
        goto LABEL_18;
      }
      CFStringRef v13 = @" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)";
    }
    CFStringAppend(v12, v13);
LABEL_18:
    os_unfair_lock_lock(v9 + 20);
    Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v9);
    uint64_t v15 = RecordStore;
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
    {
      if (Database)
      {
        if (*(void *)(Database + 104))
        {
          CFArrayRef v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18) {
            os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
    uint64_t v19 = CPSqliteDatabaseStatementForReading();
    if (v19)
    {
      uint64_t v20 = v19;
      CFIndex v21 = *(sqlite3_stmt **)(v19 + 8);
      if (CStringFromCFString) {
        sqlite3_bind_text(v21, 1, CStringFromCFString, -1, 0);
      }
      else {
        sqlite3_bind_null(v21, 1);
      }
      sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 2, (int)a5);
      if (a3 || a4)
      {
        CFRange v23 = *(sqlite3_stmt **)(v20 + 8);
        int ID = CPRecordGetID();
        sqlite3_bind_int(v23, 3, ID);
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (v15)
        {
          CFAbsoluteTime v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v25) {
            os_unfair_lock_assert_owner(v25 + 20);
          }
        }
      }
      CFArrayRef v22 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
    }
    else
    {
      CFArrayRef v22 = 0;
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v9 + 20);
    }
    os_unfair_lock_unlock(v9 + 20);
    CFRelease(v12);
    if (CStringFromCFString) {
      free(CStringFromCFString);
    }
    if (v22)
    {
      if (CFArrayGetCount(v22) < 1)
      {
        CFStringRef ValueAtIndex = 0;
      }
      else
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v22, 0);
        CFRetain(ValueAtIndex);
      }
      CFRelease(v22);
    }
    else
    {
      CFStringRef ValueAtIndex = 0;
    }
    goto LABEL_50;
  }
  if (CStringFromCFString) {
    free(CStringFromCFString);
  }
  CFRelease(v9);
  return 0;
}

CFStringRef CalDatabaseCopyEventWithSummaryAndStartDateInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, double a4)
{
  return CalDatabaseCopyEventWithSummaryAndStartDateInCalendarOrStore(a1, a2, a3, 0, a4);
}

void CalDatabaseCopyEventIDsThatMatchLocationOrSummary(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, pthread_cond_t *a4, pthread_mutex_t *a5, __CFArray *a6, unsigned char *a7, unsigned char *a8)
{
  CFRetain(a1);
  if (a1)
  {
    if (a2)
    {
      unsigned int v31 = a7;
      CFStringRef v16 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT rowid FROM CalendarItem WHERE location LIKE '%%%@%%' or summary LIKE '%%%@%%';",
              a2,
              a3);
      os_unfair_lock_lock(a1 + 20);
      Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
      if (CDBLockingAssertionsEnabled) {
        BOOL v18 = RecordStore == 0;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled) {
        BOOL v21 = Database == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21)
      {
        if (*(void *)(Database + 104))
        {
          CFArrayRef v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v22) {
            os_unfair_lock_assert_owner(v22 + 20);
          }
        }
      }
      uint64_t v23 = CPSqliteDatabaseStatementForReading();
      if (v23)
      {
        CFArrayRef v24 = (sqlite3_stmt **)v23;
        CFStringRef v30 = v16;
        pthread_mutex_lock(a5);
        int v25 = 0;
        while (1)
        {
          int v26 = sqlite3_step(v24[1]);
          if (v26 == 100)
          {
            int v27 = sqlite3_column_int(v24[1], 0);
            if (!v25 && CFArrayGetCount(a6)) {
              CFArrayRemoveAllValues(a6);
            }
            CFArrayAppendValue(a6, (const void *)v27);
            ++v25;
          }
          if (v26 == 101 || v25 == 100)
          {
            pthread_cond_signal(a4);
            pthread_mutex_unlock(a5);
            pthread_mutex_lock(a5);
            int v25 = 0;
          }
          if (v26 != 100) {
            break;
          }
          if (*a8) {
            goto LABEL_32;
          }
        }
        if ((v26 - 102) > 0xFFFFFFFD || (sqlite3_errmsg(*((sqlite3 **)*v24 + 1)), CFLog(), *a8))
        {
LABEL_32:
          unsigned char *v31 = 0;
          pthread_cond_signal(a4);
          pthread_mutex_unlock(a5);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v24)
          {
            uint64_t v28 = *(void *)*v24;
            if (v28)
            {
              if (*(void *)(v28 + 104))
              {
                uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v29) {
                  os_unfair_lock_assert_owner(v29 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
        CFStringRef v16 = v30;
      }
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(a1 + 20);
      }
      os_unfair_lock_unlock(a1 + 20);
      if (v16) {
        CFRelease(v16);
      }
    }
    CFRelease(a1);
  }
}

CFTypeRef CalDatabaseCopyFirstNaturalLanguageSuggestedEventMatchingSummary(os_unfair_lock_s *a1, CFStringRef theString)
{
  if (theString) {
    BOOL v4 = CFStringGetLength(theString) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  CFArrayRef v5 = (const __CFArray *)CalDatabaseCopyNaturalLanguageSuggestedEventsMatchingSummary(a1, theString, 0);
  if (!v5) {
    return 0;
  }
  CFArrayRef v6 = v5;
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    CFRelease(v6);
    return 0;
  }
  CFIndex v8 = Count;
  double v9 = 0;
  for (CFIndex i = 0; i != v8; ++i)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
    uint64_t v12 = (uint64_t)ValueAtIndex;
    if (v4)
    {
      uint64_t v13 = CalEventGetNaturalLanguageSuggestedEventExpirationDate((uint64_t)ValueAtIndex);
      if (!v13) {
        continue;
      }
      uint64_t v14 = (void *)v13;
      uint64_t v15 = objc_opt_new();
      char v16 = [v14 CalIsBeforeOrSameAsDate:v15];

      if (v16) {
        continue;
      }
    }
    if (!v9 || compareNaturalLanguageEvents(v12, (uint64_t)v9) == -1) {
      double v9 = (const void *)v12;
    }
  }
  CFRelease(v6);
  if (!v9) {
    return 0;
  }
  return CFRetain(v9);
}

uint64_t CalDatabaseCopyNaturalLanguageSuggestedEventsMatchingSummary(os_unfair_lock_s *a1, CFStringRef theString, char a3)
{
  if (theString) {
    BOOL v6 = CFStringGetLength(theString) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  CFStringRef v7 = CalDatabaseCopyNaturalLanguageSuggestionsCalendar(a1);
  if (!v7) {
    return 0;
  }
  CFIndex v8 = v7;
  Uint ID = CalCalendarGetUID();
  CFRelease(v8);
  uint64_t SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  CFStringAppend(SelectPrefix, @" WHERE calendar_id = ?");
  if ((a3 & 1) == 0) {
    CFStringAppend(SelectPrefix, @" AND start_date > ? AND suggested_event_info_id > 0");
  }
  if (v6 || (CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"%%%@%%", theString)) == 0)
  {
    CStringFromCFString = 0;
  }
  else
  {
    CFStringRef v12 = v11;
    CStringFromCFString = (char *)CalCreateCStringFromCFString(v11);
    CFStringAppend(SelectPrefix, @" AND summary LIKE ?");
    CFRelease(v12);
  }
  uint64_t v14 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v16 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  uint64_t v20 = CPSqliteDatabaseStatementForReading();
  if (v20)
  {
    uint64_t v21 = v20;
    sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 1, UID);
    if (a3)
    {
      int v22 = 2;
      if (!CStringFromCFString)
      {
LABEL_28:
        if (CDBLockingAssertionsEnabled)
        {
          if (v16)
          {
            int v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v27) {
              os_unfair_lock_assert_owner(v27 + 20);
            }
          }
        }
        uint64_t v23 = CPRecordStoreProcessStatementWithPropertyIndices();
        goto LABEL_33;
      }
    }
    else
    {
      CFArrayRef v24 = *(sqlite3_stmt **)(v21 + 8);
      int v25 = objc_opt_new();
      [v25 timeIntervalSinceReferenceDate];
      sqlite3_bind_int64(v24, 2, (uint64_t)v26);

      int v22 = 3;
      if (!CStringFromCFString) {
        goto LABEL_28;
      }
    }
    sqlite3_bind_text(*(sqlite3_stmt **)(v21 + 8), v22, CStringFromCFString, -1, 0);
    goto LABEL_28;
  }
  uint64_t v23 = 0;
LABEL_33:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v14);
  }
  os_unfair_lock_unlock(v14);
  CFRelease(SelectPrefix);
  if (CStringFromCFString) {
    free(CStringFromCFString);
  }
  return v23;
}

id CalEventGetNaturalLanguageSuggestedEventExpirationDate(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  CFStringRef v1 = (void *)CalCalendarItemCopyLocalStructuredData(a1);
  id v7 = 0;
  uint64_t v2 = [MEMORY[0x1E4F577D8] unarchiveDictionaryFromData:v1 error:&v7];
  id v3 = v7;
  if (v3)
  {
    BOOL v4 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v9 = v3;
      _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_ERROR, "Error unarchiving local structured data. Error: %@", buf, 0xCu);
    }
  }
  CFArrayRef v5 = [v2 objectForKey:@"EKEventNaturalLanguageSuggestedEventExpirationDate"];

  return v5;
}

uint64_t compareNaturalLanguageEvents(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = CalEventCopySuggestedEventInfo(a1);
  CFTypeRef v5 = CalEventCopySuggestedEventInfo(a2);
  BOOL v6 = v5;
  if (v4 && !v5)
  {
    uint64_t v7 = -1;
LABEL_22:
    CFRelease(v4);
    goto LABEL_23;
  }
  if (!v4 && v5)
  {
    uint64_t v7 = 1;
LABEL_24:
    CFRelease(v6);
    return v7;
  }
  uint64_t v8 = CalEventGetNaturalLanguageSuggestedEventExpirationDate(a1);
  uint64_t v9 = CalEventGetNaturalLanguageSuggestedEventExpirationDate(a2);
  uint64_t v10 = (void *)v9;
  if (v8 && v9)
  {
    uint64_t v7 = [(id)v9 compare:v8];
  }
  else
  {
    if (v8) {
      uint64_t v7 = -1;
    }
    else {
      uint64_t v7 = 1;
    }
    if (!(v8 | v9))
    {
      CFStringRef v11 = (void *)CalCalendarItemCopyCreationDate(a1);
      CFStringRef v12 = (void *)CalCalendarItemCopyCreationDate(a2);
      uint64_t v13 = v12;
      if (v11 && v12)
      {
        uint64_t v7 = [v12 compare:v11];
      }
      else if (v11)
      {
        uint64_t v7 = -1;
      }
      else
      {
        uint64_t v7 = v12 != 0;
      }
    }
  }

  if (v4) {
    goto LABEL_22;
  }
LABEL_23:
  if (v6) {
    goto LABEL_24;
  }
  return v7;
}

CFMutableArrayRef CalDatabaseCopyAllNaturalLanguageSuggestedEventsMatchingSummary(os_unfair_lock_s *a1, const __CFString *a2)
{
  CFArrayRef v2 = (const __CFArray *)CalDatabaseCopyNaturalLanguageSuggestedEventsMatchingSummary(a1, a2, 1);
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, Count, v3);
    CFRelease(v3);
    v9.CFIndex length = CFArrayGetCount(MutableCopy);
    v9.CFIndex location = 0;
    CFArraySortValues(MutableCopy, v9, (CFComparatorFunction)compareNaturalLanguageEvents, 0);
    return MutableCopy;
  }
  else
  {
    uint64_t v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreateMutable(0, 0, v7);
  }
}

void _CalEventSetEndDate(uint64_t a1, int a2, double a3)
{
  double v4 = a3;
  double v11 = a3;
  DateCFStringRef Property = _CalRecordGetDateProperty(a1);
  BOOL v8 = fabs(DateProperty) < 2.22044605e-16;
  double v7 = vabdd_f64(v4, DateProperty);
  BOOL v8 = !v8 && v7 < 2.22044605e-16;
  if (!v8)
  {
    if (a2)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      if (CPRecordGetProperty())
      {
        _CalEventPinAllDayBoundaries(a1, 0, &v11);
        double v4 = v11;
      }
    }
    CFDateRefFromCalCFDateRef Date = (const __CFString *)_CreateCFDateRefFromCalDate(v4);
    _CalRecordSetPropertyIfDifferent(a1, 6, CFDateRefFromCalDate);
    if (CFDateRefFromCalDate) {
      CFRelease(CFDateRefFromCalDate);
    }
  }
}

void CalEventSetEndDate(uint64_t a1, double a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetEndDate(a1, 1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double _CalEventGetEndDateWhileLocked(uint64_t a1, int a2)
{
  if (a2)
  {
    return _CalRecordGetDateProperty(a1);
  }
  else
  {
    RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
    DateCFStringRef Property = _CalRecordGetDateProperty(a1);
    if (RecordLock)
    {
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(RecordLock);
      }
      os_unfair_lock_unlock(RecordLock);
    }
    return DateProperty;
  }
}

double CalEventGetEndDate(uint64_t a1)
{
  return _CalEventGetEndDateWhileLocked(a1, 0);
}

void _CalEventGetDurationUnitsWhileLocked(uint64_t a1@<X0>, const __CFTimeZone *a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  *a4 = 0u;
  a4[1] = 0u;
  if (a3)
  {
    RecordLocCFIndex k = 0;
  }
  else
  {
    RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
  }
  DateCFStringRef Property = _CalRecordGetDateProperty(a1);
  double v10 = _CalRecordGetDateProperty(a1);
  CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v12, v10, DateProperty, a2, 0xFFFFFFuLL);
  long long v11 = *(_OWORD *)&v12.minutes;
  *a4 = *(_OWORD *)&v12.years;
  a4[1] = v11;
  if ((a3 & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(RecordLock);
    }
    os_unfair_lock_unlock(RecordLock);
  }
}

void CalEventGetDurationUnits(uint64_t a1@<X0>, const __CFTimeZone *a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t _CalEventGetDurationWhileLocked(uint64_t a1, char a2)
{
  if (a2)
  {
    RecordLocCFIndex k = 0;
  }
  else
  {
    RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
  }
  DateCFStringRef Property = _CalRecordGetDateProperty(a1);
  double v6 = _CalRecordGetDateProperty(a1);
  if ((a2 & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(RecordLock);
    }
    os_unfair_lock_unlock(RecordLock);
  }
  if (DateProperty <= v6) {
    return 0;
  }
  else {
    return (DateProperty - v6);
  }
}

uint64_t _CalEventGetDuration(uint64_t a1)
{
  DateCFStringRef Property = _CalRecordGetDateProperty(a1);
  double v3 = _CalRecordGetDateProperty(a1);
  if (DateProperty <= v3) {
    return 0;
  }
  else {
    return (DateProperty - v3);
  }
}

uint64_t CalEventGetDuration(uint64_t a1)
{
  return _CalEventGetDurationWhileLocked(a1, 0);
}

void CalEventSetAllDay(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 8, (const __CFString *)a2);
  if (a2)
  {
    StartCFDateRef Date = _CalEventGetStartDate(a1);
    CFStringRef v8 = v5;
    if (v5)
    {
      DateCFStringRef Property = _CalRecordGetDateProperty(a1);
      _CalEventPinAllDayBoundaries(a1, &StartDate, &DateProperty);
      _CalEventSetStartDate(a1, StartDate, v8, 0, 0);
      _CalEventSetEndDate(a1, 0, DateProperty);
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventIsAllDay(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsAllDay = _CalEventIsAllDay(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsAllDay;
}

uint64_t _CalEventGetDefaultAlarmOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL IsAllDay = _CalCalendarItemIsAllDay(a1);
  CFTypeRef Store = _CalEventGetStore(a1);
  if (IsAllDay) {
    CFStringRef v8 = (void *)_CalStoreCopyDefaultAllDayAlarmOffset((uint64_t)Store);
  }
  else {
    CFStringRef v8 = (void *)_CalStoreCopyDefaultAlarmOffset((uint64_t)Store);
  }
  CFRange v9 = v8;
  if (v8)
  {
    a3 = [v8 integerValue];
  }
  else if (!IsAllDay)
  {
    a3 = a2;
  }

  return a3;
}

uint64_t CalEventCanAddRecurrence(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if ((int)CPRecordGetProperty() >= 1
    && (_CalCalendarItemGetStoreId(a1), uint64_t Store = CPRecordGetStore(), _CalGetStoreWithUID(Store)))
  {
    uint64_t v5 = _CalStoreSupportsRecurrencesOnDetachedEvents();
  }
  else
  {
    uint64_t v5 = 1;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalEventAddEventAction(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalToManyRelationAddObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void *_CalEventRemoveEventAction(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

void CalEventRemoveEventAction(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventRemoveEventAction(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalEventCopyEventActions(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalEventCopyEventActions(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFMutableArrayRef _CalEventCopyEventActions(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

BOOL CalEventIsInvite(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsInvite = _CalCalendarItemIsInvite(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsInvite;
}

BOOL CalEventHasActionWithExternalAndFolderID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  double v4 = (const void *)CPRecordCopyProperty();
  if (v4) {
    CFArrayRef v5 = 0;
  }
  else {
    CFArrayRef v5 = _CalEventCopyEventActions(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  if (v4)
  {
    BOOL v6 = 1;
LABEL_24:
    CFRelease(v4);
    return v6;
  }
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    if (Count < 1)
    {
      BOOL v6 = 0;
    }
    else
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      BOOL v6 = 1;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v5, v9);
        long long v11 = (const void *)CalEventActionCopyExternalID((uint64_t)ValueAtIndex);
        if (v11)
        {
          CFRelease(v11);
          CFGregorianUnits v12 = (const void *)CalEventActionCopyExternalFolderID((uint64_t)ValueAtIndex);
          if (v12) {
            break;
          }
        }
        BOOL v6 = ++v9 < v8;
        if (v8 == v9) {
          goto LABEL_23;
        }
      }
      CFRelease(v12);
    }
LABEL_23:
    double v4 = v5;
    goto LABEL_24;
  }
  return 0;
}

BOOL CalEventAttendeeIsSelf(uint64_t a1, CFTypeRef a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef SelfAttendee = _CalCalendarItemGetSelfAttendee(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return SelfAttendee == a2;
}

void CalEventSetParticipationStatusModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 54, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalEventSetParticipationStatusModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
}

double CalEventGetParticipationStatusModifiedDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateCFStringRef Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

double _CalEventGetParticipationStatusModifiedDate(uint64_t a1)
{
  return _CalRecordGetDateProperty(a1);
}

BOOL CalEventSetParticipationStatus(const void *a1, int a2)
{
  if ((a2 - 1) <= 1 && (CFTypeRef v4 = CalEventCopyStore((uint64_t)a1)) != 0)
  {
    CFArrayRef v5 = v4;
    BOOL v6 = CalCalendarItemGetAvailabilitySupportedByStore((uint64_t)v4) != 0;
    CFRelease(v5);
  }
  else
  {
    BOOL v6 = 0;
  }
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef SelfAttendee = _CalCalendarItemGetSelfAttendee((uint64_t)a1);
  CFTypeRef v9 = SelfAttendee;
  if (SelfAttendee)
  {
    _CalAttendeeSetStatus(SelfAttendee, a2);
    _CalEventMarkPropertyModified((uint64_t)a1);
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(a1);
    if (v6 && (_CalCalendarGetInvitationStatus((uint64_t)a1) & 0x10) == 0)
    {
      BOOL IsAllDay = _CalEventIsAllDay((uint64_t)a1);
      if (a1) {
        BOOL v11 = CDBLockingAssertionsEnabled == 0;
      }
      else {
        BOOL v11 = 1;
      }
      int v12 = !v11;
      if (IsAllDay || a2 == 2)
      {
        if (v12)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      else if (v12)
      {
        if (CPRecordGetStore())
        {
          uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
      CPRecordSetProperty();
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v9 != 0;
}

uint64_t CalEventGetPendingParticipationStatus(uint64_t a1)
{
  CFTypeRef v1 = CalCalendarItemCopySelfAttendee(a1);
  if (!v1) {
    return 7;
  }
  CFArrayRef v2 = v1;
  Pendingunsigned int Status = CalAttendeeGetPendingStatus((uint64_t)v1);
  CFRelease(v2);
  return PendingStatus;
}

unint64_t CalEventIsOrganizedExternally(uint64_t a1)
{
  unint64_t result = CalCalendarItemHasAttendees(a1, 1);
  if (result)
  {
    unint64_t result = (unint64_t)CalCalendarItemCopyOrganizer(a1);
    if (result)
    {
      CFMutableArrayRef v3 = (const void *)result;
      BOOL IsSelf = CalOrganizerIsSelf((const void *)result);
      CFRelease(v3);
      return !IsSelf;
    }
  }
  return result;
}

uint64_t CalEventIsOnCalendarThatAllowsScheduling(uint64_t a1)
{
  CFTypeRef v1 = CalCalendarItemCopyCalendar(a1);
  if (!v1) {
    return 1;
  }
  CFArrayRef v2 = v1;
  BOOL v3 = !CalCalendarIsSchedulingProhibited((uint64_t)v1) && !CalCalendarIsReadOnly((uint64_t)v2);
  CFRelease(v2);
  return v3;
}

uint64_t CalEventNeedsResponse(uint64_t a1)
{
  uint64_t result = CalEventIsOrganizedExternally(a1);
  if (result)
  {
    uint64_t result = CalEventIsOnCalendarThatAllowsScheduling(a1);
    if (result)
    {
      if (CalCalendarItemGetStatus(a1) == 3) {
        return 0;
      }
      uint64_t result = (uint64_t)CalCalendarItemCopyOrganizer(a1);
      if (!result) {
        return result;
      }
      BOOL v3 = (const void *)result;
      int ScheduleAgent = CalParticipantGetScheduleAgent(result);
      CFRelease(v3);
      if (ScheduleAgent == 1)
      {
        return 0;
      }
      else
      {
        uint64_t result = (uint64_t)CalCalendarItemCopySelfAttendee(a1);
        if (result)
        {
          CFArrayRef v5 = (const void *)result;
          int Status = CalAttendeeGetStatus(result);
          CFRelease(v5);
          return Status == 7 || Status == 0;
        }
      }
    }
  }
  return result;
}

BOOL CalEventHasOccurrenceInTheFuture(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef v2 = CalCalendarItemCopyRecurrences(a1);
  if ([(__CFArray *)v2 count])
  {
    BOOL v3 = [MEMORY[0x1E4F1C9C8] CalDateForNow];
    [v3 timeIntervalSinceReferenceDate];
    double v5 = v4;

    unsigned int DurationWhileLocked = _CalEventGetDurationWhileLocked(a1, 0);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    double v7 = v2;
    uint64_t v8 = [(__CFArray *)v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
    BOOL v9 = v8 != 0;
    if (v8)
    {
      uint64_t v10 = v8;
      char v11 = 0;
      double v12 = (double)DurationWhileLocked;
      uint64_t v13 = *(void *)v27;
      double v14 = *MEMORY[0x1E4F57888];
LABEL_4:
      uint64_t v15 = 0;
      while (1)
      {
        if (*(void *)v27 != v13) {
          objc_enumerationMutation(v7);
        }
        EffectiveEndCFDateRef Date = CalRecurrenceGetEffectiveEndDate(*(void *)(*((void *)&v26 + 1) + 8 * v15));
        if (vabdd_f64(EffectiveEndDate, v14) < 2.22044605e-16) {
          break;
        }
        v11 |= EffectiveEndDate + v12 > v5;
        if (v10 == ++v15)
        {
          uint64_t v10 = [(__CFArray *)v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
          if (v10) {
            goto LABEL_4;
          }

          if (v11)
          {
            CFTimeZoneRef v17 = (const __CFTimeZone *)CalCopyDefaultTimeZone();
            GregorianCFDateRef Date = CFAbsoluteTimeGetGregorianDate(v5, v17);
            CFGregorianDate v19 = CFAbsoluteTimeGetGregorianDate(*MEMORY[0x1E4F57878], v17);
            BOOL v9 = CalEventOccurrencesExistForEventInDateRange(a1, *(uint64_t *)&GregorianDate.year, *(uint64_t *)&GregorianDate.second, *(uint64_t *)&v19.year, *(uint64_t *)&v19.second, 0, v17) != 0;
            if (v17) {
              CFRelease(v17);
            }
          }
          else
          {
            BOOL v9 = 0;
          }
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    double EndDateWhileLocked = _CalEventGetEndDateWhileLocked(a1, 0);
    uint64_t v21 = [MEMORY[0x1E4F1C9C8] CalDateForNow];
    int v22 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:EndDateWhileLocked];
    [v22 timeIntervalSinceDate:v21];
    double v24 = v23;

    BOOL v9 = v24 >= 0.0;
  }
LABEL_15:

  return v9;
}

uint64_t CalEventIsSignificantlyDetached(uint64_t a1)
{
  return CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(a1, 0);
}

uint64_t CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(uint64_t a1, char a2)
{
  CFTypeRef v4 = CalEventCopyOriginalEvent(a1);
  double v5 = (void *)v4;
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_5;
  }
  if (CalCalendarItemIsPhantomMaster((uint64_t)v4))
  {
    uint64_t v6 = 1;
    goto LABEL_5;
  }
  OriginalStartCFDateRef Date = CalEventGetOriginalStartDate(a1);
  StartCFDateRef Date = CalEventGetStartDate(a1);
  int DurationWhileLocked = _CalEventGetDurationWhileLocked(a1, 0);
  int v11 = _CalEventGetDurationWhileLocked((uint64_t)v5, 0);
  uint64_t v6 = 1;
  if (StartDate == OriginalStartDate && DurationWhileLocked == v11)
  {
    int Status = CalCalendarItemGetStatus(a1);
    if (Status == CalCalendarItemGetStatus((uint64_t)v5))
    {
      CFTypeRef v13 = CalCalendarItemCopyPreferredLocation(a1);
      if (v13)
      {
        double v14 = v13;
        uint64_t v15 = (void *)CalLocationCopyTitle((uint64_t)v13);
        uint64_t v16 = (void *)CalLocationCopyAddress((uint64_t)v14);
        CFRelease(v14);
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v15 = 0;
      }
      CFTypeRef v17 = CalCalendarItemCopyPreferredLocation((uint64_t)v5);
      if (v17)
      {
        BOOL v18 = v17;
        CFGregorianDate v19 = (void *)CalLocationCopyTitle((uint64_t)v17);
        uint64_t v20 = (void *)CalLocationCopyAddress((uint64_t)v18);
        CFRelease(v18);
      }
      else
      {
        CFGregorianDate v19 = 0;
        uint64_t v20 = 0;
      }
      if (!CalEqualStrings() || !CalEqualStrings()) {
        goto LABEL_40;
      }
      uint64_t v21 = (void *)CalCalendarItemCopySummary(a1);
      CFStringRef v42 = (void *)CalCalendarItemCopySummary((uint64_t)v5);
      if (!CalEqualStrings()) {
        goto LABEL_39;
      }
      if ((a2 & 1) == 0 && CalEventIsOrganizedExternally(a1))
      {
        CFTypeRef v22 = CalCalendarItemCopySelfAttendee(a1);
        CFTypeRef v23 = CalCalendarItemCopySelfAttendee((uint64_t)v5);
        if (v22)
        {
          int v24 = CalAttendeeGetStatus((uint64_t)v22);
          CFRelease(v22);
        }
        else
        {
          int v24 = 7;
        }
        if (v23)
        {
          int v25 = CalAttendeeGetStatus((uint64_t)v23);
          CFRelease(v23);
        }
        else
        {
          int v25 = 7;
        }
        if (v24 != v25)
        {
          BOOL NeedsResponse = CalAttendeeStatusGetNeedsResponse(v24);
          BOOL v27 = CalAttendeeStatusGetNeedsResponse(v25);
          uint64_t v6 = 1;
          if (!NeedsResponse || !v27)
          {
LABEL_39:

LABEL_40:
            goto LABEL_5;
          }
        }
      }
      CFTypeRef v28 = CalCalendarItemCopyOrganizer(a1);
      long long v29 = (void *)v28;
      if (v28)
      {
        CFStringRef v30 = (void *)CalAttendeeCopyAddress(v28);
        CFIndex v41 = [v30 absoluteString];
        CFIndex v40 = (void *)CalAttendeeCopyEmailAddress(v29);
        CFIndex v39 = (void *)CalAttendeeCopyPhoneNumber(v29);
        CFRelease(v29);

        CFTypeRef v31 = CalCalendarItemCopyOrganizer((uint64_t)v5);
        if (!v31)
        {
          long long v29 = 0;
          int v33 = 0;
          CFArrayRef v37 = 0;
LABEL_35:
          int v34 = v37;
          if (!doURLsEmailsPhoneNumbersMatch())
          {
            uint64_t v6 = 1;
            goto LABEL_38;
          }
LABEL_36:
          uint64_t v6 = 0;
LABEL_38:

          goto LABEL_39;
        }
        CFTypeRef v32 = v31;
      }
      else
      {
        CFTypeRef v32 = CalCalendarItemCopyOrganizer((uint64_t)v5);
        CFIndex v39 = 0;
        CFIndex v40 = 0;
        CFIndex v41 = 0;
        int v33 = 0;
        int v34 = 0;
        if (!v32) {
          goto LABEL_36;
        }
      }
      CFArrayRef v38 = v21;
      int v35 = (void *)CalAttendeeCopyAddress(v32);
      uint64_t v36 = [v35 absoluteString];
      int v33 = (void *)CalAttendeeCopyEmailAddress(v32);
      long long v29 = (void *)CalAttendeeCopyPhoneNumber(v32);
      CFRelease(v32);

      CFArrayRef v37 = (void *)v36;
      uint64_t v21 = v38;
      goto LABEL_35;
    }
  }
LABEL_5:

  return v6;
}

uint64_t CalEventIsSignificantlyDetachedIgnoringParticipation(uint64_t a1)
{
  return CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(a1, 1);
}

void CalEventNotifyInvitationIfNeededWithOptions(uint64_t a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFTypeRef v4 = CalEventCopyOriginalEvent(a1);
  double v5 = v4;
  if (v4)
  {
    ShouldDisplayNotificatioCFIndex n = CalEventShouldDisplayNotification((uint64_t)v4);
    CFRelease(v5);
    int v7 = !ShouldDisplayNotification;
  }
  else
  {
    int v7 = 1;
  }
  int v8 = CalEventNeedsResponse(a1);
  BOOL HasOccurrenceInTheFuture = CalEventHasOccurrenceInTheFuture(a1);
  if (v5) {
    int IsSignificantlyDetachedOptionallyIgnoringPartStat = CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(a1, 0);
  }
  else {
    int IsSignificantlyDetachedOptionallyIgnoringPartStat = 1;
  }
  BOOL v11 = CalEventShouldDisplayNotification(a1);
  int v12 = v8 & HasOccurrenceInTheFuture & IsSignificantlyDetachedOptionallyIgnoringPartStat ^ 1 | v11;
  if ((v12 & 1) == 0)
  {
    CFTypeRef v17 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = v17;
      *(_DWORD *)long long buf = 67109120;
      Rowint ID = CalCalendarItemGetRowID();
      uint64_t v16 = "Marking event with UID %d as needing a notification because the self attendee needs a response";
      goto LABEL_16;
    }
LABEL_17:
    CalEventSetNeedsNotification(a1, v12 ^ 1);
    goto LABEL_18;
  }
  int v13 = !v11;
  if (((!v11 | v8) & 1) == 0 && !CalEventGetInvitationChangedProperties(a1))
  {
    CFTypeRef v23 = (void *)CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    uint64_t v15 = v23;
    *(_DWORD *)long long buf = 67109120;
    Rowint ID = CalCalendarItemGetRowID();
    uint64_t v16 = "Marking event with UID %d as no longer needing a notification because it is in the inbox, does not need a resp"
          "onse, and has no other reason for being there";
    goto LABEL_16;
  }
  if (((v13 | IsSignificantlyDetachedOptionallyIgnoringPartStat | v7) & 1) == 0
    && CalEventGetInvitationChangedProperties(a1) <= 0xF)
  {
    CalEventSetInvitationChangedProperties(a1);
    double v14 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = v14;
      *(_DWORD *)long long buf = 67109120;
      Rowint ID = CalCalendarItemGetRowID();
      uint64_t v16 = "Marking event with UID %d as no longer needing a notification because it is detached and redundant with a no"
            "tification for its parent which is already in the inbox";
LABEL_16:
      _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 8u);

      goto LABEL_17;
    }
    goto LABEL_17;
  }
LABEL_18:
  if (!v5 && a2)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    BOOL v18 = CalEventCopyDetachedEvents(a1);
    uint64_t v19 = [(__CFArray *)v18 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v25;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v25 != v21) {
            objc_enumerationMutation(v18);
          }
          CalEventNotifyInvitationIfNeededWithOptions(*(void *)(*((void *)&v24 + 1) + 8 * i), 1);
        }
        uint64_t v20 = [(__CFArray *)v18 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v20);
    }
  }
}

CFTypeRef CalEventCopyOriginalEvent(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Originaluint64_t Event = _CalEventGetOriginalEvent(a1);
  CFTypeRef v4 = OriginalEvent;
  if (OriginalEvent) {
    CFRetain(OriginalEvent);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

BOOL CalEventShouldDisplayNotification(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Invitationint Status = _CalEventGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus != 0;
}

void CalEventSetNeedsNotification(uint64_t a1, int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    uint64_t v5 = 3;
  }
  else {
    uint64_t v5 = 0;
  }
  if (CPRecordGetStore() && (CPRecordStoreIsLoggingChanges() & 1) != 0)
  {
    CPRecordStoreLogChanges();
    _CalRecordSetPropertyIfDifferent(a1, 15, (const __CFString *)v5);
    CPRecordStoreLogChanges();
  }
  else
  {
    _CalRecordSetPropertyIfDifferent(a1, 15, (const __CFString *)v5);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalEventSetInvitationChangedProperties(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetInvitationChangedProperties(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalEventCopyDetachedEvents(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalEventCopyDetachedEvents(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalEventNotifyInvitationIfNeeded(uint64_t a1)
{
}

void CalDatabaseCleanUpDeclinedEvents(os_unfair_lock *a1)
{
  CalDatabaseLockForThread(a1);
  uint64_t SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  CFAbsoluteTimeGetCurrent();
  CFStringAppend(SelectPrefix, @" JOIN Participant ON self_attendee_id = Participant.rowid");
  CFStringAppend(SelectPrefix, @" WHERE Event.external_id IS NULL AND Participant.entity_type == ? AND Participant.status = ? AND end_date < ?");
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      int v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  CPSqliteDatabaseStatementForReading();
  CFRelease(SelectPrefix);
  CalDatabaseUnlockForThread(a1);
}

uint64_t CalDatabaseGetCountOfUnacknowledgedEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  if (a2)
  {
    CFMutableArrayRef v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    CFMutableArrayRef v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  BOOL v4 = (uint64_t **)_CalEventPrepareNotifiableStatusStatement((uint64_t)v3, @"SELECT COUNT(*) FROM CalendarItem AS ci", a2, 1, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v4)
      {
        uint64_t v6 = **v4;
        if (v6)
        {
          if (*(void *)(v6 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    uint64_t v8 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v5)
      {
        uint64_t v9 = **v5;
        if (v9)
        {
          if (*(void *)(v9 + 104))
          {
            uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3 + 20);
  }
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v8;
}

uint64_t CalDatabaseCopyOfAllUnacknowledgedEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  if (a2)
  {
    CFMutableArrayRef v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    CFMutableArrayRef v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  CFStringRef SelectPrefix = (const __CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    CFStringRef v5 = SelectPrefix;
    uint64_t v6 = _CalEventPrepareNotifiableStatusStatement((uint64_t)v3, SelectPrefix, a2, 1, 0);
    if (v6)
    {
      Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v3);
      if (CDBLockingAssertionsEnabled) {
        BOOL v8 = RecordStore == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t v6 = CPRecordStoreProcessStatementWithPropertyIndices();
    }
    CFRelease(v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3 + 20);
  }
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v6;
}

uint64_t CalDatabaseCopyOfAllEventsCreatedFromSuggestionsWithExtractionGroupIdentifierInStore(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseCopyOfAllEventsCreatedFromSuggestionsInStore(a1, a2, 0, a3);
}

CFArrayRef CalDatabaseCopyOfAllRepliedEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  return CalDatabaseCopyOfAllNotifiableOrRepliedEventsInStore(a1, a2, 1);
}

uint64_t CalDatabaseCopyOfAllReadCancelledEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  if (a2)
  {
    CFMutableArrayRef v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    CFMutableArrayRef v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  uint64_t SelectPrefix = CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    CFStringRef v5 = (__CFString *)SelectPrefix;
    if (!_CalDatabaseGetRecordStore((uint64_t)v3)) {
      goto LABEL_23;
    }
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (!Database) {
      goto LABEL_23;
    }
    uint64_t v8 = Database;
    CFStringAppend(v5, @" WHERE status = ? and invitation_status = 0");
    if (a2) {
      CFStringAppend(v5, @" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)");
    }
    CFStringAppend(v5, @";");
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v8 + 104))
      {
        uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
    uint64_t v10 = CPSqliteDatabaseStatementForReading();
    if (v10)
    {
      uint64_t v11 = v10;
      sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 1, 3);
      if (a2)
      {
        int v12 = *(sqlite3_stmt **)(v11 + 8);
        int ID = CPRecordGetID();
        sqlite3_bind_int(v12, 2, ID);
      }
      if (CDBLockingAssertionsEnabled)
      {
        double v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
      uint64_t v15 = CPRecordStoreProcessStatementWithPropertyIndices();
    }
    else
    {
LABEL_23:
      uint64_t v15 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3 + 20);
  }
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v15;
}

uint64_t CalDatabaseGetCountOfNotifiableEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  if (a2)
  {
    CFMutableArrayRef v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    CFMutableArrayRef v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  BOOL v4 = (uint64_t **)_CalEventPrepareNotifiableStatusStatement((uint64_t)v3, @"SELECT COUNT(*) FROM CalendarItem AS ci", a2, 0, 0);
  if (v4)
  {
    CFStringRef v5 = v4;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v4)
      {
        uint64_t v6 = **v4;
        if (v6)
        {
          if (*(void *)(v6 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    uint64_t v8 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v5)
      {
        uint64_t v9 = **v5;
        if (v9)
        {
          if (*(void *)(v9 + 104))
          {
            uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3 + 20);
  }
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v8;
}

uint64_t _CalEventSetInvitationStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    _CalEventRemoveAllEventActions(a1);
  }
  if (CPRecordGetStore() && (CPRecordStoreIsLoggingChanges() & 1) != 0)
  {
    CPRecordStoreLogChanges();
    _CalRecordSetPropertyIfDifferent(a1, 15, (const __CFString *)a2);
    return CPRecordStoreLogChanges();
  }
  else
  {
    return _CalRecordSetPropertyIfDifferent(a1, 15, (const __CFString *)a2);
  }
}

void CalEventSetInvitationStatus(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetInvitationStatus(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetInvitationStatus(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Invitationint Status = _CalEventGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus;
}

uint64_t _CalEventGetInvitationStatus(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

BOOL CalEventHasBeenAlerted(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Invitationint Status = _CalEventGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  BOOL v5 = InvitationStatus != 3 && InvitationStatus != 0;
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

uint64_t CalDatabaseCopyOfAllUnalertedEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  if (a2)
  {
    CFMutableArrayRef v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    CFMutableArrayRef v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  uint64_t SelectPrefix = CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    CFStringRef v5 = (const __CFString *)SelectPrefix;
    Recorduint64_t Store = _CalDatabaseGetRecordStore((uint64_t)v3);
    uint64_t v7 = RecordStore;
    if (CDBLockingAssertionsEnabled) {
      BOOL v8 = RecordStore == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database
      && (uint64_t v11 = Database, (MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v5)) != 0))
    {
      int v13 = MutableCopy;
      CFStringAppend(MutableCopy, @" WHERE invitation_status = ? AND self_attendee_id != 0");
      if (a2)
      {
        CFStringAppend(v13, @" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)");
      }
      else
      {
        CFMutableStringRef v15 = _CalDatabaseCopyDisabledStoresClause((uint64_t)v3);
        if (v15)
        {
          CFStringRef v16 = v15;
          CFStringAppend(v13, @" AND calendar_id NOT IN (SELECT ROWID FROM Calendar WHERE store_id IN ");
          CFStringAppend(v13, v16);
          CFStringAppend(v13, @""));
          CFRelease(v16);
        }
      }
      CFStringAppend(v13, @" AND (has_recurrences = 1 OR (start_tz = ? AND end_date > ?) OR (start_tz != ? AND end_date > ?));");
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(v11 + 104))
        {
          CFTypeRef v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17) {
            os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
      uint64_t v18 = CPSqliteDatabaseStatementForReading();
      if (v18)
      {
        uint64_t v19 = v18;
        sqlite3_bind_int(*(sqlite3_stmt **)(v18 + 8), 1, 3);
        if (a2)
        {
          uint64_t v20 = *(sqlite3_stmt **)(v19 + 8);
          int ID = CPRecordGetID();
          sqlite3_bind_int(v20, 2, ID);
          int v22 = 3;
        }
        else
        {
          int v22 = 2;
        }
        double Current = CFAbsoluteTimeGetCurrent();
        uint64_t v24 = CalTimeZoneCopyCFTimeZone();
        double v25 = Current;
        if (v24)
        {
          long long v26 = (const void *)v24;
          CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
          CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
          double v25 = v27;
          CFRelease(v26);
        }
        sqlite3_bind_text(*(sqlite3_stmt **)(v19 + 8), v22, "_float", -1, 0);
        sqlite3_bind_double(*(sqlite3_stmt **)(v19 + 8), v22 + 1, v25);
        sqlite3_bind_text(*(sqlite3_stmt **)(v19 + 8), v22 + 2, "_float", -1, 0);
        sqlite3_bind_double(*(sqlite3_stmt **)(v19 + 8), v22 + 3, Current);
        if (CDBLockingAssertionsEnabled)
        {
          if (v7)
          {
            CFTypeRef v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28) {
              os_unfair_lock_assert_owner(v28 + 20);
            }
          }
        }
        uint64_t v14 = CPRecordStoreProcessStatementWithPropertyIndices();
      }
      else
      {
        uint64_t v14 = 0;
      }
      CFRelease(v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3 + 20);
  }
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v14;
}

uint64_t CalAlertUnacknowledgedInvitations()
{
  return CalAlertUnacknowledgedInvitations___AlertUnacknowledgedInvitationsValue;
}

uint64_t _CalEventAlertPrefChanged()
{
  return CFPreferencesAppSynchronize((CFStringRef)*MEMORY[0x1E4F57900]);
}

uint64_t CalAlertSharedEventChanges()
{
  return CalAlertSharedEventChanges___AlertSharedEventChangesValue;
}

uint64_t _CalEventAlertSharedEventChangesPrefChanged()
{
  return CFPreferencesAppSynchronize((CFStringRef)*MEMORY[0x1E4F57900]);
}

void CalSetAlertInviteeDeclines(int a1)
{
  CFTypeRef v1 = (CFPropertyListRef *)MEMORY[0x1E4F1CFD0];
  if (!a1) {
    CFTypeRef v1 = (CFPropertyListRef *)MEMORY[0x1E4F1CFC8];
  }
  CFStringRef v2 = (const __CFString *)*MEMORY[0x1E4F57900];
  CFPreferencesSetAppValue(@"InviteeDeclineAlerts", *v1, (CFStringRef)*MEMORY[0x1E4F57900]);
  CFPreferencesAppSynchronize(v2);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.mobilecal.invitationalertschanged", 0, 0, 1u);
}

uint64_t _CalEventAlertInviteeDeclinesPrefChanged()
{
  return CFPreferencesAppSynchronize((CFStringRef)*MEMORY[0x1E4F57900]);
}

BOOL CalEventCanBeMovedToAnotherCalendar(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemGetStoreId(a1);
  uint64_t Store = CPRecordGetStore();
  StoreWithUint ID = _CalGetStoreWithUID(Store);
  if (StoreWithUID) {
    BOOL v5 = !_CalStoreGetBoolConstraintValue(StoreWithUID, @"CalEvent", @"CalendarNotChangeable", 0);
  }
  else {
    BOOL v5 = 1;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalEventSetResponseComment(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 29, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyResponseComment(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventSetLastSyncedResponseComment(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 30, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyLastSyncedResponseComment(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

BOOL CalEventCommentHasChanged(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)CalEventCopyResponseComment(a1);
  CFStringRef SyncedResponseComment = (const __CFString *)CalEventCopyLastSyncedResponseComment(a1);
  CFStringRef v4 = SyncedResponseComment;
  BOOL v5 = SyncedResponseComment != 0;
  if (v2 && SyncedResponseComment)
  {
    BOOL v5 = CFStringCompare(v2, SyncedResponseComment, 0) != kCFCompareEqualTo;
  }
  else
  {
    if (!v2) {
      goto LABEL_7;
    }
    BOOL v5 = 1;
  }
  CFRelease(v2);
LABEL_7:
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

void CalSetShowDeclinedEvents(uint64_t a1)
{
  CFStringRef v2 = (CFPropertyListRef *)MEMORY[0x1E4F1CFD0];
  if (!a1) {
    CFStringRef v2 = (CFPropertyListRef *)MEMORY[0x1E4F1CFC8];
  }
  CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F57900];
  CFPreferencesSetAppValue(@"ShowDeclinedEvents", *v2, (CFStringRef)*MEMORY[0x1E4F57900]);
  CFPreferencesAppSynchronize(v3);
  id v4 = (id)[objc_alloc(MEMORY[0x1E4F57780]) initWithDomain:v3];
  [v4 setBooleanPreference:@"ShowDeclinedEvents" value:a1 notificationName:@"com.apple.mobilecal.showdeclinedchanged"];
}

void CalSetShowCompletedReminders(uint64_t a1)
{
  CFStringRef v2 = (CFPropertyListRef *)MEMORY[0x1E4F1CFD0];
  if (!a1) {
    CFStringRef v2 = (CFPropertyListRef *)MEMORY[0x1E4F1CFC8];
  }
  CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F57900];
  CFPreferencesSetAppValue(@"ShowCompletedReminders", *v2, (CFStringRef)*MEMORY[0x1E4F57900]);
  CFPreferencesAppSynchronize(v3);
  id v4 = (id)[objc_alloc(MEMORY[0x1E4F57780]) initWithDomain:v3];
  [v4 setBooleanPreference:@"ShowCompletedReminders" value:a1 notificationName:@"com.apple.mobilecal.showCompletedRemindersChanged"];
}

__CFArray *CalEventCopyExceptionDates(uint64_t a1)
{
  return CalCalendarItemCopyExceptionDatesAsCFDates(a1, 1);
}

void _CalEventSetOriginalEvent(void *a1, uint64_t a2)
{
  if (a2)
  {
    _CalEventAddDetachedEvent(a2, a1);
  }
  else
  {
    Originaluint64_t Event = _CalEventGetOriginalEvent((uint64_t)a1);
    if (OriginalEvent)
    {
      _CalEventRemoveDetachedEvent((uint64_t)OriginalEvent, a1);
    }
  }
}

void *_CalEventRemoveDetachedEvent(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

void CalEventSetOriginalEvent(void *a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetOriginalEvent(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalEventAddDetachedEvent(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventAddDetachedEvent(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalEventRemoveDetachedEvent(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventRemoveDetachedEvent(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalEventDeleteAllDetachedEvents(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (void *)CPRecordGetProperty();
  if (Property)
  {
    CalToManyRelationRemoveAllObjects(Property);
  }
}

BOOL CalEventIsDetached(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Originaluint64_t Event = _CalEventGetOriginalEvent(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return OriginalEvent != 0;
}

void _CalEventUpdateDetachedEventsRelation(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (void *)CPRecordGetProperty();
  if (Property)
  {
    CalToManyRelationSave(Property);
  }
}

void CalEventSetOriginalStartDate(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetOriginalStartDate(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double CalEventGetOriginalStartDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateCFStringRef Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

uint64_t CalEventCopyUncachedCalendar(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    uint64_t Store = CPRecordGetStore();
    if (!Store) {
      goto LABEL_17;
    }
    CPRecordGetID();
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    RowidForRecordint ID = CPRecordStoreGetRowidForRecordID();
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6) {
        os_unfair_lock_assert_owner(v6 + 20);
      }
    }
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = ___CalEventCopyUncachedCalendar_block_invoke;
    v12[3] = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
    void v12[4] = RowidForRecordID;
    CFArrayRef v7 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
    if (v7)
    {
      CFArrayRef v8 = v7;
      if (CFArrayGetCount(v7) < 1)
      {
        uint64_t Store = 0;
      }
      else
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v8, 0);
        uint64_t Store = (uint64_t)CFRetain(ValueAtIndex);
      }
      CFRelease(v8);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_ERROR, "_CalEventCopyUncachedCalendar: called with NULL event", (uint8_t *)v12, 2u);
    }
  }
  uint64_t Store = 0;
LABEL_17:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Store;
}

BOOL _CalDatabaseCalendarHasEvents(uint64_t a1, uint64_t a2)
{
  return _CalDatabaseCalendarHasCalendarItemsWithEntityType(a1, a2, 2);
}

BOOL _CalDatabaseCalendarHasEventsWithAttendeeAsAttendeeType(uint64_t a1, uint64_t a2, int a3)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = Database == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  uint64_t v10 = CPSqliteDatabaseStatementForReading();
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v10;
  int v12 = *(sqlite3_stmt **)(v10 + 8);
  if (v12)
  {
    int ID = CPRecordGetID();
    sqlite3_bind_int(v12, 1, ID);
    sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 2, a3);
    BOOL v14 = sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) == 100;
  }
  else
  {
    BOOL v14 = 0;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)v11)
    {
      uint64_t v15 = **(void **)v11;
      if (v15)
      {
        if (*(void *)(v15 + 104))
        {
          CFStringRef v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16) {
            os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  return v14;
}

uint64_t _CalDatabaseCopyNonRecurringEventsInDateRange(uint64_t a1, uint64_t a2, void *a3)
{
  Recorduint64_t Store = _CalDatabaseGetRecordStore(a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    if (CPRecordStoreGetDatabase())
    {
      uint64_t SelectPrefix = (const void *)CPRecordStoreCreateSelectPrefix();
      uint64_t v9 = _CalFilterCopyQuery2(a3, a1, @"_CalDatabaseCopyNonRecurringEventsInDateRange", (uint64_t)_CalCopyEventQueryForFilter, (uint64_t)SelectPrefix, @"has_recurrences = 0 AND hidden = 0 AND ((end_date > ? AND start_date < ?) OR (proposed_start_date > ? AND proposed_start_date < ?))");
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)a2)
          {
            if (*(void *)(*(void *)a2 + 104))
            {
              uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10) {
                os_unfair_lock_assert_owner(v10 + 20);
              }
            }
          }
        }
      }
      CPSqliteConnectionStatementForSQL();
      Recorduint64_t Store = 0;
      CFRelease(v9);
      CFRelease(SelectPrefix);
    }
    else
    {
      return 0;
    }
  }
  return RecordStore;
}

uint64_t _CalDatabaseNonRecurringEventsInDateRangeRowHandler(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = *(sqlite3_stmt **)(a1 + 8);
  double v4 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 32));
  double v5 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 36));
  double v6 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 44));
  CFArrayRef v7 = sqlite3_column_text(v3, *(_DWORD *)(a2 + 40));
  int v8 = sqlite3_column_bytes(v3, *(_DWORD *)(a2 + 40));
  if (v7) {
    BOOL v9 = v8 == 6;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9 && !strncmp((const char *)v7, "_float", 6uLL))
  {
    if (v4 < *(double *)(a2 + 24) && v5 > *(double *)(a2 + 16)) {
      return 2;
    }
    int v10 = 1;
  }
  else
  {
    if (v4 < *(double *)(a2 + 8) && v5 > *(double *)a2) {
      return 2;
    }
    int v10 = 0;
  }
  if (v6 > *MEMORY[0x1E4F57888])
  {
    double v11 = v5 - v4 + v6;
    if (v10)
    {
      if (v6 < *(double *)(a2 + 24)) {
        return 2 * (v11 > *(double *)(a2 + 16));
      }
      return 0;
    }
    if (v6 < *(double *)(a2 + 8) && v11 > *(double *)a2) {
      return 2;
    }
  }
  return 0;
}

uint64_t _CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange(uint64_t a1, void *a2, const __CFString *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!_CalDatabaseGetRecordStore(a1)) {
    return 0;
  }
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    return 0;
  }
  uint64_t v14 = Database;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)_CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange_columns, 7, 0);
  ColumnListWithAliasAndExtraColumns = (__CFString *)CPRecordStoreCreateColumnListWithAliasAndExtraColumns();
  if (ColumnListWithAliasAndExtraColumns)
  {
    uint64_t v18 = ColumnListWithAliasAndExtraColumns;
    CFStringAppend(ColumnListWithAliasAndExtraColumns, @" FROM CalendarItem e JOIN Recurrence r ON r.owner_id = e.ROWID");
    uint64_t v19 = _CalFilterCopyQuery2(a2, a1, @"_CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange", (uint64_t)_CalCopyEventQueryForFilter, (uint64_t)v18, @"entity_type = 2 AND has_recurrences = 1 AND hidden=0 AND start_date < ? ");
    if (v19)
    {
      uint64_t v20 = v19;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(v14 + 104))
        {
          uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v21) {
            os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
      uint64_t v22 = CPSqliteDatabaseStatementForReading();
      if (v22
        && (a5 <= a7 ? (double v23 = a7) : (double v23 = a5),
            sqlite3_bind_int(*(sqlite3_stmt **)(v22 + 8), 1, (int)v23),
            CFStringGetCString(a3, buffer, 256, 0x8000100u)))
      {
        CFDictionaryGetCount(0);
        CFTypeRef cf = (CFTypeRef)CalTimeZoneCopyCFTimeZone();
        CFTimeZoneRef v24 = CFTimeZoneCreateWithTimeIntervalFromGMT(v15, 0.0);
        CFDictionaryGetValue(0, (const void *)4);
        CFDictionaryGetValue(0, (const void *)6);
        CFDictionaryGetValue(0, (const void *)5);
        uint64_t v25 = 0;
        CFDictionaryGetValue(0, (const void *)0x37);
        if (cf && v24)
        {
          if (CDBLockingAssertionsEnabled)
          {
            long long v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v26) {
              os_unfair_lock_assert_owner(v26 + 20);
            }
          }
          uint64_t v25 = CPRecordStoreProcessStatementWithPropertyIndices();
        }
        if (v24) {
          CFRelease(v24);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      else
      {
        uint64_t v25 = 0;
      }
      CFRelease(v20);
    }
    else
    {
      uint64_t v25 = 0;
    }
    CFRelease(0);
    CFRelease(v18);
  }
  else
  {
    uint64_t v25 = 0;
  }
  CFRelease(v16);
  return v25;
}

uint64_t _CalCopyRecurringEventQueryRowHandler(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = *(sqlite3_stmt **)(a1 + 8);
  double v4 = sqlite3_column_text(v3, *(_DWORD *)(a2 + 64));
  int v5 = sqlite3_column_bytes(v3, *(_DWORD *)(a2 + 64));
  double v6 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 56));
  double v7 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 60));
  double v8 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 88));
  double v9 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 80));
  int v10 = sqlite3_column_text(v3, *(_DWORD *)(a2 + 84));
  int v11 = sqlite3_column_bytes(v3, *(_DWORD *)(a2 + 84));
  int v12 = sqlite3_column_int(v3, *(_DWORD *)(a2 + 76));
  if (v4) {
    LODWORD(v4) = strncmp((const char *)v4, "_float", v5) == 0;
  }
  v14 = v10 && (int v13 = *(const char **)(a2 + 48)) != 0 && strncmp((const char *)v10, v13, v11) == 0;
  if (v4) {
    uint64_t v15 = 24;
  }
  else {
    uint64_t v15 = 8;
  }
  if (v6 > *(double *)(a2 + v15)) {
    return 0;
  }
  unsigned int v16 = (v7 - v6);
  if (v8 != 0.0)
  {
    double v17 = v8 + (double)v16;
    double v18 = *(double *)(a2 + 16);
    goto LABEL_17;
  }
  if (v12 && v9 != 0.0 && v4 ^ 1 | v14)
  {
    double v17 = v9 + (double)v16;
    double v18 = *(double *)a2;
LABEL_17:
    if (v17 > v18) {
      goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (sqlite3_column_int(v3, *(_DWORD *)(a2 + 72)) != 4 || sqlite3_column_type(v3, *(_DWORD *)(a2 + 92)) != 5) {
    return 2;
  }
  int v19 = sqlite3_column_int(v3, *(_DWORD *)(a2 + 96));
  uint64_t result = 2;
  if (!v19 && v16)
  {
    uint64_t v21 = sqlite3_column_text(v3, *(_DWORD *)(a2 + 68));
    if (v21 && strcmp((const char *)v21, "gregorian")) {
      return 2;
    }
    uint64_t v22 = 16;
    if (!v4) {
      uint64_t v22 = 0;
    }
    double v23 = *(double *)(a2 + v15);
    double v24 = *(double *)(a2 + v22);
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    int GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    int v26 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    if (GregorianDateWithFallbackToDefaultTimeZone <= v26)
    {
      double v27 = (double)v16;
      int v28 = v26 + 1;
      while (1)
      {
        CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
        if (v29 + v27 >= v24 && v29 <= v23) {
          break;
        }
        uint64_t result = 0;
        if (v28 == ++GregorianDateWithFallbackToDefaultTimeZone) {
          return result;
        }
      }
      return 2;
    }
    return 0;
  }
  return result;
}

uint64_t _CalEventSetTravelTime(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 56, a2);
}

const void *_CalEventCopyTravelTime(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const void *)CPRecordGetProperty();
  CFStringRef v3 = Property;
  if (Property) {
    CFRetain(Property);
  }
  return v3;
}

void CalEventSetTravelTime(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 56, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *CalEventCopyTravelTime(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFStringRef v3 = _CalEventCopyTravelTime(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalEventSetProposedStartDate(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFDateRefFromCalCFDateRef Date = (const __CFString *)_CreateCFDateRefFromCalDate(a2);
  _CalRecordSetPropertyIfDifferent(a1, 62, CFDateRefFromCalDate);
  if (CFDateRefFromCalDate) {
    CFRelease(CFDateRefFromCalDate);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double CalEventGetRawProposedStartDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ProposedStartCFDateRef Date = _CalEventGetProposedStartDate(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ProposedStartDate;
}

const void *CalEventCopyRecurrenceSet(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const void *)CPRecordGetProperty();
  int v5 = Property;
  if (Property) {
    CFRetain(Property);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalEventSetRecurrenceSet(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventGetFlag(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return (Property & a2) != 0;
}

void CalEventSetFlag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        double v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetTravelAdvisoryBehavior(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalEventSetTravelAdvisoryBehavior(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 57, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventIsCandidateForTravelAdvisories(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    double v7 = CDBLogHandle;
    BOOL result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(v15) = 0;
    _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_ERROR, "No event given.  Will not determine travel advisory eligibility.", (uint8_t *)&v15, 2u);
    return 0;
  }
  if (CalCalendarItemGetStatus(a1) == 3)
  {
    CFStringRef v2 = (void *)CDBLogHandle;
    BOOL result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    double v4 = v2;
    int v5 = (void *)CalCalendarItemCopySummary(a1);
    int v15 = 138412290;
    unsigned int v16 = v5;
    double v6 = "Event is not a candidate for travel advisories because it is a cancelled event.  Summary: [%@]";
    goto LABEL_20;
  }
  if (CalEventIsAllDay(a1))
  {
    double v8 = (void *)CDBLogHandle;
    BOOL result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    double v4 = v8;
    int v5 = (void *)CalCalendarItemCopySummary(a1);
    int v15 = 138412290;
    unsigned int v16 = v5;
    double v6 = "Event is not a candidate for travel advisories because it is an all-day event.  Summary: [%@]";
    goto LABEL_20;
  }
  if (CalEventGetParticipationStatus(a1) == 2)
  {
    double v9 = (void *)CDBLogHandle;
    BOOL result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    double v4 = v9;
    int v5 = (void *)CalCalendarItemCopySummary(a1);
    int v15 = 138412290;
    unsigned int v16 = v5;
    double v6 = "Event is not a candidate for travel advisories because the user declined the event.  Summary: [%@]";
    goto LABEL_20;
  }
  if (CalEventGetTravelAdvisoryBehavior(a1) >= 2)
  {
    int v10 = (void *)CDBLogHandle;
    BOOL result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    double v4 = v10;
    int v5 = (void *)CalCalendarItemCopySummary(a1);
    int v15 = 138412290;
    unsigned int v16 = v5;
    double v6 = "Event is not a candidate for travel advisories because its travel advisory behavior is not 'automatic' or 'enab"
         "led'.  Summary: [%@]";
    goto LABEL_20;
  }
  CFTypeRef v11 = CalCalendarItemCopyCalendar(a1);
  if (!v11) {
    return 1;
  }
  int v12 = v11;
  BOOL IsIgnoringEventAlerts = CalCalendarIsIgnoringEventAlerts((uint64_t)v11);
  CFRelease(v12);
  if (!IsIgnoringEventAlerts) {
    return 1;
  }
  BOOL v14 = (void *)CDBLogHandle;
  BOOL result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    double v4 = v14;
    int v5 = (void *)CalCalendarItemCopySummary(a1);
    int v15 = 138412290;
    unsigned int v16 = v5;
    double v6 = "Event is not a candidate for travel advisories because its calendar has all event alerts disabled.  Summary: [%@]";
LABEL_20:
    _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v15, 0xCu);

    return 0;
  }
  return result;
}

uint64_t CalEventIsImmediatelyEligibleForTravelAdvisories(uint64_t a1)
{
  if (a1)
  {
    if (CalEventIsCandidateForTravelAdvisories(a1))
    {
      CFTypeRef v2 = CalCalendarItemCopyPreferredLocation(a1);
      if (v2)
      {
        CFStringRef v3 = v2;
        HasKnownSpatialCFDataRef Data = CalLocationHasKnownSpatialData((uint64_t)v2);
        CFRelease(v3);
        return HasKnownSpatialData;
      }
    }
  }
  else
  {
    double v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v7 = 0;
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "NULL 'event' given.  Will not determine immediate eligibility for travel advisory", v7, 2u);
    }
  }
  return 0;
}

BOOL CalEventIsHidden(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsHiddeCFIndex n = _CalEventIsHidden(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsHidden;
}

void CalEventSetHidden(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 31, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalEventSetCanForward(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 63, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventCanForward(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void CalEventSetLocationPredictionState(uint64_t a1, int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 64, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetLocationPredictionState(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

BOOL CalEventHasPredictedLocation(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFTypeRef v2 = CalCalendarItemCopyPreferredLocation(a1);
  CFStringRef v3 = v2;
  if (v2 && CalLocationHasCoordinates((uint64_t)v2))
  {
    CFRelease(v3);
    return 0;
  }
  if (CalEventGetLocationPredictionState(a1))
  {
    BOOL v4 = 0;
    if (!v3) {
      return v4;
    }
LABEL_6:
    CFRelease(v3);
    return v4;
  }
  double v6 = (void *)CalCalendarItemCopySummary(a1);
  if (v3) {
    double v7 = (__CFString *)CalLocationCopyTitle((uint64_t)v3);
  }
  else {
    double v7 = &stru_1EFF6D0F0;
  }
  CFTypeRef v8 = CalCalendarItemCopyCalendar(a1);
  double v9 = (void *)CalCalendarCopyUUID((uint64_t)v8);
  CFRelease(v8);
  id v15 = 0;
  int v10 = [MEMORY[0x1E4F57758] predictedLocationOfInterestForEventTitle:v6 eventLocation:v7 calendarIdentifier:v9 timeout:-1 error:&v15];
  id v11 = v15;
  BOOL v4 = v10 != 0;

  if (!v10)
  {
    if (v11)
    {
      int v12 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        int v13 = v12;
        BOOL v14 = [v11 localizedDescription];
        *(_DWORD *)long long buf = 138413058;
        uint64_t v17 = v6;
        __int16 v18 = 2112;
        int v19 = v7;
        __int16 v20 = 2112;
        uint64_t v21 = v9;
        __int16 v22 = 2112;
        double v23 = v14;
        _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Could not fetch predicted location of interest for event title: [%@], event location: [%@], calendar identifier: [%@], error: [%@]", buf, 0x2Au);
      }
    }
  }

  if (v3) {
    goto LABEL_6;
  }
  return v4;
}

void CalEventSetDisallowProposeNewTime(uint64_t a1, unsigned int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 66, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventDisallowProposeNewTime(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void CalEventSetJunkStatus(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 69, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalEventUpdateLastModifiedDate(uint64_t a1)
{
  CFTypeRef v2 = CalCopyDatabaseForRecord();
  if (v2)
  {
    CFStringRef v3 = v2;
    if (_CalDatabaseIsPropertyModificationLoggingEnabled((uint64_t)v2))
    {
      if (!_CalCalendarItemIsInvite(a1)
        || (CFTypeRef Store = _CalEventGetStore(a1), _CalStoreAttendeeCanUpdateLastModified((uint64_t)Store)))
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v6 = CFDateCreate(0, Current);
        if (v6)
        {
          CFDateRef v7 = v6;
          _CalCalendarItemSetLastModifiedDateWhileLocked(a1, (uint64_t)v6);
          CFRelease(v7);
        }
      }
    }
    CFRelease(v3);
  }
}

void CalEventSetLastModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
  CFDateRefFromCalCFDateRef Date = _CreateCFDateRefFromCalDate(a2);
  CalCalendarItemSetLastModifiedDate(a1, (uint64_t)CFDateRefFromCalDate);
  if (CFDateRefFromCalDate)
  {
    CFRelease(CFDateRefFromCalDate);
  }
}

void CalEventGetLastModifiedDate(uint64_t a1)
{
  ModifiedCFDateRef Date = CalCalendarItemCopyLastModifiedDate(a1);
  if (ModifiedDate)
  {
    CFTypeRef v2 = (const void *)ModifiedDate;
    MEMORY[0x1AD0E87A0]();
    CFRelease(v2);
  }
}

void CalEventSetConferenceURL(uint64_t a1, const __CFURL *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFStringRef v5 = CFURLGetString(a2);
  }
  else {
    CFStringRef v5 = 0;
  }
  _CalRecordSetPropertyIfDifferent(a1, 70, v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalEventCopyConferenceURL(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  CFURLRef result = 0;
  if (v4)
  {
    CFURLRef v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

uint64_t _CalEventInvalidateDetectedConferenceURL(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalEventCopyDetectedConferenceURL(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventUpdateDetectedConferenceURLIfNeeded(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void _CalEventUpdateDetectedConferenceURLIfNeeded(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if ([(id)CPRecordGetProperty() isEqualToString:@"invalid"])
  {
    ClientLocatioCFIndex n = _CalCalendarItemGetClientLocation(a1);
    if (ClientLocation || (ClientLocatioCFIndex n = _CalCalendarItemGetLocation(a1)) != 0)
    {
      uint64_t v4 = (void *)_CalEventCopySummary((uint64_t)ClientLocation);
      CFStringRef v5 = (void *)_CalLocationCopyAddress((uint64_t)ClientLocation);
    }
    else
    {
      CFStringRef v5 = 0;
      uint64_t v4 = 0;
    }
    DescriptioCFIndex n = (void *)_CalCalendarItemGetDescription(a1);
    CFDateRef v7 = (void *)_CalCalendarItemCopyURL(a1);
    CFTypeRef v8 = [v7 absoluteString];
    double v9 = (const void *)_CalEventDetectAndCopyConferenceURLFromSources(Description, (uint64_t)v8, (uint64_t)v4, (uint64_t)v5);

    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
    if (v9)
    {
      CFRelease(v9);
    }
  }
}

uint64_t _CalEventSetContactIdentifier(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 71, a2);
}

uint64_t _CalEventCopyContactIdentifier(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalEventSetContactIdentifier(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 71, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyContactIdentifier(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalEventCopyContactIdentifier(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalEventSetContactName(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 74, a2);
}

void CalEventSetContactName(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 74, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyContactName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEventSetInvitationChangedProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalEventAddInvitationChangedProperties(uint64_t a1, int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  int InvitationChangedProperties = _CalEventGetInvitationChangedProperties(a1);
  if ((InvitationChangedProperties | a2) != InvitationChangedProperties) {
    _CalEventSetInvitationChangedProperties(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalEventRemoveInvitationChangedProperties(uint64_t a1, int a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  int InvitationChangedProperties = _CalEventGetInvitationChangedProperties(a1);
  if ((InvitationChangedProperties & ~a2) != InvitationChangedProperties) {
    _CalEventSetInvitationChangedProperties(a1);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalEventSetSpecialDayString(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 125, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopySpecialDayString(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void *_CalEventSetImage(void *a1, uint64_t a2)
{
  CFURLRef result = _CalEventGetImage((uint64_t)a1);
  if (result != (void *)a2)
  {
    if (result) {
      CFURLRef result = (void *)_CalImageRemoveEvent((uint64_t)result, a1);
    }
    if (a2)
    {
      return _CalColorAddEvent(a2, a1);
    }
  }
  return result;
}

CFTypeRef _CalEventGetImage(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void CalEventSetImage(void *a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetImage(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalEventCopyImage(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Image = _CalEventGetImage(a1);
  if (Image) {
    CFTypeRef v4 = CFRetain(Image);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void *_CalEventSetColor(void *a1, uint64_t a2)
{
  CFTypeRef result = _CalEventGetColor((uint64_t)a1);
  if (result != (void *)a2)
  {
    if (result) {
      CFTypeRef result = (void *)_CalColorRemoveEvent((uint64_t)result, a1);
    }
    if (a2)
    {
      return _CalColorAddEvent(a2, a1);
    }
  }
  return result;
}

CFTypeRef _CalEventGetColor(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void CalEventSetColor(void *a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetColor(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalEventCopyColor(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Color = _CalEventGetColor(a1);
  if (Color) {
    CFTypeRef v4 = CFRetain(Color);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventSetCreatorTeamIdentityString(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 117, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyCreatorTeamIdentityString(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventSetCreatorIdentityString(uint64_t a1, const __CFString *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 116, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyCreatorIdentityString(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalDatabaseRemoveCalendarItemChangesInCalendarToIndex(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    id v11 = "entityType == CalEventEntity || entityType == CalTaskEntity";
    int v12 = 8244;
    goto LABEL_8;
  }
  if (!a3)
  {
    id v11 = "calendar != NULL";
    int v12 = 8245;
LABEL_8:
    __assert_rtn("CalDatabaseRemoveCalendarItemChangesInCalendarToIndex", "CalEvent.m", v12, v11);
  }
  CFDateRef v7 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  CFTypeRef v8 = v7 + 20;
  os_unfair_lock_lock(v7 + 20);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __CalDatabaseRemoveCalendarItemChangesInCalendarToIndex_block_invoke;
  v13[3] = &unk_1E5D65DE0;
  v13[4] = &v16;
  void v13[5] = v7;
  int v14 = a4;
  int v15 = a2;
  v13[6] = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v7, (uint64_t)v13);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v8);
  }
  os_unfair_lock_unlock(v8);
  CFRelease(v7);
  uint64_t v9 = *((unsigned __int8 *)v17 + 24);
  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_1A8F021B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveCalendarItemChangesInCalendarToIndex_block_invoke(uint64_t a1)
{
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassToIndexWhereWithBindBlock();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t __CalDatabaseRemoveCalendarItemChangesInCalendarToIndex_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3 + 1;
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), a3, *(_DWORD *)(a1 + 40));
  CFStringRef v5 = *(sqlite3_stmt **)(a2 + 8);
  int ID = CPRecordGetID();
  return sqlite3_bind_int(v5, v4, ID);
}

uint64_t CalDatabaseRemoveCalendarItemChangesInStoreToIndex(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if ((a2 & 0xFFFFFFFE) != 2) {
    CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_2();
  }
  if (!a3) {
    CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_1();
  }
  CFDateRef v7 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  CFTypeRef v8 = v7 + 20;
  os_unfair_lock_lock(v7 + 20);
  uint64_t v9 = _CalDatabaseRemoveCalendarItemChangesInStoreToIndex((uint64_t)v7, a2, a3, a4);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v8);
  }
  os_unfair_lock_unlock(v8);
  CFRelease(v7);
  return v9;
}

uint64_t _CalDatabaseRemoveCalendarItemChangesInStoreToIndex(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if ((a2 & 0xFFFFFFFE) != 2) {
    _CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_2();
  }
  if (!a3) {
    _CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_1();
  }
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___CalDatabaseRemoveCalendarItemChangesInStoreToIndex_block_invoke;
  v6[3] = &unk_1E5D65DE0;
  v6[4] = &v9;
  v6[5] = a1;
  int v7 = a4;
  int v8 = a2;
  void v6[6] = a3;
  _CalDatabaseLockForWriteTransaction(a1, (uint64_t)v6);
  uint64_t v4 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1A8F02480(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseRemoveCalendarItemChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  uint64_t v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  _DWORD v7[2] = __CalDatabaseRemoveCalendarItemChangesWithIndices_block_invoke;
  v7[3] = &unk_1E5D61B30;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A8F02580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveCalendarItemChangesWithIndices_block_invoke(uint64_t a1)
{
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassWithIndices();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseCopyCalendarItemChangesInCalendar(os_unfair_lock_s *a1, int a2, uint64_t a3, int a4, CFMutableDictionaryRef *a5)
{
  if (!a3) {
    CalDatabaseCopyCalendarItemChangesInCalendar_cold_1();
  }
  uint64_t v10 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFStringRef v11 = (const __CFString *)_CalDatabaseCopyClientIdentifier((uint64_t)a1);
  CStringPtr = CFStringGetCStringPtr(v11, 0x8000100u);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  int v14 = Mutable;
  if (a4) {
    CFStringRef v15 = @"entity_type = ? AND calendar_id = ? AND old_calendar_id != 0";
  }
  else {
    CFStringRef v15 = @"entity_type = ? AND calendar_id = ? AND old_calendar_id = 0";
  }
  CFStringAppend(Mutable, v15);
  CFStringAppend(v14, @" AND sequence_number > (select latest_consumed_sequence_number FROM ClientCursor WHERE client_identifier = ?)");
  CFStringAppend(v14, @" AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)");
  CFStringAppend(v14, @" AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = ? AND client_identifier = ?)");
  if ((a1[90]._os_unfair_lock_opaque & 0x80000000) == 0) {
    CFStringAppend(v14, @" AND sequence_number <= ?");
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __CalDatabaseCopyCalendarItemChangesInCalendar_block_invoke;
  v19[3] = &__block_descriptor_60_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  int v20 = a2;
  void v19[4] = a3;
  v19[5] = CStringPtr;
  v19[6] = a1;
  uint64_t v16 = (void *)MEMORY[0x1AD0E9DC0](v19);
  CFRelease(v11);
  uint64_t v17 = _CalDatabaseCopyCalendarItemChangesInternal((uint64_t)a1, 2, v14, v16, a5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v10);
  }
  os_unfair_lock_unlock(v10);

  return v17;
}

uint64_t __CalDatabaseCopyCalendarItemChangesInCalendar_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 56));
  uint64_t v4 = *(sqlite3_stmt **)(a2 + 8);
  int ID = CPRecordGetID();
  sqlite3_bind_int(v4, 2, ID);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 3, *(const char **)(a1 + 40), -1, 0);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 4, *(const char **)(a1 + 40), -1, 0);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 5, *(_DWORD *)(a1 + 56));
  uint64_t result = sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 6, *(const char **)(a1 + 40), -1, 0);
  int v7 = *(_DWORD *)(*(void *)(a1 + 48) + 360);
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v8 = *(sqlite3_stmt **)(a2 + 8);
    return sqlite3_bind_int(v8, 7, v7);
  }
  return result;
}

uint64_t _CalDatabaseCopyCalendarItemChangesInternal(uint64_t a1, uint64_t a2, const void *a3, void *a4, CFMutableDictionaryRef *a5)
{
  id v8 = a4;
  if (!a1) {
    goto LABEL_5;
  }
  if (!a5)
  {
    CFMutableDictionaryRef v10 = 0;
    goto LABEL_7;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
LABEL_5:
    uint64_t v11 = 0xFFFFFFFFLL;
    goto LABEL_27;
  }
  CFMutableDictionaryRef v10 = Mutable;
  *a5 = Mutable;
LABEL_7:
  if (v10)
  {
    RecordCFTypeRef Store = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v13 = RecordStore == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t ChangesForClassWithBindBlockAndProperties = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithBindBlockAndProperties();
  }
  else
  {
    uint64_t v17 = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      char v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v19) {
        os_unfair_lock_assert_owner(v19 + 20);
      }
    }
    uint64_t ChangesForClassWithBindBlockAndProperties = CPRecordStoreGetChangesForClassWithBindBlockAndProperties();
  }
  uint64_t v11 = ChangesForClassWithBindBlockAndProperties;
  if (a3) {
    CFRelease(a3);
  }
LABEL_27:

  return v11;
}

uint64_t CalDatabaseCopyCalendarItemChangesInStore(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, int a4, CFMutableDictionaryRef *a5)
{
  CFMutableDictionaryRef v10 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFStringRef v11 = (const __CFString *)_CalDatabaseCopyClientIdentifier((uint64_t)a1);
  CStringPtr = CFStringGetCStringPtr(v11, 0x8000100u);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, @"entity_type = ?");
  if (a3) {
    CFStringAppend(Mutable, @" AND store_id = ?");
  }
  if (a4) {
    CFStringRef v14 = @" AND old_calendar_id != 0";
  }
  else {
    CFStringRef v14 = @" AND old_calendar_id = 0";
  }
  CFStringAppend(Mutable, v14);
  CFStringAppend(Mutable, @" AND sequence_number > (select latest_consumed_sequence_number FROM ClientCursor WHERE client_identifier = ?)");
  CFStringAppend(Mutable, @" AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)");
  CFStringAppend(Mutable, @" AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = ? AND client_identifier = ?)");
  if ((a1[90]._os_unfair_lock_opaque & 0x80000000) == 0) {
    CFStringAppend(Mutable, @" AND sequence_number <= ?");
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __CalDatabaseCopyCalendarItemChangesInStore_block_invoke;
  v18[3] = &__block_descriptor_60_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  int v19 = a2;
  v18[4] = a3;
  v18[5] = CStringPtr;
  void v18[6] = a1;
  CFStringRef v15 = (void *)MEMORY[0x1AD0E9DC0](v18);
  CFRelease(v11);
  uint64_t v16 = _CalDatabaseCopyCalendarItemChangesInternal((uint64_t)a1, a2, Mutable, v15, a5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v10);
  }
  os_unfair_lock_unlock(v10);

  return v16;
}

uint64_t __CalDatabaseCopyCalendarItemChangesInStore_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 56));
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = *(sqlite3_stmt **)(a2 + 8);
    int ID = CPRecordGetID();
    sqlite3_bind_int(v4, 2, ID);
    int v6 = 3;
  }
  else
  {
    int v6 = 2;
  }
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), v6, *(const char **)(a1 + 40), -1, 0);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), v6 + 1, *(const char **)(a1 + 40), -1, 0);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), v6 + 2, *(_DWORD *)(a1 + 56));
  uint64_t result = sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), v6 + 3, *(const char **)(a1 + 40), -1, 0);
  int v8 = *(_DWORD *)(*(void *)(a1 + 48) + 360);
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v9 = *(sqlite3_stmt **)(a2 + 8);
    return sqlite3_bind_int(v9, v6 | 4, v8);
  }
  return result;
}

CFMutableDictionaryRef CalDatabaseCopyEventMovesInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  CFMutableDictionaryRef v3 = 0;
  CalDatabaseCopyCalendarItemChangesInStore(a1, 2, a2, 1, &v3);
  return v3;
}

CFMutableDictionaryRef CalDatabaseCopyEventMovesInCalendar(os_unfair_lock_s *a1, uint64_t a2)
{
  CFMutableDictionaryRef v3 = 0;
  CalDatabaseCopyCalendarItemChangesInCalendar(a1, 2, a2, 1, &v3);
  return v3;
}

uint64_t CalDatabaseCopyEventChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return CalDatabaseCopyCalendarItemChangesInCalendar(a1, 2, a2, 0, a3);
}

uint64_t CalDatabaseCopyEventChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return CalDatabaseCopyCalendarItemChangesInStore(a1, 2, a2, 0, a3);
}

uint64_t CalDatabaseRemoveEventChangesInStoreToIndex(uint64_t a1, uint64_t a2, int a3)
{
  return CalDatabaseRemoveCalendarItemChangesInStoreToIndex(a1, 2, a2, a3);
}

uint64_t CalDatabaseRemoveEventChangesInCalendarToIndex(uint64_t a1, uint64_t a2, int a3)
{
  return CalDatabaseRemoveCalendarItemChangesInCalendarToIndex(a1, 2, a2, a3);
}

uint64_t CalDatabaseRemoveEventChangesInStoreWithIndices(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  return CalDatabaseRemoveCalendarItemChangesWithIndices(a1, a3);
}

uint64_t CalDatabaseRemoveEventChangesInCalendarWithIndices(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  return CalDatabaseRemoveCalendarItemChangesWithIndices(a1, a3);
}

void CalDatabaseAmendDeleteForCalendarItemWithExternalID(os_unfair_lock_s *a1, int a2, const __CFString *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if (a3)
  {
    RecordCFTypeRef Store = _CalDatabaseGetRecordStore((uint64_t)a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v8 = RecordStore == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
      uint64_t v12 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v12)
      {
        uint64_t v13 = v12;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v12)
          {
            if (*(void *)(*(void *)v12 + 104))
            {
              CFStringRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14) {
                os_unfair_lock_assert_owner(v14 + 20);
              }
            }
          }
        }
        uint64_t v15 = CPSqliteConnectionStatementForSQL();
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = *(sqlite3_stmt **)(v15 + 8);
          BOOL v18 = cStringFromCFString(a3);
          sqlite3_bind_text(v17, 1, v18, -1, MEMORY[0x1E4F14838]);
          sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 2, a2);
          _CalDatabasePerformStatementWithWriteLock((uint64_t)a1, v16);
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v16)
            {
              uint64_t v19 = **(void **)v16;
              if (v19)
              {
                if (*(void *)(v19 + 104))
                {
                  int v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v20) {
                    os_unfair_lock_assert_owner(v20 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v13)
          {
            if (*(void *)(*(void *)v13 + 104))
            {
              uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v21) {
                os_unfair_lock_assert_owner(v21 + 20);
              }
            }
          }
        }
        CPSqliteDatabaseReleaseSqliteConnection();
      }
    }
  }
  else
  {
    __int16 v22 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315138;
      uint64_t v24 = "_CalDatabaseAmendDeleteForCalendarItemWithExternalID";
      _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_ERROR, "%s: externalID is null and it wasn't intended to be so. exiting this function now to avoid crash.", (uint8_t *)&v23, 0xCu);
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
}

BOOL _CalDatabasePrepareCalendarItemsInStoreForMigration(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t ID = CPRecordGetID();
  if (!_CalDatabaseRemoveCalendarItemChangesInStoreToIndex(a1, 2, a3, 0x7FFFFFFF)) {
    return 0;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE CalendarItem SET external_tracking_status = NULL, external_id = NULL, external_mod_tag = NULL, external_rep = NULL WHERE (calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = %d));",
         ID);
  BOOL v9 = v8 != 0;
  if (v8)
  {
    CFStringRef v10 = v8;
    CalPerformSQLWithConnection(a2, (uint64_t)v8);
    CFRelease(v10);
  }
  CFStringRef v11 = CFStringCreateWithFormat(v7, 0, @"SELECT calendaritem.rowid, calendaritem.orig_item_id, calendaritem.orig_date, calendaritem.unique_identifier from CalendarItem, Calendar, Store WHERE calendaritem.unique_identifier IS NULL and (calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = %d));",
          ID);
  if (v11)
  {
    CFStringRef v12 = v11;
    EnsureAllEventsHaveUIDsWithQuery((uint64_t)a2);
    CFRelease(v12);
  }
  return v9;
}

void EnsureAllEventsHaveUIDsWithQuery(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a1)
      {
        if (*(void *)(*(void *)a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v3 = CPSqliteConnectionStatementForSQL();
  if (v3)
  {
    uint64_t v4 = (uint64_t **)v3;
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v4)
      {
        uint64_t v6 = **v4;
        if (v6)
        {
          if (*(void *)(v6 + 104))
          {
            CFAllocatorRef v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CFDictionaryGetCount(Mutable) >= 1)
    {
      v8[0] = Mutable;
      v8[1] = a1;
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)ApplyUIDUpdate, v8);
    }
    CFRelease(Mutable);
  }
}

uint64_t _CalMoveCalendarItemsFromCalendarWithUIDToCalendarWithUID(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE CalendarItem SET calendar_id = %d WHERE calendar_id = %d;",
                      a3,
                      a2);
  if (result)
  {
    uint64_t v5 = (const void *)result;
    CalPerformSQLWithConnection(a1, result);
    CFRelease(v5);
    return 1;
  }
  return result;
}

uint64_t CalDatabaseCreateEventsSearchStatement(uint64_t *a1, void *a2, char a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1[5] + 80));
  RecordCFTypeRef Store = _CalDatabaseGetRecordStore(a1[5]);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = RecordStore == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_16;
  }
  uint64_t v10 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  if (CPSqliteDatabaseRegisterMatchesSearchStringFunction()
    || (a3 & 1) == 0
    && sqlite3_create_function(*(sqlite3 **)(*(void *)(v10 + 8) + 8), "ORGANIZER_MATCHES", 1, 1, a1, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))OrganizerMatcherCallback, 0, 0)|| sqlite3_create_function(*(sqlite3 **)(*(void *)(v10 + 8) + 8), "LOCATION_MATCHES", 1, 1, a1, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))LocationMatcherCallback, 0, 0))
  {
LABEL_16:
    CFStringRef v12 = (os_unfair_lock_s *)(a1[5] + 80);
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner((const os_unfair_lock *)(a1[5] + 80));
    }
    os_unfair_lock_unlock(v12);
    return 0;
  }
  else
  {
    SearchTerCFIndex m = (const __CFString *)CalFilterGetSearchTerm(a2);
    CFIndex Length = CFStringGetLength(SearchTerm);
    CFIndex v17 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    BOOL v18 = (char *)malloc_type_malloc(v17, 0x561B1E7EuLL);
    CFStringGetCString(SearchTerm, v18, v17, 0x8000100u);
    uint64_t v19 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:@"SELECT ROWID FROM CalendarItem WHERE "];
    id v20 = objc_alloc_init(MEMORY[0x1E4F28E78]);
    uint64_t v21 = v20;
    if ((a3 & 1) == 0) {
      [v20 appendString:@"STRING_MATCHES(?, IFNULL(summary, '') || ' ' || IFNULL(description,'')) OR ORGANIZER_MATCHES(organizer_id) OR "];
    }
    [v21 appendString:@"LOCATION_MATCHES(location_id)"];
    CFStringRef v22 = _CalEventCopyClauseForFilter(a2, a1[5]);
    if (v22)
    {
      CFStringRef v23 = v22;
      [v19 appendFormat:@"%@ AND (%@);", v22, v21];
      CFRelease(v23);
    }
    else
    {
      [v19 appendFormat:@"%@;", v21];
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v10 + 104))
      {
        uint64_t v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
    uint64_t v25 = CPSqliteDatabaseStatementForReading();
    uint64_t v13 = v25;
    if (v25) {
      sqlite3_bind_text(*(sqlite3_stmt **)(v25 + 8), 1, v18, -1, MEMORY[0x1E4F14838]);
    }
    else {
      free(v18);
    }
  }
  return v13;
}

void OrganizerMatcherCallback(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v5 = (CFSetRef *)sqlite3_user_data(a1);
  int v6 = sqlite3_value_int(*a3);
  BOOL v7 = CFSetGetValueIfPresent(v5[1], (const void *)v6, 0) != 0;
  sqlite3_result_int(a1, v7);
}

void LocationMatcherCallback(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v5 = (CFSetRef *)sqlite3_user_data(a1);
  int v6 = sqlite3_value_int(*a3);
  BOOL v7 = CFSetGetValueIfPresent(v5[2], (const void *)v6, 0) != 0;
  sqlite3_result_int(a1, v7);
}

CFStringRef _CalEventCopyClauseForFilter(void *a1, uint64_t a2)
{
  CFStringRef result = (CFStringRef)_CalFilterCopyCalendarIDClauseForQuery(a1, @"calendar_id");
  if (!result)
  {
    if (CalFilterIncludeDisableStores(a1))
    {
      return 0;
    }
    else
    {
      CFStringRef result = _CalDatabaseCopyDisabledStoresClause(a2);
      if (result)
      {
        CFStringRef v5 = result;
        CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"calendar_id IN (SELECT ROWID From Calendar WHERE store_id NOT IN %@)", result);
        CFRelease(v5);
        return v6;
      }
    }
  }
  return result;
}