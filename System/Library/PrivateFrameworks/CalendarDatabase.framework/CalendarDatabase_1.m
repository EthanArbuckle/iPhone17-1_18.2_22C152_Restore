void CalDatabaseCopyEventIdsForSearch(sqlite3_stmt **a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  BOOL v8;

  v4 = 99;
  while (1)
  {
    v5 = sqlite3_step(a1[1]);
    if (v5 != 100) {
      break;
    }
    v6 = sqlite3_column_int(a1[1], 0);
    if (v4 == 99 && CFArrayGetCount(*(CFArrayRef *)a2)) {
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)a2);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, (const void *)v6);
    v8 = v4-- != 0;
    if (**(unsigned char **)(a2 + 32) || !v8)
    {
      if (!**(unsigned char **)(a2 + 32)) {
        return;
      }
      goto LABEL_15;
    }
  }
  if ((v5 - 102) > 0xFFFFFFFD || (sqlite3_errmsg(*((sqlite3 **)*a1 + 1)), CFLog(), **(unsigned char **)(a2 + 32))) {
LABEL_15:
  }
    **(unsigned char **)(a2 + 24) = 0;
}

void CalDatabaseDeleteEventsSearchStatement(uint64_t **a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        uint64_t v3 = **a1;
        if (v3)
        {
          if (*(void *)(v3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  v5 = (os_unfair_lock_s *)(*(void *)(a2 + 40) + 80);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5);
  }
  os_unfair_lock_unlock(v5);
}

CFMutableArrayRef CalDatabaseCopyEventIDsOfEventsMatching(os_unfair_lock_s *a1, uint64_t a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, const __CFString *a6)
{
  v11 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v13 = RecordStore == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    uint64_t v16 = Database;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
    if (CPSqliteDatabaseRegisterMatchesSearchStringFunction())
    {
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(v11);
      }
      os_unfair_lock_unlock(v11);
      return 0;
    }
    Mutable = CFStringCreateMutable(0, 0);
    v20 = Mutable;
    if (a4) {
      CFStringRef v21 = @"SELECT CalendarItem.ROWID FROM CalendarItem, Location WHERE entity_type = 2 AND Location.ROWID = CalendarItem.location_id";
    }
    else {
      CFStringRef v21 = @"SELECT CalendarItem.ROWID FROM CalendarItem WHERE entity_type = 2";
    }
    CFStringAppend(Mutable, v21);
    v22 = CFStringCreateMutable(0, 0);
    v23 = v22;
    if (a3)
    {
      CFStringAppend(v22, @" AND ");
      CFStringAppend(v23, @"STRING_MATCHES(?, IFNULL(summary, ''))");
    }
    if (a4)
    {
      CFStringAppend(v23, @" AND ");
      CFStringAppend(v23, @"STRING_MATCHES(?, IFNULL(location.title, ''))");
    }
    if (a6)
    {
      CFStringAppend(v23, @" AND ");
      CFStringAppend(v23, @"(organizer_id == 0 AND STRING_MATCHES(?, IFNULL(summary, '')))");
    }
    if (a5)
    {
      CFStringAppend(v23, @" AND ");
      CFStringAppend(v23, @"STRING_MATCHES(?, IFNULL(description, ''))");
    }
    CFStringAppend(v20, v23);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v16 + 104))
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
    uint64_t v25 = CPSqliteDatabaseStatementForReading();
    if (v25)
    {
      v26 = (uint64_t **)v25;
      if (a3)
      {
        v27 = *(sqlite3_stmt **)(v25 + 8);
        v28 = cStringFromCFString(a3);
        LODWORD(a3) = 1;
        sqlite3_bind_text(v27, 1, v28, -1, MEMORY[0x1E4F14838]);
      }
      if (a4)
      {
        v29 = (sqlite3_stmt *)v26[1];
        LODWORD(a3) = a3 + 1;
        v30 = cStringFromCFString(a4);
        sqlite3_bind_text(v29, (int)a3, v30, -1, MEMORY[0x1E4F14838]);
      }
      if (a6)
      {
        v31 = (sqlite3_stmt *)v26[1];
        LODWORD(a3) = a3 + 1;
        v32 = cStringFromCFString(a6);
        sqlite3_bind_text(v31, (int)a3, v32, -1, MEMORY[0x1E4F14838]);
      }
      if (a5)
      {
        v33 = (sqlite3_stmt *)v26[1];
        v34 = cStringFromCFString(a5);
        sqlite3_bind_text(v33, a3 + 1, v34, -1, MEMORY[0x1E4F14838]);
      }
      CFMutableArrayRef v18 = CFArrayCreateMutable(0, 0, 0);
      CFMutableArrayRef v42 = v18;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v26)
        {
          uint64_t v35 = **v26;
          if (v35)
          {
            if (*(void *)(v35 + 104))
            {
              v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v36) {
                os_unfair_lock_assert_owner(v36 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v26)
        {
          uint64_t v37 = **v26;
          if (v37)
          {
            if (*(void *)(v37 + 104))
            {
              v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v38) {
                os_unfair_lock_assert_owner(v38 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    else
    {
      v39 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_1A8E81000, v39, OS_LOG_TYPE_ERROR, "Unable to create statement in CalDatabaseCopyEventIDsOfEventsMatching", v41, 2u);
      }
      CFMutableArrayRef v18 = 0;
    }
    CFRelease(v20);
    CFRelease(v23);
  }
  else
  {
    CFMutableArrayRef v18 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v11);
  }
  os_unfair_lock_unlock(v11);
  return v18;
}

char *cStringFromCFString(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v4 = (char *)malloc_type_malloc(v3, 0xA4F3C707uLL);
  CFStringGetCString(a1, v4, v3, 0x8000100u);
  return v4;
}

uint64_t _EventIDGatherer(uint64_t a1, CFMutableArrayRef *a2)
{
  int v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(*a2, (const void *)v3);
  return 0;
}

os_unfair_lock_s *CalEventCopyNextRecurrenceInSetForEvent(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  ValueAtIndex = (os_unfair_lock_s *)CalCopyDatabaseForEntity(a1);
  if (ValueAtIndex)
  {
    v5 = (id) CalEventCopyRecurrenceSet(a1);
    v6 = (const char *)[v5 UTF8String];
    double StartDate = CalEventGetStartDate(a1);
    SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
    if (SelectPrefix)
    {
      v9 = SelectPrefix;
      CFStringAppendFormat(SelectPrefix, 0, @" WHERE recurrence_set = ? AND start_date > ?");
      if (a2) {
        CFStringAppendFormat(v9, 0, @" AND external_id IS NOT NULL AND external_id != \"\"");
      }
      CFStringAppendFormat(v9, 0, @" ORDER BY start_date LIMIT 1");
      os_unfair_lock_lock(ValueAtIndex + 20);
      uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)ValueAtIndex);
      uint64_t v11 = RecordStore;
      if (CDBLockingAssertionsEnabled)
      {
        if (RecordStore)
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled)
      {
        if (Database)
        {
          if (*(void *)(Database + 104))
          {
            v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
      uint64_t v15 = CPSqliteDatabaseStatementForReading();
      uint64_t v16 = v15;
      if (v15)
      {
        sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, v6, -1, 0);
        sqlite3_bind_double(*(sqlite3_stmt **)(v16 + 8), 2, StartDate);
        if (CDBLockingAssertionsEnabled)
        {
          if (v11)
          {
            v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17) {
              os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
        CFArrayRef v18 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v16)
          {
            uint64_t v19 = **(void **)v16;
            if (v19)
            {
              if (*(void *)(v19 + 104))
              {
                v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v20) {
                  os_unfair_lock_assert_owner(v20 + 20);
                }
              }
            }
          }
        }
      }
      else
      {
        CFStringRef v21 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v24 = v9;
        }
        CFArrayRef v18 = 0;
      }
      CPSqliteStatementReset();
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(ValueAtIndex + 20);
      }
      os_unfair_lock_unlock(ValueAtIndex + 20);
      CFRelease(v9);
      CFRelease(ValueAtIndex);
      if (v18)
      {
        if (CFArrayGetCount(v18) < 1)
        {
          ValueAtIndex = 0;
        }
        else
        {
          ValueAtIndex = (os_unfair_lock_s *)CFArrayGetValueAtIndex(v18, 0);
          CFRetain(ValueAtIndex);
        }
        CFRelease(v18);
      }
      else
      {
        ValueAtIndex = 0;
      }
    }
    else
    {
      CFRelease(ValueAtIndex);
      ValueAtIndex = 0;
    }
  }
  return ValueAtIndex;
}

id CalEventGetStartDateOfEarliestOccurrenceEndingAfterDate(uint64_t a1, void *a2, void *a3)
{
  return CalEventGetStartDateOfEarliestOccurrenceEndingAfterDateWithExclusions(a1, a2, a3, 0, 0, 0);
}

id CalEventGetStartDateOfEarliestOccurrenceEndingAfterDateWithExclusions(uint64_t a1, void *a2, void *a3, int a4, int a5, int a6)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a3;
  if (CalCalendarItemHasRecurrenceRules(a1))
  {
    v54 = objc_alloc_init(CDBRecurrenceGenerator);
    BOOL v13 = CalCalendarItemCopyExceptionDatesAsCFDates(a1, 1);
    v57 = v11;
    v53 = v13;
    if (v13)
    {
      v56 = [MEMORY[0x1E4F1CAD0] setWithArray:v13];
    }
    else
    {
      v56 = 0;
    }
    uint64_t v52 = a1;
    CFMutableArrayRef v16 = CalEventCopyDetachedEvents(a1);
    v66[0] = MEMORY[0x1E4F143A8];
    v66[1] = 3221225472;
    v66[2] = __CalEventGetStartDateOfEarliestOccurrenceEndingAfterDateWithExclusions_block_invoke;
    v66[3] = &unk_1E5D687E8;
    id v55 = v12;
    id v17 = v12;
    id v67 = v17;
    CFMutableArrayRef v51 = v16;
    [(__CFArray *)v16 sortedArrayUsingComparator:v66];
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v19 = [v18 countByEnumeratingWithState:&v62 objects:v69 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v63;
      while (2)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v63 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void *)(*((void *)&v62 + 1) + 8 * i);
          if ((!a4
             || (CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(*(void *)(*((void *)&v62 + 1) + 8 * i), 0) & 1) == 0)&& (!a5 || CalCalendarItemGetStatus(v23) != 3)&& (!a6 || CalEventGetParticipationStatus(v23) != 2))
          {
            v24 = CalEventGetEndDateInTimeZone(v23, v17);
            if ([v24 CalIsAfterDate:v57])
            {
              uint64_t v25 = CalEventGetStartDateInTimeZone(v23, v17);

              goto LABEL_26;
            }
          }
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v62 objects:v69 count:16];
        if (v20) {
          continue;
        }
        break;
      }
    }
    uint64_t v25 = 0;
LABEL_26:

    uint64_t v49 = v25;
    if ([v18 count])
    {
      v26 = (void *)[v56 mutableCopy];
      if (!v26)
      {
        v26 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v18, "count"));
      }
    }
    else
    {
      v26 = 0;
    }
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    id v27 = v18;
    uint64_t v28 = [v27 countByEnumeratingWithState:&v58 objects:v68 count:16];
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *(void *)v59;
      do
      {
        for (uint64_t j = 0; j != v29; ++j)
        {
          if (*(void *)v59 != v30) {
            objc_enumerationMutation(v27);
          }
          uint64_t v32 = *(void *)(*((void *)&v58 + 1) + 8 * j);
          id v33 = v17;
          v34 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:CalEventGetOriginalStartDate(v32)];
          if (CalEventIsFloating(v32) || CalEventIsAllDay(v32))
          {
            uint64_t v35 = objc_msgSend(v34, "dateInTimeZone:fromTimeZone:", v33, 0, v49);

            v34 = (void *)v35;
          }

          [v26 addObject:v34];
        }
        uint64_t v29 = [v27 countByEnumeratingWithState:&v58 objects:v68 count:16];
      }
      while (v29);
    }

    unsigned int DurationWhileLocked = _CalEventGetDurationWhileLocked(v52, 0);
    uint64_t v37 = (void *)MEMORY[0x1E4F57838];
    v38 = [v57 dateByAddingTimeInterval:-(double)DurationWhileLocked];
    v39 = [v37 calendarDateWithDate:v38 timeZone:v17];

    v40 = (void *)MEMORY[0x1E4F57838];
    v41 = CalEventGetStartDateInTimeZone(v52, v17);
    CFMutableArrayRef v42 = [v40 calendarDateWithDate:v41 timeZone:v17];

    CFMutableArrayRef v43 = CalCalendarItemCopyRecurrences(v52);
    if (v26) {
      v44 = v26;
    }
    else {
      v44 = v56;
    }
    v45 = -[CDBRecurrenceGenerator nextOccurrenceDateWithCalRecurrences:exceptionDates:initialDate:afterDate:](v54, "nextOccurrenceDateWithCalRecurrences:exceptionDates:initialDate:afterDate:", v43, v44, v42, v39, v49);
    v46 = v50;
    if (v45)
    {
      if (!v50 || (char v47 = [v50 CalIsBeforeDate:v45], v46 = v50, (v47 & 1) == 0)) {
        v46 = v45;
      }
    }
    id v15 = v46;

    id v11 = v57;
    id v12 = v55;
  }
  else
  {
    v14 = CalEventGetEndDateInTimeZone(a1, v12);
    if ([v14 CalIsAfterDate:v11])
    {
      CalEventGetStartDateInTimeZone(a1, v12);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v15 = 0;
    }
  }
  return v15;
}

id CalEventGetEndDateInTimeZone(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", _CalEventGetEndDateWhileLocked(a1, 0));
  if (CalEventIsFloating(a1) || CalEventIsAllDay(a1))
  {
    uint64_t v5 = [v4 dateInTimeZone:v3 fromTimeZone:0];

    v4 = (void *)v5;
  }

  return v4;
}

id CalEventGetStartDateInTimeZone(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:CalEventGetStartDate(a1)];
  if (CalEventIsFloating(a1) || CalEventIsAllDay(a1))
  {
    uint64_t v5 = [v4 dateInTimeZone:v3 fromTimeZone:0];

    v4 = (void *)v5;
  }

  return v4;
}

uint64_t __CalEventGetStartDateOfEarliestOccurrenceEndingAfterDateWithExclusions_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  v7 = CalEventGetStartDateInTimeZone(a2, v5);
  v8 = CalEventGetStartDateInTimeZone((uint64_t)v6, *(void **)(a1 + 32));

  uint64_t v9 = [v7 compare:v8];
  return v9;
}

uint64_t CalDatabaseCopyEventsWithRecurrenceSet(os_unfair_lock_s *a1, const __CFString *a2)
{
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v6 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = RecordStore == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  uint64_t SelectStatement = CPRecordStoreCreateSelectStatement();
  id v11 = (const void *)SelectStatement;
  if (Database && SelectStatement)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        id v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    uint64_t v13 = CPSqliteDatabaseStatementForReading();
    if (v13)
    {
      v14 = (uint64_t **)v13;
      id v15 = *(sqlite3_stmt **)(v13 + 8);
      CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
      sqlite3_bind_text(v15, 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
      if (CDBLockingAssertionsEnabled)
      {
        if (v6)
        {
          id v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17) {
            os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
      uint64_t v18 = CPRecordStoreProcessStatement();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v14)
        {
          uint64_t v19 = **v14;
          if (v19)
          {
            if (*(void *)(v19 + 104))
            {
              uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20) {
                os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    else
    {
      uint64_t v18 = 0;
    }
    goto LABEL_28;
  }
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  if (SelectStatement)
  {
LABEL_28:
    CFRelease(v11);
    uint64_t v21 = v18;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v21;
}

uint64_t CalDatabaseCopyOriginalVisibleEventsWithDates(os_unfair_lock_s *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v9 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = RecordStore == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  uint64_t SelectStatement = CPRecordStoreCreateSelectStatement();
  v14 = (const void *)SelectStatement;
  if (Database && SelectStatement)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        id v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    uint64_t v16 = CPSqliteDatabaseStatementForReading();
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(sqlite3_stmt **)(v16 + 8);
      [v6 timeIntervalSinceReferenceDate];
      sqlite3_bind_int64(v18, 1, (uint64_t)v19);
      uint64_t v20 = *(sqlite3_stmt **)(v17 + 8);
      [v5 timeIntervalSinceReferenceDate];
      sqlite3_bind_int64(v20, 2, (uint64_t)v21);
      if (CDBLockingAssertionsEnabled)
      {
        if (v9)
        {
          v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v22) {
            os_unfair_lock_assert_owner(v22 + 20);
          }
        }
      }
      uint64_t v23 = CPRecordStoreProcessStatement();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v17)
        {
          uint64_t v24 = **(void **)v17;
          if (v24)
          {
            if (*(void *)(v24 + 104))
            {
              uint64_t v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v25) {
                os_unfair_lock_assert_owner(v25 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    else
    {
      uint64_t v23 = 0;
    }
    goto LABEL_28;
  }
  uint64_t v23 = 0;
  uint64_t v26 = 0;
  if (SelectStatement)
  {
LABEL_28:
    CFRelease(v14);
    uint64_t v26 = v23;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);

  return v26;
}

void CalEventCopyRowIDsAndUniqueIdentifiersInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableArrayRef *a3, CFMutableArrayRef *a4)
{
  BOOL v7 = a1 + 20;
  CFMutableArrayRef cf = 0;
  CFMutableArrayRef Mutable = 0;
  os_unfair_lock_lock(a1 + 20);
  if (_CalDatabaseGetRecordStore((uint64_t)a1))
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
      uint64_t v11 = CPSqliteDatabaseStatementForReading();
      if (v11)
      {
        uint64_t v12 = v11;
        CFMutableArrayRef cf = CFArrayCreateMutable(0, 0, 0);
        CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        CPRecordGetID();
        if (CDBLockingAssertionsEnabled)
        {
          uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13) {
            os_unfair_lock_assert_owner(v13 + 20);
          }
        }
        sqlite3_int64 RowidForRecordID = CPRecordStoreGetRowidForRecordID();
        sqlite3_bind_int64(*(sqlite3_stmt **)(v12 + 8), 1, RowidForRecordID);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v12)
          {
            uint64_t v15 = **(void **)v12;
            if (v15)
            {
              if (*(void *)(v15 + 104))
              {
                uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v16) {
                  os_unfair_lock_assert_owner(v16 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementSendResults();
      }
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);
  if (a3)
  {
    *a3 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  if (a4)
  {
    *a4 = Mutable;
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t handleRowAndUniqueIdentifier(uint64_t a1, CFMutableArrayRef *a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  id v5 = objc_msgSend(NSString, "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1));
  CFArrayAppendValue(*a2, (const void *)v4);
  CFArrayAppendValue(a2[1], v5);

  return 0;
}

void _CalEventLoadCreatedByIdentityProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    uint64_t Store = CPRecordGetStore();
    uint64_t IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      uint64_t v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            id v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      uint64_t v9 = (const void *)_CalIdentityCopyAddress(v5);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
      CPRecordInitializeProperty();
      if (v9)
      {
        CFRelease(v9);
      }
    }
  }
}

void _CalEventLoadModifiedByIdentityProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    uint64_t Store = CPRecordGetStore();
    uint64_t IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      uint64_t v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            id v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      uint64_t v9 = (const void *)_CalIdentityCopyAddress(v5);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
      CPRecordInitializeProperty();
      if (v9)
      {
        CFRelease(v9);
      }
    }
  }
}

uint64_t _CalEventInsertOrganizerRow(uint64_t a1, uint64_t *a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  int v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  int v6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
  if (sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8)) >= 4
    && (BOOL v7 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 3)) != 0)
  {
    v8 = (const char *)v7;
    size_t v9 = strlen((const char *)v7) + 1;
    BOOL v10 = (char *)malloc_type_malloc(v9, 0xCBA69FD4uLL);
    strncpy(v10, v8, v9);
  }
  else
  {
    BOOL v10 = 0;
  }
  CFStringRef v11 = _CalDBCreateUUIDString();
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(v11);
  CFRelease(v11);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[1] + 8), 1, 8);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[1] + 8), 2, v5);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[1] + 8), 3, v4);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[1] + 8), 4, v6);
  uint64_t v13 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
  sqlite3_bind_text(*(sqlite3_stmt **)(a2[1] + 8), 5, v10, -1, MEMORY[0x1E4F14838]);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2[1] + 8), 6, CStringFromCFString, -1, v13);
  v14 = (uint64_t **)a2[1];
  if (CDBLockingAssertionsEnabled)
  {
    if (v14)
    {
      if (*v14)
      {
        uint64_t v15 = **v14;
        if (v15)
        {
          if (*(void *)(v15 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  uint64_t v17 = (uint64_t **)a2[1];
  if (CDBLockingAssertionsEnabled)
  {
    if (v17)
    {
      if (*v17)
      {
        uint64_t v18 = **v17;
        if (v18)
        {
          if (*(void *)(v18 + 104))
          {
            double v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19) {
              os_unfair_lock_assert_owner(v19 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  uint64_t v20 = *a2;
  if (CDBLockingAssertionsEnabled)
  {
    if (v20)
    {
      if (*(void *)v20)
      {
        if (*(void *)(*(void *)v20 + 104))
        {
          double v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v21) {
            os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
    }
  }
  int Insert = CPSqliteConnectionRowidOfLastInsert();
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[2] + 8), 1, Insert);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[2] + 8), 2, v4);
  uint64_t v23 = (uint64_t **)a2[2];
  if (CDBLockingAssertionsEnabled)
  {
    if (v23)
    {
      if (*v23)
      {
        uint64_t v24 = **v23;
        if (v24)
        {
          if (*(void *)(v24 + 104))
          {
            uint64_t v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v25) {
              os_unfair_lock_assert_owner(v25 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  uint64_t v26 = (uint64_t **)a2[2];
  if (CDBLockingAssertionsEnabled)
  {
    if (v26)
    {
      if (*v26)
      {
        uint64_t v27 = **v26;
        if (v27)
        {
          if (*(void *)(v27 + 104))
          {
            uint64_t v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28) {
              os_unfair_lock_assert_owner(v28 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  return 0;
}

uint64_t _CalEventInsertLocationRow(uint64_t a1, uint64_t a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  int v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  sqlite3_bind_text(*(sqlite3_stmt **)(*(void *)(a2 + 8) + 8), 1, (const char *)v5, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int(*(sqlite3_stmt **)(*(void *)(a2 + 8) + 8), 2, v4);
  int v6 = *(uint64_t ***)(a2 + 8);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*v6)
    {
      uint64_t v8 = **v6;
      if (v8)
      {
        if (*(void *)(v8 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  BOOL v10 = *(uint64_t ***)(a2 + 8);
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (*v10)
    {
      uint64_t v12 = **v10;
      if (v12)
      {
        if (*(void *)(v12 + 104))
        {
          uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13) {
            os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  return 0;
}

uint64_t _CalEventUpdateLocationIDForRow(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = a1;
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  LODWORD(v3) = sqlite3_column_int(*(sqlite3_stmt **)(v3 + 8), 1);
  sqlite3_bind_int((sqlite3_stmt *)a2[1], 1, v4);
  sqlite3_bind_int((sqlite3_stmt *)a2[1], 2, v3);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        uint64_t v5 = **a2;
        if (v5)
        {
          if (*(void *)(v5 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        uint64_t v7 = **a2;
        if (v7)
        {
          if (*(void *)(v7 + 104))
          {
            uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  return 0;
}

uint64_t _CalEventUpdateStatusAndHasRecurrences(uint64_t a1, uint64_t a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  unsigned int v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  sqlite3_bind_int(*(sqlite3_stmt **)(*(void *)(a2 + 16) + 8), 1, v4);
  int v6 = *(uint64_t ***)(a2 + 16);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*v6)
    {
      uint64_t v8 = **v6;
      if (v8)
      {
        if (*(void *)(v8 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  int v10 = CPSqliteStatementIntegerResult();
  BOOL v11 = *(uint64_t ***)(a2 + 16);
  if (CDBLockingAssertionsEnabled) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v11)
    {
      uint64_t v13 = **v11;
      if (v13)
      {
        if (*(void *)(v13 + 104))
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (v5 || v10 >= 1)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(*(void *)(a2 + 8) + 8), 1, (unsigned __int16)v5);
    sqlite3_bind_int(*(sqlite3_stmt **)(*(void *)(a2 + 8) + 8), 2, HIWORD(v5));
    sqlite3_bind_int(*(sqlite3_stmt **)(*(void *)(a2 + 8) + 8), 3, v10 > 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(*(void *)(a2 + 8) + 8), 4, v4);
    uint64_t v15 = *(uint64_t ***)(a2 + 8);
    if (CDBLockingAssertionsEnabled)
    {
      if (v15)
      {
        if (*v15)
        {
          uint64_t v16 = **v15;
          if (v16)
          {
            if (*(void *)(v16 + 104))
            {
              uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17) {
                os_unfair_lock_assert_owner(v17 + 20);
              }
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    uint64_t v18 = *(uint64_t ***)(a2 + 8);
    if (CDBLockingAssertionsEnabled)
    {
      if (v18)
      {
        if (*v18)
        {
          uint64_t v19 = **v18;
          if (v19)
          {
            if (*(void *)(v19 + 104))
            {
              uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20) {
                os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  return 0;
}

void _CalEventRedetectConferenceURLHandler(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  unsigned int v5 = sqlite3_value_text(*a3);
  int v6 = (unsigned __int8 *)sqlite3_value_text(a3[1]);
  BOOL v7 = (unsigned __int8 *)sqlite3_value_text(a3[2]);
  uint64_t v8 = (unsigned __int8 *)sqlite3_value_text(a3[3]);
  if (v5)
  {
    id v12 = (id)[[NSString alloc] initWithBytesNoCopy:v5 length:strlen((const char *)v5) encoding:4 freeWhenDone:0];
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  id v12 = 0;
  if (v6) {
LABEL_3:
  }
    int v6 = (unsigned __int8 *)[[NSString alloc] initWithBytesNoCopy:v6 length:strlen((const char *)v6) encoding:4 freeWhenDone:0];
LABEL_4:
  if (v7) {
    BOOL v7 = (unsigned __int8 *)[[NSString alloc] initWithBytesNoCopy:v7 length:strlen((const char *)v7) encoding:4 freeWhenDone:0];
  }
  if (v8) {
    uint64_t v8 = (unsigned __int8 *)[[NSString alloc] initWithBytesNoCopy:v8 length:strlen((const char *)v8) encoding:4 freeWhenDone:0];
  }
  size_t v9 = (void *)_CalEventDetectAndCopyConferenceURLFromSources(v12, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    id v10 = v9;
    BOOL v11 = strdup((const char *)[v10 UTF8String]);
    sqlite3_result_text(a1, v11, -1, MEMORY[0x1E4F14838]);
    CFRelease(v10);
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

uint64_t _CalEventDetectAndCopyConferenceURLFromSources(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = objc_opt_new();
  if (a3 | a4)
  {
    size_t v9 = [MEMORY[0x1E4F57740] fullDisplayStringWithTitle:a3 address:a4];
    [v8 addObject:v9];
  }
  id v10 = a1;
  BOOL v11 = [MEMORY[0x1E4F57698] deserializeConference:v10];
  id v12 = v11;
  if (v11)
  {
    uint64_t v13 = [v11 range];
    uint64_t v15 = objc_msgSend(v10, "stringByReplacingCharactersInRange:withString:", v13, v14, &stru_1EFF6D0F0);

    if ([v15 hasSuffix:@"\n\n"])
    {
      objc_msgSend(v15, "substringToIndex:", objc_msgSend(v15, "length") - 2);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v10 = v15;
    }
  }
  uint64_t v16 = [v10 CDVStringByXMLUnquoting];

  if (v16) {
    [v8 addObject:v16];
  }
  if (a2) {
    [v8 addObject:a2];
  }
  uint64_t v17 = [MEMORY[0x1E4F576A0] conferenceURLFromSources:v8];
  uint64_t v18 = [v17 absoluteString];

  return v18;
}

uint64_t _CalEventRemoveOriginalEventId(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty() == a2)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          unsigned int v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5) {
            os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
  }
  return 0;
}

uint64_t _CalEventValidateIdentityForProperties(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    CFStringRef Property = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
    CFStringRef v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CFStringRef v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    CFStringRef v13 = (const __CFString *)result;
    if (Property && (uint64_t result = CFStringGetLength(Property)) != 0
      || v9 && (uint64_t result = CFStringGetLength(v9)) != 0
      || v11 && (uint64_t result = CFStringGetLength(v11)) != 0)
    {
      if (!a2) {
        return result;
      }
    }
    else
    {
      if (!v13) {
        return result;
      }
      uint64_t result = CFStringGetLength(v13);
      if (!a2 || !result) {
        return result;
      }
    }
    uint64_t result = _CalIdentityGetID(Property, v9, v11, v13, a2);
    if (result != -1)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t BuildEventUIArray(uint64_t a1, __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  AddIntToDictionary(v5, Mutable, @"rowid");
  int v6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  AddIntToDictionary(v6, Mutable, @"origEventId");
  double valuePtr = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"origStartDate", v7);
  CFRelease(v7);
  uint64_t v8 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 3);
  if (v8)
  {
    CFStringRef v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v8, 0x8000100u);
    CFDictionaryAddValue(Mutable, @"uniqueId", v9);
    CFRelease(v9);
  }
  int v10 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFDictionaryAddValue(a2, (const void *)v10, Mutable);
  CFRelease(Mutable);
  return 0;
}

uint64_t ApplyUIDUpdate(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  return UpdateUIDForRecord(*(void **)(a3 + 8), a2, *(const __CFDictionary **)a3);
}

void AddIntToDictionary(int a1, __CFDictionary *a2, const void *a3)
{
  int valuePtr = a1;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(a2, a3, v5);
  CFRelease(v5);
}

uint64_t UpdateUIDForRecord(void *a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  if (CFDictionaryGetValue(a2, @"uniqueId")) {
    return 1;
  }
  LODWORD(valuePtr) = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"origEventId");
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  CFNumberRef v7 = (const void *)(int)valuePtr;
  LODWORD(valuePtr) = 0;
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a2, @"rowid");
  CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
  uint64_t v9 = valuePtr;
  if (!v7) {
    goto LABEL_8;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(a3, v7);
  if (!result) {
    return result;
  }
  CFDictionaryRef v11 = (const __CFDictionary *)result;
  if ((const __CFDictionary *)result == a2
    || (LODWORD(valuePtr) = 0,
        CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)result, @"origEventId"),
        CFNumberGetValue(v12, kCFNumberIntType, &valuePtr),
        valuePtr == v9)
    && (LODWORD(valuePtr) = 0,
        CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v11, @"rowid"),
        CFNumberGetValue(v13, kCFNumberIntType, &valuePtr),
        (int)valuePtr > (int)v9))
  {
    CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"UPDATE CalendarItem SET orig_event_id = 0, orig_start_date = 0 WHERE rowid = %d;",
            v9);
    CalPerformSQLWithConnection(a1, (uint64_t)v14);
    CFRelease(v14);
LABEL_8:
    uint64_t v15 = 0;
LABEL_9:
    uint64_t valuePtr = 0;
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a2, @"origStartDate");
    CFNumberGetValue(v16, kCFNumberDoubleType, &valuePtr);
    if (v15)
    {
      CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"%@/RID=%.f", v15, valuePtr);
    }
    else
    {
      CFUUIDRef v18 = CFUUIDCreate(0);
      CFStringRef v17 = CFUUIDCreateString(0, v18);
      CFRelease(v18);
    }
    CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"UPDATE CalendarItem SET unique_identifier=\"%@\" WHERE rowid = %d;",
            v17,
            v9);
    CalPerformSQLWithConnection(a1, (uint64_t)v19);
    CFRelease(v19);
    CFDictionarySetValue(a2, @"uniqueId", v17);
    CFRelease(v17);
    return 1;
  }
  uint64_t v15 = CFDictionaryGetValue(v11, @"uniqueId");
  if (v15) {
    goto LABEL_9;
  }
  uint64_t result = UpdateUIDForRecord(a1, v11, a3);
  if (result)
  {
    uint64_t v15 = CFDictionaryGetValue(v11, @"uniqueId");
    goto LABEL_9;
  }
  return result;
}

uint64_t CalAttachmentUpdateFromICSAttachment(void *a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [v3 filename];
  CalAttachmentSetFilename((uint64_t)a1);
  [v3 fmtype];
  CalAttachmentSetFormat((uint64_t)a1);
  objc_msgSend(v3, "x_apple_autoarchived");
  CalAttachmentSetAutoArchived((uint64_t)a1);
  if ([v3 hasSize])
  {
    objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v3, "size"));
    CalAttachmentSetFileSize((uint64_t)a1);
  }
  if (![v3 isBinary])
  {
    CalAttachmentSetIsBinary((uint64_t)a1);
    objc_msgSend(v3, "value", a1);
    CFURLRef v7 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      CalAttachmentSetURL((uint64_t)a1, v7);
      objc_msgSend(v3, "managed_id");
      CalAttachmentSetExternalID((uint64_t)a1);
    }

    goto LABEL_31;
  }
  CalAttachmentSetIsBinary((uint64_t)a1);
  bzero(v53, 0x401uLL);
  CFTypeRef v4 = CalAttachmentCopyAttachmentFile((uint64_t)a1);
  if (v4)
  {
    CFNumberRef v5 = v4;
    id v6 = CalAttachmentFileCopyURLAppropriateForFile((uint64_t)v4);
    CFRelease(v5);
  }
  else
  {
    id v6 = 0;
  }
  CFNumberRef v8 = objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager", a1);
  uint64_t v9 = [v8 CalTemporaryDirectoryAppropriateForURL:v6];

  int v10 = [v9 path];
  id v11 = [v10 stringByAppendingPathComponent:@"CalAttachmentXXXXXX"];
  [v11 UTF8String];
  [v11 length];
  __strncpy_chk();
  if (mkstemp((char *)v53) != -1)
  {
    CFNumberRef v12 = [NSString stringWithUTF8String:v53];
    if (!v12)
    {
      uint64_t v25 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A8E81000, v25, OS_LOG_TYPE_DEBUG, "Couldn't create a path to write the inline attachment into", buf, 2u);
      }
      int v24 = 1;
      goto LABEL_28;
    }
    CFNumberRef v13 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v12];
    v41 = v3;
    CFStringRef v14 = [v3 value];
    id v47 = 0;
    [v14 writeToURL:v13 options:1 error:&v47];
    id v15 = v47;

    CFNumberRef v16 = [v13 path];
    CalAttachmentFileSetDataProtection(v16);

    if (v15)
    {
      CFStringRef v17 = (void *)CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        CFUUIDRef v18 = v17;
        CFStringRef v19 = [v41 filename];
        *(_DWORD *)buf = 138412546;
        v50 = v19;
        __int16 v51 = 2112;
        id v52 = v15;
        uint64_t v20 = "Error writing inline attachment (%@) to disk: %@";
        double v21 = v18;
        uint32_t v22 = 22;
LABEL_25:
        _os_log_impl(&dword_1A8E81000, v21, OS_LOG_TYPE_DEBUG, v20, buf, v22);
      }
    }
    else
    {
      char v26 = CalAttachmentSetFileDataAndQuarantine(a1, (uint64_t)v12);
      unlink((const char *)v53);
      if (v26)
      {
        int v24 = 0;
LABEL_27:

        id v3 = v41;
LABEL_28:

        goto LABEL_29;
      }
      uint64_t v27 = (void *)CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        CFUUIDRef v18 = v27;
        CFStringRef v19 = [v41 filename];
        *(_DWORD *)buf = 138412290;
        v50 = v19;
        uint64_t v20 = "Error setting file data (%@) in database";
        double v21 = v18;
        uint32_t v22 = 12;
        goto LABEL_25;
      }
    }
    int v24 = 1;
    goto LABEL_27;
  }
  uint64_t v23 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A8E81000, v23, OS_LOG_TYPE_DEBUG, "Couldn't create a path to write the inline attachment into", buf, 2u);
  }
  int v24 = 1;
LABEL_29:

  if (v24)
  {
    uint64_t v28 = 0;
    goto LABEL_47;
  }
LABEL_31:
  id v29 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v42 = v3;
  uint64_t v30 = [v3 allParameters];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v31 = [v30 countByEnumeratingWithState:&v43 objects:v48 count:16];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v32; ++i)
      {
        if (*(void *)v44 != v33) {
          objc_enumerationMutation(v30);
        }
        uint64_t v35 = *(void **)(*((void *)&v43 + 1) + 8 * i);
        v36 = [v35 uppercaseString];
        if ((_isSavedAttachmentParameter(v36) & 1) == 0)
        {
          uint64_t v37 = [v30 objectForKey:v35];
          if (v37)
          {
            v38 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v53 = 138412290;
              v54 = v35;
              _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_DEBUG, "Found an unrecognized parameter: %@", v53, 0xCu);
            }
            [v29 setObject:v37 forKey:v35];
          }
        }
      }
      uint64_t v32 = [v30 countByEnumeratingWithState:&v43 objects:v48 count:16];
    }
    while (v32);
  }
  if ([v29 count]) {
    CalAttachmentSetXProperties(v40, (CFDataRef)v29);
  }

  uint64_t v28 = 1;
  id v3 = v42;
LABEL_47:

  return v28;
}

uint64_t _isSavedAttachmentParameter(void *a1)
{
  uint64_t v1 = _isSavedAttachmentParameter_onceToken;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&_isSavedAttachmentParameter_onceToken, &__block_literal_global_13);
  }
  uint64_t v3 = [(id)_isSavedAttachmentParameter_savedParameterNames containsObject:v2];

  return v3;
}

CFURLRef ICSAttachmentFromCalAttachment(uint64_t a1, int a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    CFURLRef v6 = 0;
    goto LABEL_54;
  }
  CFTypeRef v4 = (const void *)CalAttachmentCopyLocalURL(a1);
  if (CalAttachmentIsBinary(a1))
  {
    int v5 = 1;
    if (!v4) {
      goto LABEL_11;
    }
LABEL_10:
    CFRelease(v4);
    goto LABEL_11;
  }
  if (v4) {
    int v5 = a2;
  }
  else {
    int v5 = 0;
  }
  if (v4) {
    goto LABEL_10;
  }
LABEL_11:
  if (!v5)
  {
    CFURLRef v14 = CalAttachmentCopyURL(a1);
    if (v14)
    {
      CFURLRef v15 = v14;
      CFNumberRef v16 = CFURLGetString(v14);
      if (v16)
      {
        id v17 = objc_alloc(MEMORY[0x1E4FB7ED8]);
        CFUUIDRef v18 = [MEMORY[0x1E4F1CB10] URLWithString:v16];
        CFURLRef v6 = (const __CFURL *)[v17 initWithURL:v18];
      }
      else
      {
        CFURLRef v6 = 0;
      }
      CFRelease(v15);

      goto LABEL_33;
    }
    goto LABEL_32;
  }
  CFURLRef v7 = (const __CFURL *)CalAttachmentCopyLocalURLForArchivedData(a1);
  CFURLRef v6 = v7;
  if (v7)
  {
    CFStringRef v8 = CFURLCopyFileSystemPath(v7, kCFURLPOSIXPathStyle);
    if (!v8)
    {
      CFRelease(v6);
      goto LABEL_32;
    }
    CFStringRef v9 = v8;
    bzero(buffer, 0x401uLL);
    int v10 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      buf.st_dev = 138412290;
      *(void *)&buf.st_mode = v9;
      _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_DEBUG, "Memory mapping the file at %@", (uint8_t *)&buf, 0xCu);
    }
    if (CFStringGetFileSystemRepresentation(v9, buffer, 1024) == 1)
    {
      int v11 = open(buffer, 0, 0);
      if ((v11 & 0x80000000) == 0)
      {
        int v12 = v11;
        memset(&buf, 0, sizeof(buf));
        if (!fstat(v11, &buf))
        {
          if (!buf.st_size)
          {
            long long v45 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(context.version) = 0;
              _os_log_impl(&dword_1A8E81000, v45, OS_LOG_TYPE_DEBUG, "Memory mapping a zero byte file", (uint8_t *)&context, 2u);
            }
            CFDataRef v13 = CFDataCreate(0, 0, 0);
            goto LABEL_20;
          }
          v39 = (const UInt8 *)mmap(0, buf.st_size, 1, 1025, v12, 0);
          if (v39 != (const UInt8 *)-1)
          {
            uint64_t v40 = v39;
            context.version = 0;
            memset(&context.retain, 0, 40);
            context.info = (void *)buf.st_size;
            context.deallocate = (CFAllocatorDeallocateCallBack)_mmapDeallocatorCallback;
            context.preferredSize = 0;
            CFAllocatorRef v41 = CFAllocatorCreate(0, &context);
            if (v41)
            {
              CFAllocatorRef v42 = v41;
              CFDataRef v43 = CFDataCreateWithBytesNoCopy(0, v40, buf.st_size, v41);
              long long v44 = (UInt8 *)v40;
              CFDataRef v13 = v43;
              if (!v43) {
                munmap(v44, buf.st_size);
              }
              CFRelease(v42);
            }
            else
            {
              CFDataRef v13 = 0;
            }
            v50 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v57 = 138412546;
              CFStringRef v58 = v9;
              __int16 v59 = 2048;
              off_t st_size = buf.st_size;
              _os_log_impl(&dword_1A8E81000, v50, OS_LOG_TYPE_DEBUG, "Successfully mapped %@ (%lld bytes)", v57, 0x16u);
            }
            goto LABEL_20;
          }
          long long v46 = (void *)CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            id v47 = v46;
            v48 = __error();
            uint64_t v49 = strerror(*v48);
            LODWORD(context.version) = 138412546;
            *(CFIndex *)((char *)&context.version + 4) = (CFIndex)v9;
            WORD2(context.info) = 2080;
            *(void **)((char *)&context.info + 6) = v49;
            _os_log_impl(&dword_1A8E81000, v47, OS_LOG_TYPE_DEBUG, "Could not mmap %@: %s", (uint8_t *)&context, 0x16u);
          }
        }
        CFDataRef v13 = 0;
LABEL_20:
        close(v12);
        goto LABEL_30;
      }
    }
    else
    {
      CFStringRef v19 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        buf.st_dev = 138412290;
        *(void *)&buf.st_mode = v9;
        _os_log_impl(&dword_1A8E81000, v19, OS_LOG_TYPE_DEBUG, "Can't get file system representation for backup file path %@", (uint8_t *)&buf, 0xCu);
      }
    }
    CFDataRef v13 = 0;
LABEL_30:
    CFRelease(v9);
    CFRelease(v6);
    if (v13)
    {
      CFURLRef v6 = (const __CFURL *)[objc_alloc(MEMORY[0x1E4FB7ED8]) initWithData:v13];

      goto LABEL_33;
    }
LABEL_32:
    CFURLRef v6 = 0;
  }
LABEL_33:
  __int16 v51 = (void *)CalAttachmentCopyFormat(a1);
  -[__CFURL setFmtype:](v6, "setFmtype:");
  if ((a2 & 1) == 0)
  {
    BOOL IsAutoArchived = CalAttachmentIsAutoArchived(a1);
    double v21 = (__CFString *)CalAttachmentCopyFilename(a1);
    uint32_t v22 = v21;
    if (IsAutoArchived)
    {
      uint64_t v23 = [(__CFString *)v21 stringByAppendingPathExtension:@"zip"];

      uint32_t v22 = (void *)v23;
    }
    [(__CFURL *)v6 setX_apple_filename:v22];
    [(__CFURL *)v6 setX_apple_autoarchived:IsAutoArchived];
    int v24 = (void *)CalAttachmentCopyExternalID(a1);
    [(__CFURL *)v6 setManaged_id:v24];
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v25 = (void *)CalAttachmentCopyFileSize(a1);
    char v26 = v25;
    if (v25) {
      -[__CFURL setSize:](v6, "setSize:", [v25 intValue]);
    }
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v27 = (id)CalAttachmentCopyXProperties(a1);
  uint64_t v28 = [v27 countByEnumeratingWithState:&v52 objects:v56 count:16];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = *(void *)v53;
    do
    {
      for (uint64_t i = 0; i != v29; ++i)
      {
        if (*(void *)v53 != v30) {
          objc_enumerationMutation(v27);
        }
        uint64_t v32 = *(void **)(*((void *)&v52 + 1) + 8 * i);
        uint64_t v33 = [v32 uppercaseString];
        char isSavedAttachmentParameter = _isSavedAttachmentParameter(v33);

        if ((isSavedAttachmentParameter & 1) == 0)
        {
          uint64_t v35 = [(__CFURL *)v6 parameterValueForName:v32];

          if (v35)
          {
            v36 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buffer = 138543362;
              long long v64 = v32;
              _os_log_impl(&dword_1A8E81000, v36, OS_LOG_TYPE_FAULT, "We have a saved value for an unrecognized parameter %{public}@ on an attachment, but the property already has a parameter with that name! _isSavedAttachmentParameter may be out of date.", (uint8_t *)buffer, 0xCu);
            }
          }
          else
          {
            uint64_t v37 = [v27 objectForKeyedSubscript:v32];
            [(__CFURL *)v6 setParameterValue:v37 forName:v32];
          }
        }
      }
      uint64_t v29 = [v27 countByEnumeratingWithState:&v52 objects:v56 count:16];
    }
    while (v29);
  }

LABEL_54:
  return v6;
}

uint64_t ___isSavedAttachmentParameter_block_invoke()
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", *MEMORY[0x1E4FB81E0], *MEMORY[0x1E4FB81C8], *MEMORY[0x1E4FB82E0], *MEMORY[0x1E4FB8208], *MEMORY[0x1E4FB8200], *MEMORY[0x1E4FB8038], *MEMORY[0x1E4FB8290], *MEMORY[0x1E4FB7FD0], 0);
  uint64_t v1 = _isSavedAttachmentParameter_savedParameterNames;
  _isSavedAttachmentParameter_savedParameterNames = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

void _mmapDeallocatorCallback(void *a1, size_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  munmap(a1, a2);
  uint64_t v3 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 134217984;
    size_t v5 = a2;
    _os_log_impl(&dword_1A8E81000, v3, OS_LOG_TYPE_DEBUG, "Unmapped %zu bytes", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1A8F0789C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    int v4 = [v2 logHandle];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      +[CalExchangeCalendarItemExternalRepresentation dictionaryWithExternalRepresentationData:]((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
    }

    objc_end_catch();
    JUMPOUT(0x1A8F07850);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

const void *CalDatabaseCopyUpdatedCalEventFromICSEventWithOptions(void *a1, void *a2, os_unfair_lock_s *a3, uint64_t a4, unsigned char *a5, unsigned __int8 *a6, uint64_t a7, void *a8)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v15 = a1;
  id v16 = a2;
  id v17 = a8;
  if (a5) {
    *a5 = 0;
  }
  if (!v15) {
    goto LABEL_30;
  }
  long long v62 = a6;
  if ((a7 & 0x2000000) != 0)
  {
    CFTypeRef v24 = 0;
  }
  else
  {
    CFUUIDRef v18 = [v15 uid];
    CFStringRef v19 = objc_msgSend(v15, "recurrence_id");

    if (v19)
    {
      uint64_t v20 = objc_msgSend(v15, "recurrence_id");
      double v21 = CalDateFromICSDate(v20, v16);

      uint64_t v22 = CalGetRecurrenceUIDFromRealUID(v18, v21);

      uint64_t v23 = [v15 uid];
      CFTypeRef v24 = CalDatabaseCopyEventWithUniqueIdentifierInCalendar(a3, v23, a4);

      CFUUIDRef v18 = (__CFString *)v22;
    }
    else
    {
      CFTypeRef v24 = 0;
    }
    uint64_t v29 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 138412290;
      double v64 = *(double *)&v18;
      _os_log_impl(&dword_1A8E81000, v29, OS_LOG_TYPE_DEBUG, "Searching for an event with a unique identifier matching %@", buf, 0xCu);
    }
    started = CalDatabaseCopyEventWithUniqueIdentifierInCalendar(a3, v18, a4);

    if (!started)
    {
      if ((a7 & 0x20000000) == 0) {
        goto LABEL_8;
      }
      CFStringRef v30 = (const __CFString *)[v15 summary];
      uint64_t v31 = [v15 dtstart];
      double v32 = CalDateFromICSDate(v31, v16);
      started = CalDatabaseCopyEventWithSummaryAndStartDateInCalendar(a3, v30, a4, v32);
    }
    if ((~a7 & 0x24000000) == 0 && started)
    {
      id v61 = v17;
      uint64_t v33 = (void *)CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        v34 = v33;
        uint64_t v35 = [v15 summary];
        *(_DWORD *)stat buf = 138412546;
        double v64 = *(double *)&v35;
        __int16 v65 = 2112;
        double v66 = *(double *)&a4;
        _os_log_impl(&dword_1A8E81000, v34, OS_LOG_TYPE_DEBUG, "Found identity match for event %@ in calendar %@", buf, 0x16u);
      }
      int SequenceNumber = CalEventGetSequenceNumber(started);
      if ([v15 sequence] < (unint64_t)SequenceNumber)
      {
        uint64_t v37 = CDBiCalendarConversionHandle;
        id v17 = v61;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)stat buf = 0;
          v38 = "The local event has a greater sequence number. Refusing to update the event";
LABEL_39:
          _os_log_impl(&dword_1A8E81000, v37, OS_LOG_TYPE_DEBUG, v38, buf, 2u);
          goto LABEL_40;
        }
        goto LABEL_40;
      }
      uint64_t ModifiedDate = CalCalendarItemCopyLastModifiedDate((uint64_t)started);
      if (ModifiedDate)
      {
        CFAllocatorRef v41 = (const void *)ModifiedDate;
        double v42 = MEMORY[0x1AD0E87A0]();
        CFRelease(v41);
        double v43 = *MEMORY[0x1E4F57888];
      }
      else
      {
        double v43 = *MEMORY[0x1E4F57888];
        double v42 = *MEMORY[0x1E4F57888];
      }
      long long v44 = objc_msgSend(v15, "last_modified");
      double v45 = CalDateFromICSDateAsUTC(v44);

      if (v45 == v43)
      {
        long long v46 = [v15 dtstamp];
        double v45 = CalDateFromICSDateAsUTC(v46);
      }
      id v17 = v61;
      if (floor(v42) > floor(v45))
      {
        uint64_t v37 = CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)stat buf = 0;
          v38 = "The local event has a greater last modified date. Refusing to update this event";
          goto LABEL_39;
        }
LABEL_40:
        CalCalendarItemUpdateUIDFromICSComponent((uint64_t)started, v15, v16);
        goto LABEL_68;
      }
    }
    if ((a7 & 0x100000) != 0 && started)
    {
      int v47 = CalEventGetSequenceNumber(started);
      unint64_t v48 = [v15 sequence];
      if (v48 < v47)
      {
        unint64_t v49 = v48;
        v50 = CDBiCalendarConversionHandle;
        if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_68;
        }
        *(_DWORD *)stat buf = 134218240;
        *(void *)&double v64 = v47;
        __int16 v65 = 2048;
        double v66 = *(double *)&v49;
        __int16 v51 = "ignoring imported event because the local sequence number (%lu) is greater than the imported sequence number (%lu)";
LABEL_71:
        _os_log_impl(&dword_1A8E81000, v50, OS_LOG_TYPE_DEFAULT, v51, buf, 0x16u);
        goto LABEL_68;
      }
      uint64_t v52 = CalCalendarItemCopyLastModifiedDate((uint64_t)started);
      if (v52)
      {
        long long v53 = (const void *)v52;
        double v54 = MEMORY[0x1AD0E87A0]();
        CFRelease(v53);
        double v55 = *MEMORY[0x1E4F57888];
      }
      else
      {
        double v55 = *MEMORY[0x1E4F57888];
        double v54 = *MEMORY[0x1E4F57888];
      }
      v56 = objc_msgSend(v15, "last_modified");
      double v57 = CalDateFromICSDateAsUTC(v56);

      if (v57 == v55)
      {
        CFStringRef v58 = [v15 dtstamp];
        double v57 = CalDateFromICSDateAsUTC(v58);
      }
      if (v54 >= v57)
      {
        v50 = CDBiCalendarConversionHandle;
        if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_68;
        }
        *(_DWORD *)stat buf = 134218240;
        double v64 = v54;
        __int16 v65 = 2048;
        double v66 = v57;
        __int16 v51 = "ignoring imported event because the local dtstamp number (%f) is greater than the imported dtstamp (%f)";
        goto LABEL_71;
      }
      goto LABEL_54;
    }
    if (started)
    {
LABEL_54:
      unsigned __int8 v27 = 0;
      goto LABEL_55;
    }
  }
LABEL_8:
  if ([v16 method] == 3 && (kCalCalendarImportRepliesForPreview & a7) == 0)
  {
    v39 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1A8E81000, v39, OS_LOG_TYPE_DEBUG, "Don't create a new event in case of METHOD:REPLY in ics.", buf, 2u);
    }
LABEL_30:
    started = 0;
    goto LABEL_68;
  }
  uint64_t v25 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_1A8E81000, v25, OS_LOG_TYPE_DEBUG, "Couldn't find an existing event in the calendar database. Creating a new one.", buf, 2u);
  }
  started = CalDatabaseCreateEvent(a3);
  if (started)
  {
    CalCalendarAddEvent(a4, started);
    unsigned __int8 v27 = 1;
LABEL_55:
    int v28 = 1;
    goto LABEL_56;
  }
  int v28 = 0;
  unsigned __int8 v27 = 1;
LABEL_56:
  if (CalEventUpdateFromICSEventWithOptions(v15, v16, started, (uint64_t)v24, a3, a7, v17, 0, v27))
  {
    if (a5) {
      *a5 = 1;
    }
    if (v62) {
      *long long v62 = v27;
    }
  }
  else
  {
    __int16 v59 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138412290;
      double v64 = *(double *)&v15;
      _os_log_impl(&dword_1A8E81000, v59, OS_LOG_TYPE_ERROR, "Couldn't update CalEvent from icsEvent %@", buf, 0xCu);
    }
    CalRemoveEvent(started);
    if (v28) {
      CFRelease(started);
    }
    started = 0;
  }
  if (v24) {
    CFRelease(v24);
  }
LABEL_68:

  return started;
}

const void *CalDatabaseCopyUpdatedCalTaskFromICSTodoWithOptions(void *a1, void *a2, os_unfair_lock_s *a3, const void *a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  CFDataRef v13 = v12;
  if (a5) {
    *a5 = 0;
  }
  if (!v11)
  {
    Task = 0;
    goto LABEL_31;
  }
  v39 = v12;
  if ((a6 & 0x2000000) != 0) {
    goto LABEL_16;
  }
  CFURLRef v14 = [v11 uid];
  Task = CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(a3, 3, v14, (uint64_t)a4, 0);

  if (!Task)
  {
    if ((a6 & 0x20000000) != 0)
    {
      CFStringRef v18 = (const __CFString *)[v11 summary];
      CFStringRef v19 = [v11 due];
      double v20 = CalDateFromICSDate(v19, v13);
      Task = CalDatabaseCopyTaskWithSummaryAndDueDateInCalendar(a3, v18, (uint64_t)a4, v20);

      if (Task)
      {
        double v21 = (void *)CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = v21;
          uint64_t v23 = [v11 summary];
          *(_DWORD *)stat buf = 138412546;
          id v41 = v23;
          __int16 v42 = 2112;
          double v43 = a4;
          _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_DEBUG, "Found identity match for task %@ in calendar %@", buf, 0x16u);

          CFDataRef v13 = v39;
        }
        if ((a6 & 0x4000000) == 0) {
          goto LABEL_6;
        }
        int SequenceNumber = CalCalendarItemGetSequenceNumber((uint64_t)Task);
        if ([v11 sequence] >= (unint64_t)SequenceNumber)
        {
          uint64_t ModifiedDate = (const void *)CalCalendarItemCopyLastModifiedDate((uint64_t)Task);
          double v36 = MEMORY[0x1AD0E87A0]();
          if (ModifiedDate) {
            CFRelease(ModifiedDate);
          }
          uint64_t v37 = objc_msgSend(v11, "last_modified");
          double v38 = CalDateFromICSDateAsUTC(v37);

          if (v36 <= v38) {
            goto LABEL_6;
          }
          uint64_t v25 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)stat buf = 0;
            char v26 = "The local event has a greater dtstamp. Refusing to update this event";
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v25 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)stat buf = 0;
            char v26 = "The local event has a greater sequence number. Refusing to update the event";
LABEL_37:
            _os_log_impl(&dword_1A8E81000, v25, OS_LOG_TYPE_DEBUG, v26, buf, 2u);
          }
        }
        CalCalendarItemUpdateUIDFromICSComponent((uint64_t)Task, v11, v13);
        goto LABEL_31;
      }
    }
LABEL_16:
    unsigned __int8 v27 = (void *)CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      int v28 = v27;
      uint64_t v29 = [v11 uid];
      *(_DWORD *)stat buf = 138412290;
      id v41 = v29;
      _os_log_impl(&dword_1A8E81000, v28, OS_LOG_TYPE_DEBUG, "Couldn't find a task with external id %@ in the calendar database. Creating a new one.", buf, 0xCu);
    }
    Task = CalDatabaseCreateTask(a3);
    if (Task)
    {
      CalCalendarAddCalendarItem(a4, Task);
      int v17 = 1;
    }
    else
    {
      int v17 = 0;
    }
    unsigned __int8 v16 = 1;
    goto LABEL_22;
  }
LABEL_6:
  unsigned __int8 v16 = 0;
  int v17 = 1;
LABEL_22:
  CFStringRef v30 = (void *)MEMORY[0x1E4F1C9E8];
  uint64_t v31 = [NSNumber numberWithUnsignedInteger:a6];
  double v32 = [v30 dictionaryWithObject:v31 forKey:@"ItemBridgeOptions"];

  CFDataRef v13 = v39;
  if (CalTaskUpdateFromICSTodoWithOptions(Task, v11, v39, a3, v32, v16))
  {
    if (a5) {
      *a5 = 1;
    }
  }
  else
  {
    uint64_t v33 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138412290;
      id v41 = v11;
      _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_ERROR, "Couldn't update CalTask from icsEvent %@", buf, 0xCu);
    }
    CalRemoveTask(Task);
    if (v17) {
      CFRelease(Task);
    }
    Task = 0;
  }

LABEL_31:
  return Task;
}

__CFArray *CalDatabaseCopyUpdatedCalEventsFromICSDocumentWithOptionsAndBatchSize(void *a1, os_unfair_lock_s *a2, int a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t), uint64_t a7, unsigned int (*a8)(void, void, void), uint64_t a9, uint64_t (*a10)(void *, uint64_t), uint64_t a11, void *a12)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  id v17 = a1;
  id v18 = a12;
  if ((a3 & 0x80000000) == 0)
  {
    CFStringRef v19 = CalDatabaseCopyCalendarWithUID(a2);
    if (v19)
    {
      double v20 = v19;
      v117 = a6;
      double v21 = v17;
      uint64_t v22 = [v17 calendar];
      uint64_t v23 = [v17 calendar];
      unsigned int v24 = [v23 method];

      theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      uint64_t v25 = [v22 componentKeys];
      uint64_t v116 = [v25 count];
      long long v140 = 0u;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      id v26 = v25;
      uint64_t v120 = [v26 countByEnumeratingWithState:&v140 objects:v149 count:16];
      if (!v120)
      {

        goto LABEL_130;
      }
      obuint64_t j = v26;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      char v114 = v24 > 1;
      uint64_t v119 = *(void *)v141;
      double v28 = *MEMORY[0x1E4F57888];
      *(void *)&long long v27 = 134218242;
      long long v111 = v27;
      id v124 = v18;
      v128 = v22;
      v130 = a8;
      v131 = a2;
      uint64_t v115 = a7;
      uint64_t v29 = v117;
      id v112 = v17;
LABEL_5:
      uint64_t v30 = 0;
      while (1)
      {
        if (*(void *)v141 != v119) {
          objc_enumerationMutation(obj);
        }
        uint64_t v31 = *(void **)(*((void *)&v140 + 1) + 8 * v30);
        uint64_t v32 = MEMORY[0x1AD0E9B90]();
        id v133 = v31;
        uint64_t v33 = [v22 componentForKey:v31];
        uint64_t v125 = v30;
        CFAllocatorContext context = (void *)v32;
        if (a4)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (v33)
            {
              v34 = (objc_class *)MEMORY[0x1E4FB7F58];
              id v35 = v33;
              id v36 = objc_alloc_init(v34);
              [v35 attendee];
              v38 = uint64_t v37 = v21;
              [v36 setAttendee:v38];

              v39 = [v35 due];
              [v36 setDtstart:v39];

              uint64_t v40 = [v35 completed];
              [v36 setDtend:v40];

              id v41 = [v35 description];
              [v36 setDescription:v41];

              __int16 v42 = [v35 summary];

              uint64_t v29 = v117;
              [v36 setSummary:v42];

              double v21 = v37;
              a7 = v115;
            }
            else
            {
              id v36 = 0;
            }

            uint64_t v33 = v36;
          }
        }
        objc_opt_class();
        char isKindOfClass = objc_opt_isKindOfClass();
        objc_opt_class();
        v127 = v33;
        unsigned __int8 v44 = objc_opt_isKindOfClass();
        unsigned __int8 v45 = v44;
        if ((isKindOfClass & 1) == 0 && (v44 & 1) == 0)
        {
          long long v46 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138412290;
            *(void *)v151 = v33;
            _os_log_impl(&dword_1A8E81000, v46, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSComponent in the calendar: %@", buf, 0xCu);
          }
LABEL_30:
          double v57 = v131;
          if (!v29) {
            goto LABEL_105;
          }
          goto LABEL_31;
        }
        if ((((int)a4 >= 0) & v44) != 0) {
          goto LABEL_117;
        }
        if (a8 && !a8(v33, v133, a9)) {
          goto LABEL_30;
        }
        if ((a4 & 0x8000000) != 0)
        {
          int v47 = v21;
          id v48 = v127;
          id v49 = v22;
          v50 = objc_msgSend(v48, "recurrence_id");

          uint64_t DateTimeFromICSDate = *(void *)&v28;
          if (v50)
          {
            uint64_t v52 = objc_msgSend(v48, "recurrence_id");
            uint64_t DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v52, v49);

            uint64_t v22 = v128;
            a8 = v130;
            CalDateTimeRelease();
          }
          objc_msgSend(v48, "uid", v111);
          long long v53 = (__CFString *)objc_claimAutoreleasedReturnValue();
          if (vabdd_f64(*(double *)&DateTimeFromICSDate, v28) >= 2.22044605e-16
            && fabs(*(double *)&DateTimeFromICSDate) < 2.22044605e-16)
          {
            double v54 = [v48 uid];
            uint64_t v55 = CalGetRecurrenceUIDFromRealUID(v54, *(double *)&DateTimeFromICSDate);

            uint64_t v22 = v128;
            long long v53 = (__CFString *)v55;
            a8 = v130;
          }
          CFTypeRef v56 = CalDatabaseCopyEventWithUniqueIdentifierInCalendar(v131, v53, 0);
          if (v56)
          {
            CFRelease(v56);

            a7 = v115;
            uint64_t v29 = v117;
            double v57 = v131;
            double v21 = v47;
            if (!v117) {
              goto LABEL_105;
            }
            goto LABEL_31;
          }

          a7 = v115;
          uint64_t v29 = v117;
          double v21 = v47;
        }
        if (isKindOfClass)
        {
          __int16 v59 = v127;
          if (v114)
          {
            long long v60 = [v127 propertiesForName:kCalImportEventIsPhantomMaster];
            uint64_t v61 = [v60 count];

            __int16 v59 = v127;
            if (v61)
            {
              long long v62 = [v127 uid];
              CFTypeRef v63 = CalDatabaseCopyEventWithUniqueIdentifierInCalendar(v131, v62, (uint64_t)v20);
              if (v63)
              {
                double v64 = v63;
                if (!CalCalendarItemIsPhantomMaster((uint64_t)v63))
                {

                  char v114 = 1;
                  goto LABEL_43;
                }
                CFRelease(v64);
              }
            }
          }
          buf[0] = 0;
          double v64 = CalDatabaseCopyUpdatedCalEventFromICSEventWithOptions(v59, v22, v131, (uint64_t)v20, buf, 0, a4, v18);
          v114 |= buf[0] == 0;
        }
        else
        {
          if ((v45 & 1) == 0)
          {
            double v57 = v131;
            goto LABEL_104;
          }
          __int16 v59 = v127;
          double v64 = CalDatabaseCopyUpdatedCalTaskFromICSTodoWithOptions(v127, v22, v131, v20, 0, a4);
        }
LABEL_43:
        if (!a5 && v64) {
          CFArrayAppendValue(theArray, v64);
        }
        if (a10)
        {
          if (v64)
          {
            CFStringRef v65 = (const __CFString *)a10(v59, a11);
            if (v65)
            {
              CFStringRef v66 = v65;
              CalCalendarItemSetExternalID((uint64_t)v64, v65);
              CFRelease(v66);
            }
          }
        }
        if (isKindOfClass)
        {
          CFArrayRef v67 = CalEventCopyDetachedEvents((uint64_t)v64);
          if (v67)
          {
            CFArrayRef v68 = v67;
            CFIndex Count = CFArrayGetCount(v67);
            double v57 = v131;
            if (Count)
            {
              CFIndex v70 = Count;
              v71 = (void *)[objc_alloc(MEMORY[0x1E4F1CA80]) initWithCapacity:Count];
              for (CFIndex i = 0; i != v70; ++i)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v68, i);
                v74 = (void *)CalEventCopyUniqueIdentifier((uint64_t)ValueAtIndex);
                [v71 addObject:v74];
              }
              uint64_t v22 = v128;
            }
            else
            {
              v71 = 0;
            }
            CFRelease(v68);
          }
          else
          {
            v71 = 0;
            double v57 = v131;
          }
          v129 = v71;
          uint64_t v135 = (uint64_t)v64;
          v75 = (void *)CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            v76 = v75;
            v77 = [v22 componentOccurrencesForKey:v133];
            uint64_t v78 = [v77 count];
            *(_DWORD *)stat buf = 134217984;
            *(void *)v151 = v78;
            _os_log_impl(&dword_1A8E81000, v76, OS_LOG_TYPE_DEBUG, "ICSEvent has %lu detached events", buf, 0xCu);
          }
          long long v138 = 0u;
          long long v139 = 0u;
          long long v136 = 0u;
          long long v137 = 0u;
          objc_msgSend(v22, "componentOccurrencesForKey:", v133, v111);
          id v134 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v79 = [v134 countByEnumeratingWithState:&v136 objects:v148 count:16];
          if (v79)
          {
            uint64_t v80 = v79;
            uint64_t v81 = *(void *)v137;
            do
            {
              for (uint64_t j = 0; j != v80; ++j)
              {
                if (*(void *)v137 != v81) {
                  objc_enumerationMutation(v134);
                }
                v83 = *(void **)(*((void *)&v136 + 1) + 8 * j);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  if (!a8 || a8(v83, 0, a9))
                  {
                    v84 = (void *)CalDatabaseCopyUpdatedCalEventFromICSEventWithOptions(v83, v22, v57, (uint64_t)v20, 0, 0, a4, v18);
                    if (v84)
                    {
                      v85 = v84;
                      v86 = v20;
                      v87 = (void *)CalEventCopyUniqueIdentifier((uint64_t)v84);
                      [v129 removeObject:v87];
                      CFTypeRef v88 = CalEventCopyOriginalEvent((uint64_t)v85);
                      v89 = v88;
                      if (v88) {
                        BOOL v90 = v88 == (CFTypeRef)v135;
                      }
                      else {
                        BOOL v90 = 0;
                      }
                      if (v90) {
                        goto LABEL_80;
                      }
                      v91 = (void *)CDBiCalendarConversionHandle;
                      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
                      {
                        v92 = v91;
                        int UID = CalEventGetUID(v135);
                        int v94 = CalEventGetUID(v85);
                        *(_DWORD *)stat buf = 67109376;
                        *(_DWORD *)v151 = UID;
                        id v18 = v124;
                        *(_WORD *)&v151[4] = 1024;
                        *(_DWORD *)&v151[6] = v94;
                        _os_log_impl(&dword_1A8E81000, v92, OS_LOG_TYPE_DEBUG, "Setting %d as the original event for %d", buf, 0xEu);
                      }
                      CalEventAddDetachedEvent(v135, v85);
                      uint64_t v22 = v128;
                      if (v89) {
LABEL_80:
                      }
                        CFRelease(v89);
                      if (a10)
                      {
                        uint64_t v95 = a10(v83, a11);
                        if (v95) {
                          CalEventSetExternalID(v85, v95);
                        }
                      }
                      CFRelease(v85);

                      double v20 = v86;
                      a8 = v130;
                      double v57 = v131;
                    }
                  }
                }
                else
                {
                  v96 = CDBiCalendarConversionHandle;
                  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)stat buf = 138412290;
                    *(void *)v151 = v83;
                    _os_log_impl(&dword_1A8E81000, v96, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSComponent in the calendar: %@", buf, 0xCu);
                  }
                }
              }
              uint64_t v80 = [v134 countByEnumeratingWithState:&v136 objects:v148 count:16];
            }
            while (v80);
          }

          double v21 = v112;
          a7 = v115;
          if ((v114 & 1) == 0)
          {
            id v97 = v129;
            v98 = (void *)CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              v99 = v98;
              uint64_t v100 = [v97 count];
              *(_DWORD *)stat buf = v111;
              *(void *)v151 = v100;
              *(_WORD *)&v151[8] = 2112;
              id v152 = v97;
              _os_log_impl(&dword_1A8E81000, v99, OS_LOG_TYPE_DEBUG, "Removing %lu leftover detachments with unique identifiers %@", buf, 0x16u);
            }
            long long v146 = 0u;
            long long v147 = 0u;
            long long v144 = 0u;
            long long v145 = 0u;
            id v101 = v97;
            uint64_t v102 = [v101 countByEnumeratingWithState:&v144 objects:buf count:16];
            if (v102)
            {
              uint64_t v103 = v102;
              uint64_t v104 = *(void *)v145;
              do
              {
                for (uint64_t k = 0; k != v103; ++k)
                {
                  if (*(void *)v145 != v104) {
                    objc_enumerationMutation(v101);
                  }
                  v106 = (void *)CalDatabaseCopyEventWithUniqueIdentifierInCalendar(v57, *(const __CFString **)(*((void *)&v144 + 1) + 8 * k), (uint64_t)v20);
                  if (v106)
                  {
                    v107 = v106;
                    CalEventRemoveDetachedEvent(v135, v106);
                    CFRelease(v107);
                  }
                }
                uint64_t v103 = [v101 countByEnumeratingWithState:&v144 objects:buf count:16];
              }
              while (v103);
            }

            id v18 = v124;
            uint64_t v22 = v128;
            double v21 = v112;
          }
          double v64 = (const void *)v135;
          CalParticipantPropagateUUIDsFromMainEventToDetachments(v135);

          uint64_t v29 = v117;
          if (v135) {
LABEL_103:
          }
            CFRelease(v64);
        }
        else
        {
          uint64_t v29 = v117;
          double v57 = v131;
          if (v64) {
            goto LABEL_103;
          }
        }
LABEL_104:
        v122 += a5 != 0;
        if (!v29)
        {
LABEL_105:
          int v58 = 1;
          goto LABEL_106;
        }
LABEL_31:
        int v58 = v29(v21, a7);
LABEL_106:
        if (!a5 || !v58) {
          goto LABEL_115;
        }
        ++v121;
        if (v122 == a5 || v121 == v116 || v122 && _CalDatabaseUnlockRequested((uint64_t)v57))
        {
          CalDatabaseSaveAndFlushCaches((uint64_t)v57);
          if (v20) {
            CFRelease(v20);
          }
          double v20 = CalDatabaseCopyCalendarWithUID(v57);
          uint64_t v122 = 0;
          LOBYTE(v58) = v20 != 0;
LABEL_115:

          if ((v58 & 1) == 0)
          {
            if (theArray) {
              CFRelease(theArray);
            }
            theArray = 0;
            goto LABEL_127;
          }
          goto LABEL_118;
        }
LABEL_117:

LABEL_118:
        uint64_t v30 = v125 + 1;
        if (v125 + 1 == v120)
        {
          uint64_t v108 = [obj countByEnumeratingWithState:&v140 objects:v149 count:16];
          uint64_t v120 = v108;
          if (v108) {
            goto LABEL_5;
          }
LABEL_127:
          id v26 = obj;

          if (!v20)
          {
LABEL_131:

            v109 = theArray;
            goto LABEL_132;
          }
LABEL_130:
          CFRelease(v20);
          goto LABEL_131;
        }
      }
    }
  }
  v109 = 0;
  double v21 = v17;
LABEL_132:

  return v109;
}

id componentsWithPhantomMasterForICSCalendar(void *a1, uint64_t (*a2)(void, void *, uint64_t), uint64_t a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v46 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  id v41 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v6 = [v5 componentKeys];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v51 objects:v59 count:16];
  __int16 v42 = v5;
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v52;
    uint64_t v43 = *(void *)v52;
    unsigned __int8 v44 = v6;
    do
    {
      uint64_t v10 = 0;
      uint64_t v45 = v8;
      do
      {
        if (*(void *)v52 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v51 + 1) + 8 * v10);
        id v12 = [v5 componentForKey:v11];
        if (!v12)
        {
          CFDataRef v13 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138412290;
            uint64_t v58 = (uint64_t)v11;
            _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_DEBUG, "Component not found for component key: [%@].  Attempting to create a phantom master.", buf, 0xCu);
          }
          CFURLRef v14 = [v5 componentOccurrencesForKey:v11];
          if ([v14 count])
          {
            if (a2)
            {
              long long v49 = 0u;
              long long v50 = 0u;
              long long v47 = 0u;
              long long v48 = 0u;
              id v15 = v14;
              uint64_t v16 = [v15 countByEnumeratingWithState:&v47 objects:v56 count:16];
              if (v16)
              {
                uint64_t v17 = v16;
                uint64_t v18 = *(void *)v48;
                while (2)
                {
                  for (uint64_t i = 0; i != v17; ++i)
                  {
                    if (*(void *)v48 != v18) {
                      objc_enumerationMutation(v15);
                    }
                    if (a2(*(void *)(*((void *)&v47 + 1) + 8 * i), v11, a3))
                    {

                      id v5 = v42;
                      goto LABEL_21;
                    }
                  }
                  uint64_t v17 = [v15 countByEnumeratingWithState:&v47 objects:v56 count:16];
                  if (v17) {
                    continue;
                  }
                  break;
                }
                id v5 = v42;
              }
            }
            else
            {
LABEL_21:
              id v15 = [v14 objectAtIndexedSubscript:0];
              double v20 = [v15 uid];
              int v21 = [v46 containsObject:v20];
              uint64_t v22 = CDBLogHandle;
              BOOL v23 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
              if (v21)
              {
                if (v23)
                {
                  *(_DWORD *)stat buf = 138412290;
                  uint64_t v58 = (uint64_t)v20;
                  _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_DEBUG, "Phantom master with UID [%@] is scheduled to be added already.  Will not create phantom master.", buf, 0xCu);
                }
              }
              else
              {
                if (v23)
                {
                  *(_DWORD *)stat buf = 138412290;
                  uint64_t v58 = (uint64_t)v20;
                  _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_DEBUG, "Creating a phantom master with UID: [%@].", buf, 0xCu);
                }
                [v46 addObject:v20];
                objc_opt_class();
                unsigned int v24 = objc_opt_new();
                [v24 setUid:v20];
                [v24 setSummary:@"[Placeholder Item]"];
                uint64_t v25 = [v15 dtstart];
                [v24 setDtstart:v25];

                id v26 = [v15 dtend];
                [v24 setDtend:v26];

                long long v27 = [v15 duration];
                [v24 setDuration:v27];

                double v28 = objc_msgSend(v15, "x_apple_etag");
                objc_msgSend(v24, "setX_apple_etag:", v28);

                uint64_t v29 = objc_msgSend(v15, "x_apple_scheduletag");
                objc_msgSend(v24, "setX_apple_scheduletag:", v29);

                uint64_t v30 = objc_msgSend(v15, "x_apple_serverFilename");
                objc_msgSend(v24, "setX_apple_serverFilename:", v30);

                uint64_t v31 = [v15 dtstart];
                uint64_t v55 = v31;
                uint64_t v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v55 count:1];
                [v24 setExdate:v32];

                [v24 setPropertyValue:MEMORY[0x1E4F1CC38] type:5012 forName:kCalImportEventIsPhantomMaster];
                [v41 addObject:v24];

                id v5 = v42;
              }
            }
            uint64_t v9 = v43;
            uint64_t v6 = v44;
            uint64_t v8 = v45;
          }
        }
        ++v10;
      }
      while (v10 != v8);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v51 objects:v59 count:16];
    }
    while (v8);
  }

  if ([v41 count])
  {
    uint64_t v33 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v34 = v33;
      uint64_t v35 = [v41 count];
      *(_DWORD *)stat buf = 134217984;
      uint64_t v58 = v35;
      _os_log_impl(&dword_1A8E81000, v34, OS_LOG_TYPE_DEBUG, "[%lu] Phantom masters were created.  Adding them to the list of components.", buf, 0xCu);
    }
    id v36 = objc_alloc(MEMORY[0x1E4F1CA48]);
    uint64_t v37 = [v42 components];
    double v38 = v36;
    id v5 = v42;
    v39 = (void *)[v38 initWithArray:v37];

    [v39 addObjectsFromArray:v41];
  }
  else
  {
    v39 = [v5 components];
  }

  return v39;
}

__CFArray *CalItemsUpdateFromiCalendarDataWithOptions(const __CFData *a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4)
{
  return CalItemsUpdateFromiCalendarDataWithOptionsIncludingPhantomMaster(a1, a2, a3, a4, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

__CFArray *CalItemsUpdateFromiCalendarDataWithOptionsIncludingPhantomMaster(const __CFData *a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t), uint64_t a7, uint64_t (*a8)(void, void *, uint64_t), uint64_t a9, uint64_t (*a10)(void *, uint64_t), uint64_t a11, char a12, void *a13)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v20 = a13;
  int v21 = (void *)CDBLogHandle;
  BOOL v22 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
  if ((a4 & 0x80) != 0)
  {
    if (!v22) {
      goto LABEL_7;
    }
    unsigned int v24 = v21;
    *(_DWORD *)stat buf = 67109120;
    LODWORD(v37) = CFDataGetLength(a1);
    _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_DEBUG, "Import of compressed iCalendar data requested.  DataLen: %d", buf, 8u);
  }
  else
  {
    if (!v22) {
      goto LABEL_7;
    }
    BOOL v23 = (objc_class *)NSString;
    unsigned int v24 = v21;
    uint64_t v25 = (void *)[[v23 alloc] initWithData:a1 encoding:4];
    *(_DWORD *)stat buf = 138412290;
    uint64_t v37 = v25;
    _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_DEBUG, "Import of iCalendar data requested.  Data: [%@]", buf, 0xCu);
  }
LABEL_7:
  id v26 = (void *)MEMORY[0x1AD0E9B90]();
  id v35 = 0;
  long long v27 = (void *)[objc_alloc(MEMORY[0x1E4FB7F48]) initWithData:a1 options:a4 error:&v35];
  id v28 = v35;
  uint64_t v29 = v28;
  if (v27) {
    BOOL v30 = v28 == 0;
  }
  else {
    BOOL v30 = 0;
  }
  if (v30)
  {
    updated = CalItemsUpdateFromiCalendarDocumentWithOptionsIncludingPhantomMaster(v27, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v20);
  }
  else
  {
    uint64_t v31 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138412290;
      uint64_t v37 = v29;
      _os_log_impl(&dword_1A8E81000, v31, OS_LOG_TYPE_ERROR, "Could not parse ICSDocument from data: %@", buf, 0xCu);
    }
    updated = 0;
  }

  return updated;
}

__CFArray *CalItemsUpdateFromiCalendarDocumentWithOptionsIncludingPhantomMaster(void *a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t), uint64_t a7, uint64_t (*a8)(void, void *, uint64_t), uint64_t a9, uint64_t (*a10)(void *, uint64_t), uint64_t a11, char a12, void *a13)
{
  id v15 = a1;
  id v16 = a13;
  if (a12)
  {
    uint64_t v17 = [v15 calendar];
    uint64_t v18 = componentsWithPhantomMasterForICSCalendar(v17, a8, a9);
    [v17 setComponents:v18 options:2];
  }
  int UID = CalCalendarGetUID();
  id v20 = CalDatabaseCopyUpdatedCalEventsFromICSDocumentWithOptionsAndBatchSize(v15, a2, UID, a4, a5, a6, a7, (unsigned int (*)(void, void, void))a8, a9, a10, a11, v16);

  return v20;
}

CFTypeRef CalCreateiCalendarDataFromICSCalendar(void *a1)
{
  return _CalCreateiCalendarDataFromICSCalendarWithOptions(a1, 4);
}

CFTypeRef _CalCreateiCalendarDataFromICSCalendarWithOptions(void *a1, uint64_t a2)
{
  id v3 = a1;
  int v4 = (void *)MEMORY[0x1AD0E9B90]();
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4FB7F48]) initWithCalendar:v3];
  uint64_t v6 = [v5 ICSDataWithOptions:a2];
  if (!v6)
  {
    CFTypeRef v12 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = v6;
  if ((a2 & 0x80) == 0)
  {
LABEL_5:
    CFTypeRef v12 = CFRetain(v7);

LABEL_7:
    goto LABEL_8;
  }
  size_t v8 = [v6 length] + 16;
  uint64_t v9 = (uint8_t *)malloc_type_malloc(v8, 0xDE63BECuLL);
  id v10 = v7;
  size_t v11 = compression_encode_buffer(v9, v8, (const uint8_t *)[v10 bytes], objc_msgSend(v10, "length"), 0, COMPRESSION_LZFSE);
  if (v11)
  {
    uint64_t v7 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v9 length:v11 freeWhenDone:1];

    goto LABEL_5;
  }
  CFURLRef v14 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v15 = 0;
    _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_ERROR, "Compression of ICS failed. Somehow.", v15, 2u);
  }
  free(v9);

  CFTypeRef v12 = 0;
LABEL_8:

  return v12;
}

CFTypeRef CalCreateiCalendarDataFromCalEntities(const __CFArray *a1)
{
  return CalCreateiCalendarDataFromCalEntitiesWithOptions(a1, 0, 0);
}

CFTypeRef CalCreateiCalendarDataFromCalEntitiesWithOptions(const __CFArray *a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)MEMORY[0x1AD0E9B90]();
  uint64_t v7 = ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(a1, 2, v5, a3);
  size_t v8 = v7;
  uint64_t v9 = 20;
  if ((a3 & 1) == 0) {
    uint64_t v9 = 4;
  }
  CFTypeRef v10 = _CalCreateiCalendarDataFromICSCalendarWithOptions(v7, a3 & 0x80 | (((a3 >> 1) & 1) << 6) | v9);

  return v10;
}

id ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(const __CFArray *a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 138412290;
    id v79 = v6;
    _os_log_impl(&dword_1A8E81000, v7, OS_LOG_TYPE_DEBUG, "iCalendar items will be generated from database items.  occurrenceDate: [%@]", buf, 0xCu);
  }
  if (a1 && CFArrayGetCount(a1))
  {
    unsigned int v68 = a2;
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFTypeRef v10 = v6;
    if ((a4 & 0x20000) == 0)
    {

      CFTypeRef v10 = 0;
    }
    id v69 = v6;
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v12 = Count;
      for (CFIndex i = 0; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (CalEntityGetType(ValueAtIndex) - 4 >= 0xFFFFFFFE)
        {
          int Type = CalEntityGetType(ValueAtIndex);
          if (v10 || Type != 2 || (CFTypeRef v16 = CalEventCopyOriginalEvent((uint64_t)ValueAtIndex)) == 0)
          {
            CFRetain(ValueAtIndex);
            CFTypeRef v16 = ValueAtIndex;
          }
          uint64_t v17 = [NSNumber numberWithInt:CalCalendarItemGetRowID()];
          if (([v8 containsObject:v17] & 1) == 0)
          {
            [v8 addObject:v17];
            CFArrayAppendValue(Mutable, v16);
          }
          if (v16) {
            CFRelease(v16);
          }
        }
      }
    }
    CFArrayRef v67 = v8;
    id v18 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    CFIndex v19 = CFArrayGetCount(Mutable);
    if (v19 >= 1)
    {
      CFIndex v21 = v19;
      CFIndex v22 = 0;
      *(void *)&long long v20 = 138412290;
      long long v66 = v20;
      v71 = v10;
      CFIndex v72 = v19;
      v73 = Mutable;
      id v74 = v18;
      while (1)
      {
        BOOL v23 = (void *)CFArrayGetValueAtIndex(Mutable, v22);
        int v24 = CalEntityGetType(v23);
        if (v24 != 3) {
          break;
        }
        if (!v23 || CalCalendarItemIsHidden((uint64_t)v23)) {
          goto LABEL_57;
        }
        uint64_t v34 = ICSTodoFromCalTask(v23, a4);
        if (!v34)
        {
          id v36 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)stat buf = 0;
            _os_log_impl(&dword_1A8E81000, v36, OS_LOG_TYPE_ERROR, "Could not convert the original calTask", buf, 2u);
          }
          id v25 = 0;
          CFIndex v21 = v72;
LABEL_36:

LABEL_57:
          id v35 = (id)CDBiCalendarConversionHandle;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            if (v23) {
              int RowID = CalCalendarItemGetRowID();
            }
            else {
              int RowID = -1;
            }
            *(_DWORD *)stat buf = 67109120;
            LODWORD(v79) = RowID;
            _os_log_impl(&dword_1A8E81000, v35, OS_LOG_TYPE_DEBUG, "Couldn't create ICSComponents for cal item with uid %d", buf, 8u);
          }
          goto LABEL_62;
        }
        v76 = (void *)v34;
        id v35 = [MEMORY[0x1E4F1C978] arrayWithObject:v34];
LABEL_55:

        if (!v35) {
          goto LABEL_57;
        }
        [v18 addObjectsFromArray:v35];
LABEL_62:

        if (++v22 == v21) {
          goto LABEL_68;
        }
      }
      if (v24 != 2) {
        goto LABEL_57;
      }
      id v25 = v10;
      if (!v23) {
        goto LABEL_36;
      }
      v76 = v25;
      id v26 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      if (!CalCalendarItemIsHidden((uint64_t)v23))
      {
        long long v27 = ICSEventFromCalEvent(v23, a4);
        id v28 = v27;
        if (v10)
        {
          [v27 setRrule:0];
          [v28 setExdate:0];
          objc_msgSend(v28, "setRecurrence_id:", 0);
          [v28 setRelatedTo:0];
          BOOL IsAllDay = CalEventIsAllDay((uint64_t)v23);
          BOOL v30 = [v76 dateByAddingTimeInterval:(double)CalEventGetDuration((uint64_t)v23)];
          uint64_t v31 = (void *)CalCalendarItemCopyEndTimeZone((uint64_t)v23);
          CFIndex v70 = v31;
          if (IsAllDay)
          {
            uint64_t v32 = [v30 dateByAddingTimeInterval:1.0];

            uint64_t v33 = ICSFloatingDateOnlyFromCFDate(v32, v31);
            BOOL v30 = (void *)v32;
          }
          else
          {
            uint64_t v33 = ICSDateFromCFDate((uint64_t)v30, v31);
          }
          objc_msgSend(v28, "setDtend:", v33, v66);
          uint64_t v37 = objc_opt_new();
          uint64_t v38 = [NSNumber numberWithBool:IsAllDay];
          [v37 setObject:v38 forKey:@"ItemBridgeIsAllDay"];

          CalSetStartDateOnICSComponentWithOptions((uint64_t)v23, v28, v76, v37);
          CFTypeRef v10 = v71;
          CFIndex v21 = v72;
          id v18 = v74;
        }
        if (!v28)
        {
          long long v53 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)stat buf = 0;
            _os_log_impl(&dword_1A8E81000, v53, OS_LOG_TYPE_ERROR, "Could not convert the original CalEvent", buf, 2u);
          }
          id v35 = 0;
          CFMutableArrayRef Mutable = v73;
          goto LABEL_54;
        }
        [v26 addObject:v28];
      }
      if (!v10)
      {
        CFArrayRef v39 = CalEventCopyDetachedEvents((uint64_t)v23);
        if (v39)
        {
          CFArrayRef v40 = v39;
          CFIndex v41 = CFArrayGetCount(v39);
          __int16 v42 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v43 = NSNumber;
            unsigned __int8 v44 = v42;
            uint64_t v45 = [v43 numberWithLong:v41];
            *(_DWORD *)stat buf = v66;
            id v79 = v45;
            _os_log_impl(&dword_1A8E81000, v44, OS_LOG_TYPE_DEBUG, "This event has %@ detached events", buf, 0xCu);
          }
          if (v41 >= 1)
          {
            for (CFIndex j = 0; j != v41; ++j)
            {
              long long v47 = (void *)CFArrayGetValueAtIndex(v40, j);
              long long v48 = ICSEventFromCalEvent(v47, a4);
              if (v48)
              {
                [v26 addObject:v48];
              }
              else
              {
                long long v49 = (void *)CDBiCalendarConversionHandle;
                if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
                {
                  long long v50 = v49;
                  int UID = CalEventGetUID(v47);
                  *(_DWORD *)stat buf = 67109120;
                  LODWORD(v79) = UID;
                  _os_log_impl(&dword_1A8E81000, v50, OS_LOG_TYPE_ERROR, "Could not convert the detached event with the cal uid %d", buf, 8u);
                }
              }
            }
          }
          CFRelease(v40);
          CFTypeRef v10 = v71;
          CFIndex v21 = v72;
          id v18 = v74;
        }
      }
      id v35 = v26;
      CFMutableArrayRef Mutable = v73;
LABEL_54:

      goto LABEL_55;
    }
LABEL_68:
    id v6 = v69;
    a2 = v68;
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    id v18 = 0;
    CFTypeRef v10 = v6;
  }

  if (_CalSetupDefaultProdID_onceToken != -1) {
    dispatch_once(&_CalSetupDefaultProdID_onceToken, &__block_literal_global_15);
  }
  id v54 = objc_alloc_init(MEMORY[0x1E4FB7F00]);
  [v54 setComponents:v18 options:a2];
  CFIndex v55 = CFArrayGetCount(a1);
  if (v55 >= 1)
  {
    CFIndex v56 = v55;
    id v75 = v18;
    id v57 = v6;
    uint64_t v58 = 0;
    char v59 = 0;
    for (CFIndex k = 0; k != v56; ++k)
    {
      uint64_t v61 = CFArrayGetValueAtIndex(a1, k);
      __int16 ModifiedProperties = CalEventGetModifiedProperties((uint64_t)v61);
      unsigned int PrivacyLevel = CalCalendarItemGetPrivacyLevel((uint64_t)v61);
      v59 |= (PrivacyLevel | ModifiedProperties & 0x100) != 0;
      uint64_t v64 = ICSCalendarServerAccessFromCalEventPrivacyLevel(PrivacyLevel);
      if ([MEMORY[0x1E4FB7F00] compareCalendarServerAccess:v58 withAccess:v64] == -1) {
        uint64_t v58 = v64;
      }
      else {
        uint64_t v58 = v58;
      }
    }
    id v6 = v57;
    id v18 = v75;
    if (v59) {
      objc_msgSend(v54, "setX_calendarserver_access:", v58);
    }
  }

  return v54;
}

CFTypeRef CalCreateiCalendarDataFromCalendarWithOptions(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)MEMORY[0x1AD0E9B90]();
  uint64_t v7 = CalCalendarCopyEvents();
  if (v7)
  {
    CFArrayRef v8 = (const __CFArray *)v7;
    if (v5) {
      v5[2](v5, v7);
    }
    uint64_t v9 = ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(v8, 2, 0, a2);
    CFRelease(v8);
    CFTypeRef v10 = (void *)CalCalendarCopyTitle(a1);
    objc_msgSend(v9, "setX_wr_calname:", v10);
    size_t v11 = (void *)CalCalendarCopyColorString(a1);
    CFIndex v12 = v11;
    uint64_t v22 = 0;
    int v21 = 0;
    if (v11)
    {
      sscanf((const char *)[v11 UTF8String], "#%02X%02X%02X", (char *)&v22 + 4, &v22, &v21);
      id v13 = objc_alloc(MEMORY[0x1E4FB7F10]);
      CFURLRef v14 = (void *)[v13 initWithRed:BYTE4(v22) green:v22 blue:v21];
      objc_msgSend(v9, "setX_apple_calendar_color:", v14);
    }
    id v15 = (void *)CalCalendarCopyNotes(a1);
    objc_msgSend(v9, "setX_wr_caldesc:", v15);
    CFTypeRef v16 = (__CFString *)CalCalendarCopyLanguage(a1);
    uint64_t v17 = (__CFString *)CalCalendarCopyRegion(a1);
    objc_msgSend(v9, "setX_apple_language:", v16);
    objc_msgSend(v9, "setX_apple_region:", v17);
    uint64_t v18 = 20;
    if ((a2 & 1) == 0) {
      uint64_t v18 = 4;
    }
    CFTypeRef v19 = _CalCreateiCalendarDataFromICSCalendarWithOptions(v9, a2 & 0x80 | (((a2 >> 1) & 1) << 6) | v18);
  }
  else
  {
    CFTypeRef v19 = 0;
  }

  return v19;
}

id ICSCalendarFromCalEntityRefs(const __CFArray *a1)
{
  return ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(a1, 2, 0, 0);
}

id ICSCalendarFromCalEventRefs(const __CFArray *a1)
{
  return ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(a1, 2, 0, 0);
}

void _CalAlarmLoadSecurityScopedURLWrapper(uint64_t a1)
{
  uint64_t v1 = (void *)_CalAlarmCopyBookmark(a1);
}

void _CalAlarmPrepareForSave(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CalRelationOwnerWillSave(Property);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  if (_CalAlarmGetTriggerInterval(a1) != 0x7FFFFFFF)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    CalEventOccurrenceCacheGetLongAlarmIntervals(&v12, &v11);
  }
  CPRecordSetProperty();
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  if ((unint64_t)(_CalDatabaseGetChangeReason(DatabaseForRecord) - 1) >= 2)
  {
    Dateuint64_t Property = _CalRecordGetDateProperty(a1);
    if (vabdd_f64(DateProperty, *MEMORY[0x1E4F57888]) >= 2.22044605e-16) {
      double v7 = DateProperty;
    }
    else {
      double v7 = 1.17549435e-38;
    }
    if (v7 != 1.17549435e-38)
    {
      CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
      if (OwningCalendarItem)
      {
        uint64_t v9 = (uint64_t)OwningCalendarItem;
        if (_CalCalendarItemGetEntityType((uint64_t)OwningCalendarItem) == 2
          && v7 - COERCE_DOUBLE(_CalEventGetStartDate(v9)) > 15552000.0)
        {
          uint64_t v10 = CalGetDatabaseForRecord();
          _CalDatabaseIntegrityError(v10, @"Suspiciously large absolute alarm offset");
        }
      }
    }
  }
}

uint64_t _CalAlarmPropertyDidChange(uint64_t result, unsigned int a2)
{
  if (a2 <= 0x17)
  {
    uint64_t v2 = result;
    if (((1 << a2) & 0x80D804) == 0)
    {
      if (((1 << a2) & 3) == 0) {
        return result;
      }
      uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
      if (DatabaseForRecord)
      {
        if (_CalDatabaseIsPropertyModificationLoggingEnabled(DatabaseForRecord))
        {
          CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem(v2);
          if (OwningCalendarItem)
          {
            double v7 = OwningCalendarItem;
            _CalEventMarkPropertyModified((uint64_t)OwningCalendarItem);
            _CalEventMarkEventAsNeedingAlarmCacheUpdate(v7);
          }
        }
      }
    }
    CPRecordGetStore();
    uint64_t Context = CPRecordStoreGetContext();
    _CalDatabaseSetChangeFlags(Context, 8);
    uint64_t result = (uint64_t)_CalAlarmGetOwningCalendarItem(v2);
    if (result)
    {
      uint64_t v4 = result;
      _CalEventUpdateLastModifiedDate(result);
      uint64_t result = _CalEntityIsNew(v4);
      if ((result & 1) == 0)
      {
        return _CalEventMarkAsModifiedForChangeTracking(v4);
      }
    }
  }
  return result;
}

void _CalAlarmPropertyWillChange(uint64_t a1, int a2, char *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((a2 == 9 || a2 == 3) && a3 + 1 == 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
  }
  else if (a2 == 27)
  {
    id v6 = [a3 url];
    uint64_t v7 = [v6 absoluteString];
    CFArrayRef v8 = (void *)_CalAlarmCopyURL(a1);
    uint64_t v9 = [v8 absoluteString];
    if (![(id)v7 isEqual:v9] && v7 | v9)
    {
      if (([v6 startAccessingSecurityScopedResource] & 1) == 0)
      {
        uint64_t v10 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          int v13 = 138412290;
          CFURLRef v14 = v6;
          _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_ERROR, "Failed to start accessing security scoped URL wrapper when trying to create a bookmark for it: %@", (uint8_t *)&v13, 0xCu);
        }
      }
      _CalAlarmSetBookmark(a1);
      [v6 stopAccessingSecurityScopedResource];
    }
  }
}

void CalAlarmInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalAlarmClass, (const char **)&kCalAlarmIndexes, (const char **)&kCalAlarmChangesIndexes);
  CalMigrationCreateTriggers(a2, (const char **)&kCalAlarmClass, (const char **)&kCalAlarmTriggers);
}

void CalAlarmMigrateTables(uint64_t a1, uint64_t a2, signed int a3)
{
  if ((a3 & 0xFFFFFFFE) == 0x46)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    id v6 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionStatementForSQL();
    if (CDBLockingAssertionsEnabled) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (*v6)
      {
        uint64_t v9 = **v6;
        if (v9)
        {
          if (*(void *)(v9 + 104))
          {
            uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    CalMigrateTableFull((void *)a2, (const char **)&kCalAlarmClass, 0, (const char **)&kCalAlarmUpgradeInfo, (const char **)&kCalAlarmChangesUpgradeInfo, (const char **)&kCalAlarmIndexes, (const char **)&kCalAlarmChangesIndexes, (const char **)&kCalAlarmTriggers, a3);
    goto LABEL_29;
  }
  if (a3 > 18002) {
    return;
  }
  CalMigrateTableFull((void *)a2, (const char **)&kCalAlarmClass, 0, (const char **)&kCalAlarmUpgradeInfo, (const char **)&kCalAlarmChangesUpgradeInfo, (const char **)&kCalAlarmIndexes, (const char **)&kCalAlarmChangesIndexes, (const char **)&kCalAlarmTriggers, a3);
  if (a3 <= 48)
  {
    CalPerformSQLWithConnection((void *)a2, @"UPDATE Alarm SET trigger_date = NULL WHERE trigger_date = -2147483648");
LABEL_28:
    _CalDBFillInUUIDColumn(a2, @"Alarm");
    goto LABEL_29;
  }
  if (a3 <= 0x34) {
    goto LABEL_28;
  }
  if (a3 <= 0x3E80)
  {
LABEL_29:
    if (!sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CREATE_UUID", 0, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))CreateUUIDCallback, 0, 0))CalPerformSQLWithConnection((void *)a2, @"INSERT INTO Alarm (trigger_interval, type, calendarItem_owner_id, calendar_owner_id, UUID, proximity, disabled, location_id, default_alarm, orig_alarm_id) SELECT 0, 0, ROWID, -1, CREATE_UUID(), 0, 0, 0, 1, 0 FROM CalendarItem WHERE     entity_type = 2     AND IFNULL(default_alarm_removed, 0) = 0     AND ROWID NOT IN (SELECT DISTINCT calendaritem_owner_id FROM Alarm WHERE default_alarm = 1) "); {
  }
    }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a2)
      {
        if (*(void *)(*(void *)a2 + 104))
        {
          uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
  }
  uint64_t v12 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  double v17 = 0.0;
  double v18 = 0.0;
  CalEventOccurrenceCacheGetLongAlarmIntervals(&v18, &v17);
  sqlite3_bind_double((sqlite3_stmt *)v12[1], 1, v17);
  sqlite3_bind_double((sqlite3_stmt *)v12[1], 2, -v18);
  if (CDBLockingAssertionsEnabled)
  {
    if (v12)
    {
      if (*v12)
      {
        uint64_t v13 = **v12;
        if (v13)
        {
          if (*(void *)(v13 + 104))
          {
            CFURLRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (CDBLockingAssertionsEnabled)
  {
    if (v12)
    {
      if (*v12)
      {
        uint64_t v15 = **v12;
        if (v15)
        {
          if (*(void *)(v15 + 104))
          {
            CFTypeRef v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
}

uint64_t _CalFloatingAlarmHandler(uint64_t a1, uint64_t **a2)
{
  if (sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), 1) != 5)
  {
    uint64_t v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 2);
    int v5 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), 2);
    if (v4)
    {
      if (!strncmp((const char *)v4, "_float", v5))
      {
        int v7 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 5);
        if (v7 == 2)
        {
          int v8 = 3;
        }
        else
        {
          if (v7 != 3) {
            return 0;
          }
          int v8 = 4;
        }
        uint64_t v9 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v8);
        if (v9)
        {
          CFStringRef v10 = CFStringCreateWithCString(0, (const char *)v9, 0x8000100u);
          if (v10)
          {
            CFStringRef v11 = v10;
            if (CFStringCompare(v10, @"_float", 0))
            {
              int v12 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
              sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 1);
              CalAbsoluteTimeGetAbsoluteTimeInCalTimeZone();
              sqlite3_bind_double((sqlite3_stmt *)a2[1], 1, v13);
              sqlite3_bind_int((sqlite3_stmt *)a2[1], 2, v12);
              if (a2)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*a2)
                  {
                    uint64_t v14 = **a2;
                    if (v14)
                    {
                      if (*(void *)(v14 + 104))
                      {
                        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (Context) {
                          os_unfair_lock_assert_owner(Context + 20);
                        }
                      }
                    }
                  }
                }
              }
              CPSqliteStatementPerform();
              if (a2)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*a2)
                  {
                    uint64_t v16 = **a2;
                    if (v16)
                    {
                      if (*(void *)(v16 + 104))
                      {
                        double v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v17) {
                          os_unfair_lock_assert_owner(v17 + 20);
                        }
                      }
                    }
                  }
                }
              }
              CPSqliteStatementReset();
            }
            CFRelease(v11);
          }
        }
      }
    }
  }
  return 0;
}

void CreateUUIDCallback(sqlite3_context *a1)
{
  CFStringRef v2 = _CalDBCreateUUIDString();
  if (v2)
  {
    CFStringRef v3 = v2;
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(v2);
    if (CStringFromCFString)
    {
      sqlite3_result_text(a1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
      CFRelease(v3);
      return;
    }
    CFRelease(v3);
  }
  sqlite3_result_null(a1);
}

uint64_t CalAlarmGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalAlarmGetPropertyIDWithPropertyName_sPropDict;
  if (!CalAlarmGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalAlarmGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalAlarmGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"UUID";
      int v6 = 10;
      int v7 = @"absoluteDate";
      int v8 = 0;
      uint64_t v9 = @"relativeOffset";
      int v10 = 1;
      CFStringRef v11 = @"type";
      int v12 = 2;
      double v13 = @"externalData";
      int v14 = 7;
      uint64_t v15 = @"proximity";
      int v16 = 11;
      double v17 = @"acknowledgedDate";
      int v18 = 14;
      CFTypeRef v19 = @"isDefaultAlarm";
      int v20 = 15;
      int v21 = @"calendarItemOwner";
      int v22 = 20;
      BOOL v23 = @"calendarOwner";
      int v24 = 21;
      id v25 = @"structuredLocation";
      int v26 = 23;
      long long v27 = @"originalAlarm";
      int v28 = 24;
      uint64_t v29 = @"snoozedAlarmsSet";
      int v30 = 25;
      uint64_t v31 = @"emailAddress";
      int v32 = 17;
      uint64_t v33 = @"urlWrapper";
      int v34 = 27;
      CalAlarmGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 15);
      for (uint64_t i = 224; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalAlarmGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalAlarmGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8F0B42C(_Unwind_Exception *a1)
{
  for (uint64_t i = 224; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalAlarmHasValidParent(uint64_t a1)
{
  if (_CalAlarmGetOwningCalendarItem(a1) || (CFTypeRef result = _CalAlarmGetOwningCalendar(a1)) != 0)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

CFTypeRef _CalAlarmGetOwningEntity(uint64_t a1)
{
  CFTypeRef result = _CalAlarmGetOwningCalendarItem(a1);
  if (!result)
  {
    return _CalAlarmGetOwningCalendar(a1);
  }
  return result;
}

void _CalAlarmCleanUpDanglingEntities(uint64_t a1, void *a2)
{
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"DELETE FROM Alarm WHERE calendaritem_owner_id NOT IN (SELECT ROWID FROM CalendarItem)                                                                                      AND calendar_owner_id NOT IN (SELECT ROWID FROM Calendar);");
  if (v3)
  {
    CFStringRef v4 = v3;
    CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)v3, 0);
    CFRelease(v4);
  }
}

const void *_CalDatabaseCreateAlarm(uint64_t a1)
{
  CFDictionaryRef v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 4);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      int v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v2 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFUUIDRef v10 = CFUUIDCreate(0);
  CFStringRef v11 = CFUUIDCreateString(0, v10);
  if (CDBLockingAssertionsEnabled) {
    BOOL v12 = v2 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (CPRecordGetStore())
    {
      double v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v13) {
        os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v10);
  CFRelease(v11);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateAlarm(os_unfair_lock_s *a1)
{
  CFDictionaryRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Alarm = _CalDatabaseCreateAlarm((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Alarm;
}

const void *_CalAlarmCopy(uint64_t a1, uint64_t a2)
{
  Alarm = _CalDatabaseCreateAlarm(a1);
  BOOL v4 = Alarm;
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = Alarm == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFUUIDRef v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      BOOL v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        double v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        double v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23) {
          os_unfair_lock_assert_owner(v23 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25) {
          os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26) {
          os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        long long v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28) {
          os_unfair_lock_assert_owner(v28 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30) {
          os_unfair_lock_assert_owner(v30 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31) {
          os_unfair_lock_assert_owner(v31 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

uint64_t _CalRemoveAlarm(void *a1)
{
  CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem((uint64_t)a1);
  if (OwningCalendarItem || (CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendar((uint64_t)a1)) != 0)
  {
    uint64_t result = _CalEntityGetType(OwningCalendarItem);
    if ((result & 0xFFFFFFFE) == 2)
    {
      return (uint64_t)_CalCalendarItemRemoveAlarm((uint64_t)OwningCalendarItem, a1);
    }
    else if (result == 1)
    {
      return (uint64_t)_CalCalendarRemoveAlarm((uint64_t)OwningCalendarItem, a1);
    }
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
  return result;
}

void CalRemoveAlarm(void *a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveAlarm(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAlarmSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t CalDatabaseCopyOfAllAlarmsInStore(const void *a1, uint64_t a2)
{
  if (a2)
  {
    BOOL v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    int UID = CalStoreGetUID();
    if (v2)
    {
      int v4 = UID;
      os_unfair_lock_lock(v2 + 20);
      uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)v2);
      uint64_t v6 = RecordStore;
      if (CDBLockingAssertionsEnabled) {
        BOOL v7 = RecordStore == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (Database && (v10 = Database, (uint64_t SelectStatement = CPRecordStoreCreateSelectStatement()) != 0))
      {
        BOOL v12 = (const void *)SelectStatement;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)(v10 + 104))
          {
            double v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13) {
              os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
        uint64_t v14 = CPSqliteDatabaseStatementForReading();
        if (v14)
        {
          uint64_t v15 = v14;
          sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 1, v4);
          sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 2, v4);
          if (CDBLockingAssertionsEnabled)
          {
            if (v6)
            {
              int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16) {
                os_unfair_lock_assert_owner(v16 + 20);
              }
            }
          }
          uint64_t v17 = CPRecordStoreProcessStatement();
        }
        else
        {
          uint64_t v17 = 0;
        }
        CFRelease(v12);
      }
      else
      {
        uint64_t v17 = 0;
      }
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(v2 + 20);
      }
      os_unfair_lock_unlock(v2 + 20);
LABEL_38:
      CFRelease(v2);
      return v17;
    }
    return 0;
  }
  else
  {
    BOOL v2 = (os_unfair_lock_s *)CFRetain(a1);
    int v18 = v2 + 20;
    os_unfair_lock_lock(v2 + 20);
    uint64_t v19 = _CalDatabaseGetRecordStore((uint64_t)v2);
    if (CDBLockingAssertionsEnabled) {
      BOOL v20 = v19 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20)
    {
      int v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v21) {
        os_unfair_lock_assert_owner(v21 + 20);
      }
    }
    uint64_t v17 = CPRecordStoreCopyAllInstancesOfClass();
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v18);
    }
    os_unfair_lock_unlock(v18);
    if (v2) {
      goto LABEL_38;
    }
  }
  return v17;
}

uint64_t _CalInvalidateAlarmsWithCalendarItemOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalInvalidateAlarmsWithCalendarOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalAlarmGetUID()
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t _CalAlarmGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyAlarmWithUID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  int v4 = (const void *)_CalAlarmGetWithUID(RecordStore);
  BOOL v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t _CalAlarmGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void CalAlarmSetUUID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmCopyUUID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalDatabaseCopyAlarmWithUUID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v6 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (v6)
  {
    CFArrayRef v7 = v6;
    if (CFArrayGetCount(v6) < 1)
    {
      CFTypeRef v9 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      CFTypeRef v9 = CFRetain(ValueAtIndex);
    }
    CFRelease(v7);
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v9;
}

uint64_t __CalDatabaseCopyAlarmWithUUID_block_invoke(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(sqlite3_stmt **)(a2 + 8);
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(*(const __CFString **)(a1 + 32));
  BOOL v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
  return sqlite3_bind_text(v2, 1, CStringFromCFString, -1, v4);
}

uint64_t CalAlarmCopyExternalID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAlarmSetExternalRepresentation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmCopyExternalRepresentation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAlarmClearExternalProperties(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalAlarmSetTriggerDate(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (fabs(a2 + -1.17549435e-38) >= 2.22044605e-16)
  {
    _CalRecordSetDateProperty(a1, 0, a2);
    if (!a1) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
LABEL_10:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
LABEL_14:
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double _CalAlarmGetTriggerDate(uint64_t a1)
{
  double result = _CalRecordGetDateProperty(a1);
  if (vabdd_f64(result, *MEMORY[0x1E4F57888]) < 2.22044605e-16) {
    return 1.17549435e-38;
  }
  return result;
}

double CalAlarmGetTriggerDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  double v4 = *MEMORY[0x1E4F57888];
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  if (vabdd_f64(DateProperty, v4) < 2.22044605e-16) {
    Dateuint64_t Property = 1.17549435e-38;
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalAlarmSetTriggerInterval(uint64_t a1, int a2)
{
  int valuePtr = a2;
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2 == 0x7FFFFFFF) {
    CFNumberRef v5 = 0;
  }
  else {
    CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFArrayRef v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (_CalAlarmIsDefaultAlarm(a1))
  {
    _CalAlarmSetIsDefaultAlarm(a1);
    CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
    _CalCalendarItemSetDefaultAlarmRemoved((uint64_t)OwningCalendarItem, 1u);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalAlarmIsDefaultAlarm(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() == 1;
}

uint64_t _CalAlarmSetIsDefaultAlarm(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

CFTypeRef _CalAlarmGetOwningCalendarItem(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  return CalRelationGetRelatedObject(Property);
}

uint64_t _CalAlarmGetTriggerInterval(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFNumberRef Property = (const __CFNumber *)CPRecordGetProperty();
  if (!Property) {
    return 0x7FFFFFFFLL;
  }
  unsigned int valuePtr = 0;
  CFNumberGetValue(Property, kCFNumberIntType, &valuePtr);
  return valuePtr;
}

uint64_t CalAlarmGetTriggerInterval(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t TriggerInterval = _CalAlarmGetTriggerInterval(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return TriggerInterval;
}

void CalAlarmSetType(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmGetType(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef CalAlarmCopyOwningCalendarItem(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  CFTypeRef v4 = OwningCalendarItem;
  if (OwningCalendarItem) {
    CFRetain(OwningCalendarItem);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalAlarmGetOwningCalendar(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  return CalRelationGetRelatedObject(Property);
}

CFTypeRef CalAlarmCopyOwningCalendar(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef OwningCalendar = _CalAlarmGetOwningCalendar(a1);
  CFTypeRef v4 = OwningCalendar;
  if (OwningCalendar) {
    CFRetain(OwningCalendar);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalAlarmCopyOwningEntity(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  if (OwningCalendarItem || (CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendar(a1)) != 0) {
    CFRetain(OwningCalendarItem);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return OwningCalendarItem;
}

BOOL CalAlarmIsEquivalentToAlarm(uint64_t a1, uint64_t a2)
{
  BOOL v2 = 0;
  if (a1 && a2)
  {
    RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
    if (a1 == a2)
    {
      BOOL v2 = 1;
    }
    else
    {
      Dateuint64_t Property = _CalRecordGetDateProperty(a1);
      BOOL v2 = 0;
      if (vabdd_f64(DateProperty, _CalRecordGetDateProperty(a2)) < 2.22044605e-16)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
        uint64_t Property = CPRecordGetProperty();
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFTypeRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9) {
              os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
        BOOL v2 = Property == CPRecordGetProperty();
      }
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(RecordLock);
    }
    os_unfair_lock_unlock(RecordLock);
  }
  return v2;
}

void CalAlarmSetEnabled(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalAlarmIsEnabled(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsEnabled = _CalAlarmIsEnabled(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsEnabled;
}

BOOL _CalAlarmIsEnabled(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() == 0;
}

void CalAlarmSetProximity(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmGetProximity(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void *_CalAlarmSetLocation(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  double result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalAlarmSetLocation(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetLocation(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAlarmCopyLocation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CFTypeRef v5 = CalRelationCopyRelatedObject(Property);
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalAlarmSetAcknowledgedDate(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 14, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalAlarmRemoveAcknowledged(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalAlarmGetAcknowledged(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

double CalAlarmGetAcknowledgedDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalAlarmSetIsDefaultAlarm(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetIsDefaultAlarm(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalAlarmIsDefaultAlarm(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsDefaultAlarm = _CalAlarmIsDefaultAlarm(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsDefaultAlarm;
}

uint64_t CalAlarmCopyEmailAddress(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAlarmSetEmailAddress(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmCopyBookmark(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalAlarmCopyBookmark(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAlarmCopyBookmark(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalAlarmSetBookmark(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetBookmark(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAlarmSetBookmark(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void _CalAlarmSetURL(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = (id)[objc_alloc(MEMORY[0x1E4F28FF8]) initWithURL:a2 readonly:1];
    if (!a1) {
      goto LABEL_9;
    }
  }
  else
  {
    id v4 = 0;
    if (!a1) {
      goto LABEL_9;
    }
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
LABEL_9:
  CPRecordSetProperty();
}

void CalAlarmSetURL(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetURL(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmCopyURL(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalAlarmCopyURL(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAlarmCopyURL(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  BOOL v2 = (void *)CPRecordCopyProperty();
  uint64_t v3 = [v2 url];

  return v3;
}

void *_CalAlarmSetOriginalAlarm(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  double result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalAlarmSetOriginalAlarm(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetOriginalAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalAlarmGetOriginalAlarm(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

CFTypeRef CalAlarmCopyOriginalAlarm(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef OriginalAlarm = _CalAlarmGetOriginalAlarm(a1);
  CFTypeRef v4 = OriginalAlarm;
  if (OriginalAlarm) {
    CFRetain(OriginalAlarm);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFArrayRef _CalAlarmAddSnoozedAlarm(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void CalAlarmAddSnoozedAlarm(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmAddSnoozedAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void *_CalAlarmRemoveSnoozedAlarm(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

void CalAlarmRemoveSnoozedAlarm(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmRemoveSnoozedAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalAlarmCopySnoozedAlarms(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFMutableArrayRef CalAlarmCopySnoozedAlarms(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalAlarmCopySnoozedAlarms(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

BOOL _CalAlarmIsDisplayable(uint64_t a1)
{
  if (!_CalAlarmIsEnabled(a1)) {
    return 0;
  }
  CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  if (!OwningCalendarItem) {
    CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendar(a1);
  }
  uint64_t Store = CPRecordGetStore();
  uint64_t v4 = 1;
  if (!OwningCalendarItem) {
    return v4;
  }
  uint64_t v5 = Store;
  if (!Store) {
    return v4;
  }
  if (_CalEntityIsOfType(OwningCalendarItem, 2))
  {
    if (_CalEventGetParticipationStatus((uint64_t)OwningCalendarItem) != 2
      && _CalEventIsDisplayable((uint64_t)OwningCalendarItem)
      && _CalCalendarItemGetStatus((uint64_t)OwningCalendarItem) != 3)
    {
      _CalEventGetCalendarId((uint64_t)OwningCalendarItem);
      CalendarWithint UID = _CalGetCalendarWithUID(v5);
      if (!CalendarWithUID) {
        return v4;
      }
      uint64_t v7 = CalendarWithUID;
      _CalCalendarGetStoreId(CalendarWithUID);
      StoreWithint UID = _CalGetStoreWithUID(v5);
      if (!StoreWithUID) {
        return !_CalCalendarIsIgnoringEventAlerts(v7);
      }
      uint64_t v9 = StoreWithUID;
      if (_CalStoreIsEnabled(StoreWithUID) && !_CalStoreIsDelegate(v9) && _CalStoreGetType(v9) != 6) {
        return !_CalCalendarIsIgnoringEventAlerts(v7);
      }
    }
    return 0;
  }
  if (!_CalEntityIsOfType(OwningCalendarItem, 1)) {
    return v4;
  }
  _CalCalendarGetStoreId((uint64_t)OwningCalendarItem);
  uint64_t v10 = _CalGetStoreWithUID(v5);
  if (!v10) {
    return 0;
  }
  return _CalStoreIsEnabled(v10);
}

BOOL CalAlarmIsDisplayable(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsDisplayable = _CalAlarmIsDisplayable(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsDisplayable;
}

__CFString *_CreateQueryStringForCalendarIDsWithPropertyName(const __CFArray *a1, uint64_t a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v5 = Count - 1;
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v9 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, @" AND %@ IN ("), a2;
    for (CFIndex i = 0; i != v6; ++i)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
      unsigned int valuePtr = -1;
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      if (valuePtr != -1)
      {
        if (v5 == i) {
          CFStringRef v12 = CFStringCreateWithFormat(v7, 0, @"%d"), valuePtr);
        }
        else {
          CFStringRef v12 = CFStringCreateWithFormat(v7, 0, @"%d, ", valuePtr);
        }
        if (v12)
        {
          CFStringRef v13 = v12;
          CFStringAppend(v9, v12);
          CFRelease(v13);
        }
      }
    }
  }
  return v9;
}

uint64_t _CalCopyAbsoluteCalendarItemAlarmsInDateRange(uint64_t a1, const __CFArray *a2)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (RecordStore)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"JOIN CalendarItem ON calendaritem_owner_id = CalendarItem.ROWID JOIN Calendar ON CalendarItem.calendar_id = Calendar.ROWID JOIN Store ON Calendar.store_id = Store.ROWID WHERE Store.delegated_account_owner_store_id IS NULL AND trigger_date IS NOT NULL AND completion_date IS NULL AND (trigger_date >= ? AND trigger_date <= ?) AND CalendarItem.has_recurrences = 0");
    if (MutableCopy)
    {
      CFIndex v5 = MutableCopy;
      if (a2)
      {
        QueryStringForCalendarIDsWithPropertyName = _CreateQueryStringForCalendarIDsWithPropertyName(a2, @"CalendarItem.calendar_id");
        if (QueryStringForCalendarIDsWithPropertyName)
        {
          CFAllocatorRef v7 = QueryStringForCalendarIDsWithPropertyName;
          CFStringAppend(v5, QueryStringForCalendarIDsWithPropertyName);
          CFRelease(v7);
        }
      }
      if (CDBLockingAssertionsEnabled)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t RecordStore = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return RecordStore;
}

uint64_t _CalCopyRelativeNonRecurringEventAlarmsInDateRange(uint64_t a1, const __CFArray *a2, int a3, int a4, sqlite3 *a5, double a6, double a7, double a8, double a9)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (!Database) {
      return 0;
    }
    uint64_t v20 = Database;
    *(double *)pApp = a6;
    *(double *)&pApp[1] = a7;
    *(double *)&pApp[2] = a8;
    *(double *)&pApp[3] = a9;
    int v34 = a3;
    int v35 = a4;
    int function = sqlite3_create_function(a5, "MATCH_DATE_RANGE", 11, 526337, pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))MatchDateRangeCallback, 0, 0);
    if (function)
    {
      int v22 = function;
      BOOL v23 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 67109120;
        int v37 = v22;
        _os_log_impl(&dword_1A8E81000, v23, OS_LOG_TYPE_ERROR, "Failed to create MATCH_DATE_RANGE function in CalCopyRelativeNonRecurringEventAlarmsInDateRange, with error code: %i", buf, 8u);
      }
      return 0;
    }
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"JOIN CalendarItem ON calendaritem_owner_id = CalendarItem.ROWID JOIN Calendar ON CalendarItem.calendar_id = Calendar.ROWID JOIN Store ON Calendar.store_id = Store.ROWID WHERE     Store.delegated_account_owner_store_id IS NULL     AND ((proximity = 0 OR proximity IS NULL)     AND trigger_date IS NULL     AND has_recurrences = 0     AND MATCH_DATE_RANGE(start_tz, start_date, travel_time, trigger_interval, all_day, default_all_day_alarm_offset, default_alarm_offset, default_alarm, has_recurrences, NULL, NULL) ");
    if (MutableCopy)
    {
      id v25 = MutableCopy;
      if (a2)
      {
        QueryStringForCalendarIDsWithPropertyName = _CreateQueryStringForCalendarIDsWithPropertyName(a2, @"CalendarItem.calendar_id");
        if (QueryStringForCalendarIDsWithPropertyName)
        {
          long long v27 = QueryStringForCalendarIDsWithPropertyName;
          CFStringAppend(v25, QueryStringForCalendarIDsWithPropertyName);
          CFRelease(v27);
        }
      }
      CFStringAppend(v25, @""));
      uint64_t SelectStatement = CPRecordStoreCreateSelectStatement();
      if (SelectStatement)
      {
        uint64_t v29 = (const void *)SelectStatement;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)(v20 + 104))
          {
            int v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v30) {
              os_unfair_lock_assert_owner(v30 + 20);
            }
          }
        }
        if (CPSqliteDatabaseStatementForReading())
        {
          if (CDBLockingAssertionsEnabled)
          {
            uint64_t v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v31) {
              os_unfair_lock_assert_owner(v31 + 20);
            }
          }
          uint64_t RecordStore = CPRecordStoreProcessStatement();
        }
        else
        {
          uint64_t RecordStore = 0;
        }
        CFRelease(v29);
      }
      else
      {
        uint64_t RecordStore = 0;
      }
      CFRelease(v25);
    }
    else
    {
      uint64_t RecordStore = 0;
    }
    sqlite3_create_function(a5, "MATCH_DATE_RANGE", 11, 526337, 0, 0, 0, 0);
  }
  return RecordStore;
}

void MatchDateRangeCallback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a2 != 11)
  {
    CFIndex v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 67109120;
      int v34 = a2;
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "MatchDateRangeCallback received wrong number of args. [%i args]", buf, 8u);
    }
  }
  int v32 = a1;
  CFAllocatorRef v7 = sqlite3_user_data(a1);
  int v9 = *((_DWORD *)v7 + 8);
  int v8 = *((_DWORD *)v7 + 9);
  double v10 = *(double *)v7;
  double v11 = *((double *)v7 + 1);
  CFStringRef v12 = sqlite3_value_text(*a3);
  int v13 = sqlite3_value_bytes(*a3);
  if (v12 && !strncmp((const char *)v12, "_float", v13))
  {
    double v10 = *((double *)v7 + 2);
    double v11 = *((double *)v7 + 3);
    int v31 = 1;
  }
  else
  {
    int v31 = 0;
  }
  double v14 = sqlite3_value_double(a3[1]);
  int v15 = sqlite3_value_int(a3[2]);
  int v16 = sqlite3_value_int(a3[3]);
  int v17 = sqlite3_value_int(a3[4]);
  if (sqlite3_value_type(a3[5]) != 5) {
    int v8 = sqlite3_value_int(a3[5]);
  }
  if (sqlite3_value_type(a3[6]) != 5) {
    int v9 = sqlite3_value_int(a3[6]);
  }
  int v18 = sqlite3_value_int(a3[7]);
  int v19 = sqlite3_value_int(a3[8]);
  int v20 = sqlite3_value_type(a3[9]);
  double v21 = 0.0;
  double v22 = 0.0;
  if (v20 != 5) {
    double v22 = sqlite3_value_double(a3[9]);
  }
  int v23 = sqlite3_value_type(a3[10]);
  if (v23 != 5) {
    double v21 = sqlite3_value_double(a3[10]);
  }
  if (v18 == 1 && (v17 != 1 ? (int v16 = v9) : (int v16 = v8), v16 == -1)
    || (v24 = (double)v15, double v25 = (double)v16, v26 = v14 - (double)v15 + (double)v16, v26 > v11))
  {
    int v27 = 0;
    int v28 = v32;
  }
  else
  {
    int v28 = v32;
    if (v19 == 1)
    {
      if (v20 == 5)
      {
        if (v23 == 5)
        {
          int v27 = 1;
          goto LABEL_35;
        }
        double v30 = v21 - v24 + v25;
        if (v31) {
          double v30 = v30 + 172800.0;
        }
      }
      else
      {
        double v30 = v22 - v24 + v25;
      }
      BOOL v29 = v30 < v10;
    }
    else
    {
      BOOL v29 = v26 < v10;
    }
    int v27 = !v29;
  }
LABEL_35:
  sqlite3_result_int(v28, v27);
}

uint64_t _CalCopyRelativeRecurringEventAlarmsInDateRange(uint64_t a1, const __CFArray *a2, int a3, int a4, sqlite3 *a5, double a6, double a7, double a8, double a9)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (!Database) {
      return 0;
    }
    uint64_t v20 = Database;
    *(double *)pApp = a6;
    *(double *)&pApp[1] = a7;
    *(double *)&pApp[2] = a8;
    *(double *)&pApp[3] = a9;
    int v34 = a3;
    int v35 = a4;
    int function = sqlite3_create_function(a5, "MATCH_DATE_RANGE", 11, 526337, pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))MatchDateRangeCallback, 0, 0);
    if (function)
    {
      int v22 = function;
      int v23 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 67109120;
        int v37 = v22;
        _os_log_impl(&dword_1A8E81000, v23, OS_LOG_TYPE_ERROR, "Failed to create MATCH_DATE_RANGE function in CalCopyRelativeRecurringEventAlarmsInDateRange, with error code: %i", buf, 8u);
      }
      return 0;
    }
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"JOIN CalendarItem ON calendaritem_owner_id = CalendarItem.ROWID JOIN Calendar ON CalendarItem.calendar_id = Calendar.ROWID JOIN Store ON Calendar.store_id = Store.ROWID JOIN Recurrence on Recurrence.owner_id = CalendarItem.ROWID WHERE     Store.delegated_account_owner_store_id IS NULL     AND ((proximity = 0 OR proximity IS NULL)     AND trigger_date IS NULL     AND has_recurrences = 1     AND MATCH_DATE_RANGE(start_tz, start_date, travel_time, trigger_interval, all_day, default_all_day_alarm_offset, default_alarm_offset, default_alarm, has_recurrences, Recurrence.end_date, Recurrence.cached_end_date) ");
    if (MutableCopy)
    {
      double v25 = MutableCopy;
      if (a2)
      {
        QueryStringForCalendarIDsWithPropertyName = _CreateQueryStringForCalendarIDsWithPropertyName(a2, @"CalendarItem.calendar_id");
        if (QueryStringForCalendarIDsWithPropertyName)
        {
          int v27 = QueryStringForCalendarIDsWithPropertyName;
          CFStringAppend(v25, QueryStringForCalendarIDsWithPropertyName);
          CFRelease(v27);
        }
      }
      CFStringAppend(v25, @""));
      uint64_t SelectStatement = CPRecordStoreCreateSelectStatement();
      if (SelectStatement)
      {
        BOOL v29 = (const void *)SelectStatement;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)(v20 + 104))
          {
            double v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v30) {
              os_unfair_lock_assert_owner(v30 + 20);
            }
          }
        }
        if (CPSqliteDatabaseStatementForReading())
        {
          if (CDBLockingAssertionsEnabled)
          {
            int v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v31) {
              os_unfair_lock_assert_owner(v31 + 20);
            }
          }
          uint64_t RecordStore = CPRecordStoreProcessStatement();
        }
        else
        {
          uint64_t RecordStore = 0;
        }
        CFRelease(v29);
      }
      else
      {
        uint64_t RecordStore = 0;
      }
      CFRelease(v25);
    }
    else
    {
      uint64_t RecordStore = 0;
    }
    sqlite3_create_function(a5, "MATCH_DATE_RANGE", 11, 526337, 0, 0, 0, 0);
  }
  return RecordStore;
}

uint64_t CalDatabaseCopyAlarmChangesInStore(const void *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2) {
    CFIndex v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    CFIndex v5 = (os_unfair_lock_s *)CFRetain(a1);
  }
  CFIndex v6 = v5;
  CFAllocatorRef v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v8 = _CalAlarmCopyChangeHistoryWhereClauseForStore((uint64_t)v6, a2);
  uint64_t v9 = _CalDatabaseCopyAlarmChangesInternal((uint64_t)v6, (uint64_t)v8, a3);
  if (v8) {
    CFRelease(v8);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);
  if (v6) {
    CFRelease(v6);
  }
  return v9;
}

CFStringRef _CalAlarmCopyChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN     (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN     (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 4, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyAlarmChangesInternal(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseRemoveAlarmChangesInStoreToIndex(const void *a1, uint64_t a2, int a3)
{
  uint64_t v12 = 0;
  int v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  if (a2) {
    CFIndex v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    CFIndex v5 = (os_unfair_lock_s *)CFRetain(a1);
  }
  CFStringRef v6 = v5;
  CFAllocatorRef v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __CalDatabaseRemoveAlarmChangesInStoreToIndex_block_invoke;
  v10[3] = &unk_1E5D61B08;
  v10[4] = &v12;
  v10[5] = v6;
  v10[6] = a2;
  int v11 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v6, (uint64_t)v10);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);
  CFRelease(v6);
  uint64_t v8 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1A8F0F424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveAlarmChangesInStoreToIndex_block_invoke(void *a1)
{
  uint64_t result = _CalDatabaseRemoveAlarmChangesInStoreToIndex(a1[5], a1[6]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t _CalDatabaseRemoveAlarmChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = _CalAlarmCopyChangeHistoryWhereClauseForStore(a1, a2);
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

uint64_t CalDatabaseRemoveAlarmChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  uint64_t v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __CalDatabaseRemoveAlarmChangesWithIndices_block_invoke;
  v7[3] = &unk_1E5D61B30;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A8F0F5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveAlarmChangesWithIndices_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassWithIndices();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseCopyAlarmChangesInCalendar(const void *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2) {
    uint64_t v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    uint64_t v5 = (os_unfair_lock_s *)CFRetain(a1);
  }
  CFStringRef v6 = v5;
  uint64_t v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v8 = _CalAlarmCopyChangeHistoryWhereClauseForCalendar((uint64_t)v6, a2);
  uint64_t v9 = _CalDatabaseCopyAlarmChangesInternal((uint64_t)v6, (uint64_t)v8, a3);
  if (v8) {
    CFRelease(v8);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);
  if (v6) {
    CFRelease(v6);
  }
  return v9;
}

CFStringRef _CalAlarmCopyChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"calendar_id = %d AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@') AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@') AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 4, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveAlarmChangesInCalendarToIndex(const void *a1, uint64_t a2, int a3)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  if (a2) {
    uint64_t v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else {
    uint64_t v5 = (os_unfair_lock_s *)CFRetain(a1);
  }
  CFStringRef v6 = v5;
  uint64_t v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v8 = _CalAlarmCopyChangeHistoryWhereClauseForCalendar((uint64_t)v6, a2);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseRemoveAlarmChangesInCalendarToIndex_block_invoke;
  v11[3] = &unk_1E5D61B08;
  v11[4] = &v13;
  v11[5] = v6;
  int v12 = a3;
  v11[6] = v8;
  _CalDatabaseLockForWriteTransaction((uint64_t)v6, (uint64_t)v11);
  if (v8) {
    CFRelease(v8);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);
  CFRelease(v6);
  uint64_t v9 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1A8F0F900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveAlarmChangesInCalendarToIndex_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassToIndexWhere();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _CalDatabasePrepareAlarmsInStoreForMigration(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t ID = CPRecordGetID();
  uint64_t result = _CalDatabaseRemoveAlarmChangesInStoreToIndex(a1, a3);
  if (result)
  {
    uint64_t result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE Alarm SET external_mod_tag = NULL, external_id_tag = NULL, external_rep = NULL                                                                           WHERE calendaritem_owner_id IN (SELECT CalendarItem.ROWID FROM CalendarItem JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = %d)                                                                           OR calendar_owner_id IN (SELECT Calendar.ROWID FROM Calendar WHERE store_id = %d);",
                        ID,
                        ID);
    if (result)
    {
      CFStringRef v8 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v8);
      return 1;
    }
  }
  return result;
}

uint64_t CalDatabaseCopyLocationBasedAlarmsForIncompleteTasks(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t CalDatabaseCopyLocationBasedAlarmsForCalendars(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t CalDatabaseCopyVehicleTriggerAlarmsForIncompleteTasks(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t CalAlarmCopyDefaultTimedAlarmOffsetWithPreferences(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t CalAlarmCopyDefaultAllDayAlarmOffsetWithPreferences(void *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

uint64_t CalAlarmSetDefaultTimedAlarmOffsetWithPreferences(void *a1, const char *a2)
{
  return objc_msgSend(a1, "set_DefaultTimedAlarmOffset:", a2);
}

uint64_t CalAlarmSetDefaultAllDayAlarmOffsetWithPreferences(void *a1, const char *a2)
{
  return objc_msgSend(a1, "set_DefaultAllDayAlarmOffset:", a2);
}

uint64_t CalAlarmCopyDefaultTimedAlarmOffset()
{
  uint64_t v0 = +[CDBPreferences shared];
  uint64_t v1 = objc_msgSend(v0, "get_DefaultTimedAlarmOffset");

  return v1;
}

void CalAlarmSetDefaultTimedAlarmOffset(uint64_t a1)
{
  id v2 = +[CDBPreferences shared];
  objc_msgSend(v2, "set_DefaultTimedAlarmOffset:", a1);
}

uint64_t CalAlarmCopyDefaultAllDayAlarmOffset()
{
  uint64_t v0 = +[CDBPreferences shared];
  uint64_t v1 = objc_msgSend(v0, "get_DefaultAllDayAlarmOffset");

  return v1;
}

void CalAlarmSetDefaultAllDayAlarmOffset(uint64_t a1)
{
  id v2 = +[CDBPreferences shared];
  objc_msgSend(v2, "set_DefaultAllDayAlarmOffset:", a1);
}

CFTypeRef _CalAlarmLoadStoreId(uint64_t a1)
{
  CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  if (!OwningCalendarItem)
  {
    CFTypeRef result = _CalAlarmGetOwningCalendar(a1);
    CFTypeRef OwningCalendarItem = result;
    if (!result) {
      return result;
    }
  }
  int Type = _CalEntityGetType(OwningCalendarItem);
  if ((Type & 0xFFFFFFFE) == 2)
  {
    _CalCalendarItemGetStoreId((uint64_t)OwningCalendarItem);
    goto LABEL_7;
  }
  if (Type == 1)
  {
    _CalCalendarGetStoreId((uint64_t)OwningCalendarItem);
LABEL_7:
    if (!a1) {
      goto LABEL_14;
    }
LABEL_10:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    goto LABEL_14;
  }
  if (a1) {
    goto LABEL_10;
  }
LABEL_14:
  return (CFTypeRef)CPRecordInitializeProperty();
}

CFTypeRef _CalAlarmLoadCalendarId(uint64_t a1)
{
  CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  if (!OwningCalendarItem)
  {
    CFTypeRef result = _CalAlarmGetOwningCalendar(a1);
    CFTypeRef OwningCalendarItem = result;
    if (!result) {
      return result;
    }
  }
  int Type = _CalEntityGetType(OwningCalendarItem);
  if ((Type & 0xFFFFFFFE) == 2)
  {
    _CalEventGetCalendarId((uint64_t)OwningCalendarItem);
    goto LABEL_7;
  }
  if (Type == 1)
  {
    CPRecordGetID();
LABEL_7:
    if (!a1) {
      goto LABEL_14;
    }
LABEL_10:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    goto LABEL_14;
  }
  if (a1) {
    goto LABEL_10;
  }
LABEL_14:
  return (CFTypeRef)CPRecordInitializeProperty();
}

id CalGetRealUIDFromRecurrenceUID(void *a1)
{
  id v1 = a1;
  id v2 = [v1 componentsSeparatedByString:@"/RID="];
  BOOL v3 = v1;
  if ([v2 count])
  {
    BOOL v3 = [v2 objectAtIndex:0];
  }
  return v3;
}

id CalGetRecurrenceUIDFromRealUID(void *a1, double a2)
{
  BOOL v3 = NSString;
  BOOL v4 = CalGetRealUIDFromRecurrenceUID(a1);
  uint64_t v5 = [v3 stringWithFormat:@"%@/RID=%llu", v4, (unint64_t)a2];

  return v5;
}

double _CalOriginalStartDateFromICSComponent(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = objc_msgSend(v3, "recurrence_id");

  if (v5)
  {
    uint64_t v6 = objc_msgSend(v3, "recurrence_id");
    uint64_t DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v6, v4);

    CalDateTimeRelease();
  }
  else
  {
    uint64_t DateTimeFromICSDate = *MEMORY[0x1E4F57888];
  }

  return *(double *)&DateTimeFromICSDate;
}

void CalCalendarItemUpdateUIDFromICSComponent(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  double started = _CalOriginalStartDateFromICSComponent(v11, a3);
  uint64_t v6 = [v11 uid];
  double v7 = fabs(started);
  if (vabdd_f64(started, *MEMORY[0x1E4F57888]) >= 2.22044605e-16 && v7 >= 2.22044605e-16)
  {
    uint64_t v9 = objc_msgSend(v11, "uid", 2.22044605e-16, v7);
    uint64_t v10 = CalGetRecurrenceUIDFromRealUID(v9, started);

    uint64_t v6 = (void *)v10;
  }
  if (v6) {
    CalCalendarItemSetUniqueIdentifier(a1, (uint64_t)v6);
  }
}

uint64_t CalCalendarItemUpdateFromICSComponent(const void *a1, uint64_t a2, void *a3, void *a4, os_unfair_lock_s *a5, void *a6, void *a7, void *a8, unsigned __int8 a9)
{
  uint64_t v517 = *MEMORY[0x1E4F143B8];
  id v16 = a3;
  id v439 = a4;
  id v17 = a6;
  id v437 = a7;
  id v18 = a8;
  v438 = v17;
  int v19 = [v17 objectForKey:@"ItemBridgeOptions"];
  uint64_t v446 = [v19 unsignedIntegerValue];

  if (!v16)
  {
    uint64_t v33 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_DEBUG, "icsItem is nil. There's nothing for us to do", buf, 2u);
    }
    uint64_t v34 = 1;
    goto LABEL_536;
  }
  if (!a1)
  {
    int v35 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1A8E81000, v35, OS_LOG_TYPE_DEBUG, "Cannot update a NULL calendar item", buf, 2u);
    }
    uint64_t v34 = 0;
    goto LABEL_536;
  }
  v436 = v18;
  id v431 = v16;
  id v20 = v16;
  id v21 = v439;
  int v22 = [v20 dtstart];

  v471 = v21;
  if (v22)
  {
    int v23 = [v20 dtstart];
    uint64_t DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v23, v21);
    CFStringRef v26 = v25;
    CFAbsoluteTime v27 = *(double *)&DateTimeFromICSDate;

    CFDateRef v28 = CFDateCreate(0, v27);
    double started = (void *)CalCalendarItemCopyStartDate((uint64_t)a1);
    CFDateRef v30 = v28;
    int v31 = (__CFString *)v30;
    if (!started && v30 || started && ([started isEqualToDate:v30] & 1) == 0)
    {
      CalCalendarItemSetStartDate((uint64_t)a1, v31);
      int v32 = 1;
    }
    else
    {
      int v32 = 0;
    }
    if (CFStringCompare(v26, @"_float", 0)) {
      CFTimeZoneRef v36 = CFTimeZoneCreateWithName(0, v26, 1u);
    }
    else {
      CFTimeZoneRef v36 = 0;
    }
    CalCalendarItemSetStartTimeZone((uint64_t)a1, (uint64_t)v36);
    if (CalEntityIsOfType(a1, 2)) {
      CalCalendarItemSetEndTimeZone((uint64_t)a1, (uint64_t)v36);
    }
    if (v36) {
      CFRelease(v36);
    }
    CalDateTimeRelease();
    if (v31) {
      CFRelease(v31);
    }

    id v21 = v471;
    if (v32) {
      [v436 addObject:II_FROM_KEY];
    }
  }
  else
  {
  }
  if ((v446 & 0x20000000) != 0)
  {
    int v37 = [v20 summary];

    if (!v37) {
      goto LABEL_35;
    }
  }
  if (v436)
  {
    CFStringRef v38 = (const __CFString *)CalCalendarItemCopySummary((uint64_t)a1);
    CFArrayRef v39 = [v20 summary];
    CFComparisonResult v40 = CFStringCompare(v38, v39, 0);

    if (v40) {
      [v436 addObject:II_EVENT_TITLE_KEY];
    }
    CFRelease(v38);
  }
  CFIndex v41 = [v20 summary];
  CalCalendarItemSetSummary((uint64_t)a1, v41);

  if ((v446 & 0x20000000) != 0)
  {
LABEL_35:
    __int16 v42 = [v20 location];
    if (v42)
    {
    }
    else
    {
      uint64_t v43 = objc_msgSend(v20, "x_apple_structured_location");

      if (!v43) {
        goto LABEL_60;
      }
    }
  }
  id v44 = v20;
  uint64_t v45 = objc_msgSend(v44, "x_apple_structured_location");
  id v46 = v45;
  if (v45)
  {
    long long v47 = (void *)MEMORY[0x1E4F57740];
    long long v48 = [v45 title];
    uint64_t v49 = [v46 address];
    long long v50 = [v47 fullDisplayStringWithTitle:v48 address:v49];

    long long v51 = [v44 location];
    LOBYTE(v49) = [v51 isEqualToString:v50];

    if (v49)
    {
      if (v50) {
        goto LABEL_44;
      }
    }
    else
    {

      id v46 = 0;
    }
  }
  long long v50 = [v44 location];
LABEL_44:
  long long v52 = [v46 value];

  if (v52)
  {
LABEL_45:
    CalCalendarItemSetClientLocation((uint64_t)a1, 0);
    LODWORD(v53) = 1;
    goto LABEL_53;
  }
  CFTypeRef v54 = CalCalendarItemCopyClientLocation((uint64_t)a1);
  if (!v54) {
    goto LABEL_52;
  }
  CFIndex v55 = v54;
  uint64_t v56 = CalLocationCopyDerivedFrom((uint64_t)v54);
  if (!v56)
  {
    id v454 = (id)CalLocationCopyTitle((uint64_t)v55);
    char v59 = (void *)CalLocationCopyAddress((uint64_t)v55);
    uint64_t v60 = [MEMORY[0x1E4F57740] fullDisplayStringWithTitle:v454 address:v59];
    char v460 = [v50 isEqualToString:v60];

    CFRelease(v55);
    if ((v460 & 1) == 0) {
      goto LABEL_45;
    }
LABEL_52:
    LODWORD(v53) = 0;
    goto LABEL_53;
  }
  id v57 = (void *)v56;
  if ([v50 length])
  {
    char v58 = [v50 isEqualToString:v57];
    CFRelease(v55);

    if ((v58 & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_52;
  }
  uint64_t v53 = [v57 length];
  CFRelease(v55);

  if (v53) {
    goto LABEL_45;
  }
LABEL_53:
  if (v46
    || ([v44 location],
        uint64_t v61 = objc_claimAutoreleasedReturnValue(),
        uint64_t v62 = [v61 length],
        v61,
        v62))
  {
    CFTypeRef Location = CalCalendarItemCopyLocation((uint64_t)a1);
    if (!Location)
    {
      CFTypeRef Location = CalDatabaseCreateLocation(a5);
      CalCalendarItemSetLocation((uint64_t)a1, Location);
    }
    CalLocationUpdateFromICSComponent((uint64_t)Location, v44, 1, 0);
    CFRelease(Location);
  }
  else
  {
    CalCalendarItemSetLocation((uint64_t)a1, 0);
  }
  id v21 = v471;

  if (v53) {
    [v436 addObject:II_LOCATION_KEY];
  }
LABEL_60:
  if (a2) {
    uint64_t v64 = a2;
  }
  else {
    uint64_t v64 = (uint64_t)a1;
  }
  v430 = (void *)CalCalendarItemCopyDescription(v64);
  CFStringRef v65 = objc_msgSend(MEMORY[0x1E4F57698], "deserializeConference:");
  long long v66 = (void *)MEMORY[0x1E4F57698];
  CFArrayRef v67 = [v20 description];
  unsigned int v68 = [v66 deserializeConference:v67];

  v433 = v65;
  id v69 = [v65 conference];
  v432 = v68;
  uint64_t v70 = [v68 conference];
  v434 = (void *)v70;
  v435 = v69;
  int v71 = a9;
  if (v69)
  {
    int v71 = 1;
    int v72 = 0;
  }
  else
  {
    int v72 = 1;
  }
  if (v70)
  {
    LODWORD(v73) = 1;
  }
  else
  {
    int v71 = 1;
    LODWORD(v73) = v72;
  }
  if (v71 == 1 && v73 && (!v69 || ([v69 isEqual:v70] & 1) != 0))
  {
    CalEventRemoveInvitationChangedProperties((uint64_t)a1, 256);
    goto LABEL_123;
  }
  uint64_t v74 = [v65 blockTitle];
  uint64_t v75 = [v432 blockTitle];
  CFArrayRef v76 = CalCalendarItemCopyAttendees(v64);
  if (!v76)
  {
    v87 = (id)CDBLogHandle;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1A8E81000, v87, OS_LOG_TYPE_INFO, "VCNotification: Not searching for room attendees because we currently have no attendees.", buf, 2u);
    }

    goto LABEL_103;
  }
  CFArrayRef v77 = v76;
  if (!(v74 | v75))
  {
    CFTypeRef v88 = (id)CDBLogHandle;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1A8E81000, v88, OS_LOG_TYPE_INFO, "VCNotification: Not searching for room attendees because we have no virtual conference titles.", buf, 2u);
    }

    CFRelease(v77);
    goto LABEL_103;
  }
  char v461 = v73;
  CFIndex Count = CFArrayGetCount(v76);
  id v79 = (id)CDBLogHandle;
  if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
  {
    uint64_t v80 = @"(none)";
    if (v74) {
      uint64_t v81 = (__CFString *)v74;
    }
    else {
      uint64_t v81 = @"(none)";
    }
    *(_DWORD *)stat buf = 67109634;
    if (v75) {
      uint64_t v80 = (__CFString *)v75;
    }
    *(_DWORD *)v512 = Count;
    *(_WORD *)&v512[4] = 2112;
    *(void *)&v512[6] = v81;
    *(_WORD *)&v512[14] = 2112;
    *(void *)&v512[16] = v80;
    _os_log_impl(&dword_1A8E81000, v79, OS_LOG_TYPE_INFO, "VCNotification: Searching for room attendee among %d attendees. Searching for room name: %@ (original) or %@ (updated)", buf, 0x1Cu);
  }

  if (Count < 1)
  {
LABEL_96:
    CFRelease(v77);
    id v21 = v471;
    LOBYTE(v73) = v461;
    goto LABEL_103;
  }
  CFIndex v82 = 0;
  BOOL v83 = 1;
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v77, v82);
    if (CalAttendeeGetType((uint64_t)ValueAtIndex) == 2) {
      break;
    }
LABEL_95:
    BOOL v83 = ++v82 < Count;
    if (Count == v82) {
      goto LABEL_96;
    }
  }
  uint64_t v73 = CalAttendeeCopyDisplayName(ValueAtIndex);
  if ((!v75 || ([(id)v75 isEqualToString:v73] & 1) == 0)
    && (!v74 || ![(id)v74 isEqualToString:v73]))
  {
    v85 = (id)CDBLogHandle;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      v86 = @"(none)";
      if (v73) {
        v86 = (__CFString *)v73;
      }
      *(_DWORD *)stat buf = 138412290;
      *(void *)v512 = v86;
      _os_log_impl(&dword_1A8E81000, v85, OS_LOG_TYPE_INFO, "VCNotification: Found a room attendee, but the name does not match: %@", buf, 0xCu);
    }

    goto LABEL_95;
  }
  v428 = (id)CDBLogHandle;
  if (os_log_type_enabled(v428, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_1A8E81000, v428, OS_LOG_TYPE_INFO, "VCNotification: Found a matching virtual conference room attendee.", buf, 2u);
  }

  CFRelease(v77);
  id v21 = v471;
  LOBYTE(v73) = v461;
  if (!v83)
  {
LABEL_103:
    if (v435 || !v434)
    {
      if (v73)
      {
        if (!v435 || !v434)
        {
LABEL_120:
          CalEventAddInvitationChangedProperties((uint64_t)a1, 256);
          if (v436) {
            [v436 addObject:II_VIDEOCONFERENCE_KEY];
          }
          goto LABEL_122;
        }
        v91 = (id)CDBLogHandle;
        if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl(&dword_1A8E81000, v91, OS_LOG_TYPE_INFO, "VCNotification: Adding virtual conference invitation changed flag because a virtual conference was changed", buf, 2u);
        }

        v92 = (id)CDBLogHandle;
        if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = 138412290;
          *(void *)v512 = v435;
          _os_log_impl(&dword_1A8E81000, v92, OS_LOG_TYPE_INFO, "VCNotification:   Old virtual conference: %@", buf, 0xCu);
        }

        v89 = (id)CDBLogHandle;
        if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = 138412290;
          *(void *)v512 = v434;
          BOOL v90 = "VCNotification:   New virtual conference: %@";
          goto LABEL_118;
        }
      }
      else
      {
        v89 = (id)CDBLogHandle;
        if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = 138412290;
          *(void *)v512 = v435;
          BOOL v90 = "VCNotification: Adding virtual conference invitation changed flag because a virtual conference was deleted (%@)";
          goto LABEL_118;
        }
      }
    }
    else
    {
      v89 = (id)CDBLogHandle;
      if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 138412290;
        *(void *)v512 = v434;
        BOOL v90 = "VCNotification: Adding virtual conference invitation changed flag because a virtual conference was added (%@)";
LABEL_118:
        _os_log_impl(&dword_1A8E81000, v89, OS_LOG_TYPE_INFO, v90, buf, 0xCu);
      }
    }

    goto LABEL_120;
  }
  v429 = (id)CDBLogHandle;
  if (os_log_type_enabled(v429, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_1A8E81000, v429, OS_LOG_TYPE_INFO, "VCNotification: Not adding virtual conference invitation changed flag because we found a matching room attendee.", buf, 2u);
  }

LABEL_122:
LABEL_123:
  v93 = [v20 description];
  int v94 = v93;
  if ((v446 & 0x20000000) == 0)
  {
    CalCalendarItemSetDescription((uint64_t)a1, v93);

LABEL_129:
    unsigned int v96 = CalCalendarItemStatusFromICSStatus([v20 status]);
    CalCalendarItemSetStatus((uint64_t)a1, v96);
    goto LABEL_130;
  }

  if (v94)
  {
    uint64_t v95 = [v20 description];
    CalCalendarItemSetDescription((uint64_t)a1, v95);
  }
  if ([v20 status]) {
    goto LABEL_129;
  }
LABEL_130:
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if ((v446 & 0x20000000) == 0) {
      goto LABEL_136;
    }
    id v97 = [v20 location];
    if (v97)
    {

      goto LABEL_136;
    }
    v98 = objc_msgSend(v20, "x_apple_travel_start");

    if (v98)
    {
LABEL_136:
      id v99 = v20;
      uint64_t v100 = objc_msgSend(v99, "x_apple_travel_start");
      if (v100)
      {
        CFTypeRef v101 = CalCalendarItemCopyStartLocation((uint64_t)a1);
        if (!v101)
        {
          CFTypeRef v101 = CalDatabaseCreateLocation(a5);
          CalCalendarItemSetStartLocation((uint64_t)a1, v101);
        }
        CalLocationUpdateFromICSComponent((uint64_t)v101, v99, 0, 1);
        CFRelease(v101);
      }
      else
      {
        CalCalendarItemSetStartLocation((uint64_t)a1, 0);
      }

      if ((v446 & 0x20000000) != 0) {
        goto LABEL_142;
      }
      goto LABEL_145;
    }
LABEL_142:
    uint64_t v102 = [v20 location];
    if (v102)
    {

      goto LABEL_145;
    }
    uint64_t v103 = objc_msgSend(v20, "x_apple_end_location");

    if (v103)
    {
LABEL_145:
      id v104 = v20;
      v105 = objc_msgSend(v104, "x_apple_end_location");
      if (v105)
      {
        CFTypeRef v106 = CalCalendarItemCopyEndLocation((uint64_t)a1);
        if (!v106)
        {
          CFTypeRef v106 = CalDatabaseCreateLocation(a5);
          CalCalendarItemSetEndLocation((uint64_t)a1, v106);
        }
        CalLocationUpdateFromICSComponent((uint64_t)v106, v104, 0, 2);
        CFRelease(v106);
      }
      else
      {
        CalCalendarItemSetEndLocation((uint64_t)a1, 0);
      }
    }
  }
  v107 = [v20 propertiesForName:kCalImportEventIsPhantomMaster];
  unsigned int v108 = [v107 count] != 0;

  CalCalendarItemSetHidden((uint64_t)a1, v108);
  CalCalendarItemSetIsPhantomMaster((uint64_t)a1, v108);
  CFURLRef v109 = [v20 url];
  CalCalendarItemSetURL((uint64_t)a1, v109);

  CalCalendarItemUpdateUIDFromICSComponent((uint64_t)a1, v20, v21);
  id v440 = v20;
  id v462 = v21;
  id v455 = v438;
  id v447 = v437;
  v110 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    long long v111 = v110;
    CFTypeRef DebugDescription = CalEntityGetDebugDescription(a1);
    *(_DWORD *)stat buf = 138412290;
    *(void *)v512 = DebugDescription;
    _os_log_impl(&dword_1A8E81000, v111, OS_LOG_TYPE_DEBUG, "Updating attendees in the database for calendar item: [%@]", buf, 0xCu);
  }
  CFArrayRef v113 = CalCalendarItemCopyAttendees((uint64_t)a1);
  if (!v113)
  {
LABEL_174:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_175;
  }
  CFArrayRef v114 = v113;
  CFIndex v479 = CFArrayGetCount(v113);
  if (v479 <= 0)
  {
    CFRelease(v114);
    goto LABEL_174;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFIndex v116 = 0;
  CFMutableArrayRef v117 = 0;
  do
  {
    v118 = Mutable;
    uint64_t v119 = CFArrayGetValueAtIndex(v114, v116);
    uint64_t v120 = (void *)CalAttendeeCopyAddress(v119);
    if (v120)
    {
      uint64_t v121 = v120;
      uint64_t v122 = [v120 absoluteString];
      if (!CFDictionaryContainsKey(Mutable, v122))
      {
        CFDictionarySetValue(Mutable, v122, v119);
        CFRelease(v121);

        goto LABEL_163;
      }
      CFRelease(v121);
    }
    if (!v117)
    {
      CFMutableArrayRef v117 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      CFAutorelease(v117);
    }
    CFArrayAppendValue(v117, v119);
LABEL_163:
    ++v116;
  }
  while (v479 != v116);
  CFRelease(v114);
  if (v117)
  {
    v123 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      id v124 = v123;
      CFIndex v125 = CFArrayGetCount(v117);
      CFTypeRef v126 = CalEntityGetDebugDescription(a1);
      *(_DWORD *)stat buf = 134218242;
      *(void *)v512 = v125;
      *(_WORD *)&v512[8] = 2112;
      *(void *)&v512[10] = v126;
      _os_log_impl(&dword_1A8E81000, v124, OS_LOG_TYPE_DEFAULT, "Removing [%ld] existing attendees that couldn't be uniquely mapped to by their address from calendar item: [%@]", buf, 0x16u);
    }
    CFIndex v127 = CFArrayGetCount(v117);
    if (v127 >= 1)
    {
      CFIndex v128 = v127;
      for (CFIndex i = 0; i != v128; ++i)
      {
        v130 = CFArrayGetValueAtIndex(v117, i);
        v131 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          v132 = v131;
          CFIndex v133 = v128;
          CFTypeRef v134 = CalEntityGetDebugDescription(v130);
          uint64_t v135 = [NSNumber numberWithInt:CalEventGetUID(a1)];
          *(_DWORD *)stat buf = 138412546;
          *(void *)v512 = v134;
          CFIndex v128 = v133;
          *(_WORD *)&v512[8] = 2112;
          *(void *)&v512[10] = v135;
          _os_log_impl(&dword_1A8E81000, v132, OS_LOG_TYPE_DEBUG, "Removing attendee [%@] on event with UID: [%@]", buf, 0x16u);

          CFMutableDictionaryRef Mutable = v118;
        }
        CalCalendarItemRemoveAttendee((uint64_t)a1, (const __CFArray *)v130);
      }
    }
  }
LABEL_175:
  long long v136 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    long long v137 = NSNumber;
    long long v138 = v136;
    long long v139 = [v440 attendee];
    long long v140 = objc_msgSend(v137, "numberWithUnsignedInteger:", objc_msgSend(v139, "count"));
    CFTypeRef v141 = CalEntityGetDebugDescription(a1);
    *(_DWORD *)stat buf = 138412546;
    *(void *)v512 = v140;
    *(_WORD *)&v512[8] = 2112;
    *(void *)&v512[10] = v141;
    _os_log_impl(&dword_1A8E81000, v138, OS_LOG_TYPE_DEBUG, "Adding [%@] attendees from the iCalendar object onto the calendar item: [%@]", buf, 0x16u);
  }
  long long v506 = 0u;
  long long v507 = 0u;
  *(_OWORD *)v504 = 0u;
  long long v505 = 0u;
  obuint64_t j = [v440 attendee];
  uint64_t cf = [obj countByEnumeratingWithState:v504 objects:buf count:16];
  if (!cf)
  {
    id v472 = 0;
    int v441 = 0;
    goto LABEL_222;
  }
  id v472 = 0;
  int v441 = 0;
  uint64_t v452 = *(void *)v505;
  double v142 = *MEMORY[0x1E4F57888];
  v449 = Mutable;
  while (2)
  {
    uint64_t v143 = 0;
    while (2)
    {
      if (*(void *)v505 != v452) {
        objc_enumerationMutation(obj);
      }
      long long v144 = *(void **)(*(void *)&v504[8] + 8 * v143);
      long long v145 = [v144 value];
      long long v146 = [v145 absoluteString];
      v480 = v144;
      if (Mutable && (CFNumberRef Value = (void *)CFDictionaryGetValue(Mutable, v146)) != 0)
      {
        Attendee = Value;
        CFRetain(Value);
        CFDictionaryRemoveValue(Mutable, v146);
        Proposeddouble StartDate = CalAttendeeGetProposedStartDate((uint64_t)Attendee);
        BOOL ProposedStartDateChanged = CalParticipantGetProposedStartDateChanged((uint64_t)Attendee);
        BOOL v151 = CalAttendeeGetProposedStartDateStatus((uint64_t)Attendee) == 3;
        id v152 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v153 = v152;
          CFTypeRef v154 = CalEntityGetDebugDescription(Attendee);
          v444 = v145;
          v155 = [NSNumber numberWithInt:CalEventGetUID(a1)];
          *(_DWORD *)v508 = 138412546;
          *(void *)&v508[4] = v154;
          *(_WORD *)&v508[12] = 2112;
          *(void *)&v508[14] = v155;
          _os_log_impl(&dword_1A8E81000, v153, OS_LOG_TYPE_DEBUG, "Updating attendee [%@] for event with UID [%@]", v508, 0x16u);

          long long v145 = v444;
          CFMutableDictionaryRef Mutable = v449;
        }
        if (!CalAttendeeUpdateFromICSUserAddress(v480, Attendee, v462, v455)) {
          goto LABEL_209;
        }
LABEL_192:
        unsigned int ProposedStartDateStatus = CalAttendeeGetProposedStartDateStatus((uint64_t)Attendee);
        double v161 = CalAttendeeGetProposedStartDate((uint64_t)Attendee);
        BOOL v162 = vabdd_f64(v161, v142) >= 2.22044605e-16;
        if (fabs(v161) < 2.22044605e-16) {
          BOOL v162 = 0;
        }
        if (ProposedStartDateStatus > 1) {
          BOOL v162 = 0;
        }
        int v163 = v162 || ProposedStartDateChanged;
        if (vabdd_f64(v161, ProposedStartDate) >= 2.22044605e-16 && v163 != 0)
        {
          CalParticipantSetProposedStartDateChanged((uint64_t)Attendee, 1);
          v441 |= !ProposedStartDateChanged;
        }
        v165 = (void *)CalAttendeeCopyEmailAddress(Attendee);
        if ((!v447 || [v447 addressIsAccountOwner:v165])
          && CalAttendeeGetProposedStartDateStatus((uint64_t)Attendee) == 3
          && !v151)
        {
          CalParticipantSetProposedStartDateChanged((uint64_t)Attendee, 1);
          CalEventAddInvitationChangedProperties((uint64_t)a1, 128);
          CalEventSetNeedsNotification((uint64_t)a1, 1);
        }
      }
      else
      {
        Attendee = (void *)CalDatabaseCreateAttendee(a5);
        v156 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          v157 = v156;
          CFTypeRef v158 = CalEntityGetDebugDescription(Attendee);
          v159 = [NSNumber numberWithInt:CalEventGetUID(a1)];
          *(_DWORD *)v508 = 138412546;
          *(void *)&v508[4] = v158;
          *(_WORD *)&v508[12] = 2112;
          *(void *)&v508[14] = v159;
          _os_log_impl(&dword_1A8E81000, v157, OS_LOG_TYPE_DEBUG, "Adding attendee [%@] for event with UID [%@]", v508, 0x16u);

          CFMutableDictionaryRef Mutable = v449;
        }
        if (CalAttendeeUpdateFromICSUserAddress(v144, Attendee, v462, v455))
        {
          CalCalendarItemAddAttendee((uint64_t)a1, Attendee);
          BOOL ProposedStartDateChanged = 0;
          BOOL v151 = 0;
          Proposeddouble StartDate = 0.0;
          goto LABEL_192;
        }
LABEL_209:
        v167 = CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v508 = 138412290;
          *(void *)&v508[4] = v480;
          _os_log_impl(&dword_1A8E81000, v167, OS_LOG_TYPE_ERROR, "Couldn't update the CalAttendee from %@", v508, 0xCu);
        }
      }
      if (Attendee) {
        CFRelease(Attendee);
      }
      if (!v472)
      {
        v168 = v145;
        v169 = [v440 organizer];
        v170 = [v169 value];
        v171 = [v480 value];
        int v172 = [v170 isEqual:v171];

        if (v172) {
          id v472 = v480;
        }
        else {
          id v472 = 0;
        }
        CFMutableDictionaryRef Mutable = v449;
        long long v145 = v168;
      }

      if (cf != ++v143) {
        continue;
      }
      break;
    }
    uint64_t cf = [obj countByEnumeratingWithState:v504 objects:buf count:16];
    if (cf) {
      continue;
    }
    break;
  }
LABEL_222:

  if (Mutable)
  {
    v173 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v174 = v173;
      CFIndex v175 = CFDictionaryGetCount(Mutable);
      CFTypeRef v176 = CalEntityGetDebugDescription(a1);
      *(_DWORD *)v508 = 134218242;
      *(void *)&v508[4] = v175;
      *(_WORD *)&v508[12] = 2112;
      *(void *)&v508[14] = v176;
      _os_log_impl(&dword_1A8E81000, v174, OS_LOG_TYPE_DEBUG, "Removing [%ld] attendees that weren't in the updated ICS for calendar item: [%@]", v508, 0x16u);
    }
    long long v502 = 0u;
    long long v503 = 0u;
    long long v500 = 0u;
    long long v501 = 0u;
    v177 = Mutable;
    uint64_t v178 = [(__CFDictionary *)v177 countByEnumeratingWithState:&v500 objects:v508 count:16];
    if (v178)
    {
      uint64_t v179 = v178;
      uint64_t v180 = *(void *)v501;
      do
      {
        for (uint64_t j = 0; j != v179; ++j)
        {
          if (*(void *)v501 != v180) {
            objc_enumerationMutation(v177);
          }
          CFArrayRef v182 = (const __CFArray *)CFDictionaryGetValue(v177, *(const void **)(*((void *)&v500 + 1) + 8 * j));
          CalCalendarItemRemoveAttendee((uint64_t)a1, v182);
        }
        uint64_t v179 = [(__CFDictionary *)v177 countByEnumeratingWithState:&v500 objects:v508 count:16];
      }
      while (v179);
    }

    CFRelease(v177);
  }
  v183 = [v440 organizer];

  if (v183)
  {
    CFTypeRef Organizer = CalCalendarItemCopyOrganizer((uint64_t)a1);
    if (Organizer || (CFTypeRef Organizer = CalDatabaseCreateOrganizer(a5)) != 0)
    {
      v185 = [v440 organizer];
      v186 = [v185 value];
      v187 = [v186 absoluteString];
      unsigned int v188 = [v447 addressIsAccountOwner:v187];

      CalOrganizerSetIsSelf(Organizer, v188);
      v189 = [v440 organizer];
      LODWORD(v186) = CalOrganizerUpdateFromICSUserAddress(v189, v472, (uint64_t)Organizer, v188, v455);

      if (v186)
      {
        CalCalendarItemSetOrganizer((uint64_t)a1, Organizer);
      }
      else
      {
        v190 = CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v513 = 138412290;
          *(void *)&v513[4] = v440;
          _os_log_impl(&dword_1A8E81000, v190, OS_LOG_TYPE_ERROR, "Couldn't update organizer from %@", v513, 0xCu);
        }
      }
      CFRelease(Organizer);
      if (v188 & v441)
      {
        CalEventAddInvitationChangedProperties((uint64_t)a1, 64);
        CalEventSetNeedsNotification((uint64_t)a1, 1);
      }
    }
    else
    {
      v427 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v513 = 0;
        _os_log_impl(&dword_1A8E81000, v427, OS_LOG_TYPE_ERROR, "Couldn't create a new CalOrganizer object", v513, 2u);
      }
    }
  }

  CFDateRef v191 = [v440 created];
  CFStringRef CFDateFromICSDateAsUTC = (const __CFString *)CalCreateCFDateFromICSDateAsUTC(v191);

  CalCalendarItemSetCreationDate((uint64_t)a1, CFDateFromICSDateAsUTC);
  if (CFDateFromICSDateAsUTC) {
    CFRelease(CFDateFromICSDateAsUTC);
  }
  CalCalendarItemSetSequenceNumber((uint64_t)a1, [v440 sequence]);
  CalCalendarItemSetPriority((uint64_t)a1, (unsigned __int16)[v440 priority]);
  uint64_t v193 = CalCalendarItemCopyStructuredData((uint64_t)a1);
  objc_msgSend(v440, "x_apple_structuredData");
  v194 = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFStringRef v195 = v194;
  if (v194 != (__CFString *)v193 && ([(__CFString *)v194 isEqualToData:v193] & 1) == 0) {
    CalCalendarItemSetStructuredData((uint64_t)a1, v195);
  }
  obja = (__CFString *)v195;
  v445 = (void *)v193;
  id v196 = v440;
  id v473 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  CFArrayRef v197 = CalCalendarItemCopyAttachments((uint64_t)a1);
  id v456 = v196;
  if (v197)
  {
    CFArrayRef v198 = v197;
    CFIndex v199 = CFArrayGetCount(v197);
    if (v199 >= 1)
    {
      CFIndex v200 = v199;
      for (CFIndex k = 0; k != v200; ++k)
      {
        v202 = (void *)CFArrayGetValueAtIndex(v198, k);
        if (CalAttachmentIsBinary((uint64_t)v202))
        {
          CalCalendarItemRemoveAttachment((uint64_t)a1, v202);
        }
        else
        {
          CFURLRef v203 = CalAttachmentCopyURL((uint64_t)v202);
          if (v203)
          {
            v204 = [v473 objectForKey:v203];

            if (v204) {
              CalCalendarItemRemoveAttachment((uint64_t)a1, v202);
            }
            else {
              [v473 setObject:v202 forKey:v203];
            }
          }
        }
      }
    }
    CFRelease(v198);
    id v196 = v456;
  }
  if ((~v446 & 0x1000000) != 0)
  {
    long long v509 = 0u;
    long long v510 = 0u;
    memset(v508, 0, sizeof(v508));
    v205 = [v196 attach];
    uint64_t v206 = [v205 countByEnumeratingWithState:v508 objects:buf count:16];
    v207 = v473;
    if (!v206) {
      goto LABEL_283;
    }
    uint64_t v208 = v206;
    uint64_t v209 = **(void **)&v508[16];
    v481 = v205;
    while (1)
    {
      uint64_t v210 = 0;
      do
      {
        if (**(void **)&v508[16] != v209) {
          objc_enumerationMutation(v205);
        }
        v211 = *(void **)(*(void *)&v508[8] + 8 * v210);
        if (([v211 isBinary] & 1) != 0
          || ([v211 value], (uint64_t v212 = objc_claimAutoreleasedReturnValue()) == 0))
        {
          Attachment = (void *)CalDatabaseCreateAttachment(a5);
          CFURLRef v213 = 0;
        }
        else
        {
          CFURLRef v213 = (const __CFURL *)v212;
          v214 = (void *)[v207 objectForKey:v212];
          if (v214)
          {
            Attachment = v214;
            CFRetain(v214);
            [v207 removeObjectForKey:v213];
            goto LABEL_271;
          }
          [v207 removeObjectForKey:v213];
          Attachment = (void *)CalDatabaseCreateAttachment(a5);
          CFTypeRef v216 = CalCalendarItemCopyCalendar((uint64_t)a1);
          if (v216)
          {
            v217 = v216;
            CFTypeRef v218 = CalCalendarCopyStore((uint64_t)v216);
            if (v218)
            {
              v219 = v218;
              uint64_t v220 = CalDatabaseCopyAttachmentFileInStoreWithURL((uint64_t)v218, v213);
              if (v220)
              {
                cfd = (const void *)v220;
                CalAttachmentFileAddAttachment(v220, Attachment);
                CFRelease(cfd);
              }
              CFRelease(v219);
            }
            CFRelease(v217);
            v207 = v473;
          }
          v205 = v481;
        }
        CalCalendarItemAddAttachment((uint64_t)a1, Attachment);
LABEL_271:
        if ((CalAttachmentUpdateFromICSAttachment(Attachment, v211) & 1) == 0) {
          CalCalendarItemRemoveAttachment((uint64_t)a1, Attachment);
        }
        CFRelease(Attachment);

        ++v210;
      }
      while (v208 != v210);
      uint64_t v221 = [v205 countByEnumeratingWithState:v508 objects:buf count:16];
      uint64_t v208 = v221;
      if (!v221)
      {
LABEL_283:

        id v196 = v456;
        break;
      }
    }
  }
  *(void *)v504 = MEMORY[0x1E4F143A8];
  *(void *)&v504[8] = 3221225472;
  *(void *)&long long v505 = __CalCalendarItemUpdateAttachmentsFromICSComponent_block_invoke;
  *((void *)&v505 + 1) = &__block_descriptor_40_e15_v32__0_8_16_B24l;
  *(void *)&long long v506 = a1;
  [v473 enumerateKeysAndObjectsUsingBlock:v504];

  id v448 = v196;
  id v222 = v462;
  id v223 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if ((~v446 & 0x40000000) != 0)
  {
    id v474 = v222;
    long long v488 = 0u;
    long long v489 = 0u;
    long long v486 = 0u;
    long long v487 = 0u;
    v224 = [v448 components];
    uint64_t v225 = [v224 countByEnumeratingWithState:&v486 objects:&v500 count:16];
    if (v225)
    {
      uint64_t v226 = v225;
      uint64_t v227 = *(void *)v487;
      do
      {
        for (uint64_t m = 0; m != v226; ++m)
        {
          if (*(void *)v487 != v227) {
            objc_enumerationMutation(v224);
          }
          uint64_t v229 = *(void *)(*((void *)&v486 + 1) + 8 * m);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [v223 addObject:v229];
          }
          else
          {
            v230 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)stat buf = 138412290;
              *(void *)v512 = v229;
              _os_log_impl(&dword_1A8E81000, v230, OS_LOG_TYPE_DEBUG, "Encountered an unknown subcomponent for an ICSComponent: %@. Dropping it on the floor", buf, 0xCu);
            }
          }
        }
        uint64_t v226 = [v224 countByEnumeratingWithState:&v486 objects:&v500 count:16];
      }
      while (v226);
    }

    id v222 = v474;
  }
  id v231 = v223;
  id cfa = v222;
  id v232 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  CFArrayRef v233 = CalCalendarItemCopyAlarms((uint64_t)a1);
  int v234 = v446;
  if (v233)
  {
    CFArrayRef v235 = v233;
    CFIndex v236 = CFArrayGetCount(v233);
    if (v236 >= 1)
    {
      CFIndex v237 = v236;
      for (CFIndex n = 0; n != v237; ++n)
      {
        v239 = (void *)CFArrayGetValueAtIndex(v235, n);
        uint64_t v240 = CalAlarmCopyExternalID((uint64_t)v239);
        if (v240)
        {
          v241 = (const void *)v240;
          [v232 setValue:v239 forKey:v240];
          CFRelease(v241);
        }
        else
        {
          CalCalendarItemRemoveAlarm((uint64_t)a1, v239);
        }
      }
    }
    CFRelease(v235);
  }
  id v463 = v232;
  long long v515 = 0u;
  long long v516 = 0u;
  *(_OWORD *)v513 = 0u;
  long long v514 = 0u;
  id v457 = v231;
  uint64_t v242 = [v457 countByEnumeratingWithState:v513 objects:buf count:16];
  if (!v242)
  {
    char v450 = 0;
    v482 = 0;
    goto LABEL_332;
  }
  uint64_t v243 = v242;
  char v450 = 0;
  uint64_t v475 = *(void *)v514;
  v482 = 0;
  while (2)
  {
    uint64_t v244 = 0;
    while (2)
    {
      if (*(void *)v514 != v475) {
        objc_enumerationMutation(v457);
      }
      v245 = *(void **)(*(void *)&v513[8] + 8 * v244);
      if ([v245 action]) {
        goto LABEL_315;
      }
      v246 = [v245 trigger];
      if ([v246 isDurationBased])
      {

        goto LABEL_315;
      }
      v247 = [v245 trigger];
      v248 = [v247 value];
      v249 = [v248 components];
      char IsInvalidAlarmDate = CalIsInvalidAlarmDate(v249);

      int v234 = v446;
      if ((IsInvalidAlarmDate & 1) == 0)
      {
LABEL_315:
        v251 = objc_msgSend(v245, "x_wr_alarmuid");
        Alaruint64_t m = (void *)[v463 objectForKey:v251];

        if (Alarm)
        {
          v253 = objc_msgSend(v245, "x_wr_alarmuid");
          [v463 removeObjectForKey:v253];

          CFRetain(Alarm);
        }
        else
        {
          Alaruint64_t m = (void *)CalDatabaseCreateAlarm(a5);
        }
        if (v482 || !objc_msgSend(v245, "x_apple_default_alarm"))
        {
          if (CalAlarmIsDefaultAlarm((uint64_t)Alarm)) {
            CalAlarmSetIsDefaultAlarm((uint64_t)Alarm);
          }
        }
        else
        {
          v482 = (void *)CFRetain(Alarm);
        }
        if (CalAlarmUpdateFromICSAlarm(v245, cfa, (uint64_t)Alarm, a5, v234))
        {
          CalCalendarItemAddAlarm((uint64_t)a1, Alarm);
        }
        else
        {
          v254 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v508 = 138412290;
            *(void *)&v508[4] = v245;
            _os_log_impl(&dword_1A8E81000, v254, OS_LOG_TYPE_ERROR, "Couldn't update calendar alarm from ICSAlarm: %@", v508, 0xCu);
          }
        }
        CFRelease(Alarm);
      }
      else
      {
        char v450 = 1;
      }
      if (v243 != ++v244) {
        continue;
      }
      break;
    }
    uint64_t v243 = [v457 countByEnumeratingWithState:v513 objects:buf count:16];
    if (v243) {
      continue;
    }
    break;
  }
LABEL_332:

  unsigned int v255 = (v482 == 0) & v450;
  long long v497 = 0u;
  long long v498 = 0u;
  long long v495 = 0u;
  long long v496 = 0u;
  v256 = [v463 allKeys];
  uint64_t v257 = [v256 countByEnumeratingWithState:&v495 objects:v508 count:16];
  if (!v257) {
    goto LABEL_348;
  }
  uint64_t v258 = v257;
  uint64_t v259 = *(void *)v496;
  while (2)
  {
    uint64_t v260 = 0;
    while (2)
    {
      if (*(void *)v496 != v259) {
        objc_enumerationMutation(v256);
      }
      v261 = (void *)[v463 objectForKey:*(void *)(*((void *)&v495 + 1) + 8 * v260)];
      int Type = CalAlarmGetType((uint64_t)v261);
      BOOL IsDefaultAlarm = CalAlarmIsDefaultAlarm((uint64_t)v261);
      if ((Type - 4) <= 0xFFFFFFFD)
      {
LABEL_343:
        CalCalendarItemRemoveAlarm((uint64_t)a1, v261);
      }
      else if (IsDefaultAlarm)
      {
        if (v482) {
          int v264 = 1;
        }
        else {
          int v264 = v255;
        }
        if (v264 == 1) {
          goto LABEL_343;
        }
        v482 = (void *)CFRetain(v261);
      }
      if (v258 != ++v260) {
        continue;
      }
      break;
    }
    uint64_t v265 = [v256 countByEnumeratingWithState:&v495 objects:v508 count:16];
    uint64_t v258 = v265;
    if (v265) {
      continue;
    }
    break;
  }
LABEL_348:

  CalCalendarItemSetDefaultAlarmRemoved((uint64_t)a1, v255);
  if (v482)
  {
    if (v255)
    {
      CalCalendarItemRemoveAlarm((uint64_t)a1, v482);
      v266 = v482;
    }
    else
    {
      if (!CalAlarmIsDefaultAlarm((uint64_t)v482)) {
        CalAlarmSetIsDefaultAlarm((uint64_t)v482);
      }
      v266 = v482;
    }
LABEL_357:
    CFRelease(v266);
  }
  else if ((v255 & 1) == 0)
  {
    v267 = (void *)CalDatabaseCreateAlarm(a5);
    CalAlarmSetIsDefaultAlarm((uint64_t)v267);
    CalCalendarItemAddAlarm((uint64_t)a1, v267);
    v266 = v267;
    if (v267) {
      goto LABEL_357;
    }
  }
  CFArrayRef v268 = CalCalendarItemCopyAlarms((uint64_t)a1);
  v269 = [MEMORY[0x1E4F1CA60] dictionary];
  if (v268)
  {
    if (CFArrayGetCount(v268) >= 1)
    {
      CFIndex v270 = 0;
      do
      {
        v271 = CFArrayGetValueAtIndex(v268, v270);
        v272 = (void *)CalAlarmCopyExternalID((uint64_t)v271);
        if (v272) {
          [v269 setObject:v271 forKey:v272];
        }

        ++v270;
      }
      while (CFArrayGetCount(v268) > v270);
    }
    CFRelease(v268);
  }
  long long v492 = 0u;
  long long v493 = 0u;
  long long v490 = 0u;
  long long v491 = 0u;
  id v273 = v457;
  uint64_t v274 = [v273 countByEnumeratingWithState:&v490 objects:v504 count:16];
  if (v274)
  {
    uint64_t v275 = v274;
    uint64_t v276 = *(void *)v491;
    do
    {
      for (iCFIndex i = 0; ii != v275; ++ii)
      {
        if (*(void *)v491 != v276) {
          objc_enumerationMutation(v273);
        }
        v278 = *(void **)(*((void *)&v490 + 1) + 8 * ii);
        v279 = [v278 relatedTo];

        if (v279)
        {
          v280 = [v278 relatedTo];
          uint64_t v281 = [v269 objectForKey:v280];

          v282 = [v278 uid];
          v283 = (void *)[v269 objectForKey:v282];

          if (v283 && v281 != 0) {
            CalAlarmAddSnoozedAlarm(v281, v283);
          }
        }
      }
      uint64_t v275 = [v273 countByEnumeratingWithState:&v490 objects:v504 count:16];
    }
    while (v275);
  }

  id v458 = v448;
  CFArrayRef v285 = CalCalendarItemCopyRecurrences((uint64_t)a1);
  if (v285)
  {
    CFArrayRef v286 = v285;
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, v285);
    CFRelease(v286);
  }
  else
  {
    CFArrayRef MutableCopy = 0;
  }
  long long v509 = 0u;
  long long v510 = 0u;
  memset(v508, 0, sizeof(v508));
  id v464 = [v458 rrule];
  uint64_t v288 = [v464 countByEnumeratingWithState:v508 objects:buf count:16];
  if (v288)
  {
    uint64_t v289 = v288;
    uint64_t v290 = **(void **)&v508[16];
    unint64_t v291 = 0x1E4F29000uLL;
    do
    {
      for (juint64_t j = 0; jj != v289; ++jj)
      {
        if (**(void **)&v508[16] != v290) {
          objc_enumerationMutation(v464);
        }
        v293 = *(void **)(*(void *)&v508[8] + 8 * jj);
        if (MutableCopy
          && CFArrayGetCount(MutableCopy) >= 1
          && (Recurrence = (void *)CFArrayGetValueAtIndex(MutableCopy, 0),
              CFRetain(Recurrence),
              CFArrayRemoveValueAtIndex(MutableCopy, 0),
              Recurrence))
        {
          int v295 = 0;
        }
        else
        {
          Recurrence = (void *)CalDatabaseCreateRecurrence(a5);
          int v295 = 1;
        }
        objc_opt_class();
        v483 = v293;
        if (objc_opt_isKindOfClass())
        {
          [v458 dtend];
          int v476 = v295;
          uint64_t v296 = v289;
          CFArrayRef v297 = MutableCopy;
          unint64_t v298 = v291;
          v300 = uint64_t v299 = v290;
          char v301 = CalRecurrenceUpdateFromVCal10String(v293, (uint64_t)Recurrence, v300);

          uint64_t v290 = v299;
          unint64_t v291 = v298;
          CFArrayRef MutableCopy = v297;
          uint64_t v289 = v296;
          int v295 = v476;
          if ((v301 & 1) == 0) {
            goto LABEL_393;
          }
        }
        else if (!CalRecurrenceUpdateFromICSRecurrenceRule(v293, (uint64_t)Recurrence))
        {
LABEL_393:
          v302 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v504 = 138412290;
            *(void *)&v504[4] = v483;
            _os_log_impl(&dword_1A8E81000, v302, OS_LOG_TYPE_ERROR, "Couldn't update the CalRecurrenceRef from %@", v504, 0xCu);
          }
          if ((v295 & 1) == 0) {
            CalCalendarItemRemoveRecurrence((uint64_t)a1, Recurrence);
          }
          goto LABEL_400;
        }
        if (v295) {
          CalCalendarItemAddRecurrence((uint64_t)a1, Recurrence);
        }
LABEL_400:
        if (Recurrence) {
          CFRelease(Recurrence);
        }
      }
      uint64_t v289 = [v464 countByEnumeratingWithState:v508 objects:buf count:16];
    }
    while (v289);
  }

  if (MutableCopy)
  {
    CFIndex v303 = CFArrayGetCount(MutableCopy);
    if (v303 >= 1)
    {
      CFIndex v304 = v303;
      for (kCFIndex k = 0; kk != v304; ++kk)
      {
        v306 = (void *)CFArrayGetValueAtIndex(MutableCopy, kk);
        CalCalendarItemRemoveRecurrence((uint64_t)a1, v306);
      }
    }
    CFRelease(MutableCopy);
  }

  id v307 = v458;
  id v308 = cfa;
  v309 = [v307 exdate];
  CFIndex v310 = [v309 count];
  v311 = CFSetCreateMutable(0, v310, MEMORY[0x1E4F1D548]);

  if (v311)
  {
    long long v509 = 0u;
    long long v510 = 0u;
    memset(v508, 0, sizeof(v508));
    v312 = [v307 exdate];
    uint64_t v313 = [v312 countByEnumeratingWithState:v508 objects:buf count:16];
    if (v313)
    {
      uint64_t v314 = v313;
      uint64_t v315 = **(void **)&v508[16];
      do
      {
        for (muint64_t m = 0; mm != v314; ++mm)
        {
          if (**(void **)&v508[16] != v315) {
            objc_enumerationMutation(v312);
          }
          double v317 = CalDateFromICSDate(*(void **)(*(void *)&v508[8] + 8 * mm), v308);
          CFDateRef v318 = CFDateCreate(0, v317);
          if (v318)
          {
            CFDateRef v319 = v318;
            CFSetAddValue(v311, v318);
            CFRelease(v319);
          }
        }
        uint64_t v314 = [v312 countByEnumeratingWithState:v508 objects:buf count:16];
      }
      while (v314);
    }

    CFArrayRef v320 = CalCalendarItemCopyExceptionDates((uint64_t)a1);
    if (v320)
    {
      CFArrayRef v321 = v320;
      id v322 = v308;
      CFIndex v323 = CFArrayGetCount(v320);
      if (v323 >= 1)
      {
        CFIndex v324 = v323;
        for (nCFIndex n = 0; nn != v324; ++nn)
        {
          v326 = (void *)CFArrayGetValueAtIndex(v321, nn);
          v327 = (const void *)CalExceptionDateCopyDate((uint64_t)v326);
          if (v327)
          {
            v328 = v327;
            if (CFSetContainsValue(v311, v327)) {
              CFSetRemoveValue(v311, v328);
            }
            else {
              CalCalendarItemRemoveExceptionDate((uint64_t)a1, v326);
            }
            CFRelease(v328);
          }
        }
      }
      CFRelease(v321);
      id v308 = v322;
    }
    int64_t v329 = CFSetGetCount(v311);
    v330 = (const void **)malloc_type_calloc(v329, 8uLL, 0x6004044C4A2DFuLL);
    if (v330)
    {
      v331 = (uint64_t *)v330;
      CFSetGetValues(v311, v330);
      if (v329 >= 1)
      {
        v332 = v331;
        do
        {
          uint64_t v333 = *v332++;
          ExceptionDateWithDateAndOrder = (void *)CalDatabaseCreateExceptionDateWithDateAndOrder(a5, v333, 0);
          CalCalendarItemAddExceptionDate((uint64_t)a1, ExceptionDateWithDateAndOrder);
          CFRelease(ExceptionDateWithDateAndOrder);
          --v329;
        }
        while (v329);
      }
      free(v331);
    }
    CFRelease(v311);
  }
  id v465 = v308;

  id v335 = v307;
  CalCalendarItemRemoveAllCategories((uint64_t)a1);
  v453 = v335;
  v336 = [v335 propertiesForName:*MEMORY[0x1E4FB8158]];
  *(_OWORD *)v504 = 0u;
  long long v505 = 0u;
  long long v506 = 0u;
  long long v507 = 0u;
  cfb = v336;
  uint64_t v484 = [v336 countByEnumeratingWithState:v504 objects:buf count:16];
  if (v484)
  {
    int v337 = 0;
    uint64_t v477 = *(void *)v505;
    do
    {
      for (uint64_t i1 = 0; i1 != v484; ++i1)
      {
        if (*(void *)v505 != v477) {
          objc_enumerationMutation(cfb);
        }
        v339 = [*(id *)(*(void *)&v504[8] + 8 * i1) values];
        long long v500 = 0u;
        long long v501 = 0u;
        long long v502 = 0u;
        long long v503 = 0u;
        uint64_t v340 = [v339 countByEnumeratingWithState:&v500 objects:v508 count:16];
        if (v340)
        {
          uint64_t v341 = v340;
          uint64_t v342 = *(void *)v501;
          do
          {
            for (uint64_t i2 = 0; i2 != v341; ++i2)
            {
              if (*(void *)v501 != v342) {
                objc_enumerationMutation(v339);
              }
              CFStringRef v344 = *(const __CFString **)(*((void *)&v500 + 1) + 8 * i2);
              Entityint Type = CalCalendarItemGetEntityType((uint64_t)a1);
              v346 = CalDatabaseCopyCategoryWithNameAndEntityType(a5, v344, EntityType);
              if (v346)
              {
                CategoryWithNameAndEntityint Type = v346;
                if (CalCategoryIsHidden((uint64_t)v346)) {
                  CalCategorySetHidden((uint64_t)CategoryWithNameAndEntityType);
                }
              }
              else
              {
                CalCalendarItemGetEntityType((uint64_t)a1);
                CategoryWithNameAndEntityint Type = CalDatabaseCreateCategoryWithNameAndEntityType(a5);
              }
              CalCalendarItemAddGroupedCategory(a1, CategoryWithNameAndEntityType, v337);
              CFRelease(CategoryWithNameAndEntityType);
            }
            uint64_t v341 = [v339 countByEnumeratingWithState:&v500 objects:v508 count:16];
          }
          while (v341);
        }
        ++v337;
      }
      uint64_t v484 = [cfb countByEnumeratingWithState:v504 objects:buf count:16];
    }
    while (v484);
  }

  v348 = v453;
  unsigned int v349 = CalEventPrivacyLevelFromICSCalendarServerAccess(objc_msgSend(v465, "x_calendarserver_access"));
  CalCalendarItemSetPrivacyLevel((uint64_t)a1, v349);
  v350 = objc_msgSend(v453, "x_apple_contactIdentifiers");
  v351 = objc_opt_new();
  CFArrayRef v352 = CalCalendarItemCopyContacts((uint64_t)a1);
  if (v352)
  {
    CFArrayRef v353 = v352;
    CFIndex v354 = CFArrayGetCount(v352);
    if (v354 >= 1)
    {
      unint64_t v355 = v354 + 1;
      do
      {
        v356 = CFArrayGetValueAtIndex(v353, v355 - 2);
        v357 = (void *)CalContactCopyContactIdentifier((uint64_t)v356);
        [v351 setObject:v356 forKeyedSubscript:v357];

        --v355;
      }
      while (v355 > 1);
    }
    CFRelease(v353);
  }
  if (v350)
  {
    v358 = [v350 componentsSeparatedByString:@";"];
    memset(v508, 0, sizeof(v508));
    long long v509 = 0u;
    long long v510 = 0u;
    uint64_t v359 = [v358 countByEnumeratingWithState:v508 objects:buf count:16];
    if (v359)
    {
      uint64_t v360 = v359;
      uint64_t v361 = **(void **)&v508[16];
      do
      {
        for (uint64_t i3 = 0; i3 != v360; ++i3)
        {
          if (**(void **)&v508[16] != v361) {
            objc_enumerationMutation(v358);
          }
          uint64_t v363 = *(void *)(*(void *)&v508[8] + 8 * i3);
          v364 = [v351 objectForKeyedSubscript:v363];

          if (v364)
          {
            [v351 setObject:0 forKeyedSubscript:v363];
          }
          else
          {
            Contact = (void *)CalDatabaseCreateContact(a5);
            CalContactSetContactIdentifier((uint64_t)Contact);
            CalCalendarItemAddContact((uint64_t)a1, Contact);
            CFRelease(Contact);
          }
        }
        uint64_t v360 = [v358 countByEnumeratingWithState:v508 objects:buf count:16];
      }
      while (v360);
    }

    v348 = v453;
  }
  *(void *)v504 = MEMORY[0x1E4F143A8];
  *(void *)&v504[8] = 3221225472;
  *(void *)&long long v505 = __CalCalendarItemUpdateContactsFromICSComponent_block_invoke;
  *((void *)&v505 + 1) = &__block_descriptor_40_e15_v32__0_8_16_B24l;
  *(void *)&long long v506 = a1;
  [v351 enumerateKeysAndObjectsUsingBlock:v504];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v366 = v348;
    v367 = [v366 conferences];
    uint64_t v368 = [v367 count];

    if (v368)
    {
      v369 = [v366 conferences];
      v370 = [v369 objectAtIndexedSubscript:0];

      CFURLRef v371 = [v370 value];
      CalEventSetConferenceURL((uint64_t)a1, v371);
    }
    else
    {
      CalEventSetConferenceURL((uint64_t)a1, 0);
    }
    long long v372 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
    *(_OWORD *)&callBacks.versioCFIndex n = *MEMORY[0x1E4F1D548];
    *(_OWORD *)&callBacks.release = v372;
    callBacks.hash = (CFSetHashCallBack)_CalConferenceGetHash;
    callBacks.equal = (CFSetEqualCallBack)_CalConferenceIsEqualToConference;
    CFMutableSetRef v373 = CFSetCreateMutable(0, 0, &callBacks);
    *(_OWORD *)v513 = 0u;
    long long v514 = 0u;
    long long v515 = 0u;
    long long v516 = 0u;
    v451 = v366;
    v374 = [v366 conferences];
    uint64_t v375 = [v374 countByEnumeratingWithState:v513 objects:buf count:16];
    if (v375)
    {
      uint64_t v376 = v375;
      uint64_t v377 = *(void *)v514;
      do
      {
        for (uint64_t i4 = 0; i4 != v376; ++i4)
        {
          if (*(void *)v514 != v377) {
            objc_enumerationMutation(v374);
          }
          [(__CFSet *)v373 addObject:*(void *)(*(void *)&v513[8] + 8 * i4)];
        }
        uint64_t v376 = [v374 countByEnumeratingWithState:v513 objects:buf count:16];
      }
      while (v376);
    }

    id v478 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    CFArrayRef v379 = CalCalendarItemCopyConferences((uint64_t)a1);
    if (v379)
    {
      CFArrayRef v380 = v379;
      CFIndex v381 = CFArrayGetCount(v379);
      if (v381 >= 1)
      {
        CFIndex v382 = v381;
        for (CFIndex i5 = 0; i5 != v382; ++i5)
        {
          v384 = CFArrayGetValueAtIndex(v380, i5);
          id v385 = (id)CalConferenceCopyURL((uint64_t)v384);
          v386 = v385;
          if (!v385)
          {
            v386 = [MEMORY[0x1E4F1CA98] null];
          }
          id v387 = [v478 objectForKeyedSubscript:v386];
          if (!v387)
          {
            id v387 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            [v478 setObject:v387 forKeyedSubscript:v386];
          }
          [v387 addObject:v384];
        }
      }
      CFRelease(v380);
    }
    long long v497 = 0u;
    long long v498 = 0u;
    long long v495 = 0u;
    long long v496 = 0u;
    v459 = v373;
    uint64_t v485 = [(__CFSet *)v459 countByEnumeratingWithState:&v495 objects:v508 count:16];
    if (v485)
    {
      uint64_t cfc = *(void *)v496;
      do
      {
        for (uint64_t i6 = 0; i6 != v485; ++i6)
        {
          if (*(void *)v496 != cfc) {
            objc_enumerationMutation(v459);
          }
          v389 = *(void **)(*((void *)&v495 + 1) + 8 * i6);
          v390 = [v389 value];
          v391 = [v390 absoluteString];
          if (!v391)
          {
            v391 = [MEMORY[0x1E4F1CA98] null];
          }
          v392 = [v478 objectForKeyedSubscript:v391];
          v393 = v392;
          if (v392
            && (v494[0] = MEMORY[0x1E4F143A8],
                v494[1] = 3221225472,
                v494[2] = __CalCalendarItemUpdateConferencesFromICSComponent_block_invoke,
                v494[3] = &unk_1E5D69AC0,
                v494[4] = v389,
                uint64_t v394 = [v392 indexOfObjectPassingTest:v494],
                v394 != 0x7FFFFFFFFFFFFFFFLL))
          {
            [v393 removeObjectAtIndex:v394];
          }
          else
          {
            id v395 = v389;
            Conference = (void *)CalDatabaseCreateConference(a5);
            CalCalendarItemAddConference((uint64_t)a1, Conference);
            v397 = [v395 value];
            v398 = [v397 absoluteString];
            CalConferenceSetURL((uint64_t)Conference);

            id v399 = v395;
            v400 = [v399 info];

            if (v400)
            {
              v401 = [v399 info];
              CalConferenceSetInfo((uint64_t)Conference);
            }
            v402 = [v399 feature];

            if (v402)
            {
              v403 = [v399 feature];
              CalConferenceSetFeature((uint64_t)Conference);
            }
            v404 = [v399 language];

            if (v404)
            {
              v405 = [v399 language];
              CalConferenceSetLanguage((uint64_t)Conference);
            }
            v406 = [v399 region];

            if (v406)
            {
              v407 = [v399 region];
              CalConferenceSetRegion((uint64_t)Conference);
            }
            CFRelease(Conference);
          }
        }
        uint64_t v485 = [(__CFSet *)v459 countByEnumeratingWithState:&v495 objects:v508 count:16];
      }
      while (v485);
    }

    long long v492 = 0u;
    long long v493 = 0u;
    long long v490 = 0u;
    long long v491 = 0u;
    id v408 = v478;
    uint64_t v409 = [v408 countByEnumeratingWithState:&v490 objects:v504 count:16];
    if (v409)
    {
      uint64_t v410 = v409;
      uint64_t v411 = *(void *)v491;
      do
      {
        for (uint64_t i7 = 0; i7 != v410; ++i7)
        {
          if (*(void *)v491 != v411) {
            objc_enumerationMutation(v408);
          }
          v413 = [v408 objectForKeyedSubscript:*(void *)(*((void *)&v490 + 1) + 8 * i7)];
          long long v486 = 0u;
          long long v487 = 0u;
          long long v488 = 0u;
          long long v489 = 0u;
          uint64_t v414 = [v413 countByEnumeratingWithState:&v486 objects:&v500 count:16];
          if (v414)
          {
            uint64_t v415 = v414;
            uint64_t v416 = *(void *)v487;
            do
            {
              for (uint64_t i8 = 0; i8 != v415; ++i8)
              {
                if (*(void *)v487 != v416) {
                  objc_enumerationMutation(v413);
                }
                CalCalendarItemRemoveConference((uint64_t)a1, *(void **)(*((void *)&v486 + 1) + 8 * i8));
              }
              uint64_t v415 = [v413 countByEnumeratingWithState:&v486 objects:&v500 count:16];
            }
            while (v415);
          }
        }
        uint64_t v410 = [v408 countByEnumeratingWithState:&v490 objects:v504 count:16];
      }
      while (v410);
    }

    v348 = v453;
  }
  objc_msgSend(v348, "last_modified");
  CFDateRef v418 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
  if (!v418)
  {
    CFDateRef v418 = [v348 dtstamp];
  }
  CFDateRef v419 = CalCreateCFDateFromICSDateAsUTC(v418);
  CalCalendarItemSetLastModifiedDate((uint64_t)a1, (uint64_t)v419);
  if (v419) {
    CFRelease(v419);
  }
  v420 = +[CalItemMetadata metadataWithICSComponent:v348];
  if ((v446 & 0x800000) != 0
    && (objc_msgSend(v348, "x_apple_ews_itemid"),
        v421 = objc_claimAutoreleasedReturnValue(),
        v421,
        v421))
  {
    v422 = objc_msgSend(v348, "x_apple_ews_itemid");
    v423 = objc_msgSend(v348, "x_apple_ews_changekey");
    v424 = objc_msgSend(v348, "x_apple_ews_permission");
    CalSetEWSComponentsOnCalCalendarItem((uint64_t)a1, v422, v423, v424);
  }
  else
  {
    v425 = (const void *)CalCalendarItemCopyExternalRepresentation((uint64_t)a1);
    CalCalendarItemSetExternalRepresentation((uint64_t)a1, (const __CFString *)[v420 dataRepresentationWithExistingMetaData:v425]);
    if (v425) {
      CFRelease(v425);
    }
  }

  uint64_t v34 = 1;
  id v16 = v431;
  id v18 = v436;
LABEL_536:

  return v34;
}

void CalSetEWSComponentsOnCalCalendarItem(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v10 = v9;
  if (v12) {
    [v9 setObject:v12 forKey:@"EWSItemIDString"];
  }
  if (v7) {
    [v10 setObject:v7 forKey:@"EWSChangeKeyString"];
  }
  if (v8) {
    [v10 setObject:v8 forKey:@"EWSPermissionString"];
  }
  id v11 = +[CalExchangeCalendarItemExternalRepresentation externalRepresentationDataWithDictionary:v10];
  if (v11) {
    CalCalendarItemSetExternalRepresentation(a1, v11);
  }
}

void CalSetStartDateOnICSComponentWithOptions(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  double started = (void *)CalCalendarItemCopyStartTimeZone(a1);
  id v11 = [v7 objectForKey:@"ItemBridgeIsAllDay"];

  LODWORD(v7) = [v11 BOOLValue];
  if (v7) {
    ICSFloatingDateOnlyFromCFDate((uint64_t)v8, started);
  }
  else {
  id v12 = ICSDateFromCFDate((uint64_t)v8, started);
  }

  [v9 setDtstart:v12];
  if (started)
  {
    CFRelease(started);
  }
}

uint64_t CalCalendarItemUpdateICSComponent(const void *a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if (a1) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  uint64_t v10 = !v9;
  if (v9) {
    goto LABEL_175;
  }
  v181 = v7;
  unsigned int v180 = v10;
  id v179 = v8;
  if (v8) {
    id v11 = (id)[v8 mutableCopy];
  }
  else {
    id v11 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  id v12 = v11;
  id v13 = v181;
  id v14 = v12;
  double started = (void *)CalCalendarItemCopyStartDate((uint64_t)a1);
  if (started)
  {
    id v16 = started;
    CalSetStartDateOnICSComponentWithOptions((uint64_t)a1, v13, started, v14);
    CFRelease(v16);
  }

  if ((a4 & 0x2000) == 0)
  {
    uint64_t v17 = CalCalendarItemCopySummary((uint64_t)a1);
    if (v17)
    {
      id v18 = (const void *)v17;
      [v13 setSummary:v17];
      CFRelease(v18);
    }
    uint64_t v19 = CalCalendarItemCopyDescription((uint64_t)a1);
    if (v19)
    {
      id v20 = (const void *)v19;
      [v13 setDescription:v19];
      CFRelease(v20);
    }
    uint64_t v21 = CalCalendarItemCopyURL((uint64_t)a1);
    if (v21)
    {
      int v22 = (const void *)v21;
      [v13 setUrl:v21];
      CFRelease(v22);
    }
  }
  id v23 = v13;
  CFTypeRef v24 = CalCalendarItemCopyLocation((uint64_t)a1);
  UpdateICSStructuredLocationFromCalLocation((uint64_t)v24, v23, 1, 0);

  if (v24) {
    CFRelease(v24);
  }
  id v25 = v23;
  CFTypeRef v26 = CalCalendarItemCopyStartLocation((uint64_t)a1);
  UpdateICSStructuredLocationFromCalLocation((uint64_t)v26, v25, 0, 1);

  if (v26) {
    CFRelease(v26);
  }
  id v27 = v25;
  CFTypeRef v28 = CalCalendarItemCopyEndLocation((uint64_t)a1);
  UpdateICSStructuredLocationFromCalLocation((uint64_t)v28, v27, 0, 2);

  if (v28) {
    CFRelease(v28);
  }
  unsigned int Status = CalCalendarItemGetStatus((uint64_t)a1);
  if (Status) {
    [v27 setStatus:ICSStatusFromCalCalendarItemStatus(Status)];
  }
  uint64_t v30 = [MEMORY[0x1E4F1C9C8] date];
  int v31 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
  int v32 = ICSDateFromCFDateInTimezone(v30, v31);
  [v27 setDtstamp:v32];

  uint64_t ModifiedDate = CalCalendarItemCopyLastModifiedDate((uint64_t)a1);
  if (ModifiedDate)
  {
    uint64_t v34 = (const void *)ModifiedDate;
    int v35 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
    CFTimeZoneRef v36 = ICSDateFromCFDateInTimezone((uint64_t)v34, v35);
    objc_msgSend(v27, "setLast_modified:", v36);

    CFRelease(v34);
  }
  uint64_t v37 = CalCalendarItemCopyCreationDate((uint64_t)a1);
  if (v37)
  {
    CFStringRef v38 = (const void *)v37;
    CFArrayRef v39 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
    CFComparisonResult v40 = ICSDateFromCFDateInTimezone((uint64_t)v38, v39);
    [v27 setCreated:v40];

    CFRelease(v38);
  }
  [v27 setPriority:CalCalendarItemGetPriority((uint64_t)a1)];
  [v27 setSequence:(int)CalCalendarItemGetSequenceNumber((uint64_t)a1)];
  uint64_t v41 = CalCalendarItemCopyStructuredData((uint64_t)a1);
  if (v41)
  {
    __int16 v42 = (void *)v41;
    objc_msgSend(v27, "setX_apple_structuredData:", v41);
  }
  uint64_t v184 = (uint64_t)a1;
  unint64_t v186 = a4;
  if ((a4 & 0x4000) == 0)
  {
    id v43 = v27;
    if (_setSubcomponentsOnICSComponent_onceToken != -1) {
      dispatch_once(&_setSubcomponentsOnICSComponent_onceToken, &__block_literal_global_16);
    }
    id v44 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    CFArrayRef v45 = CalCalendarItemCopyAlarms((uint64_t)a1);
    if (v45)
    {
      CFArrayRef v46 = v45;
      CFIndex Count = CFArrayGetCount(v45);
      if (Count >= 1)
      {
        CFIndex v48 = Count;
        int v171 = 0;
        CFIndex v49 = 0;
        CFIndex v190 = Count;
        id v176 = v27;
        CFArrayRef v168 = v46;
        while (1)
        {
          CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v46, v49);
          if ((CalAlarmGetType((uint64_t)ValueAtIndex) & 0xFFFFFFFE) != 2) {
            break;
          }
LABEL_59:
          if (v48 == ++v49)
          {
            CFRelease(v46);
            if (v171) {
              goto LABEL_68;
            }
            goto LABEL_66;
          }
        }
        long long v51 = ICSAlarmFromCalAlarm(ValueAtIndex);
        if (![v51 action])
        {
          long long v52 = [v51 trigger];
          if ([v52 isDurationBased])
          {
          }
          else
          {
            v170 = [v51 trigger];
            uint64_t v53 = [v170 value];
            CFTypeRef v54 = [v53 components];
            CalInvalidAlarmDate();
            id v55 = v44;
            id v56 = v43;
            char v58 = v57 = v14;
            int v169 = [v54 isEqual:v58];

            id v14 = v57;
            id v43 = v56;
            id v44 = v55;
            int v59 = v171;
            CFIndex v48 = v190;

            CFArrayRef v46 = v168;
            id v27 = v176;

            if (v169) {
              int v59 = 1;
            }
            int v171 = v59;
          }
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v60 = [v51 trigger];
          if (v60)
          {
            id v61 = v14;
            uint64_t v62 = [v51 trigger];
            v174 = v62;
            if (([v62 isDurationBased] & 1) == 0)
            {

              id v14 = v61;
              if (!v51) {
                goto LABEL_58;
              }
              goto LABEL_57;
            }
            id v14 = v61;
          }
          CFTypeRef v63 = objc_msgSend(v43, "dtstart", v168);

          if (v60)
          {
          }
          if (!v63) {
            [v51 setTrigger:_setSubcomponentsOnICSComponent_sInvalidTrigger];
          }
          CFIndex v48 = v190;
        }
        if (!v51)
        {
LABEL_58:

          goto LABEL_59;
        }
LABEL_57:
        objc_msgSend(v44, "addObject:", v51, v168);
        goto LABEL_58;
      }
      CFRelease(v46);
    }
LABEL_66:
    if (CalCalendarItemIsDefaultAlarmRemoved(v184))
    {
      id v64 = objc_alloc_init(MEMORY[0x1E4FB7EC8]);
      [v64 setAction:0];
      [v64 setTrigger:_setSubcomponentsOnICSComponent_sInvalidTrigger];
      [v44 addObject:v64];
    }
LABEL_68:
    objc_msgSend(v43, "setComponents:", v44, v168);

    a1 = (const void *)v184;
    a4 = v186;
  }
  id v182 = v14;
  if ((a4 & 0x1000) == 0)
  {
    id v65 = v27;
    long long v66 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      CFArrayRef v67 = v66;
      *(_DWORD *)stat buf = 138412290;
      CFIndex DebugDescription = (CFIndex)CalEntityGetDebugDescription(a1);
      _os_log_impl(&dword_1A8E81000, v67, OS_LOG_TYPE_DEBUG, "Generating iCalendar objects for attendees on event: [%@]", buf, 0xCu);
    }
    CFMutableArrayRef v68 = CalCalendarItemCopyAttendees((uint64_t)a1);
    if (v68)
    {
      CFArrayRef v69 = v68;
      int v172 = v65;
      id v70 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      CFIndex v71 = CFArrayGetCount(v69);
      if (v71 >= 1)
      {
        CFIndex v72 = v71;
        for (CFIndex i = 0; i != v72; ++i)
        {
          uint64_t v74 = CFArrayGetValueAtIndex(v69, i);
          uint64_t v75 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            CFArrayRef v76 = v75;
            CFTypeRef v77 = CalEntityGetDebugDescription(v74);
            *(_DWORD *)stat buf = 138412290;
            CFIndex DebugDescription = (CFIndex)v77;
            _os_log_impl(&dword_1A8E81000, v76, OS_LOG_TYPE_DEBUG, "Generating iCalendar object for attendee: [%@]", buf, 0xCu);
          }
          uint64_t v78 = ICSUserAddressFromCalAttendee((uint64_t)v74);
          if (v78)
          {
            [v70 addObject:v78];
          }
          else
          {
            id v79 = (void *)CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
            {
              uint64_t v80 = v79;
              uint64_t v81 = CFArrayGetValueAtIndex(v69, i);
              int UID = CalAttendeeGetUID(v81);
              *(_DWORD *)stat buf = 67109120;
              LODWORD(DebugDescription) = UID;
              _os_log_impl(&dword_1A8E81000, v80, OS_LOG_TYPE_ERROR, "Couldn't create an icsUser from attendee %d", buf, 8u);
            }
          }
        }
      }
      id v65 = v172;
      if ([v70 count]) {
        [v172 setAttendee:v70];
      }
      CFRelease(v69);

      a1 = (const void *)v184;
      a4 = v186;
      id v14 = v182;
    }
    CFTypeRef v83 = CalCalendarItemCopyOrganizer((uint64_t)a1);
    if (v83)
    {
      v84 = v83;
      v85 = ICSUserAddressFromCalOrganizer((uint64_t)v83);
      [v65 setOrganizer:v85];

      CFRelease(v84);
    }
  }
  id v86 = v27;
  CFMutableArrayRef v87 = CalCalendarItemCopyRecurrences((uint64_t)a1);
  if (v87)
  {
    CFArrayRef v88 = v87;
    id v89 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    CFIndex v90 = CFArrayGetCount(v88);
    if (v90 >= 1)
    {
      CFIndex v91 = v90;
      for (CFIndex j = 0; j != v91; ++j)
      {
        v93 = CFArrayGetValueAtIndex(v88, j);
        int v94 = ICSRecurrenceRuleFromCalRecurrence((uint64_t)v93, (uint64_t)a1);
        if (v94)
        {
          [v89 addObject:v94];
        }
        else
        {
          uint64_t v95 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)stat buf = 0;
            _os_log_impl(&dword_1A8E81000, v95, OS_LOG_TYPE_ERROR, "Couldn't create an ICSRecurrence", buf, 2u);
          }
        }

        a1 = (const void *)v184;
      }
    }
    if ([v89 count]) {
      [v86 setRrule:v89];
    }
    CFRelease(v88);

    a4 = v186;
    id v14 = v182;
  }

  id v96 = v86;
  id v97 = v14;
  v98 = [v97 objectForKey:@"ItemBridgeExceptionDates"];
  id v99 = [v97 objectForKey:@"ItemBridgeIsAllDay"];
  int v100 = [v99 BOOLValue];

  v183 = v97;
  CFTypeRef v101 = [v97 objectForKey:@"ItemBridgeStartDateTimezone"];
  CFArrayRef v102 = CalCalendarItemCopyExceptionDates((uint64_t)a1);
  if (v102)
  {
    CFArrayRef v103 = v102;
    if (CFArrayGetCount(v102) >= 1)
    {
      id v104 = v96;
      id v105 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      CFIndex v106 = CFArrayGetCount(v103);
      v107 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 134217984;
        CFIndex DebugDescription = v106;
        _os_log_impl(&dword_1A8E81000, v107, OS_LOG_TYPE_DEBUG, "Setting %ld exception dates on the ICS component", buf, 0xCu);
      }
      if (v106 >= 1)
      {
        for (CFIndex k = 0; k != v106; ++k)
        {
          CFURLRef v109 = CFArrayGetValueAtIndex(v103, k);
          v110 = (void *)CalExceptionDateCopyDate((uint64_t)v109);
          if (([v98 containsObject:v110] & 1) == 0)
          {
            if (v100) {
              ICSFloatingDateOnlyFromCFDate((uint64_t)v110, v101);
            }
            else {
            long long v111 = ICSDateFromCFDate((uint64_t)v110, v101);
            }
            [v105 addObject:v111];
          }
        }
      }
      id v96 = v104;
      [v104 setExdate:v105];

      a1 = (const void *)v184;
      a4 = v186;
    }
    CFRelease(v103);
  }

  if ((a4 & 0x10000) == 0)
  {
    id v112 = v96;
    CFMutableArrayRef v113 = CalCalendarItemCopyAttachments((uint64_t)a1);
    if (v113)
    {
      CFArrayRef v114 = v113;
      id v187 = v96;
      id v115 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      CFIndex v116 = CFArrayGetCount(v114);
      if (v116 >= 1)
      {
        CFIndex v117 = v116;
        for (CFIndex m = 0; m != v117; ++m)
        {
          uint64_t v119 = CFArrayGetValueAtIndex(v114, m);
          uint64_t v120 = ICSAttachmentFromCalAttachment((uint64_t)v119, (a4 >> 8) & 1);
          if (v120)
          {
            [v115 addObject:v120];
          }
          else
          {
            uint64_t v121 = (void *)CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
            {
              uint64_t v122 = v121;
              int v123 = CalAttachmentGetUID();
              *(_DWORD *)stat buf = 67109120;
              LODWORD(DebugDescription) = v123;
              _os_log_impl(&dword_1A8E81000, v122, OS_LOG_TYPE_ERROR, "Couldn't create an ICS attachment from attachment %d", buf, 8u);
            }
          }
        }
      }
      if ([v115 count]) {
        [v112 setAttach:v115];
      }
      CFRelease(v114);

      a1 = (const void *)v184;
      id v96 = v187;
    }
  }
  id v124 = v96;
  CFArrayRef v125 = CalCalendarItemCopyContacts((uint64_t)a1);
  CFIndex v126 = CFArrayGetCount(v125);
  if (v126 < 1)
  {
    objc_msgSend(v124, "setX_apple_contactIdentifiers:", 0);
    if (!v125) {
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  CFIndex v127 = v126;
  CFIndex v128 = objc_opt_new();
  for (CFIndex n = 0; n != v127; ++n)
  {
    v130 = CFArrayGetValueAtIndex(v125, n);
    v131 = (const void *)CalContactCopyContactIdentifier((uint64_t)v130);
    [v128 addObject:v131];
    CFRelease(v131);
  }
  [v128 sortUsingComparator:&__block_literal_global_58];
  v132 = [v128 componentsJoinedByString:@";"];
  objc_msgSend(v124, "setX_apple_contactIdentifiers:", v132);

  if (v125) {
LABEL_130:
  }
    CFRelease(v125);
LABEL_131:

  id v133 = v124;
  id v134 = CalCalendarItemCopyGroupedCategories((uint64_t)a1);
  v177 = v133;
  if ([v134 count])
  {
    CFDateRef v191 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v134, "count"));
  }
  else
  {
    CFDateRef v191 = 0;
  }
  long long v199 = 0u;
  long long v200 = 0u;
  long long v197 = 0u;
  long long v198 = 0u;
  id v135 = v134;
  uint64_t v136 = [v135 countByEnumeratingWithState:&v197 objects:buf count:16];
  if (v136)
  {
    uint64_t v137 = v136;
    uint64_t v188 = *(void *)v198;
    do
    {
      for (iCFIndex i = 0; ii != v137; ++ii)
      {
        if (*(void *)v198 != v188) {
          objc_enumerationMutation(v135);
        }
        long long v139 = [v135 objectForKeyedSubscript:*(void *)(*((void *)&v197 + 1) + 8 * ii)];
        long long v140 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v139, "count"));
        long long v193 = 0u;
        long long v194 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        id v141 = v139;
        uint64_t v142 = [v141 countByEnumeratingWithState:&v193 objects:v201 count:16];
        if (v142)
        {
          uint64_t v143 = v142;
          uint64_t v144 = *(void *)v194;
          do
          {
            for (jCFIndex j = 0; jj != v143; ++jj)
            {
              if (*(void *)v194 != v144) {
                objc_enumerationMutation(v141);
              }
              long long v146 = (void *)CalCategoryCopyName(*(void *)(*((void *)&v193 + 1) + 8 * jj));
              [v140 addObject:v146];
            }
            uint64_t v143 = [v141 countByEnumeratingWithState:&v193 objects:v201 count:16];
          }
          while (v143);
        }

        [v140 sortUsingSelector:sel_compare_];
        id v147 = objc_alloc_init(MEMORY[0x1E4FB7F68]);
        [v147 setValues:v140 valueType:5007];
        [v191 addObject:v147];
      }
      uint64_t v137 = [v135 countByEnumeratingWithState:&v197 objects:buf count:16];
    }
    while (v137);
  }

  [v177 setProperties:v191 forName:*MEMORY[0x1E4FB8158]];
  v148 = [v183 objectForKey:@"ItemBridgeIsAllDay"];
  char v149 = [v148 BOOLValue];

  if ((v149 & 1) == 0)
  {
    [v177 removePropertiesForName:@"X-MICROSOFT-CDO-ALLDAYEVENT"];
    [v177 removePropertiesForName:@"X-FUNAMBOL-ALLDAY"];
  }
  objc_opt_class();
  uint64_t v10 = v180;
  if (objc_opt_isKindOfClass())
  {
    id v150 = v177;
    CFURLRef v151 = CalEventCopyConferenceURL(v184);
    v192 = [(__CFURL *)v151 absoluteString];
    if (v151) {
      id v152 = (void *)[objc_alloc(MEMORY[0x1E4FB7F20]) initWithValue:v151 type:5032];
    }
    else {
      id v152 = 0;
    }
    CFArrayRef v153 = CalCalendarItemCopyConferences(v184);
    if (v153)
    {
      CFArrayRef v154 = v153;
      if (CFArrayGetCount(v153) >= 1)
      {
        uint64_t v178 = v152;
        CFURLRef v173 = v151;
        CFIndex v175 = v150;
        id v185 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        CFIndex v155 = CFArrayGetCount(v154);
        if (v155 >= 1)
        {
          CFIndex v156 = v155;
          char v189 = 0;
          for (kCFIndex k = 0; kk != v156; ++kk)
          {
            CFTypeRef v158 = CFArrayGetValueAtIndex(v154, kk);
            v159 = (void *)CalConferenceCopyURL((uint64_t)v158);
            if (v159)
            {
              v160 = (void *)CalConferenceCopyInfo((uint64_t)v158);
              double v161 = (void *)CalConferenceCopyFeature((uint64_t)v158);
              BOOL v162 = (void *)CalConferenceCopyLanguage((uint64_t)v158);
              int v163 = (void *)CalConferenceCopyRegion((uint64_t)v158);
              if (v189 & 1 | (v192 == 0) || ![v159 isEqualToString:v192])
              {
                v166 = [MEMORY[0x1E4F1CB10] URLWithString:v159];
                id v164 = (id)[objc_alloc(MEMORY[0x1E4FB7F20]) initWithValue:v166 type:5032];

                int v165 = 1;
              }
              else
              {
                id v164 = v178;
                int v165 = 0;
                char v189 = 1;
              }
              [v164 setInfo:v160];
              [v164 setFeature:v161];
              [v164 setLanguage:v162];
              [v164 setRegion:v163];
              if (v165) {
                [v185 addObject:v164];
              }
            }
          }
        }
        id v152 = v178;
        if (v178) {
          [v185 insertObject:v178 atIndex:0];
        }
        id v150 = v175;
        [v175 setConferences:v185];

        uint64_t v10 = v180;
        CFURLRef v151 = v173;
      }
      CFRelease(v154);
    }
  }
  id v7 = v181;
  id v8 = v179;
LABEL_175:

  return v10;
}

void __CalCalendarItemUpdateAttachmentsFromICSComponent_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
}

void __CalCalendarItemUpdateContactsFromICSComponent_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t _CalConferenceIsEqualToConference(void *a1, uint64_t a2)
{
  return [a1 isEqualToConference:a2];
}

uint64_t __CalCalendarItemUpdateConferencesFromICSComponent_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = [v5 value];
  uint64_t v7 = CalConferenceCopyURL((uint64_t)v4);
  id v8 = (void *)v7;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    id v11 = [MEMORY[0x1E4F1CB10] URLWithString:v7];
    if (![v6 isEqual:v11])
    {
      uint64_t v10 = 0;
LABEL_46:

      goto LABEL_47;
    }
    id v13 = (void *)CalConferenceCopyInfo((uint64_t)v4);
    id v14 = (void *)CalConferenceCopyFeature((uint64_t)v4);
    int v35 = (void *)CalConferenceCopyRegion((uint64_t)v4);
    uint64_t v15 = (void *)CalConferenceCopyLanguage((uint64_t)v4);
    if (v13 || ([v5 info], (uint64_t v33 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v2 = [v5 info];
      if (([v13 isEqual:v2] & 1) == 0)
      {
        id v16 = (void *)v2;
        uint64_t v17 = v15;

        uint64_t v10 = 0;
        goto LABEL_43;
      }
      int v34 = 1;
    }
    else
    {
      uint64_t v33 = 0;
      int v34 = 0;
    }
    int v32 = (void *)v2;
    if (v14 || ([v5 feature], (uint64_t v30 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      id v18 = [v5 feature];
      if (([v14 isEqual:v18] & 1) == 0)
      {
        uint64_t v17 = v15;

        uint64_t v10 = 0;
        goto LABEL_40;
      }
      BOOL v29 = v18;
      int v19 = 1;
    }
    else
    {
      uint64_t v30 = 0;
      int v19 = 0;
    }
    if (v35 || ([v5 region], (CFTypeRef v26 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      int v31 = [v5 region];
      if (!objc_msgSend(v35, "isEqual:"))
      {
        uint64_t v17 = v15;
        uint64_t v10 = 0;
LABEL_36:

        goto LABEL_37;
      }
      int v28 = 1;
      if (v15) {
        goto LABEL_29;
      }
    }
    else
    {
      CFTypeRef v26 = 0;
      int v28 = 0;
      if (v15) {
        goto LABEL_29;
      }
    }
    uint64_t v24 = [v5 language];
    if (!v24)
    {
      uint64_t v17 = v15;
      int v22 = 0;
      uint64_t v10 = 1;
      goto LABEL_35;
    }
LABEL_29:
    int v27 = v19;
    id v20 = objc_msgSend(v5, "language", v24, v26);
    uint64_t v21 = v15;
    uint64_t v10 = [v15 isEqual:v20];

    uint64_t v17 = v21;
    if (v21)
    {
      if (v28)
      {
        int v19 = v27;
        goto LABEL_36;
      }
      int v19 = v27;
LABEL_37:
      if (!v35)
      {

        if ((v19 & 1) == 0) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (v19) {
LABEL_39:
      }

LABEL_40:
      if (!v14)
      {

        if ((v34 & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
      if (v34) {
LABEL_42:
      }

LABEL_43:
      if (!v13) {

      }
      goto LABEL_46;
    }
    int v19 = v27;
    int v22 = v25;
LABEL_35:

    if (v28) {
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  uint64_t v10 = 0;
LABEL_47:

  return v10;
}

void ___setSubcomponentsOnICSComponent_block_invoke()
{
  CalInvalidAlarmDate();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = objc_msgSend(objc_alloc(MEMORY[0x1E4FB7F30]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v3, "year"), objc_msgSend(v3, "month"), objc_msgSend(v3, "day"), objc_msgSend(v3, "hour"), objc_msgSend(v3, "minute"), objc_msgSend(v3, "second"));
  uint64_t v1 = [objc_alloc(MEMORY[0x1E4FB7FA8]) initWithDate:v0];
  uint64_t v2 = (void *)_setSubcomponentsOnICSComponent_sInvalidTrigger;
  _setSubcomponentsOnICSComponent_sInvalidTrigger = v1;
}

uint64_t ___setCalContactsOnICSComponent_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

id ICSAlarmFromCalAlarm(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4FB7EC8]);
    BOOL IsDefaultAlarm = CalAlarmIsDefaultAlarm((uint64_t)v1);
    CFTypeRef v4 = CalAlarmCopyOwningEntity((uint64_t)v1);
    id v5 = (void *)v4;
    if (IsDefaultAlarm)
    {
      if (!CalEntityIsOfType(v4, 2)) {
        goto LABEL_28;
      }
      BOOL IsAllDay = CalEventIsAllDay((uint64_t)v5);
      CFTypeRef v7 = CalEventCopyStore((uint64_t)v5);
      id v8 = v7;
      if (IsAllDay) {
        uint64_t v9 = CalStoreCopyDefaultAllDayAlarmOffset((uint64_t)v7);
      }
      else {
        uint64_t v9 = CalStoreCopyDefaultAlarmOffset((uint64_t)v7);
      }
      CFNumberRef v21 = (const __CFNumber *)v9;
      if (v8) {
        CFRelease(v8);
      }
      int valuePtr = -1;
      if (v21)
      {
        CFNumberGetValue(v21, kCFNumberIntType, &valuePtr);
        CFRelease(v21);
      }
      else
      {
        int v22 = (const void *)CalCopyDatabaseForEntity(v1);
        id v23 = CalDatabaseGetPreferences((uint64_t)v22);
        CFRelease(v22);
        if (IsAllDay) {
          CFNumberRef v24 = (const __CFNumber *)CalAlarmCopyDefaultAllDayAlarmOffsetWithPreferences(v23);
        }
        else {
          CFNumberRef v24 = (const __CFNumber *)CalAlarmCopyDefaultTimedAlarmOffsetWithPreferences(v23);
        }
        CFNumberRef v25 = v24;
        if (v24)
        {
          CFNumberGetValue(v24, kCFNumberIntType, &valuePtr);
          CFRelease(v25);
        }
      }
      if (valuePtr == -1)
      {
LABEL_28:
        id v1 = 0;
LABEL_48:

        goto LABEL_49;
      }
      id v13 = objc_alloc(MEMORY[0x1E4FB7F50]);
      uint64_t v14 = valuePtr;
    }
    else
    {
      double TriggerDate = CalAlarmGetTriggerDate((uint64_t)v1);
      if (fabs(TriggerDate + -1.17549435e-38) >= 2.22044605e-16)
      {
        CFDateRef v15 = CFDateCreate(0, TriggerDate);
        id v16 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
        uint64_t v17 = ICSDateFromCFDateInTimezone((uint64_t)v15, v16);

        CFRelease(v15);
        id v18 = objc_alloc(MEMORY[0x1E4FB7FA8]);
        int v19 = [v17 value];
        id v20 = (void *)[v18 initWithDate:v19];

        if (!v20) {
          goto LABEL_25;
        }
        goto LABEL_26;
      }
      int TriggerInterval = CalAlarmGetTriggerInterval((uint64_t)v1);
      if (TriggerInterval == 0x7FFFFFFF)
      {
LABEL_25:
        int v27 = CalInvalidAlarmDate();
        int v28 = objc_msgSend(objc_alloc(MEMORY[0x1E4FB7F30]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v27, "year"), objc_msgSend(v27, "month"), objc_msgSend(v27, "day"), objc_msgSend(v27, "hour"), objc_msgSend(v27, "minute"), objc_msgSend(v27, "second"));
        id v20 = (void *)[objc_alloc(MEMORY[0x1E4FB7FA8]) initWithDate:v28];

        goto LABEL_26;
      }
      int v12 = TriggerInterval;
      id v13 = objc_alloc(MEMORY[0x1E4FB7F50]);
      uint64_t v14 = v12;
    }
    CFTypeRef v26 = (void *)[v13 initWithWeeks:0 days:0 hours:0 minutes:0 seconds:v14];
    id v20 = (void *)[objc_alloc(MEMORY[0x1E4FB7FA8]) initWithDuration:v26];

    if (!v20) {
      goto LABEL_25;
    }
LABEL_26:
    [v2 setTrigger:v20];
    unsigned int Type = CalAlarmGetType((uint64_t)v1);
    [v2 setAction:ICSActionFromCalAlarmType(Type)];
    uint64_t v30 = CalAlarmCopyUUID((uint64_t)v1);
    if (v30)
    {
      int v31 = (const void *)v30;
      [v2 setUid:v30];
      objc_msgSend(v2, "setX_wr_alarmuid:", v31);
      CFRelease(v31);
    }
    else
    {
      int v32 = [MEMORY[0x1E4FB7F18] makeUID];
      [v2 setUid:v32];
      objc_msgSend(v2, "setX_wr_alarmuid:", v32);
    }
    int Proximity = CalAlarmGetProximity((uint64_t)v1);
    int v34 = ICSProximityStringFromCalAlarmProximity(Proximity);
    objc_msgSend(v2, "setX_apple_proximity:", v34);

    objc_msgSend(v2, "setX_apple_default_alarm:", CalAlarmIsDefaultAlarm((uint64_t)v1));
    id v35 = v2;
    CFTypeRef v36 = CalAlarmCopyLocation((uint64_t)v1);
    UpdateICSStructuredLocationFromCalLocation((uint64_t)v36, v35, 0, 0);

    if (v36) {
      CFRelease(v36);
    }
    if (CalAlarmGetAcknowledged((uint64_t)v1))
    {
      CalAlarmGetAcknowledgedDate((uint64_t)v1);
      CFTimeZoneRef v37 = CFTimeZoneCreateWithName(0, @"UTC", 1u);
      uint64_t GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      CFComparisonResult v40 = (void *)[objc_alloc(MEMORY[0x1E4FB7F30]) initWithYear:(int)GregorianDateWithFallbackToDefaultTimeZone month:GregorianDateWithFallbackToDefaultTimeZone << 24 >> 56 day:GregorianDateWithFallbackToDefaultTimeZone << 16 >> 56 hour:GregorianDateWithFallbackToDefaultTimeZone << 8 >> 56 minute:GregorianDateWithFallbackToDefaultTimeZone >> 56 second:(uint64_t)v39];
      [v35 setAcknowledged:v40];
      if (v37) {
        CFRelease(v37);
      }
    }
    else
    {
      [v35 setAcknowledged:0];
    }
    CFTypeRef v41 = CalAlarmCopyOriginalAlarm((uint64_t)v1);
    if (v41)
    {
      __int16 v42 = v41;
      uint64_t v43 = CalAlarmCopyExternalID((uint64_t)v41);
      if (v43)
      {
        id v44 = (const void *)v43;
        [v35 setRelatedTo:v43];
        CFRelease(v44);
      }
      CFRelease(v42);
    }
    uint64_t v45 = CalAlarmCopyExternalRepresentation((uint64_t)v1);
    if (v45)
    {
      CFArrayRef v46 = (const void *)v45;
      long long v47 = +[CalAlarmMetadata metadataWithData:v45];
      CFRelease(v46);
      [v47 applyToComponent:v35];
    }
    CFIndex v48 = [v35 description];
    if (v48)
    {
    }
    else if ([v35 action] != 2)
    {
      CFIndex v49 = +[CDBBundle bundle];
      uint64_t v50 = [v49 localizedStringForKey:@"Reminder" value:&stru_1EFF6D0F0 table:0];

      [v35 setDescription:v50];
    }
    id v1 = v35;

    goto LABEL_48;
  }
LABEL_49:
  return v1;
}

BOOL CalAlarmUpdateFromICSAlarm(void *a1, void *a2, uint64_t a3, os_unfair_lock_s *a4, int a5)
{
  id v9 = a1;
  id v10 = a2;
  if (a3)
  {
    id v11 = [v9 trigger];
    int v12 = [v11 isDurationBased];
    id v13 = [v11 value];
    id v54 = v10;
    int v51 = a5;
    long long v52 = v11;
    if (v12)
    {
      int TriggerInterval = CalAlarmGetTriggerInterval(a3);
      [v13 timeInterval];
      if (TriggerInterval != (int)v15) {
        CalAlarmSetTriggerInterval(a3, (int)v15);
      }
    }
    else
    {
      id v16 = (void *)[objc_alloc(MEMORY[0x1E4FB7F28]) initWithValue:v13];
      uint64_t DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v16, v10);
      id v18 = CalInvalidAlarmDate();
      int v19 = [v18 date];
      [v19 timeIntervalSinceReferenceDate];
      double v21 = vabdd_f64(*(double *)&DateTimeFromICSDate, v20);

      if (v21 >= 2.22044605e-16) {
        CalAlarmSetTriggerDate(a3, *(CFAbsoluteTime *)&DateTimeFromICSDate);
      }
      CalDateTimeRelease();
    }
    int Type = CalAlarmGetType(a3);
    int v53 = CalAlarmTypeFromICSAction([v9 action]);
    if (Type != v53) {
      CalAlarmSetType(a3);
    }
    id v23 = [v9 uid];
    if (![v23 length])
    {
      uint64_t v24 = objc_msgSend(v9, "x_wr_alarmuid");

      id v23 = (void *)v24;
    }
    if (v23) {
      CalAlarmSetUUID(a3);
    }
    int Proximity = CalAlarmGetProximity(a3);
    CFTypeRef v26 = objc_msgSend(v9, "x_apple_proximity");
    int v27 = CalAlarmProximityFromICSProximityString(v26);

    if (Proximity != v27) {
      CalAlarmSetProximity(a3);
    }
    id v28 = v9;
    BOOL v29 = objc_msgSend(v28, "x_apple_structured_location");
    if (v29
      || ([v28 location], uint64_t v30 = objc_claimAutoreleasedReturnValue(), v30, v30))
    {
      CFTypeRef Location = CalAlarmCopyLocation(a3);
      if (!Location)
      {
        CFTypeRef Location = CalDatabaseCreateLocation(a4);
        CalAlarmSetLocation(a3, Location);
      }
      CalLocationUpdateFromICSComponent((uint64_t)Location, v28, 0, 0);
      CFRelease(Location);
    }
    else
    {
      CalAlarmSetLocation(a3, 0);
    }

    int v32 = [(CalItemMetadata *)[CalAlarmMetadata alloc] initWithICSComponent:v28];
    uint64_t v33 = (void *)CalAlarmCopyExternalRepresentation(a3);
    int v34 = [(CalItemMetadata *)v32 dataRepresentationWithExistingMetaData:v33];
    CalAlarmSetExternalRepresentation(a3);
    id v35 = [v28 acknowledged];

    if (v35)
    {
      CFTypeRef v36 = [v28 acknowledged];
      CFTimeZoneRef v37 = (void *)[objc_alloc(MEMORY[0x1E4FB7F28]) initWithValue:v36];
      uint64_t v38 = CalCreateDateTimeFromICSDate(v37, v10);
      if (vabdd_f64(CalAlarmGetAcknowledgedDate(a3), *(double *)&v38) >= 2.22044605e-16) {
        CalAlarmSetAcknowledgedDate(a3, *(CFAbsoluteTime *)&v38);
      }
      CalDateTimeRelease();
    }
    else if (vabdd_f64(CalAlarmGetAcknowledgedDate(a3), *MEMORY[0x1E4F57888]) >= 2.22044605e-16)
    {
      CalAlarmRemoveAcknowledged(a3);
    }
    if ((*(void *)&v51 & 0x800000) == 0) {
      goto LABEL_36;
    }
    if (v53 == 3)
    {
      CFComparisonResult v40 = [v28 attendee];
      double v39 = [v40 firstObject];

      CFTypeRef v41 = [v39 value];
      __int16 v42 = [v41 scheme];
      uint64_t v43 = v42;
      if (v42 && ![v42 caseInsensitiveCompare:@"mailto"])
      {
        id v44 = [v41 resourceSpecifier];
        [v44 stringByRemovingPercentEscapes];
        uint64_t v50 = v23;
        uint64_t v45 = v34;
        CFArrayRef v46 = v33;
        v48 = long long v47 = v32;

        CalAlarmSetEmailAddress(a3);
        int v32 = v47;
        uint64_t v33 = v46;
        int v34 = v45;
        id v23 = v50;
      }
    }
    else
    {
      if (v53 != 2)
      {
LABEL_36:

        goto LABEL_37;
      }
      double v39 = [v28 bookmark];
      CalAlarmSetBookmark(a3);
    }

    id v10 = v54;
    goto LABEL_36;
  }
LABEL_37:

  return a3 != 0;
}

void CalIdentityInitializeTables(uint64_t a1, void *a2)
{
}

void CalIdentityMigrateTables(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((int)a3 < 7)
  {
    CFTypeRef v4 = @"CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));";
    goto LABEL_8;
  }
  if (a3 - 12 <= 0xD)
  {
    CalPerformSQLWithConnection(a2, @"ALTER TABLE Participant RENAME TO Participant_;");
    CalPerformSQLWithConnection(a2, @"CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));");
    CalPerformSQLWithConnection(a2, @"INSERT INTO Identity (ROWID, display_name, address) SELECT ROWID, name, email FROM Participant_ WHERE name IS NOT NULL AND email IS NOT NULL;");
    CalPerformSQLWithConnection(a2, @"INSERT INTO Identity (ROWID, display_name, address) SELECT MIN(ROWID), name, email FROM Participant_ WHERE email IS NULL AND name IS NOT NULL GROUP BY name;");
    CalPerformSQLWithConnection(a2, @"INSERT INTO Identity (ROWID, display_name, address) SELECT MIN(ROWID), name, email FROM Participant_ WHERE name IS NULL AND email IS NOT NULL GROUP BY email;");
    CalPerformSQLWithConnection(a2, @"INSERT INTO Identity (ROWID, display_name, address) SELECT MIN(ROWID), name, email FROM Participant_ WHERE name IS NULL AND email IS NULL GROUP BY email;");
    _CalIdentityPerformMigrationUniquingWithQueries((uint64_t)a2);
    _CalIdentityPerformMigrationUniquingWithQueries((uint64_t)a2);
LABEL_7:
    CFTypeRef v4 = @"DROP TABLE Participant_;";
    goto LABEL_8;
  }
  if (a3 <= 0x36)
  {
    CalPerformSQLWithConnection(a2, @"ALTER TABLE Participant RENAME TO Participant_;");
    CalPerformSQLWithConnection(a2, @"CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));");
    CalPerformSQLWithConnection(a2, @"INSERT INTO Identity (ROWID, display_name, address) SELECT ROWID, name, email FROM Participant_");
    goto LABEL_7;
  }
  if (a3 > 0x50)
  {
    if (a3 > 0x6A) {
      return;
    }
    CalPerformSQLWithConnection(a2, @"ALTER TABLE Identity RENAME TO Identity_;");
    CalPerformSQLWithConnection(a2, @"CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));");
    CalPerformSQLWithConnection(a2, @"INSERT INTO Identity (ROWID, display_name, address) SELECT ROWID, name, address FROM Identity_");
    CalPerformSQLWithConnection(a2, @"DROP TABLE Identity_;");
    if (a3 >= 0x67) {
      return;
    }
    goto LABEL_9;
  }
  CalPerformSQLWithConnection(a2, @"ALTER TABLE Identity RENAME TO Identity_;");
  CalPerformSQLWithConnection(a2, @"CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));");
  CalPerformSQLWithConnection(a2, @"INSERT INTO Identity (ROWID, display_name, address) SELECT ROWID, name, email FROM Identity_");
  CFTypeRef v4 = @"DROP TABLE Identity_;";
LABEL_8:
  CalPerformSQLWithConnection(a2, (uint64_t)v4);
LABEL_9:
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        if (*(void *)(*a2 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CFTypeRef v7 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (v7)
  {
    id v8 = v7;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        uint64_t v9 = **v7;
        if (v9)
        {
          if (*(void *)(v9 + 104))
          {
            id v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v8)
      {
        uint64_t v11 = **v8;
        if (v11)
        {
          if (*(void *)(v11 + 104))
          {
            int v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12) {
              os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        if (*(void *)(*a2 + 104))
        {
          id v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13) {
            os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
  }
  uint64_t v14 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (v14)
  {
    double v15 = v14;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v14)
      {
        uint64_t v16 = **v14;
        if (v16)
        {
          if (*(void *)(v16 + 104))
          {
            uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17) {
              os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v15)
      {
        uint64_t v18 = **v15;
        if (v18)
        {
          if (*(void *)(v18 + 104))
          {
            int v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19) {
              os_unfair_lock_assert_owner(v19 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    CFLog();
  }
}

void _CalIdentityPerformMigrationUniquingWithQueries(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a1)
      {
        if (*(void *)(*(void *)a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  id v3 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (v3)
  {
    CFTypeRef v4 = v3;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v3)
      {
        uint64_t v5 = **v3;
        if (v5)
        {
          if (*(void *)(v5 + 104))
          {
            uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v4)
      {
        uint64_t v7 = **v4;
        if (v7)
        {
          if (*(void *)(v7 + 104))
          {
            id v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a1)
        {
          if (*(void *)(*(void *)a1 + 104))
          {
            uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9) {
              os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionStatementForSQL();
    if (a1 && CDBLockingAssertionsEnabled && *(void *)a1 && *(void *)(*(void *)a1 + 104))
    {
      id v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
    CPSqliteConnectionStatementForSQL();
  }
}

void CalIdentityCopyDataToAuxDatabase(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t _CalIdentityGetID(CFStringRef theString, const __CFString *a2, CFStringRef a3, CFStringRef a4, uint64_t a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  int v42 = 1;
  if (!a5 || !a2 && !theString && !a3 && !a4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = @"display_name IS NULL";
  if (theString && CFStringGetLength(theString)) {
    uint64_t v11 = @"display_name = ?";
  }
  if (a2) {
    int v12 = @"address = ?";
  }
  else {
    int v12 = @"address IS NULL";
  }
  id v13 = @"first_name IS NULL";
  if (a3 && CFStringGetLength(a3)) {
    id v13 = @"first_name = ?";
  }
  uint64_t v14 = @"last_name IS NULL";
  if (a4 && CFStringGetLength(a4)) {
    uint64_t v14 = @"last_name = ?";
  }
  CFStringRef v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT ROWID FROM Identity WHERE %@ AND %@ AND %@ AND %@", v11, v12, v13, v14);
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a5)
    {
      if (*(void *)(*(void *)a5 + 104))
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v17 = CPSqliteConnectionStatementForSQL();
  if (v17)
  {
    uint64_t v18 = (uint64_t **)v17;
    __int16 v41 = 0;
    __int16 v40 = 0;
    int v19 = CalIdentityBindTextQueryArgument(*(sqlite3_stmt **)(v17 + 8), &v42, theString, v46, (BOOL *)&v41 + 1);
    uint64_t v20 = CalIdentityBindTextQueryArgument((sqlite3_stmt *)v18[1], &v42, a2, v45, (BOOL *)&v41);
    double v21 = CalIdentityBindTextQueryArgument((sqlite3_stmt *)v18[1], &v42, a3, v44, (BOOL *)&v40 + 1);
    int v22 = CalIdentityBindTextQueryArgument((sqlite3_stmt *)v18[1], &v42, a4, v43, (BOOL *)&v40);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v18)
      {
        uint64_t v23 = **v18;
        if (v23)
        {
          if (*(void *)(v23 + 104))
          {
            uint64_t v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v24) {
              os_unfair_lock_assert_owner(v24 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v18)
      {
        uint64_t v25 = **v18;
        if (v25)
        {
          if (*(void *)(v25 + 104))
          {
            CFTypeRef v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v26) {
              os_unfair_lock_assert_owner(v26 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a5)
      {
        if (*(void *)(*(void *)a5 + 104))
        {
          int v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v27) {
            os_unfair_lock_assert_owner(v27 + 20);
          }
        }
      }
    }
    uint64_t v28 = CPSqliteConnectionStatementForSQL();
    if (v28)
    {
      BOOL v29 = (uint64_t **)v28;
      uint64_t v30 = *(sqlite3_stmt **)(v28 + 8);
      if (v19) {
        sqlite3_bind_text(v30, 1, (const char *)v19, -1, 0);
      }
      else {
        sqlite3_bind_null(v30, 1);
      }
      int v31 = (sqlite3_stmt *)v29[1];
      if (v20) {
        sqlite3_bind_text(v31, 2, (const char *)v20, -1, 0);
      }
      else {
        sqlite3_bind_null(v31, 2);
      }
      int v32 = (sqlite3_stmt *)v29[1];
      if (v21) {
        sqlite3_bind_text(v32, 3, (const char *)v21, -1, 0);
      }
      else {
        sqlite3_bind_null(v32, 3);
      }
      uint64_t v33 = (sqlite3_stmt *)v29[1];
      if (v22) {
        sqlite3_bind_text(v33, 4, (const char *)v22, -1, 0);
      }
      else {
        sqlite3_bind_null(v33, 4);
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*v29)
        {
          uint64_t v34 = **v29;
          if (v34)
          {
            if (*(void *)(v34 + 104))
            {
              id v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v35) {
                os_unfair_lock_assert_owner(v35 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v29)
        {
          uint64_t v36 = **v29;
          if (v36)
          {
            if (*(void *)(v36 + 104))
            {
              CFTimeZoneRef v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v37) {
                os_unfair_lock_assert_owner(v37 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a5)
        {
          if (*(void *)(*(void *)a5 + 104))
          {
            uint64_t v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v38) {
              os_unfair_lock_assert_owner(v38 + 20);
            }
          }
        }
      }
      uint64_t Insert = CPSqliteConnectionRowidOfLastInsert();
    }
    else
    {
      uint64_t Insert = 0xFFFFFFFFLL;
    }
    if (v19 && HIBYTE(v41)) {
      free(v19);
    }
    if (v20 && (_BYTE)v41) {
      free(v20);
    }
    if (v21 && HIBYTE(v40)) {
      free(v21);
    }
    if (v22 && (_BYTE)v40) {
      free(v22);
    }
  }
  else
  {
    uint64_t Insert = 0xFFFFFFFFLL;
  }
  CFRelease(v15);
  return Insert;
}

UInt8 *CalIdentityBindTextQueryArgument(sqlite3_stmt *a1, int *a2, CFStringRef theString, UInt8 *a4, BOOL *a5)
{
  if (!theString) {
    return 0;
  }
  uint64_t Length = CFStringGetLength(theString);
  if (Length < 1) {
    return 0;
  }
  CFIndex v11 = Length;
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CFIndex v13 = MaximumSizeForEncoding;
  usedBufLeCFIndex n = MaximumSizeForEncoding;
  uint64_t v14 = a4;
  if (MaximumSizeForEncoding >= 256) {
    uint64_t v14 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0x469DE8EDuLL);
  }
  v17.locatioCFIndex n = 0;
  v17.length = v11;
  CFStringGetBytes(theString, v17, 0x8000100u, 0x20u, 0, v14, v13, &usedBufLen);
  v14[usedBufLen] = 0;
  sqlite3_bind_text(a1, *a2, (const char *)v14, -1, 0);
  if (a5) {
    *a5 = v14 != a4;
  }
  ++*a2;
  return v14;
}

void CalIdentityGarbageCollectOrphans(uint64_t a1)
{
  if (a1)
  {
    id v2 = (os_unfair_lock_s *)(a1 + 80);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    if (*(void *)(a1 + 24))
    {
      if (CDBLockingAssertionsEnabled)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (Database)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)(Database + 104))
          {
            uint64_t v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5) {
              os_unfair_lock_assert_owner(v5 + 20);
            }
          }
        }
        uint64_t v6 = (void *)CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
        if (v6) {
          CalPerformSQLWithConnectionAndBindBlock(v6, 1, @"DELETE FROM Identity WHERE NOT EXISTS (SELECT ROWID FROM Participant WHERE Participant.identity_id = Identity.ROWID) AND NOT EXISTS (SELECT ROWID FROM CalendarItem WHERE (CalendarItem.modified_by_id > 0 AND CalendarItem.modified_by_id = Identity.ROWID) OR (CalendarItem.created_by_id > 0 AND CalendarItem.created_by_id = Identity.ROWID)) AND NOT EXISTS (SELECT ROWID FROM Sharee WHERE Sharee.identity_id = Identity.ROWID) AND NOT EXISTS (SELECT ROWID FROM ResourceChange WHERE ResourceChange.identity_id = Identity.ROWID) AND NOT EXISTS (SELECT ROWID FROM Calendar WHERE Calendar.self_identity_id = Identity.ROWID OR Calendar.owner_identity_id = Identity.ROWID) AND NOT EXISTS (SELECT ROWID FROM Notification WHERE Notification.identity_id = Identity.ROWID) ", 0);
        }
      }
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v2);
    }
    os_unfair_lock_unlock(v2);
  }
}

uint64_t CalDatabaseCreateParticipantsSearchStatement(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 80));
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 32));
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_13;
  }
  uint64_t v8 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (!CPSqliteDatabaseRegisterMatchesSearchStringFunction())
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v8 + 104))
      {
        int v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    uint64_t v11 = CPSqliteDatabaseStatementForReading();
    CFIndex v13 = *(sqlite3_stmt **)(v11 + 8);
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
    sqlite3_bind_text(v13, 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
  }
  else
  {
LABEL_13:
    id v10 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 80);
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(a1 + 32) + 80));
    }
    os_unfair_lock_unlock(v10);
    return 0;
  }
  return v11;
}

void CalDatabaseCopyParticipantIdsThatMatchSearch(sqlite3_stmt **a1, uint64_t a2)
{
  int v4 = 1;
  while (1)
  {
    int v5 = sqlite3_step(a1[1]);
    if (v5 != 100) {
      break;
    }
    int v6 = sqlite3_column_int(a1[1], 0);
    if (v4 == 1 && CFArrayGetCount(*(CFArrayRef *)a2)) {
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)a2);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, (const void *)v6);
    if (**(unsigned char **)(a2 + 24)) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v4 == *(_DWORD *)(a2 + 8);
    }
    ++v4;
    if (v7)
    {
      if (!**(unsigned char **)(a2 + 24)) {
        return;
      }
      goto LABEL_15;
    }
  }
  if ((v5 - 102) > 0xFFFFFFFD || (sqlite3_errmsg(*((sqlite3 **)*a1 + 1)), CFLog(), **(unsigned char **)(a2 + 24))) {
LABEL_15:
  }
    **(unsigned char **)(a2 + 16) = 0;
}

void CalDatabaseDeleteParticipantsSearchStatement(uint64_t **a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        uint64_t v3 = **a1;
        if (v3)
        {
          if (*(void *)(v3 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  int v5 = (os_unfair_lock_s *)(*(void *)(a2 + 32) + 80);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5);
  }
  os_unfair_lock_unlock(v5);
}

uint64_t CalOrganizerUpdateAddressOfAllIdentitiesMatchingAddress(os_unfair_lock_s *a1, CFURLRef anURL, const __CFURL *a3, const __CFString *a4)
{
  uint64_t RecordStore = 0;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (anURL)
    {
      if (a3)
      {
        CFStringRef v8 = CFURLGetString(anURL);
        CFStringRef v9 = CFURLGetString(a3);
        uint64_t RecordStore = 0;
        if (v8)
        {
          CFStringRef v10 = v9;
          if (v9)
          {
            os_unfair_lock_lock(a1 + 20);
            uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
            if (RecordStore)
            {
              if (CDBLockingAssertionsEnabled)
              {
                uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (Context) {
                  os_unfair_lock_assert_owner(Context + 20);
                }
              }
              uint64_t Database = CPRecordStoreGetDatabase();
              uint64_t RecordStore = Database;
              if (Database)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*(void *)(Database + 104))
                  {
                    CFIndex v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v13) {
                      os_unfair_lock_assert_owner(v13 + 20);
                    }
                  }
                }
                uint64_t v14 = CPSqliteDatabaseConnectionForWriting();
                uint64_t RecordStore = v14;
                if (v14)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*(void *)v14)
                    {
                      if (*(void *)(*(void *)v14 + 104))
                      {
                        CFStringRef v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v15) {
                          os_unfair_lock_assert_owner(v15 + 20);
                        }
                      }
                    }
                  }
                  uint64_t RecordStore = CPSqliteConnectionStatementForSQL();
                  if (RecordStore)
                  {
                    int v24 = 1;
                    __int16 v23 = 0;
                    BOOL v22 = 0;
                    if (a4 && CFStringGetLength(a4))
                    {
                      uint64_t v16 = CalIdentityBindTextQueryArgument(*(sqlite3_stmt **)(RecordStore + 8), &v24, a4, v27, (BOOL *)&v23 + 1);
                    }
                    else
                    {
                      int v24 = 2;
                      sqlite3_bind_null(*(sqlite3_stmt **)(RecordStore + 8), 1);
                      uint64_t v16 = 0;
                    }
                    CFRange v17 = CalIdentityBindTextQueryArgument(*(sqlite3_stmt **)(RecordStore + 8), &v24, v10, v25, &v22);
                    uint64_t v18 = CalIdentityBindTextQueryArgument(*(sqlite3_stmt **)(RecordStore + 8), &v24, v8, v26, (BOOL *)&v23);
                    _CalDatabasePerformStatementWithWriteLock((uint64_t)a1, RecordStore);
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (*(void *)RecordStore)
                      {
                        uint64_t v19 = **(void **)RecordStore;
                        if (v19)
                        {
                          if (*(void *)(v19 + 104))
                          {
                            uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                            if (v20) {
                              os_unfair_lock_assert_owner(v20 + 20);
                            }
                          }
                        }
                      }
                    }
                    CPSqliteStatementReset();
                    if (HIBYTE(v23)) {
                      free(v16);
                    }
                    if ((_BYTE)v23) {
                      free(v18);
                    }
                    if (v22) {
                      free(v17);
                    }
                    uint64_t RecordStore = 1;
                  }
                }
              }
            }
            if (CDBLockingAssertionsEnabled) {
              os_unfair_lock_assert_owner(a1 + 20);
            }
            os_unfair_lock_unlock(a1 + 20);
          }
        }
      }
    }
  }
  return RecordStore;
}

uint64_t _CalIdentityGatherMigrationUniquingRows(uint64_t a1, __CFArray **a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFStringRef v5 = (CFStringRef)*MEMORY[0x1E4F1D260];
  if (sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), 1) != 5)
  {
    int v6 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
    if (v6) {
      CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v6, 0x8000100u);
    }
  }
  if (a2)
  {
    CFMutableDictionaryRef Mutable = *a2;
    if (!*a2)
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
      *a2 = Mutable;
    }
    if (!a2[1])
    {
      a2[1] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      CFMutableDictionaryRef Mutable = *a2;
    }
    CFArrayAppendValue(Mutable, (const void *)v4);
    CFArrayAppendValue(a2[1], v5);
  }
  if (v5) {
    CFRelease(v5);
  }
  return 0;
}

uint64_t _CalIdentityGatherRowsToCleanup(uint64_t a1, __CFArray **a2)
{
  int v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  int v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  if (a2)
  {
    int v6 = v5;
    CFMutableDictionaryRef Mutable = *a2;
    if (!*a2)
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
      *a2 = Mutable;
    }
    if (!a2[1])
    {
      a2[1] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
      CFMutableDictionaryRef Mutable = *a2;
    }
    CFArrayAppendValue(Mutable, (const void *)v4);
    CFArrayAppendValue(a2[1], (const void *)v6);
  }
  return 0;
}

uint64_t _CalExceptionDatePrepareForSave(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    return CalRelationOwnerWillSave(result);
  }
  return result;
}

uint64_t _CalExceptionDatePropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  if (!a2 && a3 == -1)
  {
    uint64_t v3 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    if (result != -1)
    {
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            int v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5) {
              os_unfair_lock_assert_owner(v5 + 20);
            }
          }
        }
      }
      CPRecordGetProperty();
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            int v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      return CPRecordGetProperty();
    }
  }
  return result;
}

void CalExceptionDateInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalExceptionDateClass, (const char **)&kCalExceptionDateIndexes, (const char **)&kCalExceptionDateChangesIndexes);
}

void CalExceptionDateMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 <= 18001)
  {
    uint64_t v3 = @"EventExceptionDate";
    if (a3 >= 56) {
      uint64_t v3 = 0;
    }
    CalMigrateTableFull(a2, (const char **)&kCalExceptionDateClass, (uint64_t)v3, (const char **)&kCalExceptionDateUpgradeInfo, (const char **)&kCalExceptionDateChangesUpgradeInfo, (const char **)&kCalExceptionDateIndexes, (const char **)&kCalExceptionDateChangesIndexes, 0, a3);
  }
}

uint64_t CalExceptionDateGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalExceptionDateGetPropertyIDWithPropertyName_sPropDict;
  if (!CalExceptionDateGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalExceptionDateGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalExceptionDateGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"date";
      int v6 = 1;
      BOOL v7 = @"owner";
      int v8 = 3;
      CalExceptionDateGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 2);
      for (uint64_t i = 16; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalExceptionDateGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalExceptionDateGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8F17F1C(_Unwind_Exception *a1)
{
  for (uint64_t i = 16; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalExceptionDateHasValidParent(uint64_t a1)
{
  CFTypeRef result = _CalExceptionDateGetOwner(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

CFTypeRef _CalExceptionDateGetOwner(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void _CalExceptionDateCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

const void *_CalCreateExceptionDate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 10);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = v6 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v12 = v6 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      if (CPRecordGetStore())
      {
        CFIndex v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
  }
  if (a3)
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v14 = v6 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
  }
  _CalDatabaseAddEntity(a1, v6);
  _CalDatabaseSetChangeFlags(a1, 4);
  return v6;
}

const void *_CalDatabaseCreateExceptionDate(uint64_t a1)
{
  return _CalCreateExceptionDate(a1, 0, 0);
}

const void *CalDatabaseCreateExceptionDate(os_unfair_lock_s *a1)
{
  CFDictionaryRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  ExceptionDate = _CalCreateExceptionDate((uint64_t)a1, 0, 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return ExceptionDate;
}

const void *CalDatabaseCreateExceptionDateWithDateAndOrder(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  int v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  ExceptionDate = _CalCreateExceptionDate((uint64_t)a1, a2, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  return ExceptionDate;
}

const void *_CalExceptionDateCopy(uint64_t a1, uint64_t a2)
{
  ExceptionDate = _CalCreateExceptionDate(a1, 0, 0);
  int v4 = ExceptionDate;
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = ExceptionDate == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      BOOL v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFIndex v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

uint64_t _CalRemoveExceptionDate(const void *a1)
{
  uint64_t result = CPRecordGetStore();
  if (result)
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context)
    {
      uint64_t v4 = Context;
      _CalDatabaseRemoveEntity(Context, a1);
      _CalDatabaseSetChangeFlags(v4, 4);
    }
    if (CDBLockingAssertionsEnabled)
    {
      BOOL v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5) {
        os_unfair_lock_assert_owner(v5 + 20);
      }
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

void CalRemoveExceptionDate(const void *a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveExceptionDate(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalExceptionDateGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalExceptionDateGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyExceptionDateWithUID(os_unfair_lock_s *a1)
{
  CFDictionaryRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v4 = (const void *)_CalExceptionDateGetWithUID(RecordStore);
  BOOL v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t _CalExceptionDateGetDate(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalExceptionDateCopyDate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalExceptionDateSetDate(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    CalExceptionDateSetDate_cold_1();
  }
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalExceptionDateCopyOrder(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalExceptionDateSetOrder(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalExceptionDateCopyOwner(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalExceptionDateGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalExceptionDateSetOwner(void *a1, uint64_t a2)
{
  CFTypeRef v4 = CalExceptionDateCopyOwner((uint64_t)a1);
  BOOL v5 = v4;
  if (v4 != (CFTypeRef)a2)
  {
    if (v4) {
      CalCalendarItemRemoveExceptionDate((uint64_t)v4, a1);
    }
    if (a2) {
      CalCalendarItemAddExceptionDate(a2, a1);
    }
  }
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t _CalInvalidateExceptionDatesWithOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalDatabaseCopyExceptionDateChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  BOOL v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if ((a1[90]._os_unfair_lock_opaque & 0x80000000) != 0)
  {
    BOOL v8 = @"calendar_id = ?1 AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = ?2) AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?2) AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = ?3 AND client_identifier = ?2)";
  }
  else
  {
    [@"calendar_id = ?1 AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = ?2) AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?2) AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = ?3 AND client_identifier = ?2)" stringByAppendingString:@" AND sequence_number <= ?"];
    BOOL v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v9 = (void *)_CalDatabaseCopyClientIdentifier((uint64_t)a1);
  int ID = CPRecordGetID();
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = __CalDatabaseCopyExceptionDateChangesInCalendar_block_invoke;
  v17[3] = &unk_1E5D6A050;
  int v20 = ID;
  id v11 = v9;
  id v18 = v11;
  uint64_t v19 = a1;
  BOOL v12 = (void *)MEMORY[0x1AD0E9DC0](v17);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v14 = RecordStore == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v6 = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithBindBlockAndProperties();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7);
  }
  os_unfair_lock_unlock(v7);

  return v6;
}

uint64_t __CalDatabaseCopyExceptionDateChangesInCalendar_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 48));
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 2, (const char *)[*(id *)(a1 + 32) UTF8String], -1, 0);
  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 3, 10);
  int v5 = *(_DWORD *)(*(void *)(a1 + 40) + 360);
  if ((v5 & 0x80000000) == 0)
  {
    uint64_t v6 = *(sqlite3_stmt **)(a2 + 8);
    return sqlite3_bind_int(v6, 4, v5);
  }
  return result;
}

CFComparisonResult _CompareExceptionDatesByDate(uint64_t a1, uint64_t a2)
{
  CFDateRef Date = (const __CFDate *)_CalExceptionDateGetDate(a1);
  CFDateRef v4 = (const __CFDate *)_CalExceptionDateGetDate(a2);
  if (Date && v4)
  {
    return CFDateCompare(Date, v4, 0);
  }
  else
  {
    if (v4) {
      uint64_t v6 = -1;
    }
    else {
      uint64_t v6 = 0;
    }
    if (Date) {
      return 1;
    }
    else {
      return v6;
    }
  }
}

CFComparisonResult _CompareExceptionDatesBySyncOrder(uint64_t a1, uint64_t a2)
{
  CFNumberRef ProviderIdentifier = (const __CFNumber *)_CalColorGetProviderIdentifier(a1);
  CFNumberRef v4 = (const __CFNumber *)_CalColorGetProviderIdentifier(a2);
  if (ProviderIdentifier && v4)
  {
    return CFNumberCompare(ProviderIdentifier, v4, 0);
  }
  else if (ProviderIdentifier)
  {
    return -1;
  }
  else
  {
    return (unint64_t)(v4 != 0);
  }
}

CFComparisonResult CompareExceptionDatesByDate(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFComparisonResult v5 = _CompareExceptionDatesByDate(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFComparisonResult CompareExceptionDatesBySyncOrder(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFComparisonResult v5 = _CompareExceptionDatesBySyncOrder(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFTypeRef _CalExceptionDateLoadStoreId(uint64_t a1)
{
  CFTypeRef result = _CalExceptionDateGetOwner(a1);
  if (result)
  {
    _CalCalendarItemGetStoreId((uint64_t)result);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

CFTypeRef _CalExceptionDateLoadCalendarId(uint64_t a1)
{
  CFTypeRef result = _CalExceptionDateGetOwner(a1);
  if (result)
  {
    _CalEventGetCalendarId((uint64_t)result);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

uint64_t _CalConferencePrepareForSave(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    return CalRelationOwnerWillSave(result);
  }
  return result;
}

void CalConferenceInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalConferenceClass, (const char **)&kCalConferenceIndexes, 0);
}

void CalConferenceMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 <= 15008) {
    CalMigrateTableFull(a2, (const char **)&kCalConferenceClass, 0, (const char **)&kCalConferenceUpgradeInfo, 0, (const char **)&kCalConferenceIndexes, 0, 0, a3);
  }
}

uint64_t CalConferenceGetPropertyIDWithPropertyName(void *key)
{
  if (CalConferenceGetPropertyIDWithPropertyName_onceToken != -1) {
    dispatch_once(&CalConferenceGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_18);
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalConferenceGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void __CalConferenceGetPropertyIDWithPropertyName_block_invoke()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = @"UUID";
  int v2 = 0;
  uint64_t v3 = @"owner";
  int v4 = 8;
  CFComparisonResult v5 = @"urlString";
  int v6 = 2;
  BOOL v7 = @"feature";
  int v8 = 3;
  uint64_t v9 = @"info";
  int v10 = 4;
  id v11 = @"language";
  int v12 = 5;
  CFIndex v13 = @"region";
  int v14 = 6;
  CalConferenceGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&v1, 7);
  for (uint64_t i = 96; i != -16; i -= 16)
}

void sub_1A8F1A7AC(_Unwind_Exception *a1)
{
  for (uint64_t i = 96; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalConferenceHasValidParent(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  CFTypeRef result = CalRelationGetRelatedObject(Property);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalConferenceCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

uint64_t _CalInvalidateConferencesWithOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalConferenceGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyConferenceWithUID(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  int v4 = (const void *)_CalConferenceGetWithUID(RecordStore);
  CFComparisonResult v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *_CalDatabaseCreateConference(uint64_t a1)
{
  int v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 23);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFStringRef v8 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = v2 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (CPRecordGetStore())
    {
      int v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v8);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateConference(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Conference = _CalDatabaseCreateConference((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Conference;
}

void *_CalRemoveConference(void *a1)
{
  CFTypeRef Owner = _CalConferenceGetOwner((uint64_t)a1);
  if (Owner)
  {
    return _CalCalendarItemRemoveConference((uint64_t)Owner, a1);
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return (void *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

CFTypeRef _CalConferenceGetOwner(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void CalRemoveConference(void *a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveConference(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalConferenceCopyOwner(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalConferenceGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetOwner(void *a1, uint64_t a2)
{
  CFTypeRef v4 = CalConferenceCopyOwner((uint64_t)a1);
  CFComparisonResult v5 = v4;
  if (v4 != (CFTypeRef)a2) {
    CalCalendarItemRemoveConference((uint64_t)v4, a1);
  }
  if (a2) {
    CalCalendarItemAddConference(a2, a1);
  }
  if (v5)
  {
    CFRelease(v5);
  }
}

void CalConferenceSetURL(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyURL(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetFeature(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyFeature(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetInfo(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyInfo(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetLanguage(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyLanguage(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetRegion(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyRegion(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalStoreInvalidateSubentities(uint64_t result, uint64_t a2, void *a3)
{
  if ((result & 0x80000000) == 0)
  {
    int v4 = result;
    uint64_t Store = CPRecordGetStore();
    uint64_t Context = CPRecordStoreGetContext();
    if (!*(unsigned char *)(Context + 382)) {
      _CalInvalidateCalendarsForStoreId(Store);
    }
    if (v4 == 1)
    {
      _CalStoreInsertNewLocal(a3);
      _CalCalendarInsertNewDefault(a3);
    }
    return _CalDatabaseSetDeletionFlags(Context, 1);
  }
  return result;
}

uint64_t _CalStorePrepareForSave(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (!CPRecordGetProperty())
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v3) {
            os_unfair_lock_assert_owner(v3 + 20);
          }
        }
      }
    }
    Originaluint64_t Property = CPRecordGetOriginalProperty();
    int ID = CPRecordGetID();
    BOOL v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v12[0] = 67109378;
      v12[1] = ID;
      __int16 v13 = 2112;
      uint64_t v14 = OriginalProperty;
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "Saving a store with no persistent ID (source identifier). int UID = %i, original persistent ID = %@", (uint8_t *)v12, 0x12u);
    }
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    _CalDatabaseIntegrityError(DatabaseForRecord, @"Store Without PersistentID");
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CalRelationOwnerWillSave(Property);
  }
  uint64_t result = _CalStoreDefaultAlarmChanges(a1);
  if (result)
  {
    _CalStoreUpdateAlarmCacheForDefaultAlarmChanges(a1, result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      id v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
    return CPRecordUnloadProperty();
  }
  return result;
}

void _CalStorePropertyChanged(uint64_t a1, int a2)
{
  if (_CalRecordHasValueChangedForProperty(a1, a2))
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    uint64_t v5 = DatabaseForRecord;
    switch(a2)
    {
      case 0:
      case 1:
      case 3:
      case 5:
      case 29:
        _CalDatabaseSetChangeFlags(DatabaseForRecord, 2);
        if (a2 != 4) {
          goto LABEL_10;
        }
        goto LABEL_4;
      case 2:
      case 31:
        _CalStoreDefaultMarkAlarmChange(a1);
        _CalDatabaseSetChangeFlags(v5, 2);
        if (!a1) {
          goto LABEL_15;
        }
        goto LABEL_11;
      case 4:
LABEL_4:
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context) {
                os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
        }
        CPRecordUnloadProperty();
        goto LABEL_10;
      case 7:
      case 8:
      case 24:
      case 25:
      case 28:
      case 30:
      case 34:
LABEL_10:
        if (a1)
        {
LABEL_11:
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v7) {
                os_unfair_lock_assert_owner(v7 + 20);
              }
            }
          }
        }
LABEL_15:
        CPRecordSetProperty();
        if (a2 == 5)
        {
          CFStringRef v8 = (const void *)_CalStoreCopyDelegatedAccountOwnerStoreID(a1);
          if (v8)
          {
            CFRelease(v8);
            if (_CalStoreDelegateToggled_onceToken != -1) {
              dispatch_once(&_CalStoreDelegateToggled_onceToken, &__block_literal_global_19);
            }
            BOOL v9 = [NSNumber numberWithInt:CPRecordGetID()];
            BOOL IsEnabled = _CalStoreIsEnabled(a1);
            id v11 = (id)_CalStoreDelegateToggled_storeIDsPendingCleanup;
            objc_sync_enter(v11);
            if (IsEnabled)
            {
              [(id)_CalStoreDelegateToggled_storeIDsPendingCleanup removeObject:v9];
              objc_sync_exit(v11);
            }
            else
            {
              int v13 = [(id)_CalStoreDelegateToggled_storeIDsPendingCleanup containsObject:v9];
              objc_sync_exit(v11);

              if ((v13 & 1) == 0)
              {
                id v14 = (id)_CalStoreDelegateToggled_storeIDsPendingCleanup;
                objc_sync_enter(v14);
                [(id)_CalStoreDelegateToggled_storeIDsPendingCleanup addObject:v9];
                objc_sync_exit(v14);

                uint64_t v15 = _CalStoreDelegateToggled_delegateDataCleanupQueue;
                block[0] = MEMORY[0x1E4F143A8];
                block[1] = 3221225472;
                block[2] = ___CalStoreDelegateToggled_block_invoke_2;
                block[3] = &unk_1E5D61100;
                id v17 = v9;
                dispatch_async(v15, block);
              }
            }
          }
        }
        break;
      case 20:
      case 21:
      case 32:
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              int v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v12) {
                os_unfair_lock_assert_owner(v12 + 20);
              }
            }
          }
        }
        CPRecordSetProperty();
        break;
      default:
        return;
    }
  }
}

void sub_1A8F1B9F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void CalStoreInitializeTables(uint64_t a1, void *a2, char a3)
{
  CPRecordStoreCreateTablesForClass();
  _CalAttachmentFileRegisterFunctions(a1, (uint64_t)a2);
  CalPerformSQLWithConnection(a2, @"CREATE INDEX StoreExternalId on Store(external_id)");
  _CalStoreInsertNewLocal(a2);
  uint64_t Context = CPRecordStoreGetContext();
  if (Context && !*(unsigned char *)(Context + 378))
  {
    if ((a3 & 1) == 0) {
      _CalStoreInsertNativeStore(a2);
    }
  }
  else
  {
    CalPerformSQLWithConnection(a2, @"DELETE FROM Store WHERE ROWint ID = 1");
  }
  CalPerformSQLWithConnection(a2, @"CREATE TRIGGER delete_store_members AFTER DELETE ON Store\nBEGIN\nDELETE FROM Calendar WHERE store_id = OLD.ROWID;\nDELETE FROM Error WHERE ROWint ID = OLD.error_id;\nEND;\n");
  CalPerformSQLWithConnection(a2, @"CREATE TRIGGER delete_store_changes AFTER DELETE ON Store\nBEGIN\nDELETE FROM CalendarChanges WHERE store_id = OLD.ROWID;DELETE FROM CalendarItemChanges WHERE store_id = OLD.ROWID;DELETE FROM AlarmChanges WHERE store_id = OLD.ROWID;DELETE FROM RecurrenceChanges WHERE store_id = OLD.ROWID;DELETE FROM ParticipantChanges WHERE store_id = OLD.ROWID;DELETE FROM AttachmentChanges WHERE store_id = OLD.ROWID;DELETE FROM ContactChanges WHERE store_id = OLD.ROWID;DELETE FROM EventActionChanges WHERE store_id = OLD.ROWID;DELETE FROM ExceptionDateChanges WHERE store_id = OLD.ROWID;DELETE FROM NotificationChanges WHERE store_id = OLD.ROWID;DELETE FROM ShareeChanges WHERE store_id = OLD.ROWID;DELETE FROM ClientCursor WHERE store_id = OLD.ROWID;\nEND;\n");
  CalPerformSQLWithConnection(a2, @"CREATE TRIGGER clean_attachments_store_deleted AFTER DELETE ON Store\nBEGIN\nSELECT CalNoteStoreDeleted(OLD.ROWID, OLD.external_id, OLD.persistent_id);\nEND;");
  CalMigrationCreateIndexes(a2, (const char **)&kCalStoreClass, 0, (const char **)&kCalStoreChangesIndexes);
}

void _CalStoreInsertNewLocal(void *a1)
{
  CFUUIDRef v2 = CFUUIDCreate(0);
  CFStringRef v3 = CFUUIDCreateString(0, v2);
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"INSERT INTO Store (ROWID, type, name, persistent_id, flags, flags2) VALUES (%d, 0, 'Default', '%@', %u, %u);",
         1,
         v3,
         268435457,
         32898);
  CalPerformSQLWithConnection(a1, (uint64_t)v4);
  CFRelease(v4);
  CFRelease(v3);
  CFRelease(v2);
}

void _CalStoreInsertNativeStore(void *a1)
{
  CFUUIDRef v2 = CFUUIDCreate(0);
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"INSERT INTO Store (type, name, persistent_id, flags) VALUES (%d, 'Other', '%@', %u);",
         5,
         @"______NativeStorePersistentID_______",
         4);
  CalPerformSQLWithConnection(a1, (uint64_t)v3);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(void *)(*a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(void *)(*a1 + 104))
        {
          uint64_t v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5) {
            os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
  }
  CPSqliteConnectionRowidOfLastInsert();
  CPSqliteConnectionSetIntegerForProperty();
  CFRelease(v3);
  CFRelease(v2);
}

void _CalStoreRepairDefaultLocalStore(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 378)) {
    return;
  }
  _CalDatabaseIntegrityError(a1, @"Local Store Not Local");
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (!RecordStore)
  {
    uint64_t v11 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v17 = 134217984;
    uint64_t v18 = a1;
    int v12 = "Error repairing local store, could not get record store from database %p";
    int v13 = v11;
    goto LABEL_24;
  }
  uint64_t v3 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database)
  {
    uint64_t v14 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v17 = 134217984;
    uint64_t v18 = v3;
    int v12 = "Error repairing local store, could not get sqlitedb from recordStore %p";
LABEL_23:
    int v13 = v14;
LABEL_24:
    uint32_t v15 = 12;
    goto LABEL_25;
  }
  uint64_t v6 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  uint64_t v8 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!v8)
  {
    uint64_t v14 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v17 = 134217984;
    uint64_t v18 = v3;
    int v12 = "Error repairing local store, could not get coonnection from sqlitedb %p";
    goto LABEL_23;
  }
  BOOL v9 = (void *)v8;
  if (!__CalDatabaseBeginWriteTransaction(a1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:449"))
  {
    uint64_t v16 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(v17) = 0;
    int v12 = "Error repairing local store, could not start a transaction";
    int v13 = v16;
    uint32_t v15 = 2;
LABEL_25:
    _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v17, v15);
    return;
  }
  if (_CalStoreVerifyAndRepairLocalStore(a1, v9))
  {
    __CalDatabaseCommitTransaction(a1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:455");
    int v10 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_DEFAULT, "Flushing change in-memory change tracking and posting a database change notification because we just repaired the local store", (uint8_t *)&v17, 2u);
    }
    _CalDatabaseNoteUntrackedChange(a1);
  }
  else
  {
    __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:460");
  }
  _CalDatabaseReportIntegrityErrors(v6);
}

uint64_t _CalStoreVerifyAndRepairLocalStore(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 378)) {
    return 0;
  }
  uint64_t v3 = objc_msgSend(NSString, "stringWithFormat:", @"SELECT type FROM Store WHERE ROWID = %i", 1);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        if (*(void *)(*a2 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v5 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (!v5)
  {
    uint64_t v11 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int buf = 138543362;
      *(void *)buf_4 = v3;
      _os_log_impl(&dword_1A8E81000, v11, OS_LOG_TYPE_ERROR, "Failed to create statement from SQL \"%{public}@\".", (uint8_t *)&buf, 0xCu);
    }

    return 0;
  }
  uint64_t v6 = v5;
  *(_DWORD *)uint64_t v16 = 0;
  if (CDBLockingAssertionsEnabled)
  {
    if (*v5)
    {
      uint64_t v7 = **v5;
      if (v7)
      {
        if (*(void *)(v7 + 104))
        {
          uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementIntegerResult();
  if (CDBLockingAssertionsEnabled)
  {
    if (*v6)
    {
      uint64_t v9 = **v6;
      if (v9)
      {
        if (*(void *)(v9 + 104))
        {
          int v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  int v13 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    int buf = 67109120;
    *(_DWORD *)buf_4 = *(_DWORD *)v16;
    _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Migration didn't find the default local store (sqlite returned %i). Inserting a new default local store.", (uint8_t *)&buf, 8u);
  }

  _CalStoreInsertNewLocal(a2);
  return 1;
}

void CalStoreRepairDefaultLocalStore(os_unfair_lock_s *a1)
{
  CFUUIDRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalStoreRepairDefaultLocalStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

void CalStoreMigrateTables(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if ((int)a3 <= 6)
  {
    CalStoreInitializeTables(a1, a2, 1);
    goto LABEL_3;
  }
  if (a3 > 0x426C) {
    goto LABEL_76;
  }
  if (a3 <= 0xC) {
    CalPerformSQLWithConnection(a2, @"DROP TABLE StoreChanges;");
  }
  CalPerformSQLWithConnection(a2, @"DROP TRIGGER IF EXISTS delete_store_members;");
  CalPerformSQLWithConnection(a2, @"DROP TRIGGER IF EXISTS delete_store_changes;");
  CalPerformSQLWithConnection(a2, @"DROP TRIGGER IF EXISTS clean_attachments_store_deleted;");
  CalPerformSQLWithConnection(a2, @"ALTER TABLE Store RENAME TO Store_;");
  CalPerformSQLWithConnection(a2, @"ALTER TABLE StoreChanges RENAME TO StoreChanges_;");
  CPRecordStoreCreateTablesForClass();
  CalPerformSQLWithConnection(a2, @"CREATE TRIGGER delete_store_members AFTER DELETE ON Store\nBEGIN\nDELETE FROM Calendar WHERE store_id = OLD.ROWID;\nDELETE FROM Error WHERE ROWint ID = OLD.error_id;\nEND;\n");
  CalPerformSQLWithConnection(a2, @"CREATE TRIGGER delete_store_changes AFTER DELETE ON Store\nBEGIN\nDELETE FROM CalendarChanges WHERE store_id = OLD.ROWID;DELETE FROM CalendarItemChanges WHERE store_id = OLD.ROWID;DELETE FROM AlarmChanges WHERE store_id = OLD.ROWID;DELETE FROM RecurrenceChanges WHERE store_id = OLD.ROWID;DELETE FROM ParticipantChanges WHERE store_id = OLD.ROWID;DELETE FROM AttachmentChanges WHERE store_id = OLD.ROWID;DELETE FROM ContactChanges WHERE store_id = OLD.ROWID;DELETE FROM EventActionChanges WHERE store_id = OLD.ROWID;DELETE FROM ExceptionDateChanges WHERE store_id = OLD.ROWID;DELETE FROM NotificationChanges WHERE store_id = OLD.ROWID;DELETE FROM ShareeChanges WHERE store_id = OLD.ROWID;DELETE FROM ClientCursor WHERE store_id = OLD.ROWID;\nEND;\n");
  CalPerformSQLWithConnection(a2, @"CREATE TRIGGER clean_attachments_store_deleted AFTER DELETE ON Store\nBEGIN\nSELECT CalNoteStoreDeleted(OLD.ROWID, OLD.external_id, OLD.persistent_id);\nEND;");
  if (a3 - 16001 <= 0x1F)
  {
    if (!*(unsigned char *)(CPRecordStoreGetContext() + 378))
    {
      *(void *)int buf = 0;
      int v59 = buf;
      uint64_t v60 = 0x3032000000;
      id v61 = __Block_byref_object_copy__0;
      uint64_t v62 = __Block_byref_object_dispose__0;
      id v63 = 0;
      uint64_t v52 = 0;
      int v53 = &v52;
      uint64_t v54 = 0x3032000000;
      id v55 = __Block_byref_object_copy__0;
      id v56 = __Block_byref_object_dispose__0;
      id v57 = 0;
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a2)
          {
            if (*(void *)(*a2 + 104))
            {
              uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context) {
                os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
        }
      }
      uint64_t v17 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      v51[0] = MEMORY[0x1E4F143A8];
      v51[1] = 3221225472;
      v51[2] = ___CalStoreMigrateStoreTableData_block_invoke;
      v51[3] = &unk_1E5D6AB10;
      v51[4] = buf;
      v51[5] = &v52;
      CalSendResults(v17, v51);
      uint64_t v18 = *((void *)v59 + 5);
      if (v18) {
        CalAlarmSetDefaultTimedAlarmOffset(v18);
      }
      uint64_t v19 = v53[5];
      if (v19) {
        CalAlarmSetDefaultAllDayAlarmOffset(v19);
      }
      CalPerformSQLWithConnection(a2, @"UPDATE Store_ SET default_alarm_offset=NULL, default_all_day_alarm_offset=NULL WHERE ROWint ID = 1 OR external_id=\"Subscribed Calendars\"");
      _Block_object_dispose(&v52, 8);

      _Block_object_dispose(buf, 8);
    }
    int v20 = objc_msgSend(@"ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications, flags2", "mutableCopy");
    [v20 appendString:@", display_order"];
    [v20 appendString:@", owner_name"];
    goto LABEL_45;
  }
  if (a3 < 0x24)
  {
    int v24 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, NULL, type, constraint_path, disabled, external_id, NULL, NULL, NULL, NULL, 0, NULL, 0, 0 FROM Store_;";
LABEL_70:
    CalPerformSQLWithConnection(a2, (uint64_t)v24);
    __int16 v23 = objc_msgSend(@"record, type, sequence_number", "mutableCopy");
    goto LABEL_71;
  }
  if (a3 < 0x33)
  {
    int v24 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, NULL, type, constraint_path, disabled, external_id, persistent_id, NULL, NULL, NULL, 0, NULL, 0, 0 FROM Store_;";
    goto LABEL_70;
  }
  if (a3 < 0x44)
  {
    int v24 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, NULL, NULL, NULL, 0, NULL, 0, 0 FROM Store_;";
    goto LABEL_70;
  }
  if (a3 < 0x70)
  {
    int v24 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, NULL, NULL, 0, NULL, 0, 0 FROM Store_;";
    goto LABEL_70;
  }
  if (a3 < 0x80)
  {
    int v24 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, 0, 0 FROM Store_;";
    goto LABEL_70;
  }
  if (a3 < 0x85)
  {
    int v24 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, 0 FROM Store_;";
    goto LABEL_70;
  }
  if (a3 < 0x2AFD)
  {
    int v24 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value FROM Store_;";
    goto LABEL_70;
  }
  if (a3 < 0x2EE2)
  {
    CFIndex v49 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end FROM Store_;";
LABEL_141:
    CalPerformSQLWithConnection(a2, (uint64_t)v49);
    BOOL v22 = @"INSERT INTO Error (store_owner_id, error_code) SELECT ROWID, last_sync_error FROM Store_ WHERE last_sync_error != 0";
    goto LABEL_52;
  }
  if (a3 >> 3 < 0x5DD)
  {
    CFIndex v49 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id FROM Store_;";
    goto LABEL_141;
  }
  if (a3 == 12008)
  {
    CFIndex v49 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id FROM Store_;";
    goto LABEL_141;
  }
  if (a3 < 0x2EEA)
  {
    CFIndex v49 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications FROM Store_;";
    goto LABEL_141;
  }
  if (a3 < 0x36B1)
  {
    CFIndex v49 = @"INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications, flags2) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications, flags2 FROM Store_;";
    goto LABEL_141;
  }
  uint64_t v50 = objc_msgSend(@"ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications, flags2", "mutableCopy");
  int v20 = v50;
  if (a3 >= 0x3A99)
  {
    [v50 appendString:@", display_order"];
    if (a3 >= 0x3A9E)
    {
      [v20 appendString:@", owner_name"];
      if (a3 >> 2 >= 0xEA9)
      {
LABEL_45:
        [v20 appendString:@", default_all_day_alarm_offset"];
        if (a3 >= 0x3E85)
        {
          [v20 appendString:@", error_id"];
          if (a3 >> 3 >= 0x7D1)
          {
            [v20 appendString:@", notes"];
            if (a3 >= 0x3E9D)
            {
              [v20 appendString:@", cached_external_info"];
              if (a3 >= 0x4269) {
                [v20 appendString:@", app_group_id"];
              }
            }
          }
        }
      }
    }
  }
  uint64_t v21 = objc_msgSend(NSString, "stringWithFormat:", @"INSERT INTO Store (%@) SELECT %@ FROM Store_;",
          v20,
          v20);

  CalPerformSQLWithConnection(a2, v21);
  if (a3 >= 0x3E85)
  {
    __int16 v23 = objc_msgSend(@"record, type, sequence_number", "mutableCopy");
    goto LABEL_57;
  }
  BOOL v22 = @"INSERT INTO Error (store_owner_id, error_code, user_info) SELECT ROWID, last_sync_error, last_sync_error_data FROM Store_ WHERE last_sync_error != 0";
LABEL_52:
  CalPerformSQLWithConnection(a2, (uint64_t)v22);
  CalPerformSQLWithConnection(a2, @"UPDATE Store SET error_id = (SELECT ROWID FROM Error WHERE store_owner_id = Store.ROWID)");
  __int16 v23 = objc_msgSend(@"record, type, sequence_number", "mutableCopy");
  if (a3 >> 2 >= 0xEA9)
  {
LABEL_57:
    [v23 appendString:@", default_alarm_offset"];
    [v23 appendString:@", default_all_day_alarm_offset"];
  }
LABEL_71:
  objc_msgSend(NSString, "stringWithFormat:", @"INSERT INTO StoreChanges (%@) SELECT %@ FROM StoreChanges_;",
    v23,
  uint64_t v25 = v23);
  CalPerformSQLWithConnection(a2, (uint64_t)v25);

  CalPerformSQLWithConnection(a2, @"DROP TABLE Store_;");
  CalPerformSQLWithConnection(a2, @"DROP TABLE StoreChanges_;");
  if (a3 <= 0x23)
  {
LABEL_3:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(void *)(*a2 + 104))
          {
            uint64_t v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5) {
              os_unfair_lock_assert_owner(v5 + 20);
            }
          }
        }
      }
    }
    uint64_t v6 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (v6)
    {
      *(_DWORD *)int buf = 0;
      do
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v6)
          {
            uint64_t v7 = **v6;
            if (v7)
            {
              if (*(void *)(v7 + 104))
              {
                uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v8) {
                  os_unfair_lock_assert_owner(v8 + 20);
                }
              }
            }
          }
        }
        uint64_t v9 = CPSqliteStatementIntegerResult();
        if (*(_DWORD *)buf != 100) {
          break;
        }
        uint64_t v10 = v9;
        CFUUIDRef v11 = CFUUIDCreate(0);
        CFStringRef v12 = CFUUIDCreateString(0, v11);
        CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"UPDATE Store SET persistent_id=\"%@\" WHERE rowid = %d;",
                v12,
                v10);
        CFRelease(v12);
        CFRelease(v11);
        CalPerformSQLWithConnection(a2, (uint64_t)v13);
        CFRelease(v13);
      }
      while (*(_DWORD *)buf == 100);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v6)
        {
          uint64_t v14 = **v6;
          if (v14)
          {
            if (*(void *)(v14 + 104))
            {
              uint32_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15) {
                os_unfair_lock_assert_owner(v15 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if ((int)a3 <= 31) {
      _CalStoreInsertNativeStore(a2);
    }
  }
  if (a3 - 7 <= 0x20)
  {
    CalPerformSQLWithConnection(a2, @"DELETE FROM Calendar WHERE rowid NOT IN (SELECT Calendar.rowid FROM Calendar, Store WHERE Calendar.store_id = Store.rowid);");
LABEL_75:
    CalPerformSQLWithConnection(a2, @"UPDATE Store SET constraint_path = NULL WHERE rowid = 1");
    goto LABEL_76;
  }
  if ((int)a3 <= 66) {
    goto LABEL_75;
  }
LABEL_76:
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        if (*(void *)(*a2 + 104))
        {
          CFTypeRef v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v26) {
            os_unfair_lock_assert_owner(v26 + 20);
          }
        }
      }
    }
  }
  uint64_t v27 = CPSqliteConnectionIntegerForProperty();
  if ((int)v27 >= 1)
  {
    CFStringRef v28 = CFStringCreateWithFormat(0, 0, @"UPDATE Store SET flags = %u WHERE ROWID = %d;", 4, v27);
    if (v28)
    {
      CalPerformSQLWithConnection(a2, (uint64_t)v28);
      CFRelease(v28);
    }
  }
  CFStringRef v29 = CFStringCreateWithFormat(0, 0, @"UPDATE Store SET flags = (IFNULL(flags,0) & %u) | %u WHERE ROWID = %d;",
          2,
          0x10000000,
          1);
  if (v29)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)v29);
    CFRelease(v29);
  }
  CFStringRef v30 = CFStringCreateWithFormat(0, 0, @"UPDATE Store SET flags2 = %u WHERE ROWID = %d;", 32898, 1);
  if (v30)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)v30);
    CFRelease(v30);
  }
  int v31 = objc_msgSend(NSString, "stringWithFormat:", @"UPDATE Store SET flags = %u WHERE type = %d AND ROWID != %d", 268435457, 0, 1);
  CalPerformSQLWithConnection(a2, (uint64_t)v31);
  int v32 = objc_msgSend(NSString, "stringWithFormat:", @"UPDATE Store SET flags2 = %u WHERE type = %d AND ROWID != %d", 32898, 0, 1);
  CalPerformSQLWithConnection(a2, (uint64_t)v32);
  if ((int)a3 <= 91) {
    CalPerformSQLWithConnection(a2, @"CREATE INDEX StoreExternalId on Store(external_id)");
  }
  CFStringRef v33 = CFStringCreateWithFormat(0, 0, @"SELECT COUNT(rowid) from Store WHERE type = %i;", 5);
  BOOL v34 = a2 == 0;
  if (!CDBLockingAssertionsEnabled) {
    BOOL v34 = 1;
  }
  if (!v34)
  {
    if (*a2)
    {
      if (*(void *)(*a2 + 104))
      {
        id v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35) {
          os_unfair_lock_assert_owner(v35 + 20);
        }
      }
    }
  }
  uint64_t v36 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  CFTimeZoneRef v37 = v36;
  if (v36)
  {
    LODWORD(v52) = 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v36)
      {
        uint64_t v38 = **v36;
        if (v38)
        {
          if (*(void *)(v38 + 104))
          {
            double v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v39) {
              os_unfair_lock_assert_owner(v39 + 20);
            }
          }
        }
      }
    }
    int v40 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v37)
      {
        uint64_t v41 = **v37;
        if (v41)
        {
          if (*(void *)(v41 + 104))
          {
            int v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v42) {
              os_unfair_lock_assert_owner(v42 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (v52 == 100 && v40 >= 2)
    {
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a2)
          {
            if (*(void *)(*a2 + 104))
            {
              uint64_t v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v43) {
                os_unfair_lock_assert_owner(v43 + 20);
              }
            }
          }
        }
      }
      uint64_t v44 = CPSqliteConnectionIntegerForProperty();
      uint64_t v45 = (id)CDBLogHandle;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v40;
        LOWORD(v59) = 1024;
        *(_DWORD *)((char *)&v59 + 2) = v44;
        _os_log_impl(&dword_1A8E81000, v45, OS_LOG_TYPE_ERROR, "Found %i native stores.  Deleting all but store ID %i.", buf, 0xEu);
      }

      CFStringRef v46 = CFStringCreateWithFormat(0, 0, @"DELETE FROM Store WHERE type = %i AND rowid != %i", 5, v44);
      if (v46)
      {
        CalPerformSQLWithConnection(a2, (uint64_t)v46);
        CFRelease(v46);
      }
    }
  }
  if (v33) {
    CFRelease(v33);
  }
  if ((int)a3 <= 15010)
  {
    CFStringRef v47 = CFStringCreateWithFormat(0, 0, @"UPDATE Store SET persistent_id = '%@' WHERE type = %i;",
            @"______NativeStorePersistentID_______",
            5);
    if (v47)
    {
      CalPerformSQLWithConnection(a2, (uint64_t)v47);
      CFRelease(v47);
    }
    goto LABEL_129;
  }
  if (a3 <= 0x4651) {
LABEL_129:
  }
    CalMigrationCreateIndexes(a2, (const char **)&kCalStoreClass, 0, (const char **)&kCalStoreChangesIndexes);
  uint64_t v48 = CPRecordStoreGetContext();
  _CalStoreVerifyAndRepairLocalStore(v48, a2);
}

void sub_1A8F1D198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyStoreChangesInStore(const void *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    CFStringRef v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    uint64_t v5 = v4 + 20;
    os_unfair_lock_lock(v4 + 20);
    CFTypeRef v6 = _CalDatabaseCopyClientIdentifier((uint64_t)v4);
    uint64_t ID = CPRecordGetID();
    CFStringRef v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"record = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN     (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN     (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v6, v6, 6, v6);
    CFRelease(v6);
  }
  else
  {
    CFStringRef v4 = (os_unfair_lock_s *)CFRetain(a1);
    uint64_t v5 = v4 + 20;
    os_unfair_lock_lock(v4 + 20);
    CFStringRef v17 = 0;
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase((uint64_t)v4, (id *)&v17);
  CFStringRef v8 = v17;
  CFStringRef v17 = 0;
  if (!a3)
  {
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v10 = Mutable;
    *a3 = Mutable;
LABEL_8:
    uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)v4);
    if (CDBLockingAssertionsEnabled) {
      BOOL v12 = RecordStore == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t v14 = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
    if (v8) {
      CFRelease(v8);
    }
    CFStringRef v15 = v17;
    if (v17)
    {
      if (v10)
      {
        CFDictionaryAddValue(v10, @"ID", v17);
        CFStringRef v15 = v17;
      }
      CFRelease(v15);
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v5);
    }
    os_unfair_lock_unlock(v5);
    CFRelease(v4);
    return v14;
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0xFFFFFFFFLL;
}

void _CalStoreUpdateAlarmCacheForDefaultAlarmChanges(uint64_t a1, uint64_t a2)
{
  if (CPRecordGetStore())
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context)
    {
      uint64_t v5 = _CalDatabaseCopyEventOccurrenceCache(Context);
      if (v5)
      {
        CFTypeRef v6 = (const void *)v5;
        _CalEventOccurrenceCacheMarkStoreForDefaultAlarmChanges(v5, a1, a2);
        CFRelease(v6);
      }
    }
  }
}

void _CalStoreDeleteDisabledDelegateData()
{
  uint64_t v0 = (os_unfair_lock_s *)CalDatabaseCreateWithOptions(20);
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v0 = (os_unfair_lock_s *)CalDatabaseCopyStoreWithUID(v0);
    if (!v0)
    {
      CFArrayRef v5 = (const __CFArray *)v1;
LABEL_14:
      CFUUIDRef v11 = v0;
      CFRelease(v5);
      uint64_t v0 = v11;
      goto LABEL_15;
    }
    CFUUIDRef v2 = v0;
    uint64_t v3 = (const void *)CalStoreCopyExternalID((uint64_t)v0);
    if (v3)
    {
      uint64_t v10 = [NSString stringWithFormat:@"com.apple.dataaccessd-%@", v3];
      CalDatabaseSetClientIdentifier((uint64_t)v1, v10);
      CFArrayRef v4 = CalStoreCopyCalendars((uint64_t)v2);
      CFArrayRef v5 = v4;
      if (v4)
      {
        CFIndex Count = CFArrayGetCount(v4);
        if (Count >= 1)
        {
          CFIndex v7 = Count;
          for (CFIndex i = 0; i != v7; ++i)
          {
            CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v5, i);
            CalRemoveCalendar(ValueAtIndex);
          }
        }
        CalStoreSetExternalModificationTag((uint64_t)v2);
        CalStoreSetLastSyncStartTime((uint64_t)v2);
        CalStoreSetLastSyncEndTime((uint64_t)v2);
        CalDatabaseSave((uint64_t)v1);
      }
    }
    else
    {
      uint64_t v10 = 0;
      CFArrayRef v5 = 0;
    }
    CFRelease(v1);
    CFRelease(v2);
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v0 = v10;
    if (v5) {
      goto LABEL_14;
    }
  }
LABEL_15:
}

uint64_t CalStoreCopyExternalID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetExternalModificationTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetLastSyncStartTime(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetLastSyncEndTime(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalStoreHasDirtyInstanceAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL _CalStoreHasDirtySyncAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalStoreClearDirtyAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordUnloadProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3) {
          os_unfair_lock_assert_owner(v3 + 20);
        }
      }
    }
  }
  return CPRecordUnloadProperty();
}

uint64_t _CalStoreSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalDatabaseCreateLimitedAccessVirtualStore()
{
  uint64_t v0 = CPRecordCreateWithRecordID();
  uint64_t v1 = v0;
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = v0 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      CFArrayRef v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5) {
        os_unfair_lock_assert_owner(v5 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v1 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      CFIndex v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v1 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  LimitedAccessVirtualRecordIDForEntity = (const void *)_CalDatbaseCreateLimitedAccessVirtualRecordIDForEntity(6);
  if (CDBLockingAssertionsEnabled)
  {
    if (v1)
    {
      if (CPRecordGetStore())
      {
        CFUUIDRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(LimitedAccessVirtualRecordIDForEntity);
  return v1;
}

uint64_t _CalDatabaseGetLimitedAccessVirtualStore(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (!result)
  {
    uint64_t result = _CalDatabaseCreateLimitedAccessVirtualStore();
    *(void *)(a1 + 56) = result;
  }
  return result;
}

const void *CalDatabaseCopyLimitedAccessVirtualStore(uint64_t a1)
{
  BOOL v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  LimitedAccessVirtualuint64_t Store = *(const void **)(a1 + 56);
  if (LimitedAccessVirtualStore
    || (LimitedAccessVirtualuint64_t Store = (const void *)_CalDatabaseCreateLimitedAccessVirtualStore(),
        (*(void *)(a1 + 56) = LimitedAccessVirtualStore) != 0))
  {
    CFRetain(LimitedAccessVirtualStore);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return LimitedAccessVirtualStore;
}

const void *_CalDatabaseCreateStore(uint64_t a1)
{
  BOOL v2 = (const void *)CPRecordCreate();
  CFUUIDRef v3 = CFUUIDCreate(0);
  CFStringRef v4 = CFUUIDCreateString(0, v3);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v4);
  CFRelease(v3);
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 6);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v2 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  _CalDatabaseSetChangeFlags(a1, 2);
  uint64_t v10 = *(const void **)(a1 + 96);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 96) = 0;
  }
  return v2;
}

const void *CalDatabaseCreateStore(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t Store = _CalDatabaseCreateStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Store;
}

const void *CalDatabaseCopyLocalStore(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 378)) {
    return 0;
  }
  CFStringRef v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v1 = _CalDatabaseCopyStoreWithUID(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  if (!CalStoreGetType((uint64_t)v1)) {
    return v1;
  }
  CalStoreRepairDefaultLocalStore((os_unfair_lock_s *)a1);
  CFRelease(v1);
  return CalDatabaseCopyStoreWithUID((os_unfair_lock_s *)a1);
}

const void *CalDatabaseCopySubscribedCalendarStore(os_unfair_lock_s *a1)
{
  return CalDatabaseCopySubscribedCalendarStoreCore(a1, 0, 0);
}

const void *CalDatabaseCopySubscribedCalendarStoreCore(os_unfair_lock_s *a1, int a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFArrayRef v6 = (const __CFArray *)CalDatabaseCopyStoresWithExternalID(a1, @"Subscribed Calendars");
  if (v6)
  {
    CFArrayRef v7 = v6;
    CFIndex Count = CFArrayGetCount(v6);
    if (Count < 2)
    {
      if (Count == 1)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
        if (!ValueAtIndex) {
          goto LABEL_27;
        }
        goto LABEL_23;
      }
    }
    else
    {
      CFIndex v9 = CFArrayGetCount(v7);
      if (v9 >= 1)
      {
        CFIndex v10 = v9;
        CFNumberRef ValueAtIndex = 0;
        CFIndex v12 = 0;
        int v13 = 0x7FFFFFFF;
        do
        {
          uint64_t v14 = CFArrayGetValueAtIndex(v7, v12);
          int UID = CalStoreGetUID();
          if (UID < v13)
          {
            CFNumberRef ValueAtIndex = v14;
            int v13 = UID;
          }
          ++v12;
        }
        while (v10 != v12);
        if (ValueAtIndex)
        {
          uint64_t v16 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 134218240;
            CFIndex v28 = v10;
            __int16 v29 = 1024;
            int v30 = v13;
            _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_ERROR, "Found %li subscribed calendar stores. Keeping store with ID %i and deleting the rest.", buf, 0x12u);
          }
          for (CFIndex i = 0; i != v10; ++i)
          {
            uint64_t v18 = CFArrayGetValueAtIndex(v7, i);
            if (v18 != ValueAtIndex)
            {
              uint64_t v19 = (void *)CalStoreCopyName((uint64_t)v18);
              int v20 = (void *)CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v21 = v20;
                int v22 = CalStoreGetUID();
                *(_DWORD *)int buf = 138412546;
                CFIndex v28 = (CFIndex)v19;
                __int16 v29 = 1024;
                int v30 = v22;
                _os_log_impl(&dword_1A8E81000, v21, OS_LOG_TYPE_DEFAULT, "Deleting duplicate subscribed calendar store: %@ (%i)", buf, 0x12u);
              }
              CalRemoveStore();
            }
          }
          if (a3) {
            CalDatabaseSave((uint64_t)a1);
          }
LABEL_23:
          CFRetain(ValueAtIndex);
          goto LABEL_27;
        }
      }
      __int16 v23 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1A8E81000, v23, OS_LOG_TYPE_ERROR, "Didn't find any store at all when trying to clean up duplicates.", buf, 2u);
      }
    }
    CFNumberRef ValueAtIndex = 0;
LABEL_27:
    CFRelease(v7);
    if (ValueAtIndex) {
      return ValueAtIndex;
    }
    goto LABEL_28;
  }
  CFNumberRef ValueAtIndex = 0;
LABEL_28:
  if (a2)
  {
    int v24 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_DEFAULT, "Subscribed calendar store not found. Creating one now", buf, 2u);
    }
    CFNumberRef ValueAtIndex = CalDatabaseCreateStore(a1);
    CalStoreSetExternalID((uint64_t)ValueAtIndex);
    CalStoreSetType((uint64_t)ValueAtIndex);
    CalStoreSetName((uint64_t)ValueAtIndex);
    if (a3 && (CalDatabaseSave((uint64_t)a1) & 1) == 0)
    {
      uint64_t v25 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1A8E81000, v25, OS_LOG_TYPE_ERROR, "Failed to save database after creating subscribed calendar store", buf, 2u);
      }
      CFRelease(ValueAtIndex);
      return 0;
    }
  }
  return ValueAtIndex;
}

const void *CalDatabaseCopySubscribedCalendarStoreCreateIfNeeded(os_unfair_lock_s *a1, int a2)
{
  return CalDatabaseCopySubscribedCalendarStoreCore(a1, 1, a2);
}

void _CalRemoveStore()
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  uint64_t RecordStore = _CalDatabaseGetRecordStore(DatabaseForRecord);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreRemoveRecord();
  _CalDatabaseSetDeletionFlags(DatabaseForRecord, 1);
  _CalDatabaseSetChangeFlags(DatabaseForRecord, 2);
  CFStringRef v4 = *(const void **)(DatabaseForRecord + 96);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DatabaseForRecord + 96) = 0;
  }
}

void CalRemoveStore()
{
  uint64_t v0 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  uint64_t v1 = v0 + 20;
  os_unfair_lock_lock(v0 + 20);
  _CalRemoveStore();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v1);
  }
  os_unfair_lock_unlock(v1);
  CFRelease(v0);
}

CFTypeRef _CalStoreCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  CFTypeRef cf = 0;
  CFArrayRef v6 = _CalStoreCopyCalendars(a2);
  if (v6)
  {
    CFArrayRef v7 = v6;
    CalDatabaseAddChangesToArray(&cf, v6, a3);
    CFIndex Count = CFArrayGetCount(v7);
    if (Count)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 0; i != v9; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
        CFArrayRef v12 = (const __CFArray *)_CalCalendarCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)ValueAtIndex, a3);
        if (v12)
        {
          CFArrayRef v13 = v12;
          CalDatabaseAddChangesToArray(&cf, v12, a3);
          CFRelease(v13);
        }
        else
        {
          if (*a3) {
            BOOL v14 = cf == 0;
          }
          else {
            BOOL v14 = 1;
          }
          if (!v14)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
        }
      }
    }
    CFRelease(v7);
  }
  CFTypeRef Error = _CalStoreGetError(a2);
  if (Error) {
    CalDatabaseAddChangeToArray(&cf, Error, a3);
  }
  return cf;
}

CFTypeRef _CalStoreGetError(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void CalStoreSetName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetNotes(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyNotes(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetDefaultAlarmOffset(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreCopyDefaultAlarmOffset(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalStoreCopyDefaultAlarmOffset(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalStoreCopyDefaultAlarmOffset(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalStoreSetDefaultAllDayAlarmOffset(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreCopyDefaultAllDayAlarmOffset(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalStoreCopyDefaultAllDayAlarmOffset(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalStoreCopyDefaultAllDayAlarmOffset(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t CalStoreGetDefaultAlarmOffsetNSInteger(uint64_t a1)
{
  uint64_t v1 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t valuePtr = 0x7FFFFFFFFFFFFFFFLL;
  CFNumberRef v2 = (const __CFNumber *)CalStoreCopyDefaultAlarmOffset(a1);
  if (v2)
  {
    CFNumberRef v3 = v2;
    CFNumberGetValue(v2, kCFNumberLongType, &valuePtr);
    CFRelease(v3);
    return valuePtr;
  }
  return v1;
}

uint64_t CalStoreGetDefaultAllDayAlarmOffsetNSInteger(uint64_t a1)
{
  uint64_t v1 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t valuePtr = 0x7FFFFFFFFFFFFFFFLL;
  CFNumberRef v2 = (const __CFNumber *)CalStoreCopyDefaultAllDayAlarmOffset(a1);
  if (v2)
  {
    CFNumberRef v3 = v2;
    CFNumberGetValue(v2, kCFNumberLongType, &valuePtr);
    CFRelease(v3);
    return valuePtr;
  }
  return v1;
}

uint64_t _CalStoreSetType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalStoreSetType(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetType(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreGetPreferredEventPrivateValue(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalStoreSetPreferredEventPrivateValue(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreSetStrictestEventPrivateValue(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalStoreSetStrictestEventPrivateValue(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetStrictestEventPrivateValue(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetDelegatedAccountOwnerStoreID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalStoreIsDelegate(uint64_t a1)
{
  uint64_t v1 = (const void *)_CalStoreCopyDelegatedAccountOwnerStoreID(a1);
  CFNumberRef v2 = v1;
  if (v1) {
    CFRelease(v1);
  }
  return v2 != 0;
}

BOOL CalStoreIsDelegate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFNumberRef v3 = (const void *)_CalStoreCopyDelegatedAccountOwnerStoreID(a1);
  uint64_t v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4 != 0;
}

void CalStoreSetDelegatedAccountDefaultCalendarForNewEvents(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalRelationSetRelatedObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalStoreCopyDelegatedAccountDefaultCalendarForNewEvents(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property)
  {
    CFTypeRef RelatedObject = CalRelationGetRelatedObject(Property);
    CFTypeRef v6 = RelatedObject;
    if (RelatedObject) {
      CFRetain(RelatedObject);
    }
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

void *_CalStoreSetError(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalStoreSetError(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetError(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalStoreCopyError(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Error = _CalStoreGetError(a1);
  if (Error) {
    CFTypeRef v4 = CFRetain(Error);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalStoreGetAppGroupIdentifier(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef CalStoreCopyAppGroupIdentifier(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  AppGroupIdentifier = (const void *)_CalStoreGetAppGroupIdentifier(a1);
  if (AppGroupIdentifier) {
    CFTypeRef v4 = CFRetain(AppGroupIdentifier);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetEnabled(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalStoreIsEnabled(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsEnabled = _CalStoreIsEnabled(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsEnabled;
}

void CalStoreSetOnlyCreatorCanModify(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalStoreOnlyCreatorCanModify(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void CalStoreSetShowsNotifications(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetDisplayOrder(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreGetDisplayOrder(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalStoreSetOwnerName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyOwnerName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

id CalStoreCopyCachedExternalInfo(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = (void *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  if (v4)
  {
    id v14 = 0;
    BOOL v5 = [MEMORY[0x1E4F28F98] propertyListWithData:v4 options:0 format:0 error:&v14];
    id v6 = v14;
    if (v5)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v7 = v5;
LABEL_18:

        goto LABEL_19;
      }
      CFIndex v9 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        CFIndex v10 = v9;
        CFUUIDRef v11 = objc_opt_class();
        *(_DWORD *)int buf = 138543362;
        id v16 = v11;
        id v12 = v11;
        _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_ERROR, "Deserialized data wasn't a dictionary (it was a %{public}@", buf, 0xCu);
      }
    }
    else
    {
      BOOL v8 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412290;
        id v16 = v6;
        _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_ERROR, "Error deserializing cached external store info: %@", buf, 0xCu);
      }
    }
    id v7 = 0;
    goto LABEL_18;
  }
  id v7 = 0;
LABEL_19:

  return v7;
}

void CalStoreSetCachedExternalInfo(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v12 = 0;
    uint64_t v4 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v3 format:200 options:0 error:&v12];
    id v5 = v12;
    if (!v4)
    {
      id v6 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412290;
        id v14 = v5;
        _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "Couldn't serialize external info: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  unint64_t v9 = (unint64_t)(id)CPRecordGetProperty();
  CFIndex v10 = (void *)v9;
  if (v4 | v9 && ([(id)v9 isEqual:v4] & 1) == 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFUUIDRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
  }

  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetFlags(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetFlags2(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetIsFacebook(uint64_t a1, int a2)
{
}

void CalStoreSetFlag(uint64_t a1, int a2, int a3)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetFlag(a1, a2, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalStoreIsFacebook(uint64_t a1)
{
  return _CalStoreGetFlag(a1, 64);
}

void CalStoreSetUsesSelfAttendee(uint64_t a1, int a2)
{
}

BOOL _CalStoreUsesSelfAttendee(uint64_t a1)
{
  return !_CalStoreGetFlag(a1, 128);
}

BOOL CalStoreUsesSelfAttendee(uint64_t a1)
{
  return !CalStoreGetFlag(a1, 128);
}

BOOL CalStoreWasMigrated(uint64_t a1)
{
  return CalStoreGetFlag(a1, 8);
}

void CalStoreSetWasMigrated(uint64_t a1, int a2)
{
}

void CalStoreSetConstraintsName(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 isAbsolutePath])
  {
    uint64_t v4 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
    {
      int v7 = 138543362;
      id v8 = v3;
      id v5 = "Attempting to set a path (%{public}@) with CalStoreSetConstraintsName. Only the name should be supplied witho"
           "ut an extension.";
LABEL_10:
      _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_FAULT, v5, (uint8_t *)&v7, 0xCu);
    }
  }
  else if ([v3 hasSuffix:@".plist"])
  {
    uint64_t v4 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
    {
      int v7 = 138543362;
      id v8 = v3;
      id v5 = "Attempting to set a file name with .plist extension (%{public}@) with CalStoreSetConstraintsName. Only the na"
           "me should be supplied without an extension.";
      goto LABEL_10;
    }
  }
  else
  {
    id v6 = [MEMORY[0x1E4F57678] constraintsURLForName:v3];

    if (!v6)
    {
      uint64_t v4 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
      {
        int v7 = 138543362;
        id v8 = v3;
        id v5 = "Attempting to set an unrecognized constraints name (%{public}@) with CalStoreSetConstraintsName. The given "
             "name should be a valid .plist resource in CalendarFoundation.";
        goto LABEL_10;
      }
    }
  }
  CalStoreSetConstraintsNameNoValidation(a1);
}

void CalStoreSetConstraintsNameNoValidation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordUnloadProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyConstraintsName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetExternalID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyExternalModificationTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalStoreSetCreatorBundleID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalStoreSetCreatorBundleID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetCreatorBundleID(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyCreatorBundleID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalStoreSetCreatorCodeSigningIdentity(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalStoreSetCreatorCodeSigningIdentity(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetCreatorCodeSigningIdentity(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyCreatorCodeSigningIdentity(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

const void *CalDatabaseCopyStoreWithExternalID(os_unfair_lock_s *a1, const __CFString *a2)
{
  CFArrayRef v2 = (const __CFArray *)CalDatabaseCopyStoresWithExternalID(a1, a2);
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2) < 1)
    {
      id v6 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: no results for query", buf, 2u);
      }
      CFNumberRef ValueAtIndex = 0;
    }
    else
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
      CFRetain(ValueAtIndex);
    }
    CFRelease(v3);
  }
  else
  {
    id v5 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: query resulted in nil results", v8, 2u);
    }
    return 0;
  }
  return ValueAtIndex;
}

uint64_t CalDatabaseCopyStoresWithExternalID(os_unfair_lock_s *a1, const __CFString *a2)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
    if (!SelectPrefix)
    {
      uint64_t v19 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1A8E81000, v19, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: failed to create query", buf, 2u);
      }
      uint64_t v17 = 0;
      goto LABEL_32;
    }
    id v5 = SelectPrefix;
    CFStringAppend(SelectPrefix, @" WHERE external_id = ?;");
    id v6 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
    uint64_t v8 = RecordStore;
    if (CDBLockingAssertionsEnabled) {
      BOOL v9 = RecordStore == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          id v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
      uint64_t v13 = CPSqliteDatabaseStatementForReading();
      if (v13)
      {
        uint64_t v14 = v13;
        CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
        sqlite3_bind_text(*(sqlite3_stmt **)(v14 + 8), 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
        if (CDBLockingAssertionsEnabled)
        {
          if (v8)
          {
            id v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
        uint64_t v17 = CPRecordStoreProcessStatementWithPropertyIndices();
        goto LABEL_29;
      }
    }
    else
    {
      int v20 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v24 = 0;
        _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: failed to get sqlite database", v24, 2u);
      }
    }
    uint64_t v17 = 0;
LABEL_29:
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v6);
    }
    os_unfair_lock_unlock(v6);
    CFRelease(v5);
LABEL_32:
    if (cf) {
      CFRelease(cf);
    }
    return v17;
  }
  uint64_t v18 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v22 = 0;
    _os_log_impl(&dword_1A8E81000, v18, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: externalID is nil", v22, 2u);
  }
  return 0;
}

const void *CalDatabaseCopyStoreWithUUID(os_unfair_lock_s *a1, const __CFString *a2)
{
  if (!a2) {
    return 0;
  }
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix) {
    return 0;
  }
  id v5 = SelectPrefix;
  CFStringAppend(SelectPrefix, @" WHERE persistent_id = ?;");
  id v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v8 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = RecordStore == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_23;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      id v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  uint64_t v13 = CPSqliteDatabaseStatementForReading();
  if (!v13) {
    goto LABEL_23;
  }
  uint64_t v14 = v13;
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
  sqlite3_bind_text(*(sqlite3_stmt **)(v14 + 8), 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
  if (CDBLockingAssertionsEnabled)
  {
    if (v8)
    {
      id v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16) {
        os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  CFArrayRef v17 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
  if (v17)
  {
    CFArrayRef v18 = v17;
    if (CFArrayGetCount(v17) < 1)
    {
      CFNumberRef ValueAtIndex = 0;
    }
    else
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v18, 0);
      CFRetain(ValueAtIndex);
    }
    CFRelease(v18);
  }
  else
  {
LABEL_23:
    CFNumberRef ValueAtIndex = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return ValueAtIndex;
}

void CalStoreSetUUID(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  id v7 = (id)CPRecordCopyProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a2 && v7 && ([v7 isEqualToString:a2] & 1) == 0) {
    _CalAttachmentFileMigrateAttachmentsInStoreFromOldPersistentIDToNewPersistentID(a1, (uint64_t)v7, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreCopyUUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalStoreAddCalendar(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreAddCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreAddCalendar(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalToManyRelationAddObject(Property, a2);
  }
  _CalStoreGetFlag(a1, 32);
  _CalCalendarSetCanBeShared((uint64_t)a2);
  return _CalCalendarSetCanBePublished((uint64_t)a2);
}

void *_CalStoreRemoveCalendar(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

void CalStoreRemoveCalendar(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreRemoveCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyLastSyncStartTime(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalStoreCopyLastSyncEndTime(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalStoreMigrateToStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 == a2 || !a1 || !a2) {
    return v2;
  }
  _purgeServerAttachmentsFromCalendarItemsInStore(a1, 0);
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  if (!DatabaseForRecord) {
    goto LABEL_40;
  }
  uint64_t v7 = DatabaseForRecord;
  if (!_CalDatabaseGetRecordStore(DatabaseForRecord)) {
    goto LABEL_40;
  }
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_40;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      CFIndex v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  uint64_t v11 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!v11) {
    goto LABEL_40;
  }
  id v12 = (void *)v11;
  while (!__CalDatabaseBeginWriteTransaction(v7, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:2865"))
  {
    uint64_t v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v24 = 0;
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_INFO, "database was busy or locked; sleeping for 1 second…",
        v24,
        2u);
    }
    usleep(0x3E8u);
  }
  if (_CalDatabasePrepareCalendarsInStoreForMigration(v7, v12, a1)
    && _CalDatabasePrepareCalendarItemsInStoreForMigration(v7, v12, a1))
  {
    if (_CalDatabasePrepareAlarmsInStoreForMigration(v7, v12, a1)
      && _CalDatabasePrepareRecurrencesInStoreForMigration(v7, v12, a1)
      && _CalDatabasePrepareParticipantsInStoreForMigration(v7, (uint64_t)v12, a1)
      && _CalDatabasePrepareEventActionsInStoreForMigration(v7, (uint64_t)v12, a1)
      && _CalDatabaseMigrateCalendarsWithConnection(v12))
    {
      uint64_t v14 = _CalDatabaseCopyEventOccurrenceCache(v7);
      if (v14)
      {
        uint64_t v15 = (const void *)v14;
        uint64_t v2 = _CalEventOccurrenceCacheMigrateEventOccurrencesWithConnection(v14, v12);
        CFRelease(v15);
      }
      else
      {
        uint64_t v2 = 0;
      }
      _CalStoreSetFlag(a2, 8, 1);
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (CPRecordGetID() == 1)
  {
    uint64_t Store = CPRecordGetStore();
    CalendarWithint UID = _CalGetCalendarWithUID(Store);
    if (CalendarWithUID)
    {
      if (_CalDatabaseCalendarHasCalendarItemsWithEntityType(v7, CalendarWithUID, 101))
      {
        uint64_t CalendarInStoreImmediately = _CalDatabaseCreateCalendarInStoreImmediately(v7, a2, v12);
        if ((int)CalendarInStoreImmediately < 2) {
          goto LABEL_39;
        }
        uint64_t v19 = CalendarInStoreImmediately;
        if (!_CalMoveCalendarItemsFromCalendarWithUIDToCalendarWithUID(v12, 1, CalendarInStoreImmediately))goto LABEL_39; {
        uint64_t v20 = _CalDatabaseCopyEventOccurrenceCache(v7);
        }
        if (v20)
        {
          uint64_t v21 = (const void *)v20;
          uint64_t v22 = _CalDatabaseCopyEventOccurrenceCache(v7);
          uint64_t v2 = _CalEventOccurrenceCacheMigrateEventOccurrencesBetweenCalendars(v22, v12, 1, v19);
          CFRelease(v21);
        }
      }
    }
  }
  if (!v2)
  {
LABEL_39:
    __CalDatabaseRollbackTransaction(v7, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:2937");
LABEL_40:
    uint64_t v2 = 0;
    goto LABEL_41;
  }
  __CalDatabaseCommitTransaction(v7, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:2929");
  _CalDatabasePostChangeNotificationToExternalClients(v7, 0);
  _CalDatabaseRevertInternal(v7, 1);
LABEL_41:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v2;
}

void _purgeServerAttachmentsFromCalendarItemsInStore(uint64_t a1, int a2)
{
  uint64_t v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  CFArrayRef v5 = (const __CFArray *)CalDatabaseCopyOfAllAttachmentsInStore(v4, a1);
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      for (CFIndex i = 0; i != v8; ++i)
      {
        CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, i);
        CFTypeRef v11 = CalAttachmentCopyOwner((uint64_t)ValueAtIndex);
        id v12 = v11;
        if (a2) {
          int v13 = CalEntityIsOfType(v11, a2);
        }
        else {
          int v13 = 1;
        }
        if (!CalAttachmentIsBinary((uint64_t)ValueAtIndex) && v13) {
          CalRemoveAttachment(ValueAtIndex);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
    }
    CFRelease(v6);
  }
  CalDatabaseSave((uint64_t)v4);
  if (v4)
  {
    CFRelease(v4);
  }
}

BOOL CalDatabaseMigrateCalendarsWithEntityType(os_unfair_lock_s *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = a2 & 0xFFFFFFFE;
  if ((a2 & 0xFFFFFFFE) != 2) {
    CalDatabaseMigrateCalendarsWithEntityType_cold_1();
  }
  BOOL result = 0;
  if (a2 == 2) {
    unsigned int v4 = 3;
  }
  unsigned int v19 = v4;
  if (a3 != a4 && a1 && a3 && a4)
  {
    CFIndex v10 = CalDatabaseCopyOfAllCalendarsInStore(a1, a3);
    if (v10)
    {
      CFArrayRef v11 = v10;
      CFIndex Count = CFArrayGetCount(v10);
      BOOL v13 = Count == 0;
      _purgeServerAttachmentsFromCalendarItemsInStore(a3, a2);
      if (Count >= 1)
      {
        for (CFIndex i = 0; Count != i; ++i)
        {
          CFNumberRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v11, i);
          if (CalCalendarGetUID() == 1
            || !CalCalendarCanContainEntityType((uint64_t)ValueAtIndex, a2))
          {
            continue;
          }
          CanContainEntityint Type = CalCalendarCanContainEntityType((uint64_t)ValueAtIndex, v19);
          CFArrayRef v17 = (void *)_CopyMatchingCalendarForMigration((uint64_t)ValueAtIndex, a2, a4);
          CFArrayRef v18 = v17;
          if (CanContainEntityType)
          {
            if (!v17)
            {
              CFArrayRef v18 = (void *)CalDatabaseCopyCalendar(a1, (uint64_t)ValueAtIndex);
              CalStoreAddCalendar(a4, v18);
              CalCalendarSetCanContainEntityType((uint64_t)v18, a2);
            }
            _moveCalendarItemsOfTypeIntoCalendar(a1, a2, (uint64_t)ValueAtIndex, v18, 0);
            CalCalendarSetCanContainEntityType((uint64_t)ValueAtIndex, v19);
          }
          else
          {
            if (!v17)
            {
              CalStoreRemoveCalendar(a3, ValueAtIndex);
              CalStoreAddCalendar(a4, ValueAtIndex);
              CalCalendarClearExternalProperties((uint64_t)ValueAtIndex, 1);
              goto LABEL_20;
            }
            _moveCalendarItemsOfTypeIntoCalendar(a1, a2, (uint64_t)ValueAtIndex, v17, 1);
            CalRemoveCalendar(ValueAtIndex);
          }
          CFRelease(v18);
LABEL_20:
          CalCalendarSetExternalModificationTag((uint64_t)ValueAtIndex);
          CalCalendarSetSyncToken((uint64_t)ValueAtIndex);
          CalCalendarSetIsPublished((uint64_t)ValueAtIndex);
          CalCalendarSetPublishedURL((uint64_t)ValueAtIndex, 0);
          CalCalendarSetSharingStatus((uint64_t)ValueAtIndex);
          BOOL v13 = 1;
        }
      }
      if (v13) {
        CalStoreSetFlag(a4, 8, 1);
      }
      CFRelease(v11);
    }
    else
    {
      return 1;
    }
    return v13;
  }
  return result;
}

const void *_CopyMatchingCalendarForMigration(uint64_t a1, int a2, uint64_t a3)
{
  CFArrayRef v6 = CalStoreCopyCalendars(a3);
  CFArrayRef v7 = v6;
  if (!v6)
  {
    CFStringRef v9 = (const __CFString *)CalCalendarCopyTitle(a1);
LABEL_14:
    CFNumberRef ValueAtIndex = 0;
    uint64_t v14 = 0;
    if (v9) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  CFIndex Count = CFArrayGetCount(v6);
  CFStringRef v9 = (const __CFString *)CalCalendarCopyTitle(a1);
  if (Count < 1) {
    goto LABEL_14;
  }
  CFIndex v10 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v10);
    CFStringRef v12 = (const __CFString *)CalCalendarCopyTitle((uint64_t)ValueAtIndex);
    CFStringRef v13 = v12;
    if (v12)
    {
      if (v9) {
        break;
      }
    }
    if (v12) {
      goto LABEL_10;
    }
LABEL_11:
    if (Count == ++v10) {
      goto LABEL_14;
    }
  }
  if (CFStringCompare(v9, v12, 0) || CalCalendarGetCalendarSupportsExactlyOneEntityTypeInStore(a3))
  {
LABEL_10:
    CFRelease(v13);
    goto LABEL_11;
  }
  CanContainEntityint Type = CalCalendarCanContainEntityType((uint64_t)ValueAtIndex, a2);
  if ((CanContainEntityType & 1) == 0) {
    CalCalendarSetCanContainEntityType((uint64_t)ValueAtIndex, 0);
  }
  CFRetain(ValueAtIndex);
  CFRelease(v13);
LABEL_15:
  CFRelease(v9);
  uint64_t v14 = ValueAtIndex;
LABEL_16:
  if (v7) {
    CFRelease(v7);
  }
  return v14;
}

void _moveCalendarItemsOfTypeIntoCalendar(os_unfair_lock_s *a1, int a2, uint64_t a3, const void *a4, int a5)
{
  CFArrayRef v8 = (const __CFArray *)CalDatabaseCopyCalendarItemsWithCalendar(a1);
  if (v8)
  {
    CFArrayRef v9 = v8;
    CFIndex Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      for (CFIndex i = 0; i != v11; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
        uint64_t v14 = ValueAtIndex;
        if (a5)
        {
          if (a2 != 2 || !CalEventIsDetached((uint64_t)ValueAtIndex))
          {
            CopyPreservingUniqueIdentifier = _CalCalendarItemCreateCopyPreservingUniqueIdentifier(v14, 1);
            CalCalendarItemSetExternalID((uint64_t)CopyPreservingUniqueIdentifier, 0);
            CalCalendarAddCalendarItemAndDetached(a4, CopyPreservingUniqueIdentifier);
            CFRelease(CopyPreservingUniqueIdentifier);
          }
        }
        else
        {
          CalCalendarItemClearExternalProperties(ValueAtIndex, 1);
          CalCalendarAddCalendarItemAndDetached(a4, v14);
        }
      }
    }
    CFRelease(v9);
  }
}

uint64_t CalStoreRemoveItemsOfTypeOlderThanDateInStore(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a1 && a3)
  {
    CFArrayRef v6 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (v6)
    {
      CFArrayRef v7 = v6;
      CFArrayRef v8 = v6 + 20;
      os_unfair_lock_lock(v6 + 20);
      uint64_t v3 = *(void *)&v7[6]._os_unfair_lock_opaque;
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
        uint64_t Database = CPRecordStoreGetDatabase();
        uint64_t v3 = Database;
        if (Database)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)(Database + 104))
            {
              CFIndex v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11) {
                os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
          uint64_t v12 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
          if (!v12) {
            goto LABEL_67;
          }
          uint64_t v13 = v12;
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v12)
            {
              if (*(void *)(*(void *)v12 + 104))
              {
                uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v14) {
                  os_unfair_lock_assert_owner(v14 + 20);
                }
              }
            }
          }
          uint64_t v15 = CPSqliteConnectionStatementForSQL();
          if (v15)
          {
            id v16 = (uint64_t **)v15;
            CFArrayRef v17 = v8;
            if (a2)
            {
              sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 1, a2);
              int v18 = 2;
            }
            else
            {
              int v18 = 1;
            }
            unsigned int v19 = (sqlite3_stmt *)v16[1];
            int v20 = v18 + 1;
            double v21 = MEMORY[0x1AD0E87A0](a3);
            sqlite3_bind_double(v19, v18, v21);
            uint64_t v22 = (sqlite3_stmt *)v16[1];
            int ID = CPRecordGetID();
            sqlite3_bind_int(v22, v20, ID);
            if (CDBLockingAssertionsEnabled)
            {
              if (*v16)
              {
                uint64_t v24 = **v16;
                if (v24)
                {
                  if (*(void *)(v24 + 104))
                  {
                    uint64_t v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v25) {
                      os_unfair_lock_assert_owner(v25 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementSendResults();
            CFArrayRef v8 = v17;
            if (CDBLockingAssertionsEnabled)
            {
              if (*v16)
              {
                uint64_t v26 = **v16;
                if (v26)
                {
                  if (*(void *)(v26 + 104))
                  {
                    uint64_t v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v27) {
                      os_unfair_lock_assert_owner(v27 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementReset();
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v13)
            {
              if (*(void *)(*(void *)v13 + 104))
              {
                CFIndex v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v28) {
                  os_unfair_lock_assert_owner(v28 + 20);
                }
              }
            }
          }
          uint64_t v29 = CPSqliteConnectionStatementForSQL();
          uint64_t v3 = v29 != 0;
          if (v29)
          {
            int v30 = (uint64_t **)v29;
            uint64_t v59 = v13;
            uint64_t v60 = v8;
            if (a2)
            {
              sqlite3_bind_int(*(sqlite3_stmt **)(v29 + 8), 1, a2);
              int v31 = 2;
            }
            else
            {
              int v31 = 1;
            }
            int v32 = (sqlite3_stmt *)v30[1];
            double v33 = MEMORY[0x1AD0E87A0](a3);
            sqlite3_bind_double(v32, v31, v33);
            BOOL v34 = (sqlite3_stmt *)v30[1];
            double v35 = MEMORY[0x1AD0E87A0](a3);
            sqlite3_bind_double(v34, v31 + 1, v35);
            uint64_t v36 = (sqlite3_stmt *)v30[1];
            double v37 = MEMORY[0x1AD0E87A0](a3);
            sqlite3_bind_double(v36, v31 + 2, v37);
            uint64_t v38 = (sqlite3_stmt *)v30[1];
            int v39 = CPRecordGetID();
            sqlite3_bind_int(v38, v31 + 3, v39);
            if (CDBLockingAssertionsEnabled)
            {
              if (*v30)
              {
                uint64_t v40 = **v30;
                if (v40)
                {
                  if (*(void *)(v40 + 104))
                  {
                    uint64_t v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v41) {
                      os_unfair_lock_assert_owner(v41 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementSendResults();
            uint64_t v13 = v59;
            CFArrayRef v8 = v60;
            if (CDBLockingAssertionsEnabled)
            {
              if (*v30)
              {
                uint64_t v42 = **v30;
                if (v42)
                {
                  if (*(void *)(v42 + 104))
                  {
                    uint64_t v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v43) {
                      os_unfair_lock_assert_owner(v43 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementReset();
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v13)
            {
              if (*(void *)(*(void *)v13 + 104))
              {
                uint64_t v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v44) {
                  os_unfair_lock_assert_owner(v44 + 20);
                }
              }
            }
          }
          uint64_t v45 = CPSqliteConnectionStatementForSQL();
          if (v45)
          {
            CFStringRef v46 = (uint64_t **)v45;
            CFStringRef v47 = *(sqlite3_stmt **)(v45 + 8);
            double v48 = MEMORY[0x1AD0E87A0](a3);
            sqlite3_bind_double(v47, 1, v48);
            if (a2)
            {
              sqlite3_bind_int((sqlite3_stmt *)v46[1], 2, a2);
              int v49 = 3;
            }
            else
            {
              int v49 = 2;
            }
            uint64_t v50 = (sqlite3_stmt *)v46[1];
            double v51 = MEMORY[0x1AD0E87A0](a3);
            sqlite3_bind_double(v50, v49, v51);
            uint64_t v52 = (sqlite3_stmt *)v46[1];
            int v53 = CPRecordGetID();
            sqlite3_bind_int(v52, v49 + 1, v53);
            if (CDBLockingAssertionsEnabled)
            {
              if (*v46)
              {
                uint64_t v54 = **v46;
                if (v54)
                {
                  if (*(void *)(v54 + 104))
                  {
                    id v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v55) {
                      os_unfair_lock_assert_owner(v55 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementSendResults();
            if (CDBLockingAssertionsEnabled)
            {
              if (*v46)
              {
                uint64_t v56 = **v46;
                if (v56)
                {
                  if (*(void *)(v56 + 104))
                  {
                    id v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v57) {
                      os_unfair_lock_assert_owner(v57 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementReset();
          }
          else
          {
LABEL_67:
            uint64_t v3 = 0;
          }
        }
      }
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(v8);
      }
      os_unfair_lock_unlock(v8);
      CFRelease(v7);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t _DeleteCalendarItemRowHandler(uint64_t a1, __CFArray **a2)
{
  int v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFMutableDictionaryRef Mutable = *a2;
  if (!*a2)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 1, 0);
    *a2 = Mutable;
  }
  CFArrayAppendValue(Mutable, (const void *)v3);
  return 0;
}

void CalStoreSetSupportsEventForwarding(uint64_t a1, int a2)
{
}

uint64_t CalStoreAllowsTasksPrivate(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL Flag = _CalStoreGetFlag(a1, 1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  char v5 = CPRecordGetProperty() == 3 || Flag;
  if (v5) {
    goto LABEL_12;
  }
  CFArrayRef v6 = (const void *)_CalStoreCopyDelegatedAccountOwnerStoreID(a1);
  if (v6)
  {
    CFRelease(v6);
LABEL_12:
    uint64_t v7 = 0;
    goto LABEL_14;
  }
  uint64_t v7 = 1;
LABEL_14:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v7;
}

void CalStoreSetAllowsTasks(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (CalIsReminderBridgeEnabled())
    {
      int v3 = (void *)CDBLogHandle;
      int v4 = 1;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
      {
        char v5 = v3;
        CFArrayRef v6 = (void *)CalStoreCopyExternalID(a1);
        v7[0] = 67109378;
        v7[1] = 1;
        __int16 v8 = 2114;
        CFArrayRef v9 = v6;
        _os_log_impl(&dword_1A8E81000, v5, OS_LOG_TYPE_INFO, "Ignoring attempt to set allowsTasks to %d on store %{public}@. Forcing to NO", (uint8_t *)v7, 0x12u);
      }
    }
    else
    {
      int v4 = 0;
    }
  }
  else
  {
    int v4 = 1;
  }
  CalStoreSetFlag(a1, 1, v4);
}

void CalStoreSetAllowsTasksPrivate(uint64_t a1, int a2)
{
}

BOOL _CalStoreAllowedEvents(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return (CPRecordGetOriginalProperty() & 2) == 0;
}

void CalStoreSetAllowsEvents(uint64_t a1, int a2)
{
}

void CalStoreSetAllowsCalendarAddDeleteModify(uint64_t a1, int a2)
{
}

void CalStoreSetSnoozeAlarmRequiresDetach(uint64_t a1, int a2)
{
}

BOOL CalStoreSupportsAlarmAcknowledgedDate(uint64_t a1)
{
  return CalStoreGetFlag(a1, 512);
}

void CalStoreSetSupportsAlarmAcknowledgedDate(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsSharedCalendars(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsPrivateEvents(uint64_t a1, int a2)
{
}

void CalStoreSetProhibitsPrivateEventsWithAttendees(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsAvailabilityRequests(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsIgnoringEventsInAvailabilityRequests(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsLocationDirectorySearches(uint64_t a1, int a2)
{
}

BOOL _CalStoreRequiresSamePrivacyLevelAcrossRecurrenceSeries(uint64_t a1)
{
  return _CalStoreGetFlag(a1, 0x2000);
}

void CalStoreSetRequiresSamePrivacyLevelAcrossRecurrenceSeries(uint64_t a1, int a2)
{
}

void CalStoreSetProhibitsICSImport(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsClearingPrivateComments(uint64_t a1, int a2)
{
}

void CalStoreSetFlag2(uint64_t a1, int a2, int a3)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  if (a3) {
    int v9 = Property | a2;
  }
  else {
    int v9 = Property & ~a2;
  }
  if (v9 != Property)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetSupportsJunkReporting(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsPhoneNumbers(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsDelegation(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsDelegateEnumeration(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsInvitationModificationsWithoutNotification(uint64_t a1, int a2)
{
}

BOOL CalStoreSyncDefaultAlarms(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 2048);
}

void CalStoreSetSyncDefaultAlarms(uint64_t a1, int a2)
{
}

BOOL CalStoreIsWritable(uint64_t a1)
{
  return !CalStoreGetFlag(a1, 0x80000000);
}

void CalStoreSetIsWritable(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsRecurrenceSplit(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsPush(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsTravelTime(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsFloatingTimeZone(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsInboxAvailability(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsSubscriptionCalendars(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsManagedSubscriptionCalendars(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsSubscriptionMirroring(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsParticipantRoles(uint64_t a1, int a2)
{
}

void CalStoreSetProhibitsUsingEventOrganizerEmailWhenComposingMail(uint64_t a1, int a2)
{
}

BOOL CalStoreIsInMainWindow(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 256);
}

void CalStoreSetIsInMainWindow(uint64_t a1, int a2)
{
}

BOOL CalStoreIsInSeparateWindow(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 512);
}

void CalStoreSetIsInSeparateWindow(uint64_t a1, int a2)
{
}

BOOL _CalStoreRequiresMSFormattedUIDKey(uint64_t a1)
{
  return _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"RequiresMSFormattedUID", 0);
}

void CalStoreSetProhibitsSlicingEventsWithAttendees(uint64_t a1, int a2)
{
}

void CalStoreSetSupportsAttachments(uint64_t a1, int a2)
{
}

void CalStoreSetRequiresOpeningAttachmentAsLink(uint64_t a1, int a2)
{
}

void CalStoreSetShouldUseDeleteAndAddInsteadOfMoveBetweenCalendars(uint64_t a1, int a2)
{
}

void CalStoreSetAllowsPrivateEventAccessByDelegate(uint64_t a1, int a2)
{
}

uint64_t _CalStoreSupportsRecurrencesOnDetachedEvents()
{
  return 0;
}

BOOL _CalStoreAreRecurrencesPinnedToMonthDays(uint64_t a1)
{
  return _CalStoreGetBoolConstraintValue(a1, @"CalEvent", @"RecurrencesPinnedToMonthDays", 0);
}

void CalStoreSetProhibitsMultipleMonthsInYearlyRecurrence(uint64_t a1, int a2)
{
}

void CalStoreSetProhibitsMultipleDaysInMonthlyRecurrence(uint64_t a1, int a2)
{
}

void CalStoreSetProhibitsYearlyRecurrenceInterval(uint64_t a1, int a2)
{
}

void CalStoreSetProhibitsDetachmentOnCommentChange(uint64_t a1, int a2)
{
}

void CalStoreSetAllowsProposeNewTime(uint64_t a1, int a2)
{
}

void CalStoreSetRequiresOccurrencesConformToRecurrenceRule(uint64_t a1, int a2)
{
}

BOOL _CalStoreAttendeeCanUpdateLastModified(uint64_t a1)
{
  return _CalStoreGetBoolConstraintValue(a1, @"CalAttendee", @"CanUpdateLastModified", 1);
}

BOOL _CalAttendeeGetUseDeletedByOrganizerStatusInStore(uint64_t a1)
{
  return _CalAttendeeGetBoolConstraintValueForStore(a1, @"UseDeletedByOrganizerStatus", 0);
}

BOOL CalStoreAttendeeCanUpdateLastModified(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintCFNumberRef Value = _CalStoreGetBoolConstraintValue(a1, @"CalAttendee", @"CanUpdateLastModified", 1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

uint64_t _CalStoreSaveAddedCalendars(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef Property = (const __CFArray *)CPRecordGetProperty();
  if (!Property)
  {
    CPRecordGetID();
    if (!a1) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  CFArrayRef v4 = Property;
  CFIndex Count = CFArrayGetCount(Property);
  int ID = CPRecordGetID();
  if (Count >= 1)
  {
    int v7 = ID;
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
      _CalCalendarSetStoreId((uint64_t)ValueAtIndex, v7);
    }
  }
  if (a1)
  {
LABEL_13:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
LABEL_17:
  return CPRecordInitializeProperty();
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4 0) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t _CalStoreDefaultMarkAlarmChange(uint64_t a1)
{
  _CalStoreDefaultAlarmChanges(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t _CalStoreDefaultAlarmChanges(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void sub_1A8F22AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t _CalStoreSetFlag(uint64_t a1, int a2, int a3)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (a3) {
    int v8 = result | a2;
  }
  else {
    int v8 = result & ~a2;
  }
  if (v8 != result)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    return CPRecordSetProperty();
  }
  return result;
}

void sub_1A8F23454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4 0) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

uint64_t CalEventUpdateFromICSEventWithOptions(void *a1, void *a2, const void *a3, uint64_t a4, os_unfair_lock_s *a5, uint64_t a6, void *a7, void *a8, unsigned __int8 a9)
{
  uint64_t v200 = *MEMORY[0x1E4F143B8];
  id v15 = a1;
  id v16 = a2;
  id v17 = a7;
  id v18 = a8;
  id v176 = v15;
  if (v15)
  {
    if (a3)
    {
      unsigned int v19 = [v15 isAllDay];
      int IsAllDay = CalCalendarItemIsAllDay((uint64_t)a3);
      if (v18 && v19 != IsAllDay) {
        [v18 addObject:II_ALL_DAY_KEY];
      }
      CalCalendarItemSetAllDay((uint64_t)a3, v19);
      double started = _CalOriginalStartDateFromICSComponent(v15, v16);
      CalEventSetOriginalStartDate((uint64_t)a3, started);
      uint64_t v22 = objc_msgSend(v15, "recurrence_id");

      id v160 = v18;
      if (v22) {
        uint64_t v23 = a4;
      }
      else {
        uint64_t v23 = (uint64_t)a3;
      }
      uint64_t v27 = (void *)CalEventCopyAttendees(v23);
      uint64_t v166 = a6;
      int v163 = v17;
      CFArrayRef v154 = v27;
      id v155 = v16;
      v170 = a3;
      if ([v27 count])
      {
        CFIndex v28 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v27, "count"));
        long long v185 = 0u;
        long long v186 = 0u;
        long long v187 = 0u;
        long long v188 = 0u;
        id v29 = v27;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v185 objects:v199 count:16];
        if (v30)
        {
          uint64_t v31 = v30;
          uint64_t v32 = *(void *)v186;
          do
          {
            for (uint64_t i = 0; i != v31; ++i)
            {
              if (*(void *)v186 != v32) {
                objc_enumerationMutation(v29);
              }
              BOOL v34 = (void *)CalAttendeeCopyAddress(*(void *)(*((void *)&v185 + 1) + 8 * i));
              if (v34) {
                [v28 addObject:v34];
              }
            }
            uint64_t v31 = [v29 countByEnumeratingWithState:&v185 objects:v199 count:16];
          }
          while (v31);
        }

        id v16 = v155;
        a3 = v170;
      }
      else
      {
        CFIndex v28 = 0;
      }
      double v35 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v36 = [NSNumber numberWithUnsignedInteger:v166];
      double v37 = [v35 dictionaryWithObject:v36 forKey:@"ItemBridgeOptions"];

      id v152 = v37;
      id v17 = v163;
      unsigned int v153 = CalCalendarItemUpdateFromICSComponent(a3, a4, v176, v16, a5, v37, v163, v18, a9);
      if ((v153 & 1) == 0)
      {
        CFStringRef v46 = CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_1A8E81000, v46, OS_LOG_TYPE_DEBUG, "CalCalendarItemUpdateFromICSComponent failed", buf, 2u);
        }
LABEL_160:

        uint64_t v25 = v153;
        goto LABEL_161;
      }
      id v38 = v176;
      id v39 = v16;
      uint64_t v40 = v38;
      id v150 = v39;
      int v41 = [v38 isAllDay];
      uint64_t v42 = [v38 dtend];

      if (v42)
      {
        uint64_t v43 = [v40 dtend];
        uint64_t v44 = v43;
        if (v41)
        {
          double v45 = CalDateFromICSDateAsUTC(v43) + -1.0;
        }
        else
        {
          int v50 = [v43 hasFloatingTimeZone];

          double v51 = [v40 dtend];
          uint64_t v44 = v51;
          if (!v50)
          {
            double v45 = CalDateFromICSDate(v51, v150);

            v98 = [v40 dtend];
            CalCreateDateTimeFromICSDate(v98, v150);
            CFStringRef v100 = v99;

            if (CFStringCompare(v100, @"_float", 0))
            {
              CFTimeZoneRef v101 = CFTimeZoneCreateWithName(0, v100, 1u);
              CalCalendarItemSetEndTimeZone((uint64_t)a3, (uint64_t)v101);
              if (v101) {
                CFRelease(v101);
              }
            }
            else
            {
              CalCalendarItemSetEndTimeZone((uint64_t)a3, 0);
            }
            CalDateTimeRelease();
            goto LABEL_41;
          }
          double v45 = CalDateFromICSDateAsUTC(v51);
        }
      }
      else if (v41)
      {
        CFStringRef v47 = [v40 duration];
        [v47 timeInterval];
        double v49 = v48 + -1.0;

        if (v49 < 0.0) {
          double v49 = 0.0;
        }
        uint64_t v44 = [v40 dtstart];
        double v45 = v49 + CalDateFromICSDateAsUTC(v44);
      }
      else
      {
        uint64_t v44 = [v40 dtstart];
        double v52 = CalDateFromICSDate(v44, v150);
        int v53 = [v40 duration];
        [v53 timeInterval];
        double v45 = v52 + v54;
      }
LABEL_41:
      EndCFDateRef Date = CalEventGetEndDate((uint64_t)a3);
      CalEventSetEndDate((uint64_t)a3, v45);

      if (v18 && EndDate != v45) {
        [v18 addObject:II_TO_KEY];
      }
      int Availability = CalEventGetAvailability((uint64_t)a3);
      unsigned int v57 = [v40 transp] == 2;
      if (Availability != v57) {
        CalEventSetAvailability((uint64_t)a3, v57);
      }
      objc_msgSend(v40, "x_calendarserver_private_comment");
      v148 = (__CFString *)objc_claimAutoreleasedReturnValue();
      CalEventSetResponseComment((uint64_t)a3, v148);
      char v149 = objc_msgSend(v40, "x_calendarserver_attendee_comment");
      uint64_t v58 = CalEventCopyAttendees(a3);
      int v169 = v40;
      if (!v58) {
        goto LABEL_80;
      }
      CFArrayRef theArray = (const __CFArray *)v58;
      uint64_t v59 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v149, "count"));
      long long v181 = 0u;
      long long v182 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      id v60 = v149;
      uint64_t v61 = [v60 countByEnumeratingWithState:&v181 objects:v198 count:16];
      if (v61)
      {
        uint64_t v62 = v61;
        uint64_t v63 = *(void *)v182;
        do
        {
          for (uint64_t j = 0; j != v62; ++j)
          {
            if (*(void *)v182 != v63) {
              objc_enumerationMutation(v60);
            }
            id v65 = *(void **)(*((void *)&v181 + 1) + 8 * j);
            uint64_t v66 = objc_msgSend(v65, "x_calendarserver_attendee_ref");
            if (v66)
            {
              CFArrayRef v67 = (void *)v66;
              CFMutableArrayRef v68 = [v65 value];

              if (v68)
              {
                CFArrayRef v69 = objc_msgSend(v65, "x_calendarserver_attendee_ref");
                [v59 setObject:v65 forKeyedSubscript:v69];
              }
            }
          }
          uint64_t v62 = [v60 countByEnumeratingWithState:&v181 objects:v198 count:16];
        }
        while (v62);
      }

      CFTypeRef v158 = [MEMORY[0x1E4F1C9A8] CalGregorianGMTCalendar];
      CFIndex v156 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
      CFArrayRef v70 = theArray;
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        CFIndex v72 = Count;
        char v147 = 0;
        CFIndex v73 = 0;
        double v74 = *MEMORY[0x1E4F57888];
        a3 = v170;
        CFIndex v161 = Count;
        while (1)
        {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v70, v73);
          if (ValueAtIndex) {
            break;
          }
LABEL_76:
          if (v72 == ++v73) {
            goto LABEL_79;
          }
        }
        uint64_t v76 = (uint64_t)ValueAtIndex;
        CFTypeRef v77 = (void *)CalAttendeeCopyAddress(ValueAtIndex);
        uint64_t v78 = v77;
        if (!v77)
        {
LABEL_75:

          goto LABEL_76;
        }
        int v172 = [v77 absoluteString];
        v174 = (void *)CalAttendeeCopyResponseComment(v76);
        id v79 = [v59 objectForKeyedSubscript:v172];
        uint64_t v80 = objc_msgSend(v79, "x_calendarserver_dtstamp");
        CFAbsoluteTime v81 = v74;
        if (v80)
        {
          CFIndex v82 = NSDateFromICSValueInTimeZone();
          [v82 timeIntervalSinceReferenceDate];
          CFAbsoluteTime v81 = v83;
        }
        CalParticipantSetCommentLastModified(v76, v81);
        v84 = [v79 value];
        if (CalEqualStrings())
        {
LABEL_74:

          a3 = v170;
          CFIndex v72 = v161;
          goto LABEL_75;
        }
        CalAttendeeSetResponseComment(v76, v84);
        int v85 = [v28 containsObject:v78];
        id v164 = [v174 CalStringByRemovingAutoComment];
        id v86 = [v84 CalStringByRemovingAutoComment];
        CFMutableArrayRef v87 = v86;
        int v88 = 0;
        if (v85 && v86)
        {
          CFArrayRef v70 = theArray;
          if ([v86 length])
          {
            if ((CalEqualStrings() & 1) != 0 || CalAttendeeGetType(v76) == 2) {
              goto LABEL_73;
            }
            int v88 = 1;
            char v147 = 1;
          }
          else
          {
            int v88 = 0;
          }
        }
        else
        {
          CFArrayRef v70 = theArray;
        }
        CalParticipantSetCommentChanged(v76, v88);
LABEL_73:

        goto LABEL_74;
      }
      char v147 = 0;
      a3 = v170;
LABEL_79:
      CFRelease(v70);

      uint64_t v40 = v169;
      if ((v147 & 1) == 0)
      {
LABEL_80:
        int InvitationChangedProperties = CalEventGetInvitationChangedProperties((uint64_t)a3);
        CalEventRemoveInvitationChangedProperties((uint64_t)a3, 16);
        int v90 = CalEventGetInvitationChangedProperties((uint64_t)a3);
        if (InvitationChangedProperties && !v90) {
          CalEventSetNeedsNotification((uint64_t)a3, 0);
        }
      }
      v157 = objc_msgSend(v40, "x_apple_travel_duration");
      CFIndex v91 = [v157 duration];
      CFIndex v175 = v91;
      if (v91)
      {
        [v91 timeInterval];
        objc_msgSend(NSNumber, "numberWithDouble:");
        CFStringRef v92 = (const __CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        CFStringRef v92 = 0;
      }
      v93 = (void *)CalEventCopyTravelTime((uint64_t)a3);
      int v94 = v93;
      if (!v93 && v92 || v93 && ([v93 isEqual:v92] & 1) == 0) {
        CalEventSetTravelTime((uint64_t)a3, v92);
      }
      BOOL v162 = objc_msgSend(v40, "x_apple_travel_advisory_behavior");
      uint64_t v95 = [v162 value];
      CFURLRef v173 = (__CFString *)v92;
      v159 = v95;
      if (v95)
      {
        id v96 = v95;
        if ([v95 length])
        {
          if ([v96 isEqualToString:*MEMORY[0x1E4FB7EB8]])
          {
            unsigned int v97 = 2;
            goto LABEL_102;
          }
          if ([v96 isEqualToString:*MEMORY[0x1E4FB7EC0]])
          {
            unsigned int v97 = 1;
            goto LABEL_102;
          }
          [v96 isEqualToString:*MEMORY[0x1E4FB7EB0]];
        }
      }
      unsigned int v97 = 0;
LABEL_102:
      int v165 = v94;
      CalEventSetTravelAdvisoryBehavior((uint64_t)a3, v97);
      CFArrayRef v102 = objc_msgSend(v40, "x_apple_suggestionInfoOpaqueKey");
      uint64_t v103 = objc_msgSend(v40, "x_apple_suggestionInfoUniqueKey");
      id v104 = (void *)v103;
      if (v102 && v103)
      {
        CFTypeRef SuggestedEventInfo = CalEventCopySuggestedEventInfo((uint64_t)a3);
        CFIndex v106 = (id)CDBiCalendarConversionHandle;
        BOOL v107 = os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG);
        if (SuggestedEventInfo)
        {
          if (v107)
          {
            *(_DWORD *)int buf = 136315906;
            CFDateRef v191 = "BOOL CalEventUpdateFromICSEventWithOptions(ICSEvent *__strong, ICSCalendar *__strong, CalEventRef, Ca"
                   "lEventRef, CalDatabaseRef, NSUInteger, __strong id<CDBAccountInfo>, NSMutableSet *__strong, BOOL)";
            __int16 v192 = 2112;
            CFTypeRef v193 = SuggestedEventInfo;
            __int16 v194 = 2112;
            long long v195 = (void *)a3;
            __int16 v196 = 2112;
            long long v197 = v40;
            _os_log_impl(&dword_1A8E81000, v106, OS_LOG_TYPE_DEBUG, "%s - Existing suggested event info %@ found for calEvent %@ and icsEvent %@", buf, 0x2Au);
          }
        }
        else
        {
          if (v107)
          {
            *(_DWORD *)int buf = 136315650;
            CFDateRef v191 = "BOOL CalEventUpdateFromICSEventWithOptions(ICSEvent *__strong, ICSCalendar *__strong, CalEventRef, Ca"
                   "lEventRef, CalDatabaseRef, NSUInteger, __strong id<CDBAccountInfo>, NSMutableSet *__strong, BOOL)";
            __int16 v192 = 2112;
            CFTypeRef v193 = a3;
            __int16 v194 = 2112;
            long long v195 = v40;
            _os_log_impl(&dword_1A8E81000, v106, OS_LOG_TYPE_DEBUG, "%s - No existing suggested event info for calEvent %@ and icsEvent %@, creating one", buf, 0x20u);
          }

          CFTypeRef SuggestedEventInfo = CalDatabaseCreateSuggestedEventInfo(a5);
          CalEventSetSuggestedEventInfo((uint64_t)a3, SuggestedEventInfo);
        }
        unsigned int v108 = (void *)CalSuggestedEventInfoCopyOpaqueKey((uint64_t)SuggestedEventInfo);
        if (([v108 isEqualToString:v102] & 1) == 0) {
          CalSuggestedEventInfoSetOpaqueKey((uint64_t)SuggestedEventInfo);
        }
        CFURLRef v109 = (void *)CalSuggestedEventInfoCopyUniqueKey((uint64_t)SuggestedEventInfo);
        if (([v109 isEqualToString:v104] & 1) == 0) {
          CalSuggestedEventInfoSetUniqueKey((uint64_t)SuggestedEventInfo);
        }
        int ChangedFields = CalSuggestedEventInfoGetChangedFields((uint64_t)SuggestedEventInfo);
        if (ChangedFields != objc_msgSend(v169, "x_apple_suggestionInfoChangedFields")) {
          CalSuggestedEventInfoSetChangedFields((uint64_t)SuggestedEventInfo);
        }
        int ChangesAcknowledged = CalSuggestedEventInfoGetChangesAcknowledged((uint64_t)SuggestedEventInfo);
        if (ChangesAcknowledged != objc_msgSend(v169, "x_apple_suggestionInfoChangesAcknowledged")) {
          CalSuggestedEventInfoSetChangesAcknowledged((uint64_t)SuggestedEventInfo);
        }
        id v112 = objc_msgSend(v169, "x_apple_suggestionInfoTimestamp");
        CFMutableArrayRef v113 = [v150 systemDateForDate:v112 options:1];

        CFArrayRef v114 = CalSuggestedEventInfoGetTimestamp((uint64_t)SuggestedEventInfo);
        if (([v114 isEqualToDate:v113] & 1) == 0) {
          CalSuggestedEventInfoSetTimestamp((uint64_t)SuggestedEventInfo);
        }
        CFRelease(SuggestedEventInfo);

        uint64_t v40 = v169;
      }
      long long v179 = 0u;
      long long v180 = 0u;
      long long v177 = 0u;
      long long v178 = 0u;
      id v115 = [v40 relatedTo];
      uint64_t v116 = [v115 countByEnumeratingWithState:&v177 objects:v189 count:16];
      if (v116)
      {
        uint64_t v117 = v116;
        v118 = v102;
        uint64_t v119 = *(void *)v178;
        uint64_t v120 = *MEMORY[0x1E4FB8250];
        while (2)
        {
          for (uint64_t k = 0; k != v117; ++k)
          {
            if (*(void *)v178 != v119) {
              objc_enumerationMutation(v115);
            }
            uint64_t v122 = *(void **)(*((void *)&v177 + 1) + 8 * k);
            int v123 = [v122 parameterValueForName:v120];
            id v124 = v123;
            if (v123 && [v123 longValue] == 1)
            {
              CFArrayRef v125 = [v122 value];

              goto LABEL_133;
            }
          }
          uint64_t v117 = [v115 countByEnumeratingWithState:&v177 objects:v189 count:16];
          if (v117) {
            continue;
          }
          break;
        }
        CFArrayRef v125 = 0;
LABEL_133:
        a3 = v170;
        CFArrayRef v102 = v118;
      }
      else
      {
        CFArrayRef v125 = 0;
      }

      int v171 = (void *)CalEventCopyRecurrenceSet((uint64_t)a3);
      if ((CalEqualStrings() & 1) == 0) {
        CalEventSetRecurrenceSet((uint64_t)a3);
      }
      if ((v166 & 0x800000) != 0)
      {
        CFIndex v126 = objc_msgSend(v169, "x_apple_etag");
        CalEventSetExternalModificationTag(a3, v126);

        CFIndex v127 = objc_msgSend(v169, "x_apple_scheduletag");
        CalEventSetExternalScheduleID(a3, v127);
      }
      if ((v166 & 2) != 0)
      {
        uint64_t v128 = CalEventCopyCalendar(a3);
        if (v128)
        {
          v129 = (const void *)v128;
          CalCalendarItemSetupOrganizerAndSelfAttendeeForImportedItem((uint64_t)a3, v128, v163);
          CFRelease(v129);
        }
        else
        {
          v130 = (id)CDBiCalendarConversionHandle;
          if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_1A8E81000, v130, OS_LOG_TYPE_DEBUG, "No calendar; skipping setting self attendee and organizer properties during iMIP import",
              buf,
              2u);
          }
        }
        BOOL IsPhantomMaster = CalCalendarItemIsPhantomMaster((uint64_t)a3);
        int IsNew = CalEntityIsNew((BOOL)a3);
        BOOL IsInvite = CalEventIsInvite((uint64_t)a3);
        CFTypeRef v134 = CalCalendarItemCopySelfAttendee((uint64_t)a3);
        if (v134)
        {
          CFRelease(v134);
          if (((IsPhantomMaster | IsNew ^ 1) & 1) == 0 && IsInvite)
          {
            CFTypeRef v135 = CalCalendarItemCopyOrganizer((uint64_t)a3);
            if (v135)
            {
              uint64_t v136 = v135;
              CalParticipantSetScheduleAgent((uint64_t)v135, 1u);
              CFRelease(v136);
            }
          }
        }
      }
      objc_msgSend(v169, "x_apple_special_day");
      uint64_t v137 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v137) {
        CalEventSetSpecialDayString((uint64_t)a3, v137);
      }
      objc_msgSend(v169, "x_apple_creator_identity");
      long long v138 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v138) {
        CalEventSetCreatorIdentityString((uint64_t)a3, v138);
      }
      objc_msgSend(v169, "x_apple_creator_team_identity");
      long long v139 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v139) {
        CalEventSetCreatorTeamIdentityString((uint64_t)a3, v139);
      }
      if ((v166 & 0x800000) != 0)
      {
        long long v140 = objc_msgSend(v169, "x_apple_ews_itemid");

        if (v140)
        {
          id v141 = objc_msgSend(v169, "x_apple_ews_itemid");
          objc_msgSend(v169, "x_apple_ews_changekey");
          uint64_t v142 = v168 = v102;
          uint64_t v143 = objc_msgSend(v169, "x_apple_ews_permission");
          uint64_t v144 = (uint64_t)a3;
          long long v145 = v143;
          CalSetEWSComponentsOnCalCalendarItem(v144, v141, v142, v143);

          CFArrayRef v102 = v168;
        }
      }

      id v16 = v155;
      id v17 = v163;
      id v18 = v160;
      goto LABEL_160;
    }
    uint64_t v26 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1A8E81000, v26, OS_LOG_TYPE_DEBUG, "Cannot update a NULL Cal event", buf, 2u);
    }
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v24 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_DEBUG, "icsEvent is nil. There's nothing for us to do", buf, 2u);
    }
    uint64_t v25 = 1;
  }
LABEL_161:

  return v25;
}

id ICSEventFromCalEventFixUpCalEventWithOptions(id a1, int a2, unint64_t a3)
{
  id v3 = a1;
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4FB7F58]);
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    CFArrayRef v7 = CalEventCopyDetachedEvents((uint64_t)v3);
    id v114 = v6;
    if (v7)
    {
      CFArrayRef v8 = v7;
      if (CFArrayGetCount(v7))
      {
        CFIndex Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          CFIndex v10 = Count;
          for (CFIndex i = 0; i != v10; ++i)
          {
            uint64_t v12 = (void *)MEMORY[0x1E4F1C9C8];
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
            uint64_t v14 = [v12 dateWithTimeIntervalSinceReferenceDate:CalEventGetOriginalStartDate((uint64_t)ValueAtIndex)];
            [v6 addObject:v14];
          }
        }
      }
      [v5 setObject:v6 forKey:@"ItemBridgeExceptionDates"];
      CFRelease(v8);
    }
    else
    {
      [v5 setObject:v6 forKey:@"ItemBridgeExceptionDates"];
    }
    CalEventCopyStartDate((uint64_t)v3);
    BOOL IsAllDay = CalEventIsAllDay((uint64_t)v3);
    id v16 = [NSNumber numberWithBool:IsAllDay];
    [v5 setObject:v16 forKey:@"ItemBridgeIsAllDay"];

    CFTypeRef v17 = CalEventCopyOriginalEvent((uint64_t)v3);
    id v18 = v17;
    id v115 = v5;
    if (v17)
    {
      int UID = CalEventGetUID(v17);
      if (UID != CalEventGetUID(v3))
      {
        BOOL v20 = CalEventIsAllDay((uint64_t)v18);
        char v21 = 0;
LABEL_14:
        double started = (void *)CalCalendarItemCopyStartTimeZone((uint64_t)v3);
        uint64_t v23 = started;
        if (IsAllDay)
        {

          uint64_t v23 = 0;
        }
        else if (started)
        {
          [v115 setObject:started forKey:@"ItemBridgeStartDateTimezone"];
        }
        EndCFDateRef Date = CalEventGetEndDate((uint64_t)v3);
        uint64_t v25 = (void *)CalCalendarItemCopyEndTimeZone((uint64_t)v3);
        v110 = v25;
        if (IsAllDay)
        {
          CFDateRef v26 = CFDateCreate(0, EndDate + 1.0);
          ICSFloatingDateOnlyFromCFDate((uint64_t)v26, v25);
        }
        else
        {
          CFDateRef v26 = CFDateCreate(0, EndDate);
          ICSDateFromCFDate((uint64_t)v26, v25);
        uint64_t v27 = };
        if (v26) {
          CFRelease(v26);
        }
        [v4 setDtend:v27];
        Originaldouble StartDate = CalEventGetOriginalStartDate((uint64_t)v3);
        CFDateRef v29 = CFDateCreate(0, OriginalStartDate);
        if (fabs(OriginalStartDate) >= 2.22044605e-16
          && vabdd_f64(OriginalStartDate, *MEMORY[0x1E4F57888]) >= 2.22044605e-16)
        {
          uint64_t v30 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 134217984;
            double v118 = OriginalStartDate;
            _os_log_impl(&dword_1A8E81000, v30, OS_LOG_TYPE_DEBUG, "Setting a recurrence_id based on %f", buf, 0xCu);
          }
          if (v20) {
            ICSFloatingDateOnlyFromCFDate((uint64_t)v29, v23);
          }
          else {
          uint64_t v31 = ICSDateFromCFDate((uint64_t)v29, v23);
          }
          objc_msgSend(v4, "setRecurrence_id:", v31);
        }
        long long v111 = v23;
        if (v29) {
          CFRelease(v29);
        }
        CalDateTimeRelease();
        uint64_t v32 = v115;
        int v33 = a3;
        if ((CalCalendarItemUpdateICSComponent(v3, v4, v115, a3) & 1) == 0)
        {
          double v37 = (void *)CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            id v38 = v37;
            int v39 = CalEventGetUID(v3);
            *(_DWORD *)int buf = 67109120;
            LODWORD(v118) = v39;
            _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_DEBUG, "Couldn't update the calendar item components of event %d", buf, 8u);
          }
          if ((v21 & 1) == 0) {
            CFRelease(v18);
          }
          id v3 = 0;
          uint64_t v40 = v114;
          int v41 = v110;
          goto LABEL_103;
        }
        objc_msgSend(v4, "setX_apple_needs_reply:", CalEventShouldDisplayNotification((uint64_t)v3));
        if (CalCalendarItemGetAvailability((uint64_t)v3) == 1) {
          uint64_t v34 = 2;
        }
        else {
          uint64_t v34 = 1;
        }
        [v4 setTransp:v34];
        double v35 = (void *)CalEventCopyUniqueIdentifier((uint64_t)v3);
        if (v35)
        {
          uint64_t v36 = v35;
          if (v21)
          {
            [v4 setUid:v36];
          }
          else
          {
            uint64_t v44 = (__CFString *)CalEventCopyUniqueIdentifier((uint64_t)v18);
            [v4 setUid:v44];
            if (a2)
            {
              CalGetRealUIDFromRecurrenceUID(v36);
              double v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
              if (CFStringCompare(v45, v44, 0))
              {
                CalGetRecurrenceUIDFromRealUID(v44, OriginalStartDate);
                CFStringRef v46 = (__CFString *)objc_claimAutoreleasedReturnValue();
                CalEventSetUniqueIdentifier((uint64_t)v3, v46);
              }
            }
            if (v44) {
              CFRelease(v44);
            }
          }
          CFRelease(v36);
          goto LABEL_64;
        }
        if (v21)
        {
          uint64_t v36 = [MEMORY[0x1E4FB7F18] makeUID];
          [v4 setUid:v36];
          uint64_t v42 = CDBiCalendarConversionHandle;
          if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_62;
          }
          *(_DWORD *)int buf = 138412290;
          double v118 = *(double *)&v36;
          uint64_t v43 = "This event has no original event. Creating a new uid %@";
        }
        else
        {
          CFStringRef v47 = (void *)CalEventCopyUniqueIdentifier((uint64_t)v18);
          if (v47)
          {
            double v48 = v47;
            double v49 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 138412290;
              double v118 = *(double *)&v48;
              _os_log_impl(&dword_1A8E81000, v49, OS_LOG_TYPE_DEBUG, "Using uid from owning event: %@", buf, 0xCu);
            }
            [v4 setUid:v48];
            CalGetRecurrenceUIDFromRealUID(v48, OriginalStartDate);
            uint64_t v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
            CFRelease(v48);
            goto LABEL_62;
          }
          uint64_t v36 = [MEMORY[0x1E4FB7F18] makeUID];
          [v4 setUid:v36];
          uint64_t v42 = CDBiCalendarConversionHandle;
          if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
LABEL_62:
            if (a2) {
              CalEventSetUniqueIdentifier((uint64_t)v3, v36);
            }
LABEL_64:

            if ((v21 & 1) == 0) {
              CFRelease(v18);
            }
            uint64_t v40 = v114;
            if ((a3 & 0x41000) == 0)
            {
              int v50 = (void *)CalEventCopyResponseComment((uint64_t)v3);
              if (v50) {
                objc_msgSend(v4, "setX_calendarserver_private_comment:", v50);
              }
            }
            double v51 = (void *)CalEventCopyTravelTime((uint64_t)v3);
            double v52 = v51;
            if (v51)
            {
              uint64_t v53 = [v51 integerValue];
              if (v53 < 1)
              {
                objc_msgSend(v4, "setX_apple_travel_duration:", 0);
              }
              else
              {
                uint64_t v54 = v53;
                id v55 = objc_alloc_init(MEMORY[0x1E4FB7FA0]);
                uint64_t v56 = (void *)[objc_alloc(MEMORY[0x1E4FB7F50]) initWithWeeks:0 days:0 hours:0 minutes:0 seconds:v54];
                [v55 setDuration:v56];
                objc_msgSend(v4, "setX_apple_travel_duration:", v55);
              }
            }
            int TravelAdvisoryBehavior = CalEventGetTravelAdvisoryBehavior((uint64_t)v3);
            unsigned int v108 = v52;
            if (TravelAdvisoryBehavior == 1)
            {
              uint64_t v58 = (id *)MEMORY[0x1E4FB7EC0];
            }
            else
            {
              if (TravelAdvisoryBehavior != 2) {
                goto LABEL_80;
              }
              uint64_t v58 = (id *)MEMORY[0x1E4FB7EB8];
            }
            id v59 = *v58;
            if (v59)
            {
              CFIndex v106 = v59;
              id v60 = (void *)[objc_alloc(MEMORY[0x1E4FB7F98]) initWithString:v59];
              objc_msgSend(v4, "setX_apple_travel_advisory_behavior:", v60);

LABEL_81:
              CFTypeRef v61 = CalEventCopySuggestedEventInfo((uint64_t)v3);
              CFURLRef v109 = v27;
              if (v61)
              {
                uint64_t v62 = v61;
                uint64_t v63 = (void *)CalSuggestedEventInfoCopyOpaqueKey((uint64_t)v61);
                uint64_t v64 = (void *)CalSuggestedEventInfoCopyUniqueKey((uint64_t)v62);
                id v65 = CalSuggestedEventInfoGetTimestamp((uint64_t)v62);
                objc_msgSend(v4, "setX_apple_suggestionInfoOpaqueKey:", v63);
                objc_msgSend(v4, "setX_apple_suggestionInfoUniqueKey:", v64);
                objc_msgSend(v4, "setX_apple_suggestionInfoChangesAcknowledged:", CalSuggestedEventInfoGetChangesAcknowledged((uint64_t)v62));
                objc_msgSend(v4, "setX_apple_suggestionInfoChangedFields:", CalSuggestedEventInfoGetChangedFields((uint64_t)v62));
                if (v65)
                {
                  uint64_t v66 = [MEMORY[0x1E4F1C9A8] currentCalendar];
                  [MEMORY[0x1E4F1CAF0] timeZoneForSecondsFromGMT:0];
                  CFArrayRef v67 = v104 = v63;
                  [v66 setTimeZone:v67];

                  [v66 components:252 fromDate:v65];
                  CFMutableArrayRef v68 = v102 = v65;
                  id v101 = objc_alloc(MEMORY[0x1E4FB7F28]);
                  uint64_t v100 = [v68 year];
                  uint64_t v99 = [v68 month];
                  uint64_t v69 = [v68 day];
                  uint64_t v70 = [v68 hour];
                  uint64_t v71 = [v68 minute];
                  uint64_t v72 = [v68 second];
                  [v66 timeZone];
                  v73 = uint64_t v103 = v64;
                  uint64_t v74 = v70;
                  uint64_t v40 = v114;
                  uint64_t v75 = (void *)[v101 initWithYear:v100 month:v99 day:v69 hour:v74 minute:v71 second:v72 timeZone:v73];
                  objc_msgSend(v4, "setX_apple_suggestionInfoTimestamp:", v75);

                  uint64_t v63 = v104;
                  uint64_t v64 = v103;

                  id v65 = v102;
                  int v33 = a3;
                }
                CFRelease(v62);
              }
              uint64_t v76 = (void *)CalEventCopySpecialDayString((uint64_t)v3);
              objc_msgSend(v4, "setX_apple_special_day:", v76);
              CFTypeRef v77 = (void *)CalEventCopyCreatorIdentityString((uint64_t)v3);
              objc_msgSend(v4, "setX_apple_creator_identity:", v77);
              uint64_t v78 = (void *)CalEventCopyCreatorTeamIdentityString((uint64_t)v3);
              objc_msgSend(v4, "setX_apple_creator_team_identity:", v78);
              CFMutableArrayRef v113 = v77;
              if ((v33 & 0x40000) == 0)
              {
                CFMutableArrayRef v79 = CalCalendarItemCopyAttendees((uint64_t)v3);
                if (v79)
                {
                  CFArrayRef v80 = v79;
                  id v105 = v76;
                  id v81 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  CFIndex v82 = CFArrayGetCount(v80);
                  if (v82 >= 1)
                  {
                    CFIndex v83 = v82;
                    for (CFIndex j = 0; j != v83; ++j)
                    {
                      int v85 = CFArrayGetValueAtIndex(v80, j);
                      id v86 = ICSUserAddressFromCalAttendee((uint64_t)v85);
                      CFMutableArrayRef v87 = ICSAttendeeCommentFromCalAttendee((uint64_t)v85, v86);
                      if (v87) {
                        [v81 addObject:v87];
                      }
                    }
                  }
                  if ([v81 count]) {
                    objc_msgSend(v4, "setX_calendarserver_attendee_comment:", v81);
                  }
                  CFRelease(v80);

                  CFTypeRef v77 = v113;
                  uint64_t v40 = v114;
                  uint64_t v76 = v105;
                }
              }
              int v88 = (void *)CalEventCopyRecurrenceSet((uint64_t)v3);
              if (v88)
              {
                id v89 = (void *)[objc_alloc(MEMORY[0x1E4FB7F70]) initWithValue:v88 type:5007];
                int v90 = [MEMORY[0x1E4FB7F80] relationshipParameterFromCode:1];
                [v89 setParameterValue:v90 forName:*MEMORY[0x1E4FB8250]];
                CFIndex v91 = [v4 relatedTo];
                CFStringRef v92 = v91;
                if (v91)
                {
                  uint64_t v93 = [v91 arrayByAddingObject:v89];
                }
                else
                {
                  uint64_t v116 = v89;
                  uint64_t v93 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v116 count:1];
                }
                int v94 = (void *)v93;
                [v4 setRelatedTo:v93];

                CFTypeRef v77 = v113;
                uint64_t v40 = v114;
              }
              uint64_t v95 = (void *)CalCalendarItemCopyExternalRepresentation((uint64_t)v3);
              if (v95)
              {
                +[CalItemMetadata metadataWithData:v95];
                unsigned int v97 = v96 = v76;
                [v97 applyToComponent:v4];

                uint64_t v76 = v96;
              }
              id v3 = v4;

              uint64_t v32 = v115;
              uint64_t v27 = v109;
              int v41 = v110;
LABEL_103:

              goto LABEL_104;
            }
LABEL_80:
            CFIndex v106 = 0;
            goto LABEL_81;
          }
          *(_DWORD *)int buf = 138412290;
          double v118 = *(double *)&v36;
          uint64_t v43 = "Owning event had no uid. Creating a new one: %@";
        }
        _os_log_impl(&dword_1A8E81000, v42, OS_LOG_TYPE_DEBUG, v43, buf, 0xCu);
        goto LABEL_62;
      }
      CFRelease(v18);
      id v18 = 0;
    }
    BOOL v20 = 0;
    char v21 = 1;
    goto LABEL_14;
  }
LABEL_104:
  return v3;
}

id ICSEventFromCalEvent(void *a1, unint64_t a2)
{
  return ICSEventFromCalEventFixUpCalEventWithOptions(a1, 1, a2);
}

id ICSEventFromCalEventFixUpCalEvent(void *a1, int a2)
{
  return ICSEventFromCalEventFixUpCalEventWithOptions(a1, a2, 0);
}

void sub_1A8F25888(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v3 = objc_begin_catch(exception_object);
    id v4 = [v2 logHandle];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      +[CalExchangeCalendarExternalRepresentation dictionaryWithExternalRepresentationData:]((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
    }

    objc_end_catch();
    JUMPOUT(0x1A8F2583CLL);
  }
  _Unwind_Resume(exception_object);
}

void _CalSaveLazyString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v6 = *(void *)CPRecordGetClass();
  PropertyDescriptor = (void *)CPRecordGetPropertyDescriptor();
  CFStringRef v8 = CFStringCreateWithFormat(v5, 0, @"UPDATE %s SET %s = ? WHERE ROWID = ?", v6, *PropertyDescriptor);
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a3)
      {
        if (*(void *)(*(void *)a3 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    CFIndex v11 = (uint64_t **)v10;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CFStringRef Property = (const __CFString *)CPRecordGetProperty();
    if (Property && (v14 = Property, uint64_t Length = CFStringGetLength(Property), Length >= 1))
    {
      CFIndex v16 = Length;
      usedBufLeCFIndex n = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      CFTypeRef v17 = (UInt8 *)malloc_type_malloc(usedBufLen + 1, 0x953772EuLL);
      v25.locatioCFIndex n = 0;
      v25.length = v16;
      CFStringGetBytes(v14, v25, 0x8000100u, 0, 0, v17, usedBufLen, &usedBufLen);
      v17[usedBufLen] = 0;
      sqlite3_bind_text((sqlite3_stmt *)v11[1], 1, (const char *)v17, -1, MEMORY[0x1E4F14838]);
    }
    else
    {
      sqlite3_bind_null((sqlite3_stmt *)v11[1], 1);
    }
    id v18 = (sqlite3_stmt *)v11[1];
    int ID = CPRecordGetID();
    sqlite3_bind_int(v18, 2, ID);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        uint64_t v20 = **v11;
        if (v20)
        {
          if (*(void *)(v20 + 104))
          {
            char v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21) {
              os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        uint64_t v22 = **v11;
        if (v22)
        {
          if (*(void *)(v22 + 104))
          {
            uint64_t v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23) {
              os_unfair_lock_assert_owner(v23 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (v8) {
    CFRelease(v8);
  }
}

void _CalLoadLazyData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v6 = *(void *)CPRecordGetPropertyDescriptor();
  Class = (void *)CPRecordGetClass();
  CFStringRef v8 = CFStringCreateWithFormat(v5, 0, @"SELECT %s FROM %s WHERE ROWID = ?", v6, *Class);
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a3)
    {
      if (*(void *)(*(void *)a3 + 104))
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(sqlite3_stmt **)(v10 + 8);
    int ID = CPRecordGetID();
    sqlite3_bind_int(v12, 1, ID);
    if (sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) != 100)
    {
LABEL_23:
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v11)
        {
          uint64_t v19 = **(void **)v11;
          if (v19)
          {
            if (*(void *)(v19 + 104))
            {
              uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20) {
                os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
      goto LABEL_30;
    }
    unsigned int v14 = sqlite3_column_bytes(*(sqlite3_stmt **)(v11 + 8), 0);
    id v15 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v11 + 8), 0);
    if (v14) {
      BOOL v16 = v15 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      CFDataRef v17 = 0;
      if (a1)
      {
LABEL_17:
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            id v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18) {
              os_unfair_lock_assert_owner(v18 + 20);
            }
          }
        }
      }
    }
    else
    {
      CFDataRef v17 = CFDataCreate(v5, v15, v14);
      if (a1) {
        goto LABEL_17;
      }
    }
    CPRecordInitializeProperty();
    if (v17) {
      CFRelease(v17);
    }
    goto LABEL_23;
  }
LABEL_30:
  if (v8)
  {
    CFRelease(v8);
  }
}

void _CalSaveLazyData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v6 = *(void *)CPRecordGetClass();
  PropertyDescriptor = (void *)CPRecordGetPropertyDescriptor();
  CFStringRef v8 = CFStringCreateWithFormat(v5, 0, @"UPDATE %s SET %s = ? WHERE ROWID = ?", v6, *PropertyDescriptor);
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a3)
      {
        if (*(void *)(*(void *)a3 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    uint64_t v11 = (uint64_t **)v10;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CFDataRef Property = (const __CFData *)CPRecordGetProperty();
    if (Property && (v14 = Property, CFIndex Length = CFDataGetLength(Property), (unint64_t)(Length - 1) <= 0x7FFFFFFE))
    {
      int v16 = Length;
      BytePtr = CFDataGetBytePtr(v14);
      sqlite3_bind_blob((sqlite3_stmt *)v11[1], 1, BytePtr, v16, 0);
    }
    else
    {
      sqlite3_bind_null((sqlite3_stmt *)v11[1], 1);
    }
    id v18 = (sqlite3_stmt *)v11[1];
    int ID = CPRecordGetID();
    sqlite3_bind_int(v18, 2, ID);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        uint64_t v20 = **v11;
        if (v20)
        {
          if (*(void *)(v20 + 104))
          {
            char v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21) {
              os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        uint64_t v22 = **v11;
        if (v22)
        {
          if (*(void *)(v22 + 104))
          {
            uint64_t v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23) {
              os_unfair_lock_assert_owner(v23 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (v8)
  {
    CFRelease(v8);
  }
}

uint64_t locationInverseRelationShouldChange(uint64_t a1, const void *a2, int a3)
{
  uint64_t Owner = CalRelationGetOwner(a1);
  uint64_t result = _CalEntityIsOfType(a2, 2);
  if (result)
  {
    switch(a3)
    {
      case 'c':
        CFTypeRef Location = _CalCalendarItemGetLocation((uint64_t)a2);
        break;
      case 'd':
        CFTypeRef Location = _CalCalendarItemGetClientLocation((uint64_t)a2);
        break;
      case 'e':
        CFTypeRef Location = _CalCalendarItemGetStartLocation((uint64_t)a2);
        break;
      case 'f':
        CFTypeRef Location = _CalCalendarItemGetEndLocation((uint64_t)a2);
        break;
      default:
        CFTypeRef Location = 0;
        break;
    }
    return Location && Location == (CFTypeRef)Owner;
  }
  return result;
}

void _CalLocationPrepareForSave(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  uint64_t v5 = CPRecordGetProperty();
  CalRelationOwnerWillSave(v5);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  uint64_t v7 = CPRecordGetProperty();
  CalRelationOwnerWillSave(v7);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
  }
  uint64_t v9 = CPRecordGetProperty();
  CalRelationOwnerWillSave(v9);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  uint64_t v11 = CPRecordGetProperty();
  CalRelationOwnerWillSave(v11);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  int v13 = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFDataRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  int v15 = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  int v17 = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        id v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  int v19 = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  int v21 = CPRecordGetProperty();
  int ID = CPRecordGetID();
  if (ID >= 1 && v13 <= 0 && v15 <= 0 && v17 <= 0 && v19 <= 0 && v21 <= 0)
  {
    int v23 = ID;
    uint64_t v24 = (id)CDBLogHandle;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFRange v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v25) {
              os_unfair_lock_assert_owner(v25 + 20);
            }
          }
        }
      }
      Originaluint64_t Property = CPRecordGetOriginalProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFDateRef v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v26) {
              os_unfair_lock_assert_owner(v26 + 20);
            }
          }
        }
      }
      int v30 = CPRecordGetOriginalProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v27) {
              os_unfair_lock_assert_owner(v27 + 20);
            }
          }
        }
      }
      int v28 = CPRecordGetOriginalProperty();
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        CFDateRef v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29) {
          os_unfair_lock_assert_owner(v29 + 20);
        }
      }
      *(_DWORD *)int buf = 67111424;
      int v33 = v23;
      __int16 v34 = 1024;
      int v35 = v13;
      __int16 v36 = 1024;
      int v37 = v15;
      __int16 v38 = 1024;
      int v39 = v17;
      __int16 v40 = 1024;
      int v41 = v19;
      __int16 v42 = 1024;
      int v43 = v21;
      __int16 v44 = 1024;
      int v45 = OriginalProperty;
      __int16 v46 = 1024;
      int v47 = v30;
      __int16 v48 = 1024;
      int v49 = v28;
      __int16 v50 = 1024;
      int v51 = CPRecordGetOriginalProperty();
      _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_ERROR, "Location is being saved with no valid inverse relationship. location id = %i; alarm_owner_id = %i; item_owner_id"
        " = %i; start_location_owner_id = %i; end_location_owner_id = %i; client_location_owner_id = %i; previous alarm_o"
        "wner_id = %i; previous location_owner_id = %i; previous start_location_owner_id = %i; previous client_location_owner_id = %i;",
        buf,
        0x3Eu);
    }
  }
}

uint64_t _CalLocationPropertyDidChange(uint64_t result, unsigned int a2)
{
  if (a2 > 9) {
    goto LABEL_54;
  }
  uint64_t result = (uint64_t)_CalLocationGetOwner(result);
  if (!result) {
    goto LABEL_54;
  }
  id v3 = (const void *)result;
  if (_CalEntityIsOfType((const void *)result, 4))
  {
    if (!CDBLockingAssertionsEnabled) {
      goto LABEL_47;
    }
    if (!CPRecordGetStore()) {
      goto LABEL_47;
    }
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context) {
      goto LABEL_47;
    }
    goto LABEL_7;
  }
  if (!_CalEntityIsOfType(v3, 101)) {
    goto LABEL_48;
  }
  int ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6) {
        os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  int Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      CFStringRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  int v9 = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  int v11 = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  int v13 = CPRecordGetProperty();
  if (ID == Property)
  {
    if (!CDBLockingAssertionsEnabled) {
      goto LABEL_47;
    }
    if (!CPRecordGetStore()) {
      goto LABEL_47;
    }
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context) {
      goto LABEL_47;
    }
    goto LABEL_7;
  }
  if (ID == v9)
  {
    if (!CDBLockingAssertionsEnabled) {
      goto LABEL_47;
    }
    if (!CPRecordGetStore()) {
      goto LABEL_47;
    }
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context) {
      goto LABEL_47;
    }
    goto LABEL_7;
  }
  if (ID == v11)
  {
    if (!CDBLockingAssertionsEnabled) {
      goto LABEL_47;
    }
    if (!CPRecordGetStore()) {
      goto LABEL_47;
    }
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context) {
      goto LABEL_47;
    }
    goto LABEL_7;
  }
  if (ID != v13) {
    goto LABEL_48;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
LABEL_7:
      }
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
LABEL_47:
  CPRecordMarkPropertyChanged();
LABEL_48:
  uint64_t result = _CalEntityIsNew((BOOL)v3);
  if ((result & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFDataRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    uint64_t result = CPRecordMarkChanged();
  }
LABEL_54:
  if (a2 <= 8 && ((1 << a2) & 0x15C) != 0)
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return _CalDatabaseSetChangeFlags(DatabaseForRecord, 8);
  }
  return result;
}

void CalLocationInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalLocationClass, (const char **)&kCalLocationIndexes, 0);
}

void CalLocationMigrateTables(uint64_t a1, void *a2, unsigned int a3)
{
  if ((int)a3 > 62)
  {
    if (a3 > 0x3EE6) {
      return;
    }
    CalMigrateTableFull(a2, (const char **)&kCalLocationClass, 0, (const char **)&kCalLocationPropertyDBVersions, 0, (const char **)&kCalLocationIndexes, 0, 0, a3);
    if (a3 > 0x2EE6) {
      return;
    }
  }
  else
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalLocationClass, (const char **)&kCalLocationIndexes, 0);
  }
  CalPerformSQLWithConnection(a2, @"UPDATE Location SET start_loc_owner_id = item_owner_id, item_owner_id = NULL WHERE rowid in (SELECT location.rowid FROM location INNER JOIN calendaritem ON calendaritem.start_location_id=location.rowid);");
  CalPerformSQLWithConnection(a2, @"UPDATE Location SET client_loc_owner_id = item_owner_id, item_owner_id = NULL WHERE rowid in (SELECT location.rowid FROM location INNER JOIN calendaritem ON calendaritem.client_location_id=location.rowid);");
}

CFTypeRef _CalLocationHasValidParent(uint64_t a1)
{
  CFTypeRef result = _CalLocationGetOwner(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalLocationCleanUpDanglingEntities(uint64_t a1, void *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM Location WHERE item_owner_id > 0 AND item_owner_id NOT IN (SELECT ROWID FROM CalendarItem);",
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM Location WHERE alarm_owner_id > 0 AND alarm_owner_id NOT IN (SELECT ROWID FROM Alarm);",
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM Location WHERE start_loc_owner_id > 0 AND start_loc_owner_id NOT IN (SELECT ROWID FROM CalendarItem);",
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM Location WHERE end_loc_owner_id > 0 AND end_loc_owner_id NOT IN (SELECT ROWID FROM CalendarItem);",
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM Location WHERE client_loc_owner_id > 0 AND client_loc_owner_id NOT IN (SELECT ROWID FROM CalendarItem);",
    0);
}

uint64_t _CalLocationGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

const void *_CalDatabaseCreateLocation(uint64_t a1)
{
  uint64_t v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 14);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateLocation(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFTypeRef Location = _CalDatabaseCreateLocation((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Location;
}

const void *_CalLocationCopy(uint64_t a1, uint64_t a2)
{
  CFTypeRef Location = _CalDatabaseCreateLocation(a1);
  BOOL v4 = Location;
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = Location == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      int v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFDataRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        id v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18) {
          os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21) {
          os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
  }
  uint64_t v23 = CPRecordCopyProperty();
  if (v23)
  {
    uint64_t v24 = (const void *)v23;
    if (CDBLockingAssertionsEnabled)
    {
      if (v4)
      {
        if (CPRecordGetStore())
        {
          CFRange v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v25) {
            os_unfair_lock_assert_owner(v25 + 20);
          }
        }
      }
    }
    CPRecordSetProperty();
    CFRelease(v24);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFDateRef v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26) {
          os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

void *_CalRemoveLocation(const void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef Owner = _CalLocationGetOwner((uint64_t)a1);
  if (Owner)
  {
    uint64_t v3 = (uint64_t)Owner;
    if (_CalEntityIsOfType(Owner, 101))
    {
      int ID = CPRecordGetID();
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
      int Property = CPRecordGetProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7) {
            os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      int v8 = CPRecordGetProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
      int v10 = CPRecordGetProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          BOOL v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11) {
            os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
      int v12 = CPRecordGetProperty();
      if (ID == Property)
      {
        return _CalCalendarItemSetLocation(v3, 0);
      }
      else if (ID == v8)
      {
        return _CalCalendarItemSetClientLocation(v3, 0);
      }
      else if (ID == v10)
      {
        return _CalCalendarItemSetStartLocation(v3, 0);
      }
      else if (ID == v12)
      {
        return _CalCalendarItemSetEndLocation(v3, 0);
      }
      else
      {
        int v15 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          int v16 = v15;
          v18[0] = 67109376;
          v18[1] = CPRecordGetID();
          __int16 v19 = 1024;
          int v20 = CPRecordGetID();
          _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_ERROR, "Location to be removed (%i) has an owner of calendar item %i, but that calendar item doesn't reference that location.", (uint8_t *)v18, 0xEu);
        }
        uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
        return (void *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
      }
    }
    else
    {
      return _CalAlarmSetLocation(v3, 0);
    }
  }
  else
  {
    uint64_t v14 = CalGetDatabaseForRecord();
    return (void *)_CalDatabaseRemoveEntity(v14, a1);
  }
}

void CalRemoveLocation(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveLocation(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalLocationSetTitle(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  _CalLocationInvaliateOwnerDetectedConferenceURL(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *_CalLocationInvaliateOwnerDetectedConferenceURL(uint64_t a1)
{
  CFTypeRef result = _CalLocationGetOwner(a1);
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    CFTypeRef result = (const void *)_CalEntityIsOfType(result, 101);
    if (result)
    {
      return (const void *)_CalEventInvalidateDetectedConferenceURL(v2);
    }
  }
  return result;
}

uint64_t CalLocationCopyTitle(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalEventCopySummary(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalLocationSetAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  _CalLocationInvaliateOwnerDetectedConferenceURL(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalLocationCopyAddress(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalLocationCopyAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalLocationCopyAddress(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFTypeRef _CalLocationCopyFullDisplayString(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)_CalEventCopySummary(a1);
    uint64_t v3 = (void *)_CalLocationCopyAddress(a1);
    BOOL v4 = (const void *)[MEMORY[0x1E4F57740] fullDisplayStringWithTitle:v2 address:v3];
    if (v4) {
      CFTypeRef v5 = CFRetain(v4);
    }
    else {
      CFTypeRef v5 = 0;
    }
  }
  else
  {
    uint64_t v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "NULL 'location' given.  Will not return a full display string.", v8, 2u);
    }
    return 0;
  }
  return v5;
}

CFTypeRef CalLocationCopyFullDisplayString(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef v3 = _CalLocationCopyFullDisplayString(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalLocationSetRouting(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyRouting(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalLocationSetCoordinates(uint64_t a1, CFNumberRef a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (!a2)
  {
    CFNumberRef v5 = 0;
    LOBYTE(v6) = 1;
    if (!a1) {
      goto LABEL_10;
    }
LABEL_6:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    goto LABEL_10;
  }
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, a2);
  a2 = CFNumberCreate(0, kCFNumberDoubleType, (char *)a2 + 8);
  BOOL v6 = a2 == 0;
  if ((v5 != 0) == v6) {
    goto LABEL_16;
  }
  if (a1) {
    goto LABEL_6;
  }
LABEL_10:
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
LABEL_16:
  if (v5) {
    CFRelease(v5);
  }
  if (!v6) {
    CFRelease(a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationHasCoordinates(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFNumberRef v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v5) {
          os_unfair_lock_assert_owner(v5 + 20);
        }
      }
    }
  }
  uint64_t v6 = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  if (Property) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = !v7;
  os_unfair_lock_unlock(RecordLock);
  return v8;
}

uint64_t CalLocationGetCoordinates(uint64_t a1, uint64_t a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFNumberRef Property = (const __CFNumber *)CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  uint64_t v8 = CPRecordGetProperty();
  if (Property) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  BOOL v10 = v9 || a2 == 0;
  uint64_t v11 = !v10;
  if (!v10)
  {
    CFNumberRef v12 = (const __CFNumber *)v8;
    CFNumberGetValue(Property, kCFNumberDoubleType, (void *)a2);
    CFNumberGetValue(v12, kCFNumberDoubleType, (void *)(a2 + 8));
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v11;
}

void CalLocationSetReferenceFrame(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyReferenceFrame(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalLocationHasKnownSpatialData(uint64_t a1)
{
  if ((CalLocationHasCoordinates(a1) & 1) == 0)
  {
    uint64_t result = CalLocationCopyMapKitHandle(a1);
    if (!result) {
      return result;
    }
    CFRelease((CFTypeRef)result);
  }
  return 1;
}

uint64_t CalLocationCopyMapKitHandle(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalLocationSetRadius(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyRadius(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalLocationSetAddressBookEntityID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyAddressBookEntityID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalLocationSetMapKitHandle(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalLocationSetDerivedFrom(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyDerivedFrom(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

const void *CalDatabaseCopyLocationWithUID(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v4 = (const void *)_CalLocationGetWithUID(RecordStore);
  CFNumberRef v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalDatabaseCreateLocationSearchStatement(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 80));
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 32));
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_13;
  }
  uint64_t v8 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (!CPSqliteDatabaseRegisterMatchesSearchStringFunction())
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v8 + 104))
      {
        CFNumberRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    uint64_t v11 = CPSqliteDatabaseStatementForReading();
    int v13 = *(sqlite3_stmt **)(v11 + 8);
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
    int v15 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
    sqlite3_bind_text(v13, 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
    int v16 = *(sqlite3_stmt **)(v11 + 8);
    int v17 = (const char *)CalCreateCStringFromCFString(a2);
    sqlite3_bind_text(v16, 2, v17, -1, v15);
  }
  else
  {
LABEL_13:
    BOOL v10 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 80);
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(a1 + 32) + 80));
    }
    os_unfair_lock_unlock(v10);
    return 0;
  }
  return v11;
}

void CalDatabaseCopyLocationIdsThatMatchSearch(sqlite3_stmt **a1, uint64_t a2)
{
  int v4 = 1;
  while (1)
  {
    int v5 = sqlite3_step(a1[1]);
    if (v5 != 100) {
      break;
    }
    int v6 = sqlite3_column_int(a1[1], 0);
    if (v4 == 1 && CFArrayGetCount(*(CFArrayRef *)a2)) {
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)a2);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, (const void *)v6);
    if (**(unsigned char **)(a2 + 24)) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v4 == *(_DWORD *)(a2 + 8);
    }
    ++v4;
    if (v7)
    {
      if (!**(unsigned char **)(a2 + 24)) {
        return;
      }
      goto LABEL_15;
    }
  }
  if ((v5 - 102) > 0xFFFFFFFD || (sqlite3_errmsg(*((sqlite3 **)*a1 + 1)), CFLog(), **(unsigned char **)(a2 + 24))) {
LABEL_15:
  }
    **(unsigned char **)(a2 + 16) = 0;
}

void CalDatabaseDeleteLocationSearchStatement(uint64_t **a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        uint64_t v3 = **a1;
        if (v3)
        {
          if (*(void *)(v3 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  int v5 = (os_unfair_lock_s *)(*(void *)(a2 + 32) + 80);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5);
  }
  os_unfair_lock_unlock(v5);
}

CFTypeRef CalFilterCreateWithDatabaseShowingAll(uint64_t a1)
{
  uint64_t v1 = [[EKCalendarFilter alloc] initWithDatabase:a1];
  CFTypeRef v2 = CFRetain(v1);

  return v2;
}

CFTypeRef CalFilterCreateWithDatabaseShowingAllIncludingDisabledStores(uint64_t a1)
{
  uint64_t v1 = [[EKCalendarFilter alloc] initWithDatabase:a1];
  [(EKCalendarFilter *)v1 setIncludeDisabledStores:1];
  CFTypeRef v2 = CFRetain(v1);

  return v2;
}

CFTypeRef CalFilterCreateWithDatabaseAndEntityTypeShowingAll(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2 = [[EKCalendarFilter alloc] initWithDatabase:a1 entityType:a2];
  CFTypeRef v3 = CFRetain(v2);

  return v3;
}

CFTypeRef CalFilterCreateWithDatabaseShowingCalendars(uint64_t a1, uint64_t a2)
{
  CFTypeRef v2 = [[EKCalendarFilter alloc] initWithDatabase:a1 showingCalendars:a2];
  CFTypeRef v3 = CFRetain(v2);

  return v3;
}

CFTypeRef CalFilterCreateWithDatabaseFilteringCalendars(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v3 = [[EKCalendarFilter alloc] initWithDatabase:a1 entityType:a2 filteringCalendars:a3];
  CFTypeRef v4 = CFRetain(v3);

  return v4;
}

CFTypeRef CalFilterCreateWithDatabaseFilteringAll(uint64_t a1)
{
  id v1 = [[EKCalendarFilter alloc] initFilteringAllWithDatabase:a1];
  CFTypeRef v2 = CFRetain(v1);

  return v2;
}

void *CalFilterCopyVisibleCalendars(void *a1, uint64_t a2)
{
  CFTypeRef v2 = [a1 visibleCalendarsWithOptions:a2];
  CFTypeRef v3 = v2;
  if (v2) {
    CFRetain(v2);
  }

  return v3;
}

uint64_t CalFilterGetVisibleCalendarCount(void *a1, const char *a2)
{
  return [a1 visibleCalendarCountWithOptions:a2];
}

uint64_t CalFilterIsCalendarUIDVisible(void *a1, uint64_t a2)
{
  CFTypeRef v3 = [NSNumber numberWithInt:a2];
  uint64_t v4 = [a1 isCalendarUIDVisible:v3];

  return v4;
}

BOOL CalFilterIsSearchFilter(void *a1)
{
  id v1 = [a1 searchTerm];
  BOOL v2 = [v1 length] != 0;

  return v2;
}

void *CalFilterGetSearchTerm(void *a1)
{
  id v1 = [a1 searchTerm];
  BOOL v2 = v1;
  if (v1)
  {
    CFTypeRef v3 = CFRetain(v1);
    CFAutorelease(v3);
  }

  return v2;
}

uint64_t CalFilterSetSearchTerm(void *a1, const char *a2)
{
  return [a1 setSearchTerm:a2];
}

uint64_t CalFilterRemoveSearchInformation(void *a1, const char *a2)
{
  return [a1 setSearchTerm:0];
}

void *_CalFilterCopyQuery2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = objc_msgSend(a1, "filterQueryForKey:prefix:whereClause:creator:userInfo:", a3, a5, a6, a4);
  BOOL v7 = v6;
  if (v6) {
    CFRetain(v6);
  }

  return v7;
}

void *CalFilterCopyFilteredCalendars(void *a1)
{
  id v1 = [a1 filteredCalendars];
  BOOL v2 = v1;
  if (v1) {
    CFRetain(v1);
  }

  return v2;
}

uint64_t _CalNotificationPrepareForSave(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CalRelationOwnerWillSave(Property);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        int v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
    CFStringRef v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CFStringRef v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFNumberRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CFStringRef v13 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    CFStringRef v15 = (const __CFString *)result;
    if (v9 && (uint64_t result = CFStringGetLength(v9)) != 0
      || v11 && (uint64_t result = CFStringGetLength(v11)) != 0
      || v13 && (uint64_t result = CFStringGetLength(v13)) != 0)
    {
      if (!a2) {
        return result;
      }
    }
    else
    {
      if (!v15) {
        return result;
      }
      uint64_t result = CFStringGetLength(v15);
      if (!a2 || !result) {
        return result;
      }
    }
    uint64_t result = _CalIdentityGetID(v9, v11, v13, v15, a2);
    if (result != -1)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t _CalNotificationPropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  if (a2 == 1 && a3 == -1)
  {
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return CPRecordGetProperty();
  }
  return result;
}

void CalNotificationInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalNotificationClass, (const char **)&kCalNotificationIndexes, (const char **)&kCalNotificationChangesIndexes);
  CalMigrationCreateTriggers(a2, (const char **)&kCalNotificationClass, (const char **)&kCalNotificationTriggers);
}

void CalNotificationMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 > 77)
  {
    if (a3 <= 0x4651) {
      CalMigrateTableFull(a2, (const char **)&kCalNotificationClass, 0, (const char **)&kCalNotificationUpgradeInfo, (const char **)&kCalNotificationChangesUpgradeInfo, (const char **)&kCalNotificationIndexes, (const char **)&kCalNotificationChangesIndexes, (const char **)&kCalNotificationTriggers, a3);
    }
  }
  else
  {
    CalNotificationInitializeTables(a1, a2);
  }
}

uint64_t _CalNotificationGetEntityType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  uint64_t v3 = Property;
  if ((Property > 0x13 || ((1 << Property) & 0xB0000) == 0) && Property != 102) {
    CFLog();
  }
  return v3;
}

uint64_t CalNotificationGetEntityType(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef _CalNotificationHasValidParent(uint64_t a1)
{
  CFTypeRef result = _CalResourceChangeGetNotification(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalNotificationCleanUpDanglingEntities(uint64_t a1, void *a2)
{
  int DeletionFlags = _CalDatabaseGetDeletionFlags(a1);
  if (((DeletionFlags | _CalDatabaseGetChangeFlags(a1)) & 2) != 0)
  {
    CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM Notification WHERE calendar_id NOT IN (SELECT ROWID FROM Calendar);",
      0);
  }
}

uint64_t _CalNotificationSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

CFMutableArrayRef _CalResourceChangeNotificationCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, uint64_t a2)
{
  return _CalResourceChangeNotificationCopyChanges(a2);
}

CFMutableArrayRef _CalResourceChangeNotificationCopyChanges(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

const void *_CalDatabaseCreateNotification(uint64_t a1)
{
  return _CalCreateNotification(a1, 0x66u);
}

const void *_CalCreateNotification(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (const void *)CPRecordCreate();
  if ((a2 > 0x13 || ((1 << a2) & 0xB0000) == 0) && a2 != 102) {
    _CalCreateNotification_cold_1();
  }
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      CFStringRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = v4 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      CFStringRef v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFNumberRef v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        CFStringRef v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  if (a2 == 16)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v4)
      {
        if (CPRecordGetStore())
        {
          uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    CPRecordInitializeProperty();
  }
  CFStringRef v15 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16) {
          os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v15);
  _CalDatabaseAddEntity(a1, v4);
  return v4;
}

const void *CalDatabaseCreateNotification(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  NotificatioCFIndex n = _CalCreateNotification((uint64_t)a1, 0x66u);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Notification;
}

const void *_CalDatabaseCreateInviteReplyNotification(uint64_t a1)
{
  return _CalCreateNotification(a1, 0x10u);
}

const void *CalDatabaseCreateInviteReplyNotification(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  NotificatioCFIndex n = _CalCreateNotification((uint64_t)a1, 0x10u);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Notification;
}

const void *_CalDatabaseCreateSuggestionNotification(uint64_t a1)
{
  return _CalCreateNotification(a1, 0x13u);
}

const void *CalDatabaseCreateSuggestionNotification(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  NotificatioCFIndex n = _CalCreateNotification((uint64_t)a1, 0x13u);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Notification;
}

const void *CalDatabaseCopyNotificationWithUID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v4 = (const void *)_CalNotificationGetWithUID(RecordStore);
  int v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *_CalDatabaseCreateResourceChangeNotification(uint64_t a1)
{
  return _CalCreateNotification(a1, 0x11u);
}

const void *CalDatabaseCreateResourceChangeNotification(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  NotificatioCFIndex n = _CalCreateNotification((uint64_t)a1, 0x11u);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Notification;
}

uint64_t _CalInvalidateNotificationsWithCalendarID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalRemoveNotification(const void *a1)
{
  uint64_t result = CPRecordGetStore();
  if (result)
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context)
    {
      uint64_t v4 = Context;
      _CalDatabaseRemoveEntity(Context, a1);
      _CalDatabaseSetDeletionFlags(v4, 1024);
    }
    if (CDBLockingAssertionsEnabled)
    {
      int v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5) {
        os_unfair_lock_assert_owner(v5 + 20);
      }
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

void CalRemoveNotification(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveNotification(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalNotificationGetUID(const void *a1)
{
  if ((CalEntityIsOfType(a1, 102) & 1) == 0) {
    CalNotificationGetUID_cold_1();
  }
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalNotificationGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalNotificationGetPropertyIDWithPropertyName_sPropDict;
  if (!CalNotificationGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalNotificationGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalNotificationGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"externalID";
      int v6 = 3;
      BOOL v7 = @"UUID";
      int v8 = 5;
      CFStringRef v9 = @"externalModificationTag";
      int v10 = 4;
      CFStringRef v11 = @"calendar";
      int v12 = 14;
      CFStringRef v13 = @"summary";
      int v14 = 6;
      CFStringRef v15 = @"creationDate";
      int v16 = 7;
      int v17 = @"shareeStatus";
      int v18 = 9;
      __int16 v19 = @"hostURL";
      int v20 = 10;
      uint64_t v21 = @"inReplyTo";
      int v22 = 11;
      uint64_t v23 = @"alerted";
      int v24 = 13;
      CFRange v25 = @"inviteReplyCalendar";
      int v26 = 15;
      uint64_t v27 = @"resourceChanges";
      int v28 = 18;
      CFDateRef v29 = @"lastModifiedDate";
      int v30 = 8;
      uint64_t v31 = @"shareeDisplayName";
      int v32 = 19;
      int v33 = @"shareeURLString";
      int v34 = 20;
      int v35 = @"shareeFirstName";
      int v36 = 21;
      int v37 = @"shareeLastName";
      int v38 = 22;
      CalNotificationGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 17);
      for (uint64_t i = 256; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalNotificationGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalNotificationGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8F2ED24(_Unwind_Exception *a1)
{
  for (uint64_t i = 256; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t _CalNotificationGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t _CalNotificationGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalNotificationCopyUUID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalNotificationSetUUID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyNotificationsWithCalendar(os_unfair_lock_s *a1, int a2)
{
  if (((a2 + 1) > 0x14 || ((1 << (a2 + 1)) & 0x160001) == 0) && a2 != 102) {
    CalDatabaseCopyNotificationsWithCalendar_cold_1();
  }
  uint64_t v3 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v7 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3);
  }
  os_unfair_lock_unlock(v3);
  return v7;
}

uint64_t __CalDatabaseCopyNotificationsWithCalendar_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(sqlite3_stmt **)(a2 + 8);
  int ID = CPRecordGetID();
  uint64_t result = sqlite3_bind_int(v4, 1, ID);
  int v7 = *(_DWORD *)(a1 + 40);
  if (v7 != -1)
  {
    int v8 = *(sqlite3_stmt **)(a2 + 8);
    return sqlite3_bind_int(v8, 2, v7);
  }
  return result;
}

CFTypeRef CalDatabaseCopyNotificationWithExternalIDInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyEntityWithPropertyInCalendarOrStore(a1, a2, @"external_id", a3, a4, a5, (uint64_t)&kCalNotificationClass);
}

CFTypeRef CalDatabaseCopyNotificationWithUniqueIdentifierInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyEntityWithPropertyInCalendarOrStore(a1, a2, @"UUID", a3, a4, a5, (uint64_t)&kCalNotificationClass);
}

void CalNotificationSetExternalID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalNotificationCopyExternalID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalNotificationSetExternalModTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalNotificationCopyExternalModTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalNotificationSetSummary(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalNotificationCopySummary(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void _CalNotificationSetCreationDate(uint64_t a1, CFAbsoluteTime a2)
{
}

void CalNotificationSetCreationDate(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 7, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double CalNotificationGetCreationDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void _CalNotificationSetLastModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
}

void CalNotificationSetLastModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 8, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

double CalNotificationGetLastModifiedDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Dateuint64_t Property = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalNotificationSetHostURL(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFURLGetString(a2);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalNotificationCopyHostURL(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef v4 = (const __CFString *)CPRecordCopyProperty();
  if (v4)
  {
    CFStringRef v5 = v4;
    CFURLRef v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v5);
  }
  else
  {
    CFURLRef v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

CFTypeRef CalNotificationCopyOwner(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef v3 = _CalResourceChangeGetNotification(a1);
  CFTypeRef v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void *_CalNotificationSetOwner(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalNotificationSetOwner(uint64_t a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalNotificationSetOwner(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalNotificationSetAlerted(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalNotificationSetAlerted(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalNotificationSetAlerted(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalNotificationIsAlerted(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

uint64_t CalDatabaseCopyNotificationChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFURLRef v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v7 = _CalDatabaseCopyNotificationChangesInStore((uint64_t)a1, a2, 0xFFFFFFFFLL, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  return v7;
}

uint64_t _CalDatabaseCopyNotificationChangesInStore(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  CFURLRef v6 = (const void *)a1;
  CFStringRef v7 = _CalNotificationCreateChangeHistoryWhereClauseForStore(a1, a2, a3);
  if (a2)
  {
    CFURLRef v6 = CalCopyDatabaseForRecord();
  }
  else if (v6)
  {
    CFRetain(v6);
  }
  uint64_t v8 = _CalDatabaseCopyNotificationChangesWithWhereClause((uint64_t)v6, (uint64_t)v7, a4);
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v8;
}

uint64_t CalDatabaseRemoveNotificationChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  CFURLRef v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveNotificationChangesInStoreToIndex_block_invoke;
  v9[3] = &unk_1E5D61B08;
  v9[4] = &v11;
  v9[5] = a1;
  v9[6] = a2;
  int v10 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v9);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  uint64_t v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A8F2FCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveNotificationChangesInStoreToIndex_block_invoke(uint64_t a1)
{
  uint64_t result = _CalDatabaseRemoveNotificationChangesInStoreToIndex(*(const void **)(a1 + 40), 0xFFFFFFFFLL, *(void *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _CalDatabaseRemoveNotificationChangesInStoreToIndex(const void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    CFStringRef v5 = CalCopyDatabaseForRecord();
  }
  else
  {
    CFStringRef v5 = a1;
    CFRetain(a1);
  }
  CFStringRef v6 = _CalNotificationCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a3, a2);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)v5);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v10 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(v5);
  return v10;
}

uint64_t CalDatabaseCopyNotificationChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFStringRef v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v7 = _CalDatabaseCopyNotificationChangesInCalendar(a1, a2, 0xFFFFFFFFLL, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  return v7;
}

uint64_t _CalDatabaseCopyNotificationChangesInCalendar(CFTypeRef cf, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  if (a2)
  {
    CFTypeRef v7 = CalCopyDatabaseForRecord();
  }
  else
  {
    CFTypeRef v7 = cf;
    if (cf) {
      CFRetain(cf);
    }
  }
  CFStringRef v8 = _CalNotificationCreateChangeHistoryWhereClauseForCalendar((uint64_t)v7, a2, a3);
  uint64_t v9 = _CalDatabaseCopyNotificationChangesWithWhereClause((uint64_t)v7, (uint64_t)v8, a4);
  if (v8) {
    CFRelease(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v9;
}

uint64_t CalDatabaseRemoveNotificationChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2)
{
  CFTypeRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v5 = _CalDatabaseRemoveNotificationChangesInCalendarToIndex(a1, 0xFFFFFFFFLL, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t _CalDatabaseRemoveNotificationChangesInCalendarToIndex(const void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = CalCopyDatabaseForRecord();
  }
  else
  {
    uint64_t v5 = a1;
    CFRetain(a1);
  }
  CFStringRef v6 = _CalNotificationCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a3, a2);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)v5);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v10 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(v5);
  return v10;
}

uint64_t CalDatabaseCopyInviteReplyNotificationChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v7 = _CalDatabaseCopyNotificationChangesInStore((uint64_t)a1, a2, 16, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  return v7;
}

uint64_t CalDatabaseRemoveInviteReplyNotificationChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  CFStringRef v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveInviteReplyNotificationChangesInStoreToIndex_block_invoke;
  v9[3] = &unk_1E5D61B08;
  v9[4] = &v11;
  v9[5] = a1;
  v9[6] = a2;
  int v10 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v9);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  uint64_t v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A8F301B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveInviteReplyNotificationChangesInStoreToIndex_block_invoke(uint64_t a1)
{
  uint64_t result = _CalDatabaseRemoveNotificationChangesInStoreToIndex(*(const void **)(a1 + 40), 16, *(void *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseCopyInviteReplyNotificationChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFStringRef v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v7 = _CalDatabaseCopyNotificationChangesInCalendar(a1, a2, 16, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  return v7;
}

uint64_t CalDatabaseRemoveInviteReplyNotificationChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2)
{
  CFTypeRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v5 = _CalDatabaseRemoveNotificationChangesInCalendarToIndex(a1, 16, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v5;
}

CFTypeRef CalDatabaseCopyInviteReplyNotificationWithUUID(os_unfair_lock_s *a1)
{
  CFDictionaryRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v6 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (v6)
  {
    CFArrayRef v7 = v6;
    if (CFArrayGetCount(v6) < 1)
    {
      CFTypeRef v9 = 0;
    }
    else
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      CFTypeRef v9 = CFRetain(ValueAtIndex);
    }
    CFRelease(v7);
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v9;
}

uint64_t CalDatabaseCopyOfAllInviteReplyNotificationsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  BOOL v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (a2)
  {
    if (v7)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  else if (v7)
  {
    CFTypeRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v9) {
      os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  uint64_t v10 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v10;
}

CFTypeRef CalInviteReplyNotificationCopyInviteReplyCalendar(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property)
  {
    CFTypeRef RelatedObject = CalRelationGetRelatedObject(Property);
    CFTypeRef v6 = RelatedObject;
    if (RelatedObject) {
      CFRetain(RelatedObject);
    }
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

void CalInviteReplyNotificationSetInviteReplyCalendar(uint64_t a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalRelationSetRelatedObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalInviteReplyNotificationSetStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationGetStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalInviteReplyNotificationSetHostURL(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFURLGetString(a2);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalInviteReplyNotificationCopyHostURL(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  CFURLRef result = 0;
  if (v4)
  {
    CFURLRef v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

void CalInviteReplyNotificationSetInReplyTo(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationCopyInReplyTo(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalInviteReplyNotificationSetShareeDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationCopyShareeDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalInviteReplyNotificationSetShareeAddress(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a2) {
    CFURLGetString(a2);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFURLRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalInviteReplyNotificationCopyShareeAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  if (Property) {
    CFURLRef v5 = CFURLCreateWithString(0, Property, 0);
  }
  else {
    CFURLRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalInviteReplyNotificationSetShareeFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationCopyShareeFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalInviteReplyNotificationSetShareeLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationCopyShareeLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFArrayRef _CalResourceChangeNotificationAddChange(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void CalResourceChangeNotificationAddChange(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeNotificationAddChange(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void *_CalResourceChangeNotificationRemoveChange(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

void CalResourceChangeNotificationRemoveChange(uint64_t a1, void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeNotificationRemoveChange(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalResourceChangeNotificationRemoveAllChanges(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (void *)CPRecordGetProperty();
  if (Property)
  {
    CalToManyRelationRemoveAllObjects(Property);
  }
}

void CalResourceChangeNotificationRemoveAllChanges(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeNotificationRemoveAllChanges(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalResourceChangeNotificationCopyChanges(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalResourceChangeNotificationCopyChanges(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalDatabaseInsertSuggestionNotificationOnCalendarItemWithTypeAndChanges(uint64_t a1, const void *a2)
{
  uint64_t v4 = (void *)_CalCreateResourceChangeOfType(a1);
  if (!v4) {
    return 0;
  }
  CFURLRef v5 = v4;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v7 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Current);
  CFTypeRef Calendar = _CalCalendarItemGetCalendar((uint64_t)a2);
  _CalResourceChangeSetCalendarItem((uint64_t)v5, a2);
  _CalResourceChangeSetCalendar((uint64_t)v5, Calendar);
  _CalErrorSetUserInfo((uint64_t)v5);
  _CalResourceChangeSetChangedProperties((uint64_t)v5);
  _CalResourceChangeSetAlerted((uint64_t)v5);
  NotificatioCFIndex n = _CalCreateNotification(a1, 0x13u);
  uint64_t v10 = (uint64_t)Notification;
  if (Notification)
  {
    _CalRecordSetDateProperty((uint64_t)Notification, 7, Current);
    _CalRecordSetDateProperty(v10, 8, Current);
    _CalNotificationSetOwner(v10, Calendar);
    _CalNotificationSetAlerted(v10);
    _CalResourceChangeNotificationAddChange(v10, v5);
  }
  if (v7) {
    CFRelease(v7);
  }
  CFRelease(v5);
  return v10;
}

uint64_t _CalNotificationLoadStoreId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result != -1)
  {
    uint64_t result = CPRecordGetStore();
    if (result)
    {
      uint64_t result = _CalGetCalendarWithUID(result);
      if (result)
      {
        uint64_t result = _CalCalendarGetStoreId(result);
        if (result != -1)
        {
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v4) {
                  os_unfair_lock_assert_owner(v4 + 20);
                }
              }
            }
          }
          return CPRecordInitializeProperty();
        }
      }
    }
  }
  return result;
}

void _CalNotificationLoadIdentityProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    uint64_t Store = CPRecordGetStore();
    uint64_t IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      uint64_t v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFURLRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFDateRef v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            BOOL v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      uint64_t v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        uint64_t v10 = (const void *)v9;
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11) {
                os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

CFStringRef _CalNotificationCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v10 = 0;
  if (a2)
  {
    CFTypeRef v5 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if ((a3 & 0x80000000) != 0) {
      CFStringRef v8 = CFStringCreateWithFormat(v7, 0, @"store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class IN (%d, %d, %d) AND client_identifier = '%@')", ID, v5, v5, 16, 17, 19, v5);
    }
    else {
      CFStringRef v8 = CFStringCreateWithFormat(v7, 0, @"entity_type = %d  AND store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", a3, ID, v5, v5, a3, v5);
    }
    CFStringRef v10 = v8;
    CFRelease(v5);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v10);
  return v10;
}

uint64_t _CalDatabaseCopyNotificationChangesWithWhereClause(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

CFStringRef _CalNotificationCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v10 = 0;
  if (a2)
  {
    CFTypeRef v5 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if ((a3 & 0x80000000) != 0) {
      CFStringRef v8 = CFStringCreateWithFormat(v7, 0, @"calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class IN (%d, %d) AND client_identifier = '%@')", ID, v5, v5, 16, 17, v5);
    }
    else {
      CFStringRef v8 = CFStringCreateWithFormat(v7, 0, @"entity_type = %d  AND calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", a3, ID, v5, v5, a3, v5);
    }
    CFStringRef v10 = v8;
    CFRelease(v5);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v10);
  return v10;
}

double CalculateAlarmFireDate(uint64_t a1, uint64_t a2, double a3)
{
  double v3 = 0.0;
  if (a2 == 0x7FFFFFFFFFFFFFFFLL) {
    return v3;
  }
  if ((unint64_t)(a2 + 53999) < 0x1517F) {
    return a3 - (double)a1 + (double)a2;
  }
  CFAllocatorRef v7 = objc_opt_new();
  CFStringRef v8 = v7;
  if (a2 < 0) {
    int v9 = -1;
  }
  else {
    int v9 = 1;
  }
  if (a2 >= 0) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = -a2;
  }
  if (v10 > 0x1517F)
  {
    [v7 setDay:v10 / 0x15180 * v9];
    v10 %= 0x15180uLL;
  }
  if (a2 < 0 && v10 == 54000)
  {
    BOOL v11 = 1;
  }
  else
  {
    BOOL v11 = v10 == 32400 && a2 >= 0;
    if ((uint64_t)v10 <= 3599)
    {
      uint64_t v13 = v9;
      goto LABEL_24;
    }
  }
  uint64_t v13 = v9;
  [v8 setHour:v10 / 0xE10 * v9];
  v10 %= 0xE10uLL;
LABEL_24:
  [v8 setSecond:v10 * v13];
  char v14 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a3];
  CFStringRef v15 = CalCopyCalendar();
  int v16 = [v15 dateByAddingComponents:v8 toDate:v14 options:0];
  if (v11)
  {
    int v17 = [v15 components:254 fromDate:v16];

    [v17 setHour:9];
    uint64_t v18 = [v15 dateFromComponents:v17];

    CFStringRef v8 = v17;
    int v16 = (void *)v18;
  }
  if (a1)
  {
    __int16 v19 = [v16 dateByAddingTimeInterval:(double)-a1];
    [v19 timeIntervalSinceReferenceDate];
    double v3 = v20;
  }
  else
  {
    [v16 timeIntervalSinceReferenceDate];
    double v3 = v21;
  }

  return v3;
}

double CalEventOccurrenceCacheGetLongAlarmIntervals(void *a1, void *a2)
{
  if (CalEventOccurrenceCacheGetLongAlarmIntervals_onceToken == -1)
  {
    if (!a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&CalEventOccurrenceCacheGetLongAlarmIntervals_onceToken, &__block_literal_global_23);
  if (a1)
  {
LABEL_3:
    double result = *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longNegativeInterval;
    *a1 = CalEventOccurrenceCacheGetLongAlarmIntervals_longNegativeInterval;
  }
LABEL_4:
  if (a2)
  {
    double result = *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longPositiveInterval;
    *a2 = CalEventOccurrenceCacheGetLongAlarmIntervals_longPositiveInterval;
  }
  return result;
}

double __CalEventOccurrenceCacheGetLongAlarmIntervals_block_invoke()
{
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  uint64_t v0 = +[CDBPreferences shared];
  CalEventOccurrenceCacheGetIdealRangeInfo(v0, (uint64_t)&v4);

  [(id)v5 timeIntervalSinceDate:(void)v6];
  CalEventOccurrenceCacheGetLongAlarmIntervals_longNegativeInterval = v1;
  [*((id *)&v5 + 1) timeIntervalSinceDate:*((void *)&v4 + 1)];
  *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longNegativeInterval = *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longNegativeInterval
                                                                                + -3600.0;
  *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longPositiveInterval = v2 + -3600.0;
  __destructor_8_s0_s8_s16_s24_s32((uint64_t)&v4);
  return result;
}

void sub_1A8F32140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CalEventOccurrenceCacheGetIdealRangeInfo(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v10 = a1;
  double v3 = CalCopyCalendar();
  long long v4 = [MEMORY[0x1E4F1C9C8] CalSimulatedDateForNow];
  long long v5 = [v3 startOfDayForDate:v4];

  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)a2 = [v3 timeZone];
  long long v6 = objc_opt_new();
  [v6 setYear:-2];
  *(void *)(a2 + 8) = [v3 dateByAddingComponents:v6 toDate:v5 options:0];

  uint64_t v7 = objc_opt_new();
  [v7 setYear:2];
  *(void *)(a2 + 16) = [v3 dateByAddingComponents:v7 toDate:v5 options:0];

  CFStringRef v8 = objc_opt_new();
  [v8 setDay:-1];
  *(void *)(a2 + 24) = [v3 dateByAddingComponents:v8 toDate:v5 options:0];

  int v9 = objc_opt_new();
  [v9 setDay:15];
  *(void *)(a2 + 32) = [v3 dateByAddingComponents:v9 toDate:v5 options:0];

  *(void *)(a2 + 4 0) = CalAlarmGetGlobalDefaultTimedAlarmOffset(v10);
  *(void *)(a2 + 48) = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v10);
}

void sub_1A8F322F0(_Unwind_Exception *a1)
{
  __destructor_8_s0_s8_s16_s24_s32(v1);
  _Unwind_Resume(a1);
}

void __destructor_8_s0_s8_s16_s24_s32(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
}

void CalEventOccurrenceCacheGetIdealRangeAndTimeZone(void *a1, void *a2, void *a3)
{
  uint64_t v10 = 0;
  *(_OWORD *)CFStringRef v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  long long v6 = +[CDBPreferences shared];
  CalEventOccurrenceCacheGetIdealRangeInfo(v6, (uint64_t)v7);

  if (a1) {
    *a1 = v7[1];
  }
  if (a2) {
    *a2 = v8[0];
  }
  if (a3) {
    *a3 = v7[0];
  }
  __destructor_8_s0_s8_s16_s24_s32((uint64_t)v7);
}

void _CalAlarmCacheGetCacheRange(uint64_t a1, void *a2, void *a3)
{
  if (a2) {
    *a2 = *(id *)(a1 + 56);
  }
  if (a3) {
    *a3 = *(id *)(a1 + 64);
  }
}

void CalEventOccurrenceCacheTrimExtendAndUpdate(uint64_t a1, char a2)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  long long v4 = (id)CDBLogHandle;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_DEBUG, "Occurrence cache trim and extend requested.", buf, 2u);
  }

  if (!*(unsigned char *)(a1 + 16) || !CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24))) {
    return;
  }
  long long v5 = [MEMORY[0x1E4F1C9C8] CalSimulatedDateForNow];
  [v5 timeIntervalSinceReferenceDate];
  double v7 = v6;

  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        BOOL v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    int v12 = (void *)CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (v12)
    {
      if (!__CalDatabaseBeginWriteTransaction(*(void *)(a1 + 24), (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1401"))
      {
        double v20 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_ERROR, "EventKitOC: Unable to start transaction. Aborting trim/extend.", buf, 2u);
        }
        int v21 = 0;
        int v19 = 0;
LABEL_44:
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*(void *)(*v12 + 104))
            {
              int v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v30) {
                os_unfair_lock_assert_owner(v30 + 20);
              }
            }
          }
        }
        CPSqliteDatabaseReleaseSqliteConnection();
        if (v21)
        {
          uint64_t v31 = (id)CDBLogHandle;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)int buf = 134217984;
            CFAbsoluteTime v85 = Current - v7;
            _os_log_impl(&dword_1A8E81000, v31, OS_LOG_TYPE_DEBUG, "Trim and extend complete in %f", buf, 0xCu);
          }

          CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
          if (!v19) {
            return;
          }
LABEL_57:
          DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
          CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kCalEventOccurrenceCacheChangedNotification", *(const void **)(a1 + 24), 0, 1u);
          return;
        }
        goto LABEL_54;
      }
      uint64_t v82 = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v79 = 0u;
      CalEventOccurrenceCacheGetIdealRangeInfo(*(void **)(*(void *)(a1 + 24) + 296), (uint64_t)&v79);
      _CalEventOccurrenceCacheLoadInfo(a1);
      uint64_t v78 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v75 = 0u;
      *(void *)&double v13 = __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)&v75, a1 + 32).n128_u64[0];
      char v14 = objc_msgSend((id)v79, "isEqual:", (void)v75, v13);
      if ((v14 & 1) == 0)
      {
        CFStringRef v15 = (id)CDBLogHandle;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 138543618;
          CFAbsoluteTime v85 = *(double *)&v75;
          __int16 v86 = 2114;
          CFMutableArrayRef v87 = (void *)v79;
          _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_INFO, "Time zone changed during trim and extend. (was \"%{public}@\", now \"%{public}@\") Will do a full rebuild instead.", buf, 0x16u);
        }
      }
      if ([*((id *)&v79 + 1) isBeforeDate:*((void *)&v75 + 1)])
      {
        int v16 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 138543618;
          CFAbsoluteTime v85 = *((double *)&v75 + 1);
          __int16 v86 = 2114;
          CFMutableArrayRef v87 = (void *)*((void *)&v79 + 1);
          _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_INFO, "Occurrence cache start moved backwards (from %{public}@ to %{public}@) during trim and extend. Will do a full rebuild instead.", buf, 0x16u);
        }
      }
      else if (v14)
      {
        if ((a2 & 1) == 0)
        {
          [*((id *)&v75 + 1) timeIntervalSinceReferenceDate];
          double v23 = v22;
          [*((id *)&v79 + 1) timeIntervalSinceReferenceDate];
          double v25 = v24;
          [(id)v76 timeIntervalSinceReferenceDate];
          double v27 = v26;
          [(id)v80 timeIntervalSinceReferenceDate];
          if (vabdd_f64(v23, v25) <= 216000.0 && vabdd_f64(v27, v28) <= 216000.0)
          {
            if (v23 - v25 < 0.0 || v23 - v25 > 0.0 || (v19 = 0, int v21 = 0, v27 - v28 != 0.0))
            {
              CFDateRef v29 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)int buf = 138544130;
                CFAbsoluteTime v85 = *((double *)&v75 + 1);
                __int16 v86 = 2114;
                CFMutableArrayRef v87 = (void *)*((void *)&v79 + 1);
                __int16 v88 = 2114;
                id v89 = (void *)v76;
                __int16 v90 = 2114;
                uint64_t v91 = v80;
                _os_log_impl(&dword_1A8E81000, v29, OS_LOG_TYPE_INFO, "Deferring occurrence cache update because the occurrence cache isn't that far out of date yet. (start was %{public}@ and should be %{public}@; end was %{public}@ and should be %{public}@)",
                  buf,
                  0x2Au);
              }
              int v19 = 0;
              int v21 = 0;
            }
            goto LABEL_43;
          }
          int v35 = (id)CDBLogHandle;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)int buf = 138544130;
            CFAbsoluteTime v85 = *((double *)&v75 + 1);
            __int16 v86 = 2114;
            CFMutableArrayRef v87 = (void *)*((void *)&v79 + 1);
            __int16 v88 = 2114;
            id v89 = (void *)v76;
            __int16 v90 = 2114;
            uint64_t v91 = v80;
            _os_log_impl(&dword_1A8E81000, v35, OS_LOG_TYPE_INFO, "The occurrence cache has drifted too far out of date. Trimming and extending NOW. (start was %{public}@ and should be %{public}@; end was %{public}@ and should be %{public}@)",
              buf,
              0x2Au);
          }
        }
        __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v70, (uint64_t)&v79);
        __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v67, (uint64_t)&v75);
        int v36 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 138412802;
          CFAbsoluteTime v85 = *(double *)&v71;
          __int16 v86 = 2112;
          CFMutableArrayRef v87 = v68;
          __int16 v88 = 2112;
          id v89 = v72;
          _os_log_impl(&dword_1A8E81000, v36, OS_LOG_TYPE_DEBUG, "Preparing to trim and extend the occurrence cache.  newStartDate: [%@] oldEndDate: [%@] newEndDate: [%@]", buf, 0x20u);
        }
        double v37 = COERCE_DOUBLE(v71);
        int v38 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 138412290;
          CFAbsoluteTime v85 = v37;
          _os_log_impl(&dword_1A8E81000, v38, OS_LOG_TYPE_DEBUG, "Removing occurrences in the occurrence cache before [%@]", buf, 0xCu);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*(void *)(*v12 + 104))
            {
              uint64_t v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v39) {
                os_unfair_lock_assert_owner(v39 + 20);
              }
            }
          }
        }
        if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF) {
          NSLog(&cfstr_EventkitocErro.isa);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*(void *)(*v12 + 104))
            {
              __int16 v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v40) {
                os_unfair_lock_assert_owner(v40 + 20);
              }
            }
          }
        }
        uint64_t v41 = CPSqliteConnectionStatementForSQL();
        __int16 v42 = (uint64_t **)v41;
        if (v41)
        {
          int v43 = *(sqlite3_stmt **)(v41 + 8);
          [*(id *)&v37 timeIntervalSinceReferenceDate];
          sqlite3_bind_double(v43, 1, v44);
          if (CDBLockingAssertionsEnabled)
          {
            if (*v42)
            {
              uint64_t v45 = **v42;
              if (v45)
              {
                if (*(void *)(v45 + 104))
                {
                  __int16 v46 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v46) {
                    os_unfair_lock_assert_owner(v46 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementPerform();
          int v47 = sqlite3_changes((sqlite3 *)(*v42)[1]);
          BOOL v48 = v47 > 0;
          if (v47 >= 1) {
            CalPerformSQLWithConnection(v12, @"DELETE FROM OccurrenceCacheDays WHERE count = 0;");
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*v42)
            {
              uint64_t v49 = **v42;
              if (v49)
              {
                if (*(void *)(v49 + 104))
                {
                  __int16 v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v50) {
                    os_unfair_lock_assert_owner(v50 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        else
        {
          BOOL v48 = 0;
        }

        int OccurrencesInDateRange = _CalEventOccurrenceCacheGenerateOccurrencesInDateRange(a1, (uint64_t)v12, v68, v72, v69, v74);
        double v52 = COERCE_DOUBLE(v73);
        uint64_t v53 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 138543362;
          CFAbsoluteTime v85 = v52;
          _os_log_impl(&dword_1A8E81000, v53, OS_LOG_TYPE_DEBUG, "Removing alarms in the alarm cache before [%{public}@]", buf, 0xCu);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*(void *)(*v12 + 104))
            {
              uint64_t v54 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v54) {
                os_unfair_lock_assert_owner(v54 + 20);
              }
            }
          }
        }
        if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF) {
          NSLog(&cfstr_EventkitocErro.isa);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*(void *)(*v12 + 104))
            {
              id v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v55) {
                os_unfair_lock_assert_owner(v55 + 20);
              }
            }
          }
        }
        uint64_t v56 = CPSqliteConnectionStatementForSQL();
        unsigned int v57 = (uint64_t **)v56;
        if (v56)
        {
          uint64_t v58 = *(sqlite3_stmt **)(v56 + 8);
          [*(id *)&v52 timeIntervalSinceReferenceDate];
          sqlite3_bind_double(v58, 1, v59);
          if (CDBLockingAssertionsEnabled)
          {
            if (*v57)
            {
              uint64_t v60 = **v57;
              if (v60)
              {
                if (*(void *)(v60 + 104))
                {
                  CFTypeRef v61 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v61) {
                    os_unfair_lock_assert_owner(v61 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementPerform();
          BOOL v62 = sqlite3_changes((sqlite3 *)(*v57)[1]) > 0;
          if (CDBLockingAssertionsEnabled)
          {
            if (*v57)
            {
              uint64_t v63 = **v57;
              if (v63)
              {
                if (*(void *)(v63 + 104))
                {
                  uint64_t v64 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v64) {
                    os_unfair_lock_assert_owner(v64 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        else
        {
          BOOL v62 = 0;
        }

        id v65 = v69;
        uint64_t v66 = v74;
        __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)buf, (uint64_t)v70);
        LODWORD(v65) = _CalAlarmCacheGenerateAlarmsInDateRange(a1, (uint64_t)v12, v65, v66, (uint64_t)buf, v68, v72);
        __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v83, (uint64_t)v70);
        _CalEventOccurrenceCacheSetRangeInfo(a1, (uint64_t)v83);
        int v21 = v48 | OccurrencesInDateRange | v62 | v65;
        __destructor_8_s0_s8_s16_s24_s32((uint64_t)v67);
        __destructor_8_s0_s8_s16_s24_s32((uint64_t)v70);
        int v19 = 0;
        goto LABEL_43;
      }
      _RebuildCache_0(a1, (uint64_t)v12);
      int v19 = 1;
      int v21 = 1;
LABEL_43:
      __CalDatabaseCommitTransaction(*(void *)(a1 + 24), (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1444");
      __destructor_8_s0_s8_s16_s24_s32((uint64_t)&v75);
      __destructor_8_s0_s8_s16_s24_s32((uint64_t)&v79);
      goto LABEL_44;
    }
    int v17 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      uint64_t v18 = "Could not open a connection to the database.  Will not trim and extend the occurrence cache.";
      goto LABEL_27;
    }
  }
  else
  {
    int v17 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      uint64_t v18 = "Could not acquire a database object.  Will not trim and extend the occurrence cache.";
LABEL_27:
      _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
    }
  }
  LOBYTE(v19) = 0;
LABEL_54:
  int v33 = (id)CDBLogHandle;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_DEBUG, "Trim and extend not needed", buf, 2u);
  }

  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  if (v19) {
    goto LABEL_57;
  }
}

void sub_1A8F32E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

__n128 __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + 8) = *(id *)(a2 + 8);
  *(void *)(a1 + 16) = *(id *)(a2 + 16);
  *(void *)(a1 + 24) = *(id *)(a2 + 24);
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4 0) = result;
  return result;
}

void _RebuildCache_0(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v4 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v4, OS_LOG_TYPE_DEBUG, "Deleting all data from the 'OccurrenceCache' table.", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPSqliteConnectionPerformSQL();
  double v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_DEBUG, "Deleting all data from the 'OccurrenceCacheDays' table.", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        double v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPSqliteConnectionPerformSQL();
  CFStringRef v8 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_DEBUG, "Deleting all data from the 'AlarmCache' table.", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)a2)
    {
      if (*(void *)(*(void *)a2 + 104))
      {
        long long v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
  }
  CPSqliteConnectionPerformSQL();
  uint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)int buf = 0u;
  CalEventOccurrenceCacheGetIdealRangeInfo(*(void **)(*(void *)(a1 + 24) + 296), (uint64_t)buf);
  uint64_t v10 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int v19 = 138412546;
    uint64_t v20 = *(void *)&buf[8];
    __int16 v21 = 2112;
    uint64_t v22 = v16;
    _os_log_impl(&dword_1A8E81000, v10, OS_LOG_TYPE_INFO, "Acquired occurrence cache range.  Start date: [%@].  End date: [%@]", v19, 0x16u);
  }
  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v14, (uint64_t)buf);
  _CalEventOccurrenceCacheSetRangeInfo(a1, (uint64_t)v14);
  _CalEventOccurrenceCacheGenerateOccurrencesInDateRange(a1, a2, *(void **)&buf[8], (void *)v16, *((void **)&v16 + 1), (void *)v17);
  BOOL v11 = (void *)*((void *)&v16 + 1);
  int v12 = (void *)v17;
  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v13, (uint64_t)buf);
  _CalAlarmCacheGenerateAlarmsInDateRange(a1, a2, v11, v12, (uint64_t)v13, *(void **)&buf[8], (void *)v16);
  __destructor_8_s0_s8_s16_s24_s32((uint64_t)buf);
}

void sub_1A8F33200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  __destructor_8_s0_s8_s16_s24_s32((uint64_t)va);
  _Unwind_Resume(a1);
}

void CalEventOccurrenceCacheCleanOrphans(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) && CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
  {
    uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
    if (CDBLockingAssertionsEnabled) {
      BOOL v3 = RecordStore == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          double v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      uint64_t v7 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v7)
      {
        uint64_t v8 = v7;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v7)
          {
            if (*(void *)(*(void *)v7 + 104))
            {
              long long v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v9) {
                os_unfair_lock_assert_owner(v9 + 20);
              }
            }
          }
        }
        uint64_t v10 = (uint64_t **)CPSqliteConnectionStatementForSQL();
        if (v10)
        {
          BOOL v11 = v10;
          if (CDBLockingAssertionsEnabled)
          {
            if (*v10)
            {
              uint64_t v12 = **v10;
              if (v12)
              {
                if (*(void *)(v12 + 104))
                {
                  double v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v13) {
                    os_unfair_lock_assert_owner(v13 + 20);
                  }
                }
              }
            }
          }
          int v14 = CPSqliteStatementIntegerResult();
          if (v14) {
            NSLog(&cfstr_EventkitocInte.isa);
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*v11)
            {
              uint64_t v15 = **v11;
              if (v15)
              {
                if (*(void *)(v15 + 104))
                {
                  long long v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v16) {
                    os_unfair_lock_assert_owner(v16 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementReset();
          if (CDBLockingAssertionsEnabled)
          {
            if (*v11)
            {
              uint64_t v17 = **v11;
              if (v17)
              {
                if (*(void *)(v17 + 104))
                {
                  uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v18) {
                    os_unfair_lock_assert_owner(v18 + 20);
                  }
                }
              }
            }
          }
          CPSqliteDatabaseReleaseSqliteStatement();
          if (v14)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (*(void *)v8)
              {
                if (*(void *)(*(void *)v8 + 104))
                {
                  int v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v19) {
                    os_unfair_lock_assert_owner(v19 + 20);
                  }
                }
              }
            }
            uint64_t v20 = CPSqliteConnectionPerformSQL();
            if (v20) {
              NSLog(&cfstr_EventkitocClea.isa, v20);
            }
          }
        }
      }
    }
    CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  }
}

uint64_t CalEventOccurrenceCacheInvalidate(uint64_t result)
{
  *(unsigned char *)(result + 16) = 0;
  return result;
}

CFTypeRef CalEventOccurrenceCacheCopyTimeZone(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 24) + 80));
  __CalDatabaseBeginReadTransaction(*(void *)(a1 + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1559");
  _CalEventOccurrenceCacheLoadInfo(a1);
  CFTypeRef v2 = CFRetain(*(CFTypeRef *)(a1 + 32));
  __CalDatabaseRollbackTransaction(*(void *)(a1 + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1561");
  BOOL v3 = (os_unfair_lock_s *)(*(void *)(a1 + 24) + 80);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v3);
  }
  os_unfair_lock_unlock(v3);
  return v2;
}

void CalEventOccurrenceCacheCopyBoundsForTimeZone(uint64_t a1, void *a2, void *a3)
{
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a1)
  {
    id v11 = [MEMORY[0x1E4F1C9A8] CalGregorianCalendarForTimeZone:a1];
    long long v5 = [MEMORY[0x1E4F1C9C8] CalSimulatedDateForNow];
    double v6 = [v11 startOfDayForDate:v5];

    uint64_t v7 = objc_opt_new();
    [v7 setYear:-2];
    uint64_t v8 = [v11 dateByAddingComponents:v7 toDate:v6 options:0];
    long long v9 = objc_opt_new();
    [v9 setYear:2];

    uint64_t v10 = [v11 dateByAddingComponents:v9 toDate:v6 options:0];
    if (a2) {
      *a2 = v8;
    }
    if (a3) {
      *a3 = v10;
    }
  }
}

void CalEventOccurrenceCacheInitializeDB(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 18008)
  {
    v8[11] = v3;
    v8[12] = v4;
    CalPerformSQLWithConnection(a2, @"CREATE TABLE OccurrenceCache (day REAL, event_id INTEGER, calendar_id INTEGER, store_id INTEGER, occurrence_date REAL, occurrence_start_date REAL, occurrence_end_date REAL, latest_possible_alarm REAL, earliest_possible_alarm REAL, next_reminder_date REAL);");
    CalPerformSQLWithConnection(a2, @"CREATE TABLE OccurrenceCacheDays (calendar_id INTEGER, store_id INTEGER, day REAL, count INTEGER, PRIMARY KEY (calendar_id, day));");
    CalPerformSQLWithConnection(a2, @"CREATE TRIGGER update_cache_days_after_delete AFTER DELETE ON OccurrenceCache\nBEGIN\nUPDATE OccurrenceCacheDays SET count = count - 1 WHERE day = OLD.day AND calendar_id = OLD.calendar_id AND OLD.next_reminder_date IS NULL;UPDATE OccurrenceCacheDays SET count = count - 1 WHERE day = OLD.day AND calendar_id = -2 AND OLD.next_reminder_date IS NULL;\nEND;\n");
    CalPerformSQLWithConnection(a2, @"CREATE TRIGGER update_cache_days_after_insert AFTER INSERT ON OccurrenceCache\nBEGIN\nREPLACE INTO OccurrenceCacheDays VALUES (NEW.calendar_id, NEW.store_id, NEW.day, IIF(NEW.next_reminder_date IS NULL, 1, 0) + IFNULL((SELECT count FROM OccurrenceCacheDays WHERE day = NEW.day AND calendar_id = NEW.calendar_id), 0));\nREPLACE INTO OccurrenceCacheDays VALUES (-2, -2, NEW.day, IIF(NEW.next_reminder_date IS NULL, 1, 0) + IFNULL((SELECT count FROM OccurrenceCacheDays WHERE day = NEW.day AND calendar_id = -2), 0));\nEND;\n");
    CalPerformSQLWithConnection(a2, @"CREATE TRIGGER update_cache_days_after_update AFTER UPDATE OF day ON OccurrenceCache\nBEGIN\nREPLACE INTO OccurrenceCacheDays VALUES (NEW.calendar_id, NEW.store_id, NEW.day, IIF(NEW.next_reminder_date IS NULL, 1, 0) + IFNULL((SELECT count FROM OccurrenceCacheDays WHERE day = NEW.day AND calendar_id = NEW.calendar_id), 0));\nREPLACE INTO OccurrenceCacheDays VALUES (-2, -2, NEW.day, IIF(NEW.next_reminder_date IS NULL, 1, 0) + IFNULL((SELECT count FROM OccurrenceCacheDays WHERE day = NEW.day AND calendar_id = -2), 0));\nUPDATE OccurrenceCacheDays SET count = count - 1 WHERE day = OLD.day AND calendar_id = OLD.calendar_id AND OLD.next_reminder_date IS NULL;UPDATE OccurrenceCacheDays SET count = count - 1 WHERE day = OLD.day AND calendar_id = -2 AND OLD.next_reminder_date IS NULL;\nEND;\n");
    CalPerformSQLWithConnection(a2, @"CREATE TABLE AlarmCache (event_id INTEGER, alarm_id INTEGER, occurrence_date REAL, fire_date REAL, store_id INTEGER, all_day INTEGER, travel_time REAL, is_default INTEGER, PRIMARY KEY (event_id, alarm_id, occurrence_date));");
    CalPerformSQLWithConnection(a2, @"CREATE TRIGGER delete_from_alarm_cache_after_delete_alarm AFTER DELETE ON Alarm\nBEGIN\nDELETE From AlarmCache WHERE alarm_id = OLD.ROWID;\nEND;\n");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX OccurrenceCacheDayEventIdOccurrenceDate on OccurrenceCache(day, event_id, occurrence_date);");
    CalPerformSQLWithConnection(a2, @"CREATE UNIQUE INDEX OccurrenceCacheOccurrenceDateEventId on OccurrenceCache(occurrence_date, event_id, occurrence_start_date);");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX OccurrenceCacheCalendarId on OccurrenceCache(calendar_id);");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX OccurrenceCacheLatestPossibleAlarm on OccurrenceCache(latest_possible_alarm);");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX OccurrenceCacheEarliestPossibleAlarm on OccurrenceCache(earliest_possible_alarm);");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX OccurrenceCacheDaysCount on OccurrenceCacheDays(count);");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX OccurrenceCacheDaysDayCalendarId on OccurrenceCacheDays(day, calendar_id);");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX OccurrenceCacheEventIdOccurrenceDate on OccurrenceCache(event_id, occurrence_date);");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX OccurrenceCacheCalendarIDDayNextReminderDate on OccurrenceCache(calendar_id, day, next_reminder_date) WHERE next_reminder_date IS NOT NULL;");
    if (a3 == -1)
    {
      uint64_t Context = CPRecordStoreGetContext();
      CalEventOccurrenceCacheGetIdealRangeInfo(*(void **)(Context + 296), (uint64_t)v8);
      _CalEventOccurrenceCacheSetRangeInfoWithConnection((uint64_t)a2, v8);
    }
  }
}

void _CalEventOccurrenceCacheSetRangeInfoWithConnection(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)a2[1];
  if (v4)
  {
    long long v5 = NSString;
    [v4 timeIntervalSinceReferenceDate];
    uint64_t v7 = objc_msgSend(v5, "stringWithFormat:", @"%lu", (unint64_t)v6);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a1)
        {
          if (*(void *)(*(void *)a1 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
  }
  long long v9 = (void *)a2[2];
  if (v9)
  {
    uint64_t v10 = NSString;
    [v9 timeIntervalSinceReferenceDate];
    uint64_t v12 = objc_msgSend(v10, "stringWithFormat:", @"%lu", (unint64_t)v11);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a1)
        {
          if (*(void *)(*(void *)a1 + 104))
          {
            double v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13) {
              os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
  }
  if (*a2)
  {
    CFAbsoluteTimeGetCurrent();
    int v14 = (const void *)CalCFTimeZoneCopyCalTimeZone();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a1)
        {
          if (*(void *)(*(void *)a1 + 104))
          {
            uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15) {
              os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
    CFRelease(v14);
  }
  long long v16 = (void *)a2[3];
  if (v16)
  {
    uint64_t v17 = NSString;
    [v16 timeIntervalSinceReferenceDate];
    int v19 = objc_msgSend(v17, "stringWithFormat:", @"%lu", (unint64_t)v18);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a1)
        {
          if (*(void *)(*(void *)a1 + 104))
          {
            uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20) {
              os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
  }
  __int16 v21 = (void *)a2[4];
  if (v21)
  {
    uint64_t v22 = NSString;
    [v21 timeIntervalSinceReferenceDate];
    double v24 = objc_msgSend(v22, "stringWithFormat:", @"%lu", (unint64_t)v23);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a1)
        {
          if (*(void *)(*(void *)a1 + 104))
          {
            double v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v25) {
              os_unfair_lock_assert_owner(v25 + 20);
            }
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
  }
  double v26 = objc_msgSend(NSString, "stringWithFormat:", @"%ld", a2[5]);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a1)
      {
        if (*(void *)(*(void *)a1 + 104))
        {
          double v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v27) {
            os_unfair_lock_assert_owner(v27 + 20);
          }
        }
      }
    }
  }
  CPSqliteConnectionSetValueForProperty();
  double v28 = objc_msgSend(NSString, "stringWithFormat:", @"%ld", a2[6]);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a1)
      {
        if (*(void *)(*(void *)a1 + 104))
        {
          CFDateRef v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v29) {
            os_unfair_lock_assert_owner(v29 + 20);
          }
        }
      }
    }
  }
  CPSqliteConnectionSetValueForProperty();

  __destructor_8_s0_s8_s16_s24_s32((uint64_t)a2);
}

void sub_1A8F33AE8(_Unwind_Exception *a1)
{
  __destructor_8_s0_s8_s16_s24_s32(v1);
  _Unwind_Resume(a1);
}

void CalEventOccurrenceCachePrepareForDBMigration(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 18008)
  {
    CalPerformSQLWithConnection(a2, @"DROP TRIGGER update_cache_days_after_delete;");
    CalPerformSQLWithConnection(a2, @"DROP TRIGGER update_cache_days_after_insert;");
    CalPerformSQLWithConnection(a2, @"DROP TRIGGER IF EXISTS update_cache_days_after_update;");
    CalPerformSQLWithConnection(a2, @"DROP TABLE OccurrenceCache;");
    CalPerformSQLWithConnection(a2, @"DROP TABLE OccurrenceCacheDays;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheDay;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheOccurrenceDate;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheEventId;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheDayEventIdOccurrenceDate;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheOccurrenceDateEventId;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheCalendarId;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheDaysCount;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheDaysDayCalendarId;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheDayCalendarId;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheDayStoreId;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheStoreIdOccurrenceDate;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheCalendarIdOccurrenceDate;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheDaysStoreIdDay;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheLatestPossibleAlarm;");
    CalPerformSQLWithConnection(a2, @"DROP INDEX IF EXISTS OccurrenceCacheEarliestPossibleAlarm;");
  }
}

id CalEventOccurrenceCacheMergeCounts(void *a1, void *a2)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = [v4 count];
  unint64_t v6 = [v3 count];
  int v33 = v4;
  uint64_t v7 = [v4 firstObject];
  uint64_t v8 = [v7 objectForKeyedSubscript:@"day"];
  long long v9 = [v3 firstObject];
  uint64_t v10 = [v9 objectForKeyedSubscript:@"day"];
  double v11 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v6 + v5];
  unint64_t v12 = 0;
  int v34 = v7;
  if (!v6 || !v5)
  {
    unint64_t v13 = 0;
    goto LABEL_15;
  }
  unint64_t v13 = 0;
  unint64_t v12 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v14 = [v10 compare:v8];
      if (v14 != -1) {
        break;
      }
      [v11 addObject:v9];
      if (++v12 >= v6) {
        goto LABEL_15;
      }
      uint64_t v15 = [v3 objectAtIndexedSubscript:v12];

      uint64_t v16 = [v15 objectForKeyedSubscript:@"day"];

      uint64_t v10 = (void *)v16;
      long long v9 = v15;
    }
    if (!v14) {
      break;
    }
    [v11 addObject:v34];
    if (++v13 >= v5) {
      goto LABEL_15;
    }
    int v32 = [v33 objectAtIndexedSubscript:v13];

    __int16 v21 = v32;
    uint64_t v23 = [v32 objectForKeyedSubscript:@"day"];
    uint64_t v22 = v8;
    uint64_t v8 = (void *)v23;
LABEL_13:
    int v34 = v21;
  }
  uint64_t v17 = [v9 objectForKeyedSubscript:@"occurrenceCount"];
  int v29 = [v17 intValue];

  double v18 = [v34 objectForKeyedSubscript:@"occurrenceCount"];
  int v27 = [v18 intValue];

  v36[0] = @"day";
  v36[1] = @"occurrenceCount";
  v37[0] = v10;
  int v30 = [NSNumber numberWithInt:(v27 + v29)];
  v37[1] = v30;
  int v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:2];

  uint64_t v31 = v19;
  [v11 addObject:v19];
  ++v12;
  ++v13;
  if (v12 < v6 && v13 < v5)
  {
    double v28 = [v3 objectAtIndexedSubscript:v12];

    uint64_t v20 = [v28 objectForKeyedSubscript:@"day"];

    __int16 v21 = [v33 objectAtIndexedSubscript:v13];

    uint64_t v35 = [v21 objectForKeyedSubscript:@"day"];

    uint64_t v10 = (void *)v20;
    long long v9 = v28;
    uint64_t v22 = v31;
    uint64_t v8 = (void *)v35;
    goto LABEL_13;
  }

LABEL_15:
  if (v12 < v6)
  {
    do
    {
      double v24 = [v3 objectAtIndexedSubscript:v12];
      [v11 addObject:v24];

      ++v12;
    }
    while (v6 != v12);
  }
  if (v13 < v5)
  {
    do
    {
      double v25 = [v33 objectAtIndexedSubscript:v13];
      [v11 addObject:v25];

      ++v13;
    }
    while (v5 != v13);
  }

  return v11;
}

uint64_t CalEventOccurrenceCacheCopyEventOccurrencesAfterDate(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v8 = 0;
  long long v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __CalEventOccurrenceCacheCopyEventOccurrencesAfterDate_block_invoke;
  v6[3] = &unk_1E5D6BBF8;
  int v7 = a3;
  v6[5] = a1;
  v6[6] = a2;
  v6[4] = &v8;
  *(double *)&v6[7] = a4;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1A8F34164(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __CalEventOccurrenceCacheCopyEventOccurrencesAfterDate_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 40) + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    uint64_t v6 = Database;
    if (__CalDatabaseBeginReadTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2029"))
    {
      int v7 = *(_DWORD *)(a1 + 64);
      uint64_t v8 = @"ORDER BY occurrence_date";
      if (v7 <= 0) {
        uint64_t v8 = 0;
      }
      *(void *)int buf = @"SELECT event_id, occurrence_date FROM OccurrenceCache";
      int v19 = @"occurrence_date > ?";
      uint64_t v20 = v8;
      uint64_t v21 = v7;
      long long v9 = _CalFilterCopyQuery(*(void **)(a1 + 48));
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(v6 + 104))
        {
          uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
      uint64_t v11 = CPSqliteDatabaseStatementForReading();
      if (v11)
      {
        unint64_t v12 = (uint64_t **)v11;
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        _CalEventOccurrenceCacheLoadInfo(*(void *)(a1 + 40));
        sqlite3_bind_int((sqlite3_stmt *)v12[1], 1, (int)*(double *)(a1 + 56));
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            uint64_t v13 = **v12;
            if (v13)
            {
              if (*(void *)(v13 + 104))
              {
                uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v14) {
                  os_unfair_lock_assert_owner(v14 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            uint64_t v15 = **v12;
            if (v15)
            {
              if (*(void *)(v15 + 104))
              {
                uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v16) {
                  os_unfair_lock_assert_owner(v16 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (v9) {
        CFRelease(v9);
      }
      __CalDatabaseRollbackTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2054");
    }
    else
    {
      uint64_t v17 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, "Unable to begin transaction", buf, 2u);
      }
    }
  }
}

uint64_t _OccurrenceGatherer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  double v5 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 1);
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a2 + 8));
  EventWithint UID = (const void *)_CalGetEventWithUID(RecordStore, v4);
  if (EventWithUID)
  {
    uint64_t v8 = (const void *)CalEventOccurrenceCreate(EventWithUID, *(const void **)(a2 + 16), v5);
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, v8);
    CFRelease(v8);
  }
  return 0;
}

uint64_t CalEventOccurrenceCacheCopyEventOccurrencesWithIDsAfterDate(uint64_t a1, uint64_t a2, CFArrayRef theArray, int a4, char a5, char a6, char a7, void *a8, double a9)
{
  uint64_t v33 = 0;
  int v34 = &v33;
  uint64_t v35 = 0x2020000000;
  uint64_t v36 = 0;
  if (theArray && CFArrayGetCount(theArray))
  {
    uint64_t v27 = 0;
    double v28 = &v27;
    uint64_t v29 = 0x3032000000;
    int v30 = __Block_byref_object_copy__2;
    uint64_t v31 = __Block_byref_object_dispose__2;
    id v32 = 0;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = __CalEventOccurrenceCacheCopyEventOccurrencesWithIDsAfterDate_block_invoke;
    v22[3] = &unk_1E5D6BC20;
    int v23 = a4;
    char v24 = a5;
    char v25 = a7;
    BOOL v26 = a8 != 0;
    v22[6] = a1;
    v22[7] = theArray;
    v22[8] = a2;
    v22[4] = &v27;
    v22[5] = &v33;
    *(double *)&v22[9] = a9;
    double v18 = (void (**)(void))MEMORY[0x1AD0E9DC0](v22);
    int v19 = v18;
    if (a6) {
      _CalEventOccurrenceCachePerformWithLock(a1, v18);
    }
    else {
      v18[2](v18);
    }
    if (a8) {
      *a8 = (id) v28[5];
    }
    uint64_t v20 = v34[3];

    _Block_object_dispose(&v27, 8);
  }
  else
  {
    uint64_t v20 = 0;
  }
  _Block_object_dispose(&v33, 8);
  return v20;
}

void sub_1A8F34638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4 0) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __CalEventOccurrenceCacheCopyEventOccurrencesWithIDsAfterDate_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 48) + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    uint64_t v6 = Database;
    if (*(int *)(a1 + 80) < 1)
    {
      int v7 = 0;
    }
    else if (*(unsigned char *)(a1 + 84))
    {
      int v7 = @"ORDER BY occurrence_date DESC";
    }
    else
    {
      int v7 = @"ORDER BY occurrence_date";
    }
    if (*(unsigned char *)(a1 + 85)
      && !__CalDatabaseBeginReadTransaction(*(void *)(*(void *)(a1 + 48) + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2084"))
    {
      uint64_t v27 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1A8E81000, v27, OS_LOG_TYPE_ERROR, "Could not begin transaction", buf, 2u);
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 86))
      {
        uint64_t v8 = _CalEventOccurrenceCacheCreateOccurrenceCacheRange(*(void **)(a1 + 48));
        uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v10 = *(void **)(v9 + 40);
        *(void *)(v9 + 4 0) = v8;
      }
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
      *(void *)int buf = @"SELECT event_id, occurrence_date FROM OccurrenceCache";
      uint64_t v29 = @"occurrence_date > ? AND event_id IN (%@)";
      int v30 = v7;
      uint64_t v31 = 0;
      LODWORD(v31) = *(_DWORD *)(a1 + 80);
      if (Count == 1)
      {
        CFMutableDictionaryRef Mutable = 0;
        uint64_t v29 = @"occurrence_date > ? AND event_id = ?";
      }
      else
      {
        CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
            if (i) {
              CFStringAppendFormat(Mutable, 0, @",%d", ValueAtIndex);
            }
            else {
              CFStringAppendFormat(Mutable, 0, @"%d", ValueAtIndex);
            }
          }
        }
      }
      CFStringRef v15 = (const __CFString *)_CalFilterCopyQuery(*(void **)(a1 + 64));
      CFStringRef v16 = v15;
      if (Count == 1) {
        uint64_t v17 = (void *)CFRetain(v15);
      }
      else {
        uint64_t v17 = (void *)CFStringCreateWithFormat(0, 0, v15, Mutable);
      }
      double v18 = v17;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(v6 + 104))
        {
          int v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19) {
            os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
      uint64_t v20 = CPSqliteDatabaseStatementForReading();
      if (v20)
      {
        uint64_t v21 = (uint64_t **)v20;
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        _CalEventOccurrenceCacheLoadInfo(*(void *)(a1 + 48));
        sqlite3_bind_int((sqlite3_stmt *)v21[1], 1, (int)*(double *)(a1 + 72));
        if (Count == 1)
        {
          int v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), 0);
          sqlite3_bind_int((sqlite3_stmt *)v21[1], 2, v22);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v21)
          {
            uint64_t v23 = **v21;
            if (v23)
            {
              if (*(void *)(v23 + 104))
              {
                char v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v24) {
                  os_unfair_lock_assert_owner(v24 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v21)
          {
            uint64_t v25 = **v21;
            if (v25)
            {
              if (*(void *)(v25 + 104))
              {
                BOOL v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v26) {
                  os_unfair_lock_assert_owner(v26 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (*(unsigned char *)(a1 + 85)) {
        __CalDatabaseRollbackTransaction(*(void *)(*(void *)(a1 + 48) + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2141");
      }
      if (v18) {
        CFRelease(v18);
      }
      CFRelease(v16);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
}

CalEventOccurrenceCacheRange *_CalEventOccurrenceCacheCreateOccurrenceCacheRange(void *a1)
{
  _CalEventOccurrenceCacheLoadInfo((uint64_t)a1);
  CFTypeRef v2 = [[CalEventOccurrenceCacheRange alloc] initWithStartDate:a1[5] endDate:a1[6] timeZone:a1[4]];
  return v2;
}

id _CalEventOccurrenceCacheCopySpotlightOccurrenceDates(uint64_t a1, void *a2, int a3)
{
  __CalDatabaseBeginReadTransaction(*(void *)(a1 + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2200");
  _CalEventOccurrenceCacheLoadInfo(a1);
  id v6 = *(id *)(a1 + 40);
  int v7 = objc_opt_new();
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = RecordStore == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    uint64_t v12 = Database;
    uint64_t v13 = _CalFilterCopyQuery(a2);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v12 + 104))
      {
        uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    uint64_t v15 = CPSqliteDatabaseStatementForReading();
    if (v15)
    {
      CFStringRef v16 = (uint64_t **)v15;
      uint64_t v17 = *(sqlite3_stmt **)(v15 + 8);
      objc_msgSend(v6, "timeIntervalSinceReferenceDate", @"SELECT occurrence_date FROM OccurrenceCache", @"occurrence_date > ? AND event_id = ? AND occurrence_start_date is NULL", 0, 0);
      sqlite3_bind_int(v17, 1, (int)v18);
      sqlite3_bind_int((sqlite3_stmt *)v16[1], 2, a3);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v16)
        {
          uint64_t v19 = **v16;
          if (v19)
          {
            if (*(void *)(v19 + 104))
            {
              uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20) {
                os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v16)
        {
          uint64_t v21 = **v16;
          if (v21)
          {
            if (*(void *)(v21 + 104))
            {
              int v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v22) {
                os_unfair_lock_assert_owner(v22 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if (v13) {
      CFRelease(v13);
    }
  }

  __CalDatabaseRollbackTransaction(*(void *)(a1 + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2204");
  return v7;
}

uint64_t CalEventOccurrenceCacheDoEventsHaveOccurrencesAfterDate(uint64_t a1, int a2, CFArrayRef theArray, double a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  if (theArray && CFArrayGetCount(theArray))
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __CalEventOccurrenceCacheDoEventsHaveOccurrencesAfterDate_block_invoke;
    v9[3] = &unk_1E5D65DE0;
    v9[5] = a1;
    v9[6] = theArray;
    v9[4] = &v10;
    *(double *)&void v9[7] = a4;
    _CalEventOccurrenceCachePerformWithLock(a1, v9);
    uint64_t v7 = v11[3];
  }
  else
  {
    uint64_t v7 = 0;
  }
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1A8F34D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __CalEventOccurrenceCacheDoEventsHaveOccurrencesAfterDate_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 40) + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    uint64_t v6 = Database;
    uint64_t Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 48));
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, Count, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), i);
        int valuePtr = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
        int v17 = 0;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)(v6 + 104))
          {
            uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
        uint64_t v11 = (uint64_t **)CPSqliteDatabaseStatementForReading();
        sqlite3_bind_int((sqlite3_stmt *)v11[1], 1, (int)*(double *)(a1 + 56));
        sqlite3_bind_int((sqlite3_stmt *)v11[1], 2, valuePtr);
        if (v11)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (*v11)
            {
              uint64_t v12 = **v11;
              if (v12)
              {
                if (*(void *)(v12 + 104))
                {
                  uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v13) {
                    os_unfair_lock_assert_owner(v13 + 20);
                  }
                }
              }
            }
          }
        }
        int v17 = CPSqliteStatementIntegerResult();
        if (v11)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (*v11)
            {
              uint64_t v14 = **v11;
              if (v14)
              {
                if (*(void *)(v14 + 104))
                {
                  uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v15) {
                    os_unfair_lock_assert_owner(v15 + 20);
                  }
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
        int v17 = v17 > 0;
        CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &v17);
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v16);
        CFRelease(v16);
      }
    }
  }
}

double _CalEventOccurrenceCacheNextEventOccurrenceDateAfterDate(uint64_t a1, int a2, double a3)
{
  __CalDatabaseBeginReadTransaction(*(void *)(a1 + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2253");
  _CalEventOccurrenceCacheLoadInfo(a1);
  id v6 = *(id *)(a1 + 40);
  double v19 = *MEMORY[0x1E4F57878];
  [v6 timeIntervalSinceReferenceDate];
  if (v7 <= a3)
  {
    uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
    if (CDBLockingAssertionsEnabled) {
      BOOL v9 = RecordStore == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
      uint64_t v13 = (uint64_t **)CPSqliteDatabaseStatementForReading();
      sqlite3_bind_int((sqlite3_stmt *)v13[1], 1, (int)a3);
      sqlite3_bind_int((sqlite3_stmt *)v13[1], 2, a2);
      if (v13)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v13)
          {
            uint64_t v14 = **v13;
            if (v14)
            {
              if (*(void *)(v14 + 104))
              {
                uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v15) {
                  os_unfair_lock_assert_owner(v15 + 20);
                }
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      if (v13)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v13)
          {
            uint64_t v16 = **v13;
            if (v16)
            {
              if (*(void *)(v16 + 104))
              {
                int v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v17) {
                  os_unfair_lock_assert_owner(v17 + 20);
                }
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
  }
  else
  {
    double v19 = *MEMORY[0x1E4F57888];
  }
  __CalDatabaseRollbackTransaction(*(void *)(a1 + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2272");

  return v19;
}

uint64_t loadDoubleResult(uint64_t a1, double *a2)
{
  *a2 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 0);
  return 1;
}

uint64_t CalEventOccurrenceCacheCount(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = 0;
  double v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __CalEventOccurrenceCacheCount_block_invoke;
  v5[3] = &unk_1E5D65DE0;
  *(double *)&v5[6] = a2;
  *(double *)&v5[7] = a3;
  v5[4] = &v6;
  v5[5] = a1;
  _CalEventOccurrenceCachePerformWithLock(a1, v5);
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1A8F35274(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __CalEventOccurrenceCacheCount_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 40) + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreGetDatabase();
  if (result)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(result + 104))
      {
        uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
    double v7 = (uint64_t **)CPSqliteDatabaseStatementForReading();
    sqlite3_bind_int((sqlite3_stmt *)v7[1], 1, (int)*(double *)(a1 + 48));
    sqlite3_bind_int((sqlite3_stmt *)v7[1], 2, (int)*(double *)(a1 + 56));
    if (v7) {
      BOOL v8 = CDBLockingAssertionsEnabled == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (*v7)
      {
        uint64_t v9 = **v7;
        if (v9)
        {
          if (*(void *)(v9 + 104))
          {
            uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CPSqliteStatementIntegerResult();
    if (v7) {
      BOOL v11 = CDBLockingAssertionsEnabled == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      if (*v7)
      {
        uint64_t v12 = **v7;
        if (v12)
        {
          if (*(void *)(v12 + 104))
          {
            uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13) {
              os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
    }
    return CPSqliteStatementReset();
  }
  return result;
}

uint64_t CalEventOccurrenceCacheCopyEventOccurrencesInDateRange(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return CalEventOccurrenceCacheCopyEventOccurrencesInDateRangeWithLimit(a1, a2, a3, a4, a5, 1, 0, 0);
}

void CalEventOccurrenceCacheProcessEventOccurrencesInDateRange(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, void *a7)
{
}

uint64_t CalDatabaseCopyEventOccurrenceNearestToDate(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __CalDatabaseCopyEventOccurrenceNearestToDate_block_invoke;
  v6[3] = &unk_1E5D6BBF8;
  v6[5] = a1;
  v6[6] = a2;
  *(double *)&v6[7] = a4;
  int v7 = a3;
  v6[4] = &v8;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1A8F354F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __CalDatabaseCopyEventOccurrenceNearestToDate_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 40) + 24));
  uint64_t v3 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    uint64_t v7 = Database;
    v29[2] = xmmword_1E5D6BC40;
    v29[3] = *(_OWORD *)&off_1E5D6BC50;
    if (__CalDatabaseBeginReadTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2883"))
    {
      uint64_t v8 = _CalFilterCopyQuery(*(void **)(a1 + 48));
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(v7 + 104))
        {
          uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
      uint64_t v10 = CPSqliteDatabaseStatementForReading();
      if (v10)
      {
        uint64_t v11 = v10;
        sqlite3_bind_double(*(sqlite3_stmt **)(v10 + 8), 1, *(double *)(a1 + 56));
        sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 2, *(_DWORD *)(a1 + 64));
        if (sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) == 100)
        {
          uint64_t v12 = *(void *)(a1 + 40);
          _CalEventOccurrenceCacheLoadInfo(v12);
          uint64_t EventOccurrenceFromStatement = _createEventOccurrenceFromStatement(v3, v11, *(const void **)(v12 + 32));
        }
        else
        {
          uint64_t EventOccurrenceFromStatement = 0;
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v11)
          {
            uint64_t v15 = **(void **)v11;
            if (v15)
            {
              if (*(void *)(v15 + 104))
              {
                uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v16) {
                  os_unfair_lock_assert_owner(v16 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
        if (!v8)
        {
LABEL_29:
          v29[0] = xmmword_1E5D6BC60;
          v29[1] = *(_OWORD *)&off_1E5D6BC70;
          int v17 = _CalFilterCopyQuery(*(void **)(a1 + 48));
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)(v7 + 104))
            {
              double v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v18) {
                os_unfair_lock_assert_owner(v18 + 20);
              }
            }
          }
          uint64_t v19 = CPSqliteDatabaseStatementForReading();
          if (v19)
          {
            uint64_t v20 = v19;
            sqlite3_bind_double(*(sqlite3_stmt **)(v19 + 8), 1, *(double *)(a1 + 56));
            sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 2, *(_DWORD *)(a1 + 64));
            if (sqlite3_step(*(sqlite3_stmt **)(v20 + 8)) == 100)
            {
              uint64_t v21 = *(void *)(a1 + 40);
              _CalEventOccurrenceCacheLoadInfo(v21);
              uint64_t v22 = _createEventOccurrenceFromStatement(v3, v20, *(const void **)(v21 + 32));
            }
            else
            {
              uint64_t v22 = 0;
            }
            if (CDBLockingAssertionsEnabled)
            {
              if (*(void *)v20)
              {
                uint64_t v23 = **(void **)v20;
                if (v23)
                {
                  if (*(void *)(v23 + 104))
                  {
                    char v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v24) {
                      os_unfair_lock_assert_owner(v24 + 20);
                    }
                  }
                }
              }
            }
            CPSqliteStatementReset();
            if (!v17) {
              goto LABEL_47;
            }
          }
          else
          {
            uint64_t v22 = 0;
            if (!v17)
            {
LABEL_47:
              if (EventOccurrenceFromStatement && v22)
              {
                double Date = CalEventOccurrenceGetDate(EventOccurrenceFromStatement);
                double v26 = CalEventOccurrenceGetDate(v22);
                uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 8);
                if (Date - *(double *)(a1 + 56) <= *(double *)(a1 + 56) - v26)
                {
                  *(void *)(v27 + 24) = EventOccurrenceFromStatement;
                  double v28 = (const void *)v22;
                }
                else
                {
                  *(void *)(v27 + 24) = v22;
                  double v28 = (const void *)EventOccurrenceFromStatement;
                }
                CFRelease(v28);
              }
              else if (EventOccurrenceFromStatement)
              {
                *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = EventOccurrenceFromStatement;
              }
              else if (v22)
              {
                *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v22;
              }
              __CalDatabaseRollbackTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2955");
              return;
            }
          }
          CFRelease(v17);
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t EventOccurrenceFromStatement = 0;
        if (!v8) {
          goto LABEL_29;
        }
      }
      CFRelease(v8);
      goto LABEL_29;
    }
    uint64_t v14 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v29[0]) = 0;
      _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_ERROR, "Couldn't begin transaction", (uint8_t *)v29, 2u);
    }
  }
}

uint64_t _createEventOccurrenceFromStatement(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = sqlite3_column_int(*(sqlite3_stmt **)(a2 + 8), 0);
  double v7 = sqlite3_column_double(*(sqlite3_stmt **)(a2 + 8), 1);
  EventWithint UID = (const void *)_CalGetEventWithUID(a1, v6);
  if (_CalEventIsAllDay((uint64_t)EventWithUID) && sqlite3_column_type(*(sqlite3_stmt **)(a2 + 8), 2) != 5) {
    double v7 = sqlite3_column_double(*(sqlite3_stmt **)(a2 + 8), 2);
  }
  return CalEventOccurrenceCreate(EventWithUID, a3, v7);
}

uint64_t CalDatabaseCopyEventOccurrenceNearestToDatePreferringForwardSearch(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __CalDatabaseCopyEventOccurrenceNearestToDatePreferringForwardSearch_block_invoke;
  v6[3] = &unk_1E5D6BBF8;
  v6[5] = a1;
  v6[6] = a2;
  *(double *)&v6[7] = a4;
  int v7 = a3;
  v6[4] = &v8;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
  uint64_t v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1A8F35A18(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void __CalDatabaseCopyEventOccurrenceNearestToDatePreferringForwardSearch_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 40) + 24));
  uint64_t v3 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    uint64_t v7 = Database;
    if (__CalDatabaseBeginReadTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2970"))
    {
      *(_OWORD *)int buf = xmmword_1E5D6BC80;
      long long v24 = *(_OWORD *)&off_1E5D6BC90;
      uint64_t v8 = _CalFilterCopyQuery(*(void **)(a1 + 48));
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(v7 + 104))
        {
          uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
      uint64_t v10 = CPSqliteDatabaseStatementForReading();
      if (v10)
      {
        uint64_t v11 = v10;
        sqlite3_bind_double(*(sqlite3_stmt **)(v10 + 8), 1, *(double *)(a1 + 56));
        sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 2, *(_DWORD *)(a1 + 64));
        if (sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) == 100)
        {
          uint64_t v12 = *(void *)(a1 + 40);
          _CalEventOccurrenceCacheLoadInfo(v12);
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _createEventOccurrenceFromStatement(v3, v11, *(const void **)(v12 + 32));
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v11)
          {
            uint64_t v13 = **(void **)v11;
            if (v13)
            {
              if (*(void *)(v13 + 104))
              {
                uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v14) {
                  os_unfair_lock_assert_owner(v14 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (v8) {
        CFRelease(v8);
      }
      if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        uint64_t v15 = _CalFilterCopyQuery(*(void **)(a1 + 48));
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)(v7 + 104))
          {
            uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
        uint64_t v17 = CPSqliteDatabaseStatementForReading();
        if (v17)
        {
          uint64_t v18 = v17;
          sqlite3_bind_double(*(sqlite3_stmt **)(v17 + 8), 1, *(double *)(a1 + 56));
          sqlite3_bind_int(*(sqlite3_stmt **)(v18 + 8), 2, *(_DWORD *)(a1 + 64));
          if (sqlite3_step(*(sqlite3_stmt **)(v18 + 8)) == 100)
          {
            uint64_t v19 = *(void *)(a1 + 40);
            _CalEventOccurrenceCacheLoadInfo(v19);
            *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _createEventOccurrenceFromStatement(v3, v18, *(const void **)(v19 + 32));
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v18)
            {
              uint64_t v20 = **(void **)v18;
              if (v20)
              {
                if (*(void *)(v20 + 104))
                {
                  uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v21) {
                    os_unfair_lock_assert_owner(v21 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        if (v15) {
          CFRelease(v15);
        }
      }
      __CalDatabaseRollbackTransaction(*(void *)(*(void *)(a1 + 40) + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3010");
    }
    else
    {
      uint64_t v22 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_ERROR, "Couldn't begin transaction", buf, 2u);
      }
    }
  }
}

void CalDatabaseGetEventOccurrenceAtDayAndOffset(uint64_t a1, double a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __CalDatabaseGetEventOccurrenceAtDayAndOffset_block_invoke;
  v6[3] = &__block_descriptor_68_e5_v8__0l;
  v6[4] = a1;
  *(double *)&v6[5] = a2;
  int v7 = a4;
  v6[6] = a5;
  v6[7] = a6;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
}

void __CalDatabaseGetEventOccurrenceAtDayAndOffset_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 32) + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
    uint64_t v7 = CPSqliteDatabaseStatementForReading();
    if (v7)
    {
      uint64_t v8 = v7;
      sqlite3_bind_double(*(sqlite3_stmt **)(v7 + 8), 1, *(double *)(a1 + 40));
      sqlite3_bind_int(*(sqlite3_stmt **)(v8 + 8), 2, *(_DWORD *)(a1 + 64));
      if (sqlite3_step(*(sqlite3_stmt **)(v8 + 8)) == 100)
      {
        **(_DWORD **)(a1 + 48) = sqlite3_column_int(*(sqlite3_stmt **)(v8 + 8), 0);
        **(double **)(a1 + 56) = sqlite3_column_double(*(sqlite3_stmt **)(v8 + 8), 1);
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v8)
        {
          uint64_t v9 = **(void **)v8;
          if (v9)
          {
            if (*(void *)(v9 + 104))
            {
              uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10) {
                os_unfair_lock_assert_owner(v10 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    CFRelease(@"SELECT event_id, occurrence_date FROM OccurrenceCache WHERE day = ? ORDER BY occurrence_date ASC LIMIT 1 OFFSET ?");
  }
}

uint64_t CalDatabaseRegisterProgressHandlerForOccurrencesSearch(uint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)(result + 116))
  {
    uint64_t v2 = result;
    uint64_t v3 = *a2;
    if (CDBLockingAssertionsEnabled) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4 && *(void *)v3 && *(void *)(*(void *)v3 + 104))
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t result = CPSqliteConnectionEnableProgressHandlerCallback();
    *(unsigned char *)(v2 + 116) = 0;
  }
  return result;
}

uint64_t _CalDatabaseApplicationSearchProgressHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a2 + 96);
  if (v2) {
    return v2(*(void *)(a2 + 104));
  }
  else {
    return 0;
  }
}

uint64_t CalDatabaseUnregisterProgressHandlerForOccurrencesSearch(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (*(void *)v1)
    {
      if (*(void *)(*(void *)v1 + 104))
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return MEMORY[0x1F4109700](v1);
}

uint64_t CalDatabaseCreateOccurrencesThatMatchEventIdsStatement(void *a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a2 + 88) + 24) + 80));
  *(void *)(a2 + 12 0) = 0;
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a2 + 88) + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreGetDatabase();
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = _CalFilterCopyQuery(a1);
    if (CDBLockingAssertionsEnabled && *(void *)(v8 + 104))
    {
      uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
    uint64_t result = CPSqliteDatabaseStatementForReading();
    *(void *)(a2 + 12 0) = v9;
  }
  return result;
}

void CalDatabaseDeleteOccurrencesThatMatchEventIdsStatement(uint64_t a1, uint64_t **a2)
{
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        uint64_t v3 = **a2;
        if (v3)
        {
          if (*(void *)(v3 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  BOOL v5 = *(const void **)(a1 + 120);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (os_unfair_lock_s *)(*(void *)(*(void *)(a1 + 88) + 24) + 80);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
}

void _CalDatabaseCopyEventOccurrencesThatMatchEventIds(uint64_t a1, sqlite3_stmt **a2)
{
  if (__CalDatabaseBeginReadTransaction(*(void *)(*(void *)(a1 + 88) + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3123"))
  {
    *(_DWORD *)(a1 + 64) = 0;
    if (a2)
    {
      sqlite3_bind_double(a2[1], 1, *(double *)(a1 + 56));
      sqlite3_bind_double(a2[1], 2, *(double *)(a1 + 72));
      unsigned int v4 = 0;
      while (1)
      {
        int v5 = sqlite3_step(a2[1]);
        if (v5 == 100)
        {
          uint64_t v6 = sqlite3_column_int(a2[1], 0);
          if (!*(void *)a1 || CFSetGetValueIfPresent(*(CFSetRef *)a1, (const void *)(int)v6, 0))
          {
            double v7 = sqlite3_column_double(a2[1], 1);
            uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(*(void *)(a1 + 88) + 24));
            EventWithint UID = _CalGetEventWithUID(RecordStore, v6);
            if (EventWithUID)
            {
              uint64_t v10 = (const void *)EventWithUID;
              if (sqlite3_column_type(a2[1], 2) != 5) {
                double v7 = sqlite3_column_double(a2[1], 2);
              }
              uint64_t v11 = *(void *)(a1 + 88);
              _CalEventOccurrenceCacheLoadInfo(v11);
              uint64_t v12 = (const void *)CalEventOccurrenceCreate(v10, *(const void **)(v11 + 32), v7);
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), v12);
              ++*(_DWORD *)(a1 + 80);
              if (!*(unsigned char *)(a1 + 136))
              {
                if (*(double *)(a1 + 128) <= v7 + (double)_CalEventGetDuration((uint64_t)v10)) {
                  *(unsigned char *)(a1 + 136) = 1;
                }
                *(double *)(a1 + 144) = v7;
              }
              double v13 = sqlite3_column_double(a2[1], 3);
              CFDateRef v14 = CFDateCreate(0, v13);
              double v15 = *(double *)(a1 + 56);
              *(double *)(a1 + 48) = v15;
              *(double *)(a1 + 56) = v13;
              CFArrayRef v16 = *(const __CFArray **)(a1 + 16);
              if (v16 && *(void *)(a1 + 24))
              {
                double v17 = vabdd_f64(v15, v13);
                if ((CFArrayGetCount(v16) || CFArrayGetCount(*(CFArrayRef *)(a1 + 24))) && v17 < 2.22044605e-16)
                {
                  ++*(_DWORD *)(a1 + 64);
                }
                else
                {
                  *(_DWORD *)(a1 + 64) = 1;
                  uint64_t v18 = *(__CFArray **)(a1 + 16);
                  if (v18) {
                    CFArrayAppendValue(v18, v14);
                  }
                  uint64_t v19 = *(__CFArray **)(a1 + 24);
                  if (v19) {
                    CFArrayAppendValue(v19, (const void *)(*(_DWORD *)(a1 + 80) - 1));
                  }
                }
              }
              CFRelease(v12);
              CFRelease(v14);
              ++v4;
            }
          }
        }
        BOOL v21 = CFArrayGetCount(*(CFArrayRef *)(a1 + 16)) > 1 && v4 > 0x63;
        if (v5 == 100 && v21)
        {
          CFArrayRef v23 = *(const __CFArray **)(a1 + 8);
          if (v23)
          {
            if (*(void *)(a1 + 24))
            {
              CFIndex Count = CFArrayGetCount(v23);
              int v25 = *(_DWORD *)(a1 + 64);
              *(_DWORD *)(a1 + 80) -= v25;
              if (v25 >= 1)
              {
                CFIndex v26 = Count - 1;
                unsigned int v27 = v25 + 1;
                do
                {
                  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), v26--);
                  --v27;
                }
                while (v27 > 1);
              }
            }
          }
          CFArrayRef v28 = *(const __CFArray **)(a1 + 16);
          if (v28)
          {
            CFIndex v29 = CFArrayGetCount(v28);
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), v29 - 1);
          }
          CFArrayRef v30 = *(const __CFArray **)(a1 + 24);
          if (v30)
          {
            CFIndex v31 = CFArrayGetCount(v30);
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), v31 - 1);
          }
        }
        if (v5 != 100) {
          break;
        }
        if (**(unsigned char **)(a1 + 40)) {
          char v32 = 1;
        }
        else {
          char v32 = v21;
        }
        if (v32)
        {
          if (!**(unsigned char **)(a1 + 40)) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
      }
      if ((v5 - 102) > 0xFFFFFFFD
        || (sqlite3_errmsg(*((sqlite3 **)*a2 + 1)), CFLog(), **(unsigned char **)(a1 + 40)))
      {
LABEL_56:
        **(unsigned char **)(a1 + 32) = 0;
      }
    }
LABEL_57:
    uint64_t v34 = *(void *)(*(void *)(a1 + 88) + 24);
    __CalDatabaseRollbackTransaction(v34, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3177");
  }
  else
  {
    uint64_t v33 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_ERROR, "Unable to start transaction", buf, 2u);
    }
    **(unsigned char **)(a1 + 32) = 0;
  }
}

uint64_t CalEventOccurrenceCacheRebuildIfNeeded(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  BOOL v2 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v2, OS_LOG_TYPE_DEBUG, "EventKitOC: Checking if we need to rebuild", buf, 2u);
  }
  if (*(unsigned char *)(a1 + 16) && CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
  {
    uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
    if (CDBLockingAssertionsEnabled) {
      BOOL v4 = RecordStore == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          double v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7) {
            os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      uint64_t v8 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v8)
      {
        uint64_t v9 = v8;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v8)
          {
            if (*(void *)(*(void *)v8 + 104))
            {
              uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10) {
                os_unfair_lock_assert_owner(v10 + 20);
              }
            }
          }
        }
        uint64_t v11 = 0;
        if (CPSqliteConnectionIntegerForPropertyWithDefaultValue() == 30) {
          goto LABEL_46;
        }
        if (__CalDatabaseBeginWriteTransaction(*(void *)(a1 + 24), (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3679"))
        {
          double Current = CFAbsoluteTimeGetCurrent();
          double v13 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_DEBUG, "EventKitOC: Clearing recurrence rule cached end dates", buf, 2u);
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v9)
            {
              if (*(void *)(*(void *)v9 + 104))
              {
                CFDateRef v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v14) {
                  os_unfair_lock_assert_owner(v14 + 20);
                }
              }
            }
          }
          CPSqliteConnectionPerformSQL();
          double v15 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            CFArrayRef v16 = v15;
            _CalEventOccurrenceCacheLoadInfo(a1);
            double v17 = *(double *)(a1 + 32);
            *(_DWORD *)int buf = 138412290;
            double v30 = v17;
            _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_DEBUG, "EventKitOC: Rebuilding cache in time zone %@...", buf, 0xCu);
          }
          _RebuildCache_0(a1, v9);
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v9)
            {
              if (*(void *)(*(void *)v9 + 104))
              {
                uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v18) {
                  os_unfair_lock_assert_owner(v18 + 20);
                }
              }
            }
          }
          uint64_t v19 = CPSqliteConnectionSetIntegerForProperty();
          uint64_t v20 = (void *)MEMORY[0x1AD0E9B90](v19);
          if ((uint64_t)((CFAbsoluteTimeGetCurrent() - Current) * 1000.0) >= 1)
          {
            BOOL v21 = [NSNumber numberWithInteger:@"milliseconds"];
            CFArrayRef v28 = v21;
            uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];

            CalAnalyticsSendEvent();
          }
          CFArrayRef v23 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            long long v24 = v23;
            CFAbsoluteTime v25 = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)int buf = 134217984;
            double v30 = v25 - Current;
            _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_DEBUG, "EventKitOC: Cache rebuilt in %f", buf, 0xCu);
          }
          __CalDatabaseCommitTransaction(*(void *)(a1 + 24), (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3708");
          uint64_t v11 = 1;
          goto LABEL_46;
        }
        CFLog();
      }
    }
    uint64_t v11 = 0;
LABEL_46:
    CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
    return v11;
  }
  return 0;
}

uint64_t _CalEventOccurrenceCacheForceRebuild(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      __int16 v17 = 0;
      uint64_t v10 = "The occurrence cache is not valid.  Will not rebuild the occurrence cache.";
      uint64_t v11 = (uint8_t *)&v17;
LABEL_23:
      _os_log_impl(&dword_1A8E81000, v9, OS_LOG_TYPE_DEBUG, v10, v11, 2u);
    }
    return 0;
  }
  if ((CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)) & 1) == 0)
  {
    uint64_t v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      uint64_t v10 = "Could not acquire the database lock.  Will not rebuild the occurrence cache.";
      uint64_t v11 = buf;
      goto LABEL_23;
    }
    return 0;
  }
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  uint64_t v6 = Database;
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        double v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
    uint64_t v6 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (v6)
    {
      if (__CalDatabaseBeginWriteTransaction(*(void *)(a1 + 24), (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3734"))
      {
        _RebuildCache_0(a1, v6);
        uint64_t v8 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)CFDateRef v14 = 0;
          _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_DEBUG, "The occurrence cache was successfully rebuilt.", v14, 2u);
        }
        __CalDatabaseCommitTransaction(*(void *)(a1 + 24), (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3742");
        uint64_t v6 = 1;
      }
      else
      {
        uint64_t v12 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)double v15 = 0;
          _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, "Unable to start transaction.  Will not rebuild the occurrence cache.", v15, 2u);
        }
        uint64_t v6 = 0;
      }
    }
  }
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  return v6;
}

void _CalEventOccurrenceCacheMarkEventForUpdate(uint64_t a1, void *value)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return;
  }
  CFSetRef v4 = *(const __CFSet **)(a1 + 120);
  if (v4)
  {
    if (CFSetContainsValue(v4, value)) {
      return;
    }
  }
  int ID = CPRecordGetID();
  if (ID >= 1)
  {
    int v6 = CPRecordGetID();
    double v7 = *(__CFDictionary **)(a1 + 88);
    if (v7) {
      CFDictionaryRemoveValue(v7, value);
    }
    uint64_t v8 = *(__CFDictionary **)(a1 + 104);
    if (v8) {
      CFDictionaryRemoveValue(v8, value);
    }
    uint64_t v9 = *(__CFSet **)(a1 + 112);
    if (v9 && v6 >= 1)
    {
      CFSetRemoveValue(v9, (const void *)v6);
LABEL_13:
      CFMutableDictionaryRef Mutable = *(__CFSet **)(a1 + 96);
      if (!Mutable)
      {
        CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 0, 0);
        *(void *)(a1 + 96) = Mutable;
      }
      CFSetAddValue(Mutable, (const void *)v6);
      goto LABEL_16;
    }
    if (v6 >= 1) {
      goto LABEL_13;
    }
  }
LABEL_16:
  if (*(void *)(a1 + 120) && _CalEventIsDisplayable((uint64_t)value)) {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 120), value);
  }
  uint64_t v11 = *(__CFSet **)(a1 + 128);
  if (v11)
  {
    CFSetRemoveValue(v11, value);
    uint64_t v12 = *(__CFDictionary **)(a1 + 104);
    if (v12) {
      CFDictionaryRemoveValue(v12, value);
    }
    if (ID >= 1)
    {
      double v13 = *(__CFSet **)(a1 + 112);
      if (v13)
      {
        CFSetRemoveValue(v13, (const void *)ID);
      }
    }
  }
}

void _CalEventOccurrenceCacheMarkEventForAlarmUpdate(uint64_t a1, void *value)
{
  if (*(unsigned char *)(a1 + 16))
  {
    CFSetRef v4 = *(const __CFSet **)(a1 + 120);
    if (!v4 || !CFSetContainsValue(v4, value))
    {
      CFSetRef v5 = *(const __CFSet **)(a1 + 128);
      if (!v5 || !CFSetContainsValue(v5, value))
      {
        if ((int)CPRecordGetID() >= 1)
        {
          int ID = CPRecordGetID();
          double v7 = *(__CFDictionary **)(a1 + 104);
          if (v7) {
            CFDictionaryRemoveValue(v7, value);
          }
          if (ID >= 1)
          {
            CFMutableDictionaryRef Mutable = *(__CFSet **)(a1 + 112);
            if (!Mutable)
            {
              CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 0, 0);
              *(void *)(a1 + 112) = Mutable;
            }
            CFSetAddValue(Mutable, (const void *)ID);
          }
        }
        if (*(void *)(a1 + 128) && _CalEventIsDisplayable((uint64_t)value))
        {
          uint64_t v9 = *(__CFSet **)(a1 + 128);
          CFSetAddValue(v9, value);
        }
      }
    }
  }
}

void _CalEventOccurrenceCacheMarkStoreForDefaultAlarmChanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3 && *(unsigned char *)(a1 + 16))
  {
    if (!*(void *)(a1 + 136)) {
      *(void *)(a1 + 136) = CFDictionaryCreateMutable(0, 1, 0, 0);
    }
    int ID = (const void *)(int)CPRecordGetID();
    int v6 = (const void *)((unint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 136), ID) | a3);
    double v7 = *(__CFDictionary **)(a1 + 136);
    CFDictionarySetValue(v7, ID, v6);
  }
}

CFMutableSetRef _CalEventOccurrenceCacheBeginTrackingUpdates(CFMutableSetRef result)
{
  if (!*((void *)result + 15))
  {
    CFMutableSetRef v1 = result;
    BOOL v2 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
    *((void *)result + 15) = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
    uint64_t result = CFSetCreateMutable(0, 0, v2);
    *((void *)v1 + 16) = result;
  }
  return result;
}

void _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChangesIfNeeded(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  __CalDatabaseBeginReadTransaction(v2, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4097");
  _CalEventOccurrenceCacheLoadInfo(a1);
  uint64_t v10 = 0;
  long long v9 = 0u;
  memset(v8, 0, sizeof(v8));
  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v8, a1 + 32);
  __CalDatabaseRollbackTransaction(v2, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4100");
  id v3 = *(id *)(*(void *)(a1 + 24) + 296);
  uint64_t GlobalDefaultTimedAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(v3);
  uint64_t GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v3);
  uint64_t v6 = GlobalDefaultAllDayAlarmOffset;
  if (GlobalDefaultTimedAlarmOffset != *((void *)&v9 + 1))
  {
    __CalDatabaseBeginWriteTransaction(v2, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4108");
    _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChange(a1, 0);
    if (v6 == v10)
    {
LABEL_6:
      *((void *)&v9 + 1) = GlobalDefaultTimedAlarmOffset;
      uint64_t v10 = v6;
      __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v7, (uint64_t)v8);
      _CalEventOccurrenceCacheSetRangeInfo(a1, (uint64_t)v7);
      __CalDatabaseCommitTransaction(*(void *)(a1 + 24), (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4124");
      goto LABEL_7;
    }
LABEL_5:
    _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChange(a1, 1);
    goto LABEL_6;
  }
  if (GlobalDefaultAllDayAlarmOffset != v10)
  {
    __CalDatabaseBeginWriteTransaction(v2, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4114");
    goto LABEL_5;
  }
LABEL_7:

  __destructor_8_s0_s8_s16_s24_s32((uint64_t)v8);
}

void sub_1A8F37040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  __destructor_8_s0_s8_s16_s24_s32((uint64_t)va);
  _Unwind_Resume(a1);
}

void _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChange(uint64_t a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!_CalDatabaseGetRecordStore(*(void *)(a1 + 24)))
  {
    uint64_t v12 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)int buf = 0;
    double v13 = "No record store in _UpdateAlarmsForStoreDefaultAlarmChanges";
    goto LABEL_19;
  }
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database)
  {
    uint64_t v12 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)int buf = 0;
    double v13 = "No db in _UpdateAlarmsForStoreDefaultAlarmChanges";
    goto LABEL_19;
  }
  uint64_t v6 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      double v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  uint64_t v8 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!v8)
  {
    uint64_t v12 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)int buf = 0;
    double v13 = "Failed to open connection to database";
LABEL_19:
    _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_ERROR, v13, buf, 2u);
    return;
  }
  long long v9 = (sqlite3 **)v8;
  uint64_t v10 = *(void **)(*(void *)(a1 + 24) + 296);
  if (a2) {
    uint64_t GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v10);
  }
  else {
    uint64_t GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(v10);
  }
  sqlite3_int64 v14 = GlobalDefaultAllDayAlarmOffset;
  int function = sqlite3_create_function(v9[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalculateAlarmFireDateCallback, 0, 0);
  if (function)
  {
    int v16 = function;
    __int16 v17 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67109120;
      int v30 = v16;
      _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, "Failed to create CALCULATE_ALARM_FIRE_DATE function in _UpdateAlarmsForStoreDefaultAlarmChanges, with error code: %i", buf, 8u);
    }
    if (CDBLockingAssertionsEnabled && *v9 && *((void *)*v9 + 13))
    {
      uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v18) {
        os_unfair_lock_assert_owner(v18 + 20);
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    uint64_t v19 = @"default_alarm_offset";
    if (a2) {
      uint64_t v19 = @"default_all_day_alarm_offset";
    }
    [NSString stringWithFormat:@"UPDATE AlarmCache SET fire_date = CALCULATE_ALARM_FIRE_DATE(        AlarmCache.occurrence_date, IFNULL(AlarmCache.travel_time, 0), ?) WHERE AlarmCache.is_default = 1 AND   AlarmCache.all_day = ?  AND (SELECT %@       FROM Store       WHERE Store.ROWint ID = AlarmCache.store_id)       IS NULL", v19];
    id v28 = (id)objc_claimAutoreleasedReturnValue();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v6 + 104))
      {
        uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20) {
          os_unfair_lock_assert_owner(v20 + 20);
        }
      }
    }
    uint64_t v21 = CPSqliteDatabaseStatementForWriting();
    if (v21)
    {
      uint64_t v22 = (uint64_t **)v21;
      sqlite3_bind_int64(*(sqlite3_stmt **)(v21 + 8), 1, v14);
      sqlite3_bind_int((sqlite3_stmt *)v22[1], 2, a2);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v22)
        {
          uint64_t v23 = **v22;
          if (v23)
          {
            if (*(void *)(v23 + 104))
            {
              long long v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v24) {
                os_unfair_lock_assert_owner(v24 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v22)
        {
          uint64_t v25 = **v22;
          if (v25)
          {
            if (*(void *)(v25 + 104))
            {
              CFIndex v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v26) {
                os_unfair_lock_assert_owner(v26 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    sqlite3_create_function(v9[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, 0, 0, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v9)
      {
        if (*((void *)*v9 + 13))
        {
          uint64_t v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v27) {
            os_unfair_lock_assert_owner(v27 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
}

void _CalEventOccurrenceCacheSetRangeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v4 + 352) != 1)
  {
    uint64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
    double v13 = objc_msgSend(NSString, "stringWithUTF8String:", "void _CalEventOccurrenceCacheSetRangeInfo(CalEventOccurrenceCacheRef, CalCacheRangeInfo)");
    [v12 handleFailureInFunction:v13 file:@"CalEventOccurrenceCache.m" lineNumber:1356 description:@"No write transaction when updating occurrence cache range."];

    uint64_t v4 = *(void *)(a1 + 24);
  }
  uint64_t RecordStore = _CalDatabaseGetRecordStore(v4);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = Database == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  uint64_t v11 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v14, a2);
  _CalEventOccurrenceCacheSetRangeInfoWithConnection(v11, v14);
  __copy_assignment_8_8_s0_s8_s16_s24_s32_t40w16(a1 + 32, a2);
  __destructor_8_s0_s8_s16_s24_s32(a2);
}

void sub_1A8F375B0(_Unwind_Exception *a1)
{
  __destructor_8_s0_s8_s16_s24_s32(v1);
  _Unwind_Resume(a1);
}

void _CalEventOccurrenceCacheStopTrackingUpdatesInternal(uint64_t a1)
{
  if (*(void *)(a1 + 136) || *(void *)(a1 + 120) || *(void *)(a1 + 128))
  {
    id v2 = *(id *)(*(void *)(a1 + 24) + 296);
    context[0] = a1;
    context[1] = CalAlarmGetGlobalDefaultTimedAlarmOffset(v2);
    context[2] = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v2);
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 136);
    if (v3)
    {
      CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)_UpdateAlarmsForStoreDefaultAlarmChanges, context);
      CFRelease(*(CFTypeRef *)(a1 + 136));
      *(void *)(a1 + 136) = 0;
    }
    CFSetRef v4 = *(const __CFSet **)(a1 + 120);
    if (v4)
    {
      CFSetApplyFunction(v4, (CFSetApplierFunction)_GenerateDatesForOccurrenceCache, context);
      CFRelease(*(CFTypeRef *)(a1 + 120));
      *(void *)(a1 + 12 0) = 0;
    }
    CFSetRef v5 = *(const __CFSet **)(a1 + 128);
    if (v5)
    {
      CFSetApplyFunction(v5, (CFSetApplierFunction)_GenerateDatesForAlarmCache, context);
      CFRelease(*(CFTypeRef *)(a1 + 128));
      *(void *)(a1 + 128) = 0;
    }
  }
}

void _CalEventOccurrenceCacheRevert(void *a1)
{
  id v2 = (const void *)a1[15];
  if (v2)
  {
    CFRelease(v2);
    a1[15] = 0;
  }
  CFDictionaryRef v3 = (const void *)a1[16];
  if (v3)
  {
    CFRelease(v3);
    a1[16] = 0;
  }
  CFSetRef v4 = (__CFDictionary *)a1[11];
  if (v4) {
    CFDictionaryRemoveAllValues(v4);
  }
  CFSetRef v5 = (__CFSet *)a1[12];
  if (v5) {
    CFSetRemoveAllValues(v5);
  }
  BOOL v6 = (__CFDictionary *)a1[13];
  if (v6) {
    CFDictionaryRemoveAllValues(v6);
  }
  double v7 = (__CFSet *)a1[14];
  if (v7) {
    CFSetRemoveAllValues(v7);
  }
  uint64_t v8 = (__CFDictionary *)a1[17];
  if (v8)
  {
    CFDictionaryRemoveAllValues(v8);
  }
}

void _CalEventOccurrenceCacheStopTrackingUpdatesAndSave(CFDictionaryRef *a1, void *a2)
{
  _CalEventOccurrenceCacheStopTrackingUpdatesInternal((uint64_t)a1);
  CFSetRef v4 = a1[12];
  if (v4 && CFSetGetCount(v4) >= 1)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(void *)(*a2 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    BOOL v6 = (void *)CPSqliteConnectionStatementForSQL();
    if (v6) {
      CFSetApplyFunction(a1[12], (CFSetApplierFunction)_CalEventOccurrenceCacheProcessDeletes, v6);
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(void *)(*a2 + 104))
          {
            double v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
    }
    uint64_t v8 = (void *)CPSqliteConnectionStatementForSQL();
    if (v8) {
      CFSetApplyFunction(a1[12], (CFSetApplierFunction)_CalEventOccurrenceCacheProcessDeletes, v8);
    }
    CalPerformSQLWithConnection(a2, @"DELETE FROM OccurrenceCacheDays WHERE count = 0;");
    CFSetRemoveAllValues(a1[12]);
  }
  CFSetRef v9 = a1[14];
  if (v9 && CFSetGetCount(v9) >= 1)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(void *)(*a2 + 104))
          {
            uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
    }
    uint64_t v11 = (void *)CPSqliteConnectionStatementForSQL();
    if (v11) {
      CFSetApplyFunction(a1[14], (CFSetApplierFunction)_CalEventOccurrenceCacheProcessDeletes, v11);
    }
    CFSetRemoveAllValues(a1[14]);
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v14[0] = a1;
  v14[1] = &v21;
  v14[2] = &v20;
  v14[3] = a2;
  uint64_t v15 = *MEMORY[0x1E4F57888];
  uint64_t v16 = v15;
  uint64_t v17 = v15;
  uint64_t v18 = v15;
  int64x2_t v19 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  CFDictionaryRef v12 = a1[11];
  if (v12 && CFDictionaryGetCount(v12) >= 1)
  {
    CFDictionaryApplyFunction(a1[11], (CFDictionaryApplierFunction)_CalEventOccurrenceCacheProcessAdds, v14);
    CFDictionaryRemoveAllValues(a1[11]);
  }
  CFDictionaryRef v13 = a1[13];
  if (v13)
  {
    if (CFDictionaryGetCount(v13) >= 1)
    {
      CFDictionaryApplyFunction(a1[13], (CFDictionaryApplierFunction)_CalEventAlarmCacheProcessAdds, v14);
      CFDictionaryRemoveAllValues(a1[13]);
    }
  }
}

uint64_t _CalEventOccurrenceCacheMigrateEventOccurrencesWithConnection(uint64_t a1, void *a2)
{
  uint64_t ID = CPRecordGetID();
  uint64_t v4 = CPRecordGetID();
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE OccurrenceCacheDays SET store_id = %d WHERE store_id = %d;",
                      v4,
                      ID);
  if (result)
  {
    double v7 = (const void *)result;
    CalPerformSQLWithConnection(a2, result);
    CFRelease(v7);
    uint64_t result = (uint64_t)CFStringCreateWithFormat(v5, 0, @"UPDATE OccurrenceCache SET store_id = %d WHERE store_id = %d;",
                        v4,
                        ID);
    if (result)
    {
      uint64_t v8 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v8);
      return 1;
    }
  }
  return result;
}

uint64_t _CalEventOccurrenceCacheMigrateEventOccurrencesBetweenCalendars(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"UPDATE OccurrenceCacheDays SET calendar_id = %d WHERE calendar_id = %d;",
                      a4,
                      a3);
  if (result)
  {
    CFSetRef v9 = (const void *)result;
    CalPerformSQLWithConnection(a2, result);
    CFRelease(v9);
    uint64_t result = (uint64_t)CFStringCreateWithFormat(v7, 0, @"UPDATE OccurrenceCache SET calendar_id = %d WHERE calendar_id = %d;",
                        a4,
                        a3);
    if (result)
    {
      uint64_t v10 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v10);
      return 1;
    }
  }
  return result;
}

uint64_t _CalEventOccurrenceCacheGenerateOccurrencesInDateRange(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v152 = a4;
  id v10 = a5;
  id v11 = a6;
  CFDictionaryRef v12 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 138412546;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v152;
    _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_DEBUG, "Rebuilding occurrence cache from start date [%@] to end date [%@].", buf, 0x16u);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  _CalEventOccurrenceCacheLoadInfo(a1);
  CFAbsoluteTimeGetCurrent();
  CFStringRef cf = (const __CFString *)CalCFTimeZoneCopyCalTimeZone();
  sqlite3_int64 v14 = _CalEventOccurrenceCacheGetCacheCalendar(a1);
  uint64_t v15 = [MEMORY[0x1E4F1C9A8] CalGregorianGMTCalendar];
  uint64_t v16 = [v15 timeZone];
  uint64_t v17 = [v14 timeZone];
  uint64_t v18 = [v9 dateInTimeZone:v16 fromTimeZone:v17];

  CFTypeRef v135 = v15;
  int64x2_t v19 = [v15 timeZone];
  CFIndex v156 = v14;
  uint64_t v20 = [v14 timeZone];
  uint64_t v21 = [v152 dateInTimeZone:v19 fromTimeZone:v20];

  uint64_t v22 = (void *)CalFilterCreateWithDatabaseShowingAllIncludingDisabledStores(*(void *)(a1 + 24));
  uint64_t v23 = *(void *)(a1 + 24);
  [v9 timeIntervalSinceReferenceDate];
  [v152 timeIntervalSinceReferenceDate];
  long long v138 = v18;
  [v18 timeIntervalSinceReferenceDate];
  uint64_t v137 = v21;
  [v21 timeIntervalSinceReferenceDate];
  long long v24 = (void *)_CalDatabaseCopyNonRecurringEventsInDateRange(v23, a2, v22);
  uint64_t v25 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    CFIndex v26 = NSNumber;
    uint64_t v27 = v25;
    id v28 = objc_msgSend(v26, "numberWithUnsignedInteger:", objc_msgSend(v24, "count"));
    *(_DWORD *)int buf = 138412290;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_impl(&dword_1A8E81000, v27, OS_LOG_TYPE_DEBUG, "Found [%@] non-recurring events in the date range.", buf, 0xCu);
  }
  uint64_t v29 = *(void *)(a1 + 24);
  [v9 timeIntervalSinceReferenceDate];
  double v31 = v30;
  [v152 timeIntervalSinceReferenceDate];
  double v33 = v32;
  [v18 timeIntervalSinceReferenceDate];
  double v35 = v34;
  [v137 timeIntervalSinceReferenceDate];
  double v37 = (void *)_CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange(v29, v22, cf, v31, v33, v35, v36);
  int v38 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v39 = NSNumber;
    __int16 v40 = v38;
    uint64_t v41 = objc_msgSend(v39, "numberWithUnsignedInteger:", objc_msgSend(v37, "count"));
    *(_DWORD *)int buf = 138412290;
    *(void *)&uint8_t buf[4] = v41;
    _os_log_impl(&dword_1A8E81000, v40, OS_LOG_TYPE_DEBUG, "Found [%@] recurring events possibly in the date range.", buf, 0xCu);
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    if (v24)
    {
      v178.length = CFArrayGetCount((CFArrayRef)v24);
      v178.locatioCFIndex n = 0;
      CFArrayAppendArray(Mutable, (CFArrayRef)v24, v178);
    }
    if (v37)
    {
      v179.length = CFArrayGetCount((CFArrayRef)v37);
      v179.locatioCFIndex n = 0;
      CFArrayAppendArray(Mutable, (CFArrayRef)v37, v179);
    }
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v37) {
    CFRelease(v37);
  }
  CFRelease(v22);
  int v43 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    double v44 = NSNumber;
    uint64_t v45 = v43;
    __int16 v46 = [v44 numberWithDouble:CFAbsoluteTimeGetCurrent() - Current];
    int v47 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", -[__CFArray count](Mutable, "count"));
    *(_DWORD *)int buf = 138412546;
    *(void *)&uint8_t buf[4] = v46;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v47;
    _os_log_impl(&dword_1A8E81000, v45, OS_LOG_TYPE_DEBUG, "Occurrence cache candidate event fetching took [%@] seconds and found [%@] total events.", buf, 0x16u);
  }
  double v48 = CFAbsoluteTimeGetCurrent();
  if (Mutable)
  {
    id v49 = *(id *)(*(void *)(a1 + 24) + 296);
    uint64_t GlobalDefaultTimedAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(v49);
    uint64_t v128 = v49;
    uint64_t GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v49);
    uint64_t v162 = 0;
    *(void *)int buf = a1;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = &v162;
    uint64_t v170 = a2;
    [v9 timeIntervalSinceReferenceDate];
    uint64_t v171 = v52;
    [v152 timeIntervalSinceReferenceDate];
    uint64_t v172 = v53;
    id v130 = v10;
    [v10 timeIntervalSinceReferenceDate];
    uint64_t v173 = v54;
    id v129 = v11;
    [v11 timeIntervalSinceReferenceDate];
    uint64_t v174 = v55;
    uint64_t v175 = GlobalDefaultTimedAlarmOffset;
    uint64_t v176 = GlobalDefaultAllDayAlarmOffset;
    CFIndex Count = CFArrayGetCount(Mutable);
    uint64_t v161 = 0;
    if (Count < 1)
    {
      char context = 0;
    }
    else
    {
      CFIndex v58 = Count;
      char context = 0;
      CFIndex v59 = 0;
      double v60 = *MEMORY[0x1E4F57888];
      *(void *)&long long v57 = 134218240;
      long long v127 = v57;
      CFIndex v136 = Count;
      v131 = Mutable;
      id v132 = v9;
      do
      {
        CFTypeRef v61 = (void *)MEMORY[0x1AD0E9B90]();
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v59);
        uint64_t v63 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v64 = NSNumber;
          id v65 = v63;
          uint64_t v66 = [v64 numberWithInt:CPRecordGetID()];
          CFArrayRef v67 = ValueAtIndex;
          CFMutableArrayRef v68 = (void *)_CalEventCopySummary((uint64_t)ValueAtIndex);
          *(_DWORD *)int v163 = 138412546;
          CFIndex v164 = (CFIndex)v66;
          __int16 v165 = 2112;
          uint64_t v166 = v68;
          _os_log_impl(&dword_1A8E81000, v65, OS_LOG_TYPE_DEBUG, "Analyzing occurrence cache candidate event.   Row ID: [%@]  Title: [%@]", v163, 0x16u);

          CFNumberRef ValueAtIndex = v67;
        }
        if (_CalEventIsDisplayable((uint64_t)ValueAtIndex))
        {
          long long v140 = v61;
          id v69 = v9;
          double v70 = COERCE_DOUBLE(_CalEventGetStartDate((uint64_t)ValueAtIndex));
          _CalEventOccurrenceCacheLoadInfo(a1);
          id v71 = v69;
          DayCFIndex Count = _CalEventGetDayCount((uint64_t)ValueAtIndex, *(const __CFTimeZone **)(a1 + 32));
          if ((int)DayCount < 2
            || ([v69 dateByAddingDays:1 - (int)DayCount inCalendar:v156],
                id v71 = objc_claimAutoreleasedReturnValue(),
                v69,
                DayCount < 0x186A1))
          {
            BOOL IsReminderIntegrationEvent = _CalEventIsReminderIntegrationEvent((uint64_t)ValueAtIndex);
            uint64_t v78 = [v156 timeZone];
            BOOL v143 = IsReminderIntegrationEvent;
            long long v79 = _CalEventCopyOccurrenceDatesInDateRange((uint64_t)ValueAtIndex, v71, v152, v78, IsReminderIntegrationEvent);

            CFArrayRef theArray = v79;
            if (v79)
            {
              id v155 = ValueAtIndex;
              long long v80 = (void *)CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
              {
                long long v81 = v71;
                uint64_t v82 = NSNumber;
                CFIndex v83 = v80;
                v84 = objc_msgSend(v82, "numberWithUnsignedInteger:", -[__CFArray count](theArray, "count"));
                CFAbsoluteTime v85 = [NSNumber numberWithInt:CPRecordGetID()];
                [NSNumber numberWithInt:DayCount];
                v87 = CFIndex v86 = v59;
                *(_DWORD *)int v163 = 138412802;
                CFIndex v164 = (CFIndex)v84;
                __int16 v165 = 2112;
                uint64_t v166 = v85;
                __int16 v167 = 2112;
                CFArrayRef v168 = v87;
                _os_log_impl(&dword_1A8E81000, v83, OS_LOG_TYPE_DEBUG, "Found [%@] occurrence dates in the date range for candidate event with row ID [%@].  Number of days spanned: [%@]", v163, 0x20u);

                CFIndex v59 = v86;
                id v71 = v81;

                CFIndex v58 = v136;
              }
              CFIndex v146 = CFArrayGetCount(theArray);
              if (v146 * (int)DayCount >= 100001)
              {
                uint64_t v120 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int v163 = v127;
                  CFIndex v164 = v146;
                  __int16 v165 = 1024;
                  LODWORD(v166) = DayCount;
                  _os_log_impl(&dword_1A8E81000, v120, OS_LOG_TYPE_ERROR, "EventKitOC: Event duration is too long, not adding to occurrence cache (asked to add %li occurrences each with %i days).", v163, 0x12u);
                }
              }
              else
              {
                unsigned int ID = CPRecordGetID();
                unsigned int CalendarId = _CalEventGetCalendarId((uint64_t)v155);
                unsigned int StoreId = _CalCalendarItemGetStoreId((uint64_t)v155);
                BOOL IsAllDay = _CalEventIsAllDay((uint64_t)v155);
                id v89 = (void *)_CalEventCopyTravelTime((uint64_t)v155);
                int v142 = [v89 intValue];

                uint64_t v159 = 0;
                uint64_t v160 = 0;
                _CalEventGetLargestPossibleAlarmOffsets((uint64_t)v155, &v160, &v159);
                unsigned int v154 = ID;
                if (ID == -1)
                {
                  __int16 v90 = (void *)CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v91 = v90;
                    CFTypeRef DebugDescription = _CalEntityGetDebugDescription(v155);
                    *(_DWORD *)int v163 = 138412290;
                    CFIndex v164 = (CFIndex)DebugDescription;
                    _os_log_impl(&dword_1A8E81000, v91, OS_LOG_TYPE_ERROR, "Inserting an event with id -1 into the occurrence cache in _CalEventOccurrenceCacheGenerateOccurrencesInDateRange. event=%@", v163, 0xCu);
                  }
                  _CalDatabaseIntegrityError(*(void *)(a1 + 24), @"Insert Corrupt Occurrence - GenerateOccurrences");
                }
                Enddouble Date = _CalRecurrenceGetEndDate((uint64_t)v155);
                if (v146 >= 1)
                {
                  id v133 = v71;
                  CFIndex v134 = v59;
                  CFIndex v94 = 0;
                  uint64_t v95 = (uint64_t)(EndDate - v70);
                  do
                  {
                    contexta = (void *)MEMORY[0x1AD0E9B90]();
                    CFArrayGetValueAtIndex(theArray, v94);
                    id v96 = (id)objc_claimAutoreleasedReturnValue();
                    double v97 = v60;
                    if (v143)
                    {
                      double v97 = v60;
                      if (v94 + 1 < v146)
                      {
                        v98 = CFArrayGetValueAtIndex(theArray, v94 + 1);
                        [v98 timeIntervalSinceReferenceDate];
                        double v97 = v99;
                      }
                    }
                    double v157 = 0.0;
                    double v158 = 0.0;
                    objc_msgSend(v96, "timeIntervalSinceReferenceDate", v127);
                    uint64_t MostExtremeAlarmDates = _CalEventOccurrenceCacheGetMostExtremeAlarmDates(v160, v159, v142, &v158, &v157, v100);
                    CFArrayRef v102 = v96;
                    if ((int)DayCount >= 1)
                    {
                      uint64_t v103 = 0;
                      CFArrayRef v102 = v96;
                      do
                      {
                        id v104 = (void *)MEMORY[0x1AD0E9B90](MostExtremeAlarmDates);
                        if (v103)
                        {
                          id v105 = [v96 dateByAddingDays:v103 inCalendar:v156];
                          uint64_t v106 = [v156 startOfDayForDate:v105];

                          CFArrayRef v102 = (void *)v106;
                        }
                        BOOL v107 = (void *)CDBLogHandle;
                        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
                        {
                          unsigned int v108 = NSNumber;
                          CFURLRef v109 = v107;
                          v110 = [v108 numberWithInt:CPRecordGetID()];
                          *(_DWORD *)int v163 = 138412546;
                          CFIndex v164 = (CFIndex)v102;
                          __int16 v165 = 2112;
                          uint64_t v166 = v110;
                          _os_log_impl(&dword_1A8E81000, v109, OS_LOG_TYPE_DEBUG, "Determining if occurrence chunk with date [%@] for event with row ID [%@] should be included in the occurrence cache.", v163, 0x16u);
                        }
                        if ([v102 CalIsAfterOrSameAsDate:v69])
                        {
                          if ([v102 CalIsAfterOrSameAsDate:v152])
                          {
                            break;
                          }
                          long long v111 = [v96 CalDateByComponentwiseAddingSeconds:v95 inCalendar:v156];
                          [v102 timeIntervalSinceReferenceDate];
                          double v113 = v112;
                          double v114 = v60;
                          if (v103)
                          {
                            [v96 timeIntervalSinceReferenceDate];
                            double v114 = v115;
                          }
                          [v111 timeIntervalSinceReferenceDate];
                          if (v103) {
                            double v117 = v60;
                          }
                          else {
                            double v117 = v158;
                          }
                          if (v103) {
                            double v118 = v60;
                          }
                          else {
                            double v118 = v157;
                          }
                          _CalEventOccurrenceCacheInsertOccurrence(a1, a2, &v161, (void *)v154, (void *)CalendarId, (void *)StoreId, v113, v114, v116, v97, v117, v118);
                        }
                        ++v103;
                      }
                      while (DayCount != v103);
                    }
                    [v96 timeIntervalSinceReferenceDate];
                    _CalAlarmCacheProcessAddedEvent((double *)buf, (uint64_t)v155, v154, StoreId, IsAllDay, v142, v119);

                    ++v94;
                  }
                  while (v94 != v146);
                  char context = 1;
                  CFMutableDictionaryRef Mutable = v131;
                  id v9 = v132;
                  CFIndex v58 = v136;
                  id v71 = v133;
                  CFIndex v59 = v134;
                }
              }
              CFRelease(theArray);
            }
          }
          else
          {
            uint64_t v72 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int v163 = 67109120;
              LODWORD(v164) = DayCount;
              _os_log_impl(&dword_1A8E81000, v72, OS_LOG_TYPE_ERROR, "EventKitOC: Event duration is too long, not adding to occurrence cache (asked to add occurrences with %i days each).", v163, 8u);
            }
          }
          CFTypeRef v61 = v140;
        }
        else
        {
          id v73 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v74 = NSNumber;
            long long v75 = v73;
            long long v76 = [v74 numberWithInt:CPRecordGetID()];
            *(_DWORD *)int v163 = 138412290;
            CFIndex v164 = (CFIndex)v76;
            _os_log_impl(&dword_1A8E81000, v75, OS_LOG_TYPE_DEBUG, "Event with row ID [%@] is not displayable.  Will not insert into occurrence cache.", v163, 0xCu);
          }
        }
        ++v59;
      }
      while (v59 != v58);
    }
    CFRelease(Mutable);

    uint64_t v121 = context & 1;
    id v11 = v129;
    id v10 = v130;
  }
  else
  {
    uint64_t v121 = 0;
  }
  uint64_t v122 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    int v123 = v122;
    CFAbsoluteTime v124 = CFAbsoluteTimeGetCurrent() - v48;
    CFArrayRef v125 = [NSNumber numberWithBool:v121];
    *(_DWORD *)int buf = 134218242;
    *(CFAbsoluteTime *)&uint8_t buf[4] = v124;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v125;
    _os_log_impl(&dword_1A8E81000, v123, OS_LOG_TYPE_DEBUG, "Occurrence cache rebuilt.  Took [%f] seconds.  Was cache modified: [%@]", buf, 0x16u);
  }
  CFRelease(cf);

  return v121;
}

uint64_t _CalAlarmCacheGenerateAlarmsInDateRange(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  id v15 = a7;
  uint64_t v16 = (id)CDBLogHandle;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 138543618;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v13;
    _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_DEBUG, "Rebuilding alarm cache from start date [%{public}@] to end date [%{public}@].", buf, 0x16u);
  }

  double Current = CFAbsoluteTimeGetCurrent();
  id v18 = v12;
  id v19 = v13;
  if (!_CalDatabaseGetRecordStore(*(void *)(a1 + 24))) {
    goto LABEL_15;
  }
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_15;
  }
  [v18 timeIntervalSinceReferenceDate];
  double v23 = v22;
  [v19 timeIntervalSinceReferenceDate];
  double v25 = v24;
  uint64_t GlobalDefaultTimedAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(*(void **)(*(void *)(a1 + 24) + 296));
  uint64_t GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(*(void **)(*(void *)(a1 + 24) + 296));
  uint64_t pApp = GlobalDefaultTimedAlarmOffset;
  id v108 = (id)GlobalDefaultAllDayAlarmOffset;
  int v28 = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ALARM_FIRE_DATE", 7, 526337, &pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_AlarmFireDateCallback, 0, 0);
  if (v28)
  {
    uint64_t v29 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v28;
      _os_log_impl(&dword_1A8E81000, v29, OS_LOG_TYPE_ERROR, "Failed to create ALARM_FIRE_DATE function in _CalAlarmCacheGenerateAlarmsForEventsInOccurrenceCacheInDateRange, with error code: %i", buf, 8u);
    }
    BOOL v89 = 0;
    goto LABEL_16;
  }
  *(double *)int buf = v23;
  *(double *)&uint8_t buf[8] = v25;
  *(void *)&uint8_t buf[16] = GlobalDefaultTimedAlarmOffset;
  uint64_t v100 = GlobalDefaultAllDayAlarmOffset;
  int function = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ALARM_SHOULD_BE_IN_CACHE", 7, 526337, buf, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_AlarmShouldBeInCacheCallback, 0, 0);
  if (function)
  {
    double v31 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v93 = 67109120;
      int v94 = function;
      _os_log_impl(&dword_1A8E81000, v31, OS_LOG_TYPE_ERROR, "Failed to create ALARM_SHOULD_BE_IN_CACHE function in _CalAlarmCacheGenerateAlarmsForEventsInOccurrenceCacheInDateRange, with error code: %i", v93, 8u);
    }
LABEL_15:
    BOOL v89 = 0;
    goto LABEL_16;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v82 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v82) {
        os_unfair_lock_assert_owner(v82 + 20);
      }
    }
  }
  uint64_t v83 = CPSqliteDatabaseStatementForWriting();
  v84 = (uint64_t **)v83;
  if (v83)
  {
    sqlite3_bind_double(*(sqlite3_stmt **)(v83 + 8), 1, v23);
    sqlite3_bind_double((sqlite3_stmt *)v84[1], 2, v25);
    sqlite3_bind_double((sqlite3_stmt *)v84[1], 3, v23);
    sqlite3_bind_double((sqlite3_stmt *)v84[1], 4, v25);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v84)
      {
        uint64_t v85 = **v84;
        if (v85)
        {
          if (*(void *)(v85 + 104))
          {
            CFIndex v86 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v86) {
              os_unfair_lock_assert_owner(v86 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    BOOL v89 = sqlite3_changes((sqlite3 *)(*v84)[1]) > 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v84)
      {
        uint64_t v87 = **v84;
        if (v87)
        {
          if (*(void *)(v87 + 104))
          {
            __int16 v88 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v88) {
              os_unfair_lock_assert_owner(v88 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    BOOL v89 = 0;
  }
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ALARM_FIRE_DATE", 7, 526337, 0, 0, 0, 0);
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ALARM_SHOULD_BE_IN_CACHE", 7, 526337, 0, 0, 0, 0);
LABEL_16:

  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v91, a5);
  id v32 = v18;
  id v33 = v19;
  id v34 = v14;
  id v35 = v15;
  _CalEventOccurrenceCacheLoadInfo(a1);
  if (CalEventOccurrenceCacheGetLongAlarmIntervals_onceToken != -1) {
    dispatch_once(&CalEventOccurrenceCacheGetLongAlarmIntervals_onceToken, &__block_literal_global_23);
  }
  double v36 = *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longNegativeInterval;
  double v37 = *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longPositiveInterval;
  id v38 = v32;
  id v39 = v33;
  if (!_CalDatabaseGetRecordStore(*(void *)(a1 + 24))) {
    goto LABEL_26;
  }
  if (CDBLockingAssertionsEnabled)
  {
    __int16 v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v40) {
      os_unfair_lock_assert_owner(v40 + 20);
    }
  }
  uint64_t v41 = CPRecordStoreGetDatabase();
  if (!v41) {
    goto LABEL_26;
  }
  [v38 timeIntervalSinceReferenceDate];
  double v43 = v42;
  [v39 timeIntervalSinceReferenceDate];
  double v45 = v44;
  uint64_t v46 = CalAlarmGetGlobalDefaultTimedAlarmOffset(*(void **)(*(void *)(a1 + 24) + 296));
  uint64_t v47 = CalAlarmGetGlobalDefaultAllDayAlarmOffset(*(void **)(*(void *)(a1 + 24) + 296));
  *(void *)int buf = v46;
  *(void *)&uint8_t buf[8] = v47;
  int v48 = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ALARM_FIRE_DATE", 7, 526337, buf, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_AlarmFireDateCallback, 0, 0);
  if (v48)
  {
    id v49 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(pApp) = 67109120;
      HIDWORD(pApp) = v48;
      _os_log_impl(&dword_1A8E81000, v49, OS_LOG_TYPE_ERROR, "Failed to create ALARM_FIRE_DATE function in _CalAlarmCacheGenerateAlarmsForNonRecurringEventsNotInOccurrenceCacheInDateRange, with error code: %i", (uint8_t *)&pApp, 8u);
    }
LABEL_26:
    BOOL v50 = 0;
    goto LABEL_27;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(v41 + 104))
    {
      long long v75 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v75) {
        os_unfair_lock_assert_owner(v75 + 20);
      }
    }
  }
  uint64_t v76 = CPSqliteDatabaseStatementForWriting();
  long long v77 = (uint64_t **)v76;
  if (v76)
  {
    sqlite3_bind_double(*(sqlite3_stmt **)(v76 + 8), 1, v43);
    sqlite3_bind_double((sqlite3_stmt *)v77[1], 2, v45);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v77)
      {
        uint64_t v78 = **v77;
        if (v78)
        {
          if (*(void *)(v78 + 104))
          {
            long long v79 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v79) {
              os_unfair_lock_assert_owner(v79 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    BOOL v50 = sqlite3_changes((sqlite3 *)(*v77)[1]) > 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v77)
      {
        uint64_t v80 = **v77;
        if (v80)
        {
          if (*(void *)(v80 + 104))
          {
            long long v81 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v81) {
              os_unfair_lock_assert_owner(v81 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    BOOL v50 = 0;
  }
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "ALARM_FIRE_DATE", 7, 526337, 0, 0, 0, 0);
LABEL_27:

  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v93, (uint64_t)v91);
  id v51 = v38;
  id v52 = v39;
  id v53 = v34;
  id v54 = v35;
  if (!_CalDatabaseGetRecordStore(*(void *)(a1 + 24))) {
    goto LABEL_52;
  }
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v55) {
      os_unfair_lock_assert_owner(v55 + 20);
    }
  }
  uint64_t v56 = CPRecordStoreGetDatabase();
  if (!v56) {
    goto LABEL_52;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(v56 + 104))
    {
      long long v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v57) {
        os_unfair_lock_assert_owner(v57 + 20);
      }
    }
  }
  CFIndex v58 = (uint64_t **)CPSqliteDatabaseStatementForReading();
  if (v58)
  {
    uint64_t pApp = *(void *)(a1 + 24);
    id v108 = v51;
    id v109 = v52;
    id v110 = v53;
    id v111 = v54;
    uint64_t v112 = (uint64_t)v36;
    uint64_t v113 = (uint64_t)v37;
    id v114 = *(id *)(a1 + 32);
    CFDictionaryRef theDict = 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v58)
      {
        uint64_t v59 = **v58;
        if (v59)
        {
          if (*(void *)(v59 + 104))
          {
            double v60 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v60) {
              os_unfair_lock_assert_owner(v60 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v58)
      {
        uint64_t v61 = **v58;
        if (v61)
        {
          if (*(void *)(v61 + 104))
          {
            BOOL v62 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v62) {
              os_unfair_lock_assert_owner(v62 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    uint64_t v63 = CalAlarmGetGlobalDefaultTimedAlarmOffset(*(void **)(*(void *)(a1 + 24) + 296));
    uint64_t v64 = CalAlarmGetGlobalDefaultAllDayAlarmOffset(*(void **)(*(void *)(a1 + 24) + 296));
    uint64_t v92 = 0;
    *(void *)int buf = a1;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = &v92;
    uint64_t v100 = a2;
    [v95 timeIntervalSinceReferenceDate];
    uint64_t v101 = v65;
    [v96 timeIntervalSinceReferenceDate];
    uint64_t v102 = v66;
    [v97 timeIntervalSinceReferenceDate];
    uint64_t v103 = v67;
    [v98 timeIntervalSinceReferenceDate];
    uint64_t v104 = v68;
    uint64_t v105 = v63;
    uint64_t v106 = v64;
    BOOL v69 = theDict != 0;
    if (theDict)
    {
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_CalEventAlarmCacheProcessAdds, buf);
      CFRelease(theDict);
    }
    __destructor_8_s8_s16_s24_s32_s56((uint64_t)&pApp);
  }
  else
  {
LABEL_52:
    BOOL v69 = 0;
  }

  __destructor_8_s0_s8_s16_s24_s32((uint64_t)v93);
  __destructor_8_s0_s8_s16_s24_s32((uint64_t)v91);

  uint64_t v70 = v89 | v50 | v69;
  id v71 = (id)CDBLogHandle;
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
  {
    double v72 = CFAbsoluteTimeGetCurrent();
    id v73 = [NSNumber numberWithBool:v70];
    *(_DWORD *)int buf = 134218242;
    *(double *)&uint8_t buf[4] = v72 - Current;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v73;
    _os_log_impl(&dword_1A8E81000, v71, OS_LOG_TYPE_DEBUG, "Alarm cache extended.  Took [%f] seconds.  Was cache modified: [%@]", buf, 0x16u);
  }
  __destructor_8_s0_s8_s16_s24_s32(a5);

  return v70;
}

void sub_1A8F393D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t _CalEventGetDayCount(uint64_t a1, const __CFTimeZone *a2)
{
  if (!a2 || (CFTimeZoneRef v3 = a2, _CalEventIsAllDay(a1)) || _CalCalendarItemIsFloating(a1))
  {
    CFTimeZoneRef v4 = (const __CFTimeZone *)CalTimeZoneCopyCFTimeZone();
    CFTimeZoneRef v3 = v4;
  }
  else
  {
    CFTimeZoneRef v4 = 0;
  }
  _CalEventGetStartDate(a1);
  _CalRecurrenceGetEndDate(a1);
  _CalEventIsAllDay(a1);
  CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
  CalGregorianDateGetGregorianDateForDay();
  CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
  CalGregorianDateGetGregorianDateForDay();
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  CFAbsoluteTime v6 = v5;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v10, v7, v6, v3, 4uLL);
  SInt32 days = v10.days;
  if (v4) {
    CFRelease(v4);
  }
  return (days & ~(days >> 31)) + 1;
}

uint64_t _CalEventOccurrenceCacheGetMostExtremeAlarmDates(uint64_t result, uint64_t a2, uint64_t a3, double *a4, double *a5, double a6)
{
  CFAbsoluteTime v6 = (double *)MEMORY[0x1E4F57888];
  if (result == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v7 = *MEMORY[0x1E4F57888];
  }
  else
  {
    uint64_t v8 = result + 3600;
    if (result <= 32399) {
      uint64_t v8 = result;
    }
    if (v8 < -53999) {
      v8 -= 3600;
    }
    double v7 = a6 - (double)a3 + (double)v8;
  }
  *a4 = v7;
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v9 = *v6;
  }
  else
  {
    uint64_t v10 = a2 + 3600;
    if (a2 <= 32399) {
      uint64_t v10 = a2;
    }
    if (v10 < -53999) {
      v10 -= 3600;
    }
    double v9 = a6 - (double)a3 + (double)v10;
  }
  *a5 = v9;
  return result;
}

void _CalEventOccurrenceCacheInsertOccurrence(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void *a5, void *a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a4 == -1)
  {
    double v37 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1A8E81000, v37, OS_LOG_TYPE_ERROR, "Skipping occurrence cache insert for event with id == -1", buf, 2u);
    }
  }
  else
  {
    id v14 = a4;
    _CalEventOccurrenceCacheLoadInfo(a1);
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetGregorianDateForDay();
    _CalEventOccurrenceCacheLoadInfo(a1);
    EKGregorianDateGetAbsoluteTimeWithCFTimeZone();
    double v25 = v24;
    CFIndex v26 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v27 = NSNumber;
      log = v26;
      [v27 numberWithInt:v14];
      id v14 = v48 = (int)v14;
      int v28 = (int)a5;
      a5 = [NSNumber numberWithInt:a5];
      uint64_t v29 = [NSNumber numberWithInt:a6];
      int v50 = (int)a6;
      [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a7];
      v46 = int v49 = v28;
      double v30 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a8];
      double v31 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a9];
      a6 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v25];
      *(_DWORD *)int buf = 138413826;
      *(void *)id v52 = v14;
      *(_WORD *)&v52[8] = 2112;
      id v53 = a5;
      *(_WORD *)id v54 = 2112;
      *(void *)&v54[2] = v29;
      *(_WORD *)uint64_t v55 = 2112;
      *(void *)&v55[2] = v46;
      *(_WORD *)uint64_t v56 = 2112;
      *(void *)&v56[2] = v30;
      *(_WORD *)long long v57 = 2112;
      *(void *)&v57[2] = v31;
      __int16 v58 = 2112;
      uint64_t v59 = a6;
      _os_log_impl(&dword_1A8E81000, log, OS_LOG_TYPE_DEBUG, "Inserting occurrence into occurrence cache.  event_id: [%@],  calendar_id: [%@], store_id: [%@], occurrence_date: [%@], occurrence_start_date: [%@].  occurrence_end_date: [%@], day: [%@]", buf, 0x48u);

      LODWORD(v14) = v48;
      LODWORD(a6) = v50;

      LODWORD(a5) = v49;
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF) {
      NSLog(&cfstr_EventkitocErro.isa);
    }
    uint64_t v33 = *a3;
    if (*a3) {
      goto LABEL_20;
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)a2)
        {
          if (*(void *)(*(void *)a2 + 104))
          {
            id v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v34) {
              os_unfair_lock_assert_owner(v34 + 20);
            }
          }
        }
      }
    }
    uint64_t v33 = CPSqliteConnectionStatementForSQL();
    *a3 = v33;
    if (v33)
    {
LABEL_20:
      sqlite3_bind_double(*(sqlite3_stmt **)(v33 + 8), 1, v25);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 2, (int)v14);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 3, (int)a5);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 4, (int)a6);
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 5, a7);
      double v35 = *MEMORY[0x1E4F57888];
      double v36 = *(sqlite3_stmt **)(*a3 + 8);
      if (vabdd_f64(a8, *MEMORY[0x1E4F57888]) >= 2.22044605e-16) {
        sqlite3_bind_double(v36, 6, a8);
      }
      else {
        sqlite3_bind_null(v36, 6);
      }
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 7, a9);
      id v38 = *(sqlite3_stmt **)(*a3 + 8);
      if (v35 == a10) {
        sqlite3_bind_null(v38, 8);
      }
      else {
        sqlite3_bind_double(v38, 8, a10);
      }
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 9, a11);
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 10, a12);
      id v39 = (uint64_t **)*a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (v39)
        {
          if (*v39)
          {
            uint64_t v40 = **v39;
            if (v40)
            {
              if (*(void *)(v40 + 104))
              {
                uint64_t v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v41) {
                  os_unfair_lock_assert_owner(v41 + 20);
                }
              }
            }
          }
        }
      }
      if (CPSqliteStatementPerform() == 19)
      {
        double v42 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)int buf = 67110656;
          *(_DWORD *)id v52 = v14;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = a5;
          LOWORD(v53) = 1024;
          *(_DWORD *)((char *)&v53 + 2) = a6;
          HIWORD(v53) = 2048;
          *(double *)id v54 = a7;
          *(_WORD *)&v54[8] = 2048;
          *(double *)uint64_t v55 = a8;
          *(_WORD *)&v55[8] = 2048;
          *(double *)uint64_t v56 = a9;
          *(_WORD *)&v56[8] = 2048;
          *(double *)long long v57 = v25;
          _os_log_impl(&dword_1A8E81000, v42, OS_LOG_TYPE_FAULT, "Attempted to insert a duplicate occurrence into the occurrence cache. event_id: [%i], calendar_id: [%i], store_id: [%i], occurrence_date: [%f], occurrence_start_date: [%f], occurrence_endDate: [%f], day: [%f]", buf, 0x3Cu);
        }
        _CalDatabaseIntegrityError(*(void *)(a1 + 24), @"Insert duplicate occurrence");
      }
      double v43 = (uint64_t **)*a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (v43)
        {
          if (*v43)
          {
            uint64_t v44 = **v43;
            if (v44)
            {
              if (*(void *)(v44 + 104))
              {
                double v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v45) {
                  os_unfair_lock_assert_owner(v45 + 20);
                }
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
  }
}

void _CalAlarmCacheProcessAddedEvent(double *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, double a7)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  obCFIndex j = _CalCalendarItemCopyAlarms(a2);
  uint64_t v9 = [(__CFArray *)obj countByEnumeratingWithState:&v59 objects:v63 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v60;
    double v12 = a7 - (double)a6;
    double v13 = v12 + 0.0;
    double v14 = v12 + -608400.0;
    double v15 = *MEMORY[0x1E4F57888];
    double v16 = floor(a7);
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v60 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void *)(*((void *)&v59 + 1) + 8 * v17);
        if (_CalAlarmGetTriggerDate(v18) == 1.17549435e-38)
        {
          BOOL IsDefaultAlarm = _CalAlarmIsDefaultAlarm(v18);
          if (IsDefaultAlarm)
          {
            uint64_t DefaultAlarmOffset = _CalEventGetDefaultAlarmOffset(a2, *((void *)a1 + 8), *((void *)a1 + 9));
            if (DefaultAlarmOffset == 0x7FFFFFFFFFFFFFFFLL)
            {
              double v21 = a1[6];
              if (v13 < v21 || (double v22 = v15, v13 >= a1[7]))
              {
                if (v14 < v21) {
                  goto LABEL_7;
                }
                double v22 = v15;
                if (v14 >= a1[7]) {
                  goto LABEL_7;
                }
              }
LABEL_25:
              double v55 = *a1;
              CFIndex v26 = (uint64_t *)*((void *)a1 + 2);
              uint64_t v25 = *((void *)a1 + 3);
              int ID = CPRecordGetID();
              int v28 = CDBLogHandle;
              if (a3 == -1)
              {
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)int buf = 0;
                  _os_log_impl(&dword_1A8E81000, v28, OS_LOG_TYPE_ERROR, "Skipping alarm cache insert for event with id == -1", buf, 2u);
                }
              }
              else
              {
                int v29 = ID;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
                {
                  unsigned int v53 = v29;
                  double v30 = NSNumber;
                  log = v28;
                  int v49 = [v30 numberWithInt:a3];
                  [NSNumber numberWithInt:v53];
                  v31 = uint64_t v51 = v25;
                  id v32 = [NSNumber numberWithInt:a4];
                  int v50 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a7];
                  uint64_t v33 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v22];
                  *(_DWORD *)int buf = 138413314;
                  *(void *)uint64_t v65 = v49;
                  *(_WORD *)&v65[8] = 2112;
                  uint64_t v66 = v31;
                  *(_WORD *)uint64_t v67 = 2112;
                  *(void *)&v67[2] = v32;
                  *(_WORD *)uint64_t v68 = 2112;
                  *(void *)&v68[2] = v50;
                  __int16 v69 = 2112;
                  uint64_t v70 = v33;
                  id v34 = (void *)v33;
                  _os_log_impl(&dword_1A8E81000, log, OS_LOG_TYPE_DEBUG, "Inserting alarm into alarm cache. event_id: [%@], alarm_id: [%@], store_id: [%@], occurrence_date: [%@], fire_date: [%@].", buf, 0x34u);

                  uint64_t v25 = v51;
                  int v29 = v53;
                }
                if (v25)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*(void *)v25)
                    {
                      if (*(void *)(*(void *)v25 + 104))
                      {
                        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (Context) {
                          os_unfair_lock_assert_owner(Context + 20);
                        }
                      }
                    }
                  }
                }
                if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF) {
                  NSLog(&cfstr_EventkitocErro.isa);
                }
                uint64_t v36 = *v26;
                if (*v26) {
                  goto LABEL_44;
                }
                if (v25)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*(void *)v25)
                    {
                      if (*(void *)(*(void *)v25 + 104))
                      {
                        double v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v37) {
                          os_unfair_lock_assert_owner(v37 + 20);
                        }
                      }
                    }
                  }
                }
                uint64_t v36 = CPSqliteConnectionStatementForSQL();
                uint64_t *v26 = v36;
                if (v36)
                {
LABEL_44:
                  sqlite3_bind_int(*(sqlite3_stmt **)(v36 + 8), 1, a3);
                  sqlite3_bind_int(*(sqlite3_stmt **)(*v26 + 8), 2, v29);
                  sqlite3_bind_double(*(sqlite3_stmt **)(*v26 + 8), 3, v16);
                  double v38 = floor(v22);
                  if (v15 == v22) {
                    double v38 = 0.0;
                  }
                  sqlite3_bind_double(*(sqlite3_stmt **)(*v26 + 8), 4, v38);
                  sqlite3_bind_int(*(sqlite3_stmt **)(*v26 + 8), 5, a4);
                  sqlite3_bind_int(*(sqlite3_stmt **)(*v26 + 8), 6, a5);
                  sqlite3_bind_int(*(sqlite3_stmt **)(*v26 + 8), 7, a6);
                  sqlite3_bind_int(*(sqlite3_stmt **)(*v26 + 8), 8, IsDefaultAlarm);
                  id v39 = (uint64_t **)*v26;
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (v39)
                    {
                      if (*v39)
                      {
                        uint64_t v40 = **v39;
                        if (v40)
                        {
                          if (*(void *)(v40 + 104))
                          {
                            uint64_t v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
                            if (v41) {
                              os_unfair_lock_assert_owner(v41 + 20);
                            }
                          }
                        }
                      }
                    }
                  }
                  if (CPSqliteStatementPerform() == 19)
                  {
                    double v42 = CDBLogHandle;
                    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
                    {
                      *(_DWORD *)int buf = 67110144;
                      *(_DWORD *)uint64_t v65 = a3;
                      *(_WORD *)&v65[4] = 1024;
                      *(_DWORD *)&v65[6] = v29;
                      LOWORD(v66) = 1024;
                      *(_DWORD *)((char *)&v66 + 2) = a4;
                      HIWORD(v66) = 2048;
                      *(double *)uint64_t v67 = a7;
                      *(_WORD *)&v67[8] = 2048;
                      *(double *)uint64_t v68 = v22;
                      _os_log_impl(&dword_1A8E81000, v42, OS_LOG_TYPE_FAULT, "Attempted to insert a duplicate alarm into the alarm cache. event_id: [%i], alarm_id: [%i], store_id: [%i], occurrence_date: [%f], alarm_fire_date: [%f]", buf, 0x28u);
                    }
                    _CalDatabaseIntegrityError(*(void *)(*(void *)&v55 + 24), @"Insert duplicate alarm");
                  }
                  double v43 = (uint64_t **)*v26;
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (v43)
                    {
                      if (*v43)
                      {
                        uint64_t v44 = **v43;
                        if (v44)
                        {
                          if (*(void *)(v44 + 104))
                          {
                            double v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
                            if (v45) {
                              os_unfair_lock_assert_owner(v45 + 20);
                            }
                          }
                        }
                      }
                    }
                  }
                  CPSqliteStatementReset();
                }
              }
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t DefaultAlarmOffset = (int)_CalAlarmGetTriggerInterval(v18);
          }
          uint64_t v23 = DefaultAlarmOffset + 3600;
          if (DefaultAlarmOffset <= 32399) {
            uint64_t v23 = DefaultAlarmOffset;
          }
          if (v23 < -53999) {
            v23 -= 3600;
          }
          double v24 = v12 + (double)v23;
          if (v24 >= a1[6] && v24 < a1[7])
          {
            double v22 = CalculateAlarmFireDate(a6, DefaultAlarmOffset, a7);
            if (v22 >= a1[6] && v22 < a1[7]) {
              goto LABEL_25;
            }
          }
        }
LABEL_7:
        ++v17;
      }
      while (v10 != v17);
      uint64_t v46 = [(__CFArray *)obj countByEnumeratingWithState:&v59 objects:v63 count:16];
      uint64_t v10 = v46;
    }
    while (v46);
  }
}

void _AlarmFireDateCallback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2 == 7)
  {
    double v5 = (sqlite3_int64 *)sqlite3_user_data(a1);
    sqlite3_int64 v7 = *v5;
    sqlite3_int64 v6 = v5[1];
    double v8 = sqlite3_value_double(*a3);
    sqlite3_int64 v9 = sqlite3_value_int64(a3[1]);
    int v10 = sqlite3_value_int(a3[2]);
    int v11 = sqlite3_value_int(a3[3]);
    int v12 = sqlite3_value_int(a3[4]);
    if (sqlite3_value_type(a3[5]) != 5) {
      sqlite3_int64 v7 = sqlite3_value_int64(a3[5]);
    }
    if (sqlite3_value_type(a3[6]) != 5) {
      sqlite3_int64 v6 = sqlite3_value_int64(a3[6]);
    }
    if (v10 == 1 && (v12 != 1 ? (sqlite3_int64 v9 = v7) : (sqlite3_int64 v9 = v6), v9 == 0x7FFFFFFFFFFFFFFFLL)) {
      double v13 = 0.0;
    }
    else {
      double v13 = CalculateAlarmFireDate(v11, v9, v8);
    }
    sqlite3_result_double(a1, v13);
  }
  else
  {
    double v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v16[0] = 67109120;
      v16[1] = a2;
      _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_ERROR, "_AlarmFireDateCallback received wrong number of args. [%i args]", (uint8_t *)v16, 8u);
    }
    sqlite3_result_double(a1, 0.0);
  }
}

void _AlarmShouldBeInCacheCallback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a2 == 7)
  {
    double v5 = sqlite3_user_data(a1);
    sqlite3_int64 v7 = *((void *)v5 + 2);
    sqlite3_int64 v6 = *((void *)v5 + 3);
    double v9 = *(double *)v5;
    double v8 = *((double *)v5 + 1);
    double v10 = sqlite3_value_double(*a3);
    sqlite3_int64 v11 = sqlite3_value_int64(a3[1]);
    int v12 = sqlite3_value_int(a3[2]);
    int v13 = sqlite3_value_int(a3[3]);
    int v14 = sqlite3_value_int(a3[4]);
    if (sqlite3_value_type(a3[5]) != 5) {
      sqlite3_int64 v7 = sqlite3_value_int64(a3[5]);
    }
    if (sqlite3_value_type(a3[6]) != 5) {
      sqlite3_int64 v6 = sqlite3_value_int64(a3[6]);
    }
    if (v14 == 1) {
      sqlite3_int64 v15 = v6;
    }
    else {
      sqlite3_int64 v15 = v7;
    }
    if (v12 == 1 && v15 == 0x7FFFFFFFFFFFFFFFLL)
    {
      double v16 = v10 - (double)v13;
      double v17 = 36000.0;
      if (v14 != 1) {
        double v17 = 0.0;
      }
      double v18 = v16 + v17;
      BOOL v19 = v18 < v9 || v18 > v8;
      int v22 = 1;
      if (v19)
      {
        double v20 = v16 + -608400.0;
        if (v20 < v9 || v20 > v8) {
          int v22 = 0;
        }
      }
    }
    else
    {
      if (v12 == 1) {
        uint64_t v25 = v15;
      }
      else {
        uint64_t v25 = v11;
      }
      double v26 = CalculateAlarmFireDate(v13, v25, v10);
      int v22 = v26 <= v8 && v26 >= v9;
    }
    sqlite3_result_int(a1, v22);
  }
  else
  {
    double v24 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v27[0] = 67109120;
      v27[1] = a2;
      _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_ERROR, "_AlarmFireDateCallback received wrong number of args. [%i args]", (uint8_t *)v27, 8u);
    }
    sqlite3_result_double(a1, 0.0);
  }
}

uint64_t _RecurringEventsWithLongAlarmOffsetsHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  uint64_t RecordStore = _CalDatabaseGetRecordStore(v3);
  EventWithint UID = _CalGetEventWithUID(RecordStore, v4);
  if (EventWithUID)
  {
    sqlite3_int64 v7 = (const void *)EventWithUID;
    uint64_t v22 = 0;
    *(void *)int buf = 0;
    _CalEventGetLargestPossibleAlarmOffsets(EventWithUID, (uint64_t *)buf, &v22);
    double v8 = 0;
    if (*(void *)buf != 0x7FFFFFFFFFFFFFFFLL)
    {
      double v8 = 0;
      if (*(void *)(a2 + 40) <= -*(void *)buf)
      {
        double v9 = [*(id *)(a2 + 8) dateByAddingTimeInterval:(double)(uint64_t)-*(void *)buf];
        double v10 = [*(id *)(a2 + 16) dateByAddingTimeInterval:(double)(uint64_t)-*(void *)buf];
        double v8 = _CalEventCopyOccurrenceDatesInDateRange((uint64_t)v7, v9, v10, *(void **)(a2 + 56), 0);
      }
    }
    if (v22 != 0x7FFFFFFFFFFFFFFFLL && v22 >= *(void *)(a2 + 48))
    {
      sqlite3_int64 v11 = [*(id *)(a2 + 8) dateByAddingTimeInterval:(double)-v22];
      int v12 = [*(id *)(a2 + 16) dateByAddingTimeInterval:(double)-v22];
      int v13 = _CalEventCopyOccurrenceDatesInDateRange((uint64_t)v7, v11, v12, *(void **)(a2 + 56), 0);
      if (v8)
      {
        CFIndex Count = CFArrayGetCount(v8);
        CFIndex v15 = CFArrayGetCount(v13);
        CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, v15 + Count, v8);
        v25.length = CFArrayGetCount(v13);
        v25.locatioCFIndex n = 0;
        CFArrayAppendArray(MutableCopy, v13, v25);
        CFRelease(v8);
        CFRelease(v13);
        int v13 = MutableCopy;
      }

      double v8 = v13;
    }
    if (v8)
    {
      double v17 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SELF <= %@ OR SELF >= %@", *(void *)(a2 + 24), *(void *)(a2 + 32)];
      id v18 = [(__CFArray *)v8 filteredArrayUsingPredicate:v17];
      CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a2 + 64);
      if (!Mutable)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(a2 + 64) = Mutable;
      }
      CFDictionarySetValue(Mutable, v7, v18);
      CFRelease(v18);
    }
  }
  else
  {
    double v20 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_ERROR, "Failed to find event %d in _RecurringEventsWithLongAlarmOffsetsHandler", buf, 8u);
    }
  }
  return 0;
}

void _CalEventAlarmCacheProcessAdds(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  double v6 = *(double *)a3;
  unsigned int ID = CPRecordGetID();
  unsigned int StoreId = _CalCalendarItemGetStoreId(a1);
  BOOL IsAllDay = _CalCalendarItemIsAllDay(a1);
  double v10 = (void *)_CalEventCopyTravelTime(a1);
  int v11 = [v10 intValue];

  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  if (vabdd_f64(*(double *)(a3 + 32), *MEMORY[0x1E4F57888]) < 2.22044605e-16)
  {
    _CalEventOccurrenceCacheLoadInfo(*(uint64_t *)&v6);
    int v13 = *(void **)(*(void *)&v6 + 40);
    id v22 = *(id *)(*(void *)(*(void *)&v6 + 24) + 296);
    [v13 timeIntervalSinceReferenceDate];
    *(void *)(a3 + 32) = v14;
    [*(id *)(*(void *)&v6 + 48) timeIntervalSinceReferenceDate];
    *(void *)(a3 + 4 0) = v15;
    [*(id *)(*(void *)&v6 + 56) timeIntervalSinceReferenceDate];
    *(void *)(a3 + 48) = v16;
    [*(id *)(*(void *)&v6 + 64) timeIntervalSinceReferenceDate];
    *(void *)(a3 + 56) = v17;
    *(void *)(a3 + 64) = CalAlarmGetGlobalDefaultTimedAlarmOffset(v22);
    uint64_t GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v22);

    *(void *)(a3 + 72) = GlobalDefaultAllDayAlarmOffset;
  }
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      double v21 = MEMORY[0x1AD0E87A0](ValueAtIndex);
      _CalAlarmCacheProcessAddedEvent((double *)a3, a1, ID, StoreId, IsAllDay, v11, v21);
    }
  }
}

void __destructor_8_s8_s16_s24_s32_s56(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
}

uint64_t CalEventOccurrenceCacheRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  __CalEventOccurrenceCacheTypeunsigned int ID = result;
  return result;
}

void CalEventOccurrenceCacheDestroy(void *a1)
{
  id v2 = (void *)a1[4];
  a1[4] = 0;

  uint64_t v3 = (void *)a1[5];
  a1[5] = 0;

  uint64_t v4 = (void *)a1[6];
  a1[6] = 0;

  double v5 = (void *)a1[7];
  a1[7] = 0;

  double v6 = (void *)a1[8];
  a1[8] = 0;

  sqlite3_int64 v7 = (const void *)a1[11];
  if (v7) {
    CFRelease(v7);
  }
  double v8 = (const void *)a1[12];
  if (v8) {
    CFRelease(v8);
  }
  double v9 = (const void *)a1[13];
  if (v9) {
    CFRelease(v9);
  }
  double v10 = (const void *)a1[14];
  if (v10) {
    CFRelease(v10);
  }
  int v11 = (const void *)a1[15];
  if (v11) {
    CFRelease(v11);
  }
  int v12 = (const void *)a1[16];
  if (v12) {
    CFRelease(v12);
  }
  int v13 = (const void *)a1[17];
  if (v13)
  {
    CFRelease(v13);
  }
}

BOOL CalEventOccurrenceCacheEqual(void *a1, void *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  return v4 == CFGetTypeID(a2) && a1[3] == a2[3];
}

uint64_t _DateGatherer(uint64_t a1, void *a2)
{
  id v2 = *(sqlite3_stmt **)(a1 + 8);
  id v3 = a2;
  CFTypeID v4 = objc_msgSend(NSNumber, "numberWithDouble:", sqlite3_column_double(v2, 0));
  [v3 addObject:v4];

  return 0;
}

void _CalculateAlarmFireDateCallback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 == 3)
  {
    double v5 = sqlite3_user_data(a1);
    if (v5) {
      BOOL v6 = *v5 != 0;
    }
    else {
      BOOL v6 = 0;
    }
    double v9 = sqlite3_value_double(*a3);
    int v10 = sqlite3_value_int(a3[1]);
    sqlite3_int64 v11 = sqlite3_value_int64(a3[2]);
    if (v11 == 0x7FFFFFFFFFFFFFFFLL)
    {
      double v12 = 0.0;
    }
    else if (v6)
    {
      uint64_t v13 = v11 + 3600;
      if (v11 <= 32399) {
        uint64_t v13 = v11;
      }
      if (v13 < -53999) {
        v13 -= 3600;
      }
      double v12 = v9 - (double)v10 + (double)v13;
    }
    else
    {
      double v12 = CalculateAlarmFireDate(v10, v11, v9);
    }
    sqlite3_result_double(a1, v12);
  }
  else
  {
    double v8 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v14[0] = 67109120;
      v14[1] = a2;
      _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_ERROR, "_CalculateAlarmFireDateCallback received wrong number of args. [%i args]", (uint8_t *)v14, 8u);
    }
    sqlite3_result_double(a1, 0.0);
  }
}

__n128 __copy_assignment_8_8_s0_s8_s16_s24_s32_t40w16(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)a1, *(id *)a2);
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  objc_storeStrong((id *)(a1 + 16), *(id *)(a2 + 16));
  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4 0) = result;
  return result;
}

void _UpdateAlarmsForStoreDefaultAlarmChanges(int a1, char a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  if (a2) {
    _UpdateAlarmsForeStoreDefaultAlarmChange(*a3, (uint64_t)a3, a1, 0);
  }
  if ((a2 & 2) != 0)
  {
    _UpdateAlarmsForeStoreDefaultAlarmChange(v6, (uint64_t)a3, a1, 1);
  }
}

void _GenerateDatesForOccurrenceCache(const void *a1, uint64_t *a2)
{
  CFTypeID v4 = _CalEventOccurrenceCacheCopyOccurrenceDatesForEvent(*a2, 0, (uint64_t)a1, 0, 0);
  if (v4)
  {
    double v5 = v4;
    CFMutableDictionaryRef Mutable = *(__CFDictionary **)(*a2 + 88);
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(*a2 + 88) = Mutable;
    }
    CFDictionarySetValue(Mutable, a1, v5);
    CFRelease(v5);
  }
}

void _GenerateDatesForAlarmCache(const void *a1, uint64_t *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  CFTypeID v4 = _CalEventOccurrenceCacheCopyOccurrenceDatesForEvent(*a2, 1, (uint64_t)a1, &v47, &v46);
  if (v4)
  {
    double v5 = v4;
    CFMutableDictionaryRef Mutable = *(__CFDictionary **)(*a2 + 104);
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(*a2 + 104) = Mutable;
    }
    CFDictionarySetValue(Mutable, a1, v5);
    CFRelease(v5);
  }
  uint64_t v7 = v46;
  uint64_t v8 = v47;
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  uint64_t RecordStore = _CalDatabaseGetRecordStore(DatabaseForRecord);
  int ID = CPRecordGetID();
  if (RecordStore)
  {
    int v12 = ID;
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      uint64_t v15 = Database;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16) {
            os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
      uint64_t v17 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (!v17)
      {
        uint64_t v25 = CDBLogHandle;
        if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
          return;
        }
        *(_WORD *)int buf = 0;
        id v22 = "Failed to open connection to database";
        uint64_t v23 = v25;
        uint32_t v24 = 2;
        goto LABEL_20;
      }
      id v18 = (sqlite3 **)v17;
      char pApp = 1;
      int v19 = sqlite3_create_function(*(sqlite3 **)(v17 + 8), "CALCULATE_ALARM_FIRE_DATE", 3, 526337, &pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalculateAlarmFireDateCallback, 0, 0);
      if (v19)
      {
        int v20 = v19;
        uint64_t v21 = CDBLogHandle;
        if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
          return;
        }
        *(_DWORD *)int buf = 67109120;
        int v50 = v20;
        id v22 = "Failed to create CALCULATE_ALARM_FIRE_DATE function in _CalEventOccurrenceCacheUpdateLargestAlarmOffsets, "
              "with error code: %i";
        uint64_t v23 = v21;
        uint32_t v24 = 8;
LABEL_20:
        _os_log_impl(&dword_1A8E81000, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
        return;
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(v15 + 104))
        {
          double v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v26) {
            os_unfair_lock_assert_owner(v26 + 20);
          }
        }
      }
      uint64_t v27 = CPSqliteDatabaseStatementForWriting();
      uint64_t v28 = (double *)MEMORY[0x1E4F57888];
      if (v27)
      {
        int v29 = (uint64_t **)v27;
        double v30 = *(sqlite3_stmt **)(v27 + 8);
        double v31 = *MEMORY[0x1E4F57888];
        if (v8 != 0x7FFFFFFFFFFFFFFFLL) {
          double v31 = (double)v8;
        }
        sqlite3_bind_double(v30, 1, v31);
        sqlite3_bind_int((sqlite3_stmt *)v29[1], 2, v12);
        if (CDBLockingAssertionsEnabled)
        {
          if (*v29)
          {
            uint64_t v32 = **v29;
            if (v32)
            {
              if (*(void *)(v32 + 104))
              {
                uint64_t v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v33) {
                  os_unfair_lock_assert_owner(v33 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementPerform();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v29)
          {
            uint64_t v34 = **v29;
            if (v34)
            {
              if (*(void *)(v34 + 104))
              {
                double v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v35) {
                  os_unfair_lock_assert_owner(v35 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(v15 + 104))
        {
          uint64_t v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v36) {
            os_unfair_lock_assert_owner(v36 + 20);
          }
        }
      }
      uint64_t v37 = CPSqliteDatabaseStatementForWriting();
      if (v37)
      {
        double v38 = (uint64_t **)v37;
        id v39 = *(sqlite3_stmt **)(v37 + 8);
        double v40 = *v28;
        if (v7 != 0x7FFFFFFFFFFFFFFFLL) {
          double v40 = (double)v7;
        }
        sqlite3_bind_double(v39, 1, v40);
        sqlite3_bind_int((sqlite3_stmt *)v38[1], 2, v12);
        if (CDBLockingAssertionsEnabled)
        {
          if (*v38)
          {
            uint64_t v41 = **v38;
            if (v41)
            {
              if (*(void *)(v41 + 104))
              {
                double v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v42) {
                  os_unfair_lock_assert_owner(v42 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementPerform();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v38)
          {
            uint64_t v43 = **v38;
            if (v43)
            {
              if (*(void *)(v43 + 104))
              {
                uint64_t v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v44) {
                  os_unfair_lock_assert_owner(v44 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      sqlite3_create_function(v18[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, 0, 0, 0);
      if (CDBLockingAssertionsEnabled && *v18 && *((void *)*v18 + 13))
      {
        double v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45) {
          os_unfair_lock_assert_owner(v45 + 20);
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
  }
}

void _UpdateAlarmsForeStoreDefaultAlarmChange(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 24));
  if (!RecordStore)
  {
    uint64_t v18 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(v35) = 0;
    int v19 = "No record store in _UpdateAlarmsForStoreDefaultAlarmChanges";
LABEL_21:
    int v20 = v18;
    uint32_t v21 = 2;
    goto LABEL_22;
  }
  uint64_t v8 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database)
  {
    uint64_t v18 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(v35) = 0;
    int v19 = "No db in _UpdateAlarmsForStoreDefaultAlarmChanges";
    goto LABEL_21;
  }
  uint64_t v11 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      int v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  uint64_t v13 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!v13)
  {
    uint64_t v18 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(v35) = 0;
    int v19 = "Failed to open connection to database";
    goto LABEL_21;
  }
  uint64_t v14 = (sqlite3 **)v13;
  StoreWithint UID = _CalGetStoreWithUID(v8);
  if (!StoreWithUID)
  {
    uint64_t v22 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v35 = 67109120;
    int v36 = a3;
    int v19 = "Failed to find store for id %d _UpdateAlarmsForStoreDefaultAlarmChanges";
    int v20 = v22;
    uint32_t v21 = 8;
LABEL_22:
    _os_log_impl(&dword_1A8E81000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v35, v21);
    return;
  }
  if (a4)
  {
    uint64_t v16 = (void *)_CalStoreCopyDefaultAllDayAlarmOffset(StoreWithUID);
    if (!v16)
    {
      sqlite3_int64 v17 = *(void *)(a2 + 16);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  uint64_t v16 = (void *)_CalStoreCopyDefaultAlarmOffset(StoreWithUID);
  if (v16)
  {
LABEL_27:
    sqlite3_int64 v17 = [v16 integerValue];
    goto LABEL_29;
  }
  sqlite3_int64 v17 = *(void *)(a2 + 8);
LABEL_29:

  int function = sqlite3_create_function(v14[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalculateAlarmFireDateCallback, 0, 0);
  if (function)
  {
    int v24 = function;
    uint64_t v25 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v35 = 67109120;
      int v36 = v24;
      _os_log_impl(&dword_1A8E81000, v25, OS_LOG_TYPE_ERROR, "Failed to create CALCULATE_ALARM_FIRE_DATE function in _UpdateAlarmsForStoreDefaultAlarmChanges, with error code: %i", (uint8_t *)&v35, 8u);
    }
    if (CDBLockingAssertionsEnabled && *v14 && *((void *)*v14 + 13))
    {
      double v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v26) {
        os_unfair_lock_assert_owner(v26 + 20);
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v11 + 104))
      {
        uint64_t v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
    uint64_t v28 = CPSqliteDatabaseStatementForWriting();
    if (v28)
    {
      int v29 = (uint64_t **)v28;
      sqlite3_bind_int64(*(sqlite3_stmt **)(v28 + 8), 1, v17);
      sqlite3_bind_int((sqlite3_stmt *)v29[1], 2, a3);
      sqlite3_bind_int((sqlite3_stmt *)v29[1], 3, a4);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v29)
        {
          uint64_t v30 = **v29;
          if (v30)
          {
            if (*(void *)(v30 + 104))
            {
              double v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v31) {
                os_unfair_lock_assert_owner(v31 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v29)
        {
          uint64_t v32 = **v29;
          if (v32)
          {
            if (*(void *)(v32 + 104))
            {
              uint64_t v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v33) {
                os_unfair_lock_assert_owner(v33 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    sqlite3_create_function(v14[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, 0, 0, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v14)
      {
        if (*((void *)*v14 + 13))
        {
          uint64_t v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v34) {
            os_unfair_lock_assert_owner(v34 + 20);
          }
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
}

__CFArray *_CalEventOccurrenceCacheCopyOccurrenceDatesForEvent(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  CFArrayRef v10 = _CalCalendarItemCopyRecurrencesWhileLocked(a3, 1);
  double v11 = COERCE_DOUBLE(_CalEventGetStartDate(a3));
  if (CFStringCompare(v12, @"_float", 0))
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = (const void *)CalTimeZoneCopyCFTimeZone();
    _CalEventOccurrenceCacheLoadInfo(a1);
    CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
    double v11 = v14;
  }
  _CalEventOccurrenceCacheLoadInfo(a1);
  if (a2)
  {
    id v15 = *(id *)(a1 + 56);
    uint64_t v16 = (id *)(a1 + 64);
  }
  else
  {
    id v15 = *(id *)(a1 + 40);
    uint64_t v16 = (id *)(a1 + 48);
  }
  id v17 = *v16;
  uint64_t v18 = _CalEventOccurrenceCacheGetCacheCalendar(a1);
  DayCFIndex Count = _CalEventGetDayCount(a3, *(const __CFTimeZone **)(a1 + 32));
  if (DayCount >= 2)
  {
    uint64_t v20 = [v15 dateByAddingDays:1 - DayCount inCalendar:v18];

    id v15 = (id)v20;
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  _CalEventGetLargestPossibleAlarmOffsets(a3, &v41, &v40);
  if (a4) {
    *a4 = v41;
  }
  if (a5) {
    *a5 = v40;
  }
  if (v10 && CFArrayGetCount(v10) >= 1)
  {
    _CalEventUpdateDetachedEventsRelation(a3);
    if (a2) {
      BOOL IsReminderIntegrationEvent = 0;
    }
    else {
      BOOL IsReminderIntegrationEvent = _CalEventIsReminderIntegrationEvent(a3);
    }
    double v38 = [v18 timeZone];
    CFMutableDictionaryRef Mutable = _CalEventCopyOccurrenceDatesInDateRangeExpandedForAlarms(a3, v15, v17, v38, IsReminderIntegrationEvent);
  }
  else
  {
    [v15 timeIntervalSinceReferenceDate];
    double v23 = v22;
    [v17 timeIntervalSinceReferenceDate];
    uint64_t v25 = v41;
    if (v41 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v25 = 0;
      uint64_t v41 = 0;
    }
    uint64_t v26 = v40;
    if (v40 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v26 = 0;
      uint64_t v40 = 0;
    }
    double v27 = v23 - (double)v26;
    double v28 = v24 - (double)v25;
    BOOL v29 = v27 > v11 || v11 > v28;
    if (v29 || (CFDateRef v30 = CFDateCreate(0, v11)) == 0)
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFDateRef v31 = v30;
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      CFArrayAppendValue(Mutable, v31);
      CFRelease(v31);
    }
    Proposeddouble StartDate = _CalEventGetProposedStartDate(a3);
    if (v27 <= ProposedStartDate && ProposedStartDate != *MEMORY[0x1E4F57888] && ProposedStartDate <= v28)
    {
      CFDateRef v36 = CFDateCreate(0, ProposedStartDate);
      if (v36)
      {
        CFDateRef v37 = v36;
        if (!Mutable) {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        }
        CFArrayAppendValue(Mutable, v37);
        CFRelease(v37);
      }
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v10) {
    CFRelease(v10);
  }

  return Mutable;
}

uint64_t _CalEventOccurrenceCacheProcessDeletes(int a1, uint64_t **a2)
{
  sqlite3_bind_int((sqlite3_stmt *)a2[1], 1, a1);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        uint64_t v3 = **a2;
        if (v3)
        {
          if (*(void *)(v3 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        uint64_t v5 = **a2;
        if (v5)
        {
          if (*(void *)(v5 + 104))
          {
            uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
    }
  }
  return CPSqliteStatementReset();
}

void _CalEventOccurrenceCacheProcessAdds(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a3;
  int ID = (void *)CPRecordGetID();
  unsigned int CalendarId = _CalEventGetCalendarId(a1);
  unsigned int StoreId = (void *)_CalCalendarItemGetStoreId(a1);
  BOOL IsAllDay = _CalCalendarItemIsAllDay(a1);
  BOOL IsReminderIntegrationEvent = _CalEventIsReminderIntegrationEvent(a1);
  double v9 = (void *)_CalEventCopyTravelTime(a1);
  int v55 = [v9 intValue];

  double v10 = COERCE_DOUBLE(_CalEventGetStartDate(a1));
  Enddouble Date = _CalRecurrenceGetEndDate(a1);
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v56 = (const void *)a1;
  _CalEventGetLargestPossibleAlarmOffsets(a1, &v62, &v61);
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  _CalEventOccurrenceCacheLoadInfo(v6);
  DayCFIndex Count = _CalEventGetDayCount((uint64_t)v56, *(const __CFTimeZone **)(v6 + 32));
  if (Count * DayCount >= 100001)
  {
    double v14 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = Count;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = DayCount;
      _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_ERROR, "EventKitOC: Event duration is too long, not adding to occurrence cache (asked to add %li occurrences each with %i days).", buf, 0x12u);
    }
    return;
  }
  if (ID == -1)
  {
    id v15 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = v15;
      CFTypeRef DebugDescription = _CalEntityGetDebugDescription(v56);
      *(_DWORD *)int buf = 138412290;
      *(void *)&uint8_t buf[4] = DebugDescription;
      _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_ERROR, "Inserting an event with id -1 into the occurrence cache in _CalEventOccurenceCacheProcessAdds. event=%@", buf, 0xCu);
    }
    _CalDatabaseIntegrityError(*(void *)(v6 + 24), @"Insert Corrupt Occurrence - ProcessAdds");
  }
  double v18 = *MEMORY[0x1E4F57888];
  if (vabdd_f64(*(double *)(a3 + 32), *MEMORY[0x1E4F57888]) < 2.22044605e-16)
  {
    _CalEventOccurrenceCacheLoadInfo(v6);
    int v19 = *(void **)(v6 + 40);
    id v20 = *(id *)(*(void *)(v6 + 24) + 296);
    [v19 timeIntervalSinceReferenceDate];
    *(void *)(a3 + 32) = v21;
    [*(id *)(v6 + 48) timeIntervalSinceReferenceDate];
    *(void *)(a3 + 4 0) = v22;
    [*(id *)(v6 + 56) timeIntervalSinceReferenceDate];
    *(void *)(a3 + 48) = v23;
    [*(id *)(v6 + 64) timeIntervalSinceReferenceDate];
    *(void *)(a3 + 56) = v24;
    *(void *)(a3 + 64) = CalAlarmGetGlobalDefaultTimedAlarmOffset(v20);
    uint64_t GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v20);

    *(void *)(a3 + 72) = GlobalDefaultAllDayAlarmOffset;
  }
  if (Count >= 1)
  {
    CFIndex v26 = 0;
    double v57 = EndDate - v10;
    CFArrayRef v52 = a2;
    double v27 = vabdd_f64(v18, v18);
    while (1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v26);
      double v29 = MEMORY[0x1AD0E87A0](ValueAtIndex);
      double v30 = v18;
      if (IsReminderIntegrationEvent)
      {
        double v30 = v18;
        if (v26 + 1 < Count)
        {
          CFDateRef v31 = CFArrayGetValueAtIndex(a2, v26 + 1);
          double v30 = MEMORY[0x1AD0E87A0](v31);
        }
      }
      CFIndex v32 = Count;
      double v59 = 0.0;
      double v60 = 0.0;
      _CalEventOccurrenceCacheGetMostExtremeAlarmDates(v62, v61, v55, &v60, &v59, v29);
      if (*(double *)(a3 + 40) > v29)
      {
        double v33 = v59;
        double v34 = v60;
        if (*(double *)(a3 + 32) <= v29)
        {
          if (DayCount >= 1) {
            break;
          }
          goto LABEL_57;
        }
        if (DayCount >= 2)
        {
          memset(&buf[12], 0, 20);
          _CalEventOccurrenceCacheLoadInfo(*(void *)a3);
          *(void *)int buf = 0;
          *(_DWORD *)&uint8_t buf[8] = DayCount - 1;
          CalAbsoluteTimeAddGregorianUnits();
          if (v35 >= *(double *)(a3 + 32)) {
            break;
          }
        }
      }
LABEL_57:
      _CalAlarmCacheProcessAddedEvent((double *)a3, (uint64_t)v56, ID, StoreId, IsAllDay, v55, v29);
      ++v26;
      CFIndex Count = v32;
      a2 = v52;
      if (v26 == v32) {
        return;
      }
    }
    int v36 = 0;
    double v37 = v18;
    double v38 = v29;
    while (1)
    {
      if (v36)
      {
        _CalEventOccurrenceCacheLoadInfo(*(void *)a3);
        *(void *)int buf = 0;
        *(_DWORD *)&uint8_t buf[8] = v36;
        memset(&buf[12], 0, 20);
        CalAbsoluteTimeAddGregorianUnits();
        _CalEventOccurrenceCacheLoadInfo(*(void *)a3);
        CalAbsoluteTimeGetTimeForStartOfDay();
        double v38 = v39;
      }
      if (DayCount != 1)
      {
        BOOL v40 = v27 < 2.22044605e-16;
        double v41 = *(double *)(a3 + 32);
        double v42 = vabdd_f64(v41, v18);
        if (v38 < v18) {
          BOOL v40 = 1;
        }
        if (v42 >= 2.22044605e-16 && v38 < v41 || !v40) {
          goto LABEL_56;
        }
        if (v27 >= 2.22044605e-16 && v38 < v18) {
          goto LABEL_57;
        }
        double v45 = *(double *)(a3 + 40);
        double v46 = vabdd_f64(v45, v18);
        if (v38 >= v45 && v46 >= 2.22044605e-16) {
          goto LABEL_57;
        }
      }
      if (v37 == v18)
      {
        _CalEventOccurrenceCacheLoadInfo(*(void *)a3);
        memset(buf, 0, 24);
        *(double *)&unsigned char buf[24] = v57;
        CalAbsoluteTimeAddGregorianUnits();
        double v37 = v48;
      }
      if (v36) {
        double v49 = v29;
      }
      else {
        double v49 = v18;
      }
      if (v36) {
        double v50 = v18;
      }
      else {
        double v50 = v34;
      }
      if (v36) {
        double v51 = v18;
      }
      else {
        double v51 = v33;
      }
      _CalEventOccurrenceCacheInsertOccurrence(*(void *)a3, *(void *)(a3 + 24), *(uint64_t **)(a3 + 8), ID, (void *)CalendarId, StoreId, v38, v49, v37, v30, v50, v51);
LABEL_56:
      if (DayCount == ++v36) {
        goto LABEL_57;
      }
    }
  }
}

void sub_1A8F3C528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4 0) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

uint64_t CalTaskUpdateFromICSTodoWithOptions(const void *a1, void *a2, void *a3, os_unfair_lock_s *a4, void *a5, unsigned __int8 a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  double v14 = [v11 due];
  unsigned int v15 = [v14 hasTimeComponent] ^ 1;

  CalTaskSetDueDateAllDay((uint64_t)a1, v15);
  uint64_t v16 = CalCalendarItemUpdateFromICSComponent(a1, 0, v11, v12, a4, v13, 0, 0, a6);
  if (v16)
  {
    id v17 = [v11 due];

    if (v17)
    {
      double v18 = [v11 due];
      uint64_t DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v18, v12);
      CFStringRef v21 = v20;
      CFAbsoluteTime v22 = *(double *)&DateTimeFromICSDate;

      CFDateRef v23 = CFDateCreate(0, v22);
      CalTaskSetDueDate((uint64_t)a1, (uint64_t)v23);
      if (v23) {
        CFRelease(v23);
      }
      if (v21 && CFStringCompare(v21, @"_float", 0))
      {
        uint64_t v24 = (const void *)CalTimeZoneCopyCFTimeZone();
        CalTaskSetDueDateTimeZone((uint64_t)a1, (uint64_t)v24);
        if (v24) {
          CFRelease(v24);
        }
      }
      else
      {
        CalTaskSetDueDateTimeZone((uint64_t)a1, 0);
      }
      CalDateTimeRelease();
    }
    else
    {
      CalTaskSetDueDate((uint64_t)a1, 0);
      CalTaskSetDueDateTimeZone((uint64_t)a1, 0);
    }
    CFIndex v26 = objc_msgSend(v11, "x_apple_activity");
    uint64_t v27 = [v26 count];

    if (v27)
    {
      double v28 = objc_msgSend(v11, "x_apple_activity");
      double v29 = [v28 objectAtIndex:0];
      CFURLRef v30 = [v29 value];
    }
    else
    {
      CFURLRef v30 = 0;
    }
    CalCalendarItemSetAction((uint64_t)a1, v30);
    CFDateRef v31 = [v11 completed];
    CFDateRef CFDateFromICSDateAsUTC = CalCreateCFDateFromICSDateAsUTC(v31);

    if (CFDateFromICSDateAsUTC)
    {
      CalTaskSetCompletionDate((uint64_t)a1, (uint64_t)CFDateFromICSDateAsUTC);
LABEL_25:
      CFRelease(CFDateFromICSDateAsUTC);
      goto LABEL_26;
    }
    if ([v11 percentComplete] == 100 || objc_msgSend(v11, "status") == 4)
    {
      double v33 = [v11 due];

      if (v33)
      {
        double v34 = [v11 due];
        CFAbsoluteTime Current = COERCE_DOUBLE(CalCreateDateTimeFromICSDate(v34, v12));
      }
      else
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      }
      CFDateRef CFDateFromICSDateAsUTC = CFDateCreate(0, Current);
      CalTaskSetCompletionDate((uint64_t)a1, (uint64_t)CFDateFromICSDateAsUTC);
      if (CFDateFromICSDateAsUTC) {
        goto LABEL_25;
      }
    }
    else
    {
      CalTaskSetCompletionDate((uint64_t)a1, 0);
    }
LABEL_26:
    int v36 = objc_msgSend(v11, "x_apple_sort_order");
    if (v36 < 1)
    {
      CFDateRef v38 = [v11 created];
      CFDateRef v39 = CalCreateCFDateFromICSDateAsUTC(v38);

      if (v39)
      {
        double v40 = MEMORY[0x1AD0E87A0](v39);
        CalTaskSetDisplayOrder((uint64_t)a1, (int)v40);
        CFRelease(v39);
        goto LABEL_31;
      }
      int v36 = (int)CFAbsoluteTimeGetCurrent();
      uint64_t v37 = (uint64_t)a1;
    }
    else
    {
      uint64_t v37 = (uint64_t)a1;
    }
    CalTaskSetDisplayOrder(v37, v36);
LABEL_31:

    goto LABEL_32;
  }
  uint64_t v25 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v25, OS_LOG_TYPE_DEBUG, "CalCalendarItemUpdateFromICSComponent failed", buf, 2u);
  }
LABEL_32:

  return v16;
}

id ICSTodoFromCalTask(const void *a1, unint64_t a2)
{
  if (a1)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4FB7F90]);
    if (CalCalendarItemUpdateICSComponent(a1, v4, 0, a2))
    {
      uint64_t v5 = CalCalendarItemCopyUniqueIdentifier((uint64_t)a1);
      if (v5)
      {
        uint64_t v6 = (const void *)v5;
        [v4 setUid:v5];
        CFRelease(v6);
      }
      CFURLRef v7 = CalCalendarItemCopyAction((uint64_t)a1);
      if (v7)
      {
        CFURLRef v8 = v7;
        double v9 = (void *)[objc_alloc(MEMORY[0x1E4FB7F70]) initWithValue:v7 type:5013];
        if (v9)
        {
          double v10 = [MEMORY[0x1E4F1C978] arrayWithObject:v9];
        }
        else
        {
          double v10 = 0;
        }
        objc_msgSend(v4, "setX_apple_activity:", v10);
        CFRelease(v8);
      }
      uint64_t v13 = CalCalendarItemCopyAppLink((uint64_t)a1);
      if (v13)
      {
        double v14 = (const void *)v13;
        objc_msgSend(v4, "setX_apple_appLinkData:", v13);
        CFRelease(v14);
      }
      unsigned int v15 = (void *)CalTaskCopyDueDateTimeZone((uint64_t)a1);
      BOOL IsDueDateAllDay = CalTaskIsDueDateAllDay((uint64_t)a1);
      uint64_t v17 = CalTaskCopyDueDate((uint64_t)a1);
      if (v17)
      {
        double v18 = (const void *)v17;
        if (IsDueDateAllDay)
        {
          uint64_t v19 = ICSFloatingDateOnlyFromCFDate(v17, v15);
        }
        else
        {
          if (v15) {
            ICSDateFromCFDateInTimezone(v17, v15);
          }
          else {
          uint64_t v19 = ICSDateFromCFDateGuessingAtFloatingDateOnly(v17, 0);
          }
        }
        CFStringRef v20 = (void *)v19;
        [v4 setDue:v19];

        CFRelease(v18);
      }
      CFStringRef v21 = CalTaskCopyCompletionDate((uint64_t)a1);
      if (v21)
      {
        CFAbsoluteTime v22 = v21;
        CFDateRef v23 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
        uint64_t v24 = ICSDateFromCFDate((uint64_t)v22, v23);
        [v4 setCompleted:v24];

        [v4 setPercentComplete:100];
        [v4 setStatus:4];
        CFRelease(v22);
      }
      else
      {
        [v4 setCompleted:0];
        [v4 setPercentComplete:0];
        [v4 setStatus:3];
      }
      objc_msgSend(v4, "setX_apple_sort_order:", (int)CalTaskGetDisplayOrder((uint64_t)a1));
      uint64_t v25 = (void *)CalCalendarItemCopyExternalRepresentation((uint64_t)a1);
      if (v25)
      {
        CFIndex v26 = +[CalItemMetadata metadataWithData:v25];
        [v26 applyToComponent:v4];
      }
      id v11 = v4;
    }
    else
    {
      id v12 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)double v28 = 0;
        _os_log_impl(&dword_1A8E81000, v12, OS_LOG_TYPE_DEBUG, "Couldn't update the calendar item components of task", v28, 2u);
      }
      id v11 = 0;
    }
  }
  else
  {
    id v11 = 0;
  }
  return v11;
}

uint64_t _CalShareePrepareForSave(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6) {
          os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFURLRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8) {
            os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
    CFStringRef v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          double v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CFStringRef v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CFStringRef v13 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          double v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    CFStringRef v15 = (const __CFString *)result;
    if (v9 && (uint64_t result = CFStringGetLength(v9)) != 0
      || v11 && (uint64_t result = CFStringGetLength(v11)) != 0
      || v13 && (uint64_t result = CFStringGetLength(v13)) != 0)
    {
      if (!a2) {
        return result;
      }
    }
    else
    {
      if (!v15) {
        return result;
      }
      uint64_t result = CFStringGetLength(v15);
      if (!a2 || !result) {
        return result;
      }
    }
    uint64_t result = _CalIdentityGetID(v9, v11, v13, v15, a2);
    if (result != -1)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
      CPRecordSetProperty();
      uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
      return _CalDatabaseSetChangeFlags(DatabaseForRecord, 1);
    }
  }
  return result;
}

uint64_t _CalShareePropertyDidChange(uint64_t result, unsigned int a2)
{
  if (a2 <= 0xF && ((1 << a2) & 0xC300) != 0)
  {
    uint64_t v2 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    if (result != -1)
    {
      if (v2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            id v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v4) {
              os_unfair_lock_assert_owner(v4 + 20);
            }
          }
        }
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t _CalShareePropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  if (!a2 && a3 == -1)
  {
    uint64_t v4 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    return CPRecordGetProperty();
  }
  return result;
}

void CalShareeInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalShareeClass, (const char **)&kCalShareeIndexes, (const char **)&kCalShareeChangesIndexes);
}

void CalShareeMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 > 76)
  {
    if (a3 <= 0x4651) {
      CalMigrateTableFull(a2, (const char **)&kCalShareeClass, 0, (const char **)&kCalShareeUpgradeInfo, (const char **)&kCalShareesChangesUpgradeInfo, (const char **)&kCalShareeIndexes, (const char **)&kCalShareeChangesIndexes, 0, a3);
    }
  }
  else
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalShareeClass, (const char **)&kCalShareeIndexes, (const char **)&kCalShareeChangesIndexes);
  }
}

uint64_t CalShareeGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalShareeGetPropertyIDWithPropertyName_sPropDict;
  if (!CalShareeGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalShareeGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalShareeGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"UUID";
      int v6 = 3;
      CFURLRef v7 = @"owner";
      int v8 = 12;
      CFStringRef v9 = @"externalID";
      int v10 = 1;
      CFStringRef v11 = @"shareeStatusRaw";
      int v12 = 5;
      CFStringRef v13 = @"shareeAccessLevelRaw";
      int v14 = 6;
      CFStringRef v15 = @"displayName";
      int v16 = 8;
      uint64_t v17 = @"address";
      int v18 = 9;
      uint64_t v19 = @"firstName";
      int v20 = 14;
      CFStringRef v21 = @"lastName";
      int v22 = 15;
      CFDateRef v23 = @"shareeMuteRemoval";
      int v24 = 7;
      CalShareeGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 10);
      for (uint64_t i = 144; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalShareeGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalShareeGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8F3D494(_Unwind_Exception *a1)
{
  for (uint64_t i = 144; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalShareeHasValidParent(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  CFTypeRef result = CalRelationGetRelatedObject(Property);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalShareeCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

uint64_t _CalDatabaseRemoveShareeChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = _CalShareeCreateChangeHistoryWhereClauseForStore(a1, a2);
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

const void *_CalDatabaseCreateSharee(uint64_t a1)
{
  CFDictionaryRef v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 15);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v2 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      CFStringRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFStringRef v10 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v2 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      int v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v10);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateSharee(os_unfair_lock_s *a1)
{
  CFDictionaryRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Sharee = _CalDatabaseCreateSharee((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Sharee;
}

uint64_t _CalShareeGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalInvalidateShareesWithOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

void *_CalRemoveSharee(void *a1)
{
  CFTypeRef Owner = _CalShareeGetOwner((uint64_t)a1);
  if (Owner)
  {
    return _CalCalendarRemoveSharee((uint64_t)Owner, a1);
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return (void *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

CFTypeRef _CalShareeGetOwner(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void CalRemoveSharee(void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveSharee(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalShareeGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyShareeWithUID(os_unfair_lock_s *a1)
{
  CFDictionaryRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  BOOL v4 = (const void *)_CalShareeGetWithUID(RecordStore);
  BOOL v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalShareeGetUID(const void *a1)
{
  if ((CalEntityIsOfType(a1, 15) & 1) == 0) {
    CalShareeGetUID_cold_1();
  }
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalShareeCopyUUID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalDatabaseCopyShareeWithUUID(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v5 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (v5)
  {
    CFArrayRef v6 = v5;
    if (CFArrayGetCount(v5) < 1)
    {
      CFTypeRef v8 = 0;
    }
    else
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
      CFTypeRef v8 = CFRetain(ValueAtIndex);
    }
    CFRelease(v6);
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  CFStringRef v9 = (os_unfair_lock_s *)(a1 + 80);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v9);
  }
  os_unfair_lock_unlock(v9);
  return v8;
}

uint64_t __CalDatabaseCopyShareeWithUUID_block_invoke(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v2 = *(sqlite3_stmt **)(a2 + 8);
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(*(const __CFString **)(a1 + 32));
  uint64_t v4 = (void (__cdecl *)(void *))MEMORY[0x1E4F14838];
  return sqlite3_bind_text(v2, 1, CStringFromCFString, -1, v4);
}

void CalShareeSetDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeCopyDisplayName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalShareeSetAddress(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFURLGetString(a2);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalShareeCopyAddress(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  if (Property) {
    CFURLRef v5 = CFURLCreateWithString(0, Property, 0);
  }
  else {
    CFURLRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalShareeSetFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeCopyFirstName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalShareeSetLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeCopyLastName(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalShareeSetStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeGetStatus(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalShareeSetAccessLevel(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeGetAccessLevel(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalShareeSetExternalRepresentation(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeCopyExternalRepresentation(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalShareeCopyOwner(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalShareeGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalShareeSetOwner(uint64_t a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalRelationSetRelatedObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseRemoveShareeChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v10 = 0;
  BOOL v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  if (a2)
  {
    CFURLRef v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    CFURLRef v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __CalDatabaseRemoveShareeChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E5D61B08;
  v8[4] = &v10;
  v8[5] = v5;
  v8[6] = a2;
  int v9 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1A8F3E86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveShareeChangesInStoreToIndex_block_invoke(void *a1)
{
  uint64_t result = _CalDatabaseRemoveShareeChangesInStoreToIndex(a1[5], a1[6]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

BOOL CalDatabaseRemoveShareeChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  if (a2)
  {
    CFURLRef v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    CFURLRef v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  CFStringRef v6 = _CalShareeCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___CalDatabaseRemoveShareeChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E5D61B08;
  v9[4] = &v11;
  v9[5] = v5;
  int v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6) {
    CFRelease(v6);
  }
  int v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7 != 0;
}

void sub_1A8F3E9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseRemoveShareeChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  CFTypeRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  id v7[2] = __CalDatabaseRemoveShareeChangesWithIndices_block_invoke;
  v7[3] = &unk_1E5D61B30;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A8F3EAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveShareeChangesWithIndices_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassWithIndices();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseCopyShareeChangesInStore(os_unfair_lock_s *cf, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    uint64_t v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v5 = cf;
    if (!cf) {
      return 0xFFFFFFFFLL;
    }
    CFRetain(cf);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalShareeCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyShareeChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7;
}

CFStringRef _CalShareeCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 15, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyShareeChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 0xFFFFFFFFLL;
    }
    *a3 = Mutable;
  }
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = RecordStore == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseCopyShareeChangesInCalendar(os_unfair_lock_s *cf, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    uint64_t v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v5 = cf;
    if (!cf) {
      return 0xFFFFFFFFLL;
    }
    CFRetain(cf);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalShareeCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyShareeChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7;
}

CFStringRef _CalShareeCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 15, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

void _CalShareeLoadIdentityProperties(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    uint64_t Store = CPRecordGetStore();
    uint64_t IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      uint64_t v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            CFStringRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7) {
              os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8) {
              os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      int v9 = (const void *)_CalIdentityCopyAddress(v5);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10) {
              os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
      CPRecordInitializeProperty();
      if (v9)
      {
        CFRelease(v9);
      }
    }
  }
}

CFTypeRef _CalShareeLoadStoreId(uint64_t a1)
{
  CFTypeRef result = _CalShareeGetOwner(a1);
  if (result)
  {
    _CalCalendarGetStoreId((uint64_t)result);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

CFTypeRef _CalShareeLoadCalendarId(uint64_t a1)
{
  CFTypeRef result = _CalShareeGetOwner(a1);
  if (result)
  {
    CPRecordGetID();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

uint64_t CalAlarmOccurrenceGetAlarm(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

double CalAlarmOccurrenceGetFireDate(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t CalAlarmOccurrenceGetEventOccurrence(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t CalAlarmGetGlobalDefaultTimedAlarmOffset(void *a1)
{
  uint64_t v1 = (void *)CalAlarmCopyDefaultTimedAlarmOffsetWithPreferences(a1);
  CFDictionaryRef v2 = v1;
  if (v1) {
    uint64_t v3 = [v1 integerValue];
  }
  else {
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v3;
}

uint64_t CalAlarmGetGlobalDefaultAllDayAlarmOffset(void *a1)
{
  uint64_t v1 = (void *)CalAlarmCopyDefaultAllDayAlarmOffsetWithPreferences(a1);
  CFDictionaryRef v2 = v1;
  if (v1) {
    uint64_t v3 = [v1 integerValue];
  }
  else {
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v3;
}

CFTypeRef CalDatabaseCopyAlarmOccurrencesFromAlarmCache(os_unfair_lock_s *a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  int v45 = 0;
  CFDictionaryRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = (const void *)_CalDatabaseCopyEventOccurrenceCache((uint64_t)a1);
  _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChangesIfNeeded((uint64_t)v3);
  CFRelease(v3);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = Database == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (*(void *)(Database + 104))
    {
      int v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  uint64_t v10 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v10)
  {
    uint64_t v11 = v10;
    __CalDatabaseBeginReadTransaction((uint64_t)a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalAlarmOccurrence.m:235");
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v11)
      {
        if (*(void *)(*(void *)v11 + 104))
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    uint64_t v13 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    *(void *)double v40 = a1;
    p_CFTypeRef cf = &cf;
    double v42 = &v45;
    uint64_t v43 = _CalDatabaseGetRecordStore((uint64_t)a1);
    char v14 = (const void *)_CalDatabaseCopyEventOccurrenceCache((uint64_t)a1);
    uint64_t TimeZone = _CalEventOccurrenceCacheGetTimeZone((uint64_t)v14);
    id v38 = 0;
    id v39 = 0;
    _CalAlarmCacheGetCacheRange((uint64_t)v14, &v39, &v38);
    id v15 = v39;
    id v16 = v38;
    CFRelease(v14);
    if (CDBLockingAssertionsEnabled)
    {
      if (v13)
      {
        if (*v13)
        {
          uint64_t v17 = **v13;
          if (v17)
          {
            if (*(void *)(v17 + 104))
            {
              int v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v18) {
                os_unfair_lock_assert_owner(v18 + 20);
              }
            }
          }
        }
      }
    }
    int v19 = CPSqliteStatementSendResults();
    if (v19 != 101 && cf)
    {
      int v20 = v19;
      CFStringRef v21 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        int v22 = v21;
        CFDateRef v23 = sqlite3_errstr(v20);
        *(_DWORD *)int buf = 67109378;
        int v49 = v20;
        __int16 v50 = 2082;
        double v51 = v23;
        _os_log_impl(&dword_1A8E81000, v22, OS_LOG_TYPE_ERROR, "Unexpected SQLite result when querying AlarmCache: %d (%{public}s)", buf, 0x12u);
      }
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    [v15 timeIntervalSinceReferenceDate];
    [v16 timeIntervalSinceReferenceDate];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v24 = (id)_CalCopyAbsoluteCalendarItemAlarmsInDateRange((uint64_t)a1, 0);
    uint64_t v25 = [v24 countByEnumeratingWithState:&v34 objects:v47 count:16];
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)v35;
      do
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          if (*(void *)v35 != v27) {
            objc_enumerationMutation(v24);
          }
          double v29 = *(const void **)(*((void *)&v34 + 1) + 8 * i);
          if (_CalAlarmIsDisplayable((uint64_t)v29))
          {
            double TriggerDate = _CalAlarmGetTriggerDate((uint64_t)v29);
            CFDateRef v31 = (void *)CalAlarmOccurrenceCreate(v29, 0, TriggerDate);
            _CalAlarmOccurrencesInsertResult(v31, (const __CFArray **)&cf, &v45);
            CFRelease(v31);
          }
        }
        uint64_t v26 = [v24 countByEnumeratingWithState:&v34 objects:v47 count:16];
      }
      while (v26);
    }

    __CalDatabaseRollbackTransaction((uint64_t)a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalAlarmOccurrence.m:282");
  }
  else
  {
    CFIndex v32 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v40 = 0;
      _os_log_impl(&dword_1A8E81000, v32, OS_LOG_TYPE_ERROR, "Failed to get DB connection to fetch alarm occurrences", v40, 2u);
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return cf;
}

uint64_t _CopyAlarmOccurrencesFromAlarmCacheResultHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  int v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  double v6 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  double v7 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 3);
  EventWithint UID = _CalGetEventWithUID(*(void *)(a2 + 24), v4);
  if (!EventWithUID)
  {
    uint64_t v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v19 = 67109888;
      int v20 = v4;
      __int16 v21 = 1024;
      int v22 = v5;
      __int16 v23 = 2048;
      double v24 = v6;
      __int16 v25 = 2048;
      double v26 = v7;
      _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Failed to find event for item in AlarmCache. event_id = %d, alarm_id = %d, occurrence_date = %f, fire_date = %f", (uint8_t *)&v19, 0x22u);
    }
    uint64_t v14 = *(void *)a2;
    id v15 = @"AlarmCache insert - missing event";
    goto LABEL_12;
  }
  int v9 = (const void *)EventWithUID;
  uint64_t v10 = _CalAlarmGetWithUID(*(void *)(a2 + 24));
  if (!v10)
  {
    id v16 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v19 = 67109888;
      int v20 = v4;
      __int16 v21 = 1024;
      int v22 = v5;
      __int16 v23 = 2048;
      double v24 = v6;
      __int16 v25 = 2048;
      double v26 = v7;
      _os_log_impl(&dword_1A8E81000, v16, OS_LOG_TYPE_ERROR, "Failed to find alarm for item in AlarmCache. event_id = %d, alarm_id = %d, occurrence_date = %f, fire_date = %f", (uint8_t *)&v19, 0x22u);
    }
    uint64_t v14 = *(void *)a2;
    id v15 = @"AlarmCache insert - missing alarm";
LABEL_12:
    _CalDatabaseIntegrityError(v14, v15);
    return 0;
  }
  uint64_t v11 = (const void *)v10;
  if (_CalAlarmIsDisplayable(v10))
  {
    if (_CalCalendarItemHasRecurrenceRules((uint64_t)v9)) {
      uint64_t v12 = (const void *)CalEventOccurrenceCreate(v9, *(const void **)(a2 + 32), v6);
    }
    else {
      uint64_t v12 = 0;
    }
    int v18 = (void *)CalAlarmOccurrenceCreate(v11, v12, v7);
    _CalAlarmOccurrencesInsertResult(v18, *(const __CFArray ***)(a2 + 8), *(int **)(a2 + 16));
    CFRelease(v18);
    if (v12) {
      CFRelease(v12);
    }
  }
  return 0;
}

uint64_t CalAlarmOccurrenceCreate(const void *a1, const void *a2, double a3)
{
  pthread_once(&__CalAlarmOccurrenceRegisterOnce, (void (*)(void))CalAlarmOccurrenceRegisterClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = CFRetain(a1);
  *(double *)(Instance + 24) = a3;
  if (a2) {
    CFTypeRef v7 = CFRetain(a2);
  }
  else {
    CFTypeRef v7 = 0;
  }
  *(void *)(Instance + 32) = v7;
  return Instance;
}

void _CalAlarmOccurrencesInsertResult(void *value, const __CFArray **a2, int *a3)
{
  CFArrayRef v6 = *a2;
  if (*a2)
  {
    v11.length = *a3;
    v11.locatioCFIndex n = 0;
    CFIndex v7 = CFArrayBSearchValues(v6, v11, value, (CFComparatorFunction)_CompareAlarmOccurrencesByFireDate, 0);
    uint64_t v8 = *a3;
    if (v7 < v8) {
      uint64_t v8 = v7;
    }
    CFIndex v9 = v8 & ~(v8 >> 63);
    CFMutableDictionaryRef Mutable = *a2;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFIndex v9 = 0;
    *a2 = Mutable;
  }
  CFArrayInsertValueAtIndex(Mutable, v9, value);
  ++*a3;
}

CFArrayRef CalDatabaseCopyAlarmOccurrencesInDateRange(os_unfair_lock_s *a1, const __CFArray *a2, double a3, double a4)
{
  v99[0] = 0;
  int v98 = 0;
  uint64_t v8 = CalTimeZoneCopyCFTimeZone();
  uint64_t v9 = CalCopyTimeZone();
  CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
  double v11 = v10;
  int v94 = (void *)v9;
  CFTypeRef cf = (CFTypeRef)v8;
  CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
  double v13 = v12;
  uint64_t v14 = CalDatabaseGetPreferences((uint64_t)a1);
  int GlobalDefaultTimedAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(v14);
  v84 = v14;
  int GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v14);
  id v15 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v17 = RecordStore == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v20 = Database == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20)
  {
    if (*(void *)(Database + 104))
    {
      __int16 v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v21) {
        os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  uint64_t v22 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v22)
  {
    __int16 v23 = (sqlite3 **)v22;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v22)
      {
        if (*(void *)(*(void *)v22 + 104))
        {
          double v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v24) {
            os_unfair_lock_assert_owner(v24 + 20);
          }
        }
      }
    }
    CPSqliteConnectionBegin();
    CFArrayRef v25 = (const __CFArray *)_CalCopyAbsoluteCalendarItemAlarmsInDateRange((uint64_t)a1, a2);
    CFArrayRef v26 = (const __CFArray *)_CalCopyRelativeNonRecurringEventAlarmsInDateRange((uint64_t)a1, a2, GlobalDefaultTimedAlarmOffset, GlobalDefaultAllDayAlarmOffset, v23[1], a3, a4, v11, v13);
    CFArrayRef v27 = (const __CFArray *)_CalCopyRelativeRecurringEventAlarmsInDateRange((uint64_t)a1, a2, GlobalDefaultTimedAlarmOffset, GlobalDefaultAllDayAlarmOffset, v23[1], a3, a4, v11, v13);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v23)
      {
        if (*((void *)*v23 + 13))
        {
          double v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v28) {
            os_unfair_lock_assert_owner(v28 + 20);
          }
        }
      }
    }
    CPSqliteConnectionRollback();
  }
  else
  {
    CFArrayRef v27 = 0;
    CFArrayRef v26 = 0;
    CFArrayRef v25 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v15);
  }
  os_unfair_lock_unlock(v15);
  if (v25)
  {
    CFIndex Count = CFArrayGetCount(v25);
    if (Count >= 1)
    {
      CFIndex v30 = Count;
      for (CFIndex i = 0; i != v30; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v25, i);
        os_unfair_lock_lock(v15);
        if (_CalAlarmIsDisplayable((uint64_t)ValueAtIndex))
        {
          double TriggerDate = _CalAlarmGetTriggerDate((uint64_t)ValueAtIndex);
          long long v34 = (void *)CalAlarmOccurrenceCreate(ValueAtIndex, 0, TriggerDate);
          _CalAlarmOccurrencesInsertResult(v34, v99, &v98);
          CFRelease(v34);
        }
        if (CDBLockingAssertionsEnabled) {
          os_unfair_lock_assert_owner(v15);
        }
        os_unfair_lock_unlock(v15);
      }
    }
    CFRelease(v25);
  }
  CFArrayRef v92 = v27;
  if (v26)
  {
    CFIndex v35 = CFArrayGetCount(v26);
    if (v35 >= 1)
    {
      CFIndex v36 = v35;
      for (CFIndex j = 0; j != v36; ++j)
      {
        id v38 = CFArrayGetValueAtIndex(v26, j);
        os_unfair_lock_lock(v15);
        if (_CalAlarmIsDisplayable((uint64_t)v38))
        {
          CFTypeRef OwningCalendarItem = _CalAlarmGetOwningCalendarItem((uint64_t)v38);
          Entityint Type = _CalCalendarItemGetEntityType((uint64_t)OwningCalendarItem);
          if (OwningCalendarItem)
          {
            if (EntityType == 2)
            {
              _CalEventGetStartDate((uint64_t)OwningCalendarItem);
              if (CFEqual(v41, @"_float")) {
                CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
              }
              int valuePtr = 0;
              int valuePtr = _CalAlarmGetTriggerInterval((uint64_t)v38);
              if (!_CalAlarmIsDefaultAlarm((uint64_t)v38)) {
                goto LABEL_57;
              }
              BOOL IsAllDay = _CalCalendarItemIsAllDay((uint64_t)OwningCalendarItem);
              CFTypeRef Store = _CalEventGetStore((uint64_t)OwningCalendarItem);
              CFNumberRef v44 = (const __CFNumber *)(IsAllDay
                                       ? _CalStoreCopyDefaultAllDayAlarmOffset((uint64_t)Store)
                                       : _CalStoreCopyDefaultAlarmOffset((uint64_t)Store));
              CFNumberRef v45 = v44;
              if (v44)
              {
                CFNumberGetValue(v44, kCFNumberIntType, &valuePtr);
                CFRelease(v45);
                int v46 = valuePtr;
              }
              else
              {
                int v46 = IsAllDay ? GlobalDefaultAllDayAlarmOffset : GlobalDefaultTimedAlarmOffset;
                int valuePtr = v46;
              }
              if (v46 != -1)
              {
LABEL_57:
                CFNumberRef v47 = (const __CFNumber *)_CalEventCopyTravelTime((uint64_t)OwningCalendarItem);
                int v96 = 0;
                if (v47)
                {
                  CFNumberRef v48 = v47;
                  CFNumberGetValue(v47, kCFNumberIntType, &v96);
                  valuePtr -= v96;
                  CFRelease(v48);
                }
                memset(v95, 0, 24);
                *(double *)&v95[3] = (double)valuePtr;
                CalAbsoluteTimeAddGregorianUnits();
                __int16 v50 = (void *)CalAlarmOccurrenceCreate(v38, 0, v49);
                _CalAlarmOccurrencesInsertResult(v50, v99, &v98);
                CFRelease(v50);
              }
            }
          }
        }
        if (CDBLockingAssertionsEnabled) {
          os_unfair_lock_assert_owner(v15);
        }
        os_unfair_lock_unlock(v15);
      }
    }
    CFRelease(v26);
    CFArrayRef v27 = v92;
  }
  if (v27) {
    CFIndex v51 = CFArrayGetCount(v27);
  }
  else {
    CFIndex v51 = 0;
  }
  uint64_t v52 = objc_msgSend(MEMORY[0x1E4F1C9A8], "CalGregorianCalendarForTimeZone:", v94, v84);
  if (v51 >= 1)
  {
    CFIndex v53 = 0;
    CFIndex v86 = v51;
    do
    {
      id v54 = CFArrayGetValueAtIndex(v27, v53);
      if (CalAlarmIsDisplayable((uint64_t)v54))
      {
        CFTypeRef v55 = CalAlarmCopyOwningCalendarItem((uint64_t)v54);
        if (v55)
        {
          uint64_t v56 = v55;
          if (CalCalendarItemGetEntityType((uint64_t)v55) != 2) {
            goto LABEL_97;
          }
          LODWORD(v95[0]) = 0;
          LODWORD(v95[0]) = CalAlarmGetTriggerInterval((uint64_t)v54);
          if (!CalAlarmIsDefaultAlarm((uint64_t)v54)) {
            goto LABEL_83;
          }
          BOOL v57 = CalCalendarItemIsAllDay((uint64_t)v56);
          CFTypeRef v58 = CalEventCopyStore((uint64_t)v56);
          double v59 = v58;
          CFNumberRef v60 = (const __CFNumber *)(v57
                                   ? CalStoreCopyDefaultAllDayAlarmOffset((uint64_t)v58)
                                   : CalStoreCopyDefaultAlarmOffset((uint64_t)v58));
          CFNumberRef v61 = v60;
          if (v60)
          {
            CFNumberGetValue(v60, kCFNumberIntType, v95);
            CFRelease(v61);
          }
          else
          {
            int v62 = v57 ? GlobalDefaultAllDayAlarmOffset : GlobalDefaultTimedAlarmOffset;
            LODWORD(v95[0]) = v62;
          }
          CFRelease(v59);
          if (LODWORD(v95[0]) == -1)
          {
LABEL_97:
            CFRelease(v56);
          }
          else
          {
LABEL_83:
            CFNumberRef v63 = (const __CFNumber *)CalEventCopyTravelTime((uint64_t)v56);
            int valuePtr = 0;
            if (v63)
            {
              CFNumberRef v64 = v63;
              CFNumberGetValue(v63, kCFNumberIntType, &valuePtr);
              LODWORD(v95[0]) -= valuePtr;
              CFRelease(v64);
            }
            uint64_t v65 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a3 - (double)SLODWORD(v95[0])];
            uint64_t v66 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a4 - (double)SLODWORD(v95[0])];
            uint64_t v67 = CalEventCopyOccurrenceDatesInDateRange((uint64_t)v56, v65, v66, v94);
            if (v67)
            {
              CFArrayRef v68 = v67;
              __int16 v90 = v66;
              uint64_t v91 = v65;
              uint64_t v93 = v56;
              CFIndex v69 = CFArrayGetCount(v67);
              if (v69 >= 1)
              {
                CFIndex v70 = v69;
                for (CFIndex k = 0; k != v70; ++k)
                {
                  double v72 = CFArrayGetValueAtIndex(v68, k);
                  id v73 = [v72 CalDateByComponentwiseAddingSeconds:SLODWORD(v95[0]) inCalendar:v52];
                  [v73 timeIntervalSinceReferenceDate];
                  if (v74 >= a3 && v74 <= a4)
                  {
                    double v76 = v74;
                    [v72 timeIntervalSinceReferenceDate];
                    uint64_t v78 = (const void *)CalEventOccurrenceCreate(v93, v94, v77);
                    long long v79 = v52;
                    uint64_t v80 = (void *)CalAlarmOccurrenceCreate(v54, v78, v76);
                    _CalAlarmOccurrencesInsertResult(v80, v99, &v98);
                    long long v81 = v80;
                    uint64_t v52 = v79;
                    CFRelease(v81);
                    if (v78) {
                      CFRelease(v78);
                    }
                  }
                }
              }
              CFRelease(v68);
              CFArrayRef v27 = v92;
              uint64_t v56 = v93;
              CFIndex v51 = v86;
              uint64_t v66 = v90;
              uint64_t v65 = v91;
            }
            CFRelease(v56);
          }
        }
      }
      ++v53;
    }
    while (v53 != v51);
  }
  if (v27) {
    CFRelease(v27);
  }
  CFRelease(cf);
  CFRelease(v94);
  CFArrayRef v82 = v99[0];

  return v82;
}

uint64_t CalAlarmOccurrenceRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  __CalAlarmOccurrenceTypeuint64_t ID = result;
  return result;
}

void CalAlarmOccurrenceDestroy(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  CFDictionaryRef v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
}

uint64_t CalAlarmOccurrenceEqual(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  if (v4 != CFGetTypeID((CFTypeRef)a2)) {
    return 0;
  }
  uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  if (result) {
    return vabdd_f64(*(double *)(a1 + 24), *(double *)(a2 + 24)) < 2.22044605e-16;
  }
  return result;
}

uint64_t _CompareAlarmOccurrencesByFireDate(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 24);
  double v3 = *(double *)(a2 + 24);
  if (v2 >= v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = -1;
  }
  if (v2 > v3) {
    return 1;
  }
  else {
    return v4;
  }
}

void CalAuxDatabaseInitializeTables(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(CPRecordStoreGetContext() + 378))
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalAuxDatabaseClass, 0, (const char **)&kCalAuxDatabaseChangesIndexes);
    CalMigrationCreateTriggers(a2, (const char **)&kCalAuxDatabaseClass, (const char **)&kCalAuxDatabaseTriggers);
  }
}

void CalAuxDatabaseMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (!*(unsigned char *)(CPRecordStoreGetContext() + 378))
  {
    if (a3 > 16021)
    {
      if (a3 <= 0x4651) {
        CalMigrateTableFull(a2, (const char **)&kCalAuxDatabaseClass, 0, (const char **)&kCalAuxDatabaseUpgradeInfo, (const char **)&kCalAuxDatabaseChangesUpgradeInfo, 0, (const char **)&kCalAuxDatabaseChangesIndexes, (const char **)&kCalAuxDatabaseTriggers, a3);
      }
    }
    else
    {
      CalAuxDatabaseInitializeTables(a1, a2);
    }
  }
}

const void *_CalDatabaseCreateAuxDatabase(uint64_t a1)
{
  double v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 26);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateAuxDatabase(os_unfair_lock_s *a1)
{
  double v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Auxuint64_t Database = _CalDatabaseCreateAuxDatabase((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return AuxDatabase;
}

void CalRemoveAuxDatabase(const void *a1)
{
  double v2 = (os_unfair_lock_s *)(CalGetDatabaseForRecord() + 80);
  os_unfair_lock_lock(v2);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

uint64_t _CalAuxDatabaseSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalDatabaseCopyAllAuxDatabases(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreCopyAllInstancesOfClass();
}

uint64_t CalDatabaseCopyAllAuxDatabases(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v3 = _CalDatabaseCopyAllAuxDatabases((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalDatabaseGetAuxDatabaseWithUID(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyAuxDatabaseWithUID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AuxDatabaseWithint UID = (const void *)_CalDatabaseGetAuxDatabaseWithUID((uint64_t)a1);
  BOOL v4 = AuxDatabaseWithUID;
  if (AuxDatabaseWithUID) {
    CFRetain(AuxDatabaseWithUID);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

CFTypeRef CalDatabaseCopyAuxDatabaseForPersonaID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFTypeRef v3 = _CalDatabaseCopyAuxDatabaseForPersonaID((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

CFTypeRef _CalDatabaseCopyAuxDatabaseForPersonaID(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v4 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (!v4) {
    return 0;
  }
  CFArrayRef v5 = v4;
  if (CFArrayGetCount(v4) < 1)
  {
    CFTypeRef v7 = 0;
  }
  else
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    CFTypeRef v7 = CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return v7;
}

CFMutableArrayRef _CalAuxDatabaseCopyAccounts(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

CFMutableArrayRef CalAuxDatabaseCopyAccounts(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalAuxDatabaseCopyAccounts(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFArrayRef _CalAuxDatabaseAddAccount(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (const __CFArray *)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationAddObject(result, a2);
  }
  return result;
}

void CalAuxDatabaseAddAccount(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAuxDatabaseAddAccount(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void *_CalAuxDatabaseRemoveAccount(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFArrayRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return (void *)CalToManyRelationRemoveObject(result, a2);
  }
  return result;
}

void CalAuxDatabaseRemoveAccount(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAuxDatabaseRemoveAccount(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAuxDatabaseSetPath(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalAuxDatabaseSetPath(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAuxDatabaseSetPath(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAuxDatabaseGetPath(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef CalAuxDatabaseCopyPath(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Path = (const void *)_CalAuxDatabaseGetPath(a1);
  if (Path) {
    CFTypeRef v4 = CFRetain(Path);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalAuxDatabaseGetUID()
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalAuxDatabaseSetPersonaID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetExternalModTag(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAuxDatabaseCopyPersonaID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Data = (const void *)_CalColorGetData(a1);
  if (Data) {
    CFTypeRef v4 = CFRetain(Data);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEventActionPrepareForSave(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    return CalRelationOwnerWillSave(result);
  }
  return result;
}

uint64_t _CalEventActionPropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  if (!a2 && a3 == -1)
  {
    uint64_t v4 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          CFArrayRef v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    return CPRecordGetProperty();
  }
  return result;
}

void CalEventActionInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalEventActionClass, (const char **)&kCalEventActionIndexes, (const char **)&kCalEventActionChangesIndexes);
}

void CalEventActionMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 > 41)
  {
    if (a3 <= 0x4651) {
      CalMigrateTableFull(a2, (const char **)&kCalEventActionClass, 0, (const char **)&kCalEventActionUpgradeInfo, (const char **)&kCalEventActionChangesUpgradeInfo, (const char **)&kCalEventActionIndexes, (const char **)&kCalEventActionChangesIndexes, 0, a3);
    }
  }
  else
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalEventActionClass, (const char **)&kCalEventActionIndexes, (const char **)&kCalEventActionChangesIndexes);
  }
}

CFTypeRef _CalEventActionHasValidParent(uint64_t a1)
{
  CFTypeRef result = _CalConferenceGetOwner(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalEventActionCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

uint64_t _CalDatabasePrepareEventActionsInStoreForMigration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseRemoveEventActionChangesInStoreToIndex(a1, a3);
}

uint64_t _CalDatabaseRemoveEventActionChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = _CalEventActionCreateChangeHistoryWhereClauseForStore(a1, a2);
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

const void *_CalDatabaseCreateEventAction(uint64_t a1)
{
  BOOL v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 9);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = v2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateEventAction(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  EventActioCFIndex n = _CalDatabaseCreateEventAction((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return EventAction;
}

void *_CalEventActionRemove(void *a1)
{
  CFTypeRef Owner = _CalConferenceGetOwner((uint64_t)a1);
  if (Owner)
  {
    return _CalEventRemoveEventAction((uint64_t)Owner, a1);
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return (void *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

void CalEventActionRemove(void *a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventActionRemove(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalEventActionGetPropertyIDWithPropertyName_sPropDict;
  if (!CalEventActionGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalEventActionGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalEventActionGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"externalID";
      int v6 = 1;
      uint64_t v7 = @"owner";
      int v8 = 8;
      uint64_t v9 = @"externalModificationTag";
      int v10 = 2;
      double v11 = @"externalFolderID";
      int v12 = 3;
      double v13 = @"externalScheduleID";
      int v14 = 4;
      id v15 = @"externalRepresentation";
      int v16 = 5;
      CalEventActionGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 6);
      for (uint64_t i = 80; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalEventActionGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalEventActionGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8F41EF8(_Unwind_Exception *a1)
{
  for (uint64_t i = 80; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t _CalInvalidateEventActionsWithOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalDatabaseCopyEventActionChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalEventActionCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyEventActionChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

CFStringRef _CalEventActionCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 9, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyEventActionChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseRemoveEventActionChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v10 = 0;
  double v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __CalDatabaseRemoveEventActionChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E5D61B08;
  v8[4] = &v10;
  v8[5] = v5;
  v8[6] = a2;
  int v9 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1A8F42528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveEventActionChangesInStoreToIndex_block_invoke(void *a1)
{
  uint64_t result = _CalDatabaseRemoveEventActionChangesInStoreToIndex(a1[5], a1[6]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseCopyEventActionChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalEventActionCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyEventActionChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

CFStringRef _CalEventActionCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 9, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveEventActionChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalEventActionCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveEventActionChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E5D61B08;
  v9[4] = &v11;
  v9[5] = v5;
  int v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A8F427FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveEventActionChangesInCalendarToIndex_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassToIndexWhere();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _CalEventActionGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyEventActionWithUID(os_unfair_lock_s *a1)
{
  CFDictionaryRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  BOOL v4 = (const void *)_CalEventActionGetWithUID(RecordStore);
  BOOL v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *CalDatabaseCopyEventActionWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyEventActionWithExternalIDInCalendarOrStore(a1, a2, 0, a3);
}

const void *CalDatabaseCopyEventActionWithExternalIDInCalendarOrStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  CFArrayRef v4 = (const __CFArray *)CalDatabaseCopyEventActionsWithExternalIDInCalendarOrStore(a1, a2, a3, a4);
  if (!v4) {
    return 0;
  }
  CFArrayRef v5 = v4;
  if (CFArrayGetCount(v4) < 1)
  {
    CFNumberRef ValueAtIndex = 0;
  }
  else
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return ValueAtIndex;
}

const void *CalDatabaseCopyEventActionWithExternalIDInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyEventActionWithExternalIDInCalendarOrStore(a1, a2, a3, 0);
}

uint64_t CalDatabaseCopyAllEventActionsWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyEventActionsWithExternalIDInCalendarOrStore(a1, a2, 0, a3);
}

uint64_t CalDatabaseCopyEventActionsWithExternalIDInCalendarOrStore(os_unfair_lock_s *cf, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = cf;
  if (!a3 && !a4)
  {
    if (cf)
    {
      CFRetain(cf);
      if (!a2) {
        goto LABEL_11;
      }
      goto LABEL_5;
    }
    return 0;
  }
  uint64_t v7 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v7) {
    return 0;
  }
  if (!a2)
  {
LABEL_11:
    CFRelease(v7);
    return 0;
  }
LABEL_5:
  CStringFromCFString = CalCreateCStringFromCFString(a2);
  if (!CStringFromCFString) {
    goto LABEL_11;
  }
  int v9 = CStringFromCFString;
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
  {
    free(v9);
    CFRelease(v7);
    return 0;
  }
  uint64_t v11 = SelectPrefix;
  CFStringAppend(SelectPrefix, @" JOIN CalendarItem ON event_id = CalendarItem.ROWID JOIN Calendar ON calendar_id = Calendar.ROWID WHERE EventAction.external_id = ? ");
  if (a3)
  {
    CFStringRef v12 = @" AND calendar_id = ?";
  }
  else
  {
    if (!a4) {
      goto LABEL_18;
    }
    CFStringRef v12 = @" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)";
  }
  CFStringAppend(v11, v12);
LABEL_18:
  os_unfair_lock_lock(v7 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)v7);
  uint64_t v16 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(void *)(Database + 104))
      {
        int v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  uint64_t v20 = CPSqliteDatabaseStatementForReading();
  if (v20)
  {
    uint64_t v21 = v20;
    sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 1, (const char *)v9, -1, 0);
    if (a3 || a4)
    {
      uint64_t v22 = *(sqlite3_stmt **)(v21 + 8);
      int ID = CPRecordGetID();
      sqlite3_bind_int(v22, 2, ID);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (v16)
      {
        double v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24) {
          os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
    uint64_t v13 = CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v7 + 20);
  }
  os_unfair_lock_unlock(v7 + 20);
  CFRelease(v11);
  free(v9);
  CFRelease(v7);
  return v13;
}

uint64_t CalDatabaseCopyOfAllEventActionsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)a1;
  if (a2)
  {
    if (a1)
    {
      BOOL v3 = a1 + 20;
      os_unfair_lock_lock(a1 + 20);
      uint64_t RecordStore = _CalDatabaseGetRecordStore(v2);
      uint64_t v5 = RecordStore;
      if (CDBLockingAssertionsEnabled) {
        BOOL v6 = RecordStore == 0;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      uint64_t Database = CPRecordStoreGetDatabase();
      if (!Database) {
        goto LABEL_29;
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)(Database + 104))
        {
          int v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
      uint64_t v10 = CPSqliteDatabaseStatementForReading();
      if (v10)
      {
        uint64_t v11 = *(sqlite3_stmt **)(v10 + 8);
        int ID = CPRecordGetID();
        sqlite3_bind_int(v11, 1, ID);
        if (CDBLockingAssertionsEnabled)
        {
          if (v5)
          {
            uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13) {
              os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
        uint64_t v2 = CPRecordStoreProcessStatement();
      }
      else
      {
LABEL_29:
        uint64_t v2 = 0;
      }
      if (!CDBLockingAssertionsEnabled) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
  }
  else if (a1)
  {
    BOOL v3 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    uint64_t v14 = _CalDatabaseGetRecordStore(v2);
    if (CDBLockingAssertionsEnabled) {
      BOOL v15 = v14 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15)
    {
      uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16) {
        os_unfair_lock_assert_owner(v16 + 20);
      }
    }
    uint64_t v2 = CPRecordStoreCopyAllInstancesOfClass();
    if (!CDBLockingAssertionsEnabled) {
      goto LABEL_32;
    }
LABEL_31:
    os_unfair_lock_assert_owner(v3);
LABEL_32:
    os_unfair_lock_unlock(v3);
  }
  return v2;
}

const void *CalDatabaseCopyEventActionWithFolderIDAndExternalID(os_unfair_lock_s *a1, const __CFString *a2, const __CFString *a3)
{
  CFArrayRef v3 = (const __CFArray *)CalDatabaseCopyEventActionsWithFolderIDAndExternalIDsInStore(a1, a2, a3);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  if (CFArrayGetCount(v3) < 1)
  {
    CFNumberRef ValueAtIndex = 0;
  }
  else
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v4, 0);
    CFRetain(ValueAtIndex);
  }
  CFRelease(v4);
  return ValueAtIndex;
}

uint64_t CalDatabaseCopyEventActionsWithFolderIDAndExternalIDsInStore(os_unfair_lock_s *a1, const __CFString *a2, const __CFString *a3)
{
  CFRetain(a1);
  uint64_t v6 = 0;
  if (!((unint64_t)a2 | (unint64_t)a3)) {
    goto LABEL_37;
  }
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
  {
    uint64_t v6 = 0;
    goto LABEL_37;
  }
  BOOL v8 = SelectPrefix;
  CFStringAppend(SelectPrefix, @" WHERE ");
  if (a2)
  {
    CFStringAppend(v8, @"external_folder_id = ?");
    if (!a3)
    {
      CFStringRef v9 = @";";
      goto LABEL_10;
    }
    CFStringAppend(v8, @" AND ");
  }
  else if (!a3)
  {
    goto LABEL_11;
  }
  CFStringRef v9 = @"Meventaction.external_id = ?;";
LABEL_10:
  CFStringAppend(v8, v9);
LABEL_11:
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  uint64_t v11 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v12 = RecordStore == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        BOOL v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    uint64_t v16 = CPSqliteDatabaseStatementForReading();
    if (v16)
    {
      uint64_t v17 = v16;
      if (a2)
      {
        CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
        if (a3) {
          goto LABEL_25;
        }
      }
      else
      {
        CStringFromCFString = 0;
        if (a3)
        {
LABEL_25:
          int v19 = (const char *)CalCreateCStringFromCFString(a3);
          if (a2) {
            goto LABEL_26;
          }
          goto LABEL_40;
        }
      }
      int v19 = 0;
      if (a2)
      {
LABEL_26:
        sqlite3_bind_text(*(sqlite3_stmt **)(v17 + 8), 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
        int v20 = 2;
        if (!a3) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
LABEL_40:
      int v20 = 1;
      if (!a3)
      {
LABEL_28:
        if (CDBLockingAssertionsEnabled)
        {
          if (v11)
          {
            uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21) {
              os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
        uint64_t v6 = CPRecordStoreProcessStatementWithPropertyIndices();
        goto LABEL_34;
      }
LABEL_27:
      sqlite3_bind_text(*(sqlite3_stmt **)(v17 + 8), v20, v19, -1, MEMORY[0x1E4F14838]);
      goto LABEL_28;
    }
  }
  uint64_t v6 = 0;
LABEL_34:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(a1 + 20);
  }
  os_unfair_lock_unlock(a1 + 20);
  CFRelease(v8);
LABEL_37:
  CFRelease(a1);
  return v6;
}

uint64_t CalDatabaseCopyOfAllEventActionsWithFolderIDInStore(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalDatabaseCopyEventActionsWithFolderIDAndExternalIDsInStore(a1, a2, 0);
}

uint64_t _CalEventActionGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalEventActionGetUID()
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalEventActionSetExternalID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventActionSetExternalModTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalModTag(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventActionSetExternalFolderID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalFolderID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventActionSetExternalScheduleID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalScheduleID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventActionSetExternalRepresentation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalRepresentation(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalEventActionCopyOwningEvent(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalConferenceGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEventActionLoadStoreId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result != -1)
  {
    uint64_t result = CPRecordGetStore();
    if (result)
    {
      uint64_t result = _CalGetCalendarWithUID(result);
      if (result)
      {
        uint64_t result = _CalCalendarGetStoreId(result);
        if (result != -1)
        {
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v4) {
                  os_unfair_lock_assert_owner(v4 + 20);
                }
              }
            }
          }
          return CPRecordInitializeProperty();
        }
      }
    }
  }
  return result;
}

uint64_t _CalEventActionLoadCalendarId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  uint64_t v4 = result;
  if (result != -1)
  {
    uint64_t result = CPRecordGetStore();
    if (result)
    {
      uint64_t result = _CalGetEventWithUID(result, v4);
      if (result)
      {
        uint64_t result = _CalEventGetCalendarId(result);
        if (result != -1)
        {
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                uint64_t v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v5) {
                  os_unfair_lock_assert_owner(v5 + 20);
                }
              }
            }
          }
          return CPRecordInitializeProperty();
        }
      }
    }
  }
  return result;
}

uint64_t CalEventOccurrenceRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  __CalEventOccurrenceTypeuint64_t ID = result;
  return result;
}

uint64_t CalEventOccurrenceSetDate(uint64_t result, double a2)
{
  *(double *)(result + 24) = a2;
  return result;
}

uint64_t CalEventOccurrenceGetGregorianDate()
{
  return CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
}

CFTypeRef CalEventOccurrenceCopyTimeZone(uint64_t a1)
{
  return CFRetain(*(CFTypeRef *)(a1 + 32));
}

__CFArray *CalCopyEventOccurrencesForEventInDateRange(const void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = CalCopyDatabaseForRecord();
  uint64_t v11 = CalEventCopyOccurrenceDatesInDateRange((uint64_t)a1, v7, v8, v9);
  if (v11)
  {
    CFArrayRef v12 = v11;
    __int16 v23 = v10;
    CFIndex Count = CFArrayGetCount(v11);
    if (Count < 1)
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFIndex v14 = Count;
      CFIndex v15 = 0;
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v17 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v12, v15);
        double v19 = MEMORY[0x1AD0E87A0](ValueAtIndex);
        uint64_t v20 = CalEventOccurrenceCreate(a1, v9, v19);
        if (v20)
        {
          uint64_t v21 = (const void *)v20;
          if (!Mutable) {
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, v17);
          }
          CFArrayAppendValue(Mutable, v21);
          CFRelease(v21);
        }
        ++v15;
      }
      while (v14 != v15);
    }
    CFRelease(v12);
    uint64_t v10 = v23;
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  CFRelease(v10);

  return Mutable;
}

__CFArray *CalDatabaseCopyEventOccurrencesInDateRange(os_unfair_lock_s *a1, void *a2, void *a3, void *a4, void *a5)
{
  return _CalDatabaseCopyEventOccurrencesInDateRangeInternal(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t CalEventOccurrencesExistForEventInDateRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, const void *a7)
{
  CFIndex v14 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  CFIndex v15 = v14 + 20;
  os_unfair_lock_lock(v14 + 20);
  uint64_t v16 = _CalEventOccurrencesExistInDateRange(a1, a2, a3, a4, a5, a6, a7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v15);
  }
  os_unfair_lock_unlock(v15);
  CFRelease(v14);
  return v16;
}

uint64_t CalEventOccurrencesExistWithinTimeInterval(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, double a8)
{
  uint64_t v16 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  uint64_t v17 = v16 + 20;
  os_unfair_lock_lock(v16 + 20);
  uint64_t exist = _CalEventOccurrencesExistWithinTimeInterval(a1, a2, a3, a4, a8, a5, a6, a7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v17);
  }
  os_unfair_lock_unlock(v17);
  CFRelease(v16);
  return exist;
}

BOOL CalEventOccurrenceEqual(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  return v4 == CFGetTypeID((CFTypeRef)a2)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && vabdd_f64(*(double *)(a1 + 24), *(double *)(a2 + 24)) < 2.22044605e-16
      && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

uint64_t _CalAuxDatabaseAccountPrepareForSave(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    return CalRelationOwnerWillSave(result);
  }
  return result;
}

uint64_t CalAuxDatabaseAccountInitializeTables()
{
  uint64_t result = CPRecordStoreGetContext();
  if (!*(unsigned char *)(result + 378))
  {
    return CPRecordStoreCreateTablesForClass();
  }
  return result;
}

uint64_t CalAuxDatabaseAccountMigrateTables(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = CPRecordStoreGetContext();
  if (a3 <= 16026 && !*(unsigned char *)(result + 378))
  {
    return CalAuxDatabaseAccountInitializeTables();
  }
  return result;
}

const void *_CalDatabaseCreateAuxDatabaseAccount(uint64_t a1)
{
  uint64_t v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 27);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateAuxDatabaseAccount(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AuxDatabaseAccount = _CalDatabaseCreateAuxDatabaseAccount((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return AuxDatabaseAccount;
}

void CalRemoveAuxDatabaseAccount(const void *a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(CalGetDatabaseForRecord() + 80);
  os_unfair_lock_lock(v2);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

CFTypeRef CalDatabaseCopyAuxDatabaseAccountForAccountID(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CFTypeRef v3 = _CalDatabaseCopyAuxDatabaseAccountForAccountID((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

CFTypeRef _CalDatabaseCopyAuxDatabaseAccountForAccountID(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CFArrayRef v4 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (!v4) {
    return 0;
  }
  CFArrayRef v5 = v4;
  if (CFArrayGetCount(v4) < 1)
  {
    CFTypeRef v7 = 0;
  }
  else
  {
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    CFTypeRef v7 = CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return v7;
}

CFTypeRef _CalAuxDatabaseAccountGetDatabase(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

CFTypeRef CalAuxDatabaseAccountCopyAuxDatabase(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Database = _CalAuxDatabaseAccountGetDatabase(a1);
  if (Database) {
    CFTypeRef v4 = CFRetain(Database);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalAuxDatabaseAccountHasValidParent(uint64_t a1)
{
  CFTypeRef result = _CalAuxDatabaseAccountGetDatabase(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

uint64_t CalAuxDatabaseAccountGetUID()
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalAuxDatabaseAccountSetAccountID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAuxDatabaseSetPath(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAuxDatabaseAccountCopyAccountID(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Path = (const void *)_CalAuxDatabaseGetPath(a1);
  if (Path) {
    CFTypeRef v4 = CFRetain(Path);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t internalEntityTypeFromExternalType(uint64_t result)
{
  switch((int)result)
  {
    case 1:
      return result;
    case 2:
      CFTypeRef result = 2;
      break;
    case 3:
    case 9:
    case 12:
    case 13:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
      goto LABEL_5;
    case 4:
      CFTypeRef result = 3;
      break;
    case 5:
      CFTypeRef result = 4;
      break;
    case 6:
      CFTypeRef result = 5;
      break;
    case 7:
      CFTypeRef result = 6;
      break;
    case 8:
      CFTypeRef result = 7;
      break;
    case 10:
      CFTypeRef result = 8;
      break;
    case 11:
      CFTypeRef result = 9;
      break;
    case 14:
      CFTypeRef result = 10;
      break;
    case 15:
      CFTypeRef result = 11;
      break;
    case 16:
      CFTypeRef result = 12;
      break;
    case 17:
      CFTypeRef result = 13;
      break;
    case 18:
      CFTypeRef result = 14;
      break;
    case 19:
      CFTypeRef result = 15;
      break;
    case 20:
      CFTypeRef result = 16;
      break;
    case 23:
      CFTypeRef result = 17;
      break;
    case 24:
      CFTypeRef result = 18;
      break;
    case 29:
      CFTypeRef result = 20;
      break;
    default:
      if (result == 102) {
        CFTypeRef result = 19;
      }
      else {
LABEL_5:
      }
        CFTypeRef result = 0;
      break;
  }
  return result;
}

void sub_1A8F457E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 152), 8);
  _Unwind_Resume(a1);
}

void EntityDict_set(__CFDictionary **a1, unsigned int a2, int a3, uint64_t a4, int a5)
{
  unsigned int v5 = *(_DWORD *)a4;
  if ((*(_DWORD *)a4 & 0x80000000) != 0)
  {
    uint64_t v13 = *(__CFArray **)(a4 + 8);
    if (a5) {
      unint64_t v14 = a2 | 0x20;
    }
    else {
      unint64_t v14 = a2;
    }
    CFIndex v15 = *(int *)(a4 + 4);
    if (v15 == -1)
    {
      CFArrayAppendValue(v13, (const void *)v14);
    }
    else
    {
      CFArraySetValueAtIndex(v13, v15, (const void *)v14);
    }
  }
  else
  {
    int v8 = *(_DWORD *)(a4 + 4);
    if (v8 < 0)
    {
      if (a5) {
        unint64_t v16 = a2 | 0x20;
      }
      else {
        unint64_t v16 = a2;
      }
      unsigned int v17 = *(_DWORD *)(a4 + 16);
      if (v17 > 4)
      {
        CFMutableDictionaryRef Mutable = a1[1];
        if (Mutable)
        {
          unsigned int v12 = CFArrayGetCount(a1[1]) | 0x80000000;
        }
        else
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          a1[1] = Mutable;
          unsigned int v12 = 0x80000000;
        }
        double v19 = CFArrayCreateMutable(0, 6, 0);
        do
        {
          CFArrayAppendValue(v19, (const void *)(v5 & 0x3F));
          BOOL v20 = v5 > 0x3F;
          v5 >>= 6;
        }
        while (v20);
        CFArrayAppendValue(v19, (const void *)v16);
        CFArrayAppendValue(Mutable, v19);
        CFRelease(v19);
      }
      else
      {
        unsigned int v12 = (v16 << (6 * v17)) | v5;
      }
    }
    else
    {
      int v9 = 32 << (6 * v8);
      int v10 = v5 & ~v9;
      int v11 = v9 | v5;
      if (a5) {
        unsigned int v12 = v11;
      }
      else {
        unsigned int v12 = v10;
      }
    }
    uint64_t v21 = *a1;
    CFDictionarySetValue(v21, (const void *)a3, (const void *)v12);
  }
}

BOOL CalDatabaseEntityTypeParticipatesInInMemoryChangeTracking(uint64_t a1)
{
  return internalEntityTypeFromExternalType(a1) != 0;
}

__CFSet *CalDatabaseCreateRecordIDSetFromRecordData(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 bytes];
  uint64_t v3 = (int)[v1 length];
  CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, v3 >> 3, MEMORY[0x1E4F1D548]);
  if ((int)((unint64_t)v3 >> 3) >= 1)
  {
    uint64_t v5 = ((unint64_t)v3 >> 3);
    uint64_t v6 = (int *)(v2 + 4);
    do
    {
      CFTypeRef v7 = (const void *)CalRecordIDCreate(*(v6 - 1), *v6);
      CFSetAddValue(Mutable, v7);
      CFRelease(v7);
      v6 += 2;
      --v5;
    }
    while (v5);
  }

  return Mutable;
}

void CalDatabaseCreateRecordIDSetsFromRecordData(void *a1, unint64_t a2, void *a3, void *a4)
{
  id v17 = a1;
  uint64_t v7 = [v17 bytes];
  unint64_t v8 = (uint64_t)(int)[v17 length] >> 3;
  CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, a2, MEMORY[0x1E4F1D548]);
  if (a2)
  {
    int v10 = (int *)(v7 + 4);
    unint64_t v11 = a2;
    do
    {
      unsigned int v12 = (const void *)CalRecordIDCreate(*(v10 - 1), *v10);
      CFSetAddValue(Mutable, v12);
      CFRelease(v12);
      v10 += 2;
      --v11;
    }
    while (v11);
  }
  uint64_t v13 = CFSetCreateMutable(0, v8 - a2, MEMORY[0x1E4F1D548]);
  unint64_t v14 = v8 - a2;
  if (v8 > a2)
  {
    CFIndex v15 = (int *)(v7 + 8 * a2 + 4);
    do
    {
      unint64_t v16 = (const void *)CalRecordIDCreate(*(v15 - 1), *v15);
      CFSetAddValue(v13, v16);
      CFRelease(v16);
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  if (a3) {
    *a3 = Mutable;
  }
  CFRelease(Mutable);
  if (a4) {
    *a4 = v13;
  }
  CFRelease(v13);
}

void CalDatabaseAddChangesToArray(CFTypeRef *a1, const __CFArray *a2, unsigned char *a3)
{
  if (!*a3)
  {
    CFArrayRef v6 = (const __CFArray *)*a1;
    if (v6) {
      CFIndex Count = CFArrayGetCount(v6);
    }
    else {
      CFIndex Count = 0;
    }
    CFIndex v8 = CFArrayGetCount(a2);
    if (v8 + Count >= 513)
    {
      *a3 = 1;
      if (*a1)
      {
        CFRelease(*a1);
        *a1 = 0;
      }
      goto LABEL_12;
    }
    v9.length = v8;
    int v10 = (__CFArray *)*a1;
    if (!*a1)
    {
LABEL_12:
      *a1 = CFArrayCreateMutableCopy(0, 0, a2);
      return;
    }
    v9.locatioCFIndex n = 0;
    CFArrayAppendArray(v10, a2, v9);
  }
}

void CalDatabaseAddChangeToArray(CFTypeRef *a1, const void *a2, unsigned char *a3)
{
  if (*a3) {
    return;
  }
  CFArrayRef v5 = (const __CFArray *)*a1;
  if (!v5) {
    goto LABEL_7;
  }
  if (CFArrayGetCount(v5) >= 512)
  {
    *a3 = 1;
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    goto LABEL_7;
  }
  CFMutableDictionaryRef Mutable = (__CFArray *)*a1;
  if (!*a1)
  {
LABEL_7:
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    *a1 = Mutable;
  }
  CFArrayAppendValue(Mutable, a2);
}

CFIndex _EntityDict_enumerate(uint64_t a1, unsigned int a2, void *a3)
{
  unsigned int v4 = a2;
  if ((a2 & 0x80000000) != 0)
  {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*a3 + 8), a2 & 0x7FFFFFFF);
    CFIndex result = CFArrayGetCount(ValueAtIndex);
    if (result >= 1)
    {
      CFIndex v8 = result;
      for (CFIndex i = 0; i != v8; ++i)
      {
        CFArrayGetValueAtIndex(ValueAtIndex, i);
        CFIndex result = (*(uint64_t (**)(void))(a3[1] + 16))();
      }
    }
  }
  else
  {
    do
    {
      CFIndex result = (*(uint64_t (**)(void))(a3[1] + 16))();
      BOOL v6 = v4 > 0x3F;
      v4 >>= 6;
    }
    while (v6);
  }
  return result;
}

void _CalImagePrepareForSave(uint64_t a1)
{
  if (!_CalImageGetStoreID(a1))
  {
    id v1 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl(&dword_1A8E81000, v1, OS_LOG_TYPE_ERROR, "Attempting to save an image that is not in any store", v2, 2u);
    }
  }
}

void CalImageInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalImageClass, (const char **)&kCalImageIndexes, 0);
  CalMigrationCreateTriggers(a2, (const char **)&kCalImageClass, (const char **)&kCalImageTriggers);
}

void CalImageMigrateTables(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 17001) {
    CalImageInitializeTables(a1, a2);
  }
}

uint64_t CalImageGetPropertyIDWithPropertyName(void *key)
{
  if (CalImageGetPropertyIDWithPropertyName_onceToken != -1) {
    dispatch_once(&CalImageGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_24);
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalImageGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void __CalImageGetPropertyIDWithPropertyName_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v1 = @"colorData";
  int v2 = 3;
  uint64_t v3 = @"identifier";
  int v4 = 4;
  CFArrayRef v5 = @"name";
  int v6 = 2;
  uint64_t v7 = @"type";
  int v8 = 1;
  CFRange v9 = @"source";
  int v10 = 7;
  CalImageGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&v1, 5);
  for (uint64_t i = 64; i != -16; i -= 16)
}

void sub_1A8F46310(_Unwind_Exception *a1)
{
  for (uint64_t i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

const void *_CalDatabaseCreateImage(uint64_t a1)
{
  int v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 28);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateImage(os_unfair_lock_s *a1)
{
  int v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Image = _CalDatabaseCreateImage((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Image;
}

uint64_t _CalRemoveImage(const void *a1)
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalRemoveImage(const void *a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageHasValidParent(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  int v2 = _CalColorCopyEvents(a1);
  uint64_t v3 = [(__CFArray *)v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        if (_CalCalendarItemHasValidParent(*(void *)(*((void *)&v16 + 1) + 8 * i)))
        {
          uint64_t v8 = 1;
          uint64_t v7 = v2;
          goto LABEL_21;
        }
      }
      uint64_t v4 = [(__CFArray *)v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v7 = _CalImageCopyCalendars(a1);
  uint64_t v8 = [(__CFArray *)v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v13;
    while (2)
    {
      for (uint64_t j = 0; j != v8; ++j)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v7);
        }
        if (_CalCalendarHasValidParent(*(void *)(*((void *)&v12 + 1) + 8 * j)))
        {
          uint64_t v8 = 1;
          goto LABEL_20;
        }
      }
      uint64_t v8 = [(__CFArray *)v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_20:

LABEL_21:
  return v8;
}

CFMutableArrayRef _CalImageCopyCalendars(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFMutableArrayRef result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
  {
    return CalToManyRelationCopyObjects((uint64_t)result);
  }
  return result;
}

BOOL _CalImageIsUnused(uint64_t a1)
{
  CFMutableArrayRef v2 = _CalColorCopyEvents(a1);
  if ([(__CFArray *)v2 count])
  {
    BOOL v3 = 0;
  }
  else
  {
    CFMutableArrayRef v4 = _CalImageCopyCalendars(a1);
    BOOL v3 = [(__CFArray *)v4 count] == 0;
  }
  return v3;
}

void _CalImageCleanUpDanglingEntities(uint64_t a1, void *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, @"DELETE FROM Image WHERE (NOT EXISTS (SELECT 1 FROM CalendarItem where image_id > 0 AND image_id=Image.ROWID)) AND (NOT EXISTS (SELECT 1 FROM Calendar where image_id > 0 AND image_id=Image.ROWID));",
    0);
}

uint64_t _CalImageSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalImageGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyImageWithUID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  CFMutableArrayRef v4 = (const void *)_CalImageGetWithUID(RecordStore);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

void *_CalDatabaseGetImageWithIdentifierInStore(uint64_t a1, uint64_t a2)
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  uint64_t ID = CPRecordGetID();
  return _CalDatabaseGetImageWithIdentifierInStoreID(DatabaseForRecord, ID, a2);
}

void *_CalDatabaseGetImageWithIdentifierInStoreID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  uint64_t v5 = RecordStore;
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t RowidForRecordID = CPRecordStoreGetRowidForRecordID();
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = v5 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    int v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v10) {
      os_unfair_lock_assert_owner(v10 + 20);
    }
  }
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v11 = (void *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  long long v12 = objc_msgSend(v11, "firstObject", v14, 3221225472, ___CalDatabaseGetImageWithIdentifierInStoreID_block_invoke, &__block_descriptor_48_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l, RowidForRecordID, a3);

  return v12;
}

CFTypeRef CalDatabaseCopyImageWithIdentifierInStore(uint64_t a1, uint64_t a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ImageWithIdentifierInCFTypeRef Store = _CalDatabaseGetImageWithIdentifierInStore(a1, a2);
  if (ImageWithIdentifierInStore) {
    CFTypeRef v6 = CFRetain(ImageWithIdentifierInStore);
  }
  else {
    CFTypeRef v6 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

CFMutableArrayRef CalImageCopyEvents(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalColorCopyEvents(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalImageAddEvent(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalColorAddEvent(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageRemoveEvent(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationRemoveObject((void *)result, a2);
    uint64_t result = _CalImageIsUnused(a1);
    if (result)
    {
      uint64_t Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled) {
        BOOL v7 = Store == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
      return CPRecordStoreRemoveRecord();
    }
  }
  return result;
}

void CalImageRemoveEvent(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalImageRemoveEvent(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalImageCopyCalendars(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFMutableArrayRef v3 = _CalImageCopyCalendars(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void *_CalImageAddCalendar(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = (void *)CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationAddObject(result, a2);
    uint64_t Store = CPRecordGetStore();
    if (CDBLockingAssertionsEnabled) {
      BOOL v6 = Store == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
    return (void *)CPRecordStoreAddRecord();
  }
  return result;
}

void CalImageAddCalendar(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalImageAddCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageRemoveCalendar(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationRemoveObject((void *)result, a2);
    uint64_t result = _CalImageIsUnused(a1);
    if (result)
    {
      uint64_t Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled) {
        BOOL v7 = Store == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
      return CPRecordStoreRemoveRecord();
    }
  }
  return result;
}

void CalImageRemoveCalendar(uint64_t a1, void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalImageRemoveCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalImageGetUID()
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t _CalImageGetStore(uint64_t a1)
{
  if ((int)_CalImageGetStoreID(a1) < 1) {
    return 0;
  }
  uint64_t Store = CPRecordGetStore();
  return _CalGetStoreWithUID(Store);
}

uint64_t _CalImageGetStoreID(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if ((int)Property <= 0)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    CFMutableArrayRef v4 = _CalColorCopyEvents(a1);
    uint64_t v5 = [(__CFArray *)v4 countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v21;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v21 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t Property = _CalCalendarItemGetStoreId(*(void *)(*((void *)&v20 + 1) + 8 * i));
          if ((int)Property > 0)
          {
            CFMutableArrayRef v9 = v4;
LABEL_29:

            if (a1)
            {
              if (CDBLockingAssertionsEnabled)
              {
                if (CPRecordGetStore())
                {
                  uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v14) {
                    os_unfair_lock_assert_owner(v14 + 20);
                  }
                }
              }
            }
            CPRecordSetProperty();
            goto LABEL_35;
          }
        }
        uint64_t v6 = [(__CFArray *)v4 countByEnumeratingWithState:&v20 objects:v25 count:16];
        if (v6) {
          continue;
        }
        break;
      }

      if (Property) {
        goto LABEL_35;
      }
    }
    else
    {
    }
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    CFMutableArrayRef v9 = _CalImageCopyCalendars(a1);
    uint64_t v10 = [(__CFArray *)v9 countByEnumeratingWithState:&v16 objects:v24 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v17;
      while (2)
      {
        for (uint64_t j = 0; j != v11; ++j)
        {
          if (*(void *)v17 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t Property = _CalCalendarGetStoreId(*(void *)(*((void *)&v16 + 1) + 8 * j));
          if ((int)Property > 0)
          {

            goto LABEL_29;
          }
        }
        uint64_t v11 = [(__CFArray *)v9 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t Property = 0;
    }

LABEL_35:
  }
  return Property;
}

CFTypeRef CalImageCopyStore(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Store = (const void *)_CalImageGetStore(a1);
  if (Store) {
    CFTypeRef v4 = CFRetain(Store);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalImageSetType(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetExternalModTag(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageGetType(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return (int)CPRecordGetIntegerProperty();
}

uint64_t CalImageGetType(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t Type = _CalImageGetType(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Type;
}

uint64_t _CalImageSetName(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void CalImageSetName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalImageSetName(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalImageCopyName(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFNumberRef ProviderIdentifier = (const void *)_CalColorGetProviderIdentifier(a1);
  if (ProviderIdentifier) {
    CFTypeRef v4 = CFRetain(ProviderIdentifier);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalImageSetColor(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorType(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *CalImageCopyColor(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DescriptioCFIndex n = (const void *)_CalCalendarItemGetDescription(a1);
  CFTypeRef v4 = Description;
  if (Description) {
    CFRetain(Description);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalImageSetIdentifier(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorCode(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *CalImageCopyIdentifier(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ExternalIdentifier = (const void *)_CalColorGetExternalIdentifier(a1);
  CFTypeRef v4 = ExternalIdentifier;
  if (ExternalIdentifier) {
    CFRetain(ExternalIdentifier);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalSuggestedEventInfoPrepareForSave(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    return CalRelationOwnerWillSave(result);
  }
  return result;
}

void CalSuggestedEventInfoInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalSuggestedEventInfoClass, (const char **)&kCalSuggestedEventInfoIndexes, 0);
}

void CalSuggestedEventInfoMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 > 142)
  {
    if (a3 > 0x32D6) {
      return;
    }
  }
  else
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalSuggestedEventInfoClass, (const char **)&kCalSuggestedEventInfoIndexes, 0);
  }
  CalMigrateTableFull(a2, (const char **)&kCalSuggestedEventInfoClass, 0, (const char **)&kCalSuggestedEventInfoUpgradeInfo, 0, (const char **)&kCalSuggestedEventInfoIndexes, 0, 0, a3);
}

const void *_CalDatabaseCreateSuggestedEventInfo(uint64_t a1)
{
  return _CalDatabaseCreateSuggestedEventInfoWithKeys(a1, 0, 0);
}

const void *_CalDatabaseCreateSuggestedEventInfoWithKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = CPRecordCreate();
  uint64_t v7 = (const void *)v6;
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = v7 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v12 = v7 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      if (CPRecordGetStore())
      {
        long long v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
  }
  if (a3)
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v14 = v7 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14)
    {
      if (CPRecordGetStore())
      {
        long long v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
  }
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 20);
  if (CDBLockingAssertionsEnabled) {
    BOOL v17 = v7 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    if (CPRecordGetStore())
    {
      long long v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v18) {
        os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v7);
  return v7;
}

const void *CalDatabaseCreateSuggestedEventInfo(os_unfair_lock_s *a1)
{
  return CalDatabaseCreateSuggestedEventInfoWithKeys(a1, 0, 0);
}

const void *CalDatabaseCreateSuggestedEventInfoWithKeys(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  SuggestedEventInfoWithKeys = _CalDatabaseCreateSuggestedEventInfoWithKeys((uint64_t)a1, a2, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  return SuggestedEventInfoWithKeys;
}

uint64_t _CalRemoveSuggestedEventInfo(const void *a1)
{
  CFTypeRef Owner = _CalSuggestedEventInfoGetOwner((uint64_t)a1);
  if (Owner) {
    _CalEventSetSuggestedEventInfo((uint64_t)Owner, 0);
  }
  uint64_t result = CPRecordGetStore();
  if (result)
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context) {
      _CalDatabaseRemoveEntity(Context, a1);
    }
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5) {
        os_unfair_lock_assert_owner(v5 + 20);
      }
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

CFTypeRef _CalSuggestedEventInfoGetOwner(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void *_CalEventSetSuggestedEventInfo(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (void *)CPRecordGetProperty();
  if (result)
  {
    return CalRelationSetRelatedObject(result, a2);
  }
  return result;
}

void CalRemoveSuggestedEventInfo(const void *a1)
{
  CFTypeRef v2 = CalSuggestedEventInfoCopyOwner((uint64_t)a1);
  if (v2)
  {
    CFMutableArrayRef v3 = v2;
    CalEventSetSuggestedEventInfo((uint64_t)v2, 0);
    CFRelease(v3);
  }
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (CPRecordGetStore())
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context) {
      _CalDatabaseRemoveEntity(Context, a1);
    }
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6) {
        os_unfair_lock_assert_owner(v6 + 20);
      }
    }
    CPRecordStoreRemoveRecord();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalSuggestedEventInfoCopyOwner(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalSuggestedEventInfoGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventSetSuggestedEventInfo(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetSuggestedEventInfo(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void CalSuggestedEventInfoSetOwner(uint64_t a1, const void *a2)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalRelationSetRelatedObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalSuggestedEventInfoCopyOpaqueKey(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalSuggestedEventInfoSetOpaqueKey(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalSuggestedEventInfoCopyUniqueKey(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalSuggestedEventInfoSetUniqueKey(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalSuggestedEventInfoGetChangedFields(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalSuggestedEventInfoGetChangedFields(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ChangedFields = _CalSuggestedEventInfoGetChangedFields(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ChangedFields;
}

void CalSuggestedEventInfoSetChangedFields(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalSuggestedEventInfoGetChangesAcknowledged(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void CalSuggestedEventInfoSetChangesAcknowledged(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalSuggestedEventInfoGetTimestamp(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalSuggestedEventInfoSetTimestamp(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalSuggestedEventInfoCopyExtractionGroupIdentifier(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalSuggestedEventInfoSetExtractionGroupIdentifier(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalEventGetSuggestedEventInfo(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

CFTypeRef CalEventCopySuggestedEventInfo(uint64_t a1)
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef SuggestedEventInfo = _CalEventGetSuggestedEventInfo(a1);
  CFTypeRef v4 = SuggestedEventInfo;
  if (SuggestedEventInfo) {
    CFRetain(SuggestedEventInfo);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalSuggestedEventInfoGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopySuggestedEventInfoWithUID(os_unfair_lock_s *a1)
{
  CFTypeRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  CFTypeRef v4 = (const void *)_CalSuggestedEventInfoGetWithUID(RecordStore);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalSuggestedEventInfoGetUID()
{
  RecordLocCFIndex k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalSuggestedEventInfoGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict;
  if (!CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict)
    {
      value = @"owner";
      int v6 = 7;
      uint64_t v7 = @"opaqueKey";
      int v8 = 1;
      CFMutableArrayRef v9 = @"uniqueKey";
      int v10 = 2;
      uint64_t v11 = @"changedFields";
      int v12 = 3;
      long long v13 = @"changesAcknowledged";
      int v14 = 4;
      long long v15 = @"timestampAsDate";
      int v16 = 5;
      BOOL v17 = @"extractionGroupIdentifier";
      int v18 = 6;
      CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 7);
      for (uint64_t i = 96; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8F48AD4(_Unwind_Exception *a1)
{
  for (uint64_t i = 96; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t _CalSuggestedEventInfoGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef _CalSuggestedEventInfoHasValidParent(uint64_t a1)
{
  CFTypeRef result = _CalSuggestedEventInfoGetOwner(a1);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalSuggestedEventCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

BOOL _CalEventIsSuggestedEvent(uint64_t a1)
{
  return _CalEventGetSuggestedEventInfo(a1) != 0;
}

void _CalSuggestedEventInfoInsertAndUpdateNotificationsForEvent(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFTypeRef SuggestedEventInfo = _CalEventGetSuggestedEventInfo(a1);
  if (SuggestedEventInfo)
  {
    _CalSuggestedEventInfoInsertAndUpdateNotificationsForInfo((uint64_t)SuggestedEventInfo);
  }
  else
  {
    CFDictionaryRef v2 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315138;
      CFTypeRef v4 = "_CalSuggestedEventInfoInsertAndUpdateNotificationsForEvent";
      _os_log_impl(&dword_1A8E81000, v2, OS_LOG_TYPE_ERROR, "%s called on an an event with no suggested event info (probably not a suggested event)", (uint8_t *)&v3, 0xCu);
    }
  }
}

void _CalSuggestedEventInfoInsertAndUpdateNotificationsForInfo(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (CPRecordGetStore())
  {
    uint64_t Context = CPRecordStoreGetContext();
    if (Context)
    {
      uint64_t v3 = Context;
      OwnerDirectlyThroughOwnerId = (const void *)_CalSuggestedEventInfoGetOwnerDirectlyThroughOwnerId(a1);
      _CalSuggestedEventInfoRemoveNotificationsForInfo(a1);
      CFTypeRef Calendar = _CalCalendarItemGetCalendar((uint64_t)OwnerDirectlyThroughOwnerId);
      if (!Calendar || !_CalCalendarIsNaturalLanguageSuggestedEventsCalendar((uint64_t)Calendar))
      {
        _CalDatabaseGetSuggestionsCalendar(v3);
        CFTypeRef v21 = _CalCalendarItemGetCalendar((uint64_t)OwnerDirectlyThroughOwnerId);
        char ChangedFields = _CalSuggestedEventInfoGetChangedFields(a1);
        if (ChangedFields)
        {
          int v7 = 1;
        }
        else if ((ChangedFields & 2) != 0)
        {
          int v7 = 2;
        }
        else if ((ChangedFields & 4) != 0)
        {
          int v7 = 4;
        }
        else
        {
          int v7 = ChangedFields & 8;
        }
        int Status = _CalCalendarItemGetStatus((uint64_t)OwnerDirectlyThroughOwnerId);
        if (CDBLockingAssertionsEnabled)
        {
          if (OwnerDirectlyThroughOwnerId)
          {
            if (CPRecordGetStore())
            {
              CFMutableArrayRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v9) {
                os_unfair_lock_assert_owner(v9 + 20);
              }
            }
          }
        }
        int v10 = (void *)CPRecordCopyProperty();
        id v22 = 0;
        uint64_t v11 = [MEMORY[0x1E4F577D8] unarchiveDictionaryFromData:v10 error:&v22];
        id v12 = v22;
        if (v12)
        {
          long long v13 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 138412290;
            uint64_t v24 = (uint64_t)v12;
            _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "Error unarchiving structured data. Error: %@", buf, 0xCu);
          }
        }
        int v14 = objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E4F578F8], v21);
        long long v15 = v14;
        if (v14)
        {
          [v14 BOOLValue];
        }
        else
        {
          int v16 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            BOOL v17 = v16;
            uint64_t UniqueIdentifier = _CalEventGetUniqueIdentifier((uint64_t)OwnerDirectlyThroughOwnerId);
            *(_DWORD *)int buf = 138543362;
            uint64_t v24 = UniqueIdentifier;
            _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, "Event is missing value for key to determine if suggested event is eligible for notification, event unique identifier = %{public}@", buf, 0xCu);
          }
        }
        int ID = CPRecordGetID();
        if (ID == CPRecordGetID())
        {
          if (Status == 3)
          {
LABEL_31:

            return;
          }
        }
        else if (!v7 && Status != 3)
        {
          goto LABEL_31;
        }
        inserted = (const void *)_CalDatabaseInsertSuggestionNotificationOnCalendarItemWithTypeAndChanges(v3, OwnerDirectlyThroughOwnerId);
        if (inserted) {
          CFRelease(inserted);
        }
        goto LABEL_31;
      }
    }
  }
}

uint64_t _CalSuggestedEventInfoGetOwnerDirectlyThroughOwnerId(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  uint64_t RecordStore = _CalDatabaseGetRecordStore(DatabaseForRecord);
  return _CalGetCalendarItemWithRowID(RecordStore);
}

void _CalSuggestedEventInfoRemoveNotificationsForInfo(uint64_t a1)
{
  uint64_t OwnerDirectlyThroughOwnerId = _CalSuggestedEventInfoGetOwnerDirectlyThroughOwnerId(a1);
  CFArrayRef v2 = _CalCalendarItemCopyRelatedResourceChanges(OwnerDirectlyThroughOwnerId);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFTypeRef v4 = Mutable;
  if (!v2 || !Mutable) {
    goto LABEL_9;
  }
  if (CFArrayGetCount(v2) >= 1)
  {
    CFIndex v5 = 0;
    do
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
      CFTypeRef v7 = _CalResourceChangeGetNotification((uint64_t)ValueAtIndex);
      if (v7)
      {
        int v8 = v7;
        if (_CalNotificationGetEntityType((uint64_t)v7) == 19)
        {
          CFArrayAppendValue(v4, v8);
          _CalResourceChangeSetCalendarItem((uint64_t)ValueAtIndex, 0);
        }
      }
      ++v5;
    }
    while (CFArrayGetCount(v2) > v5);
LABEL_9:
    if (!v2) {
      goto LABEL_11;
    }
  }
  CFRelease(v2);
LABEL_11:
  if (v4)
  {
    if (CFArrayGetCount(v4) >= 1)
    {
      CFIndex v9 = 0;
      do
      {
        int v10 = CFArrayGetValueAtIndex(v4, v9);
        _CalResourceChangeNotificationRemoveAllChanges((uint64_t)v10);
        _CalRemoveNotification(v10);
        ++v9;
      }
      while (CFArrayGetCount(v4) > v9);
    }
    CFRelease(v4);
  }
}

uint64_t CalLocationUpdateFromICSComponent(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if (a3 && a4)
  {
    int v8 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = a4;
      _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_DEBUG, "includeLocationProperty should not both be true for property %zd.", buf, 0xCu);
    }
    a3 = 0;
  }
  else if (!a4)
  {
    goto LABEL_14;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (a4 == 2)
    {
      uint64_t v9 = objc_msgSend(v7, "x_apple_end_location");
LABEL_16:
      long long v15 = (void *)v9;
      int v16 = [v7 location];
      if (v15)
      {
        BOOL v17 = [v15 title];
        int v18 = [v15 address];
        uint64_t v19 = [MEMORY[0x1E4F57740] fullDisplayStringWithTitle:v17 address:v18];

        if (!a3) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v19 = 0;
        if (!a3) {
          goto LABEL_21;
        }
      }
      if (([v16 isEqual:v19] & 1) == 0)
      {

        goto LABEL_28;
      }
LABEL_21:
      if (v15)
      {
        long long v20 = [v15 title];
        CalLocationSetTitle(a1);

        CFTypeRef v21 = [v15 address];
        CalLocationSetAddress(a1);

        id v22 = [v15 routing];
        CalLocationSetRouting(a1);

        long long v23 = [v15 value];
        uint64_t v24 = [v23 scheme];
        uint64_t v25 = [v24 lowercaseString];
        int v26 = [v25 isEqualToString:@"geo"];

        uint64_t v52 = v19;
        if (v26)
        {
          CFArrayRef v27 = [v23 absoluteString];
          uint64_t v28 = [v27 substringFromIndex:4];
          uint64_t v29 = [v28 rangeOfString:@";"];
          if (v30)
          {
            uint64_t v31 = [v28 substringToIndex:v29];

            uint64_t v28 = (void *)v31;
          }
          CFIndex v32 = [v28 componentsSeparatedByString:@","];
          if ([v32 count] == 2)
          {
            double v33 = [v32 objectAtIndex:0];
            [v33 doubleValue];
            uint64_t v35 = v34;

            CFIndex v36 = [v32 objectAtIndex:1];
            [v36 doubleValue];
            uint64_t v38 = v37;

            *(void *)int buf = v35;
            *(void *)&uint8_t buf[8] = v38;
            CalLocationSetCoordinates(a1, (CFNumberRef)buf);
          }
          else
          {
            double v40 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)int buf = 138412290;
              *(void *)&uint8_t buf[4] = v28;
              _os_log_impl(&dword_1A8E81000, v40, OS_LOG_TYPE_DEBUG, "Ignoring invalid coordinates: %@", buf, 0xCu);
            }
          }
        }
        else
        {
          id v39 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 138412290;
            *(void *)&uint8_t buf[4] = v23;
            _os_log_impl(&dword_1A8E81000, v39, OS_LOG_TYPE_DEBUG, "Ignoring unexpected location URL scheme: %@.", buf, 0xCu);
          }
        }
        CFStringRef v41 = [v15 parameterValueForName:@"X-APPLE-REFERENCEFRAME"];
        double v42 = v41;
        if (v41) {
          objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v41, "integerValue"));
        }
        __int16 v50 = v23;
        CalLocationSetReferenceFrame(a1);
        uint64_t v43 = [v15 parameterValueForName:@"X-APPLE-ABUID"];
        if (!v43)
        {
          uint64_t v43 = objc_msgSend(v15, "parameterValueForName:", @"X-Apple-ABUID", v23);
        }
        CalLocationSetAddressBookEntityID(a1);
        CFNumberRef v44 = (void *)CalLocationCopyMapKitHandle(a1);
        CFNumberRef v45 = [v15 mapKitHandle];
        int v46 = v45;
        if (v45 != v44 && ([v45 isEqualToData:v44] & 1) == 0) {
          CalLocationSetMapKitHandle(a1);
        }
        CFNumberRef v47 = objc_msgSend(v15, "parameterValueForName:", @"X-APPLE-RADIUS", v50);
        if (v47
          || ([v15 parameterValueForName:@"X-Apple-Radius"],
              (CFNumberRef v47 = objc_claimAutoreleasedReturnValue()) != 0))
        {
          CFNumberRef v48 = NSNumber;
          [v47 doubleValue];
          objc_msgSend(v48, "numberWithDouble:");
          CalLocationSetRadius(a1);
        }
        else
        {
          CalLocationSetRadius(a1);
        }
        uint64_t v19 = v52;

        uint64_t v14 = 1;
        goto LABEL_45;
      }
LABEL_28:
      CalLocationSetTitle(a1);
      CalLocationSetAddress(a1);
      CalLocationSetRouting(a1);
      CalLocationSetAddressBookEntityID(a1);
      CalLocationSetMapKitHandle(a1);
      CalLocationSetCoordinates(a1, 0);
      CalLocationSetReferenceFrame(a1);
      CalLocationSetRadius(a1);
      uint64_t v14 = 0;
LABEL_45:

      goto LABEL_46;
    }
    if (a4 == 1)
    {
      uint64_t v9 = objc_msgSend(v7, "x_apple_travel_start");
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v9 = objc_msgSend(v7, "x_apple_structured_location");
    goto LABEL_16;
  }
  int v10 = (void *)CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = v10;
    id v12 = objc_opt_class();
    *(_DWORD *)int buf = 134218242;
    *(void *)&uint8_t buf[4] = a4;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v12;
    id v13 = v12;
    _os_log_impl(&dword_1A8E81000, v11, OS_LOG_TYPE_ERROR, "updating location type %zd, but icsItem is type '%@'", buf, 0x16u);
  }
  uint64_t v14 = 0;
LABEL_46:

  return v14;
}

uint64_t UpdateICSStructuredLocationFromCalLocation(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  if (a3 && a4)
  {
    int v8 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = a4;
      _os_log_impl(&dword_1A8E81000, v8, OS_LOG_TYPE_DEBUG, "includeLocationProperty should not both be true for property %zd.", buf, 0xCu);
    }
    a3 = 0;
  }
  else if (!a4)
  {
    char v9 = 0;
    if (a1)
    {
LABEL_9:
      int v10 = (const void *)CalLocationCopyAddressBookEntityID(a1);
      uint64_t v11 = (const void *)CalLocationCopyMapKitHandle(a1);
      *(void *)int buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      int Coordinates = CalLocationGetCoordinates(a1, (uint64_t)buf);
      if ((Coordinates & 1) != 0 || (id v13 = 0, v10))
      {
        id v13 = objc_alloc_init(MEMORY[0x1E4FB7F88]);
        char v14 = v9 ^ 1;
        if (a4 == 1) {
          char v15 = v9 ^ 1;
        }
        else {
          char v15 = 1;
        }
        if (v15)
        {
          if (a4 != 2) {
            char v14 = 1;
          }
          if (v14) {
            objc_msgSend(v7, "setX_apple_structured_location:", v13);
          }
          else {
            objc_msgSend(v7, "setX_apple_end_location:", v13);
          }
        }
        else
        {
          objc_msgSend(v7, "setX_apple_travel_start:", v13);
        }
      }
      CFTypeRef v21 = (void *)CalLocationCopyTitle(a1);
      [v13 setTitle:v21];
      id v22 = (void *)CalLocationCopyAddress(a1);
      [v13 setAddress:v22];
      long long v23 = (void *)CalLocationCopyRouting(a1);
      [v13 setRouting:v23];
      uint64_t v35 = (void *)CalLocationCopyReferenceFrame(a1);
      if (a3)
      {
        uint64_t v24 = [MEMORY[0x1E4F57740] fullDisplayStringWithTitle:v21 address:v22];
        [v7 setLocation:v24];
      }
      if (Coordinates)
      {
        uint64_t v25 = objc_msgSend(NSString, "stringWithFormat:", @"geo:%f,%f", *(void *)buf, *(void *)&buf[8]);
        int v26 = [MEMORY[0x1E4F1CB10] URLWithString:v25];
        [v13 setValue:v26 type:5013];

        CFArrayRef v27 = v35;
        if (v35)
        {
          uint64_t v28 = [v35 stringValue];
          [v13 setParameterValue:v28 forName:@"X-APPLE-REFERENCEFRAME"];

          CFArrayRef v27 = v35;
        }
      }
      else
      {
        [v13 setValue:0 type:5013];
        [v13 setParameterValue:0 forName:@"X-APPLE-REFERENCEFRAME"];
        CFArrayRef v27 = v35;
      }
      [v13 setParameterValue:v10 forName:@"X-APPLE-ABUID"];
      uint64_t v29 = (void *)CalLocationCopyRadius(a1);
      uint64_t v30 = [v29 stringValue];
      [v13 setParameterValue:v30 forName:@"X-APPLE-RADIUS"];

      if (v11)
      {
        [v13 setMapKitHandle:v11];
        id v31 = [v13 ICSStringWithOptions:0];
        CFIndex v32 = (const char *)[v31 UTF8String];
        if (v32 && strlen(v32) >= 0x3DF)
        {
          double v33 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)CFIndex v36 = 0;
            _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_DEBUG, "UpdateICSStructuredLocationFromCalLocation dropping mapkit handle because it exceeds the max length restriction on many servers.", v36, 2u);
          }
          [v13 setMapKitHandle:0];
          CFArrayRef v27 = v35;
        }
      }
      if (v10) {
        CFRelease(v10);
      }
      if (v11) {
        CFRelease(v11);
      }

      goto LABEL_53;
    }
    goto LABEL_19;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    char v9 = 1;
    if (a1) {
      goto LABEL_9;
    }
LABEL_19:
    char v19 = v9 ^ 1;
    if (a4 == 1) {
      char v20 = v9 ^ 1;
    }
    else {
      char v20 = 1;
    }
    if (v20)
    {
      if (a4 != 2) {
        char v19 = 1;
      }
      if (v19) {
        objc_msgSend(v7, "setX_apple_structured_location:", 0);
      }
      else {
        objc_msgSend(v7, "setX_apple_end_location:", 0);
      }
    }
    else
    {
      objc_msgSend(v7, "setX_apple_travel_start:", 0);
    }
    goto LABEL_54;
  }
  int v16 = (void *)CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
  {
    id v13 = v16;
    BOOL v17 = objc_opt_class();
    *(_DWORD *)int buf = 134218242;
    *(void *)&uint8_t buf[4] = a4;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v17;
    id v18 = v17;
    _os_log_impl(&dword_1A8E81000, v13, OS_LOG_TYPE_ERROR, "updating location type %zd, but icsItem is type '%@'", buf, 0x16u);

LABEL_53:
  }
LABEL_54:

  return 0;
}

void CalDatabasePersistentChangeTrackingInitializeDB(uint64_t a1, void *a2, int a3)
{
  if (a3 <= 129)
  {
    CalPerformSQLWithConnection(a2, @"CREATE TABLE ClientCursor(    ROWID INTEGER PRIMARY KEY AUTOINCREMENT,     client_identifier TEXT,     store_id INTEGER,     latest_consumed_sequence_number INTEGER,     latest_consumed_timestamp REAL,     UNIQUE(client_identifier));");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX ClientCursorClientIdentifier ON ClientCursor(client_identifier); ");
    CalPerformSQLWithConnection(a2, @"CREATE TABLE ClientSequence (client_identifier TEXT, sequence_number INTEGER, timestamp REAL);");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX ClientSequenceClientIdentifier ON ClientSequence(client_identifier); ");
    CalPerformSQLWithConnection(a2, @"CREATE TABLE ClientCursorConsumed(   client_identifier TEXT,     consumed_entity_class INTEGER,     consumed_entity_id INTEGER,     consumed_change_id INTEGER,     sequence_number INTEGER);");
    CFTypeRef v4 = @"CREATE TRIGGER delete_clientcursor_consumed AFTER DELETE ON ClientCursor     BEGIN         DELETE FROM ClientCursorConsumed WHERE client_identifier = OLD.client_identifier;         DELETE FROM ClientSequence WHERE client_identifier = OLD.client_identifier;     END; ";
    CFIndex v5 = @"CREATE INDEX ClientCursorConsumedClientIdentifier ON ClientCursorConsumed(client_identifier); ";
LABEL_5:
    CalPerformSQLWithConnection(a2, (uint64_t)v5);
    goto LABEL_6;
  }
  if (a3 < 0x87)
  {
    CFTypeRef v4 = @"ALTER TABLE ClientSequence ADD COLUMN     timestamp REAL; ";
    CFIndex v5 = @"ALTER TABLE ClientCursor ADD COLUMN     store_id INTEGER;";
    goto LABEL_5;
  }
  if (a3 >= 0x4651) {
    return;
  }
  CFTypeRef v4 = @"ALTER TABLE ClientSequence ADD COLUMN     timestamp REAL; ";
LABEL_6:
  CalPerformSQLWithConnection(a2, (uint64_t)v4);
}

void CalDatabasePersistentChangeTrackingCopyToAuxDatabase(void *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __CalDatabasePersistentChangeTrackingCopyToAuxDatabase_block_invoke;
  v11[3] = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  v11[4] = a2;
  CalPerformSQLWithConnectionAndBindBlock(a1, 0, @"INSERT INTO aux.ClientCursor SELECT * FROM ClientCursor WHERE store_id IN (0, ?) AND client_identifier NOT IN (SELECT client_identifier FROM aux.ClientCursor)", v11);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(void *)(*a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CFTypeRef v4 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (!v4) {
    goto LABEL_21;
  }
  CFIndex v5 = v4;
  if (CDBLockingAssertionsEnabled)
  {
    if (*v4)
    {
      uint64_t v6 = **v4;
      if (v6)
      {
        if (*(void *)(v6 + 104))
        {
          id v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7) {
            os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
  }
  int v8 = CPSqliteStatementIntegerResult();
  if (CDBLockingAssertionsEnabled)
  {
    if (*v5)
    {
      uint64_t v9 = **v5;
      if (v9)
      {
        if (*(void *)(v9 + 104))
        {
          int v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10) {
            os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (!v8)
  {
LABEL_21:
    CalPerformSQLWithConnection(a1, @"INSERT INTO aux.ClientCursorConsumed SELECT * FROM ClientCursorConsumed");
    CalPerformSQLWithConnection(a1, @"INSERT INTO aux.ClientSequence SELECT * FROM ClientSequence");
  }
}

uint64_t __CalDatabasePersistentChangeTrackingCopyToAuxDatabase_block_invoke(uint64_t a1, uint64_t a2)
{
  return sqlite3_bind_int64(*(sqlite3_stmt **)(a2 + 8), 1, *(void *)(a1 + 32));
}

uint64_t _CalDatabaseRegisterClientForPersistentChangeTracking(uint64_t a1, void *a2, sqlite3_int64 a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
  {
    int v30 = 138412290;
    id v31 = a2;
    _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_INFO, "_CalDatabaseRegisterClientForPersistentChangeTracking - ClientIdentifier: [%@]", (uint8_t *)&v30, 0xCu);
  }
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t SequenceNumber = CPRecordStoreGetSequenceNumber();
  if (!a2)
  {
    int v26 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v3 0) = 0;
      CFArrayRef v27 = "_CalDatabaseRegisterClientForPersistentChangeTracking - ClientIdentifier is NULL";
LABEL_45:
      _os_log_impl(&dword_1A8E81000, v26, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&v30, 2u);
    }
LABEL_46:
    uint64_t v28 = (os_unfair_lock_s *)(a1 + 80);
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v28);
    }
    os_unfair_lock_unlock(v28);
    return SequenceNumber;
  }
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v12) {
      os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v14 = Database == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (*(void *)(Database + 104))
    {
      char v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v15) {
        os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  uint64_t v16 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled)
  {
    if (v16)
    {
      if (*(void *)v16)
      {
        if (*(void *)(*(void *)v16 + 104))
        {
          BOOL v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17) {
            os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
  }
  uint64_t v18 = CPSqliteConnectionStatementForSQL();
  if (v18)
  {
    uint64_t v19 = v18;
    char v20 = (const char *)[a2 UTF8String];
    if (v20)
    {
      CFTypeRef v21 = v20;
      if (*v20)
      {
        sqlite3_bind_text(*(sqlite3_stmt **)(v19 + 8), 1, v20, -1, 0);
        sqlite3_bind_int64(*(sqlite3_stmt **)(v19 + 8), 2, a3);
        sqlite3_bind_int(*(sqlite3_stmt **)(v19 + 8), 3, SequenceNumber);
        sqlite3_bind_int(*(sqlite3_stmt **)(v19 + 8), 4, SequenceNumber);
        sqlite3_bind_text(*(sqlite3_stmt **)(v19 + 8), 5, v21, -1, 0);
        id v22 = *(sqlite3_stmt **)(v19 + 8);
        double Current = CFAbsoluteTimeGetCurrent();
        sqlite3_bind_double(v22, 6, Current);
        _CalDatabasePerformStatementWithWriteLock(a1, v19);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v19)
          {
            uint64_t v24 = **(void **)v19;
            if (v24)
            {
              if (*(void *)(v24 + 104))
              {
                uint64_t v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v25) {
                  os_unfair_lock_assert_owner(v25 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
        return SequenceNumber;
      }
      int v26 = CDBLogHandle;
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR)) {
        goto LABEL_46;
      }
      LOWORD(v3 0) = 0;
      CFArrayRef v27 = "_CalDatabaseRegisterClientForPersistentChangeTracking - clientIdentifierCString string is empty";
      goto LABEL_45;
    }
    int v26 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v3 0) = 0;
      CFArrayRef v27 = "_CalDatabaseRegisterClientForPersistentChangeTracking - clientIdentifierCString is NULL";
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  return SequenceNumber;
}

uint64_t CalDatabaseRegisterClientForPersistentChangeTracking(os_unfair_lock_s *a1, void *a2)
{
  CFTypeRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v5 = _CalDatabaseRegisterClientForPersistentChangeTracking((uint64_t)a1, a2, 0);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t CalDatabaseRegisterClientForPersistentChangeTrackingInStore(os_unfair_lock_s *a1, void *a2)
{
  CFTypeRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CPRecordGetID();
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  sqlite3_int64 RowidForRecordID = CPRecordStoreGetRowidForRecordID();
  uint64_t v9 = _CalDatabaseRegisterClientForPersistentChangeTracking((uint64_t)a1, a2, RowidForRecordID);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v9;
}

void _CalDatabaseAssociateSequenceNumberWithClient(uint64_t a1, void *a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a1)
      {
        if (*(void *)(*(void *)a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t v6 = CPSqliteConnectionStatementForSQL();
  if (v6)
  {
    id v7 = (uint64_t **)v6;
    BOOL v8 = (const char *)[a2 UTF8String];
    if (v8)
    {
      sqlite3_bind_text((sqlite3_stmt *)v7[1], 1, v8, -1, 0);
      sqlite3_bind_int((sqlite3_stmt *)v7[1], 2, a3);
      uint64_t v9 = (sqlite3_stmt *)v7[1];
      double Current = CFAbsoluteTimeGetCurrent();
      sqlite3_bind_double(v9, 3, Current);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v7)
        {
          uint64_t v11 = **v7;
          if (v11)
          {
            if (*(void *)(v11 + 104))
            {
              uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v12) {
                os_unfair_lock_assert_owner(v12 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        uint64_t v13 = **v7;
        if (v13)
        {
          if (*(void *)(v13 + 104))
          {
            BOOL v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14) {
              os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  char v15 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 138543618;
    BOOL v17 = a2;
    __int16 v18 = 1024;
    int v19 = a3;
    _os_log_impl(&dword_1A8E81000, v15, OS_LOG_TYPE_DEFAULT, "Recorded ClientSequence record with clientIdentifier = %{public}@, sequenceNumber = %d", (uint8_t *)&v16, 0x12u);
  }
}

uint64_t CalDatabaseGetChangedRecordIDsSinceSequenceNumberForClient(uint64_t a1, void *a2, int a3, void *a4, unsigned char *a5, _DWORD *a6, CFTypeRef *a7, CFTypeRef *a8, CFTypeRef *a9)
{
  uint64_t v29 = 0;
  int v28 = 0;
  uint64_t v11 = _CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient(a1, a2, a3, a4, a5, a6, (_DWORD *)&v29 + 1, &v29, &v28);
  uint64_t v12 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:SHIDWORD(v29)];
  uint64_t v13 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:(int)v29];
  BOOL v14 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v28];
  id v15 = v11;
  uint64_t v16 = [v15 bytes];
  uint64_t v17 = v16;
  int v18 = HIDWORD(v29);
  if (SHIDWORD(v29) < 1)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = (int *)(v16 + 4);
    do
    {
      CFTypeRef v21 = (void *)CalRecordIDCreate(*(v20 - 1), *v20);
      [v12 addObject:v21];

      ++v19;
      int v18 = HIDWORD(v29);
      v20 += 2;
    }
    while (v19 < SHIDWORD(v29));
  }
  int v22 = v29 + v18;
  if ((int)v19 < v22)
  {
    unsigned int v23 = 2 * v19;
    do
    {
      uint64_t v24 = (void *)CalRecordIDCreate(*(_DWORD *)(v17 + 4 * v23), *(_DWORD *)(v17 + 4 * (v23 + 1)));
      [v13 addObject:v24];

      int v22 = v29 + HIDWORD(v29);
      v23 += 2;
      LODWORD(v19) = v19 + 1;
    }
    while ((int)v29 + HIDWORD(v29) > (int)v19);
  }
  if ((int)v19 < v22 + v28)
  {
    unsigned int v25 = 2 * v19;
    do
    {
      int v26 = (void *)CalRecordIDCreate(*(_DWORD *)(v17 + 4 * v25), *(_DWORD *)(v17 + 4 * (v25 + 1)));
      [v14 addObject:v26];

      v25 += 2;
      LODWORD(v19) = v19 + 1;
    }
    while ((int)v29 + HIDWORD(v29) + v28 > (int)v19);
  }
  if (a7) {
    *a7 = CFAutorelease(v12);
  }
  if (a8) {
    *a8 = CFAutorelease(v13);
  }
  if (a9) {
    *a9 = CFAutorelease(v14);
  }

  return 0;
}

id _CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient(uint64_t a1, void *a2, int a3, void *a4, unsigned char *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  CFArrayRef v92 = a8;
  uint64_t v91 = a7;
  __int16 v90 = a6;
  BOOL v89 = a5;
  uint64_t v93 = a9;
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v14 = a2;
  id v15 = (const char *)[v14 UTF8String];
  uint64_t v114 = 0;
  double v115 = &v114;
  uint64_t v116 = 0x2020000000;
  uint64_t v117 = 0;
  uint64_t v110 = 0;
  id v111 = &v110;
  uint64_t v112 = 0x2020000000;
  uint64_t v113 = 0;
  uint64_t v106 = 0;
  BOOL v107 = &v106;
  uint64_t v108 = 0x2020000000;
  uint64_t v109 = 0;
  if (CDBLockingAssertionsEnabled) {
    BOOL v16 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
  }
  uint64_t v20 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginReadTransaction(a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:711"))
  {
    uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        int v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
    int SequenceNumber = CPRecordStoreGetSequenceNumber();
    int v105 = 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (v20)
      {
        if (*(void *)v20)
        {
          if (*(void *)(*(void *)v20 + 104))
          {
            unsigned int v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23) {
              os_unfair_lock_assert_owner(v23 + 20);
            }
          }
        }
      }
    }
    uint64_t v24 = CPSqliteConnectionStatementForSQL();
    unsigned int v25 = (uint64_t **)v24;
    if (v24)
    {
      sqlite3_bind_text(*(sqlite3_stmt **)(v24 + 8), 1, v15, -1, 0);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v25)
        {
          uint64_t v26 = **v25;
          if (v26)
          {
            if (*(void *)(v26 + 104))
            {
              CFArrayRef v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v27) {
                os_unfair_lock_assert_owner(v27 + 20);
              }
            }
          }
        }
      }
      int v28 = CPSqliteStatementIntegerResult();
      int v29 = v28;
      BOOL v31 = v28 == -1 || a3 > 0 && v28 > a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v25)
        {
          uint64_t v34 = **v25;
          if (v34)
          {
            if (*(void *)(v34 + 104))
            {
              uint64_t v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v35) {
                os_unfair_lock_assert_owner(v35 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
      if (v31)
      {
        CFDictionaryRef v36 = 0;
        int v37 = 1;
        uint64_t v38 = v90;
        id v39 = v89;
        goto LABEL_74;
      }
    }
    else
    {
      int v29 = -1;
    }
    if (v29 != -1 && a3 == -1) {
      int v41 = v29;
    }
    else {
      int v41 = a3;
    }
    LODWORD(v94) = v41;
    int v42 = *(_DWORD *)(a1 + 360);
    if (v42 >= 0) {
      uint64_t v43 = @"sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?";
    }
    else {
      uint64_t v43 = @"sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)";
    }
    if (v42 >= 0) {
      CFNumberRef v44 = @"sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?";
    }
    else {
      CFNumberRef v44 = @"sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)";
    }
    uint64_t v45 = generateNotInClause(a4);
    int v46 = (void *)v45;
    if (v45)
    {
      uint64_t v43 = [(__CFString *)v43 stringByAppendingFormat:@" AND store_id %@", v45];
      CFNumberRef v47 = [(__CFString *)v44 stringByAppendingFormat:@" AND store_id %@", v46];
      CFNumberRef v48 = [(__CFString *)v44 stringByAppendingFormat:@" AND record %@", v46];
    }
    else
    {
      CFNumberRef v47 = v44;
      CFNumberRef v48 = v44;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 13, 0, MEMORY[0x1E4F1D540]);
    int v50 = *(_DWORD *)(a1 + 360);
    v95[0] = MEMORY[0x1E4F143A8];
    v95[1] = 3221225472;
    v95[2] = ___CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient_block_invoke;
    v95[3] = &unk_1E5D6D418;
    id v51 = v48;
    id v96 = v51;
    id v97 = v44;
    uint64_t v52 = v43;
    int v98 = v52;
    id v53 = v47;
    uint64_t v103 = a1;
    CFMutableDictionaryRef v104 = Mutable;
    id v99 = v53;
    uint64_t v100 = &v114;
    uint64_t v101 = &v110;
    uint64_t v102 = &v106;
    _prepareBindingBlocksForFindingChangesOfEachEntityType(a1, v14, (int)v94, v50, v95);

    uint64_t v38 = v90;
    id v39 = v89;

    int v37 = 0;
    CFDictionaryRef v36 = Mutable;
LABEL_74:
    __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:840");
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v13);
    }
    os_unfair_lock_unlock(v13);
    if (!v36)
    {
      double v33 = 0;
      if (!v39) {
        goto LABEL_113;
      }
      goto LABEL_112;
    }
    CFIndex Count = CFDictionaryGetCount(v36);
    long long v81 = &v79;
    MEMORY[0x1F4188790]();
    unint64_t v55 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    if ((unint64_t)(8 * Count) >= 0x200) {
      size_t v56 = 512;
    }
    else {
      size_t v56 = 8 * Count;
    }
    bzero((char *)&v79 - v55, v56);
    MEMORY[0x1F4188790]();
    bzero((char *)&v79 - v55, v56);
    __int16 v88 = (char *)&v79 - v55;
    uint64_t v87 = (char *)&v79 - v55;
    CFDictionaryGetKeysAndValues(v36, (const void **)((char *)&v79 - v55), (const void **)((char *)&v79 - v55));
    uint64_t v57 = v115[3];
    uint64_t v58 = v111[3] + v57;
    size_t v80 = 8 * (v107[3] + v58);
    double v59 = (char *)malloc_type_malloc(v80, 0xF0C97613uLL);
    CFDictionaryRef v83 = v36;
    int v82 = v37;
    if (v59)
    {
      if (Count >= 1)
      {
        CFIndex v85 = Count;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        BOOL v62 = 1;
        while (1)
        {
          BOOL v86 = v62;
          int v63 = *(_DWORD *)&v88[8 * v60];
          CFDictionaryRef v64 = *(const __CFDictionary **)&v87[8 * v60];
          CFIndex v65 = CFDictionaryGetCount(v64);
          int v94 = malloc_type_malloc(8 * v65, 0x100004000313F17uLL);
          if (!v94) {
            break;
          }
          uint64_t v66 = (const void **)malloc_type_malloc(8 * v65, 0x100004000313F17uLL);
          if (!v66)
          {
            double v76 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 134217984;
              size_t v119 = v65;
              _os_log_impl(&dword_1A8E81000, v76, OS_LOG_TYPE_ERROR, "Unable to allocate space for %zu object states", buf, 0xCu);
            }
            free(v94);
            goto LABEL_105;
          }
          CFDictionaryGetKeysAndValues(v64, (const void **)v94, v66);
          if (v65 >= 1)
          {
            uint64_t v67 = v66;
            CFArrayRef v68 = v94;
            do
            {
              uint64_t v69 = (uint64_t)*v67++;
              switch(v69)
              {
                case 1:
                case 3:
                  uint64_t v70 = v61 + 1;
                  uint64_t v71 = v57;
                  uint64_t v72 = v58;
                  goto LABEL_91;
                case 2:
                  uint64_t v71 = v57 + 1;
                  uint64_t v70 = v61;
                  uint64_t v72 = v58;
                  uint64_t v61 = v57;
                  goto LABEL_91;
                case 4:
                case 6:
                  uint64_t v72 = v58 + 1;
                  uint64_t v70 = v61;
                  uint64_t v71 = v57;
                  uint64_t v61 = v58;
LABEL_91:
                  id v73 = &v59[8 * v61];
                  *(_DWORD *)id v73 = v63;
                  *((_DWORD *)v73 + 1) = *v68;
                  uint64_t v61 = v70;
                  uint64_t v57 = v71;
                  uint64_t v58 = v72;
                  break;
                default:
                  break;
              }
              ++v68;
              --v65;
            }
            while (v65);
          }
          free(v94);
          free(v66);
          BOOL v62 = ++v60 < v85;
          if (v60 == v85) {
            goto LABEL_106;
          }
        }
        long long v75 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 134217984;
          size_t v119 = v65;
          _os_log_impl(&dword_1A8E81000, v75, OS_LOG_TYPE_ERROR, "Unable to allocate space for %zu object IDs", buf, 0xCu);
        }
LABEL_105:
        BOOL v62 = v86;
LABEL_106:
        CFRelease(v83);
        uint64_t v38 = v90;
        id v39 = v89;
        LOBYTE(v37) = v82;
        if (v59 != 0 && !v62)
        {
          id v77 = objc_alloc(MEMORY[0x1E4F1C9B8]);
          double v33 = (void *)[v77 initWithBytesNoCopy:v59 length:v80 freeWhenDone:1];
        }
        else
        {
          if (v59) {
            free(v59);
          }
          double v33 = 0;
          LOBYTE(v37) = 1;
        }
        if (!v39) {
          goto LABEL_113;
        }
LABEL_112:
        unsigned char *v39 = v37;
LABEL_113:
        if (v38) {
          _DWORD *v38 = SequenceNumber;
        }
        if (v91) {
          _DWORD *v91 = v115[3];
        }
        if (v92) {
          _DWORD *v92 = v111[3];
        }
        if (v93) {
          _DWORD *v93 = v107[3];
        }
        goto LABEL_121;
      }
    }
    else
    {
      double v74 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134217984;
        size_t v119 = v80;
        _os_log_impl(&dword_1A8E81000, v74, OS_LOG_TYPE_ERROR, "Unable to allocated %zu bytes for returning changes", buf, 0xCu);
      }
    }
    BOOL v62 = 0;
    goto LABEL_106;
  }
  uint64_t v32 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v32, OS_LOG_TYPE_ERROR, "Couldn't start transaction before fetching changes since sequence number", buf, 2u);
  }
  if (v91) {
    _DWORD *v91 = 0;
  }
  if (v92) {
    _DWORD *v92 = 0;
  }
  if (v93) {
    _DWORD *v93 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v13);
  }
  os_unfair_lock_unlock(v13);
  double v33 = 0;
LABEL_121:
  _Block_object_dispose(&v106, 8);
  _Block_object_dispose(&v110, 8);
  _Block_object_dispose(&v114, 8);
  return v33;
}

void sub_1A8F4B3DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient(uint64_t a1, void *a2, int a3, void *a4, unsigned char *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  return _CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t CalDatabaseGetChangedEKObjectsForClient(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, int a7, int *a8, unsigned char *a9, void *a10)
{
  id v14 = a4;
  if (a10) {
    *a10 = 0;
  }
  id v15 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (CDBLockingAssertionsEnabled) {
    BOOL v16 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v19 = Database == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v20) {
        os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  uint64_t v21 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginReadTransaction(a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1094"))
  {
    id v73 = a5;
    long long v75 = a8;
    uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v23 = RecordStore == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23)
    {
      uint64_t v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v24) {
        os_unfair_lock_assert_owner(v24 + 20);
      }
    }
    int SequenceNumber = CPRecordStoreGetSequenceNumber();
    int v25 = -1;
    int v93 = -1;
    int LatestConsumedSequenceNumberForClient = _CalDatabaseGetLatestConsumedSequenceNumberForClient(v21, a3, &v93);
    int v27 = LatestConsumedSequenceNumberForClient;
    int v28 = v93;
    if (LatestConsumedSequenceNumberForClient) {
      uint64_t v29 = -1;
    }
    else {
      uint64_t v29 = 0;
    }
    int v30 = v93 == -1 && LatestConsumedSequenceNumberForClient == 0;
    if ((LatestConsumedSequenceNumberForClient != 0) == v30)
    {
      if (a6)
      {
        int v80 = v30;
        if (v21)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v21)
            {
              if (*(void *)(*(void *)v21 + 104))
              {
                BOOL v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v31) {
                  os_unfair_lock_assert_owner(v31 + 20);
                }
              }
            }
          }
        }
        uint64_t v32 = CPSqliteConnectionStatementForSQL();
        if (v32)
        {
          uint64_t v33 = v32;
          sqlite3_bind_int(*(sqlite3_stmt **)(v32 + 8), 1, v28);
          sqlite3_bind_text(*(sqlite3_stmt **)(v33 + 8), 2, (const char *)[a3 UTF8String], -1, 0);
          *(void *)int buf = a6;
          unint64_t v95 = 0xFFFFFFFF00000000;
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v33)
            {
              uint64_t v34 = **(void **)v33;
              if (v34)
              {
                if (*(void *)(v34 + 104))
                {
                  uint64_t v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v35) {
                    os_unfair_lock_assert_owner(v35 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementSendResults();
          int v36 = HIDWORD(v95) - 1;
          if (HIDWORD(v95) - 1 <= v28) {
            int v36 = v28 + 1;
          }
          int v37 = SequenceNumber;
          if (HIDWORD(v95) == -1) {
            int v38 = SequenceNumber;
          }
          else {
            int v38 = v36;
          }
        }
        else
        {
          int v41 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl(&dword_1A8E81000, v41, OS_LOG_TYPE_ERROR, "Couldn't create statement for finding appropriate sequence number; using latest sequence number instead",
              buf,
              2u);
          }
          int v37 = SequenceNumber;
          int v38 = SequenceNumber;
        }
        int v30 = v80;
      }
      else
      {
        int v37 = SequenceNumber;
        int v38 = SequenceNumber;
      }
      int v42 = *(_DWORD *)(a1 + 360);
      BOOL v43 = v38 < v37;
      if (v38 < v37) {
        uint64_t v44 = 1;
      }
      else {
        uint64_t v44 = v29;
      }
      if (v43) {
        int v45 = v38;
      }
      else {
        int v45 = -1;
      }
      if (v38 < v42) {
        uint64_t v46 = 1;
      }
      else {
        uint64_t v46 = v29;
      }
      if (v38 >= v42) {
        int v38 = *(_DWORD *)(a1 + 360);
      }
      BOOL v47 = v42 >= 0;
      if (v42 >= 0) {
        uint64_t v48 = v46;
      }
      else {
        uint64_t v48 = v44;
      }
      if (v47) {
        int v25 = v38;
      }
      else {
        int v25 = v45;
      }
      if (v48 == 1) {
        int v49 = a7;
      }
      else {
        int v49 = 1;
      }
      v30 |= v49 ^ 1;
      if (v49) {
        uint64_t v40 = v48;
      }
      else {
        uint64_t v40 = 1;
      }
    }
    else
    {
      uint64_t v40 = v29;
    }
    int v50 = v73;
    if (a9) {
      *a9 = v30;
    }
    id v51 = 0;
    char v81 = v30;
    if (v27 || v30 == 1) {
      goto LABEL_104;
    }
    uint64_t v52 = objc_opt_new();
    if (v25 >= 0) {
      id v53 = @"sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?";
    }
    else {
      id v53 = @"sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)";
    }
    if (v25 >= 0) {
      uint64_t v54 = @"sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?";
    }
    else {
      uint64_t v54 = @"sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)";
    }
    uint64_t v78 = v40;
    int v74 = v25;
    if (([v14 entityID] & 0x80000000) == 0)
    {
      if ([v14 entityType] == 6)
      {
        unint64_t v55 = @"store_id";
LABEL_98:
        [(__CFString *)v53 stringByAppendingFormat:@" AND %@ = ?", v55];
        id v53 = (__CFString *)objc_claimAutoreleasedReturnValue();
        size_t v56 = v54;
        [(__CFString *)v54 stringByAppendingFormat:@" AND %@ = ?", v55];
        uint64_t v54 = (__CFString *)objc_claimAutoreleasedReturnValue();
        int v72 = [v14 entityID];
LABEL_100:
        uint64_t v57 = generateNotInClause(v50);
        uint64_t v58 = (void *)v57;
        if (v57)
        {
          uint64_t v71 = [(__CFString *)v53 stringByAppendingFormat:@" AND store_id %@", v57];

          [(__CFString *)v54 stringByAppendingFormat:@" AND store_id %@", v58];
          v60 = id v59 = v14;

          uint64_t v61 = v56;
          size_t v56 = [v56 stringByAppendingFormat:@"AND record %@", v58];
          id v53 = (__CFString *)v71;
          uint64_t v54 = (__CFString *)v60;
          id v14 = v59;
          id v15 = (os_unfair_lock_s *)(a1 + 80);
        }
        else
        {
          uint64_t v61 = v56;
        }
        int v62 = v93;
        v83[0] = MEMORY[0x1E4F143A8];
        v83[1] = 3221225472;
        v83[2] = __CalDatabaseGetChangedEKObjectsForClient_block_invoke;
        v83[3] = &unk_1E5D6D3C8;
        id v84 = v14;
        id v85 = v56;
        id v86 = v61;
        uint64_t v87 = v53;
        uint64_t v90 = a2;
        uint64_t v91 = a1;
        __int16 v88 = v54;
        int v92 = v72;
        id v51 = v52;
        id v89 = v51;
        int v63 = v54;
        CFDictionaryRef v64 = v53;
        id v65 = v14;
        uint64_t v66 = v64;
        id v67 = v56;
        int v25 = v74;
        _prepareBindingBlocksForFindingChangesOfEachEntityType(a1, a3, v62, v74, v83);

        id v14 = v65;
        uint64_t v40 = v78;
LABEL_104:
        __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1224");
        if (CDBLockingAssertionsEnabled) {
          os_unfair_lock_assert_owner(v15);
        }
        os_unfair_lock_unlock(v15);
        if (v75)
        {
          int v68 = SequenceNumber;
          if (v25 != -1) {
            int v68 = v25;
          }
          int *v75 = v68;
        }
        char v69 = v81;
        if (!a10) {
          char v69 = 1;
        }
        if ((v69 & 1) == 0) {
          *a10 = v51;
        }

        goto LABEL_115;
      }
      if ([v14 entityType] == 1)
      {
        unint64_t v55 = @"calendar_id";
        goto LABEL_98;
      }
    }
    int v72 = -1;
    size_t v56 = v54;
    goto LABEL_100;
  }
  id v39 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v39, OS_LOG_TYPE_ERROR, "Couldn't start transaction to get changed ek objects", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  uint64_t v40 = -1;
LABEL_115:

  return v40;
}

uint64_t _CalDatabaseGetLatestConsumedSequenceNumberForClient(uint64_t a1, void *a2, _DWORD *a3)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)a1)
      {
        if (*(void *)(*(void *)a1 + 104))
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  uint64_t result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    id v7 = (uint64_t **)result;
    sqlite3_bind_text(*(sqlite3_stmt **)(result + 8), 1, (const char *)[a2 UTF8String], -1, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        uint64_t v8 = **v7;
        if (v8)
        {
          if (*(void *)(v8 + 104))
          {
            uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9) {
              os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
      }
    }
    *a3 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        uint64_t v10 = **v7;
        if (v10)
        {
          if (*(void *)(v10 + 104))
          {
            uint64_t v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11) {
              os_unfair_lock_assert_owner(v11 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    return 0;
  }
  return result;
}

id generateNotInClause(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    CFArrayRef v2 = objc_msgSend(@"NOT IN ("), "mutableCopy";
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend(v2, "appendFormat:", @"%i,", objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * i), "intValue"));
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v5);
    }

    [v2 replaceCharactersInRange:objc_msgSend(v2, "length") - 1, 1, @"" withString]);
  }
  else
  {
    CFArrayRef v2 = 0;
  }

  return v2;
}

void _prepareBindingBlocksForFindingChangesOfEachEntityType(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  long long v9 = a5;
  uint64_t v10 = [a2 UTF8String];
  long long v11 = off_1E97ADEC8;
  if (!*(unsigned char *)(a1 + 378)) {
    long long v11 = __classesTrackingChanges;
  }
  BOOL v23 = v11;
  long long v12 = __classesTrackingChanges[*(unsigned __int8 *)(a1 + 378)];
  if (v12)
  {
    uint64_t v13 = v10;
    uint64_t v14 = 0;
    do
    {
      uint64_t v24 = v14;
      id v15 = (unsigned int *)&_getSubEntityTypesForClass_notificationSubclasses;
      if (v12 != &kCalNotificationClass) {
        id v15 = 0;
      }
      if (v12 == &kCalParticipantClass) {
        id v15 = (unsigned int *)&_getSubEntityTypesForClass_participantSubclasses;
      }
      if (v12 == &kCalEventClass) {
        BOOL v16 = (unsigned int *)&_getSubEntityTypesForClass_eventSubclasses;
      }
      else {
        BOOL v16 = v15;
      }
      uint64_t v17 = v16;
      do
      {
        if (v16)
        {
          uint64_t v18 = *v17;
          if (!v18) {
            break;
          }
          BOOL v19 = v28;
          v28[0] = MEMORY[0x1E4F143A8];
          v28[1] = 3221225472;
          v28[2] = ___prepareBindingBlocksForFindingChangesOfEachEntityType_block_invoke;
          v28[3] = &__block_descriptor_52_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
          int v29 = a3;
          int v30 = v18;
          v28[4] = v13;
          int v20 = 6;
        }
        else
        {
          uint64_t v18 = *((unsigned int *)v12 + 16);
          BOOL v19 = v25;
          v25[0] = MEMORY[0x1E4F143A8];
          v25[1] = 3221225472;
          v25[2] = ___prepareBindingBlocksForFindingChangesOfEachEntityType_block_invoke_2;
          v25[3] = &__block_descriptor_52_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
          v25[4] = v13;
          int v26 = a3;
          int v27 = v18;
          int v20 = 5;
        }
        *((_DWORD *)v19 + 12) = a4;
        uint64_t v21 = MEMORY[0x1AD0E9DC0]();
        int v22 = (void *)v21;
        if (v18 && v21) {
          v9[2](v9, v12, v18, v16 != 0, v21, v20 + (a4 >= 0));
        }

        if (!v16) {
          break;
        }
        ++v17;
      }
      while (v18);
      uint64_t v14 = v24 + 1;
      long long v12 = v23[v24 + 1];
    }
    while (v12);
  }
}

void __CalDatabaseGetChangedEKObjectsForClient_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, int a6)
{
  *(void *)((char *)&v85[3] + 4) = *MEMORY[0x1E4F143B8];
  id v11 = a5;
  if ((char **)a2 != &kCalStoreClass || *(void *)(a1 + 32) == 0)
  {
    CFSetRef v13 = *(const __CFSet **)(a1 + 80);
    if (v13 && CFSetGetCount(v13))
    {
      int v14 = CFSetContainsValue(*(CFSetRef *)(a1 + 80), (const void *)(int)a3);
      if (a4)
      {
        if (!(v14 | CFSetContainsValue(*(CFSetRef *)(a1 + 80), (const void *)*(int *)(a2 + 64)))) {
          goto LABEL_82;
        }
      }
      else if (!v14)
      {
        goto LABEL_82;
      }
      if (a3 == 26)
      {
        id v15 = (id *)(a1 + 48);
        goto LABEL_22;
      }
      if (a3 == 6)
      {
LABEL_17:
        id v15 = (id *)(a1 + 40);
LABEL_22:
        id v16 = *v15;
        if (*(_DWORD *)(a1 + 96) == -1)
        {
          uint64_t v18 = (void *)MEMORY[0x1AD0E9DC0](v11);
        }
        else
        {
          v76[0] = MEMORY[0x1E4F143A8];
          v76[1] = 3221225472;
          v76[2] = __CalDatabaseGetChangedEKObjectsForClient_block_invoke_2;
          v76[3] = &unk_1E5D6D3A0;
          id v77 = v11;
          int v17 = *(_DWORD *)(a1 + 96);
          int v78 = a6;
          int v79 = v17;
          uint64_t v18 = (void *)MEMORY[0x1AD0E9DC0](v76);
        }
        uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 88));
        unsigned int v75 = *(_DWORD *)(*(void *)(a1 + 88) + 172);
        id v20 = *(id *)(a1 + 72);
        id v21 = v18;
        if (_buildDictionariesWithChangeTablePropertiesForEntityType_onceToken != -1) {
          dispatch_once(&_buildDictionariesWithChangeTablePropertiesForEntityType_onceToken, &__block_literal_global_25);
        }
        int v22 = [MEMORY[0x1E4F29238] valueWithPointer:a2];
        BOOL v23 = [(id)_buildDictionariesWithChangeTablePropertiesForEntityType_changePropertiesByRecord objectForKeyedSubscript:v22];
        uint64_t v24 = (int *)[v23 pointerValue];

        if (!v24)
        {
          uint64_t v31 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            uint64_t v32 = *(char **)a2;
            *(_DWORD *)int buf = 136315138;
            v85[0] = v32;
            int v28 = "Unsupported record descriptor %s";
            int v29 = v31;
            uint32_t v30 = 12;
            goto LABEL_34;
          }
LABEL_81:

          goto LABEL_82;
        }
        uint64_t v66 = v22;
        int v25 = *v24;
        if (*v24 < 1)
        {
          int v26 = 0;
        }
        else
        {
          int v26 = (CFTypeRef *)malloc_type_calloc(*v24, 8uLL, 0x6004044C4A2DFuLL);
          if (!v26)
          {
            uint64_t v27 = CDBLogHandle;
            int v22 = v66;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              int v28 = "Failed to allocate property values array";
              int v29 = v27;
              uint32_t v30 = 2;
LABEL_34:
              _os_log_impl(&dword_1A8E81000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
              goto LABEL_81;
            }
            goto LABEL_81;
          }
        }
        int v69 = v25;
        uint64_t v70 = a3;
        id v65 = v11;
        CFArrayRef v82 = 0;
        CFArrayRef v83 = 0;
        uint64_t v33 = v25;
        CFArrayRef v80 = 0;
        CFArrayRef v81 = 0;
        if (RecordStore)
        {
          if (CDBLockingAssertionsEnabled)
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
        LODWORD(v61) = v25;
        uint64_t v59 = *((void *)v24 + 1);
        uint64_t v60 = v26;
        id v63 = v21;
        id v64 = v16;
        CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithBindBlockAndPropertiesA();
        CFArrayRef v35 = v83;
        CFArrayRef v36 = v80;
        CFArrayRef v72 = v81;
        CFArrayRef v73 = v82;
        int v37 = (void *)*((void *)v24 + 2);
        uint64_t v38 = *((void *)v24 + 3);
        id v62 = v20;
        id v74 = v20;
        id v39 = v37;
        CFArrayRef theArray = v35;
        if (!v35 || !v73 || !v72 || (CFIndex Count = CFArrayGetCount(v35), Count < 1))
        {
LABEL_65:

          if (v83) {
            CFRelease(v83);
          }
          id v16 = v64;
          id v11 = v65;
          id v21 = v63;
          if (v82) {
            CFRelease(v82);
          }
          if (v81) {
            CFRelease(v81);
          }
          id v20 = v62;
          if (v80) {
            CFRelease(v80);
          }
          if (v26)
          {
            if ((int)v33 >= 1)
            {
              uint64_t v57 = v33;
              uint64_t v58 = v26;
              do
              {
                if (*v58) {
                  CFRelease(*v58);
                }
                ++v58;
                --v57;
              }
              while (v57);
            }
            free(v26);
          }
          int v22 = v66;
          goto LABEL_81;
        }
        CFIndex v40 = 0;
        CFArrayRef v67 = v36;
        while (1)
        {
          int v41 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", v33 + 4, v59, v60, v61);
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v40);
          BOOL v43 = CFArrayGetValueAtIndex(v73, v40);
          uint64_t v44 = CFArrayGetValueAtIndex(v72, v40);
          int v45 = [[CADObjectID alloc] initWithEntityType:v70 entityID:ValueAtIndex databaseID:v75];
          [v41 setObject:v45 forKeyedSubscript:@"record"];

          uint64_t v46 = [NSNumber numberWithInt:v43];
          [v41 setObject:v46 forKeyedSubscript:@"type"];

          BOOL v47 = [NSNumber numberWithInt:v44];
          [v41 setObject:v47 forKeyedSubscript:@"ROWID"];

          if (v36)
          {
            uint64_t v48 = objc_msgSend(NSNumber, "numberWithInt:", CFArrayGetValueAtIndex(v36, v40));
            [v41 setObject:v48 forKeyedSubscript:@"sequence_number"];
          }
          if (v69 >= 1) {
            break;
          }
LABEL_64:
          [v74 addObject:v41];

          ++v40;
          CFArrayRef v36 = v67;
          if (v40 == Count) {
            goto LABEL_65;
          }
        }
        uint64_t v49 = 0;
        while (1)
        {
          int v50 = [v39 objectAtIndexedSubscript:v49];
          CFArrayRef v51 = (const __CFArray *)v26[v49];
          int v52 = *(_DWORD *)(v38 + 4 * v49);
          if ((v52 - 2) < 2 || v52 == 7)
          {
            uint64_t v54 = CFArrayGetValueAtIndex(v51, v40);
            unint64_t v55 = [MEMORY[0x1E4F1CA98] null];

            if (v54 == v55) {
              goto LABEL_59;
            }
          }
          else
          {
            if (v52 != 1)
            {
              size_t v56 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 67109378;
                LODWORD(v85[0]) = v52;
                WORD2(v85[0]) = 2112;
                *(void *)((char *)v85 + 6) = v50;
                _os_log_impl(&dword_1A8E81000, v56, OS_LOG_TYPE_ERROR, "Unsupported type %i for key %@", buf, 0x12u);
              }
              goto LABEL_60;
            }
            uint64_t v54 = objc_msgSend(NSNumber, "numberWithInteger:", CFArrayGetValueAtIndex(v51, v40));
          }
          [v41 setObject:v54 forKeyedSubscript:v50];
LABEL_59:

LABEL_60:
          if (v33 == ++v49) {
            goto LABEL_64;
          }
        }
      }
    }
    else
    {
      if (a3 == 6) {
        goto LABEL_17;
      }
      if (a3 == 26) {
        goto LABEL_82;
      }
    }
    id v15 = (id *)(a1 + 64);
    if (a4) {
      id v15 = (id *)(a1 + 56);
    }
    goto LABEL_22;
  }
LABEL_82:
}

uint64_t __CalDatabaseGetChangedEKObjectsForClient_block_invoke_2(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v4 = *(sqlite3_stmt **)(a2 + 8);
  int v5 = *(_DWORD *)(a1 + 40);
  int v6 = *(_DWORD *)(a1 + 44);
  return sqlite3_bind_int(v4, v5, v6);
}

void CalDatabaseClearSuperfluousChanges(os_unfair_lock_s *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if (__CalDatabaseBeginWriteTransaction(v1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1621"))
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v3 = *(void *)(v1 + 24) == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled) {
      BOOL v6 = Database == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      if (*(void *)(Database + 104))
      {
        id v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
    uint64_t v94 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (v94)
    {
      os_signpost_id_t v8 = os_signpost_id_generate((os_log_t)CDBPerfSignpostsHandle);
      long long v9 = (id)CDBPerfSignpostsHandle;
      uint64_t v10 = v9;
      os_signpost_id_t spid = v8;
      unint64_t v11 = v8 - 1;
      if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
      {
        *(_WORD *)int buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1A8E81000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "ClearSuperfluousChanges", (const char *)&unk_1A8F8C283, buf, 2u);
      }

      long long v12 = [MEMORY[0x1E4F1CA80] set];
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v94)
        {
          if (*(void *)(*(void *)v94 + 104))
          {
            CFSetRef v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13) {
              os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
      uint64_t v91 = v1;
      int v14 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (v14)
      {
        id v15 = v14;
        if (CDBLockingAssertionsEnabled)
        {
          if (*v14)
          {
            uint64_t v16 = **v14;
            if (v16)
            {
              if (*(void *)(v16 + 104))
              {
                int v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v17) {
                  os_unfair_lock_assert_owner(v17 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v15)
          {
            uint64_t v18 = **v15;
            if (v18)
            {
              if (*(void *)(v18 + 104))
              {
                BOOL v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v19) {
                  os_unfair_lock_assert_owner(v19 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      unint64_t v89 = v11;
      uint64_t v90 = v2;
      unint64_t v95 = [MEMORY[0x1E4F1CA60] dictionary];
      long long v97 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      id v20 = v12;
      uint64_t v21 = [v20 countByEnumeratingWithState:&v97 objects:buf count:16];
      uint64_t v22 = v94;
      if (v21)
      {
        uint64_t v23 = v21;
        uint64_t v24 = *(void *)v98;
        do
        {
          for (uint64_t i = 0; i != v23; ++i)
          {
            if (*(void *)v98 != v24) {
              objc_enumerationMutation(v20);
            }
            int v26 = *(void **)(*((void *)&v97 + 1) + 8 * i);
            uint64_t v27 = objc_opt_new();
            if (CDBLockingAssertionsEnabled)
            {
              if (*(void *)v22)
              {
                if (*(void *)(*(void *)v22 + 104))
                {
                  int v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v28) {
                    os_unfair_lock_assert_owner(v28 + 20);
                  }
                }
              }
            }
            uint64_t v29 = CPSqliteConnectionStatementForSQL();
            if (v29)
            {
              uint32_t v30 = (uint64_t **)v29;
              sqlite3_bind_int(*(sqlite3_stmt **)(v29 + 8), 1, [v26 intValue]);
              if (CDBLockingAssertionsEnabled)
              {
                if (*v30)
                {
                  uint64_t v31 = **v30;
                  if (v31)
                  {
                    if (*(void *)(v31 + 104))
                    {
                      uint64_t v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v32) {
                        os_unfair_lock_assert_owner(v32 + 20);
                      }
                    }
                  }
                }
              }
              CPSqliteStatementSendResults();
              if (CDBLockingAssertionsEnabled)
              {
                if (*v30)
                {
                  uint64_t v33 = **v30;
                  if (v33)
                  {
                    if (*(void *)(v33 + 104))
                    {
                      uint64_t v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v34) {
                        os_unfair_lock_assert_owner(v34 + 20);
                      }
                    }
                  }
                }
              }
              CPSqliteStatementReset();
              CFArrayRef v35 = (void *)[v27 mutableCopy];
              CFArrayRef v36 = objc_alloc_init(EKPersistentChangeStoreInfo);
              if ([v35 count])
              {
                int v37 = [v35 objectAtIndexedSubscript:0];
                uint64_t v38 = [v37 clientIdentifier];
                [(EKPersistentChangeStoreInfo *)v36 setMinConsumedClientIdentifier:v38];

                -[EKPersistentChangeStoreInfo setMinConsumedSequenceNumber:](v36, "setMinConsumedSequenceNumber:", [v37 consumedSequenceNumber]);
                if ((unint64_t)[v35 count] < 2)
                {
                  [(EKPersistentChangeStoreInfo *)v36 setSecondMinConsumedSequenceNumber:0x7FFFFFFFLL];
                }
                else
                {
                  id v39 = [v35 objectAtIndexedSubscript:1];
                  -[EKPersistentChangeStoreInfo setSecondMinConsumedSequenceNumber:](v36, "setSecondMinConsumedSequenceNumber:", [v39 consumedSequenceNumber]);
                }
                uint64_t v22 = v94;
              }
              else
              {
                [(EKPersistentChangeStoreInfo *)v36 setMinConsumedSequenceNumber:0x7FFFFFFFLL];
              }

              if (v36) {
                [v95 setObject:v36 forKey:v26];
              }
            }
          }
          uint64_t v23 = [v20 countByEnumeratingWithState:&v97 objects:buf count:16];
        }
        while (v23);
      }

      CFIndex v40 = v95;
      int v41 = [v95 objectForKey:&unk_1EFF7A7E8];
      if (!v41)
      {
        int v41 = objc_alloc_init(EKPersistentChangeStoreInfo);
        [(EKPersistentChangeStoreInfo *)v41 setMinConsumedSequenceNumber:0x7FFFFFFFLL];
      }
      [v95 removeObjectForKey:&unk_1EFF7A7E8];
      uint64_t v1 = v91;
      CFArrayRef v42 = (const __CFArray *)_CalDatabaseCopyOfAllStores(v91);
      if (v42)
      {
        CFArrayRef v43 = v42;
        int v92 = v41;
        CFIndex Count = CFArrayGetCount(v42);
        id v45 = objc_alloc_init(MEMORY[0x1E4F28E78]);
        int v93 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:Count];
        if (Count < 1)
        {
          CFRelease(v43);
        }
        else
        {
          char v46 = 0;
          for (CFIndex j = 0; j != Count; ++j)
          {
            CFArrayGetValueAtIndex(v43, j);
            uint64_t ID = CPRecordGetID();
            uint64_t v49 = [NSNumber numberWithInt:ID];
            int v50 = [v40 objectForKey:v49];

            if (!v50) {
              int v50 = v92;
            }
            if ([(EKPersistentChangeStoreInfo *)v50 minConsumedSequenceNumber] != 0x7FFFFFFF)
            {
              if (v46) {
                [v45 appendString:@" OR "];
              }
              int v51 = [(EKPersistentChangeStoreInfo *)v50 secondMinConsumedSequenceNumber];
              int v52 = [(EKPersistentChangeStoreInfo *)v50 minConsumedSequenceNumber];
              uint64_t v53 = [(EKPersistentChangeStoreInfo *)v50 minConsumedSequenceNumber];
              uint64_t v54 = v53;
              if (v51 <= v52)
              {
                objc_msgSend(v45, "appendFormat:", @"((store_id == %d) AND (sequence_number <= %d))", ID, v53);
              }
              else
              {
                uint64_t v55 = [(EKPersistentChangeStoreInfo *)v50 secondMinConsumedSequenceNumber];
                size_t v56 = [(EKPersistentChangeStoreInfo *)v50 minConsumedClientIdentifier];
                [v45 appendFormat:@"((store_id == %d) AND ((sequence_number <= %d) OR ((sequence_number <= %d) AND (sequence_number IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier == \"%@\"", ID, v54, v55, v56];
              }
              CFIndex v40 = v95;
              uint64_t v57 = [NSNumber numberWithInt:ID];
              [v93 addObject:v57];

              char v46 = 1;
            }
          }
          CFRelease(v43);
          if (v46) {
            [v45 appendString:@" OR "];
          }
        }
        objc_msgSend(v45, "appendString:", @"store_id NOT IN (");
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        id v59 = v93;
        uint64_t v60 = [v59 countByEnumeratingWithState:&v97 objects:buf count:16];
        int v41 = v92;
        if (v60)
        {
          uint64_t v61 = v60;
          char v62 = 0;
          uint64_t v63 = *(void *)v98;
          do
          {
            for (uint64_t k = 0; k != v61; ++k)
            {
              if (*(void *)v98 != v63) {
                objc_enumerationMutation(v59);
              }
              id v65 = *(void **)(*((void *)&v97 + 1) + 8 * k);
              if (v62) {
                [v45 appendString:@","];
              }
              objc_msgSend(v45, "appendFormat:", @"%i", objc_msgSend(v65, "intValue"));
              char v62 = 1;
            }
            uint64_t v61 = [v59 countByEnumeratingWithState:&v97 objects:buf count:16];
          }
          while (v61);
        }

        [v45 appendString:@" OR sequence_number IS NULL"]);
        uint64_t v1 = v91;
        uint64_t v66 = off_1E97ADEC8;
        if (!*(unsigned char *)(v91 + 378)) {
          uint64_t v66 = __classesTrackingChanges;
        }
        CFArrayRef v67 = __classesTrackingChanges[*(unsigned __int8 *)(v91 + 378)];
        if (v67)
        {
          int v68 = v66 + 1;
          do
          {
            int v69 = *((_DWORD *)v67 + 16);
            if (v69 == 26 || v69 == 6)
            {
              if (v92) {
                uint64_t v71 = [(EKPersistentChangeStoreInfo *)v92 minConsumedSequenceNumber];
              }
              else {
                uint64_t v71 = 0x7FFFFFFFLL;
              }
              objc_msgSend(NSString, "stringWithFormat:", @"sequence_number <= %d", v71);
              id v72 = (id)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              id v72 = v45;
            }
            CFArrayRef v73 = v72;
            uint64_t RecordStore = _CalDatabaseGetRecordStore(v91);
            if (CDBLockingAssertionsEnabled) {
              BOOL v75 = RecordStore == 0;
            }
            else {
              BOOL v75 = 1;
            }
            if (!v75)
            {
              double v76 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v76) {
                os_unfair_lock_assert_owner(v76 + 20);
              }
            }
            CPRecordStoreDeleteChangesForClassToSequenceNumberWhere();

            id v77 = *v68++;
            CFArrayRef v67 = v77;
          }
          while (v77);
        }

        CFIndex v40 = v95;
      }
      if (_CalDatabaseClearSuperfluousChanges_onceToken != -1) {
        dispatch_once(&_CalDatabaseClearSuperfluousChanges_onceToken, &__block_literal_global_253);
      }
      CFArrayRef v2 = v90;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v94)
        {
          if (*(void *)(*(void *)v94 + 104))
          {
            int v78 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v78) {
              os_unfair_lock_assert_owner(v78 + 20);
            }
          }
        }
      }
      int v79 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (v79)
      {
        CFArrayRef v80 = v79;
        if (CDBLockingAssertionsEnabled)
        {
          if (*v79)
          {
            uint64_t v81 = **v79;
            if (v81)
            {
              if (*(void *)(v81 + 104))
              {
                CFArrayRef v82 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v82) {
                  os_unfair_lock_assert_owner(v82 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementPerform();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v80)
          {
            uint64_t v83 = **v80;
            if (v83)
            {
              if (*(void *)(v83 + 104))
              {
                id v84 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v84) {
                  os_unfair_lock_assert_owner(v84 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      id v85 = (id)CDBPerfSignpostsHandle;
      id v86 = v85;
      if (v89 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v85))
      {
        *(_WORD *)id v96 = 0;
        _os_signpost_emit_with_name_impl(&dword_1A8E81000, v86, OS_SIGNPOST_INTERVAL_END, spid, "ClearSuperfluousChanges", (const char *)&unk_1A8F8C283, v96, 2u);
      }
    }
    uint64_t v87 = (id)CDBLogHandle;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1A8E81000, v87, OS_LOG_TYPE_DEBUG, "Committing after clearing superfluous changes.", buf, 2u);
    }

    __CalDatabaseCommitTransaction(v1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1631");
  }
  else
  {
    uint64_t v58 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_1A8E81000, v58, OS_LOG_TYPE_ERROR, "Unable to start transaction before clearing superfluous changes.", buf, 2u);
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

void CalDatabaseClearChangedObjectIDsUpToSequenceNumberForClient(os_unfair_lock_s *a1, void *a2, int a3)
{
  BOOL v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseClearChangedObjectIDsUpToSequenceNumberForClient((uint64_t)a1, a2, a3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
}

void _CalDatabaseClearChangedObjectIDsUpToSequenceNumberForClient(uint64_t a1, void *a2, int a3)
{
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = Database == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  uint64_t v11 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginWriteTransaction(a1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1640"))
  {
    long long v12 = (const char *)[a2 UTF8String];
    if (CDBLockingAssertionsEnabled) {
      BOOL v13 = v11 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      if (*(void *)v11)
      {
        if (*(void *)(*(void *)v11 + 104))
        {
          int v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    uint64_t v15 = CPSqliteConnectionStatementForSQL();
    if (v15)
    {
      uint64_t v16 = (uint64_t **)v15;
      sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, v12, -1, 0);
      sqlite3_bind_int((sqlite3_stmt *)v16[1], 2, a3);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v16)
        {
          uint64_t v17 = **v16;
          if (v17)
          {
            if (*(void *)(v17 + 104))
            {
              uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v18) {
                os_unfair_lock_assert_owner(v18 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v16)
        {
          uint64_t v19 = **v16;
          if (v19)
          {
            if (*(void *)(v19 + 104))
            {
              id v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20) {
                os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        uint64_t v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
    int SequenceNumber = CPRecordStoreGetSequenceNumber();
    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(void *)v11)
        {
          if (*(void *)(*(void *)v11 + 104))
          {
            uint64_t v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v24) {
              os_unfair_lock_assert_owner(v24 + 20);
            }
          }
        }
      }
    }
    uint64_t v25 = CPSqliteConnectionStatementForSQL();
    if (v25)
    {
      int v26 = (uint64_t **)v25;
      uint64_t v27 = *(sqlite3_stmt **)(v25 + 8);
      double Current = CFAbsoluteTimeGetCurrent();
      sqlite3_bind_double(v27, 1, Current);
      sqlite3_bind_int((sqlite3_stmt *)v26[1], 2, a3);
      sqlite3_bind_text((sqlite3_stmt *)v26[1], 3, v12, -1, 0);
      sqlite3_bind_int((sqlite3_stmt *)v26[1], 4, SequenceNumber);
      sqlite3_bind_text((sqlite3_stmt *)v26[1], 5, v12, -1, 0);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v26)
        {
          uint64_t v29 = **v26;
          if (v29)
          {
            if (*(void *)(v29 + 104))
            {
              uint32_t v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v30) {
                os_unfair_lock_assert_owner(v30 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v26)
        {
          uint64_t v31 = **v26;
          if (v31)
          {
            if (*(void *)(v31 + 104))
            {
              uint64_t v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v32) {
                os_unfair_lock_assert_owner(v32 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    __CalDatabaseCommitTransaction(a1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1673");
  }
  else
  {
    uint64_t v33 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_ERROR, "Unable to start transaction before cleaing changes", v34, 2u);
    }
  }
}

void _CalDatabaseClearAllChangeHistoryForAllClients(uint64_t a1)
{
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = Database == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (*(void *)(Database + 104))
    {
      BOOL v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6) {
        os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  uint64_t v7 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginWriteTransaction(a1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1689"))
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (*(void *)v7)
      {
        if (*(void *)(*(void *)v7 + 104))
        {
          BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9) {
            os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    uint64_t v10 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (v10)
    {
      uint64_t v11 = v10;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v10)
        {
          uint64_t v12 = **v10;
          if (v12)
          {
            if (*(void *)(v12 + 104))
            {
              BOOL v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v13) {
                os_unfair_lock_assert_owner(v13 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          uint64_t v14 = **v11;
          if (v14)
          {
            if (*(void *)(v14 + 104))
            {
              uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15) {
                os_unfair_lock_assert_owner(v15 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17) {
          os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
    int SequenceNumber = CPRecordStoreGetSequenceNumber();
    if (CDBLockingAssertionsEnabled)
    {
      if (v7)
      {
        if (*(void *)v7)
        {
          if (*(void *)(*(void *)v7 + 104))
          {
            uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19) {
              os_unfair_lock_assert_owner(v19 + 20);
            }
          }
        }
      }
    }
    uint64_t v20 = CPSqliteConnectionStatementForSQL();
    if (v20)
    {
      uint64_t v21 = (uint64_t **)v20;
      uint64_t v22 = *(sqlite3_stmt **)(v20 + 8);
      double Current = CFAbsoluteTimeGetCurrent();
      sqlite3_bind_double(v22, 1, Current);
      sqlite3_bind_int((sqlite3_stmt *)v21[1], 2, SequenceNumber);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v21)
        {
          uint64_t v24 = **v21;
          if (v24)
          {
            if (*(void *)(v24 + 104))
            {
              uint64_t v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v25) {
                os_unfair_lock_assert_owner(v25 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v21)
        {
          uint64_t v26 = **v21;
          if (v26)
          {
            if (*(void *)(v26 + 104))
            {
              uint64_t v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v27) {
                os_unfair_lock_assert_owner(v27 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    int v28 = off_1E97ADEC8;
    if (!*(unsigned char *)(a1 + 378)) {
      int v28 = __classesTrackingChanges;
    }
    if (__classesTrackingChanges[*(unsigned __int8 *)(a1 + 378)])
    {
      uint64_t v29 = v28 + 1;
      do
      {
        if (CDBLockingAssertionsEnabled) {
          BOOL v30 = *(void *)(a1 + 24) == 0;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30)
        {
          uint64_t v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v31) {
            os_unfair_lock_assert_owner(v31 + 20);
          }
        }
        CPRecordStoreDeleteChangesForClassToSequenceNumberWhere();
      }
      while (*v29++);
    }
    __CalDatabaseCommitTransaction(a1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1719");
  }
  else
  {
    uint64_t v33 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1A8E81000, v33, OS_LOG_TYPE_ERROR, "Unable to start transaction before cleaing change history", v34, 2u);
    }
  }
}

void CalDatabaseClearAllChangeHistoryForAllClients(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseClearAllChangeHistoryForAllClients((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

void CalDatabaseEnumerateUnconsumedObjectChangesForClient(os_unfair_lock_s *a1, void *a2, int a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a4;
  uint64_t v29 = 0;
  BOOL v30 = &v29;
  uint64_t v31 = 0x3032000000;
  uint64_t v32 = __Block_byref_object_copy__4;
  uint64_t v33 = __Block_byref_object_dispose__4;
  id v34 = 0;
  os_unfair_lock_lock(a1 + 20);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __CalDatabaseEnumerateUnconsumedObjectChangesForClient_block_invoke;
  v23[3] = &unk_1E5D6D3F0;
  uint64_t v24 = @"changedIDs";
  uint64_t v25 = @"changeTypes";
  uint64_t v26 = @"changeTableIDs";
  uint64_t v27 = @"sequenceNumbers";
  int v28 = &v29;
  _CalDatabaseEnumerateUnconsumedObjectChangesForClient((uint64_t)a1, a2, a3, 0, v23);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(a1 + 20);
  }
  os_unfair_lock_unlock(a1 + 20);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  obCFIndex j = (id)v30[5];
  uint64_t v8 = [obj countByEnumeratingWithState:&v19 objects:v35 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        uint64_t v12 = [v11 integerValue];
        BOOL v13 = [(id)v30[5] objectForKeyedSubscript:v11];
        uint64_t v14 = [v13 objectForKeyedSubscript:@"changedIDs"];

        uint64_t v15 = [v13 objectForKeyedSubscript:@"changeTypes"];

        uint64_t v16 = [v13 objectForKeyedSubscript:@"changeTableIDs"];

        uint64_t v17 = [v13 objectForKeyedSubscript:@"sequenceNumbers"];

        v7[2](v7, v12, v14, v15, v16, v17);
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v19 objects:v35 count:16];
    }
    while (v8);
  }

  _Block_object_dispose(&v29, 8);
}

void sub_1A8F4DE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4 0) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void _CalDatabaseEnumerateUnconsumedObjectChangesForClient(uint64_t a1, void *a2, int a3, char a4, void *a5)
{
  id v9 = a5;
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v13 = Database == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14) {
        os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  uint64_t v15 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginReadTransaction(a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1743"))
  {
    *(_DWORD *)int buf = 0;
    if (v15)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(void *)v15)
        {
          if (*(void *)(*(void *)v15 + 104))
          {
            uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
    }
    uint64_t v17 = CPSqliteConnectionStatementForSQL();
    if (v17)
    {
      uint64_t v18 = (uint64_t **)v17;
      sqlite3_bind_text(*(sqlite3_stmt **)(v17 + 8), 1, (const char *)[a2 UTF8String], -1, 0);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v18)
        {
          uint64_t v19 = **v18;
          if (v19)
          {
            if (*(void *)(v19 + 104))
            {
              long long v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20) {
                os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
      }
      int v21 = CPSqliteStatementIntegerResult();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v18)
        {
          uint64_t v22 = **v18;
          if (v22)
          {
            if (*(void *)(v22 + 104))
            {
              uint64_t v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v23) {
                os_unfair_lock_assert_owner(v23 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    else
    {
      int v21 = 0;
    }
    if (a3 == -1)
    {
      *(_DWORD *)int buf = 0;
      if (_CalDatabaseGetLatestConsumedSequenceNumberForClient(v15, a2, buf)) {
        a3 = -1;
      }
      else {
        a3 = *(_DWORD *)buf;
      }
    }
    uint64_t v25 = @"sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)";
    uint64_t v26 = @"sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)";
    if (a4)
    {
      int v27 = -1;
      if (v21)
      {
LABEL_44:
        [(__CFString *)v26 stringByAppendingString:@" AND store_id = ?"];
        uint64_t v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
        uint64_t v28 = [(__CFString *)v25 stringByAppendingString:@" AND store_id = ?"];
        uint64_t v29 = [(__CFString *)v25 stringByAppendingString:@" AND record = ?"];
        uint64_t v25 = (__CFString *)v28;
LABEL_49:
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 3221225472;
        v33[2] = ___CalDatabaseEnumerateUnconsumedObjectChangesForClient_block_invoke;
        v33[3] = &unk_1E5D6D468;
        id v34 = v26;
        CFArrayRef v35 = v25;
        int v39 = v21;
        id v36 = v29;
        uint64_t v38 = a1;
        id v37 = v9;
        id v30 = v29;
        uint64_t v31 = v25;
        uint64_t v32 = v26;
        _prepareBindingBlocksForFindingChangesOfEachEntityType(a1, a2, a3, v27, v33);
        __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1812");

        goto LABEL_50;
      }
    }
    else
    {
      int v27 = *(_DWORD *)(a1 + 360);
      if (v27 >= 0)
      {
        uint64_t v26 = @"sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?";
        uint64_t v25 = @"sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?";
      }
      if (v21) {
        goto LABEL_44;
      }
    }
    uint64_t v29 = v25;
    goto LABEL_49;
  }
  uint64_t v24 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_1A8E81000, v24, OS_LOG_TYPE_ERROR, "Couldn't start transaction to enumerate unconsumed changes.", buf, 2u);
  }
LABEL_50:
}

void __CalDatabaseEnumerateUnconsumedObjectChangesForClient_block_invoke(uint64_t a1, uint64_t a2, CFArrayRef theArray, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  if (theArray && CFArrayGetCount(theArray) >= 1)
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
    {
      uint64_t v12 = objc_opt_new();
      uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 4 0) = v12;
    }
    uint64_t v18 = *(void *)(a1 + 32);
    long long v19 = *(_OWORD *)(a1 + 40);
    v21[0] = theArray;
    v21[1] = a4;
    uint64_t v20 = *(void *)(a1 + 56);
    v21[2] = a5;
    v21[3] = a6;
    uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:&v18 count:4];
    uint64_t v16 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    uint64_t v17 = [NSNumber numberWithInt:a2];
    [v16 setObject:v15 forKeyedSubscript:v17];
  }
}

void CalDatabaseClearIndividualChangeRowIDsForClient(uint64_t a1, void *a2, const __CFArray *a3, int a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (CDBLockingAssertionsEnabled) {
    BOOL v9 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v12 = Database == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v13) {
        os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  uint64_t v14 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!__CalDatabaseBeginWriteTransaction(a1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1893"))
  {
    NSLog(&cfstr_Caldatabaseper.isa, 0);
    goto LABEL_86;
  }
  id value = a2;
  uint64_t v48 = (char *)[value cStringUsingEncoding:4];
  if (a4 <= 99)
  {
    uint64_t v15 = &kCalAlarmClass;
    switch(a4)
    {
      case 1:
        uint64_t v15 = &kCalCalendarClass;
        goto LABEL_33;
      case 2:
      case 3:
        goto LABEL_24;
      case 4:
        goto LABEL_33;
      case 5:
        uint64_t v15 = &kCalRecurrenceClass;
        goto LABEL_33;
      case 6:
        uint64_t v15 = &kCalStoreClass;
        goto LABEL_33;
      case 7:
      case 8:
        goto LABEL_23;
      case 9:
        uint64_t v15 = &kCalEventActionClass;
        goto LABEL_33;
      case 10:
        uint64_t v15 = &kCalExceptionDateClass;
        goto LABEL_33;
      case 11:
        uint64_t v15 = &kCalAttachmentClass;
        goto LABEL_33;
      case 15:
        uint64_t v15 = &kCalShareeClass;
        goto LABEL_33;
      case 16:
      case 17:
      case 19:
        goto LABEL_22;
      case 21:
        uint64_t v15 = &kCalContactClass;
        goto LABEL_33;
      case 26:
        uint64_t v15 = &kCalAuxDatabaseClass;
        goto LABEL_33;
      default:
        goto LABEL_89;
    }
  }
  switch(a4)
  {
    case 'd':
LABEL_23:
      uint64_t v15 = &kCalParticipantClass;
      goto LABEL_33;
    case 'e':
LABEL_24:
      uint64_t v15 = &kCalEventClass;
LABEL_33:
      uint64_t v16 = [NSString stringWithUTF8String:*v15];
      uint64_t v17 = [NSString stringWithFormat:@"SELECT COUNT(*) FROM %@Changes WHERE ROWID = ? AND sequence_number > ?", v16];
      CFArrayRef v43 = (void *)v16;
      uint64_t v18 = [NSString stringWithFormat:@"INSERT INTO ClientCursorConsumed (client_identifier, consumed_entity_class, consumed_entity_id, consumed_change_id, sequence_number) VALUES (?, ?, (SELECT record FROM %@Changes WHERE ROWID = ? LIMIT 1), ?, (SELECT sequence_number FROM %@Changes WHERE ROWID = ?))", v16, v16];
      if (CDBLockingAssertionsEnabled)
      {
        if (v14)
        {
          if (*(void *)v14)
          {
            if (*(void *)(*(void *)v14 + 104))
            {
              long long v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v19) {
                os_unfair_lock_assert_owner(v19 + 20);
              }
            }
          }
        }
      }
      int v47 = a4;
      uint64_t v44 = v8;
      CFArrayRef v42 = (void *)v17;
      uint64_t v20 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (v14)
        {
          if (*(void *)v14)
          {
            if (*(void *)(*(void *)v14 + 104))
            {
              int v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v21) {
                os_unfair_lock_assert_owner(v21 + 20);
              }
            }
          }
        }
      }
      id v45 = (void *)v18;
      uint64_t v22 = CPSqliteConnectionStatementForSQL();
      int v49 = -2;
      if (v20)
      {
        uint64_t v23 = (uint64_t **)v22;
        if (v22)
        {
          if (a3)
          {
            CFIndex Count = CFArrayGetCount(a3);
            _CalDatabaseGetLatestConsumedSequenceNumberForClient(v14, value, &v49);
            if (Count >= 1)
            {
              CFIndex v25 = 0;
              int v26 = v49;
              do
              {
                int ValueAtIndex = CFArrayGetValueAtIndex(a3, v25);
                sqlite3_bind_int((sqlite3_stmt *)v20[1], 1, ValueAtIndex);
                sqlite3_bind_int((sqlite3_stmt *)v20[1], 2, v26);
                *(_DWORD *)int buf = 0;
                if (CDBLockingAssertionsEnabled)
                {
                  if (*v20)
                  {
                    uint64_t v28 = **v20;
                    if (v28)
                    {
                      if (*(void *)(v28 + 104))
                      {
                        uint64_t v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v29) {
                          os_unfair_lock_assert_owner(v29 + 20);
                        }
                      }
                    }
                  }
                }
                int v30 = CPSqliteStatementIntegerResult();
                if (CDBLockingAssertionsEnabled)
                {
                  if (*v20)
                  {
                    uint64_t v31 = **v20;
                    if (v31)
                    {
                      if (*(void *)(v31 + 104))
                      {
                        uint64_t v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v32) {
                          os_unfair_lock_assert_owner(v32 + 20);
                        }
                      }
                    }
                  }
                }
                CPSqliteStatementReset();
                if (v30 >= 1)
                {
                  sqlite3_bind_text((sqlite3_stmt *)v23[1], 1, v48, -1, 0);
                  sqlite3_bind_int((sqlite3_stmt *)v23[1], 2, v47);
                  sqlite3_bind_int((sqlite3_stmt *)v23[1], 3, ValueAtIndex);
                  sqlite3_bind_int((sqlite3_stmt *)v23[1], 4, ValueAtIndex);
                  sqlite3_bind_int((sqlite3_stmt *)v23[1], 5, ValueAtIndex);
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v23)
                    {
                      uint64_t v33 = **v23;
                      if (v33)
                      {
                        if (*(void *)(v33 + 104))
                        {
                          id v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v34) {
                            os_unfair_lock_assert_owner(v34 + 20);
                          }
                        }
                      }
                    }
                  }
                  CPSqliteStatementPerform();
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v23)
                    {
                      uint64_t v35 = **v23;
                      if (v35)
                      {
                        if (*(void *)(v35 + 104))
                        {
                          id v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v36) {
                            os_unfair_lock_assert_owner(v36 + 20);
                          }
                        }
                      }
                    }
                  }
                  CPSqliteStatementReset();
                }
                ++v25;
              }
              while (Count != v25);
            }
          }
          else
          {
            _CalDatabaseGetLatestConsumedSequenceNumberForClient(v14, value, &v49);
          }
        }
      }
      if (__CalDatabaseCommitTransaction(a1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1937"))
      {
        CFMutableDictionaryRef Mutable = *(__CFSet **)(a1 + 280);
        uint64_t v38 = v43;
        uint64_t v8 = v44;
        int v39 = v42;
        if (!Mutable)
        {
          CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
          *(void *)(a1 + 28 0) = Mutable;
        }
        CFSetAddValue(Mutable, value);
      }
      else
      {
        CFIndex v40 = CDBLogHandle;
        uint64_t v38 = v43;
        uint64_t v8 = v44;
        int v39 = v42;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 67109120;
          int v51 = 0;
          _os_log_impl(&dword_1A8E81000, v40, OS_LOG_TYPE_ERROR, "CalDatabasePersistentChangeTracking: unable to commit transaction (error %d)", buf, 8u);
        }
      }

      goto LABEL_86;
    case 'f':
LABEL_22:
      uint64_t v15 = &kCalNotificationClass;
      goto LABEL_33;
  }
LABEL_89:
  int v41 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 67109120;
    int v51 = a4;
    _os_log_impl(&dword_1A8E81000, v41, OS_LOG_TYPE_ERROR, "No class for entity type: %d", buf, 8u);
  }
LABEL_86:
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v8);
  }
  os_unfair_lock_unlock(v8);
}

void _CalDatabaseTrimConsumedSequences(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 280))
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v2 = *(void *)(a1 + 24) == 0;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    id v5 = *(id *)(a1 + 280);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    obCFIndex j = v5;
    uint64_t v6 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
    if (v6)
    {
      uint64_t v21 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v24 != v21) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          if (CDBLockingAssertionsEnabled) {
            BOOL v9 = Database == 0;
          }
          else {
            BOOL v9 = 1;
          }
          if (!v9)
          {
            if (*(void *)(Database + 104))
            {
              BOOL v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10) {
                os_unfair_lock_assert_owner(v10 + 20);
              }
            }
          }
          uint64_t v11 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
          int v22 = -2;
          _CalDatabaseGetLatestConsumedSequenceNumberForClient(v11, v8, &v22);
          int v12 = v22;
          uint64_t v27 = 0;
          uint64_t v28 = &v27;
          uint64_t v29 = 0x2020000000;
          int v30 = 0x7FFFFFFF;
          int SequenceNumber = *(_DWORD *)(a1 + 360);
          if (SequenceNumber < 0)
          {
            uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
            if (CDBLockingAssertionsEnabled) {
              BOOL v15 = RecordStore == 0;
            }
            else {
              BOOL v15 = 1;
            }
            if (!v15)
            {
              uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16) {
                os_unfair_lock_assert_owner(v16 + 20);
              }
            }
            int SequenceNumber = CPRecordStoreGetSequenceNumber();
          }
          *(void *)int buf = MEMORY[0x1E4F143A8];
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = ___CalDatabaseGetLastSequenceNumberWithAllChangesConsumed_block_invoke;
          uint64_t v33 = &unk_1E5D6D490;
          id v34 = &v27;
          _CalDatabaseEnumerateUnconsumedObjectChangesForClient(a1, v8, v12, 1, buf);
          int v17 = *((_DWORD *)v28 + 6);
          if (v17 != 0x7FFFFFFF) {
            int SequenceNumber = v17 - 1;
          }
          _Block_object_dispose(&v27, 8);
          uint64_t v18 = CDBLogHandle;
          BOOL v19 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
          if (SequenceNumber <= v12)
          {
            if (v19)
            {
              *(_DWORD *)int buf = 138412546;
              *(void *)&uint8_t buf[4] = v8;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl(&dword_1A8E81000, v18, OS_LOG_TYPE_DEBUG, "Client cursor for %@ is still %i.", buf, 0x12u);
            }
          }
          else
          {
            if (v19)
            {
              *(_DWORD *)int buf = 138412802;
              *(void *)&uint8_t buf[4] = v8;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = SequenceNumber;
              _os_log_impl(&dword_1A8E81000, v18, OS_LOG_TYPE_DEBUG, "Moving client cursor for %@ forward from %i to %i because all changes in those sequences have been individually consumed.", buf, 0x18u);
            }
            _CalDatabaseClearChangedObjectIDsUpToSequenceNumberForClient(a1, v8, SequenceNumber);
          }
        }
        uint64_t v6 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
      }
      while (v6);
    }

    CFRelease(*(CFTypeRef *)(a1 + 280));
    *(void *)(a1 + 28 0) = 0;
  }
}

void sub_1A8F4EDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef CalDatabaseCopyAllRegisteredClientIdentifiersForPersistentChangeTracking(uint64_t a1)
{
  BOOL v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t v3 = *(void *)(a1 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Database == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  uint64_t v9 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (*(void *)v9)
    {
      if (*(void *)(*(void *)v9 + 104))
      {
        int v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12) {
          os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  uint64_t v13 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (v13)
  {
    uint64_t v14 = v13;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v15 = **v13;
        if (v15)
        {
          if (*(void *)(v15 + 104))
          {
            uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v14)
      {
        uint64_t v17 = **v14;
        if (v17)
        {
          if (*(void *)(v17 + 104))
          {
            uint64_t v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18) {
              os_unfair_lock_assert_owner(v18 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  CFTypeRef v19 = CFRetain(v10);

  return v19;
}

uint64_t __ClientRowHandler(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v4)
  {
    id v5 = [NSString stringWithUTF8String:v4];
    [v3 addObject:v5];
  }
  else
  {
    uint64_t v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "__ClientRowHandler - clientIdentifier is nil", v8, 2u);
    }
  }

  return 0;
}

CFTypeRef CalDatabaseCopyRegisteredClientIdentifiersForPersistentChangeTrackingInStore(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  int ID = CPRecordGetID();
  CFTypeRef v4 = _CalDatabaseCopyRegisteredClientIdentifiersForPersistentChangeTrackingWithStoreUID((uint64_t)a1, ID);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

CFTypeRef _CalDatabaseCopyRegisteredClientIdentifiersForPersistentChangeTrackingWithStoreUID(uint64_t a1, int a2)
{
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = Database == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (*(void *)(Database + 104))
    {
      BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7) {
        os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  uint64_t v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*(void *)v8)
    {
      if (*(void *)(*(void *)v8 + 104))
      {
        BOOL v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
  }
  uint64_t v12 = CPSqliteConnectionStatementForSQL();
  if (v12)
  {
    uint64_t v13 = (uint64_t **)v12;
    sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 1, a2);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v14 = **v13;
        if (v14)
        {
          if (*(void *)(v14 + 104))
          {
            uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15) {
              os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        uint64_t v16 = **v13;
        if (v16)
        {
          if (*(void *)(v16 + 104))
          {
            uint64_t v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17) {
              os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  CFTypeRef v18 = CFRetain(v9);

  return v18;
}

uint64_t CalDatabaseGetStoreForPersistentChangeTrackingClientIdentifier(uint64_t a1, void *a2)
{
  CFTypeRef v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  id v5 = (const char *)[a2 UTF8String];
  uint64_t v6 = *(void *)(a1 + 24);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = Database == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*(void *)(Database + 104))
    {
      BOOL v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  uint64_t v12 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*(void *)v12)
    {
      if (*(void *)(*(void *)v12 + 104))
      {
        uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  uint64_t v15 = CPSqliteConnectionStatementForSQL();
  if (v15)
  {
    uint64_t v16 = (uint64_t **)v15;
    sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, v5, -1, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v16)
      {
        uint64_t v17 = **v16;
        if (v17)
        {
          if (*(void *)(v17 + 104))
          {
            CFTypeRef v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18) {
              os_unfair_lock_assert_owner(v18 + 20);
            }
          }
        }
      }
    }
    uint64_t v19 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v16)
      {
        uint64_t v20 = **v16;
        if (v20)
        {
          if (*(void *)(v20 + 104))
          {
            uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21) {
              os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    uint64_t v19 = 0xFFFFFFFFLL;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v19;
}

void CalRemoveClientForPersistentChangeTracking(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFTypeRef v4 = (os_unfair_lock_s *)(a1 + 80);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    if (CDBLockingAssertionsEnabled) {
      BOOL v5 = *(void *)(a1 + 24) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled) {
      BOOL v8 = Database == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (*(void *)(Database + 104))
      {
        id v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
    uint64_t v10 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (CDBLockingAssertionsEnabled) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      if (*(void *)v10)
      {
        if (*(void *)(*(void *)v10 + 104))
        {
          uint64_t v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12) {
            os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    uint64_t v13 = CPSqliteConnectionStatementForSQL();
    if (v13)
    {
      uint64_t v14 = (uint64_t **)v13;
      sqlite3_bind_text(*(sqlite3_stmt **)(v13 + 8), 1, (const char *)[a2 cStringUsingEncoding:4], -1, 0);
      _CalDatabasePerformStatementWithWriteLock(a1, (uint64_t)v14);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v14)
        {
          uint64_t v15 = **v14;
          if (v15)
          {
            if (*(void *)(v15 + 104))
            {
              uint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16) {
                os_unfair_lock_assert_owner(v16 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v4);
    }
    os_unfair_lock_unlock(v4);
  }
}

void CalDatabasePurgeIdlePersistentChangeTrackingClients(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = *(void *)(a1 + 24) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled) {
    BOOL v10 = Database == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*(void *)(Database + 104))
    {
      BOOL v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11) {
        os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  uint64_t v12 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  uint64_t v13 = [MEMORY[0x1E4F1CA48] array];
  if (CDBLockingAssertionsEnabled) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (*(void *)v12)
    {
      if (*(void *)(*(void *)v12 + 104))
      {
        uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15) {
          os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
  }
  uint64_t v16 = CPSqliteConnectionStatementForSQL();
  if (v16)
  {
    uint64_t v17 = (uint64_t **)v16;
    sqlite3_bind_double(*(sqlite3_stmt **)(v16 + 8), 1, a3);
    sqlite3_bind_int((sqlite3_stmt *)v17[1], 2, a2);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v17)
      {
        uint64_t v18 = **v17;
        if (v18)
        {
          if (*(void *)(v18 + 104))
          {
            uint64_t v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19) {
              os_unfair_lock_assert_owner(v19 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v17)
      {
        uint64_t v20 = **v17;
        if (v20)
        {
          if (*(void *)(v20 + 104))
          {
            uint64_t v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21) {
              os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (![v13 count]) {
    goto LABEL_58;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (v12)
    {
      if (*(void *)v12)
      {
        if (*(void *)(*(void *)v12 + 104))
        {
          int v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v22) {
            os_unfair_lock_assert_owner(v22 + 20);
          }
        }
      }
    }
  }
  uint64_t v23 = CPSqliteConnectionStatementForSQL();
  if (v23)
  {
    uint64_t v24 = v23;
    id v36 = v13;
    id v37 = v6;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v25 = v13;
    uint64_t v26 = [v25 countByEnumeratingWithState:&v38 objects:v42 count:16];
    BOOL v35 = v26 != 0;
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v27; ++i)
        {
          if (*(void *)v39 != v28) {
            objc_enumerationMutation(v25);
          }
          int v30 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          NSLog(&cfstr_PurgingChangeT.isa, v30, *(void *)&a3, a2);
          sqlite3_bind_text(*(sqlite3_stmt **)(v24 + 8), 1, (const char *)[v30 cStringUsingEncoding:4], -1, 0);
          _CalDatabasePerformStatementWithWriteLock(a1, v24);
          if (CDBLockingAssertionsEnabled)
          {
            if (*(void *)v24)
            {
              uint64_t v31 = **(void **)v24;
              if (v31)
              {
                if (*(void *)(v31 + 104))
                {
                  uint64_t v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v32) {
                    os_unfair_lock_assert_owner(v32 + 20);
                  }
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        uint64_t v27 = [v25 countByEnumeratingWithState:&v38 objects:v42 count:16];
      }
      while (v27);
    }

    uint64_t v13 = v36;
    uint64_t v6 = v37;
    BOOL v33 = v35;
  }
  else
  {
LABEL_58:
    BOOL v33 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v6);
  }
  os_unfair_lock_unlock(v6);
  CalDatabaseClearSuperfluousChanges((os_unfair_lock_s *)a1);
  if (v33)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"CalDatabaseIdleChangeTrackingClientWasPurgedNotification", 0, 0, 1u);
  }
}

uint64_t __UnusedClientRowHandler(uint64_t a1, void *a2)
{
  BOOL v2 = *(sqlite3_stmt **)(a1 + 8);
  id v3 = a2;
  CFTypeRef v4 = objc_msgSend(NSString, "stringWithUTF8String:", sqlite3_column_text(v2, 0));
  [v3 addObject:v4];

  return 0;
}

uint64_t CalDatabaseCountPersistentChangeRecords(uint64_t a1)
{
  BOOL v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  CFTypeRef v4 = off_1E97ADEC8;
  if (!*(unsigned char *)(a1 + 378)) {
    CFTypeRef v4 = __classesTrackingChanges;
  }
  if (__classesTrackingChanges[*(unsigned __int8 *)(a1 + 378)])
  {
    uint64_t v5 = RecordStore;
    uint64_t v6 = v4 + 1;
    do
    {
      if (CDBLockingAssertionsEnabled) {
        BOOL v7 = v5 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7)
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
      CPRecordStoreGetChangesForClass();
    }
    while (*v6++);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return 0;
}

uint64_t CalDatabaseFreezeChangeLog(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t SequenceNumber = CPRecordStoreGetSequenceNumber();
  a1[90]._os_unfair_lock_opaque = SequenceNumber;
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return SequenceNumber;
}

void CalDatabaseUnfreezeChangeLog(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  a1[90]._os_unfair_lock_opaque = -1;
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
}

void _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(uint64_t a1, id *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 360);
  if ((v2 & 0x80000000) == 0)
  {
    if (*a2)
    {
      uint64_t v4 = objc_msgSend(*a2, "stringByAppendingFormat:", @"AND sequence_number <= %i", v2);
      CFRelease(*a2);
    }
    else
    {
      uint64_t v4 = objc_msgSend(NSString, "stringWithFormat:", @"sequence_number <= %i", v2);
    }
    *a2 = (id)v4;
  }
}

uint64_t countRow(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(int *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (*(void *)a2 >= v2) {
    return 0;
  }
  *(_DWORD *)(a2 + 12) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  return 1;
}

uint64_t ___prepareBindingBlocksForFindingChangesOfEachEntityType_block_invoke(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 40));
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 2, *(_DWORD *)(a1 + 44));
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 3, *(const char **)(a1 + 32), -1, 0);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 4, *(const char **)(a1 + 32), -1, 0);
  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 5, *(_DWORD *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 48);
  if ((v5 & 0x80000000) == 0)
  {
    uint64_t v6 = *(sqlite3_stmt **)(a2 + 8);
    return sqlite3_bind_int(v6, 6, v5);
  }
  return result;
}

uint64_t ___prepareBindingBlocksForFindingChangesOfEachEntityType_block_invoke_2(uint64_t a1, uint64_t a2)
{
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 40));
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 2, *(const char **)(a1 + 32), -1, 0);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 3, *(const char **)(a1 + 32), -1, 0);
  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 4, *(_DWORD *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 48);
  if ((v5 & 0x80000000) == 0)
  {
    uint64_t v6 = *(sqlite3_stmt **)(a2 + 8);
    return sqlite3_bind_int(v6, 5, v5);
  }
  return result;
}

void ___buildDictionariesWithChangeTablePropertiesForEntityType_block_invoke()
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = objc_opt_new();
  unint64_t v2 = __classesTrackingChanges[0];
  if (__classesTrackingChanges[0])
  {
    uint64_t v20 = v22;
    uint64_t v3 = 1;
    *(void *)&long long v1 = 134218752;
    long long v19 = v1;
    do
    {
      uint64_t v4 = objc_opt_new();
      int v5 = *((_DWORD *)v2 + 18);
      if (v5 >= 1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 24;
        do
        {
          if ((v2[10][v7] & 0xA) != 0)
          {
            [v4 addIndex:v6];
            int v5 = *((_DWORD *)v2 + 18);
          }
          ++v6;
          v7 += 40;
        }
        while (v6 < v5);
      }
      int v8 = objc_msgSend(v4, "count", v19, v20);
      id v9 = malloc_type_calloc(v8, 8uLL, 0x10040436913F5uLL);
      BOOL v10 = objc_opt_new();
      BOOL v11 = malloc_type_calloc(v8, 4uLL, 0x100004052888210uLL);
      uint64_t v12 = malloc_type_calloc(1uLL, 0x20uLL, 0x109004012E890EEuLL);
      uint64_t v13 = v12;
      if (v12 && v9 && v10 && v11)
      {
        *(_DWORD *)uint64_t v12 = v8;
        *((void *)v12 + 1) = v9;
        objc_storeStrong((id *)v12 + 2, v10);
        uint64_t v14 = MEMORY[0x1E4F143A8];
        v13[3] = v11;
        *(void *)int buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x2020000000;
        LODWORD(v29) = 0;
        v21[0] = v14;
        v21[1] = 3221225472;
        v22[0] = ___buildDictionariesWithChangeTablePropertiesForEntityType_block_invoke_208;
        v22[1] = &unk_1E5D6D440;
        uint64_t v24 = buf;
        id v25 = v9;
        uint64_t v26 = v2;
        id v23 = v10;
        uint64_t v27 = v11;
        [v4 enumerateIndexesUsingBlock:v21];
        uint64_t v15 = [MEMORY[0x1E4F29238] valueWithPointer:v13];
        uint64_t v16 = [MEMORY[0x1E4F29238] valueWithPointer:v2];
        [v0 setObject:v15 forKeyedSubscript:v16];

        _Block_object_dispose(buf, 8);
      }
      else
      {
        uint64_t v17 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = v19;
          *(void *)&uint8_t buf[4] = v13;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v9;
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v29 = v10;
          __int16 v30 = 2048;
          uint64_t v31 = v11;
          _os_log_impl(&dword_1A8E81000, v17, OS_LOG_TYPE_ERROR, "Failed to allocate memory for changePropertiesByRecord mapping desc: %p, cstring: %p, nsstrings: %p, types: %p", buf, 0x2Au);
        }
        if (v13) {
          free(v13);
        }
        if (v9) {
          free(v9);
        }
        if (v11) {
          free(v11);
        }
      }

      unint64_t v2 = __classesTrackingChanges[v3++];
    }
    while (v2);
  }
  uint64_t v18 = (void *)_buildDictionariesWithChangeTablePropertiesForEntityType_changePropertiesByRecord;
  _buildDictionariesWithChangeTablePropertiesForEntityType_changePropertiesByRecord = (uint64_t)v0;
}

void sub_1A8F50404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___buildDictionariesWithChangeTablePropertiesForEntityType_block_invoke_208(void *a1, uint64_t a2)
{
  uint64_t v4 = 5 * a2;
  *(void *)(a1[6] + 8 * *(int *)(*(void *)(a1[5] + 8) + 24)) = *(void *)(*(void *)(a1[7] + 80) + 40 * a2);
  int v5 = (void *)a1[4];
  uint64_t v6 = [NSString stringWithUTF8String:*(void *)(a1[6] + 8 * *(int *)(*(void *)(a1[5] + 8) + 24))];
  [v5 addObject:v6];

  uint64_t v7 = *(void *)(a1[7] + 80);
  if ((*(unsigned char *)(v7 + 8 * v4 + 24) & 8) != 0) {
    int v8 = 1;
  }
  else {
    int v8 = *(_DWORD *)(v7 + 40 * a2 + 8);
  }
  *(_DWORD *)(a1[8] + 4 * (int)(*(_DWORD *)(*(void *)(a1[5] + 8) + 24))++) = v8;
}

uint64_t __StoreIDRowHandler(uint64_t a1, void *a2)
{
  unint64_t v2 = *(sqlite3_stmt **)(a1 + 8);
  id v3 = a2;
  uint64_t v4 = objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(v2, 0));
  [v3 addObject:v4];

  return 0;
}

uint64_t __RowInfoRowHandler(uint64_t a1, void *a2)
{
  id v3 = *(sqlite3_stmt **)(a1 + 8);
  id v4 = a2;
  int v5 = objc_msgSend(NSString, "stringWithUTF8String:", sqlite3_column_text(v3, 0));
  uint64_t v6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  uint64_t v7 = objc_opt_new();
  [v7 setClientIdentifier:v5];
  [v7 setConsumedSequenceNumber:v6];
  [v4 addObject:v7];

  return 0;
}

void _CalCategoryLinkPrepareForSave(const void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  uint64_t v4 = Property;
  if (Property) {
    CalRelationOwnerWillSave(Property);
  }
  if (!_CalCategoryLinkGetCategory((uint64_t)a1))
  {
    int v5 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v5;
      int v8 = 134218242;
      uint64_t v9 = v4;
      __int16 v10 = 2112;
      CFTypeRef DebugDescription = _CalEntityGetDebugDescription(a1);
      _os_log_impl(&dword_1A8E81000, v6, OS_LOG_TYPE_ERROR, "saving a category link with NULL category: relation=%p, record=%@", (uint8_t *)&v8, 0x16u);
    }
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    _CalDatabaseIntegrityError(DatabaseForRecord, @"Category link without category");
  }
}

void CalCategoryLinkInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalCategoryLinkClass, (const char **)&kCalCategoryLinkIndexes, 0);
  CalMigrationCreateTriggers(a2, (const char **)&kCalCategoryLinkClass, (const char **)&kCalCategoryLinkTriggers);
}

void CalCategoryLinkMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 > 58)
  {
    if (a3 <= 0x3E99) {
      CalMigrateTableFull(a2, (const char **)&kCalCategoryLinkClass, 0, (const char **)&kCalCategoryLinkUpgradeInfo, 0, (const char **)&kCalCategoryLinkIndexes, 0, (const char **)&kCalCategoryLinkTriggers, a3);
    }
  }
  else
  {
    CalCategoryLinkInitializeTables(a1, a2);
  }
}

const void *CalDatabaseCreateCategoryLink(os_unfair_lock_s *a1)
{
  unint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CategoryLinkWithOwnerAndCategory = _CalDatabaseCreateCategoryLinkWithOwnerAndCategory((uint64_t)a1, 0, 0);
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity((uint64_t)a1, 13);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = CategoryLinkWithOwnerAndCategory == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return CategoryLinkWithOwnerAndCategory;
}

const void *_CalDatabaseCreateCategoryLinkWithOwnerAndCategory(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 13);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v6);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v10 = v6 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      if (CPRecordGetStore())
      {
        BOOL v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11) {
          os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    uint64_t Property = (void *)CPRecordGetProperty();
    if (Property) {
      CalRelationSetRelatedObject(Property, a2);
    }
  }
  if (a3)
  {
    if (CDBLockingAssertionsEnabled) {
      BOOL v13 = v6 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      if (CPRecordGetStore())
      {
        uint64_t v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14) {
          os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    uint64_t v15 = (void *)CPRecordGetProperty();
    if (v15) {
      CalRelationSetRelatedObject(v15, a3);
    }
  }
  return v6;
}

uint64_t _CalCategoryLinkRemove(const void *a1)
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalCategoryLinkRemove(const void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCategoryLinkGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef _CalCategoryLinkGetOwner(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

CFTypeRef CalCategoryLinkCopyCalendarItem(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalCategoryLinkGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCategoryLinkSetCalendarItem(uint64_t a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalRelationSetRelatedObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalCategoryLinkGetCategory(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

CFTypeRef CalCategoryLinkCopyCategory(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Category = _CalCategoryLinkGetCategory(a1);
  CFTypeRef v4 = Category;
  if (Category) {
    CFRetain(Category);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCategoryLinkSetCategory(uint64_t a1, const void *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = (void *)CPRecordGetProperty();
  if (Property) {
    CalRelationSetRelatedObject(Property, a2);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCategoryLinkSetGroup(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

void _CalDatabaseIntegrityError(uint64_t a1, void *a2)
{
  id v3 = a2;
  _CalDatabaseGetRecordStore(a1);
  uint64_t Database = CPRecordStoreGetDatabase();
  BOOL v5 = _CalDatabaseGetErrorsForDatabase(Database);
  if (!v5)
  {
    id v8 = (id)objc_opt_new();
    _CalDatabaseSetErrorsForDatabase(Database, v8);
    BOOL v5 = v8;
  }
  id v9 = v5;
  uint64_t v6 = [v5 errors];
  [v6 addObject:v3];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 320));
  [v9 setDelegate:WeakRetained];
}

id _CalDatabaseGetErrorsForDatabase(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  unint64_t v2 = [(id)table objectForKey:a1];
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v2;
}

void _CalDatabaseSetErrorsForDatabase(uint64_t a1, void *a2)
{
  id v7 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  id v3 = v7;
  CFTypeRef v4 = (void *)table;
  if (v7)
  {
    if (!table)
    {
      uint64_t v5 = [objc_alloc(MEMORY[0x1E4F28E10]) initWithKeyOptions:258 valueOptions:0 capacity:1];
      uint64_t v6 = (void *)table;
      table = v5;

      id v3 = v7;
      CFTypeRef v4 = (void *)table;
    }
    [v4 setObject:v3 forKey:a1];
  }
  else
  {
    [(id)table removeObjectForKey:a1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
}

void _CalDatabaseReportIntegrityErrors(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = _CalDatabaseGetErrorsForDatabase(a1);
  id v3 = v2;
  if (v2)
  {
    CFTypeRef v4 = [v2 errors];
    _CalDatabaseSetErrorsForDatabase(a1, 0);
    uint64_t v5 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v4, "count"));
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v6 = v4;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v29 = v3;
      unint64_t v9 = 0;
      uint64_t v31 = 0;
      uint64_t v10 = *(void *)v33;
      uint64_t v11 = *MEMORY[0x1E4FA8BD8];
      uint64_t v12 = *MEMORY[0x1E4FA8BE0];
      __int16 v30 = v5;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v33 != v10) {
            objc_enumerationMutation(v6);
          }
          uint64_t v14 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          uint64_t v15 = v6;
          unint64_t v16 = [v6 countForObject:v14];
          if (v16 > v9)
          {
            id v17 = v14;

            unint64_t v9 = v16;
            uint64_t v31 = v17;
            uint64_t v5 = v30;
          }
          v36[1] = v12;
          v37[0] = v14;
          v36[0] = v11;
          uint64_t v18 = [NSNumber numberWithUnsignedInteger:v16];
          v37[1] = v18;
          long long v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:2];
          [v5 addObject:v19];

          id v6 = v15;
        }
        uint64_t v8 = [v15 countByEnumeratingWithState:&v32 objects:v38 count:16];
      }
      while (v8);

      uint64_t v20 = v31;
      if (!v31)
      {
        id v3 = v29;
LABEL_19:

        goto LABEL_20;
      }
      id v3 = v29;
      uint64_t v21 = [v29 delegate];
      if (v21)
      {
        id v22 = v5;
        id v23 = v31;
        [v21 reportIntegrityErrors:v22];
      }
      else
      {
        uint64_t v24 = (objc_class *)MEMORY[0x1E4F57648];
        id v25 = v5;
        id v26 = v31;
        id v27 = [v24 alloc];
        id v28 = v26;
        uint64_t v5 = v30;
        id v22 = (id)[v27 initWithType:@"Database" subtype:@"Integrity" context:v28];
        [v22 setEvents:v25];

        id v6 = v15;
        [v22 report];
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = v6;
    }

    goto LABEL_19;
  }
LABEL_20:
}

uint64_t _CalAttachmentPrepareForSave(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (Property) {
    CalRelationOwnerWillSave(Property);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        CFTypeRef v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4) {
          os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  CPRecordUnloadProperty();
  for (int i = 0; i != 26; ++i)
  {
    if ((CalAttachmentToCalAttachmentFilePropertyMap(i) & 0x80000000) == 0)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            id v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      CPRecordUnloadProperty();
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordUnloadProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8) {
          os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
  }
  return CPRecordUnloadProperty();
}

uint64_t _CalAttachmentPropertyDidChange(uint64_t result, unsigned int a2)
{
  if (a2 <= 2)
  {
    uint64_t v2 = result;
    CFTypeRef result = _CalRecordHasValueChangedForProperty(result, a2);
    if (result)
    {
      if (v2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t _CalAttachmentPropertyWillChange(void *a1, int a2, uint64_t a3)
{
  if (!a2 && a3 == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7) {
            os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    goto LABEL_36;
  }
  if (a2 != 6)
  {
LABEL_36:
    uint64_t result = CalAttachmentToCalAttachmentFilePropertyMap(a2);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    CFTypeRef AttachmentFileMakingIfNecessary = _CalAttachmentGetAttachmentFileMakingIfNecessary(a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v18 = AttachmentFileMakingIfNecessary == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      if (CPRecordGetStore())
      {
        long long v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19) {
          os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
    goto LABEL_44;
  }
  CFTypeRef AttachmentFile = _CalAttachmentGetAttachmentFile((uint64_t)a1);
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  AttachmentFileWithUint UID = _CalDatabaseGetAttachmentFileWithUUID(DatabaseForRecord, a3);
  if (!AttachmentFileWithUUID)
  {
    CFTypeRef v20 = _CalAttachmentGetAttachmentFileMakingIfNecessary(a1);
    if (CDBLockingAssertionsEnabled) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      if (CPRecordGetStore())
      {
        id v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22) {
          os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
LABEL_44:
    return CPRecordSetProperty();
  }
  uint64_t v11 = AttachmentFileWithUUID;
  if (AttachmentFile)
  {
    _CalAttachmentFileRemoveAttachment((uint64_t)AttachmentFile, a1);
    CFMutableArrayRef v12 = _CalAttachmentFileCopyAttachments((uint64_t)AttachmentFile);
    if (![(__CFArray *)v12 count]) {
      _CalRemoveAttachmentFile(AttachmentFile);
    }
  }
  uint64_t result = (uint64_t)_CalAttachmentFileAddAttachment(v11, a1);
  for (int i = 0; i != 26; ++i)
  {
    if (i != 6)
    {
      uint64_t result = CalAttachmentToCalAttachmentFilePropertyMap(i);
      if ((result & 0x80000000) == 0)
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15) {
                os_unfair_lock_assert_owner(v15 + 20);
              }
            }
          }
        }
        uint64_t result = CPRecordGetCachedProperty();
        if (result)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              unint64_t v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16) {
                os_unfair_lock_assert_owner(v16 + 20);
              }
            }
          }
          uint64_t result = CPRecordSetProperty();
        }
      }
    }
  }
  return result;
}

void CalAttachmentInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalAttachmentClass, (const char **)&kCalAttachmentIndexes, (const char **)&kCalAttachmentChangesIndexes);
  CalMigrationCreateTriggers(a2, (const char **)&kCalAttachmentClass, (const char **)&kCalAttachmentTriggers);
}

void CalAttachmentMigrateTables(uint64_t a1, void *a2, unsigned int a3)
{
  if ((int)a3 > 56)
  {
    if (a3 > 0x4651) {
      return;
    }
    if (a3 > 0x76)
    {
      if (a3 > 0x3E88)
      {
        uint64_t v7 = 0;
LABEL_17:
        CalMigrateTableFull2(a2, (const char **)&kCalAttachmentClass, 0, (const char **)&kCalAttachmentUpgradeInfo, v7, (const char **)&kCalAttachmentChangesUpgradeInfo, 0, 0, (const char **)&kCalAttachmentIndexes, (const char **)&kCalAttachmentChangesIndexes, (const char **)&kCalAttachmentTriggers, a3);

        return;
      }
    }
    else
    {
      CPRecordStoreCreateTablesForClass();
    }
    _CalDBFillInUUIDColumn((uint64_t)a2, @"Attachment");
    CalPerformSQLWithConnection(a2, @"CREATE TEMP TABLE AttachmentMigration (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, UUID TEXT, url TEXT, original_url TEXT, store_id INTEGER, external_id TEXT, external_mod_tag TEXT, format TEXT, is_binary INTEGER, filename TEXT, local_url TEXT, file_size INTEGER)");
    CalPerformSQLWithConnection(a2, @"INSERT INTO temp.AttachmentMigration (ROWID, UUID, url, original_url, store_id, external_id, external_mod_tag, format, is_binary, filename, local_url, file_size) SELECT Attachment.ROWID, Attachment.UUID, iif (Attachment.url = \"http://localhost\", NULL, Attachment.url), Attachment.url, Calendar.store_id, Attachment.external_id, Attachment.external_mod_tag, Attachment.format, Attachment.is_binary, Attachment.filename, Attachment.local_url, Attachment.file_size FROM Attachment JOIN CalendarItem ON CalendarItem.ROWint ID = Attachment.owner_id JOIN Calendar ON Calendar.ROWint ID = CalendarItem.calendar_id");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX temp.AttachmentMigrationURLStoreID ON AttachmentMigration(url, store_id)");
    CalPerformSQLWithConnection(a2, @"UPDATE temp.AttachmentMigration AS target SET Uint UID = (SELECT other.UUID FROM temp.AttachmentMigration AS other WHERE (other.url = target.url AND other.store_id = target.store_id AND target.url IS NOT NULL) OR (target.url IS NULL AND other.ROWID = target.ROWID) ORDER BY other.ROWID LIMIT 1)");
    CalPerformSQLWithConnection(a2, @"CREATE INDEX temp.AttachmentMigrationUUID ON AttachmentMigration(UUID)");
    CalPerformSQLWithConnection(a2, @"UPDATE temp.AttachmentMigration AS target SET (external_id, external_mod_tag, format, is_binary, local_url, file_size) = (SELECT external_id, external_mod_tag, format, is_binary, local_url, file_size FROM temp.AttachmentMigration as source WHERE source.local_url IS NOT NULL AND target.Uint UID = source.UUID LIMIT 1) WHERE target.local_url IS NULL AND (SELECT other.local_url FROM temp.AttachmentMigration as other WHERE other.Uint UID = target.UUID AND other.local_url IS NOT NULL) IS NOT NULL");
    CalPerformSQLWithConnection(a2, @"INSERT INTO AttachmentFile (UUID, url, external_id, external_mod_tag, format, flags, filename, local_path, file_size, store_id) SELECT UUID, original_url, external_id, external_mod_tag, format, is_binary, filename, local_url, file_size, store_id FROM AttachmentMigration GROUP BY UUID");
    CalPerformSQLWithConnection(a2, @"UPDATE Attachment SET Uint UID = other.UUID FROM (SELECT ROWID, UUID FROM temp.AttachmentMigration) AS other WHERE other.ROWID = Attachment.ROWID");
    CalPerformSQLWithConnection(a2, @"UPDATE AttachmentChanges SET Uint UID = IFNULL((SELECT UUID FROM Attachment WHERE Attachment.ROWID = AttachmentChanges.record), UUID)");
    CalPerformSQLWithConnection(a2, @"DROP TABLE temp.AttachmentMigration");
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(void *)(*a2 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    uint64_t v6 = CPSqliteConnectionStatementForSQL();
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _OWORD v8[2] = __CalAttachmentMigrateTables_block_invoke;
    v8[3] = &__block_descriptor_44_e42__v24__0____CFString__8____CFDictionary__16l;
    unsigned int v9 = a3;
    v8[4] = v6;
    uint64_t v7 = (void *)MEMORY[0x1AD0E9DC0](v8);
    goto LABEL_17;
  }
  CalAttachmentInitializeTables(a1, a2);
}

uint64_t __CalAttachmentMigrateTables_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (*(int *)(a1 + 40) <= 16008 && [a2 isEqualToString:@"file_id"])
  {
    uint64_t v6 = [v5 objectForKeyedSubscript:@"UUID"];
    uint64_t v7 = v6;
    if (!v6) {
      goto LABEL_23;
    }
    sqlite3_bind_text(*(sqlite3_stmt **)(*(void *)(a1 + 32) + 8), 1, (const char *)[v6 UTF8String], -1, 0);
    uint64_t v8 = *(uint64_t ***)(a1 + 32);
    if (CDBLockingAssertionsEnabled) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      if (*v8)
      {
        uint64_t v10 = **v8;
        if (v10)
        {
          if (*(void *)(v10 + 104))
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
    }
    uint64_t v12 = CPSqliteStatementInteger64Result();
    BOOL v13 = *(uint64_t ***)(a1 + 32);
    if (CDBLockingAssertionsEnabled)
    {
      if (v13)
      {
        if (*v13)
        {
          uint64_t v14 = **v13;
          if (v14)
          {
            if (*(void *)(v14 + 104))
            {
              uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15) {
                os_unfair_lock_assert_owner(v15 + 20);
              }
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (v12)
    {
      uint64_t v16 = [NSNumber numberWithLongLong:v12];
    }
    else
    {
LABEL_23:
      uint64_t v16 = 0;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

uint64_t CalAttachmentGetPropertyIDWithPropertyName(void *key)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)CalAttachmentGetPropertyIDWithPropertyName_sPropDict;
  if (!CalAttachmentGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalAttachmentGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalAttachmentGetPropertyIDWithPropertyName_sPropDict)
    {
      id value = @"UUID";
      int v6 = 6;
      uint64_t v7 = @"externalID";
      int v8 = 3;
      BOOL v9 = @"owner";
      int v10 = 22;
      uint64_t v11 = @"URLString";
      int v12 = 5;
      BOOL v13 = @"fileNameRaw";
      int v14 = 9;
      uint64_t v15 = @"fileFormat";
      int v16 = 7;
      id v17 = @"flags";
      int v18 = 8;
      long long v19 = @"localRelativePath";
      int v20 = 10;
      BOOL v21 = @"fileSize";
      int v22 = 11;
      id v23 = @"XPropertiesData";
      int v24 = 1;
      id v25 = @"securityScopedURLWrapperForPendingFileCopy";
      int v26 = 14;
      id v27 = @"shouldSetQuarantineAttributesOnCopiedFile";
      int v28 = 15;
      uint64_t v29 = @"externalModificationTag";
      int v30 = 4;
      uint64_t v31 = @"securityScopedLocalURLWrapper";
      int v32 = 16;
      long long v33 = @"securityScopedLocalURLForArchivedDataWrapper";
      int v34 = 17;
      CalAttachmentGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 15);
      for (uint64_t i = 224; i != -16; i -= 16)
    }
    pthread_mutex_unlock(&CalAttachmentGetPropertyIDWithPropertyName_sPropDictLock);
    CFDictionaryRef v2 = (const __CFDictionary *)CalAttachmentGetPropertyIDWithPropertyName_sPropDict;
  }
  id value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value)) {
    return value;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A8F5234C(_Unwind_Exception *a1)
{
  for (uint64_t i = 224; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalAttachmentHasValidParent(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  CFTypeRef result = CalRelationGetRelatedObject(Property);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalAttachmentCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

uint64_t _CalDatabasePrepareAttachmentsInStoreForMigration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseRemoveAttachmentChangesInStoreToIndex(a1, a3);
}

uint64_t _CalDatabaseRemoveAttachmentChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = _CalAttachmentCreateChangeHistoryWhereClauseForStore(a1, a2);
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = RecordStore == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

const void *_CalDatabaseCreateAttachment(uint64_t a1)
{
  uint64_t v2 = CPRecordCreate();
  CFStringRef v3 = (const void *)v2;
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 11);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = v3 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      int v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v3);
  return v3;
}

const void *CalDatabaseCreateAttachment(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Attachment = _CalDatabaseCreateAttachment((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Attachment;
}

void *_CalAttachmentCopy(uint64_t a1, void *a2)
{
  uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
  Attachment = (void *)_CalDatabaseCreateAttachment(DatabaseForRecord);
  int v6 = Attachment;
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = Attachment == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  CFTypeRef AttachmentFileMakingIfNecessary = (void *)_CalAttachmentGetAttachmentFileMakingIfNecessary(a2);
  uint64_t Store = _CalAttachmentFileGetStore((uint64_t)AttachmentFileMakingIfNecessary);
  if (!a1
    || (uint64_t v12 = Store, Store == a1)
    || CalGetDatabaseForRecord() == DatabaseForRecord
    && v12
    && (int ID = CPRecordGetID(), ID == CPRecordGetID()))
  {
    _CalAttachmentFileAddAttachment((uint64_t)AttachmentFileMakingIfNecessary, v6);
    if (CDBLockingAssertionsEnabled)
    {
      if (v6)
      {
        if (CPRecordGetStore())
        {
          int v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14) {
            os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15) {
            os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    CPRecordSetProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (v6)
      {
        if (CPRecordGetStore())
        {
          int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16) {
            os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          id v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17) {
            os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    CPRecordSetProperty();
  }
  else
  {
    int v18 = _CalAttachmentFileCopy(DatabaseForRecord, AttachmentFileMakingIfNecessary);
    _CalAttachmentFileAddAttachment((uint64_t)v18, v6);
  }
  return v6;
}

CFTypeRef _CalAttachmentGetAttachmentFileMakingIfNecessary(void *a1)
{
  CFTypeRef AttachmentFile = _CalAttachmentGetAttachmentFile((uint64_t)a1);
  if (!AttachmentFile)
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    CFTypeRef AttachmentFile = _CalDatabaseCreateAttachmentFile(DatabaseForRecord);
    _CalAttachmentFileAddAttachment((uint64_t)AttachmentFile, a1);
    CFRelease(AttachmentFile);
  }
  return AttachmentFile;
}

BOOL _CalAttachmentHasDirtyInstanceAttributes(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalAttachmentMarkDirty(uint64_t a1, int a2)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordSetProperty();
  if (a2)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          int v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    return CPRecordSetProperty();
  }
  return result;
}

void *_CalRemoveAttachment(void *a1)
{
  CFTypeRef AttachmentFile = _CalAttachmentGetAttachmentFile((uint64_t)a1);
  if (AttachmentFile)
  {
    uint64_t v3 = (uint64_t)AttachmentFile;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          BOOL v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5) {
            os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    _CalAttachmentFileRemoveAttachment(v3, a1);
  }
  CFTypeRef Owner = _CalAttachmentGetOwner((uint64_t)a1);
  if (Owner)
  {
    return _CalCalendarItemRemoveAttachment((uint64_t)Owner, a1);
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return (void *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

CFTypeRef _CalAttachmentGetAttachmentFile(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

CFTypeRef _CalAttachmentGetOwner(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

void CalRemoveAttachment(void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveAttachment(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalInvalidateAttachmentsWithOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalAttachmentSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

CFTypeRef CalAttachmentCopyAttachmentFile(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef AttachmentFile = _CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile) {
    CFTypeRef v4 = CFRetain(AttachmentFile);
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalDatabaseCopyAttachmentChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalAttachmentCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyAttachmentChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

CFStringRef _CalAttachmentCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 11, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyAttachmentChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseRemoveAttachmentChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _OWORD v8[2] = __CalDatabaseRemoveAttachmentChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E5D61B08;
  v8[4] = &v10;
  void v8[5] = v5;
  v8[6] = a2;
  int v9 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1A8F5335C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveAttachmentChangesInStoreToIndex_block_invoke(void *a1)
{
  uint64_t result = _CalDatabaseRemoveAttachmentChangesInStoreToIndex(a1[5], a1[6]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseCopyAttachmentChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalAttachmentCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyAttachmentChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

CFStringRef _CalAttachmentCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 11, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveAttachmentChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalAttachmentCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveAttachmentChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E5D61B08;
  v9[4] = &v11;
  v9[5] = v5;
  int v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A8F53630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveAttachmentChangesInCalendarToIndex_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassToIndexWhere();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseRemoveAttachmentChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  CFTypeRef v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  id v7[2] = __CalDatabaseRemoveAttachmentChangesWithIndices_block_invoke;
  v7[3] = &unk_1E5D61B30;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A8F537B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveAttachmentChangesWithIndices_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassWithIndices();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _CalAttachmentGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyAttachmentWithUID(os_unfair_lock_s *a1)
{
  BOOL v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  CFTypeRef v4 = (const void *)_CalAttachmentGetWithUID(RecordStore);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

CFTypeRef CalDatabaseCopyAttachmentWithUUID(os_unfair_lock_s *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  CFTypeRef v2 = CalDatabaseCopyAttachmentFileWithUUID(a1, a2);
  if (!v2) {
    return 0;
  }
  BOOL v3 = v2;
  CFArrayRef v4 = CalAttachmentFileCopyAttachments((uint64_t)v2);
  if (v4)
  {
    CFArrayRef v5 = v4;
    if (CFArrayGetCount(v4) < 1)
    {
      CFTypeRef v7 = 0;
    }
    else
    {
      int ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
      CFTypeRef v7 = CFRetain(ValueAtIndex);
    }
    CFRelease(v5);
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  CFRelease(v3);
  return v7;
}

uint64_t _CalDatabaseCopyOfAllAttachmentsInStore(uint64_t a1, uint64_t a2)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = RecordStore == 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  if (a2)
  {
    if (v5)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    return CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  }
  else
  {
    if (v5)
    {
      uint64_t v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
    return CPRecordStoreCopyAllInstancesOfClass();
  }
}

uint64_t CalDatabaseCopyOfAllAttachmentsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  BOOL v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v5 = _CalDatabaseCopyOfAllAttachmentsInStore((uint64_t)a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t _CalAttachmentGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalAttachmentGetUID()
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t _CalAttachmentCopyUUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalAttachmentCopyUUID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetExternalID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentCopyExternalID(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetExternalModTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentCopyExternalModTag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetURL(uint64_t a1, const __CFURL *a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFURLGetString(a2);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  _CalAttachmentSetFlag(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentSetFlag(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3) {
          os_unfair_lock_assert_owner(v3 + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

CFURLRef CalAttachmentCopyURL(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  CFURLRef result = 0;
  if (v4)
  {
    CFURLRef v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

uint64_t CalAttachmentSetFileData(void *a1, uint64_t a2)
{
  return CalAttachmentSetFileDataAndQuarantine(a1, a2);
}

uint64_t CalAttachmentSetFileDataAndQuarantine(void *a1, uint64_t a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef AttachmentFileMakingIfNecessary = (void *)_CalAttachmentGetAttachmentFileMakingIfNecessary(a1);
  uint64_t v6 = _CalAttachmentFileSetFileData(AttachmentFileMakingIfNecessary, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

uint64_t _CalAttachmentSetFileData(void *a1, uint64_t a2)
{
  CFTypeRef AttachmentFileMakingIfNecessary = (void *)_CalAttachmentGetAttachmentFileMakingIfNecessary(a1);
  return _CalAttachmentFileSetFileData(AttachmentFileMakingIfNecessary, a2);
}

void CalAttachmentSetIsBinary(uint64_t a1)
{
}

void CalAttachmentSetFlag(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentSetFlag(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalAttachmentIsBinary(uint64_t a1)
{
  return CalAttachmentGetFlag(a1, 1);
}

BOOL CalAttachmentGetFlag(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  int Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return (Property & a2) != 0;
}

void CalAttachmentSetFilename(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFStringRef _CalAttachmentCopyFilename(uint64_t a1)
{
  CFStringRef result = (const __CFString *)_CalAttachmentGetAttachmentFile(a1);
  if (result)
  {
    return _CalAttachmentFileCopyFilename((uint64_t)result);
  }
  return result;
}

CFStringRef CalAttachmentCopyFilename(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef AttachmentFile = _CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile) {
    CFStringRef v4 = _CalAttachmentFileCopyFilename((uint64_t)AttachmentFile);
  }
  else {
    CFStringRef v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetLocalRelativePath(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentSetLocalRelativePath(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentSetLocalRelativePath(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalAttachmentCopyLocalRelativePath(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalAttachmentCopyLocalRelativePath(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAttachmentCopyLocalRelativePath(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalAttachmentCopyLocalURL(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef AttachmentFile = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile) {
    uint64_t v4 = _CalAttachmentFileCopyLocalURL(AttachmentFile);
  }
  else {
    uint64_t v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void *_CalAttachmentCopyLocalURL(uint64_t a1)
{
  CFStringRef result = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (result)
  {
    return (void *)_CalAttachmentFileCopyLocalURL(result);
  }
  return result;
}

id _CalAttachmentCopyLocalURLForArchivedData(uint64_t a1)
{
  id result = (id)_CalAttachmentGetAttachmentFile(a1);
  if (result)
  {
    return _CalAttachmentFileCopyLocalURLForArchivedData(result);
  }
  return result;
}

id CalAttachmentCopyLocalURLForArchivedData(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef AttachmentFile = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile) {
    id v4 = _CalAttachmentFileCopyLocalURLForArchivedData(AttachmentFile);
  }
  else {
    id v4 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetFileSize(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentCopyFileSize(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetFormat(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentCopyFormat(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetXProperties(uint64_t a1, CFDataRef Data)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (Data) {
    Data = CFPropertyListCreateData(0, Data, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (Data) {
    CFRelease(Data);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFPropertyListRef CalAttachmentCopyXProperties(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFDataRef Property = (const __CFData *)CPRecordGetProperty();
  if (Property) {
    CFPropertyListRef v5 = CFPropertyListCreateWithData(0, Property, 0, 0, 0);
  }
  else {
    CFPropertyListRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFTypeRef CalAttachmentCopyOwner(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalAttachmentGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetURLForPendingFileCopy(uint64_t a1, uint64_t a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentSetURLForPendingFileCopy(a1, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

void _CalAttachmentSetURLForPendingFileCopy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = (id)[objc_alloc(MEMORY[0x1E4F28FF8]) initWithURL:a2 readonly:1];
    if (!a1) {
      goto LABEL_9;
    }
  }
  else
  {
    id v4 = 0;
    if (!a1) {
      goto LABEL_9;
    }
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
LABEL_9:
  CPRecordSetProperty();
}

uint64_t CalAttachmentCopyURLForPendingFileCopy(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  uint64_t v3 = _CalAttachmentCopyURLForPendingFileCopy(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAttachmentCopyURLForPendingFileCopy(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef v2 = (void *)CPRecordCopyProperty();
  uint64_t v3 = [v2 url];

  return v3;
}

void CalAttachmentSetDownloadStart(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAttachmentCopyDownloadStart(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFDataRef Property = (const void *)CPRecordGetProperty();
  if (Property) {
    CFTypeRef v5 = CFRetain(Property);
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalAttachmentSetDownloadTries(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentGetDownloadTries(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  IntegerCFDataRef Property = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalAttachmentSetAutoArchived(uint64_t a1)
{
}

BOOL CalAttachmentIsAutoArchived(uint64_t a1)
{
  return CalAttachmentGetFlag(a1, 2);
}

uint64_t CalLoadAttachmentPropertyFromFileProperty(uint64_t a1, int a2)
{
  uint64_t result = (uint64_t)_CalAttachmentGetAttachmentFile(a1);
  if (result)
  {
    if ((CalAttachmentToCalAttachmentFilePropertyMap(a2) & 0x80000000) != 0) {
      CalLoadAttachmentPropertyFromFileProperty_cold_1(a2);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    uint64_t result = CPRecordGetProperty();
    if (result)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6) {
              os_unfair_lock_assert_owner(v6 + 20);
            }
          }
        }
      }
      return CPRecordInitializeProperty();
    }
  }
  return result;
}

uint64_t CalAttachmentToCalAttachmentFilePropertyMap(int a1)
{
  if ((a1 - 3) > 0xC) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_1A8F7E824[a1 - 3];
  }
}

void _CalAttachmentLoadLocalURLWrapper(uint64_t a1)
{
  CFTypeRef AttachmentFile = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile)
  {
    uint64_t v3 = _CalAttachmentFileCopyLocalURL(AttachmentFile);
    if (v3)
    {
      id v9 = (id)v3;
      id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
      CFTypeRef v5 = [v9 path];
      int v6 = [v4 fileExistsAtPath:v5];

      if (v6)
      {

        CFTypeRef v7 = (void *)[objc_alloc(MEMORY[0x1E4F28FF8]) initWithURL:v9 readonly:1];
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context) {
                os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
        }
        CPRecordInitializeProperty();
      }
      else
      {
        CFTypeRef v7 = v9;
        id v9 = v4;
      }
    }
  }
}

void _CalAttachmentLoadLocalURLForArchivedDataWrapper(uint64_t a1)
{
  CFTypeRef AttachmentFile = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile)
  {
    id v3 = _CalAttachmentFileCopyLocalURLForArchivedData(AttachmentFile);
    if (v3)
    {
      id v9 = v3;
      id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
      CFTypeRef v5 = [v9 path];
      int v6 = [v4 fileExistsAtPath:v5];

      if (v6)
      {

        CFTypeRef v7 = (void *)[objc_alloc(MEMORY[0x1E4F28FF8]) initWithURL:v9 readonly:1];
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context) {
                os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
        }
        CPRecordInitializeProperty();
      }
      else
      {
        CFTypeRef v7 = v9;
        id v9 = v4;
      }
    }
  }
}

uint64_t _CalAttachmentLoadStoreId(uint64_t a1)
{
  uint64_t result = (uint64_t)_CalAttachmentGetOwner(a1);
  if (result)
  {
    uint64_t result = _CalCalendarItemGetStoreId(result);
    if ((int)result >= 1)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      return CPRecordInitializeProperty();
    }
  }
  return result;
}

uint64_t _CalAttachmentLoadCalendarId(uint64_t a1)
{
  uint64_t result = (uint64_t)_CalAttachmentGetOwner(a1);
  if (result)
  {
    uint64_t result = _CalCalendarItemGetCalendarId(result);
    if ((result & 0x80000000) == 0)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      return CPRecordInitializeProperty();
    }
  }
  return result;
}

const void *CalDatabaseCreateTask(os_unfair_lock_s *a1)
{
  CFTypeRef v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  id v3 = _CalCalendarItemCreate((uint64_t)a1, 3);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalTaskPrepareForRemove(uint64_t a1)
{
  uint64_t result = _CalCalendarItemHasAlarms(a1);
  if (result)
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return _CalDatabaseSetChangeFlags(DatabaseForRecord, 8);
  }
  return result;
}

void CalRemoveTask(const void *a1)
{
  CFTypeRef v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (v2)
  {
    id v3 = v2;
    id v4 = v2 + 20;
    os_unfair_lock_lock(v2 + 20);
    _CalTaskMarkAsNeedingScheduledTaskCacheUpdate(a1);
    _CalDatabaseRemoveEntity((uint64_t)v3, a1);
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(v4);
    }
    os_unfair_lock_unlock(v4);
    CFRelease(v3);
  }
}

uint64_t _CalRemoveTask(uint64_t a1, const void *a2)
{
  _CalTaskMarkAsNeedingScheduledTaskCacheUpdate(a2);
  return _CalDatabaseRemoveEntity(a1, a2);
}

uint64_t CalDatabaseCopyTasksInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  if (a2)
  {
    CalStoreGetUID();
    return CalDatabaseCopyCalendarItemsWithStoreID(a1, 3);
  }
  else
  {
    return CalDatabaseCopyCalendarItems(a1, 3);
  }
}

uint64_t CalDatabaseGetCountOfTasksInStore(const void *a1, uint64_t a2)
{
  return CalDatabaseGetCountOfCalendarItemsInStore(a1, 3, a2);
}

CFTypeRef CalDatabaseCopyTaskWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(a1, 3, a2, 0, a3);
}

CFTypeRef CalDatabaseCopyTaskWithExternalIDInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(a1, 3, a2, a3, 0);
}

os_unfair_lock_s *CalDatabaseCopyTaskWithSummaryAndDueDateInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, double a4)
{
  return CalDatabaseCopyTaskWithSummaryAndDueDateInCalendarOrStore(a1, a2, 0, a3, a4);
}

os_unfair_lock_s *CalDatabaseCopyTaskWithSummaryAndDueDateInCalendarOrStore(os_unfair_lock_s *cf, const __CFString *a2, uint64_t a3, uint64_t a4, double a5)
{
  id v9 = cf;
  if (a3 || a4)
  {
    uint64_t result = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    id v9 = result;
    if (!result) {
      return result;
    }
  }
  else
  {
    if (!cf) {
      return 0;
    }
    CFRetain(cf);
  }
  CStringFromCFString = (char *)CalCreateCStringFromCFString(a2);
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    uint64_t v13 = SelectPrefix;
    CFStringAppend(SelectPrefix, @" WHERE summary = ?");
    double v14 = vabdd_f64(a5, *MEMORY[0x1E4F57888]);
    if (v14 >= 2.22044605e-16) {
      CFStringAppend(v13, @" AND due_date = ?");
    }
    if (a3)
    {
      CFStringRef v15 = @" AND calendar_id = ?";
    }
    else
    {
      if (!a4)
      {
LABEL_15:
        os_unfair_lock_lock(v9 + 20);
        uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)v9);
        uint64_t v17 = RecordStore;
        if (CDBLockingAssertionsEnabled)
        {
          if (RecordStore)
          {
            uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context) {
              os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
        uint64_t Database = CPRecordStoreGetDatabase();
        if (CDBLockingAssertionsEnabled)
        {
          if (Database)
          {
            if (*(void *)(Database + 104))
            {
              int v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20) {
                os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
        uint64_t v21 = CPSqliteDatabaseStatementForReading();
        if (!v21)
        {
          CFArrayRef v24 = 0;
          goto LABEL_42;
        }
        uint64_t v22 = v21;
        id v23 = *(sqlite3_stmt **)(v21 + 8);
        if (CStringFromCFString) {
          sqlite3_bind_text(v23, 1, CStringFromCFString, -1, 0);
        }
        else {
          sqlite3_bind_null(v23, 1);
        }
        if (v14 >= 2.22044605e-16)
        {
          sqlite3_bind_int(*(sqlite3_stmt **)(v22 + 8), 2, (int)a5);
          int v25 = 3;
          if (!a3) {
            goto LABEL_35;
          }
        }
        else
        {
          int v25 = 2;
          if (!a3)
          {
LABEL_35:
            if (!a4) {
              goto LABEL_37;
            }
          }
        }
        int v26 = *(sqlite3_stmt **)(v22 + 8);
        int ID = CPRecordGetID();
        sqlite3_bind_int(v26, v25, ID);
LABEL_37:
        if (CDBLockingAssertionsEnabled)
        {
          if (v17)
          {
            int v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28) {
              os_unfair_lock_assert_owner(v28 + 20);
            }
          }
        }
        CFArrayRef v24 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
LABEL_42:
        if (CDBLockingAssertionsEnabled) {
          os_unfair_lock_assert_owner(v9 + 20);
        }
        os_unfair_lock_unlock(v9 + 20);
        CFRelease(v13);
        if (v24)
        {
          if (CFArrayGetCount(v24) < 1)
          {
            int ValueAtIndex = 0;
          }
          else
          {
            int ValueAtIndex = CFArrayGetValueAtIndex(v24, 0);
            CFRetain(ValueAtIndex);
          }
          CFRelease(v24);
          if (!CStringFromCFString) {
            goto LABEL_52;
          }
        }
        else
        {
          int ValueAtIndex = 0;
          if (!CStringFromCFString) {
            goto LABEL_52;
          }
        }
        free(CStringFromCFString);
LABEL_52:
        CFRelease(v9);
        return (os_unfair_lock_s *)ValueAtIndex;
      }
      CFStringRef v15 = @" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)";
    }
    CFStringAppend(v13, v15);
    goto LABEL_15;
  }
  if (CStringFromCFString) {
    free(CStringFromCFString);
  }
  CFRelease(v9);
  return 0;
}

os_unfair_lock_s *CalDatabaseCopyTaskWithSummaryAndDueDateInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, double a4)
{
  return CalDatabaseCopyTaskWithSummaryAndDueDateInCalendarOrStore(a1, a2, a3, 0, a4);
}

uint64_t _CalTaskGetDueDate(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void CalTaskSetDueDate(uint64_t a1, uint64_t a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    double v5 = MEMORY[0x1AD0E87A0](a2);
    CFDateRef v6 = CFDateCreate(0, floor(v5));
    _CalCalendarItemSetRecordProperty(a1, 37, v6);
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    _CalCalendarItemSetRecordProperty(a1, 37, 0);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalTaskCopyDueDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalTaskSetDueDateTimeZone(uint64_t a1, uint64_t a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2) {
    CFStringRef v5 = (const __CFString *)MEMORY[0x1AD0E8C40](a2);
  }
  else {
    CFStringRef v5 = @"_float";
  }
  _CalRecordSetPropertyIfDifferent(a1, 38, v5);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalTaskCopyDueDateTimeZone(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const __CFString *)CPRecordGetProperty();
  uint64_t v5 = (uint64_t)Property;
  if (Property)
  {
    if (CFStringCompare(Property, @"_float", 0)) {
      uint64_t v5 = CalTimeZoneCopyCFTimeZone();
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalTaskSetDueDateAllDay(uint64_t a1, unsigned int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 39, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalTaskIsDueDateAllDay(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL CalTaskIsDueDateAllDay(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BOOL IsDueDateAllDay = _CalTaskIsDueDateAllDay(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return IsDueDateAllDay;
}

void CalTaskSetCompletionDate(uint64_t a1, uint64_t a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    double v5 = MEMORY[0x1AD0E87A0](a2);
    CFDateRef v6 = CFDateCreate(0, floor(v5));
    _CalCalendarItemSetRecordProperty(a1, 40, v6);
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    _CalCalendarItemSetRecordProperty(a1, 40, 0);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalTaskGetCompletionDate(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalTaskCopyCompletionDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Completiondouble Date = (const void *)_CalTaskGetCompletionDate(a1);
  uint64_t v4 = CompletionDate;
  if (CompletionDate) {
    CFRetain(CompletionDate);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalTaskSetFirstAlertDate(uint64_t a1, uint64_t a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    double v5 = MEMORY[0x1AD0E87A0](a2);
    CFDateRef v6 = CFDateCreate(0, floor(v5));
    _CalCalendarItemSetRecordProperty(a1, 61, v6);
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    _CalCalendarItemSetRecordProperty(a1, 61, 0);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

const void *CalTaskCopyFirstAlertDate(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFStringRef Property = (const void *)CPRecordGetProperty();
  double v5 = Property;
  if (Property) {
    CFRetain(Property);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFURLRef CalTaskCopyURI(uint64_t a1)
{
  uint64_t v1 = (void *)CalCalendarItemCopyUUID(a1);
  if (v1)
  {
    CFTypeRef v2 = (void *)MEMORY[0x1E4F28E58];
    id v3 = [MEMORY[0x1E4F28B88] URLPathAllowedCharacterSet];
    uint64_t v4 = [v3 bitmapRepresentation];
    double v5 = [v2 characterSetWithBitmapRepresentation:v4];

    [v5 removeCharactersInString:@"/?&:$+,;=@"];
    CFDateRef v6 = [v1 stringByAddingPercentEncodingWithAllowedCharacters:v5];
    CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"x-apple-reminder://%@", v6);
    if (v7)
    {
      CFStringRef v8 = v7;
      CFURLRef v9 = CFURLCreateWithString(0, v7, 0);
      CFRelease(v8);
    }
    else
    {
      CFURLRef v9 = 0;
    }
  }
  else
  {
    CFURLRef v9 = 0;
  }

  return v9;
}

uint64_t CalTaskGetDisplayOrder(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalTaskSetDisplayOrder(uint64_t a1, int a2)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (!a2)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    uint64_t v6 = CPRecordCopyProperty();
    if (v6)
    {
      CFStringRef v7 = (const void *)v6;
      a2 = (int)MEMORY[0x1AD0E87A0]();
      CFRelease(v7);
    }
    else
    {
      a2 = 0;
    }
  }
  _CalCalendarItemSetRecordProperty(a1, 44, a2);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyTasks(os_unfair_lock_s *a1, void *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, long long a10, const __CFString *a11, int a12)
{
  uint64_t v13 = 0;
  CalDatabaseCopyTasksOrGetCount(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, &v13, 0);
  return v13;
}

void CalDatabaseCopyTasksOrGetCount(os_unfair_lock_s *a1, void *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, long long a10, const __CFString *a11, int a12, char a13, uint64_t *a14, _DWORD *a15)
{
  *(void *)&long long v81 = a6;
  *((void *)&v81 + 1) = a7;
  if (a14) {
    *a14 = 0;
  }
  if (a15) {
    *a15 = 0;
  }
  long long v19 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if (a13)
  {
    CFArrayRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SELECT count(CalendarItem.rowid) from CalendarItem ");
  }
  else if (__PAIR128__((unint64_t)a11, *((unint64_t *)&a10 + 1)) == 0)
  {
    CFArrayRef MutableCopy = (__CFString *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
  }
  else
  {
    CFArrayRef MutableCopy = (__CFString *)CPRecordStoreCreateJoinableSelectPrefixFromRecordDescriptor();
  }
  uint64_t v21 = MutableCopy;
  if (!MutableCopy)
  {
    if (CDBLockingAssertionsEnabled) {
      os_unfair_lock_assert_owner(a1 + 20);
    }
    os_unfair_lock_unlock(a1 + 20);
    return;
  }
  if (__PAIR128__((unint64_t)a11, *((unint64_t *)&a10 + 1)) != 0) {
    CFStringAppend(MutableCopy, @" JOIN Calendar ON CalendarItem.calendar_id = Calendar.ROWID");
  }
  CFStringAppendFormat(v21, 0, @" WHERE entity_type = %d", 3);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_30;
  }
  uint64_t v25 = Database;
  if (a10 != 0)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        int v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26) {
          os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
    if (CPSqliteDatabaseRegisterMatchesSearchStringByWordFunction()) {
      goto LABEL_30;
    }
  }
  if (a11)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(v25 + 104))
      {
        id v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27) {
          os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
    if (CPSqliteDatabaseRegisterMatchesSearchStringFunction())
    {
LABEL_30:
      if (CDBLockingAssertionsEnabled) {
        os_unfair_lock_assert_owner(a1 + 20);
      }
      os_unfair_lock_unlock(a1 + 20);
      int v28 = v21;
      goto LABEL_33;
    }
  }
  if ((void)a10) {
    CFStringAppend(v21, @" AND STRING_MATCHES_WORD(?, IFNULL(summary, ''))");
  }
  if (a11) {
    CFStringAppend(v21, @" AND (((calendar.title != ? AND calendar.title != ?) AND STRING_MATCHES_PREFIX(?, IFNULL(summary, '') || ' ' || IFNULL(calendar.title, ''))) OR ((calendar.title = ? OR calendar.title = ?) AND STRING_MATCHES_PREFIX(?, IFNULL(summary, '') || ' ' || ?)))");
  }
  if (*((void *)&a10 + 1)) {
    CFStringAppend(v21, @" AND (((calendar.title != ? AND calendar.title != ?) AND STRING_MATCHES_WORD(?, IFNULL(calendar.title, ''))) OR ((calendar.title = ? OR calendar.title = ?) AND STRING_MATCHES_WORD(?, ?)))");
  }
  int v76 = a8;
  if (a9)
  {
    if (v81 != 0)
    {
      CFStringAppend(v21, @" AND (");
      if ((void)v81)
      {
        CFStringAppend(v21, @"(completion_date >= ?)");
        int v29 = a3;
        int v30 = a4;
        if (!*((void *)&v81 + 1)) {
          goto LABEL_59;
        }
        CFStringAppend(v21, @" AND ");
      }
      else
      {
        int v29 = a3;
        int v30 = a4;
        if (!*((void *)&v81 + 1)) {
          goto LABEL_59;
        }
      }
      CFStringAppend(v21, @"(completion_date < ?)");
LABEL_59:
      CFStringAppend(v21, @""));
      CFDateRef v77 = 0;
      CFDateRef v78 = 0;
      if (!v30) {
        goto LABEL_79;
      }
      goto LABEL_75;
    }
    goto LABEL_56;
  }
  uint64_t v31 = (const void *)CalCopySystemTimeZone();
  if (v81 == 0)
  {
    CFRelease(v31);
LABEL_56:
    CFDateRef v77 = 0;
    CFDateRef v78 = 0;
    goto LABEL_74;
  }
  CFTypeRef cf = v31;
  CFStringAppend(v21, CFSTR(" AND (("));
  if ((void)v81)
  {
    MEMORY[0x1AD0E87A0](v81);
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    CFDateRef v78 = CFDateCreate(0, v32);
    CFStringAppend(v21, @"(((due_tz IS NOT NULL AND due_tz != ?) AND due_date >= ?) OR ((due_tz IS NULL OR due_tz = ?) AND due_date >= ?))");
  }
  else
  {
    CFDateRef v78 = 0;
  }
  if (*((void *)&v81 + 1))
  {
    MEMORY[0x1AD0E87A0]();
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    CFDateRef v77 = CFDateCreate(0, v33);
    if ((void)v81) {
      CFStringAppend(v21, @" AND ");
    }
    CFStringAppend(v21, @"(((due_tz IS NOT NULL AND due_tz != ?) AND due_date < ?) OR ((due_tz IS NULL OR due_tz = ?) AND due_date < ?))");
  }
  else
  {
    CFDateRef v77 = 0;
  }
  CFRelease(cf);
  if (a8)
  {
    CFStringAppend(v21, @" OR ("));
    if ((void)v81)
    {
      CFStringAppend(v21, @"(completion_date >= ?)");
      if (*((void *)&v81 + 1))
      {
        CFStringAppend(v21, @" AND ");
LABEL_72:
        CFStringAppend(v21, @"(completion_date < ?)");
      }
    }
    else if (*((void *)&v81 + 1))
    {
      goto LABEL_72;
    }
  }
  CFStringAppend(v21, @")"));
LABEL_74:
  int v29 = a3;
  if (!a4) {
    goto LABEL_79;
  }
LABEL_75:
  if (a5) {
    CFStringRef v34 = @" AND completion_date IS NOT NULL";
  }
  else {
    CFStringRef v34 = @" AND completion_date IS NULL";
  }
  CFStringAppend(v21, v34);
LABEL_79:
  uint64_t v35 = _CalFilterCopyCalendarIDClauseForQuery(a2, @"calendar_id");
  if (v35)
  {
    id v36 = v35;
    CFStringAppendFormat(v21, 0, @" AND %@", v35);
    CFRelease(v36);
  }
  if ((v29 - 1) <= 3) {
    CFStringAppend(v21, *((CFStringRef *)&off_1E5D6E228 + v29 - 1));
  }
  if (a12) {
    CFStringAppend(v21, @" LIMIT ?");
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(v25 + 104))
    {
      id v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v37) {
        os_unfair_lock_assert_owner(v37 + 20);
      }
    }
  }
  uint64_t v38 = CPSqliteDatabaseStatementForReading();
  if (!v38)
  {
    int v42 = 0;
    uint64_t v43 = 0;
    CFDateRef v45 = v78;
    uint64_t v44 = a15;
    CFDateRef v46 = v77;
    goto LABEL_138;
  }
  uint64_t v39 = (uint64_t **)v38;
  if ((void)a10)
  {
    CStringFromCFString = (const char *)CalCreateCStringFromCFString((const __CFString *)a10);
    int v41 = 1;
    sqlite3_bind_text((sqlite3_stmt *)v39[1], 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
    if (!a11) {
      goto LABEL_99;
    }
LABEL_95:
    CFStringRef v47 = (const __CFString *)CalCalendarDefaultReminderListTitleLocalized();
    uint64_t v48 = (char *)CalCreateCStringFromCFString(v47);
    int v49 = (char *)CalCreateCStringFromCFString(a11);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 1, "DEFAULT_TASK_CALENDAR_NAME", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 | 2, "Reminders", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 3, v49, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 | 4, "DEFAULT_TASK_CALENDAR_NAME", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 5, "Reminders", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 | 6, v49, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    v41 += 7;
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41, v48, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    if (v48) {
      free(v48);
    }
    if (v49) {
      free(v49);
    }
    goto LABEL_99;
  }
  int v41 = 0;
  if (a11) {
    goto LABEL_95;
  }
LABEL_99:
  if (*((void *)&a10 + 1))
  {
    int v50 = (char *)CalCreateCStringFromCFString(*((const __CFString **)&a10 + 1));
    CFStringRef v51 = (const __CFString *)CalCalendarDefaultReminderListTitleLocalized();
    uint64_t v52 = (char *)CalCreateCStringFromCFString(v51);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 1, "DEFAULT_TASK_CALENDAR_NAME", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 2, "Reminders", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 3, v50, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 4, "DEFAULT_TASK_CALENDAR_NAME", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 5, "Reminders", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 6, v50, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    v41 += 7;
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41, v52, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    if (v52) {
      free(v52);
    }
    uint64_t v53 = *((void *)&v81 + 1);
    uint64_t v54 = v81;
    if (v50) {
      free(v50);
    }
  }
  else
  {
    uint64_t v53 = *((void *)&v81 + 1);
    uint64_t v54 = v81;
  }
  if ((a9 & 1) == 0)
  {
    if (v54)
    {
      sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 1, "_float", -1, 0);
      uint64_t v55 = (sqlite3_stmt *)v39[1];
      double v56 = MEMORY[0x1AD0E87A0](v54);
      sqlite3_bind_double(v55, v41 + 2, v56);
      sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 3, "_float", -1, 0);
      uint64_t v57 = (sqlite3_stmt *)v39[1];
      v41 += 4;
      double v58 = MEMORY[0x1AD0E87A0](v78);
      sqlite3_bind_double(v57, v41, v58);
    }
    if (v53)
    {
      sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 1, "_float", -1, 0);
      id v59 = (sqlite3_stmt *)v39[1];
      double v60 = MEMORY[0x1AD0E87A0](v53);
      sqlite3_bind_double(v59, v41 + 2, v60);
      sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 3, "_float", -1, 0);
      uint64_t v61 = (sqlite3_stmt *)v39[1];
      v41 += 4;
      double v62 = MEMORY[0x1AD0E87A0](v77);
      sqlite3_bind_double(v61, v41, v62);
    }
  }
  int v63 = v76 | a9;
  if (v54 && v63)
  {
    id v64 = (sqlite3_stmt *)v39[1];
    ++v41;
    double v65 = MEMORY[0x1AD0E87A0](v54);
    sqlite3_bind_double(v64, v41, v65);
  }
  CFDateRef v46 = v77;
  CFDateRef v45 = v78;
  char v66 = v63 ^ 1;
  if (!v53) {
    char v66 = 1;
  }
  if ((v66 & 1) == 0)
  {
    CFArrayRef v67 = (sqlite3_stmt *)v39[1];
    ++v41;
    double v68 = MEMORY[0x1AD0E87A0](v53);
    sqlite3_bind_double(v67, v41, v68);
  }
  uint64_t v44 = a15;
  if (a12) {
    sqlite3_bind_int((sqlite3_stmt *)v39[1], v41 + 1, a12);
  }
  uint64_t v69 = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (a13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v39)
      {
        uint64_t v70 = **v39;
        if (v70)
        {
          if (*(void *)(v70 + 104))
          {
            uint64_t v71 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v71) {
              os_unfair_lock_assert_owner(v71 + 20);
            }
          }
        }
      }
    }
    int v42 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v39)
      {
        uint64_t v72 = **v39;
        if (v72)
        {
          if (*(void *)(v72 + 104))
          {
            CFArrayRef v73 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v73) {
              os_unfair_lock_assert_owner(v73 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
    uint64_t v43 = 0;
  }
  else
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v69)
      {
        id v74 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v74) {
          os_unfair_lock_assert_owner(v74 + 20);
        }
      }
    }
    uint64_t v43 = CPRecordStoreProcessStatement();
    int v42 = 0;
  }
LABEL_138:
  if (v45) {
    CFRelease(v45);
  }
  if (v46) {
    CFRelease(v46);
  }
  CFRelease(v21);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v19);
  }
  os_unfair_lock_unlock(v19);
  if (a13)
  {
    if (v44) {
      _DWORD *v44 = v42;
    }
  }
  else
  {
    if (a14)
    {
      *a14 = v43;
      return;
    }
    if (v43)
    {
      int v28 = (const void *)v43;
LABEL_33:
      CFRelease(v28);
    }
  }
}

uint64_t CalDatabaseCopyCountOfTasks(os_unfair_lock_s *a1, void *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, long long a10, const __CFString *a11)
{
  unsigned int v12 = 0;
  CalDatabaseCopyTasksOrGetCount(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, 1, 0, &v12);
  return v12;
}

BOOL _CalDatabaseCalendarHasTasks(uint64_t a1, uint64_t a2)
{
  return _CalDatabaseCalendarHasCalendarItemsWithEntityType(a1, a2, 3);
}

uint64_t _CalDatabaseCopyScheduledTasks(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreCopyAllInstancesOfClassWhere();
}

uint64_t _CalDatabaseCopyScheduledTasksInDateRange(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v2 = RecordStore == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
}

uint64_t CalDatabaseCopyTaskChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return CalDatabaseCopyCalendarItemChangesInStore(a1, 3, a2, 0, a3);
}

uint64_t CalDatabaseCopyTaskChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return CalDatabaseCopyCalendarItemChangesInCalendar(a1, 3, a2, 0, a3);
}

uint64_t CalDatabaseRemoveTaskChangesInStoreToIndex(uint64_t a1, uint64_t a2, int a3)
{
  return CalDatabaseRemoveCalendarItemChangesInStoreToIndex(a1, 3, a2, a3);
}

uint64_t CalDatabaseRemoveTaskChangesInCalendarToIndex(uint64_t a1, uint64_t a2, int a3)
{
  return CalDatabaseRemoveCalendarItemChangesInCalendarToIndex(a1, 3, a2, a3);
}

CFMutableDictionaryRef CalDatabaseCopyTaskMovesInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  CFMutableDictionaryRef v3 = 0;
  CalDatabaseCopyCalendarItemChangesInStore(a1, 3, a2, 1, &v3);
  return v3;
}

CFMutableDictionaryRef CalDatabaseCopyTaskMovesInCalendar(os_unfair_lock_s *a1, uint64_t a2)
{
  CFMutableDictionaryRef v3 = 0;
  CalDatabaseCopyCalendarItemChangesInCalendar(a1, 3, a2, 1, &v3);
  return v3;
}

uint64_t _CalContactPrepareForSave(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t result = CPRecordGetProperty();
  if (result)
  {
    return CalRelationOwnerWillSave(result);
  }
  return result;
}

uint64_t _CalContactPropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  if (!a2 && a3 == -1)
  {
    uint64_t v4 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPRecordGetProperty();
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6) {
            os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    return CPRecordGetProperty();
  }
  return result;
}

void CalContactInitializeTables(uint64_t a1, void *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalContactClass, (const char **)&kCalContactIndexes, (const char **)&kCalContactChangesIndexes);
}

void CalContactMigrateTables(uint64_t a1, void *a2, signed int a3)
{
  if (a3 > 10000)
  {
    if (a3 <= 0x4651) {
      CalMigrateTableFull(a2, (const char **)&kCalContactClass, 0, (const char **)&kCalContactUpgradeInfo, 0, (const char **)&kCalContactIndexes, (const char **)&kCalContactChangesIndexes, 0, a3);
    }
  }
  else
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalContactClass, (const char **)&kCalContactIndexes, (const char **)&kCalContactChangesIndexes);
  }
}

uint64_t CalContactGetPropertyIDWithPropertyName()
{
  return 0xFFFFFFFFLL;
}

CFTypeRef _CalContactHasValidParent(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t Property = CPRecordGetProperty();
  CFTypeRef result = CalRelationGetRelatedObject(Property);
  if (result)
  {
    return (CFTypeRef)_CalRecordStillExists();
  }
  return result;
}

void _CalContactCleanUpDanglingEntities(uint64_t a1, void *a2)
{
}

CFTypeRef _CalContactGetOwner(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CFTypeRef result = (CFTypeRef)CPRecordGetProperty();
  if (result)
  {
    return CalRelationGetRelatedObject((uint64_t)result);
  }
  return result;
}

CFTypeRef CalContactCopyOwner(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFTypeRef Owner = _CalContactGetOwner(a1);
  CFTypeRef v4 = Owner;
  if (Owner) {
    CFRetain(Owner);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalContactGetRecordID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPRecordGetProperty();
}

void CalContactSetContactIdentifier(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalContactCopyContactIdentifier(uint64_t a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context) {
          os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  uint64_t v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

const void *_CalDatabaseCreateContact(uint64_t a1)
{
  uint64_t v2 = CPRecordCreate();
  uint64_t v3 = (const void *)v2;
  if (CDBLockingAssertionsEnabled) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 21);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = v3 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      CFStringRef v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8) {
        os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v3);
  return v3;
}

const void *CalDatabaseCreateContact(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Contact = _CalDatabaseCreateContact((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return Contact;
}

const void *_CalContactCopy(uint64_t a1, uint64_t a2)
{
  Contact = _CalDatabaseCreateContact(a1);
  BOOL v4 = Contact;
  if (CDBLockingAssertionsEnabled) {
    BOOL v5 = Contact == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        BOOL v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7) {
          os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      CFURLRef v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      unsigned int v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12) {
        os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        uint64_t v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13) {
          os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

void *_CalRemoveContact(void *a1)
{
  CFTypeRef Owner = _CalContactGetOwner((uint64_t)a1);
  if (Owner)
  {
    return _CalCalendarItemRemoveContact((uint64_t)Owner, a1);
  }
  else
  {
    uint64_t DatabaseForRecord = CalGetDatabaseForRecord();
    return (void *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

void CalRemoveContact(void *a1)
{
  RecordLocuint64_t k = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveContact(a1);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(RecordLock);
  }
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalInvalidateContactsWithOwnerID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalDatabaseCopyContactChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalContactCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyContactChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

CFStringRef _CalContactCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"store_id = %d AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@') AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@') AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 21, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyContactChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  uint64_t RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v8 = RecordStore == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

BOOL CalDatabaseRemoveContactChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  uint64_t v11 = 0;
  unsigned int v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  CFStringRef v6 = _CalContactCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___CalDatabaseRemoveContactChangesInStoreToIndex_block_invoke;
  v9[3] = &unk_1E5D61B08;
  v9[4] = &v11;
  v9[5] = v5;
  int v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6) {
    CFRelease(v6);
  }
  int v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7 != 0;
}

void sub_1A8F58010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyContactChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalContactCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  uint64_t v7 = _CalDatabaseCopyContactChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

CFStringRef _CalContactCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFStringRef v6 = 0;
  if (a2)
  {
    CFTypeRef v3 = _CalDatabaseCopyClientIdentifier(a1);
    uint64_t ID = CPRecordGetID();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"calendar_id = %d AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@') AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@') AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')", ID, v3, v3, 21, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveContactChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v11 = 0;
  unsigned int v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  if (a2)
  {
    BOOL v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    BOOL v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  CFStringRef v6 = _CalContactCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveContactChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E5D61B08;
  v9[4] = &v11;
  v9[5] = v5;
  int v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6) {
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5 + 20);
  }
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  uint64_t v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A8F582A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveContactChangesInCalendarToIndex_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassToIndexWhere();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t CalDatabaseRemoveContactChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  CFURLRef v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  BOOL v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  id v7[2] = __CalDatabaseRemoveContactChangesWithIndices_block_invoke;
  v7[3] = &unk_1E5D61B30;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A8F58428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CalDatabaseRemoveContactChangesWithIndices_block_invoke(uint64_t a1)
{
  uint64_t RecordStore = _CalDatabaseGetRecordStore(*(void *)(a1 + 40));
  if (CDBLockingAssertionsEnabled) {
    BOOL v3 = RecordStore == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t result = CPRecordStoreDeleteChangesForClassWithIndices();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _CalContactGetWithUID(uint64_t a1)
{
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyContactWithUID(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  BOOL v4 = (const void *)_CalContactGetWithUID(RecordStore);
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v2);
  }
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalDatabaseCopyOfAllContactsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  BOOL v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = !v6;
  if (a2)
  {
    if (v7)
    {
      uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context) {
        os_unfair_lock_assert_owner(Context + 20);
      }
    }
    uint64_t v9 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  }
  else
  {
    if (v7)
    {
      uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10) {
        os_unfair_lock_assert_owner(v10 + 20);
      }
    }
    uint64_t v9 = CPRecordStoreCopyAllInstancesOfClass();
  }
  uint64_t v11 = v9;
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v11;
}

uint64_t __CalDatabaseCopyOfAllContactsInStore_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(sqlite3_stmt **)(a2 + 8);
  int ID = CPRecordGetID();
  return sqlite3_bind_int(v2, 1, ID);
}

uint64_t CalContactCountOfContactsWithIdentifier(const __CFString *a1, os_unfair_lock_s *a2)
{
  BOOL v4 = a2 + 20;
  os_unfair_lock_lock(a2 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a2);
  if (CDBLockingAssertionsEnabled) {
    BOOL v6 = RecordStore == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (!Database) {
    goto LABEL_16;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(void *)(Database + 104))
    {
      uint64_t v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9) {
        os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  uint64_t v10 = CPSqliteDatabaseStatementForReading();
  if (v10 && (uint64_t v11 = v10, *(void *)(v10 + 8)))
  {
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(a1);
    sqlite3_bind_text(*(sqlite3_stmt **)(v11 + 8), 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
    if (sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) == 1) {
      return 0;
    }
    uint64_t v13 = sqlite3_column_int(*(sqlite3_stmt **)(v11 + 8), 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)v11)
      {
        uint64_t v15 = **(void **)v11;
        if (v15)
        {
          if (*(void *)(v15 + 104))
          {
            int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16) {
              os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
LABEL_16:
    uint64_t v13 = 0;
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v4);
  }
  os_unfair_lock_unlock(v4);
  return v13;
}

__CFArray *CalContactCopyObjectIDsOfContactsWithIdentifier(const __CFString *a1, os_unfair_lock_s *a2)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  uint64_t v5 = a2 + 20;
  os_unfair_lock_lock(a2 + 20);
  uint64_t RecordStore = _CalDatabaseGetRecordStore((uint64_t)a2);
  if (CDBLockingAssertionsEnabled) {
    BOOL v7 = RecordStore == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context) {
      os_unfair_lock_assert_owner(Context + 20);
    }
  }
  uint64_t Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(void *)(Database + 104))
      {
        uint64_t v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10) {
          os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    uint64_t v11 = CPSqliteDatabaseStatementForReading();
    if (v11)
    {
      uint64_t v12 = v11;
      if (*(void *)(v11 + 8))
      {
        CStringFromCFString = (const char *)CalCreateCStringFromCFString(a1);
        sqlite3_bind_text(*(sqlite3_stmt **)(v12 + 8), 1, CStringFromCFString, -1, MEMORY[0x1E4F14838]);
        while (sqlite3_step(*(sqlite3_stmt **)(v12 + 8)) == 100)
        {
          char v14 = (const void *)objc_msgSend(NSNumber, "numberWithInt:", sqlite3_column_int(*(sqlite3_stmt **)(v12 + 8), 0));
          CFArrayAppendValue(Mutable, v14);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*(void *)v12)
          {
            uint64_t v15 = **(void **)v12;
            if (v15)
            {
              if (*(void *)(v15 + 104))
              {
                int v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v16) {
                  os_unfair_lock_assert_owner(v16 + 20);
                }
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
    }
  }
  if (CDBLockingAssertionsEnabled) {
    os_unfair_lock_assert_owner(v5);
  }
  os_unfair_lock_unlock(v5);
  return Mutable;
}

CFTypeRef _CalContactLoadStoreId(uint64_t a1)
{
  CFTypeRef result = _CalContactGetOwner(a1);
  if (result)
  {
    _CalCalendarItemGetStoreId((uint64_t)result);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

CFTypeRef _CalContactLoadCalendarId(uint64_t a1)
{
  CFTypeRef result = _CalContactGetOwner(a1);
  if (result)
  {
    _CalCalendarItemGetCalendarId((uint64_t)result);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          uint64_t Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context) {
            os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

id DateComponentsFromAbsoluteTime(void *a1, double a2)
{
  id v3 = a1;
  BOOL v4 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
  uint64_t v5 = [MEMORY[0x1E4F1C9A8] CalGregorianGMTCalendar];
  BOOL v6 = (void *)[v5 copy];

  if (v3)
  {
    [v6 setTimeZone:v3];
  }
  else
  {
    BOOL v7 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
    [v6 setTimeZone:v7];
  }
  uint64_t v8 = [v6 components:252 fromDate:v4];

  return v8;
}

double CalDateFromICSDateInTimezone(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
LABEL_6:
    double v12 = *MEMORY[0x1E4F57888];
    goto LABEL_7;
  }
  uint64_t v5 = [v3 value];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
  {
    uint64_t v13 = (void *)CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      char v14 = v13;
      int v17 = 138412290;
      id v18 = (id)objc_opt_class();
      id v15 = v18;
      _os_log_impl(&dword_1A8E81000, v14, OS_LOG_TYPE_DEBUG, "The given ICSDate (%@) is not of any known type", (uint8_t *)&v17, 0xCu);
    }
    goto LABEL_6;
  }
  BOOL v7 = [MEMORY[0x1E4F1C9A8] CalGregorianGMTCalendar];
  uint64_t v8 = (void *)[v7 copy];

  uint64_t v9 = [v3 value];
  uint64_t v10 = NSDateFromICSValueInTimeZone();

  [v10 timeIntervalSinceReferenceDate];
  double v12 = v11;

LABEL_7:
  return v12;
}

CFDateRef CalCreateCFDateFromICSDateAsUTC(CFDateRef result)
{
  if (result)
  {
    double v1 = CalDateFromICSDateAsUTC(result);
    return CFDateCreate(0, v1);
  }
  return result;
}

double CalDateFromICSDateAsUTC(void *a1)
{
  double v1 = (void *)MEMORY[0x1E4F1CAF0];
  id v2 = a1;
  id v3 = [v1 timeZoneWithName:@"UTC"];
  double v4 = CalDateFromICSDateInTimezone(v2, v3);

  return v4;
}

double CalDateFromICSDate(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CAF0];
  BOOL v6 = [v3 tzid];
  BOOL v7 = [v5 timeZoneWithName:v6];

  if (!v7)
  {
    BOOL v7 = [v4 systemTimeZoneForDate:v3];
    if (!v7)
    {
      BOOL v7 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
    }
  }
  double v8 = CalDateFromICSDateInTimezone(v3, v7);

  return v8;
}

uint64_t CalCreateDateTimeFromICSDate(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v17 = 0;
  if (v3)
  {
    uint64_t v5 = [v3 tzid];
    if ([v3 hasFloatingTimeZone])
    {
      BOOL v6 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];

LABEL_4:
      BOOL v7 = @"_float";
LABEL_12:
      CalDateTimeSetTimeZone();
      CFRelease(v7);
      double v11 = [MEMORY[0x1E4F1C9A8] CalGregorianGMTCalendar];
      double v12 = (void *)[v11 copy];

      uint64_t v13 = [v3 value];
      char v14 = NSDateFromICSValueInTimeZone();

      [v14 timeIntervalSinceReferenceDate];
      uint64_t v17 = v15;

      goto LABEL_13;
    }
    if (!v5)
    {
      BOOL v7 = @"UTC";
      BOOL v6 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
      goto LABEL_12;
    }
    uint64_t v8 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:v5];
    if (v8)
    {
      BOOL v6 = (void *)v8;
    }
    else
    {
      BOOL v6 = [v4 systemTimeZoneForDate:v3];
      uint64_t v9 = [v6 name];

      if (!v6)
      {
        BOOL v6 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];

        goto LABEL_4;
      }
      uint64_t v5 = v9;
    }
    uint64_t v10 = objc_msgSend(v5, "copy", 0);
    BOOL v7 = (__CFString *)CFRetain(v10);

    goto LABEL_12;
  }
LABEL_13:

  return v17;
}

id ICSFloatingDateTimeFromCFDateInTimezone(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = MEMORY[0x1AD0E87A0](a1);
  uint64_t v5 = DateComponentsFromAbsoluteTime(v3, v4);

  BOOL v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4FB7F28]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v5, "year"), objc_msgSend(v5, "month"), objc_msgSend(v5, "day"), objc_msgSend(v5, "hour"), objc_msgSend(v5, "minute"), objc_msgSend(v5, "second"));
  return v6;
}

id ICSFloatingDateOnlyFromCFDate(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = MEMORY[0x1AD0E87A0](a1);
  uint64_t v5 = DateComponentsFromAbsoluteTime(v3, v4);

  BOOL v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4FB7F28]), "initWithYear:month:day:", objc_msgSend(v5, "year"), objc_msgSend(v5, "month"), objc_msgSend(v5, "day"));
  return v6;
}

id ICSDateFromCFDateInTimezone(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v3 = [MEMORY[0x1E4F1CAF0] timeZoneWithName:@"UTC"];
  }
  double v4 = MEMORY[0x1AD0E87A0](a1);
  uint64_t v5 = DateComponentsFromAbsoluteTime(v3, v4);
  BOOL v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4FB7F28]), "initWithYear:month:day:hour:minute:second:timeZone:", objc_msgSend(v5, "year"), objc_msgSend(v5, "month"), objc_msgSend(v5, "day"), objc_msgSend(v5, "hour"), objc_msgSend(v5, "minute"), objc_msgSend(v5, "second"), v3);

  return v6;
}

id ICSDateFromCFDateGuessingAtFloatingDateOnly(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    double v4 = MEMORY[0x1AD0E87A0](a1);
    uint64_t v5 = DateComponentsFromAbsoluteTime(v3, v4);
    if ([v5 hour] || objc_msgSend(v5, "minute") || objc_msgSend(v5, "second"))
    {
      uint64_t v6 = ICSDateFromCFDateInTimezone(a1, v3);
    }
    else
    {
      uint64_t v6 = ICSFloatingDateOnlyFromCFDate(a1, 0);
    }
    BOOL v7 = (void *)v6;
  }
  else
  {
    BOOL v7 = ICSFloatingDateTimeFromCFDateInTimezone(a1, 0);
  }

  return v7;
}

id ICSDateFromCFDate(uint64_t a1, void *a2)
{
  if (a2) {
    ICSDateFromCFDateInTimezone(a1, a2);
  }
  else {
  id v2 = ICSFloatingDateTimeFromCFDateInTimezone(a1, 0);
  }
  return v2;
}

id ICSDateTimeForCalDate(double a1)
{
  if (*MEMORY[0x1E4F57888] == a1)
  {
    id v2 = 0;
  }
  else
  {
    double v1 = DateComponentsFromAbsoluteTime(0, a1);
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4FB7F30]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v1, "year"), objc_msgSend(v1, "month"), objc_msgSend(v1, "day"), objc_msgSend(v1, "hour"), objc_msgSend(v1, "minute"), objc_msgSend(v1, "second"));
  }
  return v2;
}

void sub_1A8F5AD54(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void __getCalOutOfProcessMigratorClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  int v1 = [NSString stringWithUTF8String:"Class getCalOutOfProcessMigratorClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"CalDatabase.m", 62, @"Unable to find class %s", "CalOutOfProcessMigrator");

  __break(1u);
}

void CalendarMigrationLibrary_cold_1(void *a1)
{
  id v2 = [MEMORY[0x1E4F28B00] currentHandler];
  id v3 = [NSString stringWithUTF8String:"void *CalendarMigrationLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"CalDatabase.m", 59, @"%s", *a1);

  __break(1u);
}

void _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure_cold_1()
{
  uint64_t v0 = (void *)[objc_alloc(MEMORY[0x1E4F57648]) initWithType:@"Database" subtype:@"Integrity" context:@"Schema"];
  [v0 setIgnoreRateLimiting:1];
  [v0 reportSynchronous];
  abort();
}

void __getCalDefaultReminderKitProviderClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  int v1 = [NSString stringWithUTF8String:"Class getCalDefaultReminderKitProviderClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"CalDatabase.m", 71, @"Unable to find class %s", "CalDefaultReminderKitProvider");

  __break(1u);
}

void __getCalDefaultReminderMigrationDefaultsProviderClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  int v1 = [NSString stringWithUTF8String:"Class getCalDefaultReminderMigrationDefaultsProviderClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"CalDatabase.m", 72, @"Unable to find class %s", "CalDefaultReminderMigrationDefaultsProvider");

  __break(1u);
}

void __getCalCalendarDatabaseReminderMigratorClass_block_invoke_cold_1()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  int v1 = [NSString stringWithUTF8String:"Class getCalCalendarDatabaseReminderMigratorClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"CalDatabase.m", 70, @"Unable to find class %s", "CalCalendarDatabaseReminderMigrator");

  __break(1u);
}

void CalDatabaseCopyCalendarItemsWithCalendarFilter_cold_1()
{
  __assert_rtn("CalDatabaseCopyCalendarItemsWithCalendarFilter", "CalCalendarItem.m", 3191, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void CalDatabaseCopyCalendarItemsWithStoreID_cold_1()
{
  __assert_rtn("CalDatabaseCopyCalendarItemsWithStoreID", "CalCalendarItem.m", 3296, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void CalToManyRelationHasObjects_cold_1()
{
  __assert_rtn("CalToManyRelationHasObjects", "CalToManyRelation.m", 280, "relation->_loadedObjects != nil");
}

void _EnsureLoaded_cold_1()
{
  __assert_rtn("_EnsureLoaded", "CalToManyRelation.m", 216, "inverseRelationInfo->realIDColumn != -1");
}

void _CalCalendarLoad_cold_1()
{
  __assert_rtn("_CalCalendarLoad", "CalCalendar.m", 4576, "propDesc->extra != 0");
}

void _CalCreateParticipant_cold_1()
{
  __assert_rtn("_CalCreateParticipant", "CalAttendee.m", 481, "entityType == CalAttendeeEntity || entityType == CalOrganizerEntity");
}

void CalParticipantGetUID_cold_1()
{
}

void CalOrganizerSetOwner_cold_1()
{
}

void _CalRecordIDLoad_cold_1(char a1, uint64_t a2, os_log_t log)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v3 = 134217984;
    uint64_t v4 = a2;
    _os_log_impl(&dword_1A8E81000, log, OS_LOG_TYPE_ERROR, "Record with pointer address of [%p] was not marked as being deleted.", (uint8_t *)&v3, 0xCu);
  }
  __assert_rtn("_CalRecordIDLoad", "CalRecordID.m", 117, "false");
}

void _CalEventPrepareForSave_cold_1()
{
}

void _CalEventPrepareForSave_cold_2()
{
}

void _CalEventPrepareForSave_cold_3()
{
}

void _CalCalendarItemCreate_cold_1()
{
  __assert_rtn("_CalCalendarItemCreate", "CalEvent.m", 1508, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void _CalEventMarkEventAsNeedingOccurrenceCacheUpdate_cold_1()
{
}

void _CalCalendarItemCreateCopyPreservingUniqueIdentifier_cold_1()
{
  __assert_rtn("_CalCalendarItemCreateCopyPreservingUniqueIdentifier", "CalEvent.m", 1640, "original != NULL");
}

void CalCalendarItemCreateCopy_cold_1()
{
  __assert_rtn("CalCalendarItemCreateCopy", "CalEvent.m", 1667, "original != NULL");
}

void _CalEventMarkEventAsNeedingAlarmCacheUpdate_cold_1()
{
}

void _CalTaskMarkAsNeedingScheduledTaskCacheUpdate_cold_1()
{
}

void CalCalendarItemCopyUUID_cold_1()
{
  __assert_rtn("CalCalendarItemCopyUUID", "CalEvent.m", 3359, "item != NULL");
}

void CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_1()
{
  __assert_rtn("CalDatabaseRemoveCalendarItemChangesInStoreToIndex", "CalEvent.m", 8294, "store != NULL");
}

void CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_2()
{
  __assert_rtn("CalDatabaseRemoveCalendarItemChangesInStoreToIndex", "CalEvent.m", 8293, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void _CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_1()
{
  __assert_rtn("_CalDatabaseRemoveCalendarItemChangesInStoreToIndex", "CalEvent.m", 8274, "store != NULL");
}

void _CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_2()
{
  __assert_rtn("_CalDatabaseRemoveCalendarItemChangesInStoreToIndex", "CalEvent.m", 8273, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void CalDatabaseCopyCalendarItemChangesInCalendar_cold_1()
{
  __assert_rtn("CalDatabaseCopyCalendarItemChangesInCalendar", "CalEvent.m", 8440, "calendar != NULL");
}

void CalExceptionDateSetDate_cold_1()
{
  __assert_rtn("CalExceptionDateSetDate", "CalExceptionDate.m", 350, "date != NULL");
}

void CalDatabaseMigrateCalendarsWithEntityType_cold_1()
{
  __assert_rtn("CalDatabaseMigrateCalendarsWithEntityType", "CalStore.m", 3007, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void _CalCreateNotification_cold_1()
{
  __assert_rtn("_CalCreateNotification", "CalNotification.m", 294, "entityType == CalInviteReplyNotificationEntity || entityType == CalResourceChangeNotificationEntity || entityType == CalNotificationEntity || entityType == CalSuggestionNotificationEntity");
}

void CalNotificationGetUID_cold_1()
{
}

void CalDatabaseCopyNotificationsWithCalendar_cold_1()
{
  __assert_rtn("CalDatabaseCopyNotificationsWithCalendar", "CalNotification.m", 628, "entityType == CalNotificationEntity || entityType == CalInviteReplyNotificationEntity || entityType == CalResourceChangeNotificationEntity || entityType == CalSuggestionNotificationEntity || entityType == CalUndefinedEntity");
}

void CalShareeGetUID_cold_1()
{
}

void CalLoadAttachmentPropertyFromFileProperty_cold_1(int a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v2 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl(&dword_1A8E81000, v2, OS_LOG_TYPE_ERROR, "Unknown property id %i in CalLoadAttachmentPropertyFromFileProperty", (uint8_t *)v3, 8u);
  }
  __assert_rtn("CalLoadAttachmentPropertyFromFileProperty", "CalAttachment.m", 139, "0");
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

SInt32 CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  return MEMORY[0x1F40D70C0](tz, at);
}

CFGregorianUnits *__cdecl CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFGregorianUnits *__return_ptr retstr, CFAbsoluteTime at1, CFAbsoluteTime at2, CFTimeZoneRef tz, CFOptionFlags unitFlags)
{
  return (CFGregorianUnits *)MEMORY[0x1F40D70C8](retstr, tz, unitFlags, at1, at2);
}

CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  uint64_t v2 = MEMORY[0x1F40D70D8](tz, at);
  result.second = v3;
  result.year = v2;
  result.month = BYTE4(v2);
  result.day = BYTE5(v2);
  result.hour = BYTE6(v2);
  result.minute = HIBYTE(v2);
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context)
{
  return MEMORY[0x1F40D7158](theArray, range.location, range.length, value, comparator, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1F40D7888](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1F40D7AB8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

Boolean CFGregorianDateIsValid(CFGregorianDate gdate, CFOptionFlags unitFlags)
{
  return MEMORY[0x1F40D7B98](*(void *)&gdate.year, *(void *)&gdate.second, unitFlags);
}

uint64_t CFLog()
{
  return MEMORY[0x1F40D7C50]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1F40D7D68]();
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1F40D7D78](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

Boolean CFSetGetValueIfPresent(CFSetRef theSet, const void *candidate, const void **value)
{
  return MEMORY[0x1F40D8240](theSet, candidate, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8558](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFTimeZoneRef CFTimeZoneCreateWithName(CFAllocatorRef allocator, CFStringRef name, Boolean tryAbbrev)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D8700](allocator, name, tryAbbrev);
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D8708](allocator, ti);
}

CFStringRef CFTimeZoneGetName(CFTimeZoneRef tz)
{
  return (CFStringRef)MEMORY[0x1F40D8710](tz);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8770](url);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8790](anURL);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8798](url);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D87F8](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension)
{
  return (CFURLRef)MEMORY[0x1F40D8800](allocator, url, extension);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8918](anURL);
}

Boolean CFURLStartAccessingSecurityScopedResource(CFURLRef url)
{
  return MEMORY[0x1F40D8968](url);
}

void CFURLStopAccessingSecurityScopedResource(CFURLRef url)
{
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

uint64_t CPFileBuildDirectoriesToPath()
{
  return MEMORY[0x1F41092F8]();
}

uint64_t CPRecordCopyChangedProperties()
{
  return MEMORY[0x1F41093C0]();
}

uint64_t CPRecordCopyProperty()
{
  return MEMORY[0x1F41093C8]();
}

uint64_t CPRecordCreate()
{
  return MEMORY[0x1F41093D0]();
}

uint64_t CPRecordCreateWithRecordID()
{
  return MEMORY[0x1F41093E0]();
}

uint64_t CPRecordGetCachedProperty()
{
  return MEMORY[0x1F41093E8]();
}

uint64_t CPRecordGetClass()
{
  return MEMORY[0x1F41093F0]();
}

uint64_t CPRecordGetID()
{
  return MEMORY[0x1F41093F8]();
}

uint64_t CPRecordGetIntegerProperty()
{
  return MEMORY[0x1F4109400]();
}

uint64_t CPRecordGetOriginalProperty()
{
  return MEMORY[0x1F4109408]();
}

uint64_t CPRecordGetProperty()
{
  return MEMORY[0x1F4109410]();
}

uint64_t CPRecordGetPropertyDescriptor()
{
  return MEMORY[0x1F4109418]();
}

uint64_t CPRecordGetStore()
{
  return MEMORY[0x1F4109420]();
}

uint64_t CPRecordGetTypeID()
{
  return MEMORY[0x1F4109428]();
}

uint64_t CPRecordInitializeProperty()
{
  return MEMORY[0x1F4109438]();
}

uint64_t CPRecordInvalidateRecord()
{
  return MEMORY[0x1F4109440]();
}

uint64_t CPRecordIsDeleted()
{
  return MEMORY[0x1F4109448]();
}

uint64_t CPRecordIsPendingAdd()
{
  return MEMORY[0x1F4109450]();
}

uint64_t CPRecordIsPendingChange()
{
  return MEMORY[0x1F4109458]();
}

uint64_t CPRecordMarkChanged()
{
  return MEMORY[0x1F4109460]();
}

uint64_t CPRecordMarkPropertyChanged()
{
  return MEMORY[0x1F4109468]();
}

uint64_t CPRecordProcessAddImmediate()
{
  return MEMORY[0x1F4109470]();
}

uint64_t CPRecordProcessChangesImmediate()
{
  return MEMORY[0x1F4109478]();
}

uint64_t CPRecordSetProperty()
{
  return MEMORY[0x1F4109480]();
}

uint64_t CPRecordStoreAddRecord()
{
  return MEMORY[0x1F4109498]();
}

uint64_t CPRecordStoreCopyAddedRecords()
{
  return MEMORY[0x1F41094A0]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClass()
{
  return MEMORY[0x1F41094A8]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWhere()
{
  return MEMORY[0x1F41094B0]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock()
{
  return MEMORY[0x1F41094B8]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter()
{
  return MEMORY[0x1F41094C0]();
}

uint64_t CPRecordStoreCopyChangedRecords()
{
  return MEMORY[0x1F41094C8]();
}

uint64_t CPRecordStoreCopyDeletedRecordIDsOfClass()
{
  return MEMORY[0x1F41094D0]();
}

uint64_t CPRecordStoreCopyDeletedRecords()
{
  return MEMORY[0x1F41094D8]();
}

uint64_t CPRecordStoreCopyInstancesOfClassWithUIDs()
{
  return MEMORY[0x1F41094E0]();
}

uint64_t CPRecordStoreCopyValueForProperty()
{
  return MEMORY[0x1F41094E8]();
}

uint64_t CPRecordStoreCountCachedRecords()
{
  return MEMORY[0x1F41094F0]();
}

uint64_t CPRecordStoreCreateColumnListWithAliasAndExtraColumns()
{
  return MEMORY[0x1F41094F8]();
}

uint64_t CPRecordStoreCreateJoinableSelectPrefixFromRecordDescriptor()
{
  return MEMORY[0x1F4109500]();
}

uint64_t CPRecordStoreCreateSelectPrefix()
{
  return MEMORY[0x1F4109510]();
}

uint64_t CPRecordStoreCreateSelectPrefixFromRecordDescriptor()
{
  return MEMORY[0x1F4109518]();
}

uint64_t CPRecordStoreCreateSelectStatement()
{
  return MEMORY[0x1F4109520]();
}

uint64_t CPRecordStoreCreateTablesForClass()
{
  return MEMORY[0x1F4109528]();
}

uint64_t CPRecordStoreCreateWithPathAndOptions()
{
  return MEMORY[0x1F4109538]();
}

uint64_t CPRecordStoreDeleteChangesForClassToIndexWhere()
{
  return MEMORY[0x1F4109540]();
}

uint64_t CPRecordStoreDeleteChangesForClassToIndexWhereWithBindBlock()
{
  return MEMORY[0x1F4109548]();
}

uint64_t CPRecordStoreDeleteChangesForClassToSequenceNumberWhere()
{
  return MEMORY[0x1F4109550]();
}

uint64_t CPRecordStoreDeleteChangesForClassWithIndices()
{
  return MEMORY[0x1F4109558]();
}

uint64_t CPRecordStoreDestroy()
{
  return MEMORY[0x1F4109560]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithBindBlockAndProperties()
{
  return MEMORY[0x1F4109570]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithBindBlockAndPropertiesA()
{
  return MEMORY[0x1F4109578]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties()
{
  return MEMORY[0x1F4109588]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesForClassWithProperties()
{
  return MEMORY[0x1F4109590]();
}

uint64_t CPRecordStoreGetChangesForClass()
{
  return MEMORY[0x1F4109598]();
}

uint64_t CPRecordStoreGetChangesForClassWithBindBlockAndProperties()
{
  return MEMORY[0x1F41095A0]();
}

uint64_t CPRecordStoreGetContext()
{
  return MEMORY[0x1F41095A8]();
}

uint64_t CPRecordStoreGetCountOfInstancesOfClassWithFilterAndBindBlock()
{
  return MEMORY[0x1F41095B8]();
}

uint64_t CPRecordStoreGetDatabase()
{
  return MEMORY[0x1F41095C0]();
}

uint64_t CPRecordStoreGetInstanceOfClassWithUID()
{
  return MEMORY[0x1F41095C8]();
}

uint64_t CPRecordStoreGetLastSequenceNumber()
{
  return MEMORY[0x1F41095D0]();
}

uint64_t CPRecordStoreGetRowidForRecordID()
{
  return MEMORY[0x1F41095E0]();
}

uint64_t CPRecordStoreGetSequenceNumber()
{
  return MEMORY[0x1F41095E8]();
}

uint64_t CPRecordStoreInvalidateCachedInstancesOfClass()
{
  return MEMORY[0x1F41095F8]();
}

uint64_t CPRecordStoreInvalidateCachedInstancesOfClassWithBlock()
{
  return MEMORY[0x1F4109600]();
}

uint64_t CPRecordStoreInvalidateCaches()
{
  return MEMORY[0x1F4109608]();
}

uint64_t CPRecordStoreIsLoggingChanges()
{
  return MEMORY[0x1F4109610]();
}

uint64_t CPRecordStoreLogChanges()
{
  return MEMORY[0x1F4109618]();
}

uint64_t CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType()
{
  return MEMORY[0x1F4109620]();
}

uint64_t CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType()
{
  return MEMORY[0x1F4109628]();
}

uint64_t CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionTypeMatchingPredicate()
{
  return MEMORY[0x1F4109630]();
}

uint64_t CPRecordStoreProcessStatement()
{
  return MEMORY[0x1F4109650]();
}

uint64_t CPRecordStoreProcessStatementWithPropertyIndices()
{
  return MEMORY[0x1F4109658]();
}

uint64_t CPRecordStoreRemoveRecord()
{
  return MEMORY[0x1F4109670]();
}

uint64_t CPRecordStoreRevert()
{
  return MEMORY[0x1F4109680]();
}

uint64_t CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType()
{
  return MEMORY[0x1F4109690]();
}

uint64_t CPRecordStoreSetContext()
{
  return MEMORY[0x1F4109698]();
}

uint64_t CPRecordStoreSetSetupHandler()
{
  return MEMORY[0x1F41096A0]();
}

uint64_t CPRecordUnloadProperty()
{
  return MEMORY[0x1F41096B0]();
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1F41096C8]();
}

uint64_t CPSqliteConnectionBegin()
{
  return MEMORY[0x1F41096D8]();
}

uint64_t CPSqliteConnectionBeginTransactionType()
{
  return MEMORY[0x1F41096E0]();
}

uint64_t CPSqliteConnectionCommit()
{
  return MEMORY[0x1F41096E8]();
}

uint64_t CPSqliteConnectionCopyValueForProperty()
{
  return MEMORY[0x1F41096F0]();
}

uint64_t CPSqliteConnectionDatabaseVersion()
{
  return MEMORY[0x1F41096F8]();
}

uint64_t CPSqliteConnectionEnableProgressHandlerCallback()
{
  return MEMORY[0x1F4109708]();
}

uint64_t CPSqliteConnectionGetActiveTransactionType()
{
  return MEMORY[0x1F4109718]();
}

uint64_t CPSqliteConnectionIntegerForProperty()
{
  return MEMORY[0x1F4109720]();
}

uint64_t CPSqliteConnectionIntegerForPropertyWithDefaultValue()
{
  return MEMORY[0x1F4109728]();
}

uint64_t CPSqliteConnectionPerformSQL()
{
  return MEMORY[0x1F4109730]();
}

uint64_t CPSqliteConnectionRemoveProperty()
{
  return MEMORY[0x1F4109738]();
}

uint64_t CPSqliteConnectionRollback()
{
  return MEMORY[0x1F4109740]();
}

uint64_t CPSqliteConnectionRowidOfLastInsert()
{
  return MEMORY[0x1F4109748]();
}

uint64_t CPSqliteConnectionSetIntegerForProperty()
{
  return MEMORY[0x1F4109750]();
}

uint64_t CPSqliteConnectionSetValueForProperty()
{
  return MEMORY[0x1F4109758]();
}

uint64_t CPSqliteConnectionStatementForSQL()
{
  return MEMORY[0x1F4109760]();
}

uint64_t CPSqliteDatabaseConnectionForReading()
{
  return MEMORY[0x1F4109768]();
}

uint64_t CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags()
{
  return MEMORY[0x1F4109770]();
}

uint64_t CPSqliteDatabaseConnectionForWriting()
{
  return MEMORY[0x1F4109778]();
}

uint64_t CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags()
{
  return MEMORY[0x1F4109780]();
}

uint64_t CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlagsAndReturnError()
{
  return MEMORY[0x1F4109788]();
}

uint64_t CPSqliteDatabaseCopyUniqueIdentifier()
{
  return MEMORY[0x1F4109790]();
}

uint64_t CPSqliteDatabaseGetStatementCacheLimit()
{
  return MEMORY[0x1F41097A8]();
}

uint64_t CPSqliteDatabaseRegisterMatchesSearchStringByWordFunction()
{
  return MEMORY[0x1F41097B8]();
}

uint64_t CPSqliteDatabaseRegisterMatchesSearchStringFunction()
{
  return MEMORY[0x1F41097C0]();
}

uint64_t CPSqliteDatabaseReleaseSqliteConnection()
{
  return MEMORY[0x1F41097C8]();
}

uint64_t CPSqliteDatabaseReleaseSqliteStatement()
{
  return MEMORY[0x1F41097D0]();
}

uint64_t CPSqliteDatabaseSetAutoVacuumLevel()
{
  return MEMORY[0x1F41097E8]();
}

uint64_t CPSqliteDatabaseSetCommitHookCallback()
{
  return MEMORY[0x1F41097F0]();
}

uint64_t CPSqliteDatabaseSetCorruptionHandler()
{
  return MEMORY[0x1F4109800]();
}

uint64_t CPSqliteDatabaseSetDataProtectionLevel()
{
  return MEMORY[0x1F4109808]();
}

uint64_t CPSqliteDatabaseSetDatabaseDeletedCallback()
{
  return MEMORY[0x1F4109810]();
}

uint64_t CPSqliteDatabaseSetExternalConversionChecker()
{
  return MEMORY[0x1F4109818]();
}

uint64_t CPSqliteDatabaseSetJournalModeWAL()
{
  return MEMORY[0x1F4109820]();
}

uint64_t CPSqliteDatabaseSetMigrationHandlers()
{
  return MEMORY[0x1F4109828]();
}

uint64_t CPSqliteDatabaseSetMigrationPluginBundleID()
{
  return MEMORY[0x1F4109830]();
}

uint64_t CPSqliteDatabaseSetProfileCallbackWithContext()
{
  return MEMORY[0x1F4109838]();
}

uint64_t CPSqliteDatabaseSetShouldMigrateInProcess()
{
  return MEMORY[0x1F4109840]();
}

uint64_t CPSqliteDatabaseSetShouldRequestUnlock()
{
  return MEMORY[0x1F4109848]();
}

uint64_t CPSqliteDatabaseSetShouldYieldWhenRequested()
{
  return MEMORY[0x1F4109858]();
}

uint64_t CPSqliteDatabaseSetStatementCacheLimit()
{
  return MEMORY[0x1F4109860]();
}

uint64_t CPSqliteDatabaseSetStatementCompileErrorCallback()
{
  return MEMORY[0x1F4109868]();
}

uint64_t CPSqliteDatabaseSetSupportsReadOnlyConnections()
{
  return MEMORY[0x1F4109870]();
}

uint64_t CPSqliteDatabaseSetVersion()
{
  return MEMORY[0x1F4109878]();
}

uint64_t CPSqliteDatabaseStatementForReading()
{
  return MEMORY[0x1F4109880]();
}

uint64_t CPSqliteDatabaseStatementForWriting()
{
  return MEMORY[0x1F4109888]();
}

uint64_t CPSqliteDatabaseUnlockRequested()
{
  return MEMORY[0x1F4109890]();
}

uint64_t CPSqliteRegisterYieldNotifyBlock()
{
  return MEMORY[0x1F4109898]();
}

uint64_t CPSqliteStatementCopyStringResult()
{
  return MEMORY[0x1F41098B8]();
}

uint64_t CPSqliteStatementInteger64Result()
{
  return MEMORY[0x1F41098C0]();
}

uint64_t CPSqliteStatementIntegerResult()
{
  return MEMORY[0x1F41098C8]();
}

uint64_t CPSqliteStatementPerform()
{
  return MEMORY[0x1F41098D0]();
}

uint64_t CPSqliteStatementReset()
{
  return MEMORY[0x1F41098E0]();
}

uint64_t CPSqliteStatementSendResults()
{
  return MEMORY[0x1F41098E8]();
}

uint64_t CPSqliteUtilitiesGetSchemaVersionAtPath()
{
  return MEMORY[0x1F41098F0]();
}

uint64_t CalAbsoluteTimeAddGregorianUnits()
{
  return MEMORY[0x1F410F1F8]();
}

uint64_t CalAbsoluteTimeGetAbsoluteTimeInCalTimeZone()
{
  return MEMORY[0x1F410F200]();
}

uint64_t CalAbsoluteTimeGetAbsoluteTimeInTimeZone()
{
  return MEMORY[0x1F410F208]();
}

uint64_t CalAbsoluteTimeGetDayOfWeek()
{
  return MEMORY[0x1F410F210]();
}

uint64_t CalAbsoluteTimeGetDaysInYear()
{
  return MEMORY[0x1F410F218]();
}

uint64_t CalAbsoluteTimeGetGregorianDateForWeek()
{
  return MEMORY[0x1F410F228]();
}

uint64_t CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone()
{
  return MEMORY[0x1F410F230]();
}

uint64_t CalAbsoluteTimeGetTimeForStartOfDay()
{
  return MEMORY[0x1F410F238]();
}

uint64_t CalAbsoluteTimeGetWeekOfYear()
{
  return MEMORY[0x1F410F240]();
}

uint64_t CalAbsoluteTimeGetWeeksInYear()
{
  return MEMORY[0x1F410F248]();
}

uint64_t CalAnalyticsSendEvent()
{
  return MEMORY[0x1F410F260]();
}

uint64_t CalAnalyticsSendEventLazy()
{
  return MEMORY[0x1F410F268]();
}

uint64_t CalBooleanAsString()
{
  return MEMORY[0x1F410F280]();
}

uint64_t CalCFTimeZoneCopyCalTimeZone()
{
  return MEMORY[0x1F410F288]();
}

uint64_t CalCopyCalendar()
{
  return MEMORY[0x1F410F2A0]();
}

uint64_t CalCopyDefaultTimeZone()
{
  return MEMORY[0x1F410F2A8]();
}

uint64_t CalCopySystemTimeZone()
{
  return MEMORY[0x1F410F2B0]();
}

uint64_t CalCopyTimeZone()
{
  return MEMORY[0x1F410F2B8]();
}

uint64_t CalDateTimeGetAbsoluteTime()
{
  return MEMORY[0x1F410F2C0]();
}

uint64_t CalDateTimeGetGregorianDate()
{
  return MEMORY[0x1F410F2C8]();
}

uint64_t CalDateTimeRelease()
{
  return MEMORY[0x1F410F2D0]();
}

uint64_t CalDateTimeSetTimeZone()
{
  return MEMORY[0x1F410F2D8]();
}

uint64_t CalEqualStrings()
{
  return MEMORY[0x1F410F2E8]();
}

uint64_t CalGenerateUUID()
{
  return MEMORY[0x1F410F2F8]();
}

uint64_t CalGregorianDateAddDays()
{
  return MEMORY[0x1F410F308]();
}

uint64_t CalGregorianDateAddUnits()
{
  return MEMORY[0x1F410F310]();
}

uint64_t CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone()
{
  return MEMORY[0x1F410F320]();
}

uint64_t CalGregorianDateGetDaysInMonth()
{
  return MEMORY[0x1F410F328]();
}

uint64_t CalGregorianDateGetGregorianDateForDay()
{
  return MEMORY[0x1F410F330]();
}

uint64_t CalGregorianDateGetGregorianDateForMonth()
{
  return MEMORY[0x1F410F338]();
}

uint64_t CalGregorianDateGetGregorianDateForYear()
{
  return MEMORY[0x1F410F340]();
}

uint64_t CalGregorianDateGetNull()
{
  return MEMORY[0x1F410F348]();
}

uint64_t CalIsReminderBridgeEnabled()
{
  return MEMORY[0x1F410F350]();
}

uint64_t CalMonotonicTime()
{
  return MEMORY[0x1F410F358]();
}

uint64_t CalSetDefaultTimeZone()
{
  return MEMORY[0x1F410F370]();
}

uint64_t CalTemporaryDirectory()
{
  return MEMORY[0x1F410F380]();
}

uint64_t CalTimeZoneCopyCFTimeZone()
{
  return MEMORY[0x1F410F388]();
}

uint64_t EKGetApexDefaultCalendarColors()
{
  return MEMORY[0x1F410F3C0]();
}

uint64_t EKGetBrightonCalendarColors()
{
  return MEMORY[0x1F410F3C8]();
}

uint64_t EKGetDefaultCalendarColors()
{
  return MEMORY[0x1F410F3D0]();
}

uint64_t EKGetFacebookCalendarColor()
{
  return MEMORY[0x1F410F3D8]();
}

uint64_t EKGetSnowLeopardDefaultCalendarColors()
{
  return MEMORY[0x1F410F3E0]();
}

uint64_t EKGetWildcatDefaultCalendarColors()
{
  return MEMORY[0x1F410F3E8]();
}

uint64_t EKGregorianDateGetAbsoluteTimeWithCFTimeZone()
{
  return MEMORY[0x1F410F3F0]();
}

uint64_t EKWeakLinkClass()
{
  return MEMORY[0x1F410F400]();
}

uint64_t NSDateFromICSValueInTimeZone()
{
  return MEMORY[0x1F410F418]();
}

void NSLog(NSString *format, ...)
{
}

uint64_t UnzipArchive()
{
  return MEMORY[0x1F410F420]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _CPCreateUTF8StringFromCFString()
{
  return MEMORY[0x1F4109948]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x1F40C9CE8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0B0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

uint64_t ct_green_tea_logger_create_static()
{
  return MEMORY[0x1F417A380]();
}

uint64_t ct_green_tea_logging_enabled()
{
  return MEMORY[0x1F417A390]();
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

uint64_t doURLsEmailsPhoneNumbersMatch()
{
  return MEMORY[0x1F410F430]();
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x1F417A398]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCDE0](a1);
}

int mkstemp(char *a1)
{
  return MEMORY[0x1F40CCE08](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1F40CDA18](a1, a2, a3);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x1F40CDB68](a1, *(void *)&a2, a3);
}

int sched_get_priority_min(int a1)
{
  return MEMORY[0x1F40CDEC0](*(void *)&a1);
}

int sqlite3_backup_finish(sqlite3_backup *p)
{
  return MEMORY[0x1F4181F68](p);
}

sqlite3_backup *__cdecl sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
{
  return (sqlite3_backup *)MEMORY[0x1F4181F70](pDest, zDestName, pSource, zSourceName);
}

int sqlite3_backup_step(sqlite3_backup *p, int nPage)
{
  return MEMORY[0x1F4181F88](p, *(void *)&nPage);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x1F4182050](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F4182088](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1F41820B0](a1, *(void *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

sqlite3_value *__cdecl sqlite3_column_value(sqlite3_stmt *a1, int iCol)
{
  return (sqlite3_value *)MEMORY[0x1F41820E0](a1, *(void *)&iCol);
}

int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return MEMORY[0x1F4182118](db, zFunctionName, *(void *)&nArg, *(void *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x1F41821A0](*(void *)&a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  return MEMORY[0x1F41821C0](db);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1F41821D0](a1, zDbName, *(void *)&op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
}

void sqlite3_result_null(sqlite3_context *a1)
{
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
}

void *__cdecl sqlite3_rollback_hook(sqlite3 *a1, void (__cdecl *a2)(void *), void *a3)
{
  return (void *)MEMORY[0x1F4182348](a1, a2, a3);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1F4182408](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1F4182410](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1F4182418](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  MEMORY[0x1F4182428](a1);
  return result;
}

sqlite3_value *__cdecl sqlite3_value_dup(const sqlite3_value *a1)
{
  return (sqlite3_value *)MEMORY[0x1F4182430](a1);
}

void sqlite3_value_free(sqlite3_value *a1)
{
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1F4182440](a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x1F4182448](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1F4182458](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1F4182468](a1);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return MEMORY[0x1F4182490](db, zDb, *(void *)&eMode, pnLog, pnCkpt);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

uint64_t symbolicColorForLegacyRGB()
{
  return MEMORY[0x1F4177BE8]();
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1F40CEC68](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF320](value);
}