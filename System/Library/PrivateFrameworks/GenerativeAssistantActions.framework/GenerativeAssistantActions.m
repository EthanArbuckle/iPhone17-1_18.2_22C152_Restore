uint64_t dispatch thunk of ScreenLockChecking.isScreenLocked()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for ScreenLockChecker()
{
  return &type metadata for ScreenLockChecker;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UIUserInterfaceIdiom(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PHAssetExportRequestFileURLKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance PHAssetExportRequestFileURLKey(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PHAssetExportRequestFileURLKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PHAssetExportRequestFileURLKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance PHAssetExportRequestFileURLKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance PHAssetExportRequestFileURLKey(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PHAssetExportRequestFileURLKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance PHAssetExportRequestFileURLKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance PHAssetExportRequestFileURLKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PHAssetExportRequestFileURLKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x2533691D0](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PHAssetExportRequestFileURLKey()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PHAssetExportRequestFileURLKey@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x2533691D0](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PHAssetExportRequestFileURLKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance PHAssetExportRequestFileURLKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey((unint64_t *)&lazy protocol witness table cache variable for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey);
  uint64_t v3 = lazy protocol witness table accessor for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey(&lazy protocol witness table cache variable for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

BOOL specialized ScreenLockChecker.isScreenLocked()()
{
  int v0 = MKBGetDeviceLockState();
  if (one-time initialization token for screenshot != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.screenshot);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v2, v3, "MKBGetDeviceLockState: %d", v4, 8u);
    MEMORY[0x25336A180](v4, -1, -1);
  }

  return v0 == 1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for CGRect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CGRect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for PHAssetExportRequestFileURLKey(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for PHAssetExportRequestErrorCode(uint64_t a1)
{
}

void type metadata accessor for CGRect(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for RawRepresentable in PHAssetExportRequestFileURLKey()
{
  return lazy protocol witness table accessor for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey(&lazy protocol witness table cache variable for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in PHAssetExportRequestFileURLKey()
{
  return lazy protocol witness table accessor for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey(&lazy protocol witness table cache variable for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey);
}

uint64_t lazy protocol witness table accessor for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PHAssetExportRequestFileURLKey(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PHAssetExportRequestFileURLKey()
{
  return lazy protocol witness table accessor for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey(&lazy protocol witness table cache variable for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey);
}

void one-time initialization function for NO_DIALOG()
{
  NO_DIALOG._rawValue = &outlined read-only object #0 of one-time initialization function for NO_DIALOG;
}

uint64_t ModelResponse.dialog(mode:useCaseID:config:isFirstRequest:)(unsigned __int8 *a1, uint64_t a2, Swift::Int *a3, int a4)
{
  int v38 = a4;
  v41 = a3;
  uint64_t v39 = a2;
  uint64_t v6 = type metadata accessor for GenerativeAssistantUseCase();
  uint64_t v40 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  v8 = &v37[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned int v13 = *a1;
  uint64_t v14 = type metadata accessor for ModelResponse();
  uint64_t v15 = String.withoutEmoji.getter(*(void *)(v4 + *(int *)(v14 + 44)), *(void *)(v4 + *(int *)(v14 + 44) + 8));
  uint64_t v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring));
  Regex.init(_regexString:version:)();
  uint64_t v44 = v15;
  uint64_t v45 = v17;
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  lazy protocol witness table accessor for type Regex<(Substring, Substring)> and conformance Regex<A>();
  RangeReplaceableCollection<>.replacing<A, B, C>(_:maxReplacements:with:)();
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  v18 = v41;
  swift_bridgeObjectRelease();
  uint64_t v20 = v46;
  uint64_t v19 = v47;
  Swift::Int v21 = *v18;
  swift_bridgeObjectRetain();
  BOOL v22 = String.isLongerThan(num:unit:)(v21, NLTokenUnitWord);
  if (v13 < 2)
  {
    uint64_t v23 = v40;
    (*(void (**)(unsigned char *, void, uint64_t))(v40 + 104))(v8, *MEMORY[0x263F406F8], v6);
    lazy protocol witness table accessor for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v44 == v42 && v45 == v43)
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v8, v6);
    }
    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v8, v6);
      if ((v29 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    BOOL v30 = String.isLongerThan(num:unit:)(v18[1], NLTokenUnitSentence);
    swift_bridgeObjectRelease();
    if (v30 || v22)
    {
      if (one-time initialization token for intent != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.intent);
      v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_24F9A2000, v32, v33, "ModelResponse#dialog ReadableResponse too long in composition mode, setting to short response", v34, 2u);
        MEMORY[0x25336A180](v34, -1, -1);
      }

      String.setSentToiOSResponse()();
      goto LABEL_23;
    }
LABEL_22:
    String.addVoiceModesDisclaimer(isLongResponse:isFirstRequest:)(v22, v38 & 1);
LABEL_23:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t rawValue = swift_allocObject();
    *(_OWORD *)(rawValue + 16) = xmmword_24FA3E1D0;
    uint64_t v35 = v47;
    *(void *)(rawValue + 32) = v46;
    *(void *)(rawValue + 40) = v35;
    return rawValue;
  }
  if (v13 == 2)
  {
    Swift::Bool v24 = String.isLongerThan(num:unit:)(v18[1], NLTokenUnitSentence);
    swift_bridgeObjectRelease();
    BOOL v25 = v24 || v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v26 = swift_allocObject();
    uint64_t rawValue = v26;
    *(_OWORD *)(v26 + 16) = xmmword_24FA3E1D0;
    if (!v25)
    {
      *(void *)(v26 + 32) = v20;
      *(void *)(v26 + 40) = v19;
      return rawValue;
    }
    Swift::Int v28 = v18[4];
    *(void *)(rawValue + 32) = v18[3];
    *(void *)(rawValue + 40) = v28;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for NO_DIALOG != -1) {
      swift_once();
    }
    uint64_t rawValue = (uint64_t)NO_DIALOG._rawValue;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return rawValue;
}

Swift::Void __swiftcall String.setSentToiOSResponse()()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  if (v2)
  {
    char v3 = v0;
    swift_bridgeObjectRelease();
    id v4 = objc_msgSend(self, sel_currentDevice);
    id v5 = objc_msgSend(v4, sel_userInterfaceIdiom);

    if (v5)
    {
      if (one-time initialization token for intent != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.intent);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_24F9A2000, v7, v8, "String#setSentToiOSResponse setting iPad response", v9, 2u);
        MEMORY[0x25336A180](v9, -1, -1);
      }

      *char v3 = 0xD00000000000002BLL;
      v3[1] = 0x800000024FA413A0;
    }
    else
    {
      if (one-time initialization token for intent != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.intent);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_24F9A2000, v14, v15, "String#setSentToiOSResponse setting iPhone response", v16, 2u);
        MEMORY[0x25336A180](v16, -1, -1);
      }

      *char v3 = 0xD00000000000002DLL;
      v3[1] = 0x800000024FA41370;
    }
  }
  else
  {
    if (one-time initialization token for intent != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.intent);
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_24F9A2000, oslog, v11, "String#setSentToiOSResponse handling empty string", v12, 2u);
      MEMORY[0x25336A180](v12, -1, -1);
    }
  }
}

Swift::Void __swiftcall String.addVoiceModesDisclaimer(isLongResponse:isFirstRequest:)(Swift::Bool isLongResponse, Swift::Bool isFirstRequest)
{
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v5 = *v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    if (isLongResponse)
    {
      if (isFirstRequest)
      {
        if (one-time initialization token for longResultFirstTimeDisclaimerDialog != -1) {
          swift_once();
        }
        uint64_t v6 = &static Disclaimer.longResultFirstTimeDisclaimerDialog;
      }
      else
      {
        if (one-time initialization token for longResultSubsequentDisclaimerDialog != -1) {
          swift_once();
        }
        uint64_t v6 = &static Disclaimer.longResultSubsequentDisclaimerDialog;
      }
      uint64_t v17 = *v6;
      uint64_t v19 = v6[1];
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = 32;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      swift_bridgeObjectRetain();
      v11._countAndFlagsBits = v4;
      v11._object = (void *)v3;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (isFirstRequest)
      {
        uint64_t v16 = *v2;
        swift_bridgeObjectRetain();
        v7._countAndFlagsBits = 32;
        v7._object = (void *)0xE100000000000000;
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
        uint64_t v8 = v16;
        if (one-time initialization token for shortResultFirstTimeDisclaimerDialog != -1)
        {
          swift_once();
          uint64_t v8 = v16;
        }
        uint64_t v9 = &static Disclaimer.shortResultFirstTimeDisclaimerDialog;
      }
      else
      {
        uint64_t v18 = *v2;
        swift_bridgeObjectRetain();
        v12._countAndFlagsBits = 32;
        v12._object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
        uint64_t v8 = v18;
        if (one-time initialization token for shortResultSubsequentDisclaimerDialog != -1)
        {
          swift_once();
          uint64_t v8 = v18;
        }
        uint64_t v9 = &static Disclaimer.shortResultSubsequentDisclaimerDialog;
      }
      uint64_t v13 = *v9;
      uint64_t v14 = (void *)v9[1];
      uint64_t v17 = v8;
      uint64_t v19 = v3;
      swift_bridgeObjectRetain();
      v15._countAndFlagsBits = v13;
      v15._object = v14;
      String.append(_:)(v15);
    }
    swift_bridgeObjectRelease();
    *uint64_t v2 = v17;
    v2[1] = v19;
  }
}

uint64_t Optional<A>.asGATInteractionMode.getter@<X0>(char *a1@<X8>)
{
  void (*v16)(uint64_t *__return_ptr, id);
  id v17;
  void *v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  int v42;
  char v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char v65;

  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  Swift::String v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = type metadata accessor for Logger();
  v60 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  Swift::String v15 = (char *)&v57 - v14;
  if (one-time initialization token for _interactionMode != -1) {
    swift_once();
  }
  if ((byte_269A45768 & 1) == 0) {
    goto LABEL_16;
  }
  v61 = a1;
  uint64_t v16 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A45750 + 1);
  uint64_t v17 = (id)static Overrides._interactionMode;
  swift_bridgeObjectRetain();
  swift_retain();
  v16(&v63, v17);
  a1 = v61;
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v18 = v64;
  if (!v64)
  {
LABEL_16:
    outlined init with copy of IntentSystemContext.AssistantContext.InteractionMode?(v2, (uint64_t)v9);
    v37 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
    int v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v9, 1, v37) == 1)
    {
      if (one-time initialization token for intent != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v10, (uint64_t)static Logger.intent);
      uint64_t v39 = Logger.logObject.getter();
      uint64_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_24F9A2000, v39, v40, "Nil interaction mode -- defaulting to displayOnly", v41, 2u);
        MEMORY[0x25336A180](v41, -1, -1);
      }

      *a1 = 3;
      return outlined destroy of IntentSystemContext.AssistantContext.InteractionMode?((uint64_t)v9);
    }
    outlined init with copy of IntentSystemContext.AssistantContext.InteractionMode?((uint64_t)v9, (uint64_t)v7);
    uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v7, v37);
    if (v42 == *MEMORY[0x263EFBB78])
    {
      uint64_t v43 = 2;
LABEL_36:
      v65 = v43;
      goto LABEL_37;
    }
    if (v42 != *MEMORY[0x263EFBB68])
    {
      if (v42 == *MEMORY[0x263EFBB80])
      {
        v65 = 0;
LABEL_37:
        outlined destroy of IntentSystemContext.AssistantContext.InteractionMode?((uint64_t)v9);
        if (one-time initialization token for intent != -1) {
          swift_once();
        }
        uint64_t v47 = __swift_project_value_buffer(v10, (uint64_t)static Logger.intent);
        v48 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v13, v47, v10);
        v49 = v65;
        v50 = Logger.logObject.getter();
        v51 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v50, v51))
        {
          v52 = swift_slowAlloc();
          v61 = a1;
          v53 = v48;
          v54 = (uint8_t *)v52;
          v55 = swift_slowAlloc();
          *(_DWORD *)v54 = 136315138;
          v56 = *(void *)&aVoiceonlvoicef[8 * v49];
          v63 = v55;
          v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, *(void *)&aVoiceonlvoicef[8 * v49 + 32], &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24F9A2000, v50, v51, "Using interaction mode %s", v54, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v55, -1, -1);
          MEMORY[0x25336A180](v54, -1, -1);

          (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v10);
          a1 = v61;
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v10);
        }
        uint64_t result = swift_beginAccess();
        *a1 = v65;
        return result;
      }
      if (v42 == *MEMORY[0x263EFBB70])
      {
        uint64_t v43 = 1;
        goto LABEL_36;
      }
      (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v37);
      if (one-time initialization token for intent != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v10, (uint64_t)static Logger.intent);
      uint64_t v44 = Logger.logObject.getter();
      uint64_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl(&dword_24F9A2000, v44, v45, "Unsupported interaction mode -- defaulting to displayOnly", v46, 2u);
        MEMORY[0x25336A180](v46, -1, -1);
      }
    }
    uint64_t v43 = 3;
    goto LABEL_36;
  }
  uint64_t v19 = v63;
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = v19;
  v20._object = v18;
  GATInteractionMode.init(rawValue:)(v20);
  Swift::Int v21 = (char)v63;
  if ((char)v63 == 4)
  {
    if (one-time initialization token for intent != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v10, (uint64_t)static Logger.intent);
    swift_bridgeObjectRetain();
    BOOL v22 = Logger.logObject.getter();
    uint64_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      Swift::Bool v24 = (uint8_t *)swift_slowAlloc();
      v59 = swift_slowAlloc();
      v63 = v59;
      v58 = v24;
      *(_DWORD *)Swift::Bool v24 = 136315138;
      v57 = v24 + 4;
      swift_bridgeObjectRetain();
      v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, (unint64_t)v18, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      BOOL v25 = v23;
      uint64_t v26 = v58;
      _os_log_impl(&dword_24F9A2000, v22, v25, "Invalid interaction mode override: %s", v58, 0xCu);
      v27 = v59;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v27, -1, -1);
      MEMORY[0x25336A180](v26, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a1 = v61;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for intent != -1) {
    swift_once();
  }
  Swift::Int v28 = __swift_project_value_buffer(v10, (uint64_t)static Logger.intent);
  char v29 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v15, v28, v10);
  BOOL v30 = Logger.logObject.getter();
  uint64_t v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc();
    LODWORD(v59) = v21;
    os_log_type_t v33 = (uint8_t *)v32;
    v34 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v33 = 136315138;
    uint64_t v35 = *(void *)&aVoiceonlvoicef[8 * v21];
    v63 = v34;
    v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, *(void *)&aVoiceonlvoicef[8 * v21 + 32], &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24F9A2000, v30, v31, "Using interaction mode override: %s", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v34, -1, -1);
    MEMORY[0x25336A180](v33, -1, -1);

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v15, v10);
    *v61 = v59;
  }
  else
  {

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v15, v10);
    *v61 = v21;
  }
  return result;
}

uint64_t IntentDialog.init(fullAndSupportingString:)()
{
  type metadata accessor for LocalizedStringResource();
  uint64_t v0 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  MEMORY[0x270FA5388](v0);
  swift_bridgeObjectRetain();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  return IntentDialog.init(full:supporting:)();
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined init with copy of IntentSystemContext.AssistantContext.InteractionMode?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IntentSystemContext.AssistantContext.InteractionMode?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Regex<(Substring, Substring)> and conformance Regex<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Regex<(Substring, Substring)> and conformance Regex<A>;
  if (!lazy protocol witness table cache variable for type Regex<(Substring, Substring)> and conformance Regex<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Regex<(Substring, Substring)> and conformance Regex<A>);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase()
{
  unint64_t result = lazy protocol witness table cache variable for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase;
  if (!lazy protocol witness table cache variable for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase)
  {
    type metadata accessor for GenerativeAssistantUseCase();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase);
  }
  return result;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ScreenshotRequestProviding.handleScreenshot(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t ScreenshotRequest.__deallocating_deinit()
{
  outlined destroy of ShortcutsScreenshotProviding?(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScreenshotRequest()
{
  return self;
}

uint64_t outlined destroy of ShortcutsScreenshotProviding?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShortcutsScreenshotProviding?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double one-time initialization function for _modelMaximumTokens()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000012;
  *(void *)(v0 + 24) = 0x800000024FA41CD0;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000012, 0x800000024FA41CD0, 0, 0, (uint64_t)closure #1 in Overridable<A>.init(key:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._modelMaximumTokens = v2[0];
  *(void *)algn_269A45688 = v2[1];
  xmmword_269A45690 = v3;
  qword_269A456A0 = v4;
  byte_269A456A8 = v5;
  return result;
}

double one-time initialization function for _modelRandomSeed()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0x6E61526C65646F6DLL;
  *(void *)(v0 + 24) = 0xEF646565536D6F64;
  specialized Overridable.init(key:defaultValue:get:)(0x6E61526C65646F6DLL, 0xEF646565536D6F64, 0, 0, (uint64_t)closure #1 in Overridable<A>.init(key:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._modelRandomSeed = v2[0];
  *(void *)algn_269A456B8 = v2[1];
  xmmword_269A456C0 = v3;
  qword_269A456D0 = v4;
  byte_269A456D8 = v5;
  return result;
}

double one-time initialization function for _maxImageSizeLong()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000010;
  *(void *)(v0 + 24) = 0x800000024FA41C50;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000010, 0x800000024FA41C50, 0, 0, (uint64_t)closure #1 in Overridable<A>.init(key:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._maxImageSizeLong = v2[0];
  *(void *)algn_269A456E8 = v2[1];
  xmmword_269A456F0 = v3;
  qword_269A45700 = v4;
  byte_269A45708 = v5;
  return result;
}

double one-time initialization function for _maxImageSizeShort()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000011;
  *(void *)(v0 + 24) = 0x800000024FA41C10;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000011, 0x800000024FA41C10, 0, 0, (uint64_t)partial apply for closure #1 in Overridable<A>.init(key:), v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._maxImageSizeShort = v2[0];
  *(void *)algn_269A45718 = v2[1];
  xmmword_269A45720 = v3;
  qword_269A45730 = v4;
  byte_269A45738 = v5;
  return result;
}

double one-time initialization function for _interactionMode()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0x7463617265746E69;
  *(void *)(v0 + 24) = 0xEF65646F4D6E6F69;
  specialized Overridable.init(key:defaultValue:get:)(0x7463617265746E69, 0xEF65646F4D6E6F69, 0, 0, (uint64_t)closure #1 in Overridable<A>.init(key:defaultValue:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._interactionMode = v2[0];
  *(void *)algn_269A45748 = v2[1];
  xmmword_269A45750 = v3;
  qword_269A45760 = v4;
  byte_269A45768 = v5;
  return result;
}

uint64_t static Overrides.showMockWebSources.getter()
{
  void (*v0)(uint64_t *__return_ptr, id);
  id v1;
  uint64_t v3;

  if (one-time initialization token for _showMockWebSources != -1) {
    swift_once();
  }
  if (byte_269A45798 != 1) {
    return 2;
  }
  uint64_t v0 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A45780 + 1);
  uint64_t v1 = (id)static Overrides._showMockWebSources;
  swift_bridgeObjectRetain();
  swift_retain();
  v0(&v3, v1);
  swift_release();
  swift_bridgeObjectRelease();

  return v3;
}

double one-time initialization function for _showMockWebSources()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000012;
  *(void *)(v0 + 24) = 0x800000024FA41DF0;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000012, 0x800000024FA41DF0, 0, 0, (uint64_t)closure #1 in Overridable<A>.init(key:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._showMockWebSources = v2[0];
  *(void *)algn_269A45778 = v2[1];
  xmmword_269A45780 = v3;
  qword_269A45790 = v4;
  byte_269A45798 = v5;
  return result;
}

double one-time initialization function for _disableKnowledgeConfirmation()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD00000000000001CLL;
  *(void *)(v0 + 24) = 0x800000024FA41C70;
  specialized Overridable.init(key:defaultValue:get:)(0xD00000000000001CLL, 0x800000024FA41C70, 0, 0, (uint64_t)partial apply for closure #1 in Overridable<A>.init(key:), v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._disableKnowledgeConfirmation = v2[0];
  *(void *)algn_269A457A8 = v2[1];
  xmmword_269A457B0 = v3;
  qword_269A457C0 = v4;
  byte_269A457C8 = v5;
  return result;
}

uint64_t static Overrides.disableTextCompositionConfirmation.getter()
{
  void (*v0)(uint64_t *__return_ptr, id);
  id v1;
  uint64_t v3;

  if (one-time initialization token for _disableTextCompositionConfirmation != -1) {
    swift_once();
  }
  if (byte_269A457F8 != 1) {
    return 2;
  }
  uint64_t v0 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A457E0 + 1);
  uint64_t v1 = (id)static Overrides._disableTextCompositionConfirmation;
  swift_bridgeObjectRetain();
  swift_retain();
  v0(&v3, v1);
  swift_release();
  swift_bridgeObjectRelease();

  return v3;
}

double one-time initialization function for _disableTextCompositionConfirmation()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000022;
  *(void *)(v0 + 24) = 0x800000024FA41DC0;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000022, 0x800000024FA41DC0, 0, 0, (uint64_t)closure #1 in Overridable<A>.init(key:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._disableTextCompositionConfirmation = v2[0];
  *(void *)algn_269A457D8 = v2[1];
  xmmword_269A457E0 = v3;
  qword_269A457F0 = v4;
  byte_269A457F8 = v5;
  return result;
}

double one-time initialization function for _enableImageInline()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000011;
  *(void *)(v0 + 24) = 0x800000024FA41C90;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000011, 0x800000024FA41C90, 0, 0, (uint64_t)closure #1 in Overridable<A>.init(key:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._enableImageInline = v2[0];
  *(void *)algn_269A45808 = v2[1];
  xmmword_269A45810 = v3;
  qword_269A45820 = v4;
  byte_269A45828 = v5;
  return result;
}

double one-time initialization function for _compressionRatio()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000010;
  *(void *)(v0 + 24) = 0x800000024FA41D30;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000010, 0x800000024FA41D30, 0, 0, (uint64_t)partial apply for closure #1 in Overridable<A>.init(key:), v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._compressionRatio = v2[0];
  *(void *)algn_269A45838 = v2[1];
  xmmword_269A45840 = v3;
  qword_269A45850 = v4;
  byte_269A45858 = v5;
  return result;
}

double one-time initialization function for _enableWebSources()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000010;
  *(void *)(v0 + 24) = 0x800000024FA41CB0;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000010, 0x800000024FA41CB0, 0, 0, (uint64_t)closure #1 in Overridable<A>.init(key:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._enableWebSources = v2[0];
  *(void *)algn_269A45868 = v2[1];
  xmmword_269A45870 = v3;
  qword_269A45880 = v4;
  byte_269A45888 = v5;
  return result;
}

double one-time initialization function for _tamalePromptOverridePath()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000018;
  *(void *)(v0 + 24) = 0x800000024FA41D10;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000018, 0x800000024FA41D10, 0, 0, (uint64_t)closure #1 in Overridable<A>.init(key:defaultValue:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._tamalePromptOverridePath = v2[0];
  *(void *)algn_269A45898 = v2[1];
  xmmword_269A458A0 = v3;
  qword_269A458B0 = v4;
  byte_269A458B8 = v5;
  return result;
}

uint64_t static Overrides.tamaleAppDebugPromptOverridePath.getter()
{
  void (*v0)(uint64_t *__return_ptr, id);
  id v1;
  uint64_t v3;

  if (one-time initialization token for _tamaleAppDebugPromptOverridePath != -1) {
    swift_once();
  }
  if (byte_269A458E8 != 1) {
    return 0;
  }
  uint64_t v0 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A458D0 + 1);
  uint64_t v1 = (id)static Overrides._tamaleAppDebugPromptOverridePath;
  swift_bridgeObjectRetain();
  swift_retain();
  v0(&v3, v1);
  swift_release();
  swift_bridgeObjectRelease();

  return v3;
}

double one-time initialization function for _tamaleAppDebugPromptOverridePath()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000020;
  *(void *)(v0 + 24) = 0x800000024FA41D50;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000020, 0x800000024FA41D50, 0xD000000000000033, 0x800000024FA41D80, (uint64_t)closure #1 in Overridable<A>.init(key:defaultValue:)partial apply, v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._tamaleAppDebugPromptOverridePath = v2[0];
  *(void *)algn_269A458C8 = v2[1];
  xmmword_269A458D0 = v3;
  qword_269A458E0 = v4;
  byte_269A458E8 = v5;
  return result;
}

ValueMetadata *type metadata accessor for Overrides()
{
  return &type metadata for Overrides;
}

double one-time initialization function for _systemPromptOverridePath()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000018;
  *(void *)(v0 + 24) = 0x800000024FA41CF0;
  specialized Overridable.init(key:defaultValue:get:)(0xD000000000000018, 0x800000024FA41CF0, 0, 0, (uint64_t)partial apply for closure #1 in Overridable<A>.init(key:defaultValue:), v0, (uint64_t)v2);
  double result = *(double *)&v3;
  static Overrides._systemPromptOverridePath = v2[0];
  *(void *)algn_269A458F8 = v2[1];
  xmmword_269A45900 = v3;
  qword_269A45910 = v4;
  byte_269A45918 = v5;
  return result;
}

id specialized Overridable.init(key:defaultValue:get:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  id v14 = objc_msgSend(self, sel_standardUserDefaults);
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v16 = result;
    char internalBuild = MobileGestalt_get_internalBuild();

    uint64_t v18 = (void *)MEMORY[0x2533691D0](0xD000000000000014, 0x800000024FA41C30);
    objc_msgSend(v14, sel_addSuiteNamed_, v18);

    swift_bridgeObjectRetain();
    swift_retain();
    if (a4)
    {
      uint64_t v19 = MEMORY[0x2533691D0](a3, a4);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (void *)MEMORY[0x2533691D0](a1, a2);
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setObject_forKey_, v19, v20);

    swift_unknownObjectRelease();
    id result = (id)swift_release();
    *(void *)a7 = v14;
    *(void *)(a7 + 8) = a1;
    *(void *)(a7 + 16) = a2;
    *(void *)(a7 + 24) = a5;
    *(void *)(a7 + 32) = a6;
    *(unsigned char *)(a7 + 40) = internalBuild;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24F9A8D04()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Overridable<A>.init(key:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

{
  uint64_t v2;

  return closure #1 in Overridable<A>.init(key:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in Overridable<A>.init(key:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in Overridable<A>.init(key:defaultValue:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in Overridable<A>.init(key:defaultValue:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t dispatch thunk of TextAssistantHandoffProviding.attemptHandoff(userQuery:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  int64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *int64_t v9 = v4;
  v9[1] = dispatch thunk of TextAssistantHandoffProviding.attemptHandoff(userQuery:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of TextAssistantHandoffProviding.attemptHandoff(userQuery:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  long long v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t destroy for TextAssistantHandoff(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  return __swift_destroy_boxed_opaque_existential_0(a1 + 40);
}

uint64_t initializeWithCopy for TextAssistantHandoff(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for TextAssistantHandoff(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        id result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        size_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *id result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for TextAssistantHandoff(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextAssistantHandoff(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextAssistantHandoff(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextAssistantHandoff()
{
  return &type metadata for TextAssistantHandoff;
}

uint64_t one-time initialization function for instance()
{
  long long v3 = &protocol witness table for ForegroundAppDetector;
  unint64_t v2 = &type metadata for ForegroundAppDetector;
  *(void *)&long long v1 = 0x4000000000000000;
  qword_269A49698 = (uint64_t)&type metadata for TextAssistantExecutor;
  unk_269A496A0 = &protocol witness table for TextAssistantExecutor;
  qword_269A49680 = 0xD00000000000002DLL;
  unk_269A49688 = 0x800000024FA41E60;
  return outlined init with take of ForegroundAppDetecting(&v1, (uint64_t)&static TextAssistantHandoff.instance);
}

uint64_t TextAssistantHandoff.attemptHandoff(userQuery:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  v3[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for GenerativeUsecases();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](TextAssistantHandoff.attemptHandoff(userQuery:), 0, 0);
}

uint64_t TextAssistantHandoff.attemptHandoff(userQuery:)()
{
  uint64_t v22 = v0;
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 48), *(void *)(*(void *)(v0 + 48) + 24));
  Swift::String_optional v1 = ForegroundAppDetector.getForegroundAppBundleID()();
  *(void *)(v0 + 88) = v1.value._object;
  if (v2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    long long v3 = *(uint64_t (**)(void))(v0 + 8);
LABEL_3:
    return v3(0);
  }
  if (!v1.value._object)
  {
    if (one-time initialization token for textAssistantHandoff != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.textAssistantHandoff);
    size_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_24F9A2000, v11, v12, "No foreground app detected", v13, 2u);
      MEMORY[0x25336A180](v13, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    long long v3 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_3;
  }
  if (one-time initialization token for textAssistantHandoff != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 96) = __swift_project_value_buffer(v5, (uint64_t)static Logger.textAssistantHandoff);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v21 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1.value._countAndFlagsBits, (unint64_t)v1.value._object, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v6, v7, "Attempting handoff to Text Assistant for app: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v9, -1, -1);
    MEMORY[0x25336A180](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v14 = *(void *)(v0 + 48);
  *(void *)(v0 + 104) = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.textAssistantHandoffDuration.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  Swift::String v15 = __swift_project_boxed_opaque_existential_1((void *)(v14 + 40), *(void *)(v14 + 64));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v18;
  void *v18 = v0;
  v18[1] = TextAssistantHandoff.attemptHandoff(userQuery:);
  uint64_t v19 = *(void *)(v0 + 32);
  uint64_t v20 = *(void *)(v0 + 40);
  return TextAssistantExecutor.execute(appBundleID:userQuery:)(v1.value._countAndFlagsBits, (uint64_t)v1.value._object, v19, v20, v16, v17);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  int v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  Swift::String_optional v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    long long v3 = *(unsigned __int8 *)(v0 + 128);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v16 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    if (v3) {
      uint64_t v6 = 0xD000000000000029;
    }
    else {
      uint64_t v6 = 0xD00000000000001ALL;
    }
    if (v3) {
      os_log_type_t v7 = 0x800000024FA41E30;
    }
    else {
      os_log_type_t v7 = 0x800000024FA41E10;
    }
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v5, -1, -1);
    MEMORY[0x25336A180](v4, -1, -1);
  }

  if (*(unsigned char *)(v0 + 128) == 1)
  {
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 64);
    static MetricsUtils.shared.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, *MEMORY[0x263F406C8], v10);
    GenerativeUsecases.staticString.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
    swift_release();
  }
  size_t v11 = *(void *)(v0 + 56);
  static MetricsUtils.shared.getter();
  static Signpost.textAssistantHandoffDuration.getter();
  os_log_type_t v12 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of OSSignpostID?(v11);
  uint64_t v13 = *(unsigned __int8 *)(v0 + 128);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v14(v13);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String_optional v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t TextAssistantHandoff.attemptHandoff(userQuery:)(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 128) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = TextAssistantHandoff.attemptHandoff(userQuery:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = TextAssistantHandoff.attemptHandoff(userQuery:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined destroy of OSSignpostID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ForegroundAppDetecting(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t lazy protocol witness table accessor for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError;
  if (!lazy protocol witness table cache variable for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError;
  if (!lazy protocol witness table cache variable for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError);
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance SharingMediaAttachmentError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError();
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance SharingMediaAttachmentError(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError();
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t protocol witness for Error._userInfo.getter in conformance SharingMediaAttachmentError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance SharingMediaAttachmentError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance SharingMediaAttachmentError()
{
  uint64_t v0 = static SharingMediaAttachmentError.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance SharingMediaAttachmentError()
{
  return ~*(unsigned __int8 *)(v0 + 9) & 1;
}

unint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance SharingMediaAttachmentError()
{
  char v1 = *(unsigned char *)(v0 + 9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24FA3E1D0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000024FA41EF0;
  *(void *)(inited + 72) = MEMORY[0x263F8D6C8];
  *(void *)(inited + 48) = (v1 & 1) == 0;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SharingMediaAttachmentError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SharingMediaAttachmentError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

uint64_t getEnumTag for SharingMediaAttachmentError(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for SharingMediaAttachmentError(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    *(unsigned char *)(result + 9) = 1;
  }
  else
  {
    *(unsigned char *)(result + 9) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingMediaAttachmentError()
{
  return &type metadata for SharingMediaAttachmentError;
}

uint64_t closure #1 in static SharableMediaAttachmentUtils.fetchSharableMediaContent(asset:_:)(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4, void *a5)
{
  uint64_t v96 = a4;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<URL, SharingMediaAttachmentError>);
  MEMORY[0x270FA5388](v95);
  v94 = (uint64_t *)((char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  v90 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v91 = (char *)&v87 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v87 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  Swift::Bool v24 = (char *)&v87 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  v27 = (char *)&v87 - v26;
  MEMORY[0x270FA5388](v25);
  if (a2 || !a1)
  {
    if (one-time initialization token for onscreen != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.onscreen);
    id v38 = a2;
    id v39 = a2;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      v92 = a3;
      uint64_t v44 = v43;
      uint64_t v97 = (uint64_t)a2;
      uint64_t v98 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      id v45 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
      uint64_t v46 = String.init<A>(describing:)();
      uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_24F9A2000, v40, v41, "Error in creating exporting PHAsset: %s", v42, 0xCu);
      swift_arrayDestroy();
      a3 = v92;
      MEMORY[0x25336A180](v44, -1, -1);
      MEMORY[0x25336A180](v42, -1, -1);

      if (a2)
      {
LABEL_12:
        v48 = (void *)_convertErrorToNSError(_:)();
        id v49 = objc_msgSend(v48, sel_code);

LABEL_15:
        type metadata accessor for SELFUtils();
        static SELFUtils.shared.getter();
        dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
        swift_release();
        v50 = v94;
        void *v94 = v49;
        *((unsigned char *)v50 + 8) = a2 == 0;
        *((unsigned char *)v50 + 9) = 0;
        swift_storeEnumTagMultiPayload();
        a3(v50);
        v51 = &demangling cache variable for type metadata for Result<URL, SharingMediaAttachmentError>;
        uint64_t v52 = (uint64_t)v50;
        return outlined destroy of Result<URL, SharingMediaAttachmentError>(v52, v51);
      }
    }
    else
    {

      if (a2) {
        goto LABEL_12;
      }
    }
    id v49 = 0;
    goto LABEL_15;
  }
  v92 = a3;
  uint64_t v93 = (uint64_t)&v87 - v28;
  char v29 = *(void (**)(void))(v11 + 56);
  v29();
  BOOL v30 = (char *)objc_msgSend(a5, sel_playbackStyle);
  if ((unint64_t)(v30 - 1) < 2)
  {
    if (*(void *)(a1 + 16))
    {
      id v53 = (id)*MEMORY[0x263F14F90];
      unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v53);
      uint64_t v31 = v11;
      if (v55)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v27, *(void *)(a1 + 56) + *(void *)(v11 + 72) * v54, v10);
        v56 = v27;
        uint64_t v57 = 0;
      }
      else
      {
        v56 = v27;
        uint64_t v57 = 1;
      }
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v56, v57, 1, v10);
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v27, 1, 1, v10);
      uint64_t v31 = v11;
    }
  }
  else if ((unint64_t)(v30 - 4) >= 2)
  {
    BOOL v58 = v30 == (char *)3;
    uint64_t v59 = v93;
    uint64_t v31 = v11;
    if (!v58) {
      goto LABEL_36;
    }
    if (*(void *)(a1 + 16))
    {
      id v60 = (id)*MEMORY[0x263F14F88];
      unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v60);
      if (v62)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v24, *(void *)(a1 + 56) + *(void *)(v11 + 72) * v61, v10);
        v63 = v24;
        uint64_t v64 = 0;
      }
      else
      {
        v63 = v24;
        uint64_t v64 = 1;
      }
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v63, v64, 1, v10);
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v24, 1, 1, v10);
    }
    v27 = v24;
  }
  else
  {
    uint64_t v31 = v11;
    if (*(void *)(a1 + 16))
    {
      id v32 = (id)*MEMORY[0x263F14F98];
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v32);
      if (v34)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v21, *(void *)(a1 + 56) + *(void *)(v11 + 72) * v33, v10);
        uint64_t v35 = v21;
        uint64_t v36 = 0;
      }
      else
      {
        uint64_t v35 = v21;
        uint64_t v36 = 1;
      }
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v35, v36, 1, v10);
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v29)(v21, 1, 1, v10);
    }
    v27 = v21;
  }
  uint64_t v65 = v93;
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v93, &demangling cache variable for type metadata for URL?);
  outlined init with take of URL?((uint64_t)v27, v65);
  uint64_t v59 = v65;
LABEL_36:
  outlined init with copy of URL?(v59, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v18, 1, v10) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v18, &demangling cache variable for type metadata for URL?);
    v66 = v92;
    if (one-time initialization token for onscreen != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.onscreen);
    v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      _os_log_impl(&dword_24F9A2000, v68, v69, "#SharableMediaAttachmentUtils Failed to retrieve file URL for PHAsset", v70, 2u);
      MEMORY[0x25336A180](v70, -1, -1);
    }

    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    uint64_t v71 = (uint64_t)v94;
    void *v94 = 0;
    *(_WORD *)(v71 + 8) = 1;
    swift_storeEnumTagMultiPayload();
    v66(v71);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v71, &demangling cache variable for type metadata for Result<URL, SharingMediaAttachmentError>);
  }
  else
  {
    v72 = v91;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v91, v18, v10);
    if (one-time initialization token for onscreen != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.onscreen);
    v74 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v75 = v90;
    v74(v90, v72, v10);
    v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = swift_slowAlloc();
      v89 = v74;
      v79 = (uint8_t *)v78;
      uint64_t v88 = swift_slowAlloc();
      uint64_t v98 = v88;
      *(_DWORD *)v79 = 136315138;
      uint64_t v80 = URL.absoluteString.getter();
      uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v82 = *(void (**)(char *, uint64_t))(v31 + 8);
      v82(v75, v10);
      _os_log_impl(&dword_24F9A2000, v76, v77, "#SharableMediaAttachmentUtils fetchSharableMediaContent downloaded an asset and local URL is now: %s", v79, 0xCu);
      uint64_t v83 = v88;
      swift_arrayDestroy();
      v72 = v91;
      MEMORY[0x25336A180](v83, -1, -1);
      v84 = v79;
      v74 = v89;
      MEMORY[0x25336A180](v84, -1, -1);
    }
    else
    {
      v82 = *(void (**)(char *, uint64_t))(v31 + 8);
      v82(v75, v10);
    }

    uint64_t v85 = (uint64_t)v94;
    v74((char *)v94, v72, v10);
    swift_storeEnumTagMultiPayload();
    v92(v85);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v85, &demangling cache variable for type metadata for Result<URL, SharingMediaAttachmentError>);
    v82(v72, v10);
  }
  v51 = &demangling cache variable for type metadata for URL?;
  uint64_t v52 = v93;
  return outlined destroy of Result<URL, SharingMediaAttachmentError>(v52, v51);
}

void specialized static SharableMediaAttachmentUtils.fetchSharableMediaContent(asset:_:)(void *a1, void *a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<URL, SharingMediaAttachmentError>);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  uint64_t v12 = self;
  aBlock[0] = 0;
  id v13 = a2;
  swift_retain();
  id v14 = a1;
  id v15 = objc_msgSend(v12, sel_exportRequestForAsset_error_, v14, aBlock);
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = aBlock[0];

    id v18 = objc_allocWithZone(MEMORY[0x263F14D60]);
    id v19 = v16;
    id v20 = objc_msgSend(v18, sel_init);
    objc_msgSend(v20, sel_setTreatLivePhotoAsStill_, 0);
    objc_msgSend(v20, sel_setShouldBundleComplexAssetResources_, 1);
    objc_msgSend(v20, sel_setShouldStripLocation_, 1);
    objc_msgSend(v20, sel_setVariant_, 1);
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = partial apply for closure #3 in ImageLoader.load(mediaItem:_:);
    v21[3] = v11;
    v21[4] = v14;
    aBlock[4] = partial apply for closure #1 in static SharableMediaAttachmentUtils.fetchSharableMediaContent(asset:_:);
    aBlock[5] = v21;
    aBlock[0] = (id)MEMORY[0x263EF8330];
    aBlock[1] = (id)1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [PHAssetExportRequestFileURLKey : URL]?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor;
    uint64_t v22 = _Block_copy(aBlock);
    id v23 = v14;
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_exportWithOptions_completionHandler_, v20, v22);

    _Block_release(v22);
    swift_release();
  }
  else
  {
    uint64_t v40 = v13;
    uint64_t v41 = v8;
    id v24 = aBlock[0];
    uint64_t v25 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for onscreen != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.onscreen);
    id v27 = v25;
    id v28 = v25;
    char v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      id v39 = a3;
      id v32 = (uint8_t *)v31;
      unint64_t v33 = (void *)swift_slowAlloc();
      aBlock[0] = v33;
      *(_DWORD *)id v32 = 136315138;
      v38[1] = v32 + 4;
      uint64_t v42 = (uint64_t)v25;
      id v34 = v25;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_24F9A2000, v29, v30, "Error in creating export request for PHAsset: %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v33, -1, -1);
      uint64_t v37 = v32;
      a3 = v39;
      MEMORY[0x25336A180](v37, -1, -1);
    }
    else
    {
    }
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    *(void *)uint64_t v10 = 0;
    *((_WORD *)v10 + 4) = 1;
    swift_storeEnumTagMultiPayload();
    specialized closure #3 in ImageLoader.load(mediaItem:_:)((uint64_t)v10, v40, a3, a4);

    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v10, &demangling cache variable for type metadata for Result<URL, SharingMediaAttachmentError>);
    swift_release();
  }
}

uint64_t sub_24F9AB10C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #3 in ImageLoader.load(mediaItem:_:)(uint64_t a1)
{
  return closure #3 in ImageLoader.load(mediaItem:_:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_24F9AB158()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in static SharableMediaAttachmentUtils.fetchSharableMediaContent(asset:_:)(uint64_t a1, void *a2)
{
  return closure #1 in static SharableMediaAttachmentUtils.fetchSharableMediaContent(asset:_:)(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey()
{
  unint64_t result = lazy protocol witness table cache variable for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey;
  if (!lazy protocol witness table cache variable for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey)
  {
    type metadata accessor for PHAssetExportRequestFileURLKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PHAssetExportRequestFileURLKey and conformance PHAssetExportRequestFileURLKey);
  }
  return result;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<URL, SharingMediaAttachmentError>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL specialized static SharableMediaAttachmentUtils.isPHAssetLocallyAvailable(asset:)(void *a1)
{
  v36[1] = *(id *)MEMORY[0x263EF8340];
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14D60]), sel_init);
  objc_msgSend(v2, sel_setTreatLivePhotoAsStill_, 0);
  objc_msgSend(v2, sel_setShouldBundleComplexAssetResources_, 1);
  objc_msgSend(v2, sel_setShouldStripLocation_, 1);
  objc_msgSend(v2, sel_setVariant_, 1);
  uint64_t v3 = self;
  v36[0] = 0;
  id v4 = a1;
  id v5 = objc_msgSend(v3, sel_exportRequestForAsset_error_, v4, v36);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = v36[0];

    v36[0] = (id)1;
    char v34 = 0;
    uint64_t v35 = 0;
    id v33 = 0;
    objc_msgSend(v6, sel_preflightExportWithOptions_assetAvailability_isProcessingRequired_fileURLs_info_, v2, v36, &v34, &v35, &v33);
    id v8 = v33;
    uint64_t v9 = (void *)v35;
    BOOL v10 = v36[0] == 0;
    if (v36[0])
    {
      id v11 = v33;
      id v12 = v9;
    }
    else
    {
      uint64_t v25 = one-time initialization token for onscreen;
      id v26 = v33;
      id v27 = v9;
      if (v25 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.onscreen);
      char v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl(&dword_24F9A2000, v29, v30, "#SharableMediaAttachmentUtils asset is available locally", v31, 2u);
        MEMORY[0x25336A180](v31, -1, -1);
      }
    }
  }
  else
  {
    id v13 = v36[0];
    id v14 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for onscreen != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.onscreen);
    id v16 = v14;
    id v17 = v14;
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      v36[0] = v21;
      *(_DWORD *)id v20 = 136315138;
      id v22 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_24F9A2000, v18, v19, "#SharableMediaAttachmentUtils returning false, Error in creating export request for PHAsset: %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v21, -1, -1);
      MEMORY[0x25336A180](v20, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  return v10;
}

uint64_t dispatch thunk of TextAssistantExecutorProviding.execute(appBundleID:userQuery:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 8)
                                                                                     + **(int **)(a6 + 8));
  id v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *id v13 = v6;
  v13[1] = dispatch thunk of TextAssistantHandoffProviding.attemptHandoff(userQuery:);
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t TextAssistantExecutor.execute(appBundleID:userQuery:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[24] = a5;
  v6[25] = a6;
  v6[22] = a3;
  v6[23] = a4;
  v6[20] = a1;
  v6[21] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  v6[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for TypedValue.EnumerationValue();
  v6[27] = v7;
  v6[28] = *(void *)(v7 - 8);
  v6[29] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedValue.ID?);
  v6[30] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TypedValue.ID();
  v6[31] = v8;
  v6[32] = *(void *)(v8 - 8);
  v6[33] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ToolInvocation();
  v6[34] = v9;
  v6[35] = *(void *)(v9 - 8);
  v6[36] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayRepresentation?);
  v6[37] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for TypedValue();
  v6[38] = v10;
  v6[39] = *(void *)(v10 - 8);
  v6[40] = swift_task_alloc();
  v6[41] = swift_task_alloc();
  return MEMORY[0x270FA2498](TextAssistantExecutor.execute(appBundleID:userQuery:), 0, 0);
}

uint64_t TextAssistantExecutor.execute(appBundleID:userQuery:)()
{
  *(void *)(v0 + 336) = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.createSessionProcess.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  char v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v1;
  void *v1 = v0;
  v1[1] = TextAssistantExecutor.execute(appBundleID:userQuery:);
  return MEMORY[0x270F7FD48]();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  void *v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  char v1 = (uint64_t *)v0[41];
  uint64_t v3 = v0[38];
  id v2 = v0[39];
  id v4 = v0[37];
  uint64_t v28 = v0[45];
  id v27 = v0[23];
  id v26 = v0[22];
  id v5 = type metadata accessor for TypedValue.PrimitiveValue();
  uint64_t v6 = swift_allocBox();
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for DisplayRepresentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  swift_bridgeObjectRetain();
  TypedValue.PrimitiveValue.AppValue.init(bundleIdentifier:displayRepresentation:)();
  unint64_t v24 = *(void (**)(void))(*(void *)(v5 - 8) + 104);
  ((void (*)(uint64_t, void, uint64_t))v24)(v8, *MEMORY[0x263F80440], v5);
  void *v1 = v6;
  uint64_t v25 = *(void (**)(void))(v2 + 104);
  ((void (*)(uint64_t *, void, uint64_t))v25)(v1, *MEMORY[0x263F804E8], v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, TypedValueAsyncResolvable)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24FA3E410;
  *(void *)(inited + 32) = 7368801;
  *(void *)(inited + 40) = 0xE300000000000000;
  id v11 = MEMORY[0x263F80500];
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 80) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 16))(boxed_opaque_existential_1, v1, v3);
  *(void *)(inited + 88) = 0x74706D6F7270;
  *(void *)(inited + 96) = 0xE600000000000000;
  id v13 = swift_allocBox();
  *id v14 = v26;
  v14[1] = v27;
  v24();
  *(void *)(inited + 128) = v3;
  *(void *)(inited + 136) = MEMORY[0x263F80500];
  *__swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 104)) = v13;
  v25();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  ToolInvocation.init(localToolId:parameterValuesByKey:)();
  if (v28)
  {
    uint64_t v15 = v0[26];
    (*(void (**)(void, void))(v0[39] + 8))(v0[41], v0[38]);
    static MetricsUtils.shared.getter();
    static Signpost.createSessionProcess.getter();
    uint64_t v16 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v15, &demangling cache variable for type metadata for OSSignpostID?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static ToolExecutor.start()>>.0);
    swift_getOpaqueTypeConformance2();
    dispatch thunk of ToolExecutionSession.endSession()();
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v17 = (uint64_t (*)(void))v0[1];
    return v17(0);
  }
  else
  {
    os_log_type_t v19 = (void *)swift_task_alloc();
    v0[46] = v19;
    id v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static ToolExecutor.start()>>.0);
    v0[47] = v20;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v0[48] = OpaqueTypeConformance2;
    *os_log_type_t v19 = v0;
    v19[1] = TextAssistantExecutor.execute(appBundleID:userQuery:);
    id v22 = v0[36];
    uint64_t v23 = v0[30];
    return MEMORY[0x270F7FC20](v23, v22, v20, OpaqueTypeConformance2);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = TextAssistantExecutor.execute(appBundleID:userQuery:);
  }
  else {
    id v2 = TextAssistantExecutor.execute(appBundleID:userQuery:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  char v1 = v0[31];
  id v2 = v0[32];
  uint64_t v3 = v0[30];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    id v4 = v0[41];
    uint64_t v6 = v0[38];
    id v5 = v0[39];
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[36];
    uint64_t v9 = v0[34];
    uint64_t v10 = v0[26];
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v3, &demangling cache variable for type metadata for TypedValue.ID?);
    lazy protocol witness table accessor for type TextAssistantExecutor.ExecutorError and conformance TextAssistantExecutor.ExecutorError();
    swift_allocError();
    *id v11 = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    static MetricsUtils.shared.getter();
    static Signpost.createSessionProcess.getter();
    uint64_t v12 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
    dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v10, &demangling cache variable for type metadata for OSSignpostID?);
    dispatch thunk of ToolExecutionSession.endSession()();
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v13 = (uint64_t (*)(void))v0[1];
    return v13(0);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[33], v3, v1);
    uint64_t v15 = (void *)swift_task_alloc();
    v0[50] = v15;
    *uint64_t v15 = v0;
    v15[1] = TextAssistantExecutor.execute(appBundleID:userQuery:);
    uint64_t v16 = v0[47];
    id v17 = v0[48];
    id v18 = v0[40];
    os_log_type_t v19 = v0[33];
    return MEMORY[0x270F7FC08](v18, v19, v16, v17);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = TextAssistantExecutor.execute(appBundleID:userQuery:);
  }
  else {
    id v2 = TextAssistantExecutor.execute(appBundleID:userQuery:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  unsigned char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if ((*(unsigned int (**)(void, void))(v0[39] + 88))(v0[40], v0[38]) == *MEMORY[0x263F804A8])
  {
    id v2 = v0[28];
    char v1 = v0[29];
    uint64_t v3 = v0[27];
    (*(void (**)(void, void))(v0[39] + 96))(v0[40], v0[38]);
    id v4 = swift_projectBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    swift_release();
    if (TypedValue.EnumerationValue.case.getter() == 0x73736563637573 && v5 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = 1;
    }
    else
    {
      uint64_t v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    char v29 = v0[41];
    id v17 = v0[39];
    id v18 = v0[38];
    os_log_type_t v19 = v0[35];
    id v20 = v0[36];
    uint64_t v21 = v0[33];
    id v22 = v0[34];
    unint64_t v24 = v0[31];
    uint64_t v23 = v0[32];
    uint64_t v25 = v0[26];
    (*(void (**)(void))(v0[28] + 8))();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v24);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v29, v18);
    static MetricsUtils.shared.getter();
    static Signpost.createSessionProcess.getter();
    id v26 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
    dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v25, &demangling cache variable for type metadata for OSSignpostID?);
    dispatch thunk of ToolExecutionSession.endSession()();
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v16 = v28 & 1;
  }
  else
  {
    uint64_t v6 = v0[38];
    uint64_t v7 = v0[35];
    uint64_t v31 = v0[36];
    id v32 = v0[41];
    uint64_t v8 = v0[33];
    os_log_type_t v30 = v0[34];
    uint64_t v9 = v0[31];
    uint64_t v10 = v0[32];
    id v11 = v0[26];
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0[39] + 8);
    v12(v0[40], v6);
    lazy protocol witness table accessor for type TextAssistantExecutor.ExecutorError and conformance TextAssistantExecutor.ExecutorError();
    swift_allocError();
    *id v13 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v31, v30);
    v12(v32, v6);
    static MetricsUtils.shared.getter();
    static Signpost.createSessionProcess.getter();
    id v14 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
    dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v11, &demangling cache variable for type metadata for OSSignpostID?);
    dispatch thunk of ToolExecutionSession.endSession()();
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v16 = 0;
  }
  return v15(v16);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  char v1 = v0[41];
  id v2 = v0[38];
  uint64_t v3 = v0[39];
  id v4 = v0[26];
  (*(void (**)(void, void))(v0[35] + 8))(v0[36], v0[34]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  static MetricsUtils.shared.getter();
  static Signpost.createSessionProcess.getter();
  id v5 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for OSSignpostID?);
  dispatch thunk of ToolExecutionSession.endSession()();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6(0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  char v1 = v0[41];
  uint64_t v3 = v0[38];
  id v2 = v0[39];
  id v4 = v0[35];
  id v5 = v0[36];
  uint64_t v6 = v0[34];
  uint64_t v7 = v0[26];
  (*(void (**)(void, void))(v0[32] + 8))(v0[33], v0[31]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  static MetricsUtils.shared.getter();
  static Signpost.createSessionProcess.getter();
  uint64_t v8 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v7, &demangling cache variable for type metadata for OSSignpostID?);
  dispatch thunk of ToolExecutionSession.endSession()();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9(0);
}

uint64_t TextAssistantExecutor.execute(appBundleID:userQuery:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v4 = (uint64_t (*)(void))v3[1];
    return v4(0);
  }
  else
  {
    return MEMORY[0x270FA2498](TextAssistantExecutor.execute(appBundleID:userQuery:), 0, 0);
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type TextAssistantExecutor.ExecutorError and conformance TextAssistantExecutor.ExecutorError()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAssistantExecutor.ExecutorError and conformance TextAssistantExecutor.ExecutorError;
  if (!lazy protocol witness table cache variable for type TextAssistantExecutor.ExecutorError and conformance TextAssistantExecutor.ExecutorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAssistantExecutor.ExecutorError and conformance TextAssistantExecutor.ExecutorError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextAssistantExecutor.ExecutorError and conformance TextAssistantExecutor.ExecutorError;
  if (!lazy protocol witness table cache variable for type TextAssistantExecutor.ExecutorError and conformance TextAssistantExecutor.ExecutorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAssistantExecutor.ExecutorError and conformance TextAssistantExecutor.ExecutorError);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TextAssistantExecutor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for TextAssistantExecutor()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for TextAssistantExecutor(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for TextAssistantExecutor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextAssistantExecutor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextAssistantExecutor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextAssistantExecutor()
{
  return &type metadata for TextAssistantExecutor;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TextAssistantExecutor.ExecutorError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TextAssistantExecutor.ExecutorError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24F9AD2B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for TextAssistantExecutor.ExecutorError(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for TextAssistantExecutor.ExecutorError(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TextAssistantExecutor.ExecutorError()
{
  return &type metadata for TextAssistantExecutor.ExecutorError;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextAssistantExecutor.ExecutorError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextAssistantExecutor.ExecutorError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TextAssistantExecutor.ExecutorError()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextAssistantExecutor.ExecutorError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance TextAssistantExecutor.ExecutorError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance TextAssistantExecutor.ExecutorError()
{
  return MEMORY[0x270F9FB38]();
}

Swift::Bool __swiftcall SupportedDocumentHelper.isSupportedDocument(typeIdentifier:)(Swift::String typeIdentifier)
{
  int v2 = v1;
  object = typeIdentifier._object;
  uint64_t countAndFlagsBits = typeIdentifier._countAndFlagsBits;
  if (one-time initialization token for onscreen != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.onscreen);
  swift_bridgeObjectRetain_n();
  unsigned int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v11 = v9;
    *(_DWORD *)uint64_t v8 = 136315650;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x800000024FA41F40, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x800000024FA41F60, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v6, v7, "%s.%s type identifier: %s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v9, -1, -1);
    MEMORY[0x25336A180](v8, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, *v2) & 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t SupportedDocumentHelper.getFileType(typeIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  os_log_type_t v7 = *(void **)(v3 + 8);
  uint64_t v8 = v7[2];
  if (v8)
  {
    BOOL v9 = v7[4] == a1 && v7[5] == a2;
    if (v9 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_7:
      uint64_t v11 = (unsigned int *)MEMORY[0x263F40738];
      goto LABEL_41;
    }
    if (v8 != 1)
    {
      BOOL v12 = v7 + 7;
      uint64_t v13 = 1;
      while (1)
      {
        uint64_t v14 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (*(v12 - 1) == a1 && *v12 == a2) {
          goto LABEL_7;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_7;
        }
        v12 += 2;
        ++v13;
        if (v14 == v8) {
          goto LABEL_17;
        }
      }
      __break(1u);
      goto LABEL_47;
    }
  }
LABEL_17:
  uint64_t v16 = *(void **)(v3 + 16);
  uint64_t v17 = v16[2];
  if (v17)
  {
    BOOL v18 = v16[4] == a1 && v16[5] == a2;
    if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_23:
      uint64_t v11 = (unsigned int *)MEMORY[0x263F40760];
      goto LABEL_41;
    }
    if (v17 != 1)
    {
      os_log_type_t v19 = v16 + 7;
      uint64_t v20 = 1;
      while (1)
      {
        uint64_t v21 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          break;
        }
        if (*(v19 - 1) == a1 && *v19 == a2) {
          goto LABEL_23;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_23;
        }
        v19 += 2;
        ++v20;
        if (v21 == v17) {
          goto LABEL_33;
        }
      }
LABEL_47:
      __break(1u);
      return result;
    }
  }
LABEL_33:
  if (specialized Sequence<>.contains(_:)(a1, a2, *(void **)(v3 + 24)))
  {
    uint64_t v11 = (unsigned int *)MEMORY[0x263F40770];
  }
  else if (specialized Sequence<>.contains(_:)(a1, a2, *(void **)(v3 + 32)))
  {
    uint64_t v11 = (unsigned int *)MEMORY[0x263F40750];
  }
  else if (specialized Sequence<>.contains(_:)(a1, a2, *(void **)(v3 + 40)))
  {
    uint64_t v11 = (unsigned int *)MEMORY[0x263F40740];
  }
  else
  {
    if ((specialized Sequence<>.contains(_:)(a1, a2, *(void **)(v3 + 48)) & 1) == 0)
    {
      uint64_t v29 = type metadata accessor for SupportedDocumentType();
      uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56);
      uint64_t v28 = v29;
      uint64_t v26 = a3;
      uint64_t v27 = 1;
      goto LABEL_42;
    }
    uint64_t v11 = (unsigned int *)MEMORY[0x263F40758];
  }
LABEL_41:
  uint64_t v23 = *v11;
  uint64_t v24 = type metadata accessor for SupportedDocumentType();
  uint64_t v30 = *(void *)(v24 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 104))(a3, v23, v24);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
  uint64_t v26 = a3;
  uint64_t v27 = 0;
  uint64_t v28 = v24;
LABEL_42:
  return v25(v26, v27, 1, v28);
}

uint64_t specialized SupportedDocumentHelper.init()@<X0>(void *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_24FA3E1D0;
  strcpy((char *)(v1 + 32), "com.adobe.pdf");
  *(_WORD *)(v1 + 46) = -4864;
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_24FA3E1D0;
  *(void *)(v2 + 32) = 0x722E63696C627570;
  *(void *)(v2 + 40) = 0xEA00000000006674;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = v1;
  *(_OWORD *)(inited + 16) = xmmword_24FA3E550;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = &outlined read-only object #0 of SupportedDocumentHelper.init();
  *(void *)(inited + 56) = &outlined read-only object #1 of SupportedDocumentHelper.init();
  *(void *)(inited + 64) = &outlined read-only object #2 of SupportedDocumentHelper.init();
  *(void *)(inited + 72) = &outlined read-only object #3 of SupportedDocumentHelper.init();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unsigned int v4 = (void *)MEMORY[0x263F8EE78];
  uint64_t v5 = 32;
  while (1)
  {
    uint64_t v6 = *(void *)(inited + v5);
    uint64_t v7 = *(void *)(v6 + 16);
    int64_t v8 = v4[2];
    int64_t v9 = v8 + v7;
    if (__OFADD__(v8, v7)) {
      break;
    }
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v9 <= v4[3] >> 1)
    {
      if (*(void *)(v6 + 16)) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v8 <= v9) {
        int64_t v11 = v8 + v7;
      }
      else {
        int64_t v11 = v8;
      }
      unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
      if (*(void *)(v6 + 16))
      {
LABEL_13:
        uint64_t v12 = v4[2];
        if ((v4[3] >> 1) - v12 < v7) {
          goto LABEL_25;
        }
        unint64_t v13 = (unint64_t)&v4[2 * v12 + 4];
        if (v6 + 32 < v13 + 16 * v7 && v13 < v6 + 32 + 16 * v7) {
          goto LABEL_27;
        }
        swift_arrayInitWithCopy();
        if (v7)
        {
          uint64_t v15 = v4[2];
          BOOL v16 = __OFADD__(v15, v7);
          uint64_t v17 = v15 + v7;
          if (v16) {
            goto LABEL_26;
          }
          v4[2] = v17;
        }
        goto LABEL_3;
      }
    }
    if (v7) {
      goto LABEL_24;
    }
LABEL_3:
    swift_bridgeObjectRelease();
    v5 += 8;
    if (v5 == 80)
    {
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      swift_arrayDestroy();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease_n();
      *a1 = v4;
      a1[1] = v1;
      a1[2] = v2;
      a1[3] = &outlined read-only object #0 of SupportedDocumentHelper.init();
      a1[4] = &outlined read-only object #1 of SupportedDocumentHelper.init();
      a1[5] = &outlined read-only object #2 of SupportedDocumentHelper.init();
      a1[6] = &outlined read-only object #3 of SupportedDocumentHelper.init();
      return result;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ImageLoaderProviding.load(mediaItem:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + **(int **)(a3 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = dispatch thunk of ImageLoaderProviding.load(mediaItem:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of ImageLoaderProviding.load(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 16) + **(int **)(a3 + 16));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = dispatch thunk of TextAssistantHandoffProviding.attemptHandoff(userQuery:);
  return v9(a1, a2, a3);
}

ValueMetadata *type metadata accessor for ImageLoader()
{
  return &type metadata for ImageLoader;
}

uint64_t closure #1 in ImageLoader.load(mediaItem:)(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UIImage, Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  ImageLoader.load(mediaItem:_:)(a2, (void (*)(void *, uint64_t))partial apply for closure #1 in closure #1 in ImageLoader.load(mediaItem:), v8);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ImageLoader.load(mediaItem:)(void *a1, char a2)
{
  if (a2)
  {
    id v4 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UIImage, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v2 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UIImage, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_24F9AE120()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UIImage, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ImageLoader.load(mediaItem:)(void *a1, char a2)
{
  char v3 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UIImage, Error>);
  return closure #1 in closure #1 in ImageLoader.load(mediaItem:)(a1, v3);
}

void ImageLoader.load(mediaItem:_:)(void *a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for imageLoader != -1) {
    swift_once();
  }
  uint64_t v10 = __swift_project_value_buffer(v6, (uint64_t)static Logger.imageLoader);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  int v14 = v13;
  uint64_t v15 = &off_26533E000;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v55 = a3;
    uint64_t v17 = v16;
    uint64_t v53 = swift_slowAlloc();
    aBlock[0] = v53;
    *(_DWORD *)uint64_t v17 = 136315906;
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x616F4C6567616D49, 0xEB00000000726564, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x800000024FA41FD0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2048;
    id v18 = objc_msgSend(v11, sel_asset);
    int v52 = v14;
    id v19 = v18;
    id v20 = objc_msgSend(v18, sel_pixelWidth);
    unint64_t v54 = a2;
    uint64_t v21 = (uint64_t)v20;

    uint64_t v56 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v17 + 32) = 2048;
    id v22 = objc_msgSend(v11, sel_asset);
    id v23 = objc_msgSend(v22, sel_pixelHeight);

    uint64_t v56 = (uint64_t)v23;
    a2 = v54;
    uint64_t v15 = &off_26533E000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_24F9A2000, v12, (os_log_type_t)v52, "%s.%s of Size %ld x %ld", (uint8_t *)v17, 0x2Au);
    uint64_t v24 = v53;
    swift_arrayDestroy();
    MEMORY[0x25336A180](v24, -1, -1);
    uint64_t v25 = v17;
    a3 = v55;
    MEMORY[0x25336A180](v25, -1, -1);
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v26 = [v11 (SEL)v15[302]];
  unsigned int v27 = objc_msgSend(v26, sel_hasAdjustments);

  id v28 = [v11 (SEL)v15[302]];
  uint64_t v29 = v28;
  if (v27)
  {
    id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14DD0]), sel_init);
    objc_msgSend(v30, sel_setSkipDisplaySizeImage_, 0);
    id v31 = objc_msgSend(v29, sel_pixelWidth);
    id v32 = objc_msgSend(v29, sel_pixelHeight);
    if ((uint64_t)v32 <= (uint64_t)v31) {
      uint64_t v33 = (uint64_t)v31;
    }
    else {
      uint64_t v33 = (uint64_t)v32;
    }
    if (v33 >= 2048) {
      objc_msgSend(v30, sel_setTargetSize_, 2048.0, 2048.0);
    }

    objc_msgSend(v30, sel_setNetworkAccessAllowed_, 1);
    id v34 = [v11 (SEL)v15[302]];
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = a2;
    *(void *)(v35 + 24) = a3;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = partial apply for closure #2 in ImageLoader.load(mediaItem:_:);
    *(void *)(v36 + 24) = v35;
    aBlock[4] = (uint64_t)partial apply for closure #1 in ImageLoader.requestContentEditingInputWithCompletion(asset:editingOptions:_:);
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed PHContentEditingInput?, @guaranteed [AnyHashable : Any]) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_0;
    uint64_t v37 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v34, sel_requestContentEditingInputWithOptions_completionHandler_, v30, v37);
    _Block_release(v37);
  }
  else
  {
    BOOL v38 = specialized static SharableMediaAttachmentUtils.isPHAssetLocallyAvailable(asset:)(v28);

    id v39 = [v11 (SEL)v15[302]];
    if (v38)
    {
      uint64_t v40 = PHAsset.image.getter();

      if (!v40)
      {
        type metadata accessor for SELFUtils();
        static SELFUtils.shared.getter();
        dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
        swift_release();
        lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
        v48 = (void *)swift_allocError();
        *id v49 = 5;
        a2(v48, 1);

        return;
      }
      id v41 = [v11 (SEL)v15[302]];
      id v42 = objc_msgSend(v41, sel_pixelWidth);

      id v43 = [v11 (SEL)v15[302]];
      id v44 = objc_msgSend(v43, sel_pixelHeight);

      if ((uint64_t)v44 <= (uint64_t)v42) {
        uint64_t v45 = (uint64_t)v42;
      }
      else {
        uint64_t v45 = (uint64_t)v44;
      }
      if (v45 <= 2047)
      {
        id v46 = v40;
        a2(v40, 0);

        return;
      }
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 16) = a2;
      *(void *)(v50 + 24) = a3;
      swift_retain();
      specialized ImageLoader.loadResizedImage(mediaItem:_:)(v11, (uint64_t)partial apply for closure #2 in ImageLoader.load(mediaItem:_:), v50);
    }
    else
    {
      id v47 = v11;
      swift_retain();
      specialized static SharableMediaAttachmentUtils.fetchSharableMediaContent(asset:_:)(v39, v47, a2, a3);
    }
  }
  swift_release();
}

void closure #1 in ImageLoader.requestContentEditingInputWithCompletion(asset:editingOptions:_:)(void *a1, uint64_t a2, void (*a3)(id, uint64_t))
{
  if (a1)
  {
    id v4 = a1;
    id v5 = objc_msgSend(v4, sel_displaySizeImage);
    if (v5)
    {
      id v6 = v5;
      id v14 = v5;
      a3(v6, 0);

      return;
    }
  }
  if (one-time initialization token for imageLoader != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.imageLoader);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x616F4C6567616D49, 0xEB00000000726564, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v8, v9, "%s Failed to load media that is sendable", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v11, -1, -1);
    MEMORY[0x25336A180](v10, -1, -1);
  }

  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
  swift_release();
  lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
  uint64_t v12 = (void *)swift_allocError();
  *os_log_type_t v13 = 5;
  a3(v12, 1);
}

uint64_t specialized ImageLoader.loadResizedImage(mediaItem:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(a1, sel_asset);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14DD0]), sel_init);
  objc_msgSend(v7, sel_setSkipDisplaySizeImage_, 0);
  id v8 = objc_msgSend(v6, sel_pixelWidth);
  id v9 = objc_msgSend(v6, sel_pixelHeight);
  if ((uint64_t)v9 <= (uint64_t)v8) {
    uint64_t v10 = (uint64_t)v8;
  }
  else {
    uint64_t v10 = (uint64_t)v9;
  }
  if (v10 >= 2048) {
    objc_msgSend(v7, sel_setTargetSize_, 2048.0, 2048.0);
  }

  id v11 = objc_msgSend(a1, sel_asset);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #2 in ImageLoader.load(mediaItem:_:);
  *(void *)(v13 + 24) = v12;
  v16[4] = closure #1 in ImageLoader.requestContentEditingInputWithCompletion(asset:editingOptions:_:)partial apply;
  v16[5] = v13;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1107296256;
  v16[2] = thunk for @escaping @callee_guaranteed (@guaranteed PHContentEditingInput?, @guaranteed [AnyHashable : Any]) -> ();
  v16[3] = &block_descriptor_22;
  id v14 = _Block_copy(v16);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v11, sel_requestContentEditingInputWithOptions_completionHandler_, v7, v14);
  _Block_release(v14);

  return swift_release();
}

void specialized closure #3 in ImageLoader.load(mediaItem:_:)(uint64_t a1, void *a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  id v43 = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<URL, SharingMediaAttachmentError>);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<URL, SharingMediaAttachmentError>(a1, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *(void *)v13;
    LODWORD(v15) = v13[8];
    int v42 = v13[9];
    if (one-time initialization token for imageLoader != -1) {
      swift_once();
    }
    uint64_t v16 = __swift_project_value_buffer(v7, (uint64_t)static Logger.imageLoader);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v16, v7);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      int v41 = v15;
      uint64_t v15 = v19;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = a4;
      uint64_t v47 = v39;
      *(_DWORD *)uint64_t v15 = 136315650;
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x616F4C6567616D49, 0xEB00000000726564, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2080;
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x800000024FA41FD0, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 22) = 2080;
      uint64_t v44 = v14;
      char v20 = v42;
      char v45 = v41;
      char v46 = v42;
      lazy protocol witness table accessor for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError();
      uint64_t v21 = Error.localizedDescription.getter();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v17, v18, "%s.%s [error = %s]", (uint8_t *)v15, 0x20u);
      uint64_t v23 = v39;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v23, -1, -1);
      uint64_t v24 = v15;
      LOBYTE(v15) = v41;
      MEMORY[0x25336A180](v24, -1, -1);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      char v20 = v42;
    }
    lazy protocol witness table accessor for type SharingMediaAttachmentError and conformance SharingMediaAttachmentError();
    uint64_t v33 = (void *)swift_allocError();
    *(void *)uint64_t v34 = v14;
    *(unsigned char *)(v34 + 8) = v15;
    *(unsigned char *)(v34 + 9) = v20;
    v43(v33, 1);
  }
  else
  {
    id v25 = objc_msgSend(a2, sel_asset);
    id v26 = PHAsset.image.getter();

    if (v26)
    {
      id v27 = objc_msgSend(a2, sel_asset);
      id v28 = objc_msgSend(v27, sel_pixelWidth);

      id v29 = objc_msgSend(a2, sel_asset);
      id v30 = objc_msgSend(v29, sel_pixelHeight);

      if ((uint64_t)v30 <= (uint64_t)v28) {
        uint64_t v31 = (uint64_t)v28;
      }
      else {
        uint64_t v31 = (uint64_t)v30;
      }
      if (v31 >= 2048)
      {
        uint64_t v37 = swift_allocObject();
        *(void *)(v37 + 16) = v43;
        *(void *)(v37 + 24) = a4;
        swift_retain();
        specialized ImageLoader.loadResizedImage(mediaItem:_:)(a2, (uint64_t)partial apply for closure #2 in ImageLoader.load(mediaItem:_:), v37);

        swift_release();
      }
      else
      {
        id v32 = v26;
        v43(v26, 0);
      }
    }
    else
    {
      type metadata accessor for SELFUtils();
      static SELFUtils.shared.getter();
      dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
      swift_release();
      lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
      uint64_t v35 = (void *)swift_allocError();
      *uint64_t v36 = 6;
      v43(v35, 1);
    }
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v13);
  }
}

unint64_t lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentRequestErrors and conformance ContentRequestErrors;
  if (!lazy protocol witness table cache variable for type ContentRequestErrors and conformance ContentRequestErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentRequestErrors and conformance ContentRequestErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentRequestErrors and conformance ContentRequestErrors;
  if (!lazy protocol witness table cache variable for type ContentRequestErrors and conformance ContentRequestErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentRequestErrors and conformance ContentRequestErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentRequestErrors and conformance ContentRequestErrors;
  if (!lazy protocol witness table cache variable for type ContentRequestErrors and conformance ContentRequestErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentRequestErrors and conformance ContentRequestErrors);
  }
  return result;
}

uint64_t sub_24F9AF434()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in ImageLoader.requestContentEditingInputWithCompletion(asset:editingOptions:_:)(void *a1, uint64_t a2)
{
  closure #1 in ImageLoader.requestContentEditingInputWithCompletion(asset:editingOptions:_:)(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t outlined init with copy of Result<URL, SharingMediaAttachmentError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<URL, SharingMediaAttachmentError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<URL, SharingMediaAttachmentError>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<URL, SharingMediaAttachmentError>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #2 in ImageLoader.load(mediaItem:_:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(a1, a2 & 1);
}

uint64_t specialized ImageLoader.load(from:)(uint64_t a1)
{
  v1[3] = a1;
  uint64_t v2 = type metadata accessor for URL();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ImageLoader.load(from:), 0, 0);
}

uint64_t specialized ImageLoader.load(from:)()
{
  uint64_t v27 = v0;
  Swift::Bool v1 = URL.startAccessingSecurityScopedResource()();
  if (one-time initialization token for imageLoader != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.imageLoader);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  if (v9)
  {
    uint64_t v25 = *(void *)(v0 + 32);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v26 = v13;
    *(_DWORD *)uint64_t v12 = 67109378;
    *(_DWORD *)(v0 + 56) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 2080;
    Swift::String v14 = URL.path(percentEncoded:)(1);
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14._countAndFlagsBits, (unint64_t)v14._object, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v25);
    _os_log_impl(&dword_24F9A2000, v7, v8, "Access granted: %{BOOL}d : Loading Image File %s", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v13, -1, -1);
    MEMORY[0x25336A180](v12, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
  }

  Swift::String v15 = URL.path(percentEncoded:)(1);
  id v16 = objc_allocWithZone(MEMORY[0x263F827E8]);
  uint64_t v17 = (void *)MEMORY[0x2533691D0](v15._countAndFlagsBits, v15._object);
  swift_bridgeObjectRelease();
  id v18 = objc_msgSend(v16, sel_initWithContentsOfFile_, v17);

  v19.value = 0;
  if (v18)
  {
    v19.is_nil = 1;
    v29.value = 0;
    v29.is_nil = 1;
    v20.super.isa = UIImage.resizedImage(maxPixelsLong:maxPixelsShort:)(v19, v29).super.isa;

    URL.stopAccessingSecurityScopedResource()();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(Class))(v0 + 8);
    return v21(v20.super.isa);
  }
  else
  {
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
    swift_allocError();
    *uint64_t v23 = 2;
    swift_willThrow();
    URL.stopAccessingSecurityScopedResource()();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
}

unint64_t GenerateTextFromMediaController.Error.errorUserInfo.getter(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24FA3E1D0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000024FA41EF0;
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance GenerateTextFromMediaController.Error()
{
  return MEMORY[0x270EEE940]();
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance GenerateTextFromMediaController.Error()
{
  return MEMORY[0x270EEE930]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance GenerateTextFromMediaController.Error()
{
  return MEMORY[0x270EEE950]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance GenerateTextFromMediaController.Error()
{
  return MEMORY[0x270EEE920]();
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance GenerateTextFromMediaController.Error()
{
  uint64_t v0 = static GenerateTextFromMediaController.Error.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance GenerateTextFromMediaController.Error()
{
  return *(unsigned __int8 *)(v0 + 16);
}

unint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance GenerateTextFromMediaController.Error()
{
  return GenerateTextFromMediaController.Error.errorUserInfo.getter(*v0, v0[1]);
}

uint64_t protocol witness for Error._domain.getter in conformance GenerateTextFromMediaController.Error(uint64_t a1)
{
  unint64_t TextFromMedia = lazy protocol witness table accessor for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error();
  return MEMORY[0x270EF2670](a1, TextFromMedia);
}

uint64_t protocol witness for Error._code.getter in conformance GenerateTextFromMediaController.Error(uint64_t a1)
{
  unint64_t TextFromMedia = lazy protocol witness table accessor for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error();
  return MEMORY[0x270EF2668](a1, TextFromMedia);
}

uint64_t GenerateTextFromMediaController.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GenerativeAssistantFeatureFlagManager();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static GenerativeAssistantFeatureFlagManager.instance.getter();
  uint64_t v34 = &type metadata for DefaultModelSessionFactory;
  uint64_t v35 = &protocol witness table for DefaultModelSessionFactory;
  *((void *)&v20 + 1) = v2;
  *(void *)&v21[0] = MEMORY[0x263F406E8];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, char *, uint64_t))(v3 + 16))(boxed_opaque_existential_1, v5, v2);
  uint64_t v31 = &type metadata for ContentLoader;
  id v32 = &protocol witness table for ContentLoader;
  *(void *)&long long v30 = swift_allocObject();
  ContentLoader.init(featureFlagManager:)((uint64_t)&v19, v30 + 16);
  uint64_t v28 = &type metadata for ContentSelector;
  Swift::Int_optional v29 = &protocol witness table for ContentSelector;
  uint64_t v7 = swift_allocObject();
  *(void *)&long long v27 = v7;
  *(void *)(v7 + 40) = &type metadata for ScreenLockChecker;
  *(void *)(v7 + 48) = &protocol witness table for ScreenLockChecker;
  *((void *)&v25 + 1) = type metadata accessor for GenerativeAssistantRestrictionManager();
  uint64_t v26 = MEMORY[0x263F406F0];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
  static GenerativeAssistantRestrictionManager.instance.getter();
  outlined init with copy of ModelSessionFactory((uint64_t)v33, (uint64_t)v18);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  id v16 = &type metadata for DefaultPromptFactory;
  uint64_t v17 = &protocol witness table for DefaultPromptFactory;
  *(void *)&long long v15 = swift_allocObject();
  outlined init with copy of DefaultPromptFactory((uint64_t)&static DefaultPromptFactory.instance, v15 + 16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
  outlined init with take of ForegroundAppDetecting(v18, (uint64_t)&v19);
  outlined init with take of ForegroundAppDetecting(&v15, (uint64_t)v21 + 8);
  outlined init with take of ForegroundAppDetecting(&v30, (uint64_t)v22);
  outlined init with take of ForegroundAppDetecting(&v27, (uint64_t)v23 + 8);
  long long v8 = v25;
  *(_OWORD *)(a1 + 160) = v24;
  *(_OWORD *)(a1 + 176) = v8;
  *(void *)(a1 + 192) = v26;
  long long v9 = v23[0];
  *(_OWORD *)(a1 + 96) = v22[1];
  *(_OWORD *)(a1 + 112) = v9;
  long long v10 = v23[2];
  *(_OWORD *)(a1 + 128) = v23[1];
  *(_OWORD *)(a1 + 144) = v10;
  long long v11 = v21[1];
  *(_OWORD *)(a1 + 32) = v21[0];
  *(_OWORD *)(a1 + 48) = v11;
  long long v12 = v22[0];
  *(_OWORD *)(a1 + 64) = v21[2];
  *(_OWORD *)(a1 + 80) = v12;
  long long v13 = v20;
  *(_OWORD *)a1 = v19;
  *(_OWORD *)(a1 + 16) = v13;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_24F9AFE58()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_24F9AFE98()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t outlined init with copy of ModelSessionFactory(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 328) = v19;
  *(void *)(v9 + 336) = v8;
  *(_OWORD *)(v9 + 312) = v18;
  *(_OWORD *)(v9 + 296) = v17;
  *(_OWORD *)(v9 + 280) = v16;
  *(_OWORD *)(v9 + 264) = v15;
  *(void *)(v9 + 248) = a7;
  *(void *)(v9 + 256) = a8;
  *(void *)(v9 + 232) = a5;
  *(void *)(v9 + 240) = a6;
  *(void *)(v9 + 216) = a3;
  *(void *)(v9 + 224) = a4;
  *(void *)(v9 + 200) = a1;
  *(void *)(v9 + 208) = a2;
  uint64_t v10 = type metadata accessor for GATError();
  *(void *)(v9 + 344) = v10;
  *(void *)(v9 + 352) = *(void *)(v10 - 8);
  *(void *)(v9 + 360) = swift_task_alloc();
  *(void *)(v9 + 368) = swift_task_alloc();
  type metadata accessor for DocumentInfo(0);
  *(void *)(v9 + 376) = swift_task_alloc();
  type metadata accessor for ImageInfo(0);
  *(void *)(v9 + 384) = swift_task_alloc();
  *(void *)(v9 + 392) = type metadata accessor for ScreenContent(0);
  *(void *)(v9 + 400) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  *(void *)(v9 + 408) = swift_task_alloc();
  *(void *)(v9 + 416) = type metadata accessor for SelectedContent();
  *(void *)(v9 + 424) = swift_task_alloc();
  *(void *)(v9 + 432) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v9 + 440) = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 448) = v12;
  *(void *)(v9 + 456) = v11;
  return MEMORY[0x270FA2498](GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:), v12, v11);
}

uint64_t GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:)()
{
  long long v17 = v0;
  if (one-time initialization token for genFromMediaController != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[58] = __swift_project_value_buffer(v1, (uint64_t)static Logger.genFromMediaController);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[27];
  if (v4)
  {
    uint64_t v14 = v0[26];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v16 = v7;
    *(_DWORD *)uint64_t v6 = 136315650;
    v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E3, 0x800000024FA42050, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2080;
    swift_bridgeObjectRetain();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v2, v3, "%s.%s [userQuery = %s]", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v7, -1, -1);
    MEMORY[0x25336A180](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (void *)v0[42];
  v0[59] = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.loadScreenContentProcess.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  v0[60] = type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordLoadScreenContentStarted()();
  swift_release();
  uint64_t v9 = v8 + 10;
  uint64_t v10 = v8[13];
  uint64_t v11 = v8[14];
  __swift_project_boxed_opaque_existential_1(v9, v10);
  long long v15 = (uint64_t (*)(void *, uint64_t, uint64_t))(*(void *)(v11 + 8) + **(int **)(v11 + 8));
  uint64_t v12 = (void *)swift_task_alloc();
  v0[61] = v12;
  void *v12 = v0;
  v12[1] = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  return v15(v0 + 2, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 456);
  BOOL v4 = *(void *)(v2 + 448);
  if (v0) {
    unint64_t v5 = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  }
  else {
    unint64_t v5 = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1((void *)(v0[42] + 120), *(void *)(v0[42] + 144));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[63] = v1;
  void *v1 = v0;
  v1[1] = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  uint64_t v2 = v0[53];
  return ContentSelector.select(from:)(v2, (uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 512) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 456);
  BOOL v4 = *(void *)(v2 + 448);
  if (v0) {
    unint64_t v5 = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  }
  else {
    unint64_t v5 = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t);
  void (*v9)(uint64_t, float);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v1 = v0[54];
  uint64_t v2 = v0[51];
  uint64_t v31 = v0[52];
  os_log_type_t v3 = v0[50];
  outlined init with take of SelectedContent(v0[53], v1, (uint64_t (*)(void))type metadata accessor for SelectedContent);
  static MetricsUtils.shared.getter();
  static Signpost.loadScreenContentProcess.getter();
  BOOL v4 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v2, &demangling cache variable for type metadata for OSSignpostID?);
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordLoadScreenContentEnded(originalMediaType:originalMediaSizeInKBs:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  outlined init with copy of ScreenContent(v1, v3, type metadata accessor for ScreenContent);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v6 = v0[54];
  uint64_t v7 = v0[50];
  uint64_t v8 = (uint64_t (*)(uint64_t, unint64_t))v0[38];
  uint64_t v9 = (void (*)(uint64_t, float))v0[34];
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with take of SelectedContent(v7, v0[47], type metadata accessor for DocumentInfo);
    uint64_t v10 = v8(0x1000000000000022, 0x800000024FA42140);
    v9(v10, 0.2);
    uint64_t v11 = v6 + *(int *)(v31 + 20);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[67] = v12;
    void *v12 = v0;
    v12[1] = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
    long long v13 = v0[47];
    uint64_t v14 = v0[30];
    long long v15 = v0[31];
    uint64_t v16 = v0[29];
    long long v17 = v0[26];
    uint64_t v18 = v0[27];
    uint64_t v19 = v0[25];
    return GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:)(v19, v17, v18, v16, v13, v11, v14, v15);
  }
  else
  {
    outlined init with take of SelectedContent(v7, v0[48], type metadata accessor for ImageInfo);
    uint64_t v21 = v8(0x1000000000000020, 0x800000024FA42170);
    v9(v21, 0.2);
    unint64_t v22 = v6 + *(int *)(v31 + 20);
    uint64_t v23 = (void *)swift_task_alloc();
    v0[65] = v23;
    *uint64_t v23 = v0;
    v23[1] = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
    long long v24 = v0[48];
    long long v25 = v0[30];
    uint64_t v26 = v0[31];
    long long v27 = v0[29];
    uint64_t v28 = v0[26];
    Swift::Int_optional v29 = v0[27];
    long long v30 = v0[25];
    return GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:)(v30, v28, v29, v27, v24, v22, v25, v26);
  }
}

{
  uint64_t v0;
  void *v1;
  id *v2;
  id v3;
  char v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t (*v22)(void);
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;

  Swift::Int_optional v29 = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 512);
  *(void *)(v0 + 152) = v1;
  uint64_t v2 = (id *)(v0 + 152);
  os_log_type_t v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    BOOL v4 = *(unsigned char *)(v0 + 73);
    unint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      long long v24 = (void *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v28[0] = v26;
      *(_DWORD *)uint64_t v7 = 136315650;
      *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E3, 0x800000024FA42050, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 22) = 2112;
      lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
      swift_allocError();
      void *v8 = v4;
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 128) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v24 = v9;
      _os_log_impl(&dword_24F9A2000, v5, v6, "%s.%s [ContentRequestErrors is = %@]", (uint8_t *)v7, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v24, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v26, -1, -1);
      MEMORY[0x25336A180](v7, -1, -1);
    }

    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    objc_allocWithZone((Class)type metadata accessor for CustomErrorWithLocalizedDescription());
    swift_bridgeObjectRetain();
    CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)();
    swift_willThrow();
    long long v17 = *v2;
  }
  else
  {

    uint64_t v10 = v1;
    uint64_t v11 = v1;
    uint64_t v12 = Logger.logObject.getter();
    long long v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      long long v25 = (void *)swift_slowAlloc();
      long long v27 = swift_slowAlloc();
      v28[0] = v27;
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E3, 0x800000024FA42050, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2112;
      long long v15 = v1;
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 104) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v25 = v16;

      _os_log_impl(&dword_24F9A2000, v12, v13, "%s.%s [error = %@]", (uint8_t *)v14, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v25, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v27, -1, -1);
      MEMORY[0x25336A180](v14, -1, -1);
    }
    else
    {
    }
    static MetricsUtils.shared.getter();
    static Signpost.loadScreenContentError.getter();
    dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
    swift_release();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordLoadScreenContentFailed(code:domain:)();
    swift_release();
    uint64_t v18 = (void *)_convertErrorToNSError(_:)();
    uint64_t v19 = objc_msgSend(v18, sel_domain);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v20 = (void *)_convertErrorToNSError(_:)();
    objc_msgSend(v20, sel_code);

    uint64_t v21 = objc_allocWithZone((Class)type metadata accessor for CustomErrorWithLocalizedDescription());
    CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)();
    swift_willThrow();
    long long v17 = v1;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 528) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 456);
  BOOL v4 = *(void *)(v2 + 448);
  if (v0) {
    unint64_t v5 = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  }
  else {
    unint64_t v5 = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[48];
  swift_release();
  outlined destroy of DocumentInfo(v1, type metadata accessor for ImageInfo);
  outlined destroy of DocumentInfo(v0[54], (uint64_t (*)(void))type metadata accessor for SelectedContent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 544) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 456);
  BOOL v4 = *(void *)(v2 + 448);
  if (v0) {
    unint64_t v5 = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  }
  else {
    unint64_t v5 = GenerateTextFromMediaController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:progressInitializationCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[47];
  swift_release();
  outlined destroy of DocumentInfo(v1, type metadata accessor for DocumentInfo);
  outlined destroy of DocumentInfo(v0[54], (uint64_t (*)(void))type metadata accessor for SelectedContent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  uint64_t v0;
  void *v1;
  id *v2;
  id v3;
  char v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t (*v22)(void);
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;

  Swift::Int_optional v29 = v0;
  swift_release();
  uint64_t v1 = *(void **)(v0 + 496);
  *(void *)(v0 + 152) = v1;
  uint64_t v2 = (id *)(v0 + 152);
  os_log_type_t v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    BOOL v4 = *(unsigned char *)(v0 + 73);
    unint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      long long v24 = (void *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v28[0] = v26;
      *(_DWORD *)uint64_t v7 = 136315650;
      *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E3, 0x800000024FA42050, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 22) = 2112;
      lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
      swift_allocError();
      void *v8 = v4;
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 128) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v24 = v9;
      _os_log_impl(&dword_24F9A2000, v5, v6, "%s.%s [ContentRequestErrors is = %@]", (uint8_t *)v7, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v24, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v26, -1, -1);
      MEMORY[0x25336A180](v7, -1, -1);
    }

    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    objc_allocWithZone((Class)type metadata accessor for CustomErrorWithLocalizedDescription());
    swift_bridgeObjectRetain();
    CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)();
    swift_willThrow();
    long long v17 = *v2;
  }
  else
  {

    uint64_t v10 = v1;
    uint64_t v11 = v1;
    uint64_t v12 = Logger.logObject.getter();
    long long v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      long long v25 = (void *)swift_slowAlloc();
      long long v27 = swift_slowAlloc();
      v28[0] = v27;
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E3, 0x800000024FA42050, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2112;
      long long v15 = v1;
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 104) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v25 = v16;

      _os_log_impl(&dword_24F9A2000, v12, v13, "%s.%s [error = %@]", (uint8_t *)v14, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v25, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v27, -1, -1);
      MEMORY[0x25336A180](v14, -1, -1);
    }
    else
    {
    }
    static MetricsUtils.shared.getter();
    static Signpost.loadScreenContentError.getter();
    dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
    swift_release();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordLoadScreenContentFailed(code:domain:)();
    swift_release();
    uint64_t v18 = (void *)_convertErrorToNSError(_:)();
    uint64_t v19 = objc_msgSend(v18, sel_domain);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v20 = (void *)_convertErrorToNSError(_:)();
    objc_msgSend(v20, sel_code);

    uint64_t v21 = objc_allocWithZone((Class)type metadata accessor for CustomErrorWithLocalizedDescription());
    CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)();
    swift_willThrow();
    long long v17 = v1;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;

  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 384);
  swift_release();
  outlined destroy of DocumentInfo(v1, type metadata accessor for ImageInfo);
  uint64_t v2 = *(void **)(v0 + 528);
  *(void *)(v0 + 80) = v2;
  os_log_type_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    BOOL v4 = *(void *)(v0 + 432);
    uint64_t v6 = *(void *)(v0 + 360);
    unint64_t v5 = *(void *)(v0 + 368);
    uint64_t v7 = *(void *)(v0 + 344);
    uint64_t v8 = *(void *)(v0 + 352);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v5, v7);
    lazy protocol witness table accessor for type GATError and conformance GATError((unint64_t *)&lazy protocol witness table cache variable for type GATError and conformance GATError, MEMORY[0x263F407A8]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, v6, v7);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    outlined destroy of DocumentInfo(v4, (uint64_t (*)(void))type metadata accessor for SelectedContent);
  }
  else
  {

    uint64_t v10 = v2;
    uint64_t v11 = v2;
    uint64_t v12 = Logger.logObject.getter();
    long long v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      long long v15 = (void *)swift_slowAlloc();
      Swift::Int_optional v29 = swift_slowAlloc();
      v30[0] = v29;
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E3, 0x800000024FA42050, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2112;
      uint64_t v16 = v2;
      long long v17 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 176) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v15 = v17;

      _os_log_impl(&dword_24F9A2000, v12, v13, "%s.%s [error = %@]", (uint8_t *)v14, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v15, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v29, -1, -1);
      MEMORY[0x25336A180](v14, -1, -1);
    }
    else
    {
    }
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    *(void *)(v0 + 144) = v2;
    uint64_t v18 = v2;
    if (swift_dynamicCast())
    {
      uint64_t v19 = *(void *)(v0 + 56);
      long long v20 = *(void *)(v0 + 64);
      uint64_t v21 = *(unsigned __int8 *)(v0 + 72);
      if (v21 == 4) {
        outlined consume of GenerateTextFromMediaController.Error(v19, v20, 4u);
      }
      else {
        outlined consume of GenerateTextFromMediaController.Error(v19, v20, v21);
      }
    }
    unint64_t v22 = *(void *)(v0 + 432);
    uint64_t v23 = (void *)_convertErrorToNSError(_:)();
    long long v24 = objc_msgSend(v23, sel_domain);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v25 = (void *)_convertErrorToNSError(_:)();
    objc_msgSend(v25, sel_code);

    uint64_t v26 = objc_allocWithZone((Class)type metadata accessor for CustomErrorWithLocalizedDescription());
    CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)();
    swift_willThrow();

    outlined destroy of DocumentInfo(v22, (uint64_t (*)(void))type metadata accessor for SelectedContent);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;

  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 376);
  swift_release();
  outlined destroy of DocumentInfo(v1, type metadata accessor for DocumentInfo);
  uint64_t v2 = *(void **)(v0 + 544);
  *(void *)(v0 + 80) = v2;
  os_log_type_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    BOOL v4 = *(void *)(v0 + 432);
    uint64_t v6 = *(void *)(v0 + 360);
    unint64_t v5 = *(void *)(v0 + 368);
    uint64_t v7 = *(void *)(v0 + 344);
    uint64_t v8 = *(void *)(v0 + 352);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v5, v7);
    lazy protocol witness table accessor for type GATError and conformance GATError((unint64_t *)&lazy protocol witness table cache variable for type GATError and conformance GATError, MEMORY[0x263F407A8]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, v6, v7);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    outlined destroy of DocumentInfo(v4, (uint64_t (*)(void))type metadata accessor for SelectedContent);
  }
  else
  {

    uint64_t v10 = v2;
    uint64_t v11 = v2;
    uint64_t v12 = Logger.logObject.getter();
    long long v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      long long v15 = (void *)swift_slowAlloc();
      Swift::Int_optional v29 = swift_slowAlloc();
      v30[0] = v29;
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E3, 0x800000024FA42050, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2112;
      uint64_t v16 = v2;
      long long v17 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 176) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v15 = v17;

      _os_log_impl(&dword_24F9A2000, v12, v13, "%s.%s [error = %@]", (uint8_t *)v14, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v15, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v29, -1, -1);
      MEMORY[0x25336A180](v14, -1, -1);
    }
    else
    {
    }
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    *(void *)(v0 + 144) = v2;
    uint64_t v18 = v2;
    if (swift_dynamicCast())
    {
      uint64_t v19 = *(void *)(v0 + 56);
      long long v20 = *(void *)(v0 + 64);
      uint64_t v21 = *(unsigned __int8 *)(v0 + 72);
      if (v21 == 4) {
        outlined consume of GenerateTextFromMediaController.Error(v19, v20, 4u);
      }
      else {
        outlined consume of GenerateTextFromMediaController.Error(v19, v20, v21);
      }
    }
    unint64_t v22 = *(void *)(v0 + 432);
    uint64_t v23 = (void *)_convertErrorToNSError(_:)();
    long long v24 = objc_msgSend(v23, sel_domain);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v25 = (void *)_convertErrorToNSError(_:)();
    objc_msgSend(v25, sel_code);

    uint64_t v26 = objc_allocWithZone((Class)type metadata accessor for CustomErrorWithLocalizedDescription());
    CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)();
    swift_willThrow();

    outlined destroy of DocumentInfo(v22, (uint64_t (*)(void))type metadata accessor for SelectedContent);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 488) = v26;
  *(void *)(v9 + 496) = v8;
  *(_OWORD *)(v9 + 472) = v25;
  *(_OWORD *)(v9 + 456) = v24;
  *(_OWORD *)(v9 + 440) = v23;
  *(_OWORD *)(v9 + 424) = v22;
  *(void *)(v9 + 408) = a7;
  *(void *)(v9 + 416) = a8;
  *(void *)(v9 + 392) = a4;
  *(void *)(v9 + 400) = a5;
  *(void *)(v9 + 376) = a2;
  *(void *)(v9 + 384) = a3;
  *(void *)(v9 + 368) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  *(void *)(v9 + 504) = swift_task_alloc();
  type metadata accessor for ModelResponse();
  *(void *)(v9 + 512) = swift_task_alloc();
  *(void *)(v9 + 520) = swift_task_alloc();
  *(void *)(v9 + 528) = swift_task_alloc();
  *(void *)(v9 + 536) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SessionPersistenceUtils.SessionStoredValues();
  *(void *)(v9 + 544) = v10;
  *(void *)(v9 + 552) = *(void *)(v10 - 8);
  *(void *)(v9 + 560) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GATError();
  *(void *)(v9 + 568) = v11;
  *(void *)(v9 + 576) = *(void *)(v11 - 8);
  *(void *)(v9 + 584) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for GenerativeAssistantSettingsIntentHelper.RequestType();
  *(void *)(v9 + 592) = v12;
  *(void *)(v9 + 600) = *(void *)(v12 - 8);
  *(void *)(v9 + 608) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GenerativeAssistantSettingsIntentHelper.ResponseType();
  *(void *)(v9 + 616) = v13;
  *(void *)(v9 + 624) = *(void *)(v13 - 8);
  *(void *)(v9 + 632) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for GenerativeAssistantUseCase();
  *(void *)(v9 + 640) = v14;
  *(void *)(v9 + 648) = *(void *)(v14 - 8);
  *(void *)(v9 + 656) = swift_task_alloc();
  *(void *)(v9 + 664) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GATAttachedMediaInfo?);
  *(void *)(v9 + 672) = swift_task_alloc();
  *(void *)(v9 + 680) = type metadata accessor for InvocationContext();
  *(void *)(v9 + 688) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v9 + 696) = swift_task_alloc();
  *(void *)(v9 + 704) = swift_task_alloc();
  *(void *)(v9 + 712) = swift_task_alloc();
  *(void *)(v9 + 720) = swift_task_alloc();
  *(void *)(v9 + 728) = swift_task_alloc();
  *(void *)(v9 + 736) = swift_task_alloc();
  *(void *)(v9 + 744) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Logger();
  *(void *)(v9 + 752) = v15;
  *(void *)(v9 + 760) = *(void *)(v15 - 8);
  *(void *)(v9 + 768) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceUserActivity?);
  *(void *)(v9 + 776) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  *(void *)(v9 + 784) = v16;
  *(void *)(v9 + 792) = *(void *)(v16 - 8);
  *(void *)(v9 + 800) = swift_task_alloc();
  *(void *)(v9 + 808) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  *(void *)(v9 + 816) = swift_task_alloc();
  *(void *)(v9 + 824) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for IntelligenceFile.Attributes();
  *(void *)(v9 + 832) = v17;
  *(void *)(v9 + 840) = *(void *)(v17 - 8);
  *(void *)(v9 + 848) = swift_task_alloc();
  *(void *)(v9 + 856) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v9 + 864) = static MainActor.shared.getter();
  uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 872) = v19;
  *(void *)(v9 + 880) = v18;
  return MEMORY[0x270FA2498](GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:), v19, v18);
}

void GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:)()
{
  v259 = v0;
  uint64_t v1 = (float *)v0;
  uint64_t v2 = v0[50];
  BOOL v4 = *(void **)v2;
  os_log_type_t v3 = *(void **)(v2 + 8);
  if (*(unsigned char *)(v2 + 16))
  {
    type metadata accessor for PreparedImage();
    swift_allocObject();
    outlined copy of ImageSource(v4, v3, 1);
    id v5 = v4;
    long long v23 = PreparedImage.init(_:)(v5);
    float v24 = v23[10];
    objc_msgSend(*((id *)v23 + 2), sel_size);
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    id v29 = v5;
    v279.value = 256;
    v279.is_nil = 0;
    v280.value = 256;
    v280.is_nil = 0;
    v30.super.Class isa = UIImage.resizedImage(maxPixelsLong:maxPixelsShort:)(v279, v280).super.isa;
    outlined consume of ImageSource(v4, v3, 1);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    goto LABEL_10;
  }
  uint64_t v6 = v0[107];
  uint64_t v7 = *((void *)v1 + 105);
  uint64_t v8 = *((void *)v1 + 104);
  uint64_t v9 = *((void *)v1 + 103);
  outlined copy of ImageSource(*(void **)v2, *(void **)(v2 + 8), 0);
  swift_retain();
  id v10 = v3;
  IntelligenceFile.attributes.getter();
  id v247 = (id)IntelligenceFile.Attributes.fileSize.getter();
  char v256 = v11;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  uint64_t v12 = type metadata accessor for ImageInfo(0);
  outlined init with copy of OnScreenContent.UIMetadata?(v2 + *(int *)(v12 + 28), v9, (uint64_t *)&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v13 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v14 = *(void *)(v13 - 8);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13);
  uint64_t v16 = *((void *)v1 + 103);
  if (v15 == 1)
  {
    swift_release();

    outlined destroy of Result<URL, SharingMediaAttachmentError>(v16, (uint64_t *)&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    goto LABEL_6;
  }
  v250 = v3;
  uint64_t v17 = (uint64_t)v4;
  uint64_t v18 = *((void *)v1 + 101);
  uint64_t v19 = *((void *)v1 + 99);
  uint64_t v20 = *((void *)v1 + 98);
  OnScreenContent.UIMetadata.window.getter();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v13);
  OnScreenContent.UIMetadata.Window.boundingBox.getter();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  outlined init with take of URL?((uint64_t)(v1 + 34), (uint64_t)(v1 + 24), (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if ((_BYTE)v1[32])
  {
LABEL_6:
    if ((v256 & 1) == 0)
    {
      id v21 = v10;
      swift_release();
      type metadata accessor for SELFUtils();
      static SELFUtils.shared.getter();
      dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
      swift_release();
      lazy protocol witness table accessor for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error();
      swift_allocError();
      *(void *)uint64_t v22 = 0xD000000000000041;
      *(void *)(v22 + 8) = 0x800000024FA42320;
      *(unsigned char *)(v22 + 16) = 1;
LABEL_13:
      swift_willThrow();

      swift_release();
LABEL_14:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int v42 = (void (*)(void))*((void *)v1 + 1);
LABEL_15:
      v42();
      return;
    }
LABEL_12:
    id v21 = v10;
    swift_release();
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    lazy protocol witness table accessor for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error();
    swift_allocError();
    *(void *)uint64_t v41 = 0xD000000000000037;
    *(void *)(v41 + 8) = 0x800000024FA422E0;
    *(unsigned char *)(v41 + 16) = 0;
    goto LABEL_13;
  }
  if (v256) {
    goto LABEL_12;
  }
  uint64_t v26 = *((void *)v1 + 14);
  uint64_t v28 = *((void *)v1 + 15);
  float v24 = (float)(uint64_t)v247 * 0.00000095367;
  v30.super.Class isa = (Class)v10;
  long long v23 = 0;
  uint64_t v32 = v17;
  BOOL v4 = 0;
  uint64_t v31 = v250;
LABEL_10:
  v251 = v31;
  *((void *)v1 + 117) = v4;
  Class isa = v30.super.isa;
  *((void *)v1 + 116) = v23;
  uint64_t v243 = v32;
  *((void *)v1 + 115) = v32;
  *((void *)v1 + 114) = v31;
  *((UIImage *)v1 + 113) = v30;
  v1[33] = v24;
  *((void *)v1 + 112) = v28;
  *((void *)v1 + 111) = v26;
  uint64_t v33 = *((void *)v1 + 102);
  uint64_t v34 = *((void *)v1 + 50);
  uint64_t v35 = type metadata accessor for ImageInfo(0);
  outlined init with copy of OnScreenContent.UIMetadata?(v34 + *(int *)(v35 + 28), v33, (uint64_t *)&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v36 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v37 = *(void *)(v36 - 8);
  int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v33, 1, v36);
  uint64_t v39 = *((void *)v1 + 102);
  if (v38 == 1)
  {
    uint64_t v40 = (uint64_t *)&demangling cache variable for type metadata for OnScreenContent.UIMetadata?;
LABEL_20:
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v39, v40);
    int v52 = 0;
    goto LABEL_22;
  }
  uint64_t v43 = *((void *)v1 + 100);
  uint64_t v44 = *((void *)v1 + 99);
  uint64_t v45 = *((void *)v1 + 98);
  char v46 = v1;
  uint64_t v47 = *((void *)v1 + 97);
  OnScreenContent.UIMetadata.window.getter();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v36);
  OnScreenContent.UIMetadata.Window.intelligenceUserActivity.getter();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  uint64_t v48 = type metadata accessor for IntelligenceUserActivity();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = v47;
  uint64_t v1 = v46;
  int v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v50, 1, v48);
  uint64_t v39 = *((void *)v46 + 97);
  if (v51 == 1)
  {
    uint64_t v40 = (uint64_t *)&demangling cache variable for type metadata for IntelligenceUserActivity?;
    goto LABEL_20;
  }
  int v52 = (void *)IntelligenceUserActivity.userActivity.getter();
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v39, v48);
LABEL_22:
  *((void *)v1 + 118) = v52;
  if (one-time initialization token for genFromMediaController != -1) {
    swift_once();
  }
  uint64_t v53 = *((void *)v1 + 96);
  uint64_t v54 = *((void *)v1 + 95);
  *((void *)v1 + 119) = __swift_project_value_buffer(*((void *)v1 + 94), (uint64_t)static Logger.genFromMediaController);
  (*(void (**)(uint64_t))(v54 + 16))(v53);
  id v55 = v52;
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  v245 = v4;
  id v248 = v55;
  if (os_log_type_enabled(v56, v57))
  {
    os_log_type_t v237 = v57;
    uint64_t v58 = swift_slowAlloc();
    uint64_t v236 = swift_slowAlloc();
    v258[0] = v236;
    *(_DWORD *)uint64_t v58 = 136315650;
    *((void *)v1 + 45) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v258);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v58 + 12) = 2080;
    *((void *)v1 + 27) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, v258);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v58 + 22) = 2080;
    if (v52)
    {
      id v59 = objc_msgSend(v55, sel_webpageURL);
      uint64_t v60 = *((void *)v1 + 92);
      if (v59)
      {
        unint64_t v61 = v59;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v62 = type metadata accessor for URL();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v60, 0, 1, v62);
      }
      else
      {
        uint64_t v62 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v60, 1, 1, v62);
      }
      uint64_t v73 = *((void *)v1 + 93);
      outlined init with take of URL?(*((void *)v1 + 92), v73, &demangling cache variable for type metadata for URL?);
      type metadata accessor for URL();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48))(v73, 1, v62) != 1)
      {
        unint64_t v74 = 0xE400000000000000;
        uint64_t v75 = 1702195828;
LABEL_35:
        uint64_t v76 = *((void *)v1 + 96);
        os_log_type_t v77 = v1;
        uint64_t v78 = *((void *)v1 + 95);
        uint64_t v79 = *((void *)v77 + 94);
        outlined destroy of Result<URL, SharingMediaAttachmentError>(*((void *)v77 + 93), &demangling cache variable for type metadata for URL?);
        *((void *)v77 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v74, v258);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v55 = v248;

        _os_log_impl(&dword_24F9A2000, v56, v237, "%s.%s [NSUserActivity webpageURL provided = %s]", (uint8_t *)v58, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v236, -1, -1);
        MEMORY[0x25336A180](v58, -1, -1);

        uint64_t v65 = v77;
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v79);
        BOOL v4 = v245;
        if (!v52) {
          goto LABEL_36;
        }
LABEL_29:
        id v67 = objc_msgSend(v55, sel_activityType);
        uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v70 = v69;

        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v71 = *((void *)v1 + 93);
      uint64_t v72 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v71, 1, 1, v72);
    }
    unint64_t v74 = 0xE500000000000000;
    uint64_t v75 = 0x65736C6166;
    goto LABEL_35;
  }
  uint64_t v63 = *((void *)v1 + 96);
  uint64_t v64 = *((void *)v1 + 95);
  uint64_t v65 = v1;
  uint64_t v66 = *((void *)v1 + 94);

  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v66);
  if (v52) {
    goto LABEL_29;
  }
LABEL_36:
  uint64_t v68 = 0;
  uint64_t v70 = 0;
LABEL_37:
  uint64_t v80 = v65;
  char v81 = GenerateTextFromMediaController.isFromWebsite(activityType:)(v68, v70);
  *((unsigned char *)v65 + 131) = v81 & 1;
  swift_bridgeObjectRelease();
  if (v81)
  {
    v82 = v251;
    if (v52)
    {
      id v83 = objc_msgSend(v248, sel_webpageURL);
      uint64_t v84 = *((void *)v65 + 90);
      if (v83)
      {
        uint64_t v85 = v83;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v86 = type metadata accessor for URL();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v84, 0, 1, v86);
      }
      else
      {
        uint64_t v91 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v84, 1, 1, v91);
      }
      outlined init with take of URL?(*((void *)v65 + 90), *((void *)v65 + 91), &demangling cache variable for type metadata for URL?);
    }
    else
    {
      uint64_t v89 = *((void *)v65 + 91);
      uint64_t v90 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 1, 1, v90);
    }
  }
  else
  {
    uint64_t v87 = *((void *)v65 + 91);
    uint64_t v88 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 1, v88);
    v82 = v251;
  }
  uint64_t v92 = *((void *)v65 + 50);
  uint64_t v93 = v92;
  if (*(unsigned char *)(v92 + 17) != 1) {
    goto LABEL_60;
  }
  id v94 = (id)MobileGestalt_get_current_device();
  if (!v94)
  {

    __break(1u);
    return;
  }
  uint64_t v95 = v94;
  uint64_t v96 = *((void *)v65 + 86);
  uint64_t v97 = *((void *)v65 + 49);
  char internalBuild = MobileGestalt_get_internalBuild();

  outlined init with copy of ScreenContent(v97, v96, (uint64_t (*)(void))type metadata accessor for InvocationContext);
  uint64_t v99 = *((void *)v65 + 86);
  if (internalBuild)
  {
    v100 = (void *)(v99 + *(int *)(*((void *)v65 + 85) + 32));
    if (v100[1])
    {
      char v101 = MEMORY[0x253368690](*v100);
      outlined destroy of DocumentInfo(v99, (uint64_t (*)(void))type metadata accessor for InvocationContext);
      if (v101) {
        goto LABEL_55;
      }
    }
    else
    {
      outlined destroy of DocumentInfo(*((void *)v65 + 86), (uint64_t (*)(void))type metadata accessor for InvocationContext);
    }
    Swift::String_optional v103 = ForegroundAppDetector.getForegroundAppBundleID()();
    if (v102)
    {
    }
    else if (v103.value._object)
    {
      char v169 = specialized static TamaleUtils.requestWithTamale(appBundleID:)(v103.value._countAndFlagsBits, (uint64_t)v103.value._object);
      swift_bridgeObjectRelease();
      if (v169)
      {
        uint64_t v170 = *((void *)v65 + 91);
        uint64_t v171 = *((void *)v65 + 46);
        swift_release();
        LOBYTE(v258[0]) = 4;
        static GeneratedResponse.failureResponse(_:catId:)((char *)v258, v171);

        outlined destroy of Result<URL, SharingMediaAttachmentError>(v170, &demangling cache variable for type metadata for URL?);
        swift_release();
        swift_release();

LABEL_79:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        int v42 = (void (*)(void))*((void *)v80 + 1);
        goto LABEL_15;
      }
    }
    goto LABEL_55;
  }
  outlined destroy of DocumentInfo(*((void *)v65 + 86), (uint64_t (*)(void))type metadata accessor for InvocationContext);
LABEL_55:
  uint64_t v104 = *((void *)v65 + 84);
  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  LOBYTE(v258[0]) = 0;
  GATAttachedMediaInfo.init(originalMediaType:originalMediaSizeInKBs:mediaQAUseCase:gatUsecase:processedMediaType:processedMediaSizeInKBs:)();
  uint64_t v105 = type metadata accessor for GATAttachedMediaInfo();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v104, 0, 1, v105);
  dispatch thunk of SELFUtils.gatMediaInfo.setter();
  swift_release();
  if (one-time initialization token for selfSchemaLogger != -1) {
    swift_once();
  }
  __swift_project_value_buffer(*((void *)v65 + 94), (uint64_t)static Logger.selfSchemaLogger);
  v106 = Logger.logObject.getter();
  os_log_type_t v107 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v106, v107))
  {
    v108 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v108 = 0;
    _os_log_impl(&dword_24F9A2000, v106, v107, "Successfully updated GAT MediaInfoContext.", v108, 2u);
    MEMORY[0x25336A180](v108, -1, -1);
  }

  uint64_t v93 = *((void *)v65 + 50);
LABEL_60:
  char v109 = specialized static TamaleUtils.requestWithTamale(appBundleID:)(*(void *)(v93 + 24), *(void *)(v93 + 32));
  uint64_t v110 = *((void *)v80 + 83);
  uint64_t v111 = *((void *)v80 + 81);
  uint64_t v112 = *((void *)v80 + 80);
  if (v109) {
    (*(void (**)(uint64_t, void, uint64_t))(v111 + 104))(v110, *MEMORY[0x263F40708], v112);
  }
  else {
    (*(void (**)(uint64_t, void, uint64_t))(v111 + 16))(v110, *((void *)v80 + 61), v112);
  }
  lazy protocol witness table accessor for type GATError and conformance GATError((unint64_t *)&lazy protocol witness table cache variable for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase, MEMORY[0x263F40720]);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    __swift_project_boxed_opaque_existential_1((void *)(*((void *)v80 + 62) + 160), *(void *)(*((void *)v80 + 62) + 184));
    if ((dispatch thunk of GenerativeAssistantRestrictions.isUseCaseAvailable(useCase:)() & 1) == 0)
    {
      swift_release();
      if (one-time initialization token for genFromTextController != -1) {
        swift_once();
      }
      __swift_project_value_buffer(*((void *)v80 + 94), (uint64_t)static Logger.genFromTextController);
      v137 = Logger.logObject.getter();
      os_log_type_t v138 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v137, v138))
      {
        uint64_t v139 = swift_slowAlloc();
        uint64_t v140 = swift_slowAlloc();
        v258[0] = v140;
        *(_DWORD *)uint64_t v139 = 136315394;
        *((void *)v80 + 23) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v258);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v139 + 12) = 2080;
        *((void *)v80 + 22) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, v258);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v137, v138, "%s.%s request is not available", (uint8_t *)v139, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v140, -1, -1);
        MEMORY[0x25336A180](v139, -1, -1);
      }

      uint64_t v141 = *((void *)v80 + 91);
      uint64_t v142 = *((void *)v80 + 83);
      uint64_t v143 = *((void *)v80 + 81);
      uint64_t v144 = *((void *)v80 + 80);
      uint64_t v145 = *((void *)v80 + 46);
      LOBYTE(v258[0]) = 8;
      static GeneratedResponse.failureResponse(_:catId:)((char *)v258, v145);

      (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v142, v144);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v141, &demangling cache variable for type metadata for URL?);
      swift_release();
      swift_release();

      goto LABEL_79;
    }
  }
  uint64_t v113 = *((void *)v80 + 85);
  uint64_t v114 = *((void *)v80 + 79);
  uint64_t v115 = *((void *)v80 + 78);
  uint64_t v116 = *((void *)v80 + 77);
  uint64_t v117 = *((void *)v80 + 76);
  uint64_t v118 = *((void *)v80 + 75);
  uint64_t v119 = *((void *)v80 + 74);
  (*(void (**)(uint64_t, void, uint64_t))(v118 + 104))(v117, *MEMORY[0x263F407E8], v119);
  v80[43] = *(float *)(v113 + 32);
  static GenerativeAssistantSettingsIntentHelper.responseType(for:isExplicitRequest:sessionId:withTamale:)();
  (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v117, v119);
  int v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 88))(v114, v116);
  if (v120 == *MEMORY[0x263F407F8])
  {
    swift_release();
    v121 = Logger.logObject.getter();
    os_log_type_t v122 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v121, v122))
    {
      uint64_t v123 = swift_slowAlloc();
      uint64_t v124 = swift_slowAlloc();
      v258[0] = v124;
      *(_DWORD *)uint64_t v123 = 136315394;
      *((void *)v80 + 33) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v123 + 12) = 2080;
      *((void *)v80 + 34) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v121, v122, "%s.%s Fallback to SiriX.", (uint8_t *)v123, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v124, -1, -1);
      MEMORY[0x25336A180](v123, -1, -1);
    }

    uint64_t v146 = *((void *)v80 + 91);
    uint64_t v147 = *((void *)v80 + 83);
    uint64_t v148 = *((void *)v80 + 81);
    uint64_t v149 = *((void *)v80 + 80);
    v150 = (void *)*((void *)v80 + 73);
    uint64_t v151 = *((void *)v80 + 72);
    uint64_t v152 = *((void *)v80 + 71);
    void *v150 = 0xD000000000000043;
    v150[1] = 0x800000024FA42290;
    (*(void (**)(void *, void, uint64_t))(v151 + 104))(v150, *MEMORY[0x263F40798], v152);
    GATError.logError()();
    (*(void (**)(void *, uint64_t))(v151 + 8))(v150, v152);
    swift_willThrow();

    uint64_t v153 = v149;
    uint64_t v1 = v80;
    (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v147, v153);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v146, &demangling cache variable for type metadata for URL?);
    swift_release();
    swift_release();

    goto LABEL_14;
  }
  int v125 = v120;
  if (v120 == *MEMORY[0x263F40808])
  {
    v126 = Logger.logObject.getter();
    os_log_type_t v127 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v126, v127))
    {
      uint64_t v128 = swift_slowAlloc();
      uint64_t v129 = swift_slowAlloc();
      v258[0] = v129;
      *(_DWORD *)uint64_t v128 = 136315394;
      *((void *)v80 + 43) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v128 + 12) = 2080;
      *((void *)v80 + 44) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v126, v127, "%s.%s Request confirmation", (uint8_t *)v128, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v129, -1, -1);
      MEMORY[0x25336A180](v128, -1, -1);
    }

    swift_retain();
    v130 = (void *)swift_task_alloc();
    *((void *)v80 + 120) = v130;
    void *v130 = v80;
    v130[1] = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
    uint64_t v131 = *((void *)v80 + 91);
    uint64_t v132 = *((void *)v80 + 53);
    uint64_t v134 = *((void *)v80 + 49);
    uint64_t v133 = *((void *)v80 + 50);
    uint64_t v135 = *((void *)v80 + 47);
    uint64_t v136 = *((void *)v80 + 48);
    uint64_t v278 = *((void *)v80 + 54);
    GenerateTextFromMediaController.requestImageConfirmation(invocationContext:imageInfo:contextRetrievalFile:previewImage:fileSizeInMB:webpageURL:userQuery:requestConfirmationCallback:)(v134, v133, v243, (uint64_t)isa, v131, v135, v136, v132, v24);
  }
  else
  {
    v154 = v80;
    if (v120 == *MEMORY[0x263F40800])
    {
      int v155 = *(unsigned __int8 *)(v92 + 17);
      v156 = (void *)swift_task_alloc();
      *((void *)v80 + 122) = v156;
      void *v156 = v80;
      v156[1] = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
      uint64_t v157 = *((void *)v80 + 59);
      uint64_t v158 = *((void *)v80 + 60);
      uint64_t v159 = *((void *)v80 + 54);
      uint64_t v160 = *((void *)v80 + 49);
      if (v155) {
        char v161 = 0;
      }
      else {
        char v161 = 2;
      }
      uint64_t v162 = *((void *)v80 + 53);
      GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:)(v162, v159, v157, v158, v161, v160);
    }
    else
    {
      int v163 = *MEMORY[0x263F407F0];
      v164 = Logger.logObject.getter();
      if (v125 == v163)
      {
        os_log_type_t v165 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v164, v165))
        {
          uint64_t v166 = swift_slowAlloc();
          uint64_t v167 = swift_slowAlloc();
          v258[0] = v167;
          *(_DWORD *)uint64_t v166 = 136315394;
          *((void *)v80 + 35) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v258);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v166 + 12) = 2080;
          *((void *)v80 + 36) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, v258);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v164, v165, "%s.%s Skipping confirmation: user previously confirmed media upload or denied screenshot upload in this session", (uint8_t *)v166, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v167, -1, -1);
          MEMORY[0x25336A180](v166, -1, -1);
        }
      }
      else
      {
        os_log_type_t v172 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v164, v172))
        {
          uint64_t v173 = swift_slowAlloc();
          uint64_t v174 = swift_slowAlloc();
          v258[0] = v174;
          *(_DWORD *)uint64_t v173 = 136315394;
          *((void *)v80 + 31) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v258);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v173 + 12) = 2080;
          *((void *)v80 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, v258);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v164, v172, "%s.%s Unkown Default when checking for confirmation vs enablement vs SiriX", (uint8_t *)v173, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v174, -1, -1);
          MEMORY[0x25336A180](v173, -1, -1);
        }

        uint64_t v168 = (*(uint64_t (**)(void, void))(*((void *)v80 + 78) + 8))(*((void *)v80 + 79), *((void *)v80 + 77));
      }
      (*((void (**)(uint64_t, float))v80 + 55))(v168, 0.6);
      swift_bridgeObjectRetain_n();
      v175 = Logger.logObject.getter();
      os_log_type_t v176 = static os_log_type_t.debug.getter();
      BOOL v177 = os_log_type_enabled(v175, v176);
      unint64_t v178 = *((void *)v80 + 48);
      if (v177)
      {
        uint64_t v252 = *((void *)v80 + 47);
        uint64_t v179 = swift_slowAlloc();
        uint64_t v180 = swift_slowAlloc();
        v258[0] = v180;
        *(_DWORD *)uint64_t v179 = 136315650;
        *((void *)v80 + 28) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v258);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v179 + 12) = 2080;
        *((void *)v80 + 29) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, v258);
        v154 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v179 + 22) = 2080;
        swift_bridgeObjectRetain();
        *((void *)v80 + 30) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v252, v178, v258);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24F9A2000, v175, v176, "%s.%s [userQuery = %s]", (uint8_t *)v179, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v180, -1, -1);
        MEMORY[0x25336A180](v179, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v181 = *((void *)v154 + 55);
      uint64_t v182 = *((void *)v154 + 56);
      v183 = (uint64_t *)(*((void *)v154 + 49) + *((int *)v154 + 43));
      uint64_t v184 = swift_allocObject();
      *((void *)v154 + 126) = v184;
      *(void *)(v184 + 16) = v181;
      *(void *)(v184 + 24) = v182;
      uint64_t v185 = *v183;
      uint64_t v186 = v183[1];
      swift_retain();
      static SessionPersistenceUtils.storedValuesForSession(sessionId:)();
      static SessionPersistenceUtils.clearStoredValuesForSession()();
      LOBYTE(v182) = SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter();
      type metadata accessor for SELFUtils();
      static SELFUtils.shared.getter();
      if (v182)
      {
        uint64_t v187 = *((void *)v154 + 89);
        uint64_t v188 = *((void *)v154 + 88);
        uint64_t v257 = *((void *)v154 + 52);
        uint64_t v253 = *((void *)v154 + 51);
        v189 = v154;
        uint64_t v190 = *((void *)v154 + 49);
        LOBYTE(v258[0]) = 0;
        dispatch thunk of SELFUtils.gatUsecase.setter();
        swift_release();
        uint64_t v191 = type metadata accessor for URL();
        v192 = *(void (**)(void, void, void, void))(*(void *)(v191 - 8) + 56);
        v192(v187, 1, 1, v191);
        v192(v188, 1, 1, v191);
        *((unsigned char *)v189 + 129) = *(unsigned char *)(v190 + 1);
        swift_retain();
        v193 = (void *)swift_task_alloc();
        *((void *)v189 + 127) = v193;
        LOBYTE(v258[0]) = 1;
        void *v193 = v189;
        v193[1] = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
        uint64_t v194 = *((void *)v189 + 89);
        uint64_t v195 = *((void *)v189 + 88);
        uint64_t v196 = *((void *)v189 + 66);
        uint64_t v198 = *((void *)v189 + 57);
        uint64_t v197 = *((void *)v189 + 58);
        uint64_t v199 = *((void *)v189 + 47);
        uint64_t v200 = *((void *)v189 + 48);
        uint64_t v277 = *((void *)v189 + 83);
        uint64_t v278 = (uint64_t)v189 + 129;
        long long v276 = 0u;
        char v275 = 0;
        uint64_t v273 = v198;
        uint64_t v274 = v197;
        v271 = partial apply for closure #1 in GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
        uint64_t v272 = v184;
        uint64_t v270 = v257;
        uint64_t v268 = v186;
        uint64_t v269 = v253;
        uint64_t v266 = v195;
        uint64_t v267 = v185;
        long long v265 = 0u;
        long long v264 = 0u;
        char v263 = 2;
        uint64_t v262 = 0x100000000;
        char v261 = 1;
        uint64_t v201 = 0;
        uint64_t v202 = 0;
        uint64_t v203 = 0;
        uint64_t v204 = 0;
      }
      else
      {
        char v205 = *((unsigned char *)v154 + 131);
        uint64_t v206 = *((void *)v154 + 115);
        uint64_t v207 = *((void *)v154 + 87);
        uint64_t v208 = *((void *)v154 + 62);
        LOBYTE(v258[0]) = 0;
        dispatch thunk of SELFUtils.gatUsecase.setter();
        swift_release();
        outlined init with copy of ModelOrchestrator(v208, (uint64_t)(v154 + 4));
        uint64_t v209 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v209 - 8) + 56))(v207, 1, 1, v209);
        if (v206)
        {
          char v254 = v205;
          uint64_t v210 = *((void *)v154 + 106);
          uint64_t v211 = *((void *)v154 + 105);
          uint64_t v212 = *((void *)v154 + 104);
          uint64_t v213 = *((void *)v154 + 63);
          swift_retain();
          swift_retain_n();
          uint64_t v214 = IntelligenceFile.name.getter();
          uint64_t v216 = v215;
          swift_release();
          swift_retain();
          IntelligenceFile.attributes.getter();
          swift_release();
          IntelligenceFile.Attributes.contentType.getter();
          (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v210, v212);
          uint64_t v217 = type metadata accessor for UTType();
          uint64_t v218 = *(void *)(v217 - 8);
          int v219 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v218 + 48))(v213, 1, v217);
          uint64_t v220 = *((void *)v154 + 63);
          uint64_t v239 = v214;
          if (v219 == 1)
          {
            outlined destroy of Result<URL, SharingMediaAttachmentError>(v220, &demangling cache variable for type metadata for UTType?);
            uint64_t v238 = 0;
            uint64_t v221 = 0;
          }
          else
          {
            uint64_t v238 = UTType.preferredMIMEType.getter();
            uint64_t v221 = v223;
            (*(void (**)(uint64_t, uint64_t))(v218 + 8))(v220, v217);
          }
          uint64_t v222 = v216;
          char v205 = v254;
        }
        else
        {
          swift_retain();
          uint64_t v222 = 0;
          uint64_t v238 = 0;
          uint64_t v239 = 0;
          uint64_t v221 = 0;
        }
        char v246 = v205 ^ 1;
        *((void *)v154 + 130) = v221;
        *((void *)v154 + 129) = v222;
        uint64_t v224 = *((unsigned int *)v154 + 33);
        id v249 = (id)*((void *)v154 + 111);
        uint64_t v255 = *((void *)v154 + 112);
        uint64_t v242 = *((void *)v154 + 51);
        uint64_t v244 = *((void *)v154 + 52);
        uint64_t v226 = *((void *)v154 + 49);
        uint64_t v225 = *((void *)v154 + 50);
        v227 = (uint64_t *)(v226 + *((int *)v154 + 43));
        uint64_t v228 = v227[1];
        uint64_t v240 = *v227;
        v229 = v154;
        uint64_t v230 = *(void *)(v225 + 24);
        uint64_t v231 = *(void *)(v225 + 32);
        *((unsigned char *)v229 + 130) = *(unsigned char *)(v226 + 1);
        swift_retain();
        v232 = (void *)swift_task_alloc();
        *((void *)v229 + 131) = v232;
        LOBYTE(v258[0]) = 0;
        void *v232 = v229;
        v232[1] = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
        uint64_t v201 = *((void *)v229 + 116);
        uint64_t v202 = *((void *)v229 + 115);
        uint64_t v233 = *((void *)v229 + 91);
        uint64_t v194 = *((void *)v229 + 87);
        uint64_t v196 = *((void *)v229 + 65);
        uint64_t v235 = *((void *)v229 + 57);
        uint64_t v234 = *((void *)v229 + 58);
        uint64_t v199 = *((void *)v229 + 47);
        uint64_t v200 = *((void *)v229 + 48);
        uint64_t v277 = *((void *)v229 + 83);
        uint64_t v278 = (uint64_t)v229 + 130;
        *(void *)&long long v276 = v230;
        *((void *)&v276 + 1) = v231;
        char v275 = 0;
        uint64_t v273 = v235;
        uint64_t v274 = v234;
        v271 = partial apply for closure #1 in GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
        uint64_t v272 = v184;
        uint64_t v270 = v244;
        uint64_t v268 = v228;
        uint64_t v269 = v242;
        uint64_t v266 = v233;
        uint64_t v267 = v240;
        *((void *)&v265 + 1) = v221;
        *((void *)&v264 + 1) = v222;
        *(void *)&long long v265 = v238;
        *(void *)&long long v264 = v239;
        char v263 = v246;
        uint64_t v262 = v224;
        char v261 = 0;
        uint64_t v203 = (uint64_t)v249;
        uint64_t v204 = v255;
      }
      ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v196, v199, v200, v194, v201, v202, v203, v204);
    }
  }
}

uint64_t GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 968) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 880);
    uint64_t v4 = *(void *)(v2 + 872);
    id v5 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 880);
    uint64_t v4 = *(void *)(v2 + 872);
    id v5 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  (*(void (**)(float))(v0 + 440))(0.6);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 384);
    uint64_t v41 = *(void *)(v0 + 376);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v45 = v43;
    *(_DWORD *)uint64_t v4 = 136315650;
    *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v3, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s [userQuery = %s]", (uint8_t *)v4, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v43, -1, -1);
    MEMORY[0x25336A180](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  id v5 = *(void *)(v0 + 440);
  uint64_t v6 = *(void *)(v0 + 448);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 1008) = v7;
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  swift_retain();
  static SessionPersistenceUtils.storedValuesForSession(sessionId:)();
  static SessionPersistenceUtils.clearStoredValuesForSession()();
  LOBYTE(v6) = SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter();
  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  if (v6)
  {
    uint64_t v8 = *(void *)(v0 + 712);
    uint64_t v9 = *(void *)(v0 + 704);
    id v10 = *(void *)(v0 + 392);
    dispatch thunk of SELFUtils.gatUsecase.setter();
    swift_release();
    char v11 = type metadata accessor for URL();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    v12(v8, 1, 1, v11);
    v12(v9, 1, 1, v11);
    *(unsigned char *)(v0 + 129) = *(unsigned char *)(v10 + 1);
    swift_retain();
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 1016) = v13;
    *uint64_t v13 = v0;
    v13[1] = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
    uint64_t v14 = *(void *)(v0 + 712);
    int v15 = *(void *)(v0 + 528);
    uint64_t v16 = *(void *)(v0 + 376);
    uint64_t v17 = *(void *)(v0 + 384);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    id v21 = 0;
    goto LABEL_13;
  }
  uint64_t v22 = *(void *)(v0 + 920);
  long long v23 = *(void *)(v0 + 696);
  float v24 = *(void *)(v0 + 496);
  dispatch thunk of SELFUtils.gatUsecase.setter();
  swift_release();
  outlined init with copy of ModelOrchestrator(v24, v0 + 16);
  uint64_t v25 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v23, 1, 1, v25);
  if (v22)
  {
    uint64_t v26 = *(void *)(v0 + 848);
    uint64_t v27 = *(void *)(v0 + 840);
    uint64_t v28 = *(void *)(v0 + 832);
    id v29 = *(void *)(v0 + 504);
    swift_retain();
    swift_retain_n();
    IntelligenceFile.name.getter();
    uint64_t v31 = v30;
    swift_release();
    swift_retain();
    IntelligenceFile.attributes.getter();
    swift_release();
    IntelligenceFile.Attributes.contentType.getter();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    uint64_t v32 = type metadata accessor for UTType();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v29, 1, v32);
    uint64_t v35 = *(void *)(v0 + 504);
    if (v34 != 1)
    {
      UTType.preferredMIMEType.getter();
      uint64_t v36 = v37;
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v32);
      goto LABEL_12;
    }
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v35, &demangling cache variable for type metadata for UTType?);
  }
  else
  {
    swift_retain();
    uint64_t v31 = 0;
  }
  uint64_t v36 = 0;
LABEL_12:
  *(void *)(v0 + 1040) = v36;
  *(void *)(v0 + 1032) = v31;
  uint64_t v40 = *(void *)(v0 + 888);
  int v42 = *(void *)(v0 + 896);
  *(unsigned char *)(v0 + 130) = *(unsigned char *)(*(void *)(v0 + 392) + 1);
  swift_retain();
  int v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 1048) = v38;
  *int v38 = v0;
  v38[1] = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  uint64_t v18 = *(void *)(v0 + 928);
  uint64_t v19 = *(void *)(v0 + 920);
  uint64_t v14 = *(void *)(v0 + 696);
  int v15 = *(void *)(v0 + 520);
  uint64_t v16 = *(void *)(v0 + 376);
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v20 = v40;
  id v21 = v42;
LABEL_13:
  return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v15, v16, v17, v14, v18, v19, v20, v21);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 984) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 880);
  uint64_t v4 = *(void *)(v2 + 872);
  if (v0) {
    id v5 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else {
    id v5 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v17 = v0;
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v16 = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s Request confirmation", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v4, -1, -1);
    MEMORY[0x25336A180](v3, -1, -1);
  }

  swift_retain();
  id v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 992) = v5;
  *id v5 = v0;
  v5[1] = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  uint64_t v6 = *(void *)(v0 + 920);
  uint64_t v7 = *(void *)(v0 + 904);
  uint64_t v8 = *(float *)(v0 + 132);
  uint64_t v9 = *(void *)(v0 + 728);
  id v10 = *(void *)(v0 + 424);
  uint64_t v12 = *(void *)(v0 + 392);
  char v11 = *(void *)(v0 + 400);
  uint64_t v13 = *(void *)(v0 + 376);
  uint64_t v14 = *(void *)(v0 + 384);
  uint64_t v19 = *(void *)(v0 + 432);
  return GenerateTextFromMediaController.requestImageConfirmation(invocationContext:imageInfo:contextRetrievalFile:previewImage:fileSizeInMB:webpageURL:userQuery:requestConfirmationCallback:)(v12, v11, v6, v7, v9, v13, v14, v10, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1000) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 880);
    uint64_t v4 = *(void *)(v2 + 872);
    id v5 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 880);
    uint64_t v4 = *(void *)(v2 + 872);
    id v5 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1024) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[89];
    uint64_t v4 = v2[88];
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v3, &demangling cache variable for type metadata for URL?);
    id v5 = v2[110];
    uint64_t v6 = v2[109];
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else
  {
    uint64_t v8 = v2[89];
    uint64_t v9 = v2[88];
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v9, &demangling cache variable for type metadata for URL?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v8, &demangling cache variable for type metadata for URL?);
    id v5 = v2[110];
    uint64_t v6 = v2[109];
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v7, v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  id v29 = v0;
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 536);
  swift_release();
  outlined init with take of SelectedContent(v1, v2, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v28 = v6;
    *(_DWORD *)id v5 = 136315394;
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v3, v4, "%s.%s Generative response complete", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v6, -1, -1);
    MEMORY[0x25336A180](v5, -1, -1);
  }

  id v21 = *(void **)(v0 + 944);
  uint64_t v26 = *(void **)(v0 + 936);
  uint64_t v20 = *(void **)(v0 + 912);
  uint64_t v18 = *(void *)(v0 + 680);
  uint64_t v19 = *(void **)(v0 + 904);
  float v24 = *(void *)(v0 + 664);
  uint64_t v25 = *(void *)(v0 + 728);
  uint64_t v7 = *(void *)(v0 + 656);
  uint64_t v8 = *(void *)(v0 + 648);
  uint64_t v17 = *(void *)(v0 + 640);
  uint64_t v9 = *(void *)(v0 + 552);
  uint64_t v22 = *(void *)(v0 + 544);
  long long v23 = *(void *)(v0 + 560);
  id v10 = *(void *)(v0 + 536);
  char v11 = *(void **)(v0 + 512);
  uint64_t v12 = *(void *)(v0 + 488);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 368);
  (*(void (**)(float))(v0 + 440))(0.85);
  outlined init with copy of ScreenContent(v10, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v27 = *(unsigned char *)(v13 + 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v12, v17);
  GeneratedResponse.init(_:mode:useCaseID:isFirstRequest:)(v11, &v27, v7, *(unsigned char *)(v13 + *(int *)(v18 + 36)), v14);

  swift_release();
  outlined destroy of DocumentInfo(v10, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v23, v22);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v24, v17);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v25, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 1056) = v0;
  swift_task_dealloc();
  uint64_t v4 = v2[87];
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
  outlined destroy of ModelOrchestrator(v3);
  id v5 = v2[110];
  uint64_t v6 = v2[109];
  if (v0) {
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else {
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v7, v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  id v29 = v0;
  uint64_t v1 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 536);
  swift_release();
  outlined init with take of SelectedContent(v1, v2, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v28 = v6;
    *(_DWORD *)id v5 = 136315394;
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v3, v4, "%s.%s Generative response complete", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v6, -1, -1);
    MEMORY[0x25336A180](v5, -1, -1);
  }

  id v21 = *(void **)(v0 + 944);
  uint64_t v26 = *(void **)(v0 + 936);
  uint64_t v20 = *(void **)(v0 + 912);
  uint64_t v18 = *(void *)(v0 + 680);
  uint64_t v19 = *(void **)(v0 + 904);
  float v24 = *(void *)(v0 + 664);
  uint64_t v25 = *(void *)(v0 + 728);
  uint64_t v7 = *(void *)(v0 + 656);
  uint64_t v8 = *(void *)(v0 + 648);
  uint64_t v17 = *(void *)(v0 + 640);
  uint64_t v9 = *(void *)(v0 + 552);
  uint64_t v22 = *(void *)(v0 + 544);
  long long v23 = *(void *)(v0 + 560);
  id v10 = *(void *)(v0 + 536);
  char v11 = *(void **)(v0 + 512);
  uint64_t v12 = *(void *)(v0 + 488);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 368);
  (*(void (**)(float))(v0 + 440))(0.85);
  outlined init with copy of ScreenContent(v10, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v27 = *(unsigned char *)(v13 + 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v12, v17);
  GeneratedResponse.init(_:mode:useCaseID:isFirstRequest:)(v11, &v27, v7, *(unsigned char *)(v13 + *(int *)(v18 + 36)), v14);

  swift_release();
  outlined destroy of DocumentInfo(v10, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v23, v22);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v24, v17);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v25, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  swift_release();
  swift_release();
  type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.userCancelDuringConfirmation.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRequestCanceled()();
  swift_release();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v18 = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    v0[41] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    v0[42] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s User cancelled", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v4, -1, -1);
    MEMORY[0x25336A180](v3, -1, -1);
  }

  id v5 = (void *)v0[121];
  uint64_t v6 = (void *)v0[118];
  uint64_t v16 = (void *)v0[117];
  uint64_t v7 = (void *)v0[114];
  uint64_t v8 = (void *)v0[113];
  uint64_t v9 = v0[91];
  id v10 = v0[83];
  char v11 = v0[81];
  uint64_t v12 = v0[80];
  uint64_t v13 = v0[46];
  uint64_t v17 = 7;
  static GeneratedResponse.failureResponse(_:catId:)(&v17, v13);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v9, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void *v10;
  uint64_t v11;

  uint64_t v1 = (void *)v0[118];
  id v10 = (void *)v0[117];
  uint64_t v2 = (void *)v0[114];
  uint64_t v3 = (void *)v0[113];
  uint64_t v4 = v0[91];
  id v5 = v0[83];
  uint64_t v6 = v0[81];
  uint64_t v7 = v0[80];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  swift_release();
  swift_release();
  type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.userCancelDuringConfirmation.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRequestCanceled()();
  swift_release();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v18 = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    v0[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    v0[38] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000E5, 0x800000024FA421A0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s User cancelled", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v4, -1, -1);
    MEMORY[0x25336A180](v3, -1, -1);
  }

  id v5 = (void *)v0[125];
  uint64_t v6 = (void *)v0[118];
  uint64_t v16 = (void *)v0[117];
  uint64_t v7 = (void *)v0[114];
  uint64_t v8 = (void *)v0[113];
  uint64_t v9 = v0[91];
  id v10 = v0[83];
  char v11 = v0[81];
  uint64_t v12 = v0[80];
  uint64_t v13 = v0[46];
  uint64_t v17 = 7;
  static GeneratedResponse.failureResponse(_:catId:)(&v17, v13);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v9, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v1 = (void *)v0[118];
  uint64_t v13 = (void *)v0[117];
  uint64_t v2 = (void *)v0[114];
  uint64_t v3 = (void *)v0[113];
  uint64_t v12 = v0[91];
  char v11 = v0[83];
  uint64_t v4 = v0[81];
  id v5 = v0[80];
  uint64_t v6 = v0[70];
  uint64_t v7 = v0[69];
  uint64_t v8 = v0[68];
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v5);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v12, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v1 = (void *)v0[118];
  uint64_t v13 = (void *)v0[117];
  uint64_t v2 = (void *)v0[114];
  uint64_t v3 = (void *)v0[113];
  uint64_t v12 = v0[91];
  char v11 = v0[83];
  uint64_t v4 = v0[81];
  id v5 = v0[80];
  uint64_t v6 = v0[70];
  uint64_t v7 = v0[69];
  uint64_t v8 = v0[68];
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v5);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v12, &demangling cache variable for type metadata for URL?);
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 696) = v8;
  *(void *)(v9 + 688) = v29;
  *(_OWORD *)(v9 + 656) = v27;
  *(_OWORD *)(v9 + 672) = v28;
  *(_OWORD *)(v9 + 624) = v25;
  *(_OWORD *)(v9 + 640) = v26;
  *(void *)(v9 + 616) = a8;
  *(void *)(v9 + 608) = a7;
  *(void *)(v9 + 600) = a6;
  *(void *)(v9 + 592) = a5;
  *(void *)(v9 + 584) = a4;
  *(void *)(v9 + 576) = a3;
  *(void *)(v9 + 568) = a2;
  *(void *)(v9 + 560) = a1;
  uint64_t v10 = type metadata accessor for GenerativeAssistantUseCase();
  *(void *)(v9 + 704) = v10;
  *(void *)(v9 + 712) = *(void *)(v10 - 8);
  *(void *)(v9 + 720) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  *(void *)(v9 + 728) = swift_task_alloc();
  *(void *)(v9 + 736) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for IntelligenceFile.Attributes();
  *(void *)(v9 + 744) = v11;
  *(void *)(v9 + 752) = *(void *)(v11 - 8);
  *(void *)(v9 + 760) = swift_task_alloc();
  *(void *)(v9 + 768) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageInfo?);
  *(void *)(v9 + 776) = swift_task_alloc();
  *(void *)(v9 + 784) = swift_task_alloc();
  *(void *)(v9 + 792) = swift_task_alloc();
  *(void *)(v9 + 800) = swift_task_alloc();
  *(void *)(v9 + 808) = type metadata accessor for ModelResponse();
  *(void *)(v9 + 816) = swift_task_alloc();
  *(void *)(v9 + 824) = swift_task_alloc();
  *(void *)(v9 + 832) = swift_task_alloc();
  *(void *)(v9 + 840) = swift_task_alloc();
  *(void *)(v9 + 848) = swift_task_alloc();
  *(void *)(v9 + 856) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment?);
  *(void *)(v9 + 864) = swift_task_alloc();
  *(void *)(v9 + 872) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SessionPersistenceUtils.SessionStoredValues();
  *(void *)(v9 + 880) = v12;
  *(void *)(v9 + 888) = *(void *)(v12 - 8);
  *(void *)(v9 + 896) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GATError();
  *(void *)(v9 + 904) = v13;
  *(void *)(v9 + 912) = *(void *)(v13 - 8);
  *(void *)(v9 + 920) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for GenerativeAssistantSettingsIntentHelper.RequestType();
  *(void *)(v9 + 928) = v14;
  *(void *)(v9 + 936) = *(void *)(v14 - 8);
  *(void *)(v9 + 944) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for GenerativeAssistantSettingsIntentHelper.ResponseType();
  *(void *)(v9 + 952) = v15;
  *(void *)(v9 + 960) = *(void *)(v15 - 8);
  *(void *)(v9 + 968) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v9 + 976) = swift_task_alloc();
  *(void *)(v9 + 984) = swift_task_alloc();
  *(void *)(v9 + 992) = swift_task_alloc();
  *(void *)(v9 + 1000) = swift_task_alloc();
  *(void *)(v9 + 1008) = swift_task_alloc();
  *(void *)(v9 + 1016) = swift_task_alloc();
  *(void *)(v9 + 1024) = swift_task_alloc();
  *(void *)(v9 + 1032) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for Logger();
  *(void *)(v9 + 1040) = v16;
  *(void *)(v9 + 1048) = *(void *)(v16 - 8);
  *(void *)(v9 + 1056) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  *(void *)(v9 + 1064) = v17;
  *(void *)(v9 + 1072) = *(void *)(v17 - 8);
  *(void *)(v9 + 1080) = swift_task_alloc();
  *(void *)(v9 + 1088) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  *(void *)(v9 + 1096) = swift_task_alloc();
  *(void *)(v9 + 1104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceUserActivity?);
  *(void *)(v9 + 1112) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SupportedDocumentType?);
  *(void *)(v9 + 1120) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for SupportedDocumentType();
  *(void *)(v9 + 1128) = v18;
  *(void *)(v9 + 1136) = *(void *)(v18 - 8);
  *(void *)(v9 + 1144) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GATAttachedMediaInfo?);
  *(void *)(v9 + 1152) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for GenerativeUsecases();
  *(void *)(v9 + 1160) = v19;
  *(void *)(v9 + 1168) = *(void *)(v19 - 8);
  *(void *)(v9 + 1176) = swift_task_alloc();
  *(void *)(v9 + 1184) = type metadata accessor for DocumentInfo(0);
  *(void *)(v9 + 1192) = swift_task_alloc();
  *(void *)(v9 + 1200) = swift_task_alloc();
  uint64_t v20 = type metadata accessor for URL();
  *(void *)(v9 + 1208) = v20;
  *(void *)(v9 + 1216) = *(void *)(v20 - 8);
  *(void *)(v9 + 1224) = swift_task_alloc();
  *(void *)(v9 + 1232) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v9 + 1240) = static MainActor.shared.getter();
  uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 1248) = v22;
  *(void *)(v9 + 1256) = v21;
  return MEMORY[0x270FA2498](GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:), v22, v21);
}

uint64_t GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:)()
{
  uint64_t v317 = v0;
  uint64_t v1 = *(void *)(v0 + 1232);
  uint64_t v2 = *(void *)(v0 + 1216);
  uint64_t v3 = *(void *)(v0 + 1208);
  uint64_t v4 = *(void *)(v0 + 592);
  id v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 1264) = v5;
  *(void *)(v0 + 1272) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v3);
  if (one-time initialization token for genFromMediaController != -1) {
    swift_once();
  }
  uint64_t v6 = *(void *)(v0 + 1232);
  uint64_t v7 = *(void *)(v0 + 1224);
  uint64_t v8 = *(void *)(v0 + 1208);
  uint64_t v9 = *(void *)(v0 + 1200);
  uint64_t v10 = *(void *)(v0 + 1192);
  uint64_t v11 = *(void *)(v0 + 592);
  uint64_t v12 = __swift_project_value_buffer(*(void *)(v0 + 1040), (uint64_t)static Logger.genFromMediaController);
  *(void *)(v0 + 1280) = v12;
  v5(v7, v6, v8);
  outlined init with copy of ScreenContent(v11, v9, type metadata accessor for DocumentInfo);
  outlined init with copy of ScreenContent(v11, v10, type metadata accessor for DocumentInfo);
  uint64_t v304 = v12;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = *(void *)(v0 + 1224);
  uint64_t v17 = *(void *)(v0 + 1216);
  uint64_t v18 = *(void *)(v0 + 1208);
  uint64_t v19 = *(void *)(v0 + 1200);
  if (v15)
  {
    log = v13;
    os_log_type_t v282 = v14;
    uint64_t v284 = *(void *)(v0 + 1184);
    uint64_t v20 = swift_slowAlloc();
    uint64_t v281 = swift_slowAlloc();
    uint64_t v315 = v281;
    *(_DWORD *)uint64_t v20 = 136316162;
    *(void *)(v0 + 528) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2080;
    *(void *)(v0 + 536) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, &v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 22) = 2080;
    uint64_t v21 = URL.debugDescription.getter();
    *(void *)(v0 + 544) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    long long v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v23(v16, v18);
    *(_WORD *)(v20 + 32) = 2080;
    uint64_t v24 = *(void **)(v19 + *(int *)(v284 + 20));
    long long v25 = v23;
    if (v24)
    {
      id v26 = objc_msgSend(v24, sel_description);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v29 = 0;
    }
    uint64_t v32 = *(void *)(v0 + 1200);
    uint64_t v33 = *(void *)(v0 + 1192);
    uint64_t v34 = *(void *)(v0 + 1184);
    *(void *)(v0 + 312) = v27;
    *(void *)(v0 + 320) = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v35 = String.init<A>(describing:)();
    *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of DocumentInfo(v32, type metadata accessor for DocumentInfo);
    *(_WORD *)(v20 + 42) = 2080;
    if (*(void *)(v33 + *(int *)(v34 + 24)))
    {
      uint64_t v37 = IntelligenceFile.description.getter();
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = 0;
    }
    uint64_t v31 = v25;
    uint64_t v39 = *(void *)(v0 + 1192);
    *(void *)(v0 + 328) = v37;
    *(void *)(v0 + 336) = v38;
    uint64_t v40 = String.init<A>(describing:)();
    *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of DocumentInfo(v39, type metadata accessor for DocumentInfo);
    _os_log_impl(&dword_24F9A2000, log, v282, "%s.%s [url = %s; shortcuts file: %s, context retrieval file: %s]",
      (uint8_t *)v20,
      0x34u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v281, -1, -1);
    MEMORY[0x25336A180](v20, -1, -1);
  }
  else
  {
    uint64_t v30 = *(void *)(v0 + 1192);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v31(*(void *)(v0 + 1224), *(void *)(v0 + 1208));
    outlined destroy of DocumentInfo(v19, type metadata accessor for DocumentInfo);
    outlined destroy of DocumentInfo(v30, type metadata accessor for DocumentInfo);
  }
  v300 = v31;
  *(void *)(v0 + 1288) = v31;
  uint64_t v42 = *(void *)(v0 + 1184);
  uint64_t v43 = *(void *)(v0 + 1176);
  uint64_t v44 = *(void *)(v0 + 1168);
  uint64_t v45 = *(void *)(v0 + 1160);
  uint64_t v309 = *(void *)(v0 + 1152);
  v313 = (void *)(v0 + 176);
  uint64_t v46 = *(void *)(v0 + 592);
  *(void *)(v0 + 1296) = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v44 + 104))(v43, *MEMORY[0x263F406D0], v45);
  GenerativeUsecases.staticString.getter();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  uint64_t v47 = *(int *)(v42 + 32);
  *(_DWORD *)(v0 + 268) = v47;
  uint64_t v48 = (uint64_t *)(v46 + v47);
  static GATSchemaGATMediaType.from(fileExtension:)();
  *(void *)(v0 + 1304) = type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  LOBYTE(v315) = 0;
  GATAttachedMediaInfo.init(originalMediaType:originalMediaSizeInKBs:mediaQAUseCase:gatUsecase:processedMediaType:processedMediaSizeInKBs:)();
  uint64_t v49 = type metadata accessor for GATAttachedMediaInfo();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v309, 0, 1, v49);
  dispatch thunk of SELFUtils.gatMediaInfo.setter();
  swift_release();
  if (one-time initialization token for selfSchemaLogger != -1) {
    swift_once();
  }
  __swift_project_value_buffer(*(void *)(v0 + 1040), (uint64_t)static Logger.selfSchemaLogger);
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    int v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v52 = 0;
    _os_log_impl(&dword_24F9A2000, v50, v51, "Successfully updated GAT MediaInfoContext.", v52, 2u);
    MEMORY[0x25336A180](v52, -1, -1);
  }
  uint64_t v53 = *(void *)(v0 + 1136);
  uint64_t v54 = *(void *)(v0 + 1128);
  uint64_t v55 = *(void *)(v0 + 1120);

  specialized SupportedDocumentHelper.init()(v313);
  SupportedDocumentHelper.getFileType(typeIdentifier:)(*v48, v48[1], v55);
  outlined release of SupportedDocumentHelper((uint64_t)v313);
  int v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v55, 1, v54);
  uint64_t v57 = *(void *)(v0 + 1120);
  if (v56 == 1)
  {
    uint64_t v58 = *(void *)(v0 + 1232);
    uint64_t v59 = *(void *)(v0 + 1208);
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v57, &demangling cache variable for type metadata for SupportedDocumentType?);
    uint64_t v315 = 0;
    unint64_t v316 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    uint64_t v315 = 0xD000000000000017;
    unint64_t v316 = 0x800000024FA424A0;
    uint64_t v60 = *v48;
    unint64_t v61 = (void *)v48[1];
    swift_bridgeObjectRetain();
    v62._uint64_t countAndFlagsBits = v60;
    v62._object = v61;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    uint64_t v63 = v315;
    unint64_t v64 = v316;
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    lazy protocol witness table accessor for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error();
    swift_allocError();
    *(void *)uint64_t v65 = v63;
    *(void *)(v65 + 8) = v64;
    *(unsigned char *)(v65 + 16) = 4;
    swift_willThrow();
    uint64_t v66 = v58;
    uint64_t v67 = v59;
LABEL_48:
    v300(v66, v67);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v135 = *(uint64_t (**)(void))(v0 + 8);
    return v135();
  }
  uint64_t v68 = *(void *)(v0 + 1184);
  uint64_t v69 = *(void *)(v0 + 1104);
  uint64_t v70 = *(void *)(v0 + 592);
  (*(void (**)(void, void, void))(*(void *)(v0 + 1136) + 32))(*(void *)(v0 + 1144), *(void *)(v0 + 1120), *(void *)(v0 + 1128));
  outlined init with copy of OnScreenContent.UIMetadata?(v70 + *(int *)(v68 + 44), v69, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v71 = type metadata accessor for OnScreenContent.UIMetadata();
  *(void *)(v0 + 1312) = v71;
  uint64_t v72 = *(void *)(v71 - 8);
  *(void *)(v0 + 1320) = v72;
  uint64_t v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  *(void *)(v0 + 1328) = v73;
  *(void *)(v0 + 1336) = (v72 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v73(v69, 1, v71) == 1)
  {
    uint64_t v74 = *(void *)(v0 + 1104);
    uint64_t v75 = &demangling cache variable for type metadata for OnScreenContent.UIMetadata?;
LABEL_22:
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v74, v75);
    uint64_t v85 = 0;
    goto LABEL_24;
  }
  uint64_t v76 = *(void *)(v0 + 1112);
  uint64_t v77 = *(void *)(v0 + 1104);
  uint64_t v78 = *(void *)(v0 + 1088);
  uint64_t v79 = *(void *)(v0 + 1072);
  uint64_t v80 = *(void *)(v0 + 1064);
  OnScreenContent.UIMetadata.window.getter();
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v77, v71);
  OnScreenContent.UIMetadata.Window.intelligenceUserActivity.getter();
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
  uint64_t v81 = type metadata accessor for IntelligenceUserActivity();
  uint64_t v82 = *(void *)(v81 - 8);
  int v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v76, 1, v81);
  uint64_t v84 = *(void *)(v0 + 1112);
  if (v83 == 1)
  {
    uint64_t v75 = &demangling cache variable for type metadata for IntelligenceUserActivity?;
    uint64_t v74 = *(void *)(v0 + 1112);
    goto LABEL_22;
  }
  uint64_t v85 = (void *)IntelligenceUserActivity.userActivity.getter();
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v84, v81);
LABEL_24:
  *(void *)(v0 + 1344) = v85;
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 1048) + 16))(*(void *)(v0 + 1056), v304, *(void *)(v0 + 1040));
  id v86 = v85;
  uint64_t v87 = Logger.logObject.getter();
  os_log_type_t v88 = static os_log_type_t.debug.getter();
  v310 = v86;
  if (os_log_type_enabled(v87, v88))
  {
    uint64_t v89 = swift_slowAlloc();
    os_log_t loga = (os_log_t)swift_slowAlloc();
    uint64_t v315 = (uint64_t)loga;
    *(_DWORD *)uint64_t v89 = 136315650;
    *(void *)(v0 + 504) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v89 + 12) = 2080;
    *(void *)(v0 + 512) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, &v315);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v89 + 22) = 2080;
    if (v85)
    {
      id v90 = objc_msgSend(v86, sel_webpageURL);
      if (v90)
      {
        uint64_t v91 = v90;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v92 = 0;
      }
      else
      {
        uint64_t v92 = 1;
      }
      os_log_t v101 = loga;
      uint64_t v102 = *(void *)(v0 + 1216);
      uint64_t v103 = *(void *)(v0 + 1208);
      uint64_t v104 = *(void *)(v0 + 1032);
      uint64_t v105 = *(void *)(v0 + 1024);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v102 + 56))(v105, v92, 1, v103);
      outlined init with take of URL?(v105, v104, &demangling cache variable for type metadata for URL?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v104, 1, v103) != 1)
      {
        unint64_t v106 = 0xE400000000000000;
        uint64_t v107 = 1702195828;
LABEL_35:
        uint64_t v108 = *(void *)(v0 + 1048);
        uint64_t v285 = *(void *)(v0 + 1040);
        os_log_t logc = *(os_log_t *)(v0 + 1056);
        outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 1032), &demangling cache variable for type metadata for URL?);
        *(void *)(v0 + 520) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v106, &v315);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v86 = v310;

        _os_log_impl(&dword_24F9A2000, v87, v88, "%s.%s [NSUserActivity webpageURL provided = %s]", (uint8_t *)v89, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v101, -1, -1);
        MEMORY[0x25336A180](v89, -1, -1);

        (*(void (**)(os_log_t, uint64_t))(v108 + 8))(logc, v285);
        uint64_t v96 = (unsigned char *)(v0 + 264);
        if (!v85) {
          goto LABEL_36;
        }
        goto LABEL_29;
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1216) + 56))(*(void *)(v0 + 1032), 1, 1, *(void *)(v0 + 1208));
      os_log_t v101 = loga;
    }
    unint64_t v106 = 0xE500000000000000;
    uint64_t v107 = 0x65736C6166;
    goto LABEL_35;
  }
  uint64_t v93 = *(void *)(v0 + 1056);
  uint64_t v94 = *(void *)(v0 + 1048);
  uint64_t v95 = *(void *)(v0 + 1040);

  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
  uint64_t v96 = (unsigned char *)(v0 + 264);
  if (!v85)
  {
LABEL_36:
    uint64_t v98 = 0;
    uint64_t v100 = 0;
    goto LABEL_37;
  }
LABEL_29:
  id v97 = objc_msgSend(v86, sel_activityType);
  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v100 = v99;

LABEL_37:
  char v109 = GenerateTextFromMediaController.isFromWebsite(activityType:)(v98, v100);
  v96[41] = v109 & 1;
  swift_bridgeObjectRelease();
  v296 = v96;
  if ((v109 & 1) != 0 && v85)
  {
    id v110 = objc_msgSend(v86, sel_webpageURL);
    uint64_t v111 = *(void *)(v0 + 1216);
    uint64_t v112 = *(void *)(v0 + 1208);
    uint64_t v113 = *(void *)(v0 + 1008);
    if (v110)
    {
      uint64_t v114 = v110;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v115 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56);
      v115(v113, 0, 1, v112);
    }
    else
    {
      uint64_t v115 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56);
      v115(*(void *)(v0 + 1008), 1, 1, v112);
    }
    outlined init with take of URL?(*(void *)(v0 + 1008), *(void *)(v0 + 1016), &demangling cache variable for type metadata for URL?);
  }
  else
  {
    uint64_t v115 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1216) + 56);
    v115(*(void *)(v0 + 1016), 1, 1, *(void *)(v0 + 1208));
  }
  *(void *)(v0 + 1352) = v115;
  uint64_t v116 = *(void *)(v0 + 968);
  uint64_t v117 = *(void *)(v0 + 960);
  uint64_t v118 = *(void *)(v0 + 952);
  uint64_t v119 = *(void *)(v0 + 944);
  uint64_t v120 = *(void *)(v0 + 936);
  uint64_t v121 = *(void *)(v0 + 928);
  *(void *)(v0 + 376) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 552) = 0;
  (*(void (**)(uint64_t, void, uint64_t))(v120 + 104))(v119, *MEMORY[0x263F407E8], v121);
  uint64_t v122 = type metadata accessor for InvocationContext();
  *(void *)(v0 + 1360) = v122;
  *(_DWORD *)(v0 + 308) = *(_DWORD *)(v122 + 32);
  static GenerativeAssistantSettingsIntentHelper.responseType(for:isExplicitRequest:sessionId:withTamale:)();
  (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v119, v121);
  int v123 = (*(uint64_t (**)(uint64_t, uint64_t))(v117 + 88))(v116, v118);
  if (v123 == *MEMORY[0x263F407F8])
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v124 = Logger.logObject.getter();
    os_log_type_t v125 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v124, v125))
    {
      uint64_t v126 = swift_slowAlloc();
      uint64_t v127 = swift_slowAlloc();
      uint64_t v315 = v127;
      *(_DWORD *)uint64_t v126 = 136315394;
      *(void *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v126 + 12) = 2080;
      *(void *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, &v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v124, v125, "%s.%s Fallback to SiriX.", (uint8_t *)v126, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v127, -1, -1);
      MEMORY[0x25336A180](v126, -1, -1);
    }

    uint64_t v305 = *(void *)(v0 + 1232);
    uint64_t v297 = *(void *)(v0 + 1208);
    uint64_t v128 = *(void *)(v0 + 1144);
    uint64_t v129 = *(void *)(v0 + 1136);
    uint64_t v130 = *(void *)(v0 + 1128);
    uint64_t v131 = *(void *)(v0 + 1016);
    uint64_t v132 = *(void **)(v0 + 920);
    uint64_t v133 = *(void *)(v0 + 912);
    uint64_t v134 = *(void *)(v0 + 904);
    *uint64_t v132 = 0xD000000000000043;
    v132[1] = 0x800000024FA42290;
    (*(void (**)(void *, void, uint64_t))(v133 + 104))(v132, *MEMORY[0x263F40798], v134);
    GATError.logError()();
    (*(void (**)(void *, uint64_t))(v133 + 8))(v132, v134);
    swift_willThrow();

    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v131, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v130);
    uint64_t v66 = v305;
    uint64_t v67 = v297;
    goto LABEL_48;
  }
  int v137 = v123;
  if (v123 == *MEMORY[0x263F40808])
  {
    os_log_type_t v138 = Logger.logObject.getter();
    os_log_type_t v139 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v138, v139))
    {
      uint64_t v140 = swift_slowAlloc();
      uint64_t v141 = swift_slowAlloc();
      uint64_t v315 = v141;
      *(_DWORD *)uint64_t v140 = 136315394;
      *(void *)(v0 + 488) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v140 + 12) = 2080;
      *(void *)(v0 + 496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, &v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v138, v139, "%s.%s Request confirmation", (uint8_t *)v140, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v141, -1, -1);
      MEMORY[0x25336A180](v140, -1, -1);
    }

    uint64_t v142 = (void *)swift_task_alloc();
    *(void *)(v0 + 1368) = v142;
    *uint64_t v142 = v0;
    v142[1] = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
    uint64_t v143 = *(void *)(v0 + 1232);
    uint64_t v144 = *(void *)(v0 + 1144);
    uint64_t v145 = *(void *)(v0 + 1016);
    uint64_t v146 = *(void *)(v0 + 632);
    uint64_t v147 = *(void *)(v0 + 600);
    uint64_t v148 = *(void *)(v0 + 592);
    uint64_t v149 = *(void *)(v0 + 584);
    long long v150 = *(_OWORD *)(v0 + 568);
    uint64_t v334 = *(void *)(v0 + 624);
    uint64_t v335 = v146;
    *(_OWORD *)&v333[8] = v150;
    return GenerateTextFromMediaController.requestDocumentConfirmation(invocationContext:documentInfo:associatedScreenshot:associatedScreenshotFile:availableAttachments:fileType:fileURL:webpageURL:userQuery:requestConfirmationCallback:)(v149, v148, v147, v0 + 552, v0 + 376, v144, v143, v145);
  }
  if (v123 == *MEMORY[0x263F40800])
  {
    uint64_t v151 = (void *)swift_task_alloc();
    *(void *)(v0 + 1384) = v151;
    *uint64_t v151 = v0;
    v151[1] = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
    uint64_t v152 = *(void *)(v0 + 680);
    uint64_t v153 = *(void *)(v0 + 672);
    uint64_t v154 = *(void *)(v0 + 632);
    uint64_t v155 = *(void *)(v0 + 624);
    uint64_t v156 = *(void *)(v0 + 584);
    return GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:)(v155, v154, v153, v152, 1, v156);
  }
  int v157 = *MEMORY[0x263F407F0];
  uint64_t v158 = Logger.logObject.getter();
  if (v137 == v157)
  {
    os_log_type_t v159 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v158, v159))
    {
      uint64_t v160 = swift_slowAlloc();
      uint64_t v161 = swift_slowAlloc();
      uint64_t v315 = v161;
      *(_DWORD *)uint64_t v160 = 136315394;
      *(void *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v160 + 12) = 2080;
      *(void *)(v0 + 432) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, &v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v158, v159, "%s.%s Skipping confirmation: user previously confirmed media upload in this session", (uint8_t *)v160, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v161, -1, -1);
      MEMORY[0x25336A180](v160, -1, -1);
    }
  }
  else
  {
    os_log_type_t v163 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v158, v163))
    {
      uint64_t v164 = swift_slowAlloc();
      uint64_t v165 = swift_slowAlloc();
      uint64_t v315 = v165;
      *(_DWORD *)uint64_t v164 = 136315394;
      *(void *)(v0 + 392) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v164 + 12) = 2080;
      *(void *)(v0 + 400) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, &v315);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v158, v163, "%s.%s Unkown Default when checking for confirmation vs enablement vs SiriX", (uint8_t *)v164, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v165, -1, -1);
      MEMORY[0x25336A180](v164, -1, -1);
    }

    uint64_t v162 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 960) + 8))(*(void *)(v0 + 968), *(void *)(v0 + 952));
  }
  uint64_t v166 = *(void *)(v0 + 648);
  uint64_t v167 = *(void (**)(uint64_t, float))(v0 + 640);
  v167(v162, 0.6);
  uint64_t v168 = swift_allocObject();
  *(void *)(v0 + 1416) = v168;
  *(void *)(v168 + 16) = v167;
  *(void *)(v168 + 24) = v166;
  swift_retain();
  static SessionPersistenceUtils.storedValuesForSession(sessionId:)();
  static SessionPersistenceUtils.clearStoredValuesForSession()();
  char v169 = SessionPersistenceUtils.SessionStoredValues.didSelectAlternateAttachment.getter();
  uint64_t v170 = *(void *)(v0 + 376);
  uint64_t v171 = *(void *)(v170 + 16);
  if (v169)
  {
    uint64_t v172 = *(void *)(v0 + 872);
    if (v171)
    {
      uint64_t v173 = v171 - 1;
      uint64_t v174 = type metadata accessor for Attachment();
      uint64_t v175 = *(void *)(v174 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v175 + 16))(v172, v170+ ((*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80))+ *(void *)(v175 + 72) * v173, v174);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, v174);
    }
    else
    {
      uint64_t v174 = type metadata accessor for Attachment();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 56))(v172, 1, 1, v174);
    }
  }
  else
  {
    uint64_t v174 = type metadata accessor for Attachment();
    uint64_t v176 = *(void *)(v174 - 8);
    uint64_t v177 = v176;
    uint64_t v178 = *(void *)(v0 + 872);
    if (v171)
    {
      (*(void (**)(void, unint64_t, uint64_t))(v176 + 16))(*(void *)(v0 + 872), v170 + ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80)), v174);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v177 + 56))(v178, 0, 1, v174);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v176 + 56))(*(void *)(v0 + 872), 1, 1, v174);
    }
  }
  uint64_t v179 = *(void *)(v0 + 872);
  uint64_t v180 = *(void *)(v0 + 864);
  swift_bridgeObjectRelease();
  outlined init with copy of OnScreenContent.UIMetadata?(v179, v180, &demangling cache variable for type metadata for Attachment?);
  type metadata accessor for Attachment();
  uint64_t v181 = *(void *)(v174 - 8);
  int v182 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v181 + 48))(v180, 1, v174);
  uint64_t v183 = *(void *)(v0 + 864);
  if (v182 == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 864), &demangling cache variable for type metadata for Attachment?);
    SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter();
    char v184 = 0;
LABEL_77:
    uint64_t v185 = *(void *)(v0 + 784);
    uint64_t v186 = *(void *)(v0 + 600);
    char v187 = SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter();
    outlined init with copy of OnScreenContent.UIMetadata?(v186, v185, &demangling cache variable for type metadata for ImageInfo?);
    uint64_t v188 = *(void *)(v0 + 784);
    uint64_t v314 = v168;
    if ((v187 & 1) != 0
      || (outlined init with take of URL?(v188, *(void *)(v0 + 776), &demangling cache variable for type metadata for ImageInfo?), uint64_t v188 = *(void *)(v0 + 776), (v184 & 1) != 0)&& (v213 = type metadata accessor for ImageInfo(0), (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v213 - 8) + 48))(v188, 1, v213) == 1))
    {
      v189 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1352);
      uint64_t v190 = *(void *)(v0 + 1208);
      uint64_t v191 = *(void *)(v0 + 992);
      uint64_t v192 = *(void *)(v0 + 984);
      long long v306 = *(_OWORD *)(v0 + 608);
      uint64_t v193 = *(void *)(v0 + 584);
      uint64_t v194 = (uint64_t *)(v193 + *(int *)(v0 + 308));
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v188, &demangling cache variable for type metadata for ImageInfo?);
      static SELFUtils.shared.getter();
      LOBYTE(v315) = 0;
      dispatch thunk of SELFUtils.gatUsecase.setter();
      swift_release();
      v189(v191, 1, 1, v190);
      v189(v192, 1, 1, v190);
      uint64_t v195 = *v194;
      uint64_t v196 = v194[1];
      *(unsigned char *)(v0 + 267) = *(unsigned char *)(v193 + 1);
      swift_retain();
      uint64_t v197 = (void *)swift_task_alloc();
      *(void *)(v0 + 1472) = v197;
      LOBYTE(v315) = 1;
      *uint64_t v197 = v0;
      v197[1] = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
      uint64_t v198 = *(void *)(v0 + 992);
      uint64_t v199 = *(void *)(v0 + 984);
      uint64_t v200 = *(void *)(v0 + 840);
      uint64_t v201 = *(void *)(v0 + 664);
      uint64_t v202 = *(void *)(v0 + 656);
      uint64_t v203 = *(void *)(v0 + 576);
      uint64_t v204 = *(void *)(v0 + 568);
      *(void *)&v333[16] = *(void *)(v0 + 688);
      uint64_t v334 = v0 + 267;
      *(_OWORD *)v333 = 0u;
      char v332 = 0;
      uint64_t v330 = v202;
      uint64_t v331 = v201;
      v328 = partial apply for closure #1 in GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
      uint64_t v329 = v314;
      uint64_t v326 = v196;
      long long v327 = v306;
      uint64_t v324 = v199;
      uint64_t v325 = v195;
      long long v323 = 0u;
      long long v322 = 0u;
      char v321 = 2;
      unint64_t v320 = 0x100000000;
      char v319 = 1;
    }
    else
    {
      v307 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1352);
      char v303 = v296[41];
      v292 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1264);
      uint64_t v214 = *(void *)(v0 + 1232);
      uint64_t v215 = *(void *)(v0 + 1208);
      uint64_t v216 = *(void *)(v0 + 976);
      uint64_t v295 = *(void *)(v0 + 1184);
      uint64_t v298 = *(void *)(v0 + 728);
      uint64_t v217 = *(void *)(v0 + 592);
      uint64_t v218 = *(void *)(v0 + 696);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v188, &demangling cache variable for type metadata for ImageInfo?);
      static SELFUtils.shared.getter();
      LOBYTE(v315) = 0;
      dispatch thunk of SELFUtils.gatUsecase.setter();
      swift_release();
      outlined init with copy of ModelOrchestrator(v218, v0 + 96);
      v292(v216, v214, v215);
      v307(v216, 0, 1, v215);
      int v219 = (uint64_t *)(v217 + *(int *)(v295 + 28));
      uint64_t v220 = v219[1];
      uint64_t v308 = *v219;
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      uint64_t v221 = type metadata accessor for UTType();
      uint64_t v222 = *(void *)(v221 - 8);
      int v223 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v222 + 48))(v298, 1, v221);
      uint64_t v224 = *(void *)(v0 + 728);
      if (v223 == 1)
      {
        outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 728), &demangling cache variable for type metadata for UTType?);
        uint64_t v225 = 0;
        uint64_t v226 = 0;
      }
      else
      {
        uint64_t v225 = UTType.preferredMIMEType.getter();
        uint64_t v226 = v227;
        (*(void (**)(uint64_t, uint64_t))(v222 + 8))(v224, v221);
      }
      *(void *)(v0 + 1488) = v226;
      uint64_t v228 = *(void *)(v0 + 584);
      v229 = (uint64_t *)(v228 + *(int *)(v0 + 308));
      uint64_t v230 = *v229;
      uint64_t v231 = v229[1];
      *(unsigned char *)(v0 + 266) = *(unsigned char *)(v228 + 1);
      swift_retain();
      v232 = (void *)swift_task_alloc();
      *(void *)(v0 + 1496) = v232;
      LOBYTE(v315) = 1;
      void *v232 = v0;
      v232[1] = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
      uint64_t v233 = *(void *)(v0 + 1016);
      uint64_t v198 = *(void *)(v0 + 976);
      uint64_t v200 = *(void *)(v0 + 832);
      uint64_t v234 = *(void *)(v0 + 664);
      uint64_t v235 = *(void *)(v0 + 656);
      uint64_t v203 = *(void *)(v0 + 576);
      uint64_t v204 = *(void *)(v0 + 568);
      *(void *)&v333[16] = *(void *)(v0 + 688);
      uint64_t v334 = v0 + 266;
      *(_OWORD *)v333 = 0u;
      char v332 = 0;
      uint64_t v330 = v235;
      uint64_t v331 = v234;
      v328 = partial apply for closure #1 in GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
      uint64_t v329 = v314;
      long long v327 = 0u;
      uint64_t v325 = v230;
      uint64_t v326 = v231;
      *((void *)&v323 + 1) = v226;
      uint64_t v324 = v233;
      *((void *)&v322 + 1) = v220;
      *(void *)&long long v323 = v225;
      *(void *)&long long v322 = v308;
      char v321 = v303 ^ 1;
      unint64_t v320 = 0x100000000;
      char v319 = 1;
    }
    uint64_t v236 = 0;
    uint64_t v237 = 0;
    uint64_t v238 = 0;
    goto LABEL_91;
  }
  char v184 = Attachment.isScreenshot.getter();
  (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v183, v174);
  if (SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter()) {
    goto LABEL_77;
  }
  if ((v184 & 1) == 0) {
    goto LABEL_77;
  }
  uint64_t v205 = *(void *)(v0 + 552);
  *(void *)(v0 + 1424) = v205;
  if (!v205) {
    goto LABEL_77;
  }
  v311 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1352);
  uint64_t v206 = *(void *)(v0 + 1208);
  uint64_t v207 = *(void *)(v0 + 1000);
  uint64_t v208 = *(void *)(v0 + 800);
  uint64_t v209 = *(void *)(v0 + 696);
  uint64_t v301 = *(void *)(v0 + 600);
  swift_retain();
  static SELFUtils.shared.getter();
  LOBYTE(v315) = 0;
  dispatch thunk of SELFUtils.gatUsecase.setter();
  swift_release();
  outlined init with copy of ModelOrchestrator(v209, v0 + 16);
  v311(v207, 1, 1, v206);
  outlined init with copy of OnScreenContent.UIMetadata?(v301, v208, &demangling cache variable for type metadata for ImageInfo?);
  uint64_t v210 = type metadata accessor for ImageInfo(0);
  v294 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v210 - 8) + 48);
  uint64_t v312 = v205;
  uint64_t v302 = v210;
  if (v294(v208, 1, v210) == 1)
  {
    uint64_t v211 = *(void *)(v0 + 800);
    swift_retain();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v211, &demangling cache variable for type metadata for ImageInfo?);
    uint64_t v277 = 0;
    uint64_t v278 = 0;
    char v276 = 1;
    uint64_t v212 = v296;
  }
  else
  {
    uint64_t v239 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1328);
    uint64_t v240 = *(void *)(v0 + 1312);
    uint64_t v241 = *(void *)(v0 + 1096);
    uint64_t v242 = *(void *)(v0 + 800);
    outlined init with copy of OnScreenContent.UIMetadata?(v242 + *(int *)(v210 + 28), v241, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    swift_retain();
    outlined destroy of DocumentInfo(v242, type metadata accessor for ImageInfo);
    if (v239(v241, 1, v240) == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 1096), &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      uint64_t v277 = 0;
      uint64_t v278 = 0;
      char v276 = 1;
      uint64_t v212 = v296;
    }
    else
    {
      uint64_t v243 = *(void *)(v0 + 1320);
      uint64_t v244 = *(void *)(v0 + 1312);
      uint64_t v245 = *(void *)(v0 + 1096);
      uint64_t v246 = *(void *)(v0 + 1080);
      uint64_t v247 = *(void *)(v0 + 1072);
      uint64_t v248 = *(void *)(v0 + 1064);
      OnScreenContent.UIMetadata.window.getter();
      (*(void (**)(uint64_t, uint64_t))(v243 + 8))(v245, v244);
      OnScreenContent.UIMetadata.Window.boundingBox.getter();
      (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v246, v248);
      outlined init with take of URL?(v0 + 272, v0 + 232, &demangling cache variable for type metadata for CGRect?);
      uint64_t v212 = v296;
      if (*v296)
      {
        uint64_t v277 = 0;
        uint64_t v278 = 0;
        char v276 = 1;
      }
      else
      {
        char v276 = 0;
        uint64_t v277 = *(void *)(v0 + 256);
        uint64_t v278 = *(void *)(v0 + 248);
      }
    }
  }
  char v291 = v212[41];
  uint64_t v249 = *(void *)(v0 + 768);
  uint64_t v250 = *(void *)(v0 + 760);
  uint64_t v251 = *(void *)(v0 + 752);
  uint64_t v252 = *(void *)(v0 + 744);
  uint64_t v253 = *(void *)(v0 + 736);
  IntelligenceFile.attributes.getter();
  uint64_t v286 = IntelligenceFile.Attributes.fileSize.getter();
  char logb = v254;
  uint64_t v255 = *(void (**)(uint64_t, uint64_t))(v251 + 8);
  v255(v249, v252);
  uint64_t v299 = IntelligenceFile.name.getter();
  uint64_t v293 = v256;
  *(void *)(v0 + 1432) = v256;
  IntelligenceFile.attributes.getter();
  IntelligenceFile.Attributes.contentType.getter();
  v255(v250, v252);
  uint64_t v257 = type metadata accessor for UTType();
  uint64_t v258 = *(void *)(v257 - 8);
  int v259 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v258 + 48))(v253, 1, v257);
  uint64_t v260 = *(void *)(v0 + 736);
  if (v259 == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 736), &demangling cache variable for type metadata for UTType?);
    uint64_t v283 = 0;
    uint64_t v261 = 0;
  }
  else
  {
    uint64_t v283 = UTType.preferredMIMEType.getter();
    uint64_t v261 = v262;
    (*(void (**)(uint64_t, uint64_t))(v258 + 8))(v260, v257);
  }
  *(void *)(v0 + 1440) = v261;
  uint64_t v263 = *(void *)(v0 + 792);
  long long v264 = (uint64_t *)(*(void *)(v0 + 584) + *(int *)(v0 + 308));
  uint64_t v279 = v264[1];
  uint64_t v280 = *v264;
  outlined init with copy of OnScreenContent.UIMetadata?(*(void *)(v0 + 600), v263, &demangling cache variable for type metadata for ImageInfo?);
  unsigned int v265 = v294(v263, 1, v302);
  uint64_t v266 = *(void *)(v0 + 792);
  if (v265 == 1)
  {
    swift_retain();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v266, &demangling cache variable for type metadata for ImageInfo?);
    uint64_t v267 = 0;
    uint64_t v268 = 0;
  }
  else
  {
    uint64_t v267 = *(void *)(v266 + 24);
    uint64_t v268 = *(void *)(v266 + 32);
    swift_bridgeObjectRetain();
    swift_retain();
    outlined destroy of DocumentInfo(v266, type metadata accessor for ImageInfo);
  }
  if (logb) {
    uint64_t v269 = 0;
  }
  else {
    uint64_t v269 = COERCE_UNSIGNED_INT((float)v286 * 0.00000095367);
  }
  *(void *)(v0 + 1448) = v268;
  uint64_t v270 = *(void *)(v0 + 616);
  uint64_t v271 = *(void *)(v0 + 608);
  *(unsigned char *)(v0 + 265) = *(unsigned char *)(*(void *)(v0 + 584) + 1);
  uint64_t v272 = (void *)swift_task_alloc();
  *(void *)(v0 + 1456) = v272;
  LOBYTE(v315) = logb & 1;
  *uint64_t v272 = v0;
  v272[1] = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  uint64_t v273 = *(void *)(v0 + 1016);
  uint64_t v198 = *(void *)(v0 + 1000);
  uint64_t v200 = *(void *)(v0 + 848);
  uint64_t v274 = *(void *)(v0 + 664);
  uint64_t v275 = *(void *)(v0 + 656);
  uint64_t v203 = *(void *)(v0 + 576);
  uint64_t v204 = *(void *)(v0 + 568);
  *(void *)&v333[16] = *(void *)(v0 + 688);
  uint64_t v334 = v0 + 265;
  *(void *)v333 = v267;
  *(void *)&v333[8] = v268;
  char v332 = 0;
  uint64_t v330 = v275;
  uint64_t v331 = v274;
  v328 = partial apply for closure #1 in GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  uint64_t v329 = v168;
  *(void *)&long long v327 = v271;
  *((void *)&v327 + 1) = v270;
  uint64_t v326 = v279;
  uint64_t v324 = v273;
  uint64_t v325 = v280;
  *((void *)&v323 + 1) = v261;
  *(void *)&long long v323 = v283;
  *((void *)&v322 + 1) = v293;
  *(void *)&long long v322 = v299;
  char v321 = v291 ^ 1;
  unint64_t v320 = v269 | ((unint64_t)(logb & 1) << 32);
  char v319 = v276;
  uint64_t v236 = v312;
  uint64_t v238 = v277;
  uint64_t v237 = v278;
LABEL_91:
  return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v200, v204, v203, v198, 0, v236, v237, v238);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 1256);
    uint64_t v4 = *(void *)(v2 + 1248);
    id v5 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 1256);
    uint64_t v4 = *(void *)(v2 + 1248);
    id v5 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(float);
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, void, uint64_t, uint64_t);
  void (*v93)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;

  uint64_t v1 = *(void *)(v0 + 648);
  uint64_t v2 = *(void (**)(float))(v0 + 640);
  v2(0.6);
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 1416) = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  static SessionPersistenceUtils.storedValuesForSession(sessionId:)();
  static SessionPersistenceUtils.clearStoredValuesForSession()();
  uint64_t v4 = SessionPersistenceUtils.SessionStoredValues.didSelectAlternateAttachment.getter();
  id v5 = *(void *)(v0 + 376);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v4)
  {
    uint64_t v7 = *(void *)(v0 + 872);
    if (v6)
    {
      uint64_t v8 = v6 - 1;
      uint64_t v9 = type metadata accessor for Attachment();
      uint64_t v10 = *(void *)(v9 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))(v7, v5+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v8, v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    else
    {
      uint64_t v9 = type metadata accessor for Attachment();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
    }
  }
  else
  {
    uint64_t v9 = type metadata accessor for Attachment();
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v0 + 872);
    if (v6)
    {
      (*(void (**)(void, unint64_t, uint64_t))(v11 + 16))(*(void *)(v0 + 872), v5 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v9);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v11 + 56))(*(void *)(v0 + 872), 1, 1, v9);
    }
  }
  os_log_type_t v14 = *(void *)(v0 + 872);
  BOOL v15 = *(void *)(v0 + 864);
  swift_bridgeObjectRelease();
  outlined init with copy of OnScreenContent.UIMetadata?(v14, v15, &demangling cache variable for type metadata for Attachment?);
  type metadata accessor for Attachment();
  uint64_t v16 = *(void *)(v9 - 8);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v9);
  uint64_t v18 = *(void *)(v0 + 864);
  if (v17 == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 864), &demangling cache variable for type metadata for Attachment?);
    SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter();
    uint64_t v19 = 0;
    goto LABEL_15;
  }
  uint64_t v19 = Attachment.isScreenshot.getter();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v9);
  if (SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter() & 1) == 0 && (v19)
  {
    uint64_t v20 = *(void *)(v0 + 552);
    *(void *)(v0 + 1424) = v20;
    if (v20)
    {
      uint64_t v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1352);
      uint64_t v21 = *(void *)(v0 + 1208);
      unint64_t v22 = *(void *)(v0 + 1000);
      long long v23 = *(void *)(v0 + 800);
      uint64_t v24 = *(void *)(v0 + 696);
      uint64_t v89 = *(void *)(v0 + 600);
      swift_retain();
      static SELFUtils.shared.getter();
      dispatch thunk of SELFUtils.gatUsecase.setter();
      swift_release();
      outlined init with copy of ModelOrchestrator(v24, v0 + 16);
      v93(v22, 1, 1, v21);
      outlined init with copy of OnScreenContent.UIMetadata?(v89, v23, &demangling cache variable for type metadata for ImageInfo?);
      long long v25 = type metadata accessor for ImageInfo(0);
      os_log_type_t v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48);
      uint64_t v94 = v20;
      id v90 = v25;
      if (v88(v23, 1, v25) == 1)
      {
        id v26 = *(void *)(v0 + 800);
        swift_retain();
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v26, &demangling cache variable for type metadata for ImageInfo?);
        uint64_t v85 = 0;
        id v86 = 0;
      }
      else
      {
        int v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1328);
        uint64_t v57 = *(void *)(v0 + 1312);
        uint64_t v58 = *(void *)(v0 + 1096);
        uint64_t v59 = *(void *)(v0 + 800);
        outlined init with copy of OnScreenContent.UIMetadata?(v59 + *(int *)(v25 + 28), v58, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        swift_retain();
        outlined destroy of DocumentInfo(v59, type metadata accessor for ImageInfo);
        if (v56(v58, 1, v57) == 1)
        {
          outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 1096), &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        }
        else
        {
          uint64_t v60 = *(void *)(v0 + 1320);
          unint64_t v61 = *(void *)(v0 + 1312);
          Swift::String v62 = *(void *)(v0 + 1096);
          uint64_t v63 = *(void *)(v0 + 1080);
          unint64_t v64 = *(void *)(v0 + 1072);
          uint64_t v65 = *(void *)(v0 + 1064);
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v62, v61);
          OnScreenContent.UIMetadata.Window.boundingBox.getter();
          (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
          outlined init with take of URL?(v0 + 272, v0 + 232, &demangling cache variable for type metadata for CGRect?);
          if ((*(unsigned char *)(v0 + 264) & 1) == 0)
          {
            uint64_t v85 = *(void *)(v0 + 256);
            id v86 = *(void *)(v0 + 248);
            goto LABEL_28;
          }
        }
        uint64_t v85 = 0;
        id v86 = 0;
      }
LABEL_28:
      uint64_t v66 = *(void *)(v0 + 768);
      uint64_t v67 = *(void *)(v0 + 760);
      uint64_t v68 = *(void *)(v0 + 752);
      uint64_t v69 = *(void *)(v0 + 744);
      uint64_t v70 = *(void *)(v0 + 736);
      IntelligenceFile.attributes.getter();
      IntelligenceFile.Attributes.fileSize.getter();
      uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      v71(v66, v69);
      IntelligenceFile.name.getter();
      *(void *)(v0 + 1432) = v72;
      IntelligenceFile.attributes.getter();
      IntelligenceFile.Attributes.contentType.getter();
      v71(v67, v69);
      uint64_t v73 = type metadata accessor for UTType();
      uint64_t v74 = *(void *)(v73 - 8);
      uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v70, 1, v73);
      uint64_t v76 = *(void *)(v0 + 736);
      if (v75 == 1)
      {
        outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 736), &demangling cache variable for type metadata for UTType?);
        uint64_t v77 = 0;
      }
      else
      {
        UTType.preferredMIMEType.getter();
        uint64_t v77 = v78;
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v76, v73);
      }
      *(void *)(v0 + 1440) = v77;
      uint64_t v79 = *(void *)(v0 + 792);
      outlined init with copy of OnScreenContent.UIMetadata?(*(void *)(v0 + 600), v79, &demangling cache variable for type metadata for ImageInfo?);
      uint64_t v80 = v88(v79, 1, v90);
      uint64_t v81 = *(void *)(v0 + 792);
      if (v80 == 1)
      {
        swift_retain();
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v81, &demangling cache variable for type metadata for ImageInfo?);
        uint64_t v82 = 0;
      }
      else
      {
        uint64_t v82 = *(void *)(v81 + 32);
        swift_bridgeObjectRetain();
        swift_retain();
        outlined destroy of DocumentInfo(v81, type metadata accessor for ImageInfo);
      }
      *(void *)(v0 + 1448) = v82;
      *(unsigned char *)(v0 + 265) = *(unsigned char *)(*(void *)(v0 + 584) + 1);
      int v83 = (void *)swift_task_alloc();
      *(void *)(v0 + 1456) = v83;
      *int v83 = v0;
      v83[1] = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
      uint64_t v38 = *(void *)(v0 + 1000);
      uint64_t v39 = *(void *)(v0 + 848);
      uint64_t v40 = *(void *)(v0 + 576);
      unint64_t v41 = *(void *)(v0 + 568);
      uint64_t v42 = v94;
      uint64_t v44 = v85;
      uint64_t v43 = v86;
      goto LABEL_35;
    }
  }
LABEL_15:
  uint64_t v27 = *(void *)(v0 + 784);
  uint64_t v28 = *(void *)(v0 + 600);
  uint64_t v29 = SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter();
  outlined init with copy of OnScreenContent.UIMetadata?(v28, v27, &demangling cache variable for type metadata for ImageInfo?);
  uint64_t v30 = *(void *)(v0 + 784);
  if ((v29 & 1) != 0
    || (outlined init with take of URL?(v30, *(void *)(v0 + 776), &demangling cache variable for type metadata for ImageInfo?), uint64_t v30 = *(void *)(v0 + 776), (v19 & 1) != 0)&& (v31 = type metadata accessor for ImageInfo(0), (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31) == 1))
  {
    uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1352);
    uint64_t v33 = *(void *)(v0 + 1208);
    uint64_t v34 = *(void *)(v0 + 992);
    uint64_t v35 = *(void *)(v0 + 984);
    unint64_t v36 = *(void *)(v0 + 584);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v30, &demangling cache variable for type metadata for ImageInfo?);
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.gatUsecase.setter();
    swift_release();
    v32(v34, 1, 1, v33);
    v32(v35, 1, 1, v33);
    *(unsigned char *)(v0 + 267) = *(unsigned char *)(v36 + 1);
    swift_retain();
    uint64_t v37 = (void *)swift_task_alloc();
    *(void *)(v0 + 1472) = v37;
    *uint64_t v37 = v0;
    v37[1] = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
    uint64_t v38 = *(void *)(v0 + 992);
    uint64_t v39 = *(void *)(v0 + 840);
    uint64_t v40 = *(void *)(v0 + 576);
    unint64_t v41 = *(void *)(v0 + 568);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1264);
    uint64_t v45 = *(void *)(v0 + 1232);
    uint64_t v46 = *(void *)(v0 + 1208);
    uint64_t v47 = *(void *)(v0 + 976);
    uint64_t v91 = *(void *)(v0 + 728);
    uint64_t v92 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1352);
    uint64_t v48 = *(void *)(v0 + 696);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v30, &demangling cache variable for type metadata for ImageInfo?);
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.gatUsecase.setter();
    swift_release();
    outlined init with copy of ModelOrchestrator(v48, v0 + 96);
    v87(v47, v45, v46);
    v92(v47, 0, 1, v46);
    swift_bridgeObjectRetain();
    UTType.init(_:)();
    uint64_t v49 = type metadata accessor for UTType();
    uint64_t v50 = *(void *)(v49 - 8);
    os_log_type_t v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v91, 1, v49);
    int v52 = *(void *)(v0 + 728);
    if (v51 == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v52, &demangling cache variable for type metadata for UTType?);
      uint64_t v53 = 0;
    }
    else
    {
      UTType.preferredMIMEType.getter();
      uint64_t v53 = v54;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v49);
    }
    *(void *)(v0 + 1488) = v53;
    *(unsigned char *)(v0 + 266) = *(unsigned char *)(*(void *)(v0 + 584) + 1);
    swift_retain();
    uint64_t v55 = (void *)swift_task_alloc();
    *(void *)(v0 + 1496) = v55;
    *uint64_t v55 = v0;
    v55[1] = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
    uint64_t v38 = *(void *)(v0 + 976);
    uint64_t v39 = *(void *)(v0 + 832);
    uint64_t v40 = *(void *)(v0 + 576);
    unint64_t v41 = *(void *)(v0 + 568);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
  }
LABEL_35:
  return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v39, v41, v40, v38, 0, v42, v43, v44);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 1256);
    uint64_t v4 = *(void *)(v2 + 1248);
    id v5 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 1256);
    uint64_t v4 = *(void *)(v2 + 1248);
    id v5 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v16 = v0;
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    BOOL v15 = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    *(void *)(v0 + 456) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    *(void *)(v0 + 464) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s Request confirmation", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v4, -1, -1);
    MEMORY[0x25336A180](v3, -1, -1);
  }

  id v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 1400) = v5;
  *id v5 = v0;
  v5[1] = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  uint64_t v6 = *(void *)(v0 + 1232);
  uint64_t v7 = *(void *)(v0 + 1144);
  uint64_t v8 = *(void *)(v0 + 1016);
  uint64_t v9 = *(void *)(v0 + 632);
  uint64_t v10 = *(void *)(v0 + 600);
  uint64_t v11 = *(void *)(v0 + 592);
  uint64_t v12 = *(void *)(v0 + 584);
  uint64_t v13 = *(_OWORD *)(v0 + 568);
  uint64_t v19 = *(void *)(v0 + 624);
  uint64_t v20 = v9;
  uint64_t v18 = v13;
  return GenerateTextFromMediaController.requestDocumentConfirmation(invocationContext:documentInfo:associatedScreenshot:associatedScreenshotFile:availableAttachments:fileType:fileURL:webpageURL:userQuery:requestConfirmationCallback:)(v12, v11, v10, v0 + 552, v0 + 376, v7, v6, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 1256);
    uint64_t v4 = *(void *)(v2 + 1248);
    id v5 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 1256);
    uint64_t v4 = *(void *)(v2 + 1248);
    id v5 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)v1 + 16;
  *(void *)(*(void *)v1 + 1464) = v0;
  swift_task_dealloc();
  uint64_t v4 = v2[125];
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
  outlined destroy of ModelOrchestrator(v3);
  id v5 = v2[157];
  uint64_t v6 = v2[156];
  if (v0) {
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else {
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v7, v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  unsigned __int8 v34;
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37;

  unint64_t v36 = v0;
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 856);
  uint64_t v2 = *(void *)(v0 + 824);
  outlined init with take of SelectedContent(*(void *)(v0 + 848), v1, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  outlined init with copy of ScreenContent(v1, v2, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = *(void *)(v0 + 816);
    uint64_t v31 = *(void *)(v0 + 824);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v35[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315650;
    *(void *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2080;
    outlined init with copy of ScreenContent(v31, v5, (uint64_t (*)(void))type metadata accessor for ModelResponse);
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v0 + 360) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of DocumentInfo(v31, (uint64_t (*)(void))type metadata accessor for ModelResponse);
    _os_log_impl(&dword_24F9A2000, v3, v4, "%s.%s gms response: %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v7, -1, -1);
    MEMORY[0x25336A180](v6, -1, -1);
  }
  else
  {
    outlined destroy of DocumentInfo(*(void *)(v0 + 824), (uint64_t (*)(void))type metadata accessor for ModelResponse);
  }

  uint64_t v21 = *(void *)(v0 + 1360);
  long long v23 = *(void **)(v0 + 1344);
  uint64_t v32 = *(void *)(v0 + 1232);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1288);
  uint64_t v30 = *(void *)(v0 + 1208);
  uint64_t v28 = *(void *)(v0 + 1128);
  uint64_t v29 = *(void *)(v0 + 1144);
  id v26 = *(void *)(v0 + 1016);
  uint64_t v27 = *(void *)(v0 + 1136);
  uint64_t v10 = *(void *)(v0 + 888);
  uint64_t v24 = *(void *)(v0 + 880);
  long long v25 = *(void *)(v0 + 896);
  unint64_t v22 = *(void *)(v0 + 872);
  uint64_t v11 = *(void *)(v0 + 856);
  uint64_t v12 = *(void **)(v0 + 816);
  uint64_t v13 = *(void *)(v0 + 720);
  os_log_type_t v14 = *(void *)(v0 + 712);
  BOOL v15 = *(void *)(v0 + 704);
  uint64_t v16 = *(void *)(v0 + 688);
  uint64_t v17 = *(void *)(v0 + 584);
  uint64_t v20 = *(void *)(v0 + 560);
  (*(void (**)(float))(v0 + 640))(0.85);
  outlined init with copy of ScreenContent(v11, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v34 = *(unsigned char *)(v17 + 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
  GeneratedResponse.init(_:mode:useCaseID:isFirstRequest:)(v12, &v34, v13, *(unsigned char *)(v17 + *(int *)(v21 + 36)), v20);
  swift_release();

  outlined destroy of DocumentInfo(v11, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v22, &demangling cache variable for type metadata for Attachment?);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v25, v24);
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v26, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  v33(v32, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1480) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[124];
    uint64_t v4 = v2[123];
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v3, &demangling cache variable for type metadata for URL?);
    id v5 = v2[157];
    uint64_t v6 = v2[156];
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else
  {
    uint64_t v8 = v2[124];
    uint64_t v9 = v2[123];
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v9, &demangling cache variable for type metadata for URL?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v8, &demangling cache variable for type metadata for URL?);
    id v5 = v2[157];
    uint64_t v6 = v2[156];
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v7, v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  unsigned __int8 v34;
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37;

  unint64_t v36 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 856);
  uint64_t v2 = *(void *)(v0 + 824);
  outlined init with take of SelectedContent(*(void *)(v0 + 840), v1, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  outlined init with copy of ScreenContent(v1, v2, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = *(void *)(v0 + 816);
    uint64_t v31 = *(void *)(v0 + 824);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v35[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315650;
    *(void *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2080;
    outlined init with copy of ScreenContent(v31, v5, (uint64_t (*)(void))type metadata accessor for ModelResponse);
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v0 + 360) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of DocumentInfo(v31, (uint64_t (*)(void))type metadata accessor for ModelResponse);
    _os_log_impl(&dword_24F9A2000, v3, v4, "%s.%s gms response: %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v7, -1, -1);
    MEMORY[0x25336A180](v6, -1, -1);
  }
  else
  {
    outlined destroy of DocumentInfo(*(void *)(v0 + 824), (uint64_t (*)(void))type metadata accessor for ModelResponse);
  }

  uint64_t v21 = *(void *)(v0 + 1360);
  long long v23 = *(void **)(v0 + 1344);
  uint64_t v32 = *(void *)(v0 + 1232);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1288);
  uint64_t v30 = *(void *)(v0 + 1208);
  uint64_t v28 = *(void *)(v0 + 1128);
  uint64_t v29 = *(void *)(v0 + 1144);
  id v26 = *(void *)(v0 + 1016);
  uint64_t v27 = *(void *)(v0 + 1136);
  uint64_t v10 = *(void *)(v0 + 888);
  uint64_t v24 = *(void *)(v0 + 880);
  long long v25 = *(void *)(v0 + 896);
  unint64_t v22 = *(void *)(v0 + 872);
  uint64_t v11 = *(void *)(v0 + 856);
  uint64_t v12 = *(void **)(v0 + 816);
  uint64_t v13 = *(void *)(v0 + 720);
  os_log_type_t v14 = *(void *)(v0 + 712);
  BOOL v15 = *(void *)(v0 + 704);
  uint64_t v16 = *(void *)(v0 + 688);
  uint64_t v17 = *(void *)(v0 + 584);
  uint64_t v20 = *(void *)(v0 + 560);
  (*(void (**)(float))(v0 + 640))(0.85);
  outlined init with copy of ScreenContent(v11, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v34 = *(unsigned char *)(v17 + 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
  GeneratedResponse.init(_:mode:useCaseID:isFirstRequest:)(v12, &v34, v13, *(unsigned char *)(v17 + *(int *)(v21 + 36)), v20);
  swift_release();

  outlined destroy of DocumentInfo(v11, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v22, &demangling cache variable for type metadata for Attachment?);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v25, v24);
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v26, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  v33(v32, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)v1 + 96;
  *(void *)(*(void *)v1 + 1504) = v0;
  swift_task_dealloc();
  uint64_t v4 = v2[122];
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
  outlined destroy of ModelOrchestrator(v3);
  id v5 = v2[157];
  uint64_t v6 = v2[156];
  if (v0) {
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  else {
    uint64_t v7 = GenerateTextFromMediaController.generateTextFromDocument(userQuery:invocationContext:documentInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v7, v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  unsigned __int8 v34;
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37;

  unint64_t v36 = v0;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 856);
  uint64_t v2 = *(void *)(v0 + 824);
  outlined init with take of SelectedContent(*(void *)(v0 + 832), v1, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  outlined init with copy of ScreenContent(v1, v2, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = *(void *)(v0 + 816);
    uint64_t v31 = *(void *)(v0 + 824);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v35[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315650;
    *(void *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2080;
    outlined init with copy of ScreenContent(v31, v5, (uint64_t (*)(void))type metadata accessor for ModelResponse);
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v0 + 360) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of DocumentInfo(v31, (uint64_t (*)(void))type metadata accessor for ModelResponse);
    _os_log_impl(&dword_24F9A2000, v3, v4, "%s.%s gms response: %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v7, -1, -1);
    MEMORY[0x25336A180](v6, -1, -1);
  }
  else
  {
    outlined destroy of DocumentInfo(*(void *)(v0 + 824), (uint64_t (*)(void))type metadata accessor for ModelResponse);
  }

  uint64_t v21 = *(void *)(v0 + 1360);
  long long v23 = *(void **)(v0 + 1344);
  uint64_t v32 = *(void *)(v0 + 1232);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1288);
  uint64_t v30 = *(void *)(v0 + 1208);
  uint64_t v28 = *(void *)(v0 + 1128);
  uint64_t v29 = *(void *)(v0 + 1144);
  id v26 = *(void *)(v0 + 1016);
  uint64_t v27 = *(void *)(v0 + 1136);
  uint64_t v10 = *(void *)(v0 + 888);
  uint64_t v24 = *(void *)(v0 + 880);
  long long v25 = *(void *)(v0 + 896);
  unint64_t v22 = *(void *)(v0 + 872);
  uint64_t v11 = *(void *)(v0 + 856);
  uint64_t v12 = *(void **)(v0 + 816);
  uint64_t v13 = *(void *)(v0 + 720);
  os_log_type_t v14 = *(void *)(v0 + 712);
  BOOL v15 = *(void *)(v0 + 704);
  uint64_t v16 = *(void *)(v0 + 688);
  uint64_t v17 = *(void *)(v0 + 584);
  uint64_t v20 = *(void *)(v0 + 560);
  (*(void (**)(float))(v0 + 640))(0.85);
  outlined init with copy of ScreenContent(v11, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  uint64_t v34 = *(unsigned char *)(v17 + 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
  GeneratedResponse.init(_:mode:useCaseID:isFirstRequest:)(v12, &v34, v13, *(unsigned char *)(v17 + *(int *)(v21 + 36)), v20);
  swift_release();

  outlined destroy of DocumentInfo(v11, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v22, &demangling cache variable for type metadata for Attachment?);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v25, v24);
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v26, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  v33(v32, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  char v17;
  uint64_t v18[2];
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  swift_release();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v18[0] = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    v0[59] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    v0[60] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s User cancelled", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v4, -1, -1);
    MEMORY[0x25336A180](v3, -1, -1);
  }

  id v5 = (void *)v0[172];
  uint64_t v6 = (void *)v0[168];
  BOOL v15 = v0[154];
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[161];
  os_log_type_t v14 = v0[151];
  uint64_t v7 = v0[143];
  uint64_t v8 = v0[142];
  uint64_t v9 = v0[141];
  uint64_t v10 = v0[127];
  uint64_t v11 = v0[70];
  static MetricsUtils.shared.getter();
  static Signpost.userCancelDuringConfirmation.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRequestCanceled()();
  swift_release();
  uint64_t v17 = 7;
  static GeneratedResponse.failureResponse(_:catId:)(&v17, v11);

  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v10, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v16(v15, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  void *v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = (void *)v0[168];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[161];
  uint64_t v3 = v0[154];
  uint64_t v4 = v0[151];
  id v5 = v0[143];
  uint64_t v6 = v0[142];
  uint64_t v7 = v0[141];
  uint64_t v8 = v0[127];
  swift_release();

  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v8, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v2(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  char v17;
  uint64_t v18[2];
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  swift_release();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v18[0] = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    v0[55] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2080;
    v0[56] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000EBLL, 0x800000024FA424C0, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s User cancelled", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v4, -1, -1);
    MEMORY[0x25336A180](v3, -1, -1);
  }

  id v5 = (void *)v0[176];
  uint64_t v6 = (void *)v0[168];
  BOOL v15 = v0[154];
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[161];
  os_log_type_t v14 = v0[151];
  uint64_t v7 = v0[143];
  uint64_t v8 = v0[142];
  uint64_t v9 = v0[141];
  uint64_t v10 = v0[127];
  uint64_t v11 = v0[70];
  static MetricsUtils.shared.getter();
  static Signpost.userCancelDuringConfirmation.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRequestCanceled()();
  swift_release();
  uint64_t v17 = 7;
  static GeneratedResponse.failureResponse(_:catId:)(&v17, v11);

  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v10, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v16(v15, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  uint64_t v1 = (void *)v0[168];
  uint64_t v13 = v0[154];
  os_log_type_t v14 = (void (*)(uint64_t, uint64_t))v0[161];
  uint64_t v12 = v0[151];
  uint64_t v2 = v0[142];
  uint64_t v10 = v0[141];
  uint64_t v11 = v0[143];
  uint64_t v3 = v0[127];
  uint64_t v4 = v0[112];
  id v5 = v0[111];
  uint64_t v6 = v0[110];
  uint64_t v7 = v0[109];
  swift_release();
  swift_release();
  swift_release();

  outlined destroy of Result<URL, SharingMediaAttachmentError>(v7, &demangling cache variable for type metadata for Attachment?);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v3, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v10);
  v14(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  uint64_t v1 = (void *)v0[168];
  uint64_t v13 = v0[154];
  os_log_type_t v14 = (void (*)(uint64_t, uint64_t))v0[161];
  uint64_t v12 = v0[151];
  uint64_t v11 = v0[143];
  uint64_t v2 = v0[142];
  uint64_t v3 = v0[141];
  uint64_t v4 = v0[127];
  id v5 = v0[112];
  uint64_t v6 = v0[111];
  uint64_t v7 = v0[110];
  uint64_t v8 = v0[109];
  swift_release();
  swift_release();

  outlined destroy of Result<URL, SharingMediaAttachmentError>(v8, &demangling cache variable for type metadata for Attachment?);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v3);
  v14(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  uint64_t v1 = (void *)v0[168];
  uint64_t v13 = v0[154];
  os_log_type_t v14 = (void (*)(uint64_t, uint64_t))v0[161];
  uint64_t v12 = v0[151];
  uint64_t v11 = v0[143];
  uint64_t v2 = v0[142];
  uint64_t v3 = v0[141];
  uint64_t v4 = v0[127];
  id v5 = v0[112];
  uint64_t v6 = v0[111];
  uint64_t v7 = v0[110];
  uint64_t v8 = v0[109];
  swift_release();
  swift_release();

  outlined destroy of Result<URL, SharingMediaAttachmentError>(v8, &demangling cache variable for type metadata for Attachment?);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v3);
  v14(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t GenerateTextFromMediaController.isFromWebsite(activityType:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for genFromMediaController != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.genFromMediaController);
  swift_bridgeObjectRetain_n();
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315650;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000024FA42480, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 22) = 2080;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24F9A2000, v5, v6, "%s.%s [NSUserActivity activityType = %s]", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v8, -1, -1);
    MEMORY[0x25336A180](v7, -1, -1);

    if (!a2) {
      return a2 & 1;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!a2) {
      return a2 & 1;
    }
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v11 == a2) {
    LOBYTE(a2) = 1;
  }
  else {
    LOBYTE(a2) = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return a2 & 1;
}

uint64_t GenerateTextFromMediaController.requestDocumentConfirmation(invocationContext:documentInfo:associatedScreenshot:associatedScreenshotFile:availableAttachments:fileType:fileURL:webpageURL:userQuery:requestConfirmationCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 176) = v29;
  *(void *)(v9 + 184) = v8;
  *(void *)(v9 + 168) = v28;
  *(_OWORD *)(v9 + 152) = v27;
  *(void *)(v9 + 136) = a7;
  *(void *)(v9 + 144) = a8;
  *(void *)(v9 + 120) = a5;
  *(void *)(v9 + 128) = a6;
  *(void *)(v9 + 104) = a3;
  *(void *)(v9 + 112) = a4;
  *(void *)(v9 + 88) = a1;
  *(void *)(v9 + 96) = a2;
  uint64_t v10 = type metadata accessor for SessionPersistenceUtils.SessionStoredValues();
  *(void *)(v9 + 192) = v10;
  *(void *)(v9 + 200) = *(void *)(v10 - 8);
  *(void *)(v9 + 208) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  *(void *)(v9 + 216) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  *(void *)(v9 + 224) = v11;
  *(void *)(v9 + 232) = *(void *)(v11 - 8);
  *(void *)(v9 + 240) = swift_task_alloc();
  *(void *)(v9 + 248) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ConfirmationActionName();
  *(void *)(v9 + 256) = v12;
  *(void *)(v9 + 264) = *(void *)(v12 - 8);
  *(void *)(v9 + 272) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SnippetPluginContainer();
  *(void *)(v9 + 280) = v13;
  *(void *)(v9 + 288) = *(void *)(v13 - 8);
  *(void *)(v9 + 296) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v9 + 304) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v9 + 312) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for SupportedDocumentType();
  *(void *)(v9 + 320) = v14;
  *(void *)(v9 + 328) = *(void *)(v14 - 8);
  *(void *)(v9 + 336) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for AttachmentConfirmationPayload();
  *(void *)(v9 + 344) = v15;
  *(void *)(v9 + 352) = *(void *)(v15 - 8);
  *(void *)(v9 + 360) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageInfo?);
  *(void *)(v9 + 368) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for ImageInfo(0);
  *(void *)(v9 + 376) = v16;
  *(void *)(v9 + 384) = *(void *)(v16 - 8);
  *(void *)(v9 + 392) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for Attachment.LocalizedName();
  *(void *)(v9 + 400) = v17;
  *(void *)(v9 + 408) = *(void *)(v17 - 8);
  *(void *)(v9 + 416) = swift_task_alloc();
  *(void *)(v9 + 424) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for Attachment();
  *(void *)(v9 + 432) = v18;
  *(void *)(v9 + 440) = *(void *)(v18 - 8);
  *(void *)(v9 + 448) = swift_task_alloc();
  *(void *)(v9 + 456) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for UTType();
  *(void *)(v9 + 464) = v19;
  *(void *)(v9 + 472) = *(void *)(v19 - 8);
  *(void *)(v9 + 480) = swift_task_alloc();
  *(void *)(v9 + 488) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UTType?, UTType?));
  *(void *)(v9 + 496) = swift_task_alloc();
  uint64_t v20 = type metadata accessor for IntelligenceFile.Attributes();
  *(void *)(v9 + 504) = v20;
  *(void *)(v9 + 512) = *(void *)(v20 - 8);
  *(void *)(v9 + 520) = swift_task_alloc();
  *(void *)(v9 + 528) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  *(void *)(v9 + 536) = swift_task_alloc();
  *(void *)(v9 + 544) = swift_task_alloc();
  *(void *)(v9 + 552) = swift_task_alloc();
  uint64_t v21 = type metadata accessor for IntentDialog();
  *(void *)(v9 + 560) = v21;
  *(void *)(v9 + 568) = *(void *)(v21 - 8);
  *(void *)(v9 + 576) = swift_task_alloc();
  uint64_t v22 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  *(void *)(v9 + 584) = v22;
  *(void *)(v9 + 592) = *(void *)(v22 - 8);
  *(void *)(v9 + 600) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  *(void *)(v9 + 608) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceProcessInfo?);
  *(void *)(v9 + 616) = swift_task_alloc();
  swift_bridgeObjectRelease();
  type metadata accessor for MainActor();
  *(void *)(v9 + 624) = static MainActor.shared.getter();
  uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 632) = v24;
  *(void *)(v9 + 640) = v23;
  return MEMORY[0x270FA2498](GenerateTextFromMediaController.requestDocumentConfirmation(invocationContext:documentInfo:associatedScreenshot:associatedScreenshotFile:availableAttachments:fileType:fileURL:webpageURL:userQuery:requestConfirmationCallback:), v24, v23);
}

uint64_t GenerateTextFromMediaController.requestDocumentConfirmation(invocationContext:documentInfo:associatedScreenshot:associatedScreenshotFile:availableAttachments:fileType:fileURL:webpageURL:userQuery:requestConfirmationCallback:)()
{
  uint64_t v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 96);
  *(void *)(v0 + 648) = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.waitUserConfirmToContinueDuration.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  uint64_t v3 = type metadata accessor for DocumentInfo(0);
  outlined init with copy of OnScreenContent.UIMetadata?(v2 + *(int *)(v3 + 44), v1, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v4 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4);
  uint64_t v7 = *(void *)(v0 + 616);
  uint64_t v8 = *(void *)(v0 + 608);
  if (v6 == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 608), &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v9 = type metadata accessor for IntelligenceProcessInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 600);
    uint64_t v11 = *(void *)(v0 + 592);
    uint64_t v12 = *(void *)(v0 + 584);
    OnScreenContent.UIMetadata.window.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
    OnScreenContent.UIMetadata.Window.appProcess.getter();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  uint64_t v13 = *(void *)(v0 + 616);
  uint64_t v14 = *(unsigned __int8 **)(v0 + 88);
  uint64_t v15 = GenerateTextFromMediaController.appName(from:)(v13);
  uint64_t v17 = v16;
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v13, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
  int v18 = *v14;
  if (v18 == 1
    || (type metadata accessor for GenerativeAssistantSettingsUserDefaults(), (MEMORY[0x253368B80]() & 1) != 0))
  {
    specialized static ConfirmationText.explicitDocumentConfirmation(appName:)(v15, v17);
  }
  else
  {
    specialized static ConfirmationText.implicitDocumentConfirmation(appName:)(v15, v17);
  }
  uint64_t v19 = *(void *)(v0 + 96);
  GenerateTextFromMediaController.getDocumentConfirmationSpokenDialog(isExplicit:appName:)(v18, v15, (uint64_t)v17, *(void *)(v0 + 576));
  swift_bridgeObjectRelease();
  if (*(void *)(v19 + *(int *)(v3 + 24)))
  {
    uint64_t v20 = IntelligenceFile.snippetPreviewFile()();
    uint64_t v21 = *(void *)(v0 + 528);
    uint64_t v22 = *(void *)(v0 + 504);
    uint64_t v23 = *(void *)(v0 + 512);
    IntelligenceFile.attributes.getter();
    IntelligenceFile.Attributes.contentType.getter();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 472) + 56))(*(void *)(v0 + 552), 1, 1, *(void *)(v0 + 464));
    uint64_t v20 = 0;
  }
  *(void *)(v0 + 656) = v20;
  uint64_t v24 = *(void *)(v0 + 552);
  uint64_t v25 = *(void *)(v0 + 544);
  uint64_t v26 = *(void *)(v0 + 488);
  uint64_t v27 = *(void *)(v0 + 496);
  uint64_t v28 = *(void *)(v0 + 464);
  uint64_t v29 = *(void *)(v0 + 472);
  static UTType.pdf.getter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v28);
  uint64_t v30 = v27 + *(int *)(v26 + 48);
  outlined init with copy of OnScreenContent.UIMetadata?(v24, v27, &demangling cache variable for type metadata for UTType?);
  outlined init with copy of OnScreenContent.UIMetadata?(v25, v30, &demangling cache variable for type metadata for UTType?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  if (v31(v27, 1, v28) == 1)
  {
    uint64_t v32 = *(void *)(v0 + 552);
    uint64_t v33 = *(void *)(v0 + 464);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 544), &demangling cache variable for type metadata for UTType?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v32, &demangling cache variable for type metadata for UTType?);
    if (v31(v30, 1, v33) == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 496), &demangling cache variable for type metadata for UTType?);
LABEL_18:
      id v47 = GenerateTextFromMediaController.generatePDFThumbnail(for:)(*(void *)(v0 + 136));
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  uint64_t v34 = *(void *)(v0 + 464);
  outlined init with copy of OnScreenContent.UIMetadata?(*(void *)(v0 + 496), *(void *)(v0 + 536), &demangling cache variable for type metadata for UTType?);
  unsigned int v35 = v31(v30, 1, v34);
  uint64_t v36 = *(void *)(v0 + 552);
  uint64_t v37 = *(void *)(v0 + 544);
  uint64_t v38 = *(void *)(v0 + 536);
  if (v35 == 1)
  {
    uint64_t v39 = *(void *)(v0 + 464);
    uint64_t v40 = *(void *)(v0 + 472);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 544), &demangling cache variable for type metadata for UTType?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v36, &demangling cache variable for type metadata for UTType?);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
LABEL_16:
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 496), &demangling cache variable for type metadata for (UTType?, UTType?));
    goto LABEL_19;
  }
  uint64_t v110 = *(void *)(v0 + 496);
  uint64_t v41 = v3;
  uint64_t v43 = *(void *)(v0 + 472);
  uint64_t v42 = *(void *)(v0 + 480);
  uint64_t v44 = *(void *)(v0 + 464);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v42, v30, v44);
  lazy protocol witness table accessor for type GATError and conformance GATError(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x263F8F3A0]);
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  v46(v42, v44);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v37, &demangling cache variable for type metadata for UTType?);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v36, &demangling cache variable for type metadata for UTType?);
  v46(v38, v44);
  uint64_t v3 = v41;
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v110, &demangling cache variable for type metadata for UTType?);
  if (v45) {
    goto LABEL_18;
  }
LABEL_19:
  id v47 = 0;
LABEL_20:
  *(void *)(v0 + 664) = v47;
  uint64_t v103 = *(void (**)(void, void, void))(*(void *)(v0 + 408) + 104);
  v103(*(void *)(v0 + 424), *MEMORY[0x263F408A0], *(void *)(v0 + 400));
  if (v47)
  {
    id v48 = v47;
    UIImage.getPlatformData()();
  }
  uint64_t v49 = *(void *)(v0 + 376);
  uint64_t v50 = *(void *)(v0 + 384);
  uint64_t v51 = *(void *)(v0 + 368);
  uint64_t v52 = *(void *)(v0 + 104);
  uint64_t v111 = v3;
  swift_retain();
  Attachment.init(localizedName:thumbnailImage:file:fileSizeInMB:isScreenshot:)();
  outlined init with copy of OnScreenContent.UIMetadata?(v52, v51, &demangling cache variable for type metadata for ImageInfo?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v51, 1, v49) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 368), &demangling cache variable for type metadata for ImageInfo?);
LABEL_26:
    uint64_t v55 = *(void *)(v0 + 456);
    uint64_t v57 = *(void *)(v0 + 432);
    uint64_t v56 = *(void *)(v0 + 440);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Attachment>);
    unint64_t v58 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_24FA3E1D0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v56 + 16))(v59 + v58, v55, v57);
    uint64_t v60 = 0;
    id v61 = 0;
    goto LABEL_28;
  }
  uint64_t v53 = *(void *)(v0 + 392);
  outlined init with take of SelectedContent(*(void *)(v0 + 368), v53, type metadata accessor for ImageInfo);
  uint64_t v54 = *(void *)(v0 + 392);
  if (*(unsigned char *)(v53 + 16))
  {
    outlined destroy of DocumentInfo(v54, type metadata accessor for ImageInfo);
    goto LABEL_26;
  }
  Swift::String v62 = *(void **)(v0 + 112);
  uint64_t v63 = *(void **)v54;
  unint64_t v64 = *(void **)(v54 + 8);
  outlined copy of ImageSource(*(void **)v54, v64, 0);
  swift_retain();
  swift_release();
  *Swift::String v62 = v63;
  uint64_t v60 = IntelligenceFile.snippetPreviewFile()();
  uint64_t v65 = v103;
  uint64_t v66 = *(void *)(v0 + 520);
  uint64_t v67 = *(void *)(v0 + 512);
  uint64_t v101 = *(void *)(v0 + 504);
  uint64_t v68 = *(void *)(v0 + 440);
  uint64_t v108 = *(void *)(v0 + 448);
  uint64_t v104 = *(void *)(v0 + 432);
  uint64_t v106 = *(void *)(v0 + 456);
  uint64_t v107 = *(void *)(v0 + 392);
  v65(*(void *)(v0 + 416), *MEMORY[0x263F40898], *(void *)(v0 + 400));
  swift_retain();
  id v61 = v64;
  UIImage.getPlatformData()();
  IntelligenceFile.attributes.getter();
  IntelligenceFile.Attributes.fileSize.getter();
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v101);
  Attachment.init(localizedName:thumbnailImage:file:fileSizeInMB:isScreenshot:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Attachment>);
  uint64_t v69 = *(void *)(v68 + 72);
  unint64_t v70 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_24FA3E410;
  unint64_t v71 = v59 + v70;
  uint64_t v72 = *(void (**)(unint64_t, uint64_t, uint64_t))(v68 + 16);
  v72(v71, v108, v104);
  v72(v71 + v69, v106, v104);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v108, v104);
  outlined destroy of DocumentInfo(v107, type metadata accessor for ImageInfo);
LABEL_28:
  char v109 = (uint64_t *)(v0 + 16);
  *(void *)(v0 + 680) = v61;
  *(void *)(v0 + 672) = v60;
  **(void **)(v0 + 120) = v59;
  if (one-time initialization token for condensedConfirmation != -1) {
    swift_once();
  }
  uint64_t v73 = one-time initialization token for knowledgeFallbackConfirmation;
  swift_bridgeObjectRetain();
  if (v73 != -1) {
    swift_once();
  }
  uint64_t v74 = *(void *)(v0 + 328);
  uint64_t v75 = *(void *)(v0 + 336);
  uint64_t v76 = *(void *)(v0 + 320);
  uint64_t v97 = *(void *)(v0 + 312);
  uint64_t v98 = *(void *)(v0 + 304);
  uint64_t v99 = *(void *)(v0 + 360);
  uint64_t v100 = *(void *)(v0 + 296);
  uint64_t v102 = *(void *)(v0 + 288);
  uint64_t v105 = *(void *)(v0 + 280);
  uint64_t v96 = *(void *)(v0 + 144);
  uint64_t v77 = *(void *)(v0 + 128);
  uint64_t v78 = *(void *)(v0 + 96);
  *(_DWORD *)(v0 + 704) = *(_DWORD *)(type metadata accessor for InvocationContext() + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v75, v77, v76);
  outlined init with copy of OnScreenContent.UIMetadata?(v78 + *(int *)(v111 + 36), v97, &demangling cache variable for type metadata for Date?);
  outlined init with copy of OnScreenContent.UIMetadata?(v96, v98, &demangling cache variable for type metadata for URL?);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttachmentConfirmationPayload.init(message:condensedMessage:attachmentRemovedMessage:sessionId:contentName:sourceContentType:sourceContentCreationDate:webpageURL:availableAttachments:userQuery:)();
  type metadata accessor for SnippetPluginUtils();
  static SnippetPluginUtils.createConfirmationContainer(payload:)(v99);
  *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog>);
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog> and conformance IntentResultContainer<A, B, C, D>(&lazy protocol witness table cache variable for type IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog> and conformance IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog>);
  __swift_allocate_boxed_opaque_existential_1(v109);
  static IntentResult.result<>(pluginContainer:dialog:)();
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v100, v105);
  if (one-time initialization token for mediaConfirmationButtonText != -1) {
    swift_once();
  }
  uint64_t v79 = *(void *)(v0 + 248);
  uint64_t v80 = *(void *)(v0 + 224);
  uint64_t v81 = *(void *)(v0 + 232);
  uint64_t v82 = __swift_project_value_buffer(v80, (uint64_t)static ConfirmationText.mediaConfirmationButtonText);
  int v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16);
  v83(v79, v82, v80);
  if (one-time initialization token for userResponseAcceptValues != -1) {
    swift_once();
  }
  if (one-time initialization token for declineButtonText != -1) {
    swift_once();
  }
  uint64_t v84 = *(void *)(v0 + 240);
  uint64_t v85 = *(void *)(v0 + 224);
  uint64_t v86 = __swift_project_value_buffer(v85, (uint64_t)static ConfirmationText.declineButtonText);
  v83(v84, v86, v85);
  if (one-time initialization token for userResponseDeclineValues != -1) {
    swift_once();
  }
  uint64_t v88 = *(void *)(v0 + 240);
  uint64_t v87 = *(void *)(v0 + 248);
  uint64_t v89 = *(void *)(v0 + 224);
  uint64_t v90 = *(void *)(v0 + 232);
  uint64_t v91 = *(int **)(v0 + 168);
  static ConfirmationActionName.custom(acceptLabel:acceptAlternatives:denyLabel:denyAlternatives:destructive:)();
  uint64_t v92 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
  v92(v88, v89);
  v92(v87, v89);
  uint64_t v112 = (int *)((char *)v91 + *v91);
  uint64_t v93 = (void *)swift_task_alloc();
  *(void *)(v0 + 688) = v93;
  *uint64_t v93 = v0;
  v93[1] = GenerateTextFromMediaController.requestDocumentConfirmation(invocationContext:documentInfo:associatedScreenshot:associatedScreenshotFile:availableAttachments:fileType:fileURL:webpageURL:userQuery:requestConfirmationCallback:);
  uint64_t v94 = *(void *)(v0 + 272);
  return ((uint64_t (*)(uint64_t *, uint64_t, void))v112)(v109, v94, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 696) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[33] + 8))(v2[34], v2[32]);
  if (v0)
  {
    uint64_t v3 = v2[80];
    uint64_t v4 = v2[79];
    uint64_t v5 = GenerateTextFromMediaController.requestDocumentConfirmation(invocationContext:documentInfo:associatedScreenshot:associatedScreenshotFile:availableAttachments:fileType:fileURL:webpageURL:userQuery:requestConfirmationCallback:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v2 + 2));
    uint64_t v3 = v2[80];
    uint64_t v4 = v2[79];
    uint64_t v5 = GenerateTextFromMediaController.requestDocumentConfirmation(invocationContext:documentInfo:associatedScreenshot:associatedScreenshotFile:availableAttachments:fileType:fileURL:webpageURL:userQuery:requestConfirmationCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  uint64_t v44 = v0;
  swift_release();
  if (one-time initialization token for genFromMediaController != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.genFromMediaController);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v43 = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C1, 0x800000024FA425B0, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v2, v3, "%s.%s User confirmed", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v5, -1, -1);
    MEMORY[0x25336A180](v4, -1, -1);
  }

  int v6 = *(void *)(v0 + 216);
  static MetricsUtils.shared.getter();
  static Signpost.waitUserConfirmToContinueDuration.getter();
  uint64_t v7 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v6, &demangling cache variable for type metadata for OSSignpostID?);
  type metadata accessor for GenerativeAssistantSettingsUserDefaults();
  if ((MEMORY[0x253368B80]() & 1) == 0) {
    static GenerativeAssistantSettingsUserDefaults.logConfirmationCount()();
  }
  if (*(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 704) + 8))
  {
    uint64_t v8 = *(void **)(v0 + 664);
    static SessionPersistenceUtils.storedValuesForSession(sessionId:)();
    uint64_t v38 = v8;
    if (SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter()) {
      static SessionPersistenceUtils.setConfirmation(forTextSession:)();
    }
    else {
      static SessionPersistenceUtils.setConfirmation(forMediaSession:)();
    }
    uint64_t v40 = *(void *)(v0 + 576);
    uint64_t v42 = *(void **)(v0 + 680);
    uint64_t v20 = *(void *)(v0 + 568);
    unsigned int v35 = *(void *)(v0 + 456);
    uint64_t v37 = *(void *)(v0 + 560);
    uint64_t v21 = *(void *)(v0 + 440);
    uint64_t v22 = *(void *)(v0 + 352);
    uint64_t v31 = *(void *)(v0 + 360);
    uint64_t v33 = *(void *)(v0 + 432);
    uint64_t v23 = *(void *)(v0 + 344);
    uint64_t v24 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 208);
    uint64_t v26 = *(void *)(v0 + 192);

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v31, v23);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v35, v33);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v40, v37);
  }
  else
  {
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    uint64_t v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void **)(v0 + 680);
    uint64_t v34 = *(void **)(v0 + 664);
    uint64_t v13 = *(void *)(v0 + 576);
    uint64_t v14 = *(void *)(v0 + 568);
    uint64_t v15 = *(void *)(v0 + 560);
    uint64_t v16 = *(void *)(v0 + 440);
    uint64_t v39 = *(void *)(v0 + 432);
    uint64_t v41 = *(void *)(v0 + 456);
    uint64_t v17 = *(void *)(v0 + 352);
    uint64_t v36 = *(void *)(v0 + 360);
    uint64_t v32 = *(void *)(v0 + 344);
    if (v11)
    {
      uint64_t v30 = *(void **)(v0 + 680);
      int v18 = swift_slowAlloc();
      uint64_t v29 = v14;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v43 = v19;
      *(_DWORD *)int v18 = 136315394;
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C1, 0x800000024FA425B0, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v9, v10, "%s.%s Attempting to save the current sessionID but found nil", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v19, -1, -1);
      MEMORY[0x25336A180](v18, -1, -1);

      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v36, v32);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v41, v39);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v13, v15);
    }
    else
    {

      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v36, v32);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v41, v39);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v1 = (void *)v0[83];
  uint64_t v13 = (void *)v0[85];
  uint64_t v12 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v11 = v0[70];
  uint64_t v3 = v0[57];
  uint64_t v4 = v0[54];
  uint64_t v5 = v0[55];
  int v6 = v0[45];
  uint64_t v7 = v0[43];
  uint64_t v8 = v0[44];
  swift_release();
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v11);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 112) = a4;
  *(void *)(v6 + 120) = a6;
  *(unsigned char *)(v6 + 328) = a5;
  *(void *)(v6 + 96) = a2;
  *(void *)(v6 + 104) = a3;
  *(void *)(v6 + 88) = a1;
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  *(void *)(v6 + 128) = v7;
  *(void *)(v6 + 136) = *(void *)(v7 - 8);
  *(void *)(v6 + 144) = swift_task_alloc();
  *(void *)(v6 + 152) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ConfirmationActionName();
  *(void *)(v6 + 160) = v8;
  *(void *)(v6 + 168) = *(void *)(v8 - 8);
  *(void *)(v6 + 176) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for IntentDialog();
  *(void *)(v6 + 184) = v9;
  *(void *)(v6 + 192) = *(void *)(v9 - 8);
  *(void *)(v6 + 200) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for RequestType();
  *(void *)(v6 + 208) = v10;
  *(void *)(v6 + 216) = *(void *)(v10 - 8);
  *(void *)(v6 + 224) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  *(void *)(v6 + 232) = v11;
  *(void *)(v6 + 240) = *(void *)(v11 - 8);
  *(void *)(v6 + 248) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v6 + 256) = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v6 + 264) = v13;
  *(void *)(v6 + 272) = v12;
  return MEMORY[0x270FA2498](GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:), v13, v12);
}

uint64_t GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:)()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(unsigned char **)(v0 + 120);
  *(void *)(v0 + 280) = type metadata accessor for GenerativeAssistantSettingsUserDefaults();
  static GenerativeAssistantSettingsUserDefaults.declineMediaQAExpiration()();
  if ((*v1 & 1) == 0)
  {
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, *MEMORY[0x263F40850], v4);
    MEMORY[0x253368B50](v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  }
  if (one-time initialization token for genFromTextController != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 288) = __swift_project_value_buffer(v5, (uint64_t)static Logger.genFromTextController);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v33 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000069, 0x800000024FA42410, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v6, v7, "%s.%s Confirming JIT enablement", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v9, -1, -1);
    MEMORY[0x25336A180](v8, -1, -1);
  }

  uint64_t v11 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 184);
  if (*(unsigned char *)(v0 + 328)) {
    char v13 = 17;
  }
  else {
    char v13 = 18;
  }
  type metadata accessor for IntentDialogUtils();
  char v32 = v13;
  static IntentDialogUtils.getDialog(catID:response:includeContentProviderName:appName:)(&v32, 0, 0xE000000000000000, 1, 0, 0, v10);
  *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResultContainer<Never, Never, Never, IntentDialog>);
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog> and conformance IntentResultContainer<A, B, C, D>((unint64_t *)&lazy protocol witness table cache variable for type IntentResultContainer<Never, Never, Never, IntentDialog> and conformance IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<Never, Never, Never, IntentDialog>);
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  static IntentResult.result<>(dialog:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  if (one-time initialization token for enablementConfirmationButtonText != -1) {
    swift_once();
  }
  uint64_t v14 = *(void *)(v0 + 152);
  uint64_t v15 = *(void *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 136);
  uint64_t v17 = __swift_project_value_buffer(v15, (uint64_t)static ConfirmationText.enablementConfirmationButtonText);
  int v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v18(v14, v17, v15);
  if (one-time initialization token for userResponseAcceptValues != -1) {
    swift_once();
  }
  if (one-time initialization token for enablementDeclineButtonText != -1) {
    swift_once();
  }
  uint64_t v19 = *(void *)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 128);
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static ConfirmationText.enablementDeclineButtonText);
  v18(v19, v21, v20);
  if (one-time initialization token for userResponseDeclineValues != -1) {
    swift_once();
  }
  uint64_t v23 = *(void *)(v0 + 144);
  uint64_t v22 = *(void *)(v0 + 152);
  uint64_t v24 = *(void *)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 136);
  uint64_t v26 = *(int **)(v0 + 88);
  static ConfirmationActionName.custom(acceptLabel:acceptAlternatives:denyLabel:denyAlternatives:destructive:)();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v27(v23, v24);
  v27(v22, v24);
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v26 + *v26);
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v28;
  *uint64_t v28 = v0;
  v28[1] = GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:);
  uint64_t v29 = *(void *)(v0 + 176);
  return v31(v0 + 16, v29, 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 176);
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v5 = *(void *)(*v1 + 160);
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = *(void *)(v2 + 264);
    os_log_type_t v7 = *(void *)(v2 + 272);
    uint64_t v8 = GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0(v2 + 16);
    uint64_t v6 = *(void *)(v2 + 264);
    os_log_type_t v7 = *(void *)(v2 + 272);
    uint64_t v8 = GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:);
  }
  return MEMORY[0x270FA2498](v8, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0;
  if ((**(unsigned char **)(v0 + 120) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 216);
    uint64_t v1 = *(void *)(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F40850], v3);
    static GenerativeAssistantSettingsUserDefaults.decrementDecline(for:expirationDate:)();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  }
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    os_log_type_t v7 = swift_slowAlloc();
    uint64_t v11 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000069, 0x800000024FA42410, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v4, v5, "%s.%s User Confirmed Showing JIT Enablement.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v7, -1, -1);
    MEMORY[0x25336A180](v6, -1, -1);
  }

  uint64_t v10 = (uint64_t (*)(void))(*(void *)(v0 + 104) + **(int **)(v0 + 104));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v8;
  void *v8 = v0;
  v8[1] = GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:);
  return v10();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  uint64_t v4 = *(void *)(v2 + 264);
  if (v0) {
    uint64_t v5 = GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:);
  }
  else {
    uint64_t v5 = GenerateTextFromMediaController.surfaceEnablementSheet(requestConfirmationCallback:showJITEnablementCallback:category:invocationContext:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[31];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[31];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[31];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t GenerateTextFromMediaController.requestImageConfirmation(invocationContext:imageInfo:contextRetrievalFile:previewImage:fileSizeInMB:webpageURL:userQuery:requestConfirmationCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  *(void *)(v10 + 152) = v23;
  *(void *)(v10 + 160) = v9;
  *(void *)(v10 + 136) = a7;
  *(void *)(v10 + 144) = a8;
  *(void *)(v10 + 120) = a5;
  *(void *)(v10 + 128) = a6;
  *(float *)(v10 + 448) = a9;
  *(void *)(v10 + 104) = a3;
  *(void *)(v10 + 112) = a4;
  *(void *)(v10 + 88) = a1;
  *(void *)(v10 + 96) = a2;
  uint64_t v11 = type metadata accessor for SessionPersistenceUtils.SessionStoredValues();
  *(void *)(v10 + 168) = v11;
  *(void *)(v10 + 176) = *(void *)(v11 - 8);
  *(void *)(v10 + 184) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  *(void *)(v10 + 192) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  *(void *)(v10 + 200) = v12;
  *(void *)(v10 + 208) = *(void *)(v12 - 8);
  *(void *)(v10 + 216) = swift_task_alloc();
  *(void *)(v10 + 224) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for ConfirmationActionName();
  *(void *)(v10 + 232) = v13;
  *(void *)(v10 + 240) = *(void *)(v13 - 8);
  *(void *)(v10 + 248) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for SnippetPluginContainer();
  *(void *)(v10 + 256) = v14;
  *(void *)(v10 + 264) = *(void *)(v14 - 8);
  *(void *)(v10 + 272) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v10 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v10 + 288) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SupportedDocumentType();
  *(void *)(v10 + 296) = v15;
  *(void *)(v10 + 304) = *(void *)(v15 - 8);
  *(void *)(v10 + 312) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for AttachmentConfirmationPayload();
  *(void *)(v10 + 320) = v16;
  *(void *)(v10 + 328) = *(void *)(v16 - 8);
  *(void *)(v10 + 336) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for Attachment.LocalizedName();
  *(void *)(v10 + 344) = v17;
  *(void *)(v10 + 352) = *(void *)(v17 - 8);
  *(void *)(v10 + 360) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for IntentDialog();
  *(void *)(v10 + 368) = v18;
  *(void *)(v10 + 376) = *(void *)(v18 - 8);
  *(void *)(v10 + 384) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v10 + 392) = static MainActor.shared.getter();
  uint64_t v20 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v10 + 400) = v20;
  *(void *)(v10 + 408) = v19;
  return MEMORY[0x270FA2498](GenerateTextFromMediaController.requestImageConfirmation(invocationContext:imageInfo:contextRetrievalFile:previewImage:fileSizeInMB:webpageURL:userQuery:requestConfirmationCallback:), v20, v19);
}

uint64_t GenerateTextFromMediaController.requestImageConfirmation(invocationContext:imageInfo:contextRetrievalFile:previewImage:fileSizeInMB:webpageURL:userQuery:requestConfirmationCallback:)()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  char v4 = **(unsigned char **)(v0 + 88);
  int v5 = *(unsigned __int8 *)(v2 + 17);
  specialized GenerateTextFromMediaController.getImageConfirmationText(isExplicit:isScreenshot:)(v4, *(unsigned char *)(v2 + 17));
  swift_bridgeObjectRetain();
  GenerateTextFromMediaController.getImageConfirmationSpokenDialog(isExplicit:isScreenshot:)(v4, v5, v1);
  if (v3) {
    uint64_t v6 = IntelligenceFile.snippetPreviewFile()();
  }
  else {
    uint64_t v6 = 0;
  }
  *(void *)(v0 + 416) = v6;
  uint64_t v8 = *(void *)(v0 + 352);
  uint64_t v7 = *(void *)(v0 + 360);
  uint64_t v9 = *(void *)(v0 + 344);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Attachment>);
  type metadata accessor for Attachment();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_24FA3E1D0;
  uint64_t v10 = (unsigned int *)MEMORY[0x263F40898];
  if (!v5) {
    uint64_t v10 = (unsigned int *)MEMORY[0x263F408A0];
  }
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, *v10, v9);
  UIImage.getPlatformData()();
  swift_retain();
  Attachment.init(localizedName:thumbnailImage:file:fileSizeInMB:isScreenshot:)();
  *(void *)(v0 + 424) = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.waitUserConfirmToContinueDuration.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  if (one-time initialization token for condensedConfirmation != -1) {
    swift_once();
  }
  uint64_t v11 = one-time initialization token for knowledgeFallbackConfirmation;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  *(_DWORD *)(v0 + 452) = *(_DWORD *)(type metadata accessor for InvocationContext() + 32);
  uint64_t v38 = (uint64_t *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3) {
    IntelligenceFile.name.getter();
  }
  else {
    static IntelligenceLocalizedStrings.image.getter();
  }
  uint64_t v12 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 288);
  uint64_t v14 = *(void *)(v0 + 272);
  uint64_t v15 = *(void *)(v0 + 280);
  uint64_t v16 = *(void *)(v0 + 264);
  uint64_t v36 = *(void *)(v0 + 256);
  uint64_t v17 = *(void *)(v0 + 120);
  (*(void (**)(void, void, void))(*(void *)(v0 + 304) + 104))(*(void *)(v0 + 312), *MEMORY[0x263F40748], *(void *)(v0 + 296));
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 1, 1, v18);
  outlined init with copy of OnScreenContent.UIMetadata?(v17, v15, &demangling cache variable for type metadata for URL?);
  swift_bridgeObjectRetain();
  AttachmentConfirmationPayload.init(message:condensedMessage:attachmentRemovedMessage:sessionId:contentName:sourceContentType:sourceContentCreationDate:webpageURL:availableAttachments:userQuery:)();
  type metadata accessor for SnippetPluginUtils();
  static SnippetPluginUtils.createConfirmationContainer(payload:)(v12);
  *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog>);
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog> and conformance IntentResultContainer<A, B, C, D>(&lazy protocol witness table cache variable for type IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog> and conformance IntentResultContainer<A, B, C, D>, &demangling cache variable for type metadata for IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog>);
  __swift_allocate_boxed_opaque_existential_1(v38);
  static IntentResult.result<>(pluginContainer:dialog:)();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v36);
  if (one-time initialization token for mediaConfirmationButtonText != -1) {
    swift_once();
  }
  uint64_t v19 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v21 = *(void *)(v0 + 208);
  uint64_t v22 = __swift_project_value_buffer(v20, (uint64_t)static ConfirmationText.mediaConfirmationButtonText);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  v23(v19, v22, v20);
  if (one-time initialization token for userResponseAcceptValues != -1) {
    swift_once();
  }
  if (one-time initialization token for declineButtonText != -1) {
    swift_once();
  }
  uint64_t v24 = *(void *)(v0 + 216);
  uint64_t v25 = *(void *)(v0 + 200);
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static ConfirmationText.declineButtonText);
  v23(v24, v26, v25);
  if (one-time initialization token for userResponseDeclineValues != -1) {
    swift_once();
  }
  uint64_t v28 = *(void *)(v0 + 216);
  uint64_t v27 = *(void *)(v0 + 224);
  uint64_t v29 = *(void *)(v0 + 200);
  uint64_t v30 = *(void *)(v0 + 208);
  uint64_t v31 = *(int **)(v0 + 144);
  static ConfirmationActionName.custom(acceptLabel:acceptAlternatives:denyLabel:denyAlternatives:destructive:)();
  char v32 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v32(v28, v29);
  v32(v27, v29);
  uint64_t v37 = (int *)((char *)v31 + *v31);
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v33;
  *uint64_t v33 = v0;
  v33[1] = GenerateTextFromMediaController.requestImageConfirmation(invocationContext:imageInfo:contextRetrievalFile:previewImage:fileSizeInMB:webpageURL:userQuery:requestConfirmationCallback:);
  uint64_t v34 = *(void *)(v0 + 248);
  return ((uint64_t (*)(uint64_t *, uint64_t, void))v37)(v38, v34, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[30] + 8))(v2[31], v2[29]);
  if (v0)
  {
    uint64_t v3 = v2[50];
    char v4 = v2[51];
    int v5 = GenerateTextFromMediaController.requestImageConfirmation(invocationContext:imageInfo:contextRetrievalFile:previewImage:fileSizeInMB:webpageURL:userQuery:requestConfirmationCallback:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v2 + 2));
    uint64_t v3 = v2[50];
    char v4 = v2[51];
    int v5 = GenerateTextFromMediaController.requestImageConfirmation(invocationContext:imageInfo:contextRetrievalFile:previewImage:fileSizeInMB:webpageURL:userQuery:requestConfirmationCallback:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v33 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  swift_release();
  static MetricsUtils.shared.getter();
  static Signpost.waitUserConfirmToContinueDuration.getter();
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v1, &demangling cache variable for type metadata for OSSignpostID?);
  if (one-time initialization token for genFromMediaController != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.genFromMediaController);
  char v4 = Logger.logObject.getter();
  int v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    char v32 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000096, 0x800000024FA42370, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v4, v5, "%s.%s User confirmed", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v7, -1, -1);
    MEMORY[0x25336A180](v6, -1, -1);
  }

  type metadata accessor for GenerativeAssistantSettingsUserDefaults();
  if ((MEMORY[0x253368B80]() & 1) == 0) {
    static GenerativeAssistantSettingsUserDefaults.logConfirmationCount()();
  }
  if (*(void *)(*(void *)(v0 + 88) + *(int *)(v0 + 452) + 8))
  {
    static SessionPersistenceUtils.storedValuesForSession(sessionId:)();
    if (SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter())
    {
      static SessionPersistenceUtils.setConfirmation(forTextSession:)();
    }
    else if ((*(unsigned char *)(*(void *)(v0 + 96) + 17) & 1) == 0)
    {
      static SessionPersistenceUtils.setConfirmation(forMediaSession:)();
    }
    uint64_t v20 = *(void *)(v0 + 376);
    uint64_t v19 = *(void *)(v0 + 384);
    uint64_t v21 = *(void *)(v0 + 368);
    uint64_t v23 = *(void *)(v0 + 328);
    uint64_t v22 = *(void *)(v0 + 336);
    uint64_t v24 = *(void *)(v0 + 320);
    uint64_t v26 = *(void *)(v0 + 176);
    uint64_t v25 = *(void *)(v0 + 184);
    uint64_t v27 = *(void *)(v0 + 168);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  else
  {
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = *(void *)(v0 + 376);
    uint64_t v11 = *(void *)(v0 + 384);
    uint64_t v13 = *(void *)(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 328);
    uint64_t v14 = *(void *)(v0 + 336);
    uint64_t v16 = *(void *)(v0 + 320);
    if (v10)
    {
      uint64_t v31 = *(void *)(v0 + 336);
      uint64_t v17 = swift_slowAlloc();
      uint64_t v30 = v11;
      uint64_t v18 = swift_slowAlloc();
      char v32 = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2080;
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000096, 0x800000024FA42370, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v8, v9, "%s.%s Attempting to save the current sessionID but found nil", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v18, -1, -1);
      MEMORY[0x25336A180](v17, -1, -1);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v31, v16);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v30, v13);
    }
    else
    {

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[48];
  uint64_t v3 = v0[46];
  uint64_t v2 = v0[47];
  int v5 = v0[41];
  char v4 = v0[42];
  uint64_t v6 = v0[40];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t GenerateTextFromMediaController.appName(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v41 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceProcessInfo?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IntelligenceProcessInfo();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of OnScreenContent.UIMetadata?(a1, (uint64_t)v9, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v9, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    if (one-time initialization token for genFromMediaController != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v2, (uint64_t)static Logger.genFromMediaController);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v47 = v17;
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x28656D614E707061, 0xEE00293A6D6F7266, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v14, v15, "%s.%s No IntelligenceProcessInfo found, not returning an appName.", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v17, -1, -1);
      MEMORY[0x25336A180](v16, -1, -1);
    }

    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  uint64_t v18 = IntelligenceProcessInfo.bundleIdentifier.getter();
  if (!v19)
  {
    if (one-time initialization token for genFromMediaController != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v2, (uint64_t)static Logger.genFromMediaController);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v22, v23)) {
      goto LABEL_18;
    }
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v47 = v25;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x28656D614E707061, 0xEE00293A6D6F7266, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v26 = "%s.%s No bundleIdentifier found in IntelligenceProcessInfo, not returning an appName.";
    goto LABEL_17;
  }
  uint64_t v20 = v18;
  uint64_t v21 = v19;
  if (IntelligenceProcessInfo.isSystemApp.getter())
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for genFromMediaController != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v2, (uint64_t)static Logger.genFromMediaController);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v22, v23)) {
      goto LABEL_18;
    }
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v47 = v25;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x28656D614E707061, 0xEE00293A6D6F7266, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v26 = "%s.%s Content came from a system app, not returning an appName.";
LABEL_17:
    _os_log_impl(&dword_24F9A2000, v22, v23, v26, (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v25, -1, -1);
    MEMORY[0x25336A180](v24, -1, -1);
LABEL_18:

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0;
  }
  type metadata accessor for LSBundleRecord();
  id v29 = @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(v20, v21, 0);
  id v30 = objc_msgSend(v29, sel_localizedName);

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v32 = v31;

  if (one-time initialization token for genFromMediaController != -1) {
    swift_once();
  }
  uint64_t v33 = __swift_project_value_buffer(v2, (uint64_t)static Logger.genFromMediaController);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v33, v2);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  int v36 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v37 = swift_slowAlloc();
    LODWORD(v45) = v36;
    uint64_t v38 = v37;
    uint64_t v43 = swift_slowAlloc();
    uint64_t v47 = v43;
    *(_DWORD *)uint64_t v38 = 136315650;
    uint64_t v44 = v3;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v47);
    os_log_t v42 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2080;
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x28656D614E707061, 0xEE00293A6D6F7266, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v32, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v39 = v42;
    _os_log_impl(&dword_24F9A2000, v42, (os_log_type_t)v45, "%s.%s Using localized appName: %s.", (uint8_t *)v38, 0x20u);
    uint64_t v40 = v43;
    swift_arrayDestroy();
    MEMORY[0x25336A180](v40, -1, -1);
    MEMORY[0x25336A180](v38, -1, -1);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v2);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v27;
}

uint64_t GenerateTextFromMediaController.getDocumentConfirmationSpokenDialog(isExplicit:appName:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1)
  {
    type metadata accessor for IntentDialogUtils();
    char v10 = 14;
    uint64_t v7 = &v10;
  }
  else
  {
    type metadata accessor for GenerativeAssistantSettingsUserDefaults();
    char v8 = MEMORY[0x253368B80]();
    type metadata accessor for IntentDialogUtils();
    if (v8)
    {
      char v11 = 14;
      uint64_t v7 = &v11;
    }
    else
    {
      char v12 = 13;
      uint64_t v7 = &v12;
    }
  }
  return static IntentDialogUtils.getDialog(catID:response:includeContentProviderName:appName:)(v7, 0, 0xE000000000000000, 1, a2, a3, a4);
}

unsigned char *IntelligenceFile.snippetPreviewFile()()
{
  uint64_t v2 = v0;
  uint64_t v25 = *v0;
  uint64_t v3 = type metadata accessor for IntelligenceFile.SandboxExtensionType();
  uint64_t v22 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v24 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for IntelligenceFile.Attributes();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  char v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  os_log_type_t v15 = &v19[-v14];
  IntelligenceFile.fileURL.getter();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v8, &demangling cache variable for type metadata for URL?);
    swift_retain();
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v15, v8, v9);
    BOOL v20 = URL.startAccessingSecurityScopedResource()();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v13, v15, v9);
    IntelligenceFile.name.getter();
    uint64_t v21 = v1;
    IntelligenceFile.attributes.getter();
    uint64_t v2 = v24;
    (*(void (**)(unsigned char *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x263F818A8], v23);
    swift_allocObject();
    uint64_t v16 = v21;
    uint64_t v17 = IntelligenceFile.init(fileURL:name:attributes:automaticallyDelete:sandboxExtensionType:)();
    if (v16)
    {
      if (v20) {
        URL.stopAccessingSecurityScopedResource()();
      }
    }
    else
    {
      uint64_t v2 = (unsigned char *)v17;
      if (v20) {
        URL.stopAccessingSecurityScopedResource()();
      }
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);
  }
  return v2;
}

id GenerateTextFromMediaController.generatePDFThumbnail(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v6 = URL.startAccessingSecurityScopedResource()();
  id v7 = objc_allocWithZone(MEMORY[0x263F14740]);
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  id v11 = objc_msgSend(v7, sel_initWithURL_, v9);

  if (!v11)
  {
LABEL_7:
    if (one-time initialization token for genFromMediaController != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.genFromMediaController);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v27 = v24;
      *(_DWORD *)uint64_t v18 = 136315650;
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA3E5C0, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      BOOL v25 = v6;
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA42680, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 22) = 2080;
      lazy protocol witness table accessor for type GATError and conformance GATError((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v27);
      BOOL v21 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      _os_log_impl(&dword_24F9A2000, v16, v17, "%s.%s Failed to create a (non-empty) PDFDocument from url: %s", (uint8_t *)v18, 0x20u);
      uint64_t v22 = v24;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v22, -1, -1);
      MEMORY[0x25336A180](v18, -1, -1);

      if (!v21) {
        return 0;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

      if (!v6) {
        return 0;
      }
    }
    URL.stopAccessingSecurityScopedResource()();
    return 0;
  }
  if ((uint64_t)objc_msgSend(v11, sel_pageCount) < 1
    || (id v12 = objc_msgSend(v11, sel_pageAtIndex_, 0)) == 0)
  {

    goto LABEL_7;
  }
  uint64_t v13 = v12;
  id v14 = objc_msgSend(v12, sel_thumbnailOfSize_forBox_, 4, 256.0, 256.0);

  if (v6) {
    URL.stopAccessingSecurityScopedResource()();
  }
  return v14;
}

uint64_t GenerateTextFromMediaController.getImageConfirmationSpokenDialog(isExplicit:isScreenshot:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (a1)
  {
    type metadata accessor for IntentDialogUtils();
    if (a2)
    {
      char v8 = 12;
      uint64_t v5 = &v8;
    }
    else
    {
      char v9 = 10;
      uint64_t v5 = &v9;
    }
  }
  else
  {
    type metadata accessor for GenerativeAssistantSettingsUserDefaults();
    char v6 = MEMORY[0x253368B80]();
    type metadata accessor for IntentDialogUtils();
    if (a2)
    {
      if (v6)
      {
        char v10 = 12;
        uint64_t v5 = &v10;
      }
      else
      {
        char v11 = 11;
        uint64_t v5 = &v11;
      }
    }
    else if (v6)
    {
      char v12 = 10;
      uint64_t v5 = &v12;
    }
    else
    {
      char v13 = 9;
      uint64_t v5 = &v13;
    }
  }
  return static IntentDialogUtils.getDialog(catID:response:includeContentProviderName:appName:)(v5, 0, 0xE000000000000000, 1, 0, 0, a3);
}

id @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = (void *)MEMORY[0x2533691D0]();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleRecordWithBundleIdentifier_allowPlaceholder_error_, v4, a3 & 1, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_24F9C4B8C()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t outlined init with copy of DefaultPromptFactory(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  char v8 = *a2;
  if (*a2)
  {
    void *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();
  return _typeName(_:qualified:)();
}

uint64_t outlined consume of GenerateTextFromMediaController.Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t destroy for GenerateTextFromMediaController(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  __swift_destroy_boxed_opaque_existential_0(a1 + 80);
  __swift_destroy_boxed_opaque_existential_0(a1 + 120);
  return __swift_destroy_boxed_opaque_existential_0(a1 + 160);
}

_OWORD *initializeWithCopy for GenerateTextFromMediaController(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  long long v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  long long v8 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a1 + 184) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  return a1;
}

uint64_t *assignWithCopy for GenerateTextFromMediaController(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for GenerateTextFromMediaController(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  __swift_destroy_boxed_opaque_existential_0(a1 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  __swift_destroy_boxed_opaque_existential_0(a1 + 160);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenerateTextFromMediaController(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenerateTextFromMediaController(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenerateTextFromMediaController()
{
  return &type metadata for GenerateTextFromMediaController;
}

uint64_t outlined copy of GenerateTextFromMediaController.Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for GenerateTextFromMediaController.Error(uint64_t a1)
{
  return outlined consume of GenerateTextFromMediaController.Error(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for GenerateTextFromMediaController.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GenerateTextFromMediaController.Error(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for GenerateTextFromMediaController.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GenerateTextFromMediaController.Error(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of GenerateTextFromMediaController.Error(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for GenerateTextFromMediaController.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of GenerateTextFromMediaController.Error(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenerateTextFromMediaController.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GenerateTextFromMediaController.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for GenerateTextFromMediaController.Error(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for GenerateTextFromMediaController.Error(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GenerateTextFromMediaController.Error()
{
  return &type metadata for GenerateTextFromMediaController.Error;
}

unint64_t lazy protocol witness table accessor for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error;
  if (!lazy protocol witness table cache variable for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error;
  if (!lazy protocol witness table cache variable for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenerateTextFromMediaController.Error and conformance GenerateTextFromMediaController.Error);
  }
  return result;
}

id outlined copy of ImageSource(void *a1, void *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_retain();
    a1 = a2;
    uint64_t v3 = vars8;
  }
  return a1;
}

void outlined consume of ImageSource(void *a1, void *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_release();
    a1 = a2;
    uint64_t v3 = vars8;
  }
}

uint64_t sub_24F9C5488()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in GenerateTextFromMediaController.generateTextFromImage(userQuery:invocationContext:imageInfo:associatedScreenshot:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:useCaseID:)()
{
  return (*(uint64_t (**)(float))(v0 + 16))(0.6);
}

uint64_t outlined init with copy of ModelOrchestrator(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of ModelOrchestrator(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of SelectedContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of DocumentInfo(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized GenerateTextFromMediaController.getImageConfirmationText(isExplicit:isScreenshot:)(char a1, char a2)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  type metadata accessor for GenerativeAssistantSettingsUserDefaults();
  char v3 = MEMORY[0x253368B80]();
  if (a2)
  {
    if (v3)
    {
LABEL_6:
      if (one-time initialization token for explicitScreenshotConfirmation != -1) {
        swift_once();
      }
      int v4 = &static ConfirmationText.explicitScreenshotConfirmation;
      return *v4;
    }
    if (one-time initialization token for implicitScreenshotConfirmation != -1) {
      swift_once();
    }
    int v4 = &static ConfirmationText.implicitScreenshotConfirmation;
  }
  else
  {
    if (v3)
    {
LABEL_10:
      if (one-time initialization token for explicitImageConfirmation != -1) {
        swift_once();
      }
      int v4 = &static ConfirmationText.explicitImageConfirmation;
      return *v4;
    }
    if (one-time initialization token for implicitImageConfirmation != -1) {
      swift_once();
    }
    int v4 = &static ConfirmationText.implicitImageConfirmation;
  }
  return *v4;
}

uint64_t lazy protocol witness table accessor for type IntentResultContainer<Never, Never, _SnippetViewContainer, IntentDialog> and conformance IntentResultContainer<A, B, C, D>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ScreenContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined release of SupportedDocumentHelper(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type GATError and conformance GATError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of OnScreenContent.UIMetadata?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t type metadata accessor for LSBundleRecord()
{
  unint64_t result = lazy cache variable for type metadata for LSBundleRecord;
  if (!lazy cache variable for type metadata for LSBundleRecord)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LSBundleRecord);
  }
  return result;
}

uint64_t Prompts.deinit()
{
  return v0;
}

uint64_t Prompts.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Prompts()
{
  return self;
}

uint64_t method lookup function for Prompts(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Prompts);
}

unint64_t static Constants.appBundleId.getter()
{
  return 0xD00000000000003FLL;
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

BOOL static TamaleUtils.isTamaleRequest()()
{
  Swift::String_optional v1 = ForegroundAppDetector.getForegroundAppBundleID()();
  if (v0)
  {

    return 0;
  }
  if (!v1.value._object) {
    return 0;
  }
  char v3 = specialized static TamaleUtils.requestWithTamale(appBundleID:)(v1.value._countAndFlagsBits, (uint64_t)v1.value._object);
  swift_bridgeObjectRelease();
  return (v3 & 1) != 0;
}

uint64_t specialized static TamaleUtils.requestWithTamale(appBundleID:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000024FA42760
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD00000000000001ELL && a2 == 0x800000024FA42740
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000022 && a2 == 0x800000024FA42710)
  {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

ValueMetadata *type metadata accessor for TamaleUtils()
{
  return &type metadata for TamaleUtils;
}

uint64_t ContentLoaderWithContextRetrieval.RetrievalMethod.rawValue.getter(char a1)
{
  return *(void *)&aFast[8 * a1];
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContentLoaderWithContextRetrieval.RetrievalMethod@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContentLoaderWithContextRetrieval.RetrievalMethod.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ContentLoaderWithContextRetrieval.init(featureFlagManager:contextClient:screenLockChecker:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v19)(uint64_t *__return_ptr, id);
  id v20;
  void (*v21)(uint64_t, char *, uint64_t);
  void (*v22)(uint64_t *, void);
  void (*v23)(uint64_t *, void);
  char *v24;
  void (*v25)(uint64_t *__return_ptr, id);
  id v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(unint64_t, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t result;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  uint64_t v46 = type metadata accessor for IntelligenceImage.Representation();
  id v48 = *(void *)(v46 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v46);
  long long v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v40 - v11;
  uint64_t v45 = a1;
  outlined init with copy of ModelSessionFactory(a1, a4);
  *(void *)(a4 + 80) = a2;
  uint64_t v49 = a4;
  uint64_t v44 = a3;
  outlined init with copy of ModelSessionFactory(a3, a4 + 40);
  uint64_t v43 = a2;
  swift_retain();
  IntelligenceImage.Representation.init()();
  char v13 = (void (*)(uint64_t *, void))IntelligenceImage.Representation.sizeConstraints.modify();
  IntelligenceImage.Representation.SizeConstraints.longestDimensionMaxPixelLength.setter();
  v13(&v50, 0);
  id v14 = (void (*)(uint64_t *, void))IntelligenceImage.Representation.sizeConstraints.modify();
  IntelligenceImage.Representation.SizeConstraints.shortestDimensionMaxPixelLength.setter();
  v14(&v50, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>);
  uint64_t v15 = *(void *)(type metadata accessor for UTType() - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v41 = v17 | 7;
  os_log_t v42 = ((v17 + 32) & ~v17) + v16;
  uint64_t v18 = swift_allocObject();
  uint64_t v40 = xmmword_24FA3E1D0;
  *(_OWORD *)(v18 + 16) = xmmword_24FA3E1D0;
  static UTType.jpeg.getter();
  IntelligenceImage.Representation.preferredFormats.setter();
  if (one-time initialization token for _compressionRatio != -1) {
    swift_once();
  }
  if (byte_269A45858 == 1)
  {
    uint64_t v19 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A45840 + 1);
    unint64_t v20 = (id)static Overrides._compressionRatio;
    swift_bridgeObjectRetain();
    swift_retain();
    v19(&v50, v20);
    swift_release();
    swift_bridgeObjectRelease();
  }
  IntelligenceImage.Representation.lossyCompressionQuality.setter();
  IntelligenceImage.Representation.alwaysStripMetadata.setter();
  uint64_t v47 = (int *)type metadata accessor for ContentLoaderWithContextRetrieval();
  BOOL v21 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 16);
  v21(v49 + v47[7], v12, v46);
  IntelligenceImage.Representation.init()();
  uint64_t v22 = (void (*)(uint64_t *, void))IntelligenceImage.Representation.sizeConstraints.modify();
  IntelligenceImage.Representation.SizeConstraints.maxPixelWidth.setter();
  v22(&v50, 0);
  uint64_t v23 = (void (*)(uint64_t *, void))IntelligenceImage.Representation.sizeConstraints.modify();
  IntelligenceImage.Representation.SizeConstraints.maxPixelHeight.setter();
  v23(&v50, 0);
  *(_OWORD *)(swift_allocObject() + 16) = v40;
  static UTType.jpeg.getter();
  IntelligenceImage.Representation.preferredFormats.setter();
  uint64_t v24 = v12;
  if (byte_269A45858 == 1)
  {
    BOOL v25 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A45840 + 1);
    uint64_t v26 = (id)static Overrides._compressionRatio;
    swift_bridgeObjectRetain();
    swift_retain();
    v25(&v50, v26);
    swift_release();
    swift_bridgeObjectRelease();
  }
  IntelligenceImage.Representation.lossyCompressionQuality.setter();
  IntelligenceImage.Representation.alwaysStripMetadata.setter();
  uint64_t v27 = v46;
  uint64_t v28 = v49;
  id v29 = (void (*)(unint64_t, char *, uint64_t))v21;
  v21(v49 + v47[8], v10, v46);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IntelligenceImage.Representation>);
  id v30 = v10;
  unint64_t v31 = v27;
  unint64_t v32 = v48;
  uint64_t v33 = *(void *)(v48 + 72);
  uint64_t v34 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  os_log_type_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_24FA3E410;
  int v36 = v35 + v34;
  v29(v36, v24, v31);
  v29(v36 + v33, v30, v31);
  uint64_t v37 = specialized Set.init(_nonEmptyArrayLiteral:)(v35);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v44);
  __swift_destroy_boxed_opaque_existential_0(v45);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v30, v31);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v38)(v24, v31);
  *(void *)(v28 + v47[9]) = v37;
  return result;
}

uint64_t closure #1 in ContentLoaderWithContextRetrieval.load()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContentLoaderWithContextRetrieval();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v10 - 8);
  char v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  outlined init with copy of ContentLoaderWithContextRetrieval(a2, (uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ContentLoaderWithContextRetrieval);
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v15 = (v9 + *(unsigned __int8 *)(v5 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16 + v14, (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  outlined init with take of ContentLoaderWithContextRetrieval((uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(void))type metadata accessor for ContentLoaderWithContextRetrieval);
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load(), v16);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation.YieldResult);
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v5[8] = v7;
  *uint64_t v7 = v5;
  v7[1] = closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return ContentLoaderWithContextRetrieval.retrieve(method:)(2);
}

uint64_t closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load()(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[9] = a1;
  v4[10] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load(), 0, 0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v4[11] = v6;
    *uint64_t v6 = v5;
    v6[1] = closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
    return ContentLoaderWithContextRetrieval.load(_:)(a1);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 104) = a1;
    uint64_t v5 = closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load()()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  v0[2] = v0[13];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncStream.Continuation.finish()();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  AsyncStream.Continuation.finish()();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  AsyncStream.Continuation.finish()();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ContentLoaderWithContextRetrieval.retrieve(method:)(char a1)
{
  *(void *)(v2 + 48) = v1;
  *(unsigned char *)(v2 + 168) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  *(void *)(v2 + 56) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OnScreenContentRequestParameters();
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 72) = *(void *)(v3 - 8);
  *(void *)(v2 + 80) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OnScreenContentSources();
  *(void *)(v2 + 88) = v4;
  *(void *)(v2 + 96) = *(void *)(v4 - 8);
  *(void *)(v2 + 104) = swift_task_alloc();
  *(void *)(v2 + 112) = swift_task_alloc();
  return MEMORY[0x270FA2498](ContentLoaderWithContextRetrieval.retrieve(method:), 0, 0);
}

uint64_t ContentLoaderWithContextRetrieval.retrieve(method:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  ContentLoaderWithContextRetrieval.getSources(method:)(*(unsigned __int8 *)(v0 + 168), *(void *)(v0 + 112));
  uint64_t v4 = (void (*)(uint64_t))MEMORY[0x263F4D030];
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentSources and conformance OnScreenContentSources, MEMORY[0x263F4D030]);
  dispatch thunk of SetAlgebra.init()();
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentSources and conformance OnScreenContentSources, v4);
  char v5 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 120) = v6;
  *(void *)(v0 + 128) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  if (v5)
  {
    v6(*(void *)(v0 + 112), *(void *)(v0 + 88));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v8 = MEMORY[0x263F8EE78];
    return v7(v8);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 96) + 16))(*(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 88));
    specialized ContentLoaderWithContextRetrieval.getContentTypes(representations:)();
    OnScreenContentRequestParameters.init(sources:contentTypes:)();
    ContentLoaderWithContextRetrieval.getAssistantSchemas()();
    uint64_t v10 = (void (*)(uint64_t, void))OnScreenContentRequestParameters.appEntityFilteringArgs.modify();
    OnScreenContentRequestParameters.AppEntityFiltering.assistantSchemaKinds.setter();
    v10(v0 + 16, 0);
    OnScreenContentRequestParameters.downscaleWindowSnapshots.setter();
    *(void *)(v0 + 136) = type metadata accessor for MetricsUtils();
    static MetricsUtils.shared.getter();
    static Signpost.contextScreenContentRetrieval.getter();
    dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
    swift_release();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v11;
    *uint64_t v11 = v0;
    v11[1] = ContentLoaderWithContextRetrieval.retrieve(method:);
    uint64_t v12 = *(void *)(v0 + 80);
    return MEMORY[0x270F3F1C0](v12);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[15];
  uint64_t v10 = v0[14];
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  char v5 = v0[7];
  static MetricsUtils.shared.getter();
  static Signpost.contextScreenContentRetrieval.getter();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v5, &demangling cache variable for type metadata for OSSignpostID?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v11(v10, v1);
  uint64_t v7 = v0[20];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[15];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t ContentLoaderWithContextRetrieval.retrieve(method:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    char v5 = ContentLoaderWithContextRetrieval.retrieve(method:);
  }
  else
  {
    *(void *)(v4 + 160) = a1;
    char v5 = ContentLoaderWithContextRetrieval.retrieve(method:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t ContentLoaderWithContextRetrieval.load(_:)(uint64_t a1)
{
  v2[40] = a1;
  v2[41] = v1;
  uint64_t v3 = type metadata accessor for OnScreenContent.Image();
  v2[42] = v3;
  v2[43] = *(void *)(v3 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OnScreenContent.UIMetadata();
  v2[46] = v4;
  v2[47] = *(void *)(v4 - 8);
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenContent?);
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ScreenContent(0);
  v2[55] = v5;
  v2[56] = *(void *)(v5 - 8);
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  v2[64] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  v2[65] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OnScreenContent.EntityFormat();
  v2[66] = v6;
  v2[67] = *(void *)(v6 - 8);
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent?);
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
  v2[72] = swift_task_alloc();
  v2[73] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for TypedValue.EntityIdentifierValue();
  v2[74] = v7;
  v2[75] = *(void *)(v7 - 8);
  v2[76] = swift_task_alloc();
  v2[77] = swift_task_alloc();
  v2[78] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceElement.Document.PaginationInfo?);
  v2[79] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OnScreenContent.Document();
  v2[80] = v8;
  v2[81] = *(void *)(v8 - 8);
  v2[82] = swift_task_alloc();
  v2[83] = swift_task_alloc();
  v2[84] = swift_task_alloc();
  v2[85] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OnScreenContent.Content();
  v2[86] = v9;
  v2[87] = *(void *)(v9 - 8);
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v2[91] = v10;
  v2[92] = *(void *)(v10 - 8);
  v2[93] = swift_task_alloc();
  v2[94] = swift_task_alloc();
  v2[95] = swift_task_alloc();
  v2[96] = swift_task_alloc();
  v2[97] = swift_task_alloc();
  v2[98] = swift_task_alloc();
  v2[99] = swift_task_alloc();
  v2[100] = swift_task_alloc();
  v2[101] = swift_task_alloc();
  v2[102] = swift_task_alloc();
  v2[103] = swift_task_alloc();
  v2[104] = swift_task_alloc();
  v2[105] = swift_task_alloc();
  v2[106] = swift_task_alloc();
  v2[107] = swift_task_alloc();
  v2[108] = swift_task_alloc();
  v2[109] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for OnScreenContent();
  v2[110] = v11;
  v2[111] = *(void *)(v11 - 8);
  v2[112] = swift_task_alloc();
  v2[113] = swift_task_alloc();
  v2[114] = swift_task_alloc();
  v2[115] = swift_task_alloc();
  v2[116] = swift_task_alloc();
  v2[117] = swift_task_alloc();
  v2[118] = swift_task_alloc();
  v2[119] = swift_task_alloc();
  v2[120] = swift_task_alloc();
  v2[121] = swift_task_alloc();
  return MEMORY[0x270FA2498](ContentLoaderWithContextRetrieval.load(_:), 0, 0);
}

uint64_t ContentLoaderWithContextRetrieval.load(_:)()
{
  uint64_t v239 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0 + 320) + 16);
  *(void *)(v0 + 976) = v1;
  if (!v1)
  {
    unint64_t v225 = MEMORY[0x263F8EE78];
LABEL_52:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v191 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v191(v225);
  }
  uint64_t v2 = *(void *)(v0 + 888);
  *(_DWORD *)(v0 + 1224) = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v0 + 1228) = *MEMORY[0x263F4CEE0];
  *(_DWORD *)(v0 + 1232) = *MEMORY[0x263F4CED8];
  *(_DWORD *)(v0 + 1236) = *MEMORY[0x263F4CF10];
  *(_DWORD *)(v0 + 1240) = *MEMORY[0x263F4CF18];
  *(void *)(v0 + 984) = *(void *)(v2 + 72);
  *(void *)(v0 + 992) = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  unint64_t v4 = MEMORY[0x263F8EE78];
  while (1)
  {
    unint64_t v224 = v4;
    *(void *)(v0 + 1008) = v4;
    *(void *)(v0 + 1000) = v3;
    uint64_t v6 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 992);
    uint64_t v7 = *(void *)(v0 + 968);
    uint64_t v8 = *(void *)(v0 + 880);
    unint64_t v9 = *(void *)(v0 + 320)
       + ((*(unsigned __int8 *)(v0 + 1224) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1224))
       + *(void *)(v0 + 984) * v3;
    *(void *)(v0 + 1016) = (*(void *)(v0 + 888) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v6(v7, v9, v8);
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    uint64_t v11 = *(void *)(v0 + 968);
    uint64_t v12 = *(void *)(v0 + 960);
    uint64_t v236 = *(void *)(v0 + 952);
    uint64_t v13 = *(void *)(v0 + 888);
    uint64_t v14 = *(void *)(v0 + 880);
    uint64_t v15 = *(void *)(v0 + 872);
    uint64_t v16 = *(void *)(v0 + 736);
    uint64_t v17 = __swift_project_value_buffer(*(void *)(v0 + 728), (uint64_t)static Logger.contextRetrieval);
    *(void *)(v0 + 1024) = v17;
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    *(void *)(v0 + 1032) = v18;
    *(void *)(v0 + 1040) = (v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v226 = v17;
    v229 = v18;
    ((void (*)(uint64_t))v18)(v15);
    v10(v12, v11, v14);
    v10(v236, v12, v14);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    *(void *)(v0 + 1048) = v19;
    *(void *)(v0 + 1056) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v19(v12, v14);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    uint64_t v237 = v19;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v211 = *(void *)(v0 + 952);
      uint64_t v213 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      uint64_t v22 = *(void *)(v0 + 944);
      uint64_t v23 = *(void *)(v0 + 880);
      uint64_t v216 = *(void *)(v0 + 736);
      uint64_t v217 = *(void *)(v0 + 728);
      uint64_t v220 = *(void *)(v0 + 872);
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      v238[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315650;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v26 = _typeName(_:qualified:)();
      *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 22) = 2080;
      v213(v22, v211, v23);
      uint64_t v28 = String.init<A>(describing:)();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v237(v211, v23);
      _os_log_impl(&dword_24F9A2000, v20, v21, "%s.%s current context retrieval on screen content: %s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v25, -1, -1);
      MEMORY[0x25336A180](v24, -1, -1);

      id v30 = *(void (**)(uint64_t, uint64_t))(v216 + 8);
      v30(v220, v217);
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 872);
      uint64_t v32 = *(void *)(v0 + 736);
      uint64_t v33 = *(void *)(v0 + 728);
      v19(*(void *)(v0 + 952), *(void *)(v0 + 880));

      id v30 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v30(v31, v33);
    }
    *(void *)(v0 + 1064) = v30;
    int v34 = *(_DWORD *)(v0 + 1228);
    uint64_t v35 = *(void *)(v0 + 720);
    uint64_t v36 = *(void *)(v0 + 696);
    uint64_t v37 = *(void *)(v0 + 688);
    OnScreenContent.content.getter();
    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 88);
    *(void *)(v0 + 1072) = v38;
    *(void *)(v0 + 1080) = (v36 + 88) & 0xFFFFFFFFFFFFLL | 0xA3B5000000000000;
    int v39 = v38(v35, v37);
    if (v39 != v34)
    {
      if (v39 != *(_DWORD *)(v0 + 1232))
      {
        v229(*(void *)(v0 + 760), v226, *(void *)(v0 + 728));
        uint64_t v122 = Logger.logObject.getter();
        os_log_type_t v123 = static os_log_type_t.info.getter();
        BOOL v124 = os_log_type_enabled(v122, v123);
        uint64_t v125 = *(void *)(v0 + 968);
        uint64_t v126 = *(void *)(v0 + 880);
        uint64_t v127 = *(void *)(v0 + 760);
        uint64_t v128 = *(void *)(v0 + 728);
        if (v124)
        {
          uint64_t v129 = swift_slowAlloc();
          int v223 = v30;
          uint64_t v130 = swift_slowAlloc();
          v238[0] = v130;
          *(_DWORD *)uint64_t v129 = 136315394;
          type metadata accessor for ContentLoaderWithContextRetrieval();
          uint64_t v131 = _typeName(_:qualified:)();
          *(void *)(v129 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v132, v238);
          swift_bridgeObjectRelease();
          *(_WORD *)(v129 + 12) = 2080;
          *(void *)(v129 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v238);
          _os_log_impl(&dword_24F9A2000, v122, v123, "%s.%s Unexpected OnScreenContent content type, skipping on screen content", (uint8_t *)v129, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v130, -1, -1);
          MEMORY[0x25336A180](v129, -1, -1);

          v223(v127, v128);
        }
        else
        {

          v30(v127, v128);
        }
        v237(v125, v126);
        (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 720), *(void *)(v0 + 688));
        goto LABEL_5;
      }
      uint64_t v66 = *(void *)(v0 + 720);
      uint64_t v67 = *(void *)(v0 + 696);
      uint64_t v68 = *(void *)(v0 + 688);
      uint64_t v69 = *(void *)(v0 + 600);
      uint64_t v70 = *(void *)(v0 + 592);
      uint64_t v71 = *(void *)(v0 + 576);
      uint64_t v72 = *(void *)(v0 + 360);
      uint64_t v73 = *(void *)(v0 + 336);
      uint64_t v74 = *(void *)(v0 + 344);
      uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v67 + 96);
      *(void *)(v0 + 1160) = v75;
      *(void *)(v0 + 1168) = (v67 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
      v75(v66, v68);
      uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32);
      *(void *)(v0 + 1176) = v76;
      *(void *)(v0 + 1184) = (v74 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v76(v72, v66, v73);
      OnScreenContent.Image.entity.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v71, 1, v70) != 1)
      {
        uint64_t v193 = *(unsigned int *)(v0 + 1236);
        uint64_t v194 = *(void **)(v0 + 544);
        uint64_t v195 = *(void *)(v0 + 536);
        uint64_t v196 = *(void *)(v0 + 528);
        uint64_t v197 = *(void *)(v0 + 328);
        (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 608), *(void *)(v0 + 576), *(void *)(v0 + 592));
        *(void *)(v0 + 1192) = type metadata accessor for MetricsUtils();
        static MetricsUtils.shared.getter();
        static Signpost.imageContextConversion.getter();
        dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
        swift_release();
        uint64_t v198 = type metadata accessor for ContentLoaderWithContextRetrieval();
        *(void *)(v0 + 1200) = v198;
        uint64_t v199 = *(int *)(v198 + 36);
        *(_DWORD *)(v0 + 1244) = v199;
        *uint64_t v194 = *(void *)(v197 + v199);
        (*(void (**)(void *, uint64_t, uint64_t))(v195 + 104))(v194, v193, v196);
        swift_bridgeObjectRetain();
        uint64_t v200 = (void *)swift_task_alloc();
        *(void *)(v0 + 1208) = v200;
        *uint64_t v200 = v0;
        v200[1] = ContentLoaderWithContextRetrieval.load(_:);
        uint64_t v201 = *(void *)(v0 + 608);
        uint64_t v202 = *(void *)(v0 + 560);
        uint64_t v203 = *(void *)(v0 + 544);
        goto LABEL_57;
      }
      uint64_t v77 = *(void *)(v0 + 408);
      uint64_t v78 = *(void *)(v0 + 384);
      uint64_t v79 = *(void *)(v0 + 360);
      uint64_t v80 = *(void *)(v0 + 328);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 576), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
      uint64_t v81 = *(void *)(v80 + *(int *)(type metadata accessor for ContentLoaderWithContextRetrieval() + 36));
      OnScreenContent.uiMetadata.getter();
      ContentLoaderWithContextRetrieval.getScreenContent(image:representations:uiMetadata:isAppEntity:)(v79, v81, v78, 0, v77);
      uint64_t v82 = *(void *)(v0 + 440);
      uint64_t v83 = *(void *)(v0 + 448);
      uint64_t v84 = *(void *)(v0 + 408);
      (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 384), *(void *)(v0 + 368));
      int v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v84, 1, v82);
      uint64_t v86 = *(void *)(v0 + 408);
      if (v85 != 1)
      {
        uint64_t v164 = *(void *)(v0 + 456);
        uint64_t v165 = *(void *)(v0 + 464);
        outlined init with take of ContentLoaderWithContextRetrieval(v86, v165, type metadata accessor for ScreenContent);
        outlined init with copy of ContentLoaderWithContextRetrieval(v165, v164, type metadata accessor for ScreenContent);
        unint64_t v166 = v224;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v224 + 16) + 1, 1, v224);
        }
        unint64_t v168 = *(void *)(v166 + 16);
        unint64_t v167 = *(void *)(v166 + 24);
        uint64_t v169 = v166;
        if (v168 >= v167 >> 1) {
          uint64_t v169 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v167 > 1, v168 + 1, 1, v166);
        }
        uint64_t v170 = *(void *)(v0 + 968);
        uint64_t v171 = *(void *)(v0 + 880);
        uint64_t v172 = *(void *)(v0 + 456);
        uint64_t v173 = *(void *)(v0 + 464);
        uint64_t v174 = *(void *)(v0 + 448);
        uint64_t v175 = *(void *)(v0 + 360);
        uint64_t v176 = *(void *)(v0 + 336);
        uint64_t v177 = *(void *)(v0 + 344);
        *(void *)(v169 + 16) = v168 + 1;
        unint64_t v4 = v169;
        outlined init with take of ContentLoaderWithContextRetrieval(v172, v169+ ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80))+ *(void *)(v174 + 72) * v168, type metadata accessor for ScreenContent);
        outlined destroy of ScreenContent(v173, type metadata accessor for ScreenContent);
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v175, v176);
        v237(v170, v171);
        goto LABEL_6;
      }
      uint64_t v222 = v30;
      uint64_t v87 = *(void *)(v0 + 768);
      uint64_t v88 = *(void *)(v0 + 728);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v86, &demangling cache variable for type metadata for ScreenContent?);
      v229(v87, v226, v88);
      uint64_t v89 = Logger.logObject.getter();
      os_log_type_t v90 = static os_log_type_t.info.getter();
      BOOL v91 = os_log_type_enabled(v89, v90);
      uint64_t v92 = *(void *)(v0 + 968);
      uint64_t v93 = *(void *)(v0 + 880);
      uint64_t v94 = *(void *)(v0 + 728);
      uint64_t v95 = *(void *)(v0 + 360);
      uint64_t v96 = *(void *)(v0 + 344);
      uint64_t v230 = *(void *)(v0 + 768);
      uint64_t v233 = *(void *)(v0 + 336);
      if (v91)
      {
        uint64_t v97 = swift_slowAlloc();
        uint64_t v219 = v92;
        uint64_t v98 = swift_slowAlloc();
        v238[0] = v98;
        *(_DWORD *)uint64_t v97 = 136315394;
        uint64_t v99 = _typeName(_:qualified:)();
        *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, v238);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v97 + 12) = 2080;
        *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v238);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v89, v90, "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content", (uint8_t *)v97, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v98, -1, -1);
        MEMORY[0x25336A180](v97, -1, -1);

        v222(v230, v94);
        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v233);
        uint64_t v101 = v93;
        uint64_t v5 = v219;
      }
      else
      {

        v222(v230, v94);
        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v233);
        uint64_t v5 = v92;
        uint64_t v101 = v93;
      }
      goto LABEL_4;
    }
    uint64_t v221 = v30;
    uint64_t v40 = *(void *)(v0 + 864);
    uint64_t v41 = *(void *)(v0 + 728);
    uint64_t v42 = *(void *)(v0 + 720);
    uint64_t v43 = *(void *)(v0 + 696);
    uint64_t v44 = *(void *)(v0 + 688);
    uint64_t v45 = *(void *)(v0 + 680);
    uint64_t v46 = *(void *)(v0 + 672);
    uint64_t v47 = *(void *)(v0 + 664);
    id v48 = *(void **)(v0 + 648);
    uint64_t v49 = *(void *)(v0 + 640);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v43 + 96);
    *(void *)(v0 + 1088) = v50;
    *(void *)(v0 + 1096) = (v43 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
    v50(v42, v44);
    uint64_t v51 = (void (*)(uint64_t, uint64_t, uint64_t))v48[4];
    *(void *)(v0 + 1104) = v51;
    *(void *)(v0 + 1112) = (unint64_t)(v48 + 4) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v51(v45, v42, v49);
    v229(v40, v226, v41);
    uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t))v48[2];
    v52(v46, v45, v49);
    v52(v47, v46, v49);
    uint64_t v53 = (void (*)(uint64_t, uint64_t))v48[1];
    *(void *)(v0 + 1120) = v53;
    *(void *)(v0 + 1128) = (unint64_t)(v48 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v53(v46, v49);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = *(void *)(v0 + 864);
    uint64_t v58 = *(void *)(v0 + 728);
    uint64_t v59 = *(void *)(v0 + 664);
    uint64_t v218 = v53;
    if (v56)
    {
      uint64_t v210 = *(void *)(v0 + 640);
      uint64_t v60 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      v238[0] = v61;
      *(_DWORD *)uint64_t v60 = 136315650;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v62 = _typeName(_:qualified:)();
      *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 12) = 2080;
      *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 22) = 2080;
      OnScreenContent.Document.paginationInfo.getter();
      uint64_t v64 = String.init<A>(describing:)();
      *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v53(v59, v210);
      _os_log_impl(&dword_24F9A2000, v54, v55, "%s.%s current document pagination info: %s", (uint8_t *)v60, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v61, -1, -1);
      MEMORY[0x25336A180](v60, -1, -1);
    }
    else
    {
      v53(v59, *(void *)(v0 + 640));
    }

    v221(v57, v58);
    uint64_t v102 = *(void *)(v0 + 600);
    uint64_t v103 = *(void *)(v0 + 592);
    uint64_t v104 = *(void *)(v0 + 584);
    OnScreenContent.Document.entity.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v104, 1, v103) != 1) {
      break;
    }
    uint64_t v105 = *(void *)(v0 + 400);
    uint64_t v106 = *(void *)(v0 + 368);
    uint64_t v107 = *(void *)(v0 + 376);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 584), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
    OnScreenContent.uiMetadata.getter();
    char v108 = ContentLoaderWithContextRetrieval.shouldIgnoreDocument(metadata:)();
    char v109 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
    v109(v105, v106);
    if (v108)
    {
      v229(*(void *)(v0 + 816), v226, *(void *)(v0 + 728));
      uint64_t v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.info.getter();
      BOOL v112 = os_log_type_enabled(v110, v111);
      uint64_t v113 = *(void *)(v0 + 968);
      uint64_t v114 = *(void *)(v0 + 880);
      uint64_t v115 = *(void *)(v0 + 816);
      uint64_t v116 = *(void *)(v0 + 728);
      uint64_t v117 = *(void *)(v0 + 680);
      uint64_t v234 = *(void *)(v0 + 640);
      if (!v112)
      {

        v221(v115, v116);
        v218(v117, v234);
LABEL_49:
        uint64_t v5 = v113;
        uint64_t v101 = v114;
        goto LABEL_4;
      }
      uint64_t v227 = *(void *)(v0 + 680);
      uint64_t v118 = swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      v238[0] = v119;
      *(_DWORD *)uint64_t v118 = 136315394;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v120 = _typeName(_:qualified:)();
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v118 + 12) = 2080;
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v110, v111, "%s.%s should ignore document, skipping on screen content", (uint8_t *)v118, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v119, -1, -1);
      MEMORY[0x25336A180](v118, -1, -1);

      v221(v115, v116);
      v218(v227, v234);
      uint64_t v5 = v113;
      uint64_t v101 = v114;
    }
    else
    {
      uint64_t v145 = *(void *)(v0 + 448);
      uint64_t v215 = *(void *)(v0 + 440);
      uint64_t v146 = *(unsigned char **)(v0 + 424);
      uint64_t v147 = *(void *)(v0 + 400);
      uint64_t v148 = *(void *)(v0 + 368);
      OnScreenContent.uiMetadata.getter();
      ContentLoaderWithContextRetrieval.getScreenContent(document:uiMetadata:isAppEntity:)(v147, 0, v146);
      v109(v147, v148);
      int v149 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v145 + 48))(v146, 1, v215);
      uint64_t v150 = *(void *)(v0 + 424);
      if (v149 != 1)
      {
        uint64_t v178 = *(void *)(v0 + 488);
        uint64_t v179 = *(void *)(v0 + 496);
        outlined init with take of ContentLoaderWithContextRetrieval(v150, v179, type metadata accessor for ScreenContent);
        outlined init with copy of ContentLoaderWithContextRetrieval(v179, v178, type metadata accessor for ScreenContent);
        unint64_t v180 = v224;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v180 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v224 + 16) + 1, 1, v224);
        }
        unint64_t v182 = *(void *)(v180 + 16);
        unint64_t v181 = *(void *)(v180 + 24);
        uint64_t v183 = v180;
        if (v182 >= v181 >> 1) {
          uint64_t v183 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v181 > 1, v182 + 1, 1, v180);
        }
        uint64_t v184 = *(void *)(v0 + 968);
        uint64_t v185 = *(void *)(v0 + 880);
        uint64_t v186 = *(void *)(v0 + 680);
        uint64_t v187 = *(void *)(v0 + 640);
        uint64_t v188 = *(void *)(v0 + 488);
        uint64_t v189 = *(void *)(v0 + 496);
        uint64_t v190 = *(void *)(v0 + 448);
        *(void *)(v183 + 16) = v182 + 1;
        unint64_t v4 = v183;
        outlined init with take of ContentLoaderWithContextRetrieval(v188, v183+ ((*(unsigned __int8 *)(v190 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80))+ *(void *)(v190 + 72) * v182, type metadata accessor for ScreenContent);
        outlined destroy of ScreenContent(v189, type metadata accessor for ScreenContent);
        v218(v186, v187);
        v237(v184, v185);
        goto LABEL_6;
      }
      uint64_t v151 = *(void *)(v0 + 808);
      uint64_t v152 = *(void *)(v0 + 728);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v150, &demangling cache variable for type metadata for ScreenContent?);
      v229(v151, v226, v152);
      uint64_t v153 = Logger.logObject.getter();
      os_log_type_t v154 = static os_log_type_t.info.getter();
      BOOL v155 = os_log_type_enabled(v153, v154);
      uint64_t v113 = *(void *)(v0 + 968);
      uint64_t v114 = *(void *)(v0 + 880);
      uint64_t v156 = *(void *)(v0 + 808);
      uint64_t v157 = *(void *)(v0 + 728);
      uint64_t v158 = *(void *)(v0 + 680);
      uint64_t v159 = *(void *)(v0 + 640);
      if (!v155)
      {

        v221(v156, v157);
        v218(v158, v159);
        goto LABEL_49;
      }
      uint64_t v232 = *(void *)(v0 + 640);
      uint64_t v160 = swift_slowAlloc();
      uint64_t v161 = swift_slowAlloc();
      v238[0] = v161;
      *(_DWORD *)uint64_t v160 = 136315394;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v162 = _typeName(_:qualified:)();
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v162, v163, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v160 + 12) = 2080;
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v153, v154, "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content", (uint8_t *)v160, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v161, -1, -1);
      MEMORY[0x25336A180](v160, -1, -1);

      v221(v156, v157);
      v218(v158, v232);
      uint64_t v5 = v113;
      uint64_t v101 = v114;
    }
LABEL_4:
    v237(v5, v101);
LABEL_5:
    unint64_t v4 = v224;
LABEL_6:
    uint64_t v3 = *(void *)(v0 + 1000) + 1;
    if (v3 == *(void *)(v0 + 976))
    {
      swift_bridgeObjectRelease();
      unint64_t v225 = v4;
      goto LABEL_52;
    }
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 616), *(void *)(v0 + 584), *(void *)(v0 + 592));
  if (ContentLoaderWithContextRetrieval.shouldIgnoreEntity(_:)())
  {
    v229(*(void *)(v0 + 856), v226, *(void *)(v0 + 728));
    uint64_t v133 = Logger.logObject.getter();
    os_log_type_t v134 = static os_log_type_t.info.getter();
    BOOL v135 = os_log_type_enabled(v133, v134);
    uint64_t v136 = *(void *)(v0 + 968);
    uint64_t v137 = *(void *)(v0 + 880);
    uint64_t v214 = *(void *)(v0 + 856);
    uint64_t v138 = *(void *)(v0 + 728);
    uint64_t v139 = *(void *)(v0 + 680);
    uint64_t v231 = *(void *)(v0 + 616);
    uint64_t v235 = *(void *)(v0 + 640);
    uint64_t v140 = *(void *)(v0 + 600);
    uint64_t v228 = *(void *)(v0 + 592);
    if (v135)
    {
      uint64_t v141 = swift_slowAlloc();
      uint64_t v212 = v136;
      uint64_t v142 = swift_slowAlloc();
      v238[0] = v142;
      *(_DWORD *)uint64_t v141 = 136315394;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v143 = _typeName(_:qualified:)();
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v144, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v141 + 12) = 2080;
      *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v133, v134, "%s.%s should ignore entity, skipping on screen content", (uint8_t *)v141, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v142, -1, -1);
      MEMORY[0x25336A180](v141, -1, -1);

      v221(v214, v138);
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v231, v228);
      v218(v139, v235);
      uint64_t v5 = v212;
    }
    else
    {

      v221(v214, v138);
      (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v231, v228);
      v218(v139, v235);
      uint64_t v5 = v136;
    }
    uint64_t v101 = v137;
    goto LABEL_4;
  }
  uint64_t v204 = *(unsigned int *)(v0 + 1240);
  uint64_t v205 = *(uint64_t **)(v0 + 552);
  uint64_t v206 = *(void *)(v0 + 536);
  uint64_t v207 = *(void *)(v0 + 528);
  *(void *)(v0 + 1136) = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.documentContextConversion.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>);
  type metadata accessor for UTType();
  uint64_t v208 = swift_allocObject();
  *(_OWORD *)(v208 + 16) = xmmword_24FA3E1D0;
  static UTType.pdf.getter();
  *uint64_t v205 = v208;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v206 + 104))(v205, v204, v207);
  uint64_t v209 = (void *)swift_task_alloc();
  *(void *)(v0 + 1144) = v209;
  *uint64_t v209 = v0;
  v209[1] = ContentLoaderWithContextRetrieval.load(_:);
  uint64_t v201 = *(void *)(v0 + 616);
  uint64_t v202 = *(void *)(v0 + 568);
  uint64_t v203 = *(void *)(v0 + 552);
LABEL_57:
  return MEMORY[0x270F3F1D0](v202, v201, v203);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1152) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[67] + 8))(v2[69], v2[66]);
  if (v0) {
    uint64_t v3 = ContentLoaderWithContextRetrieval.load(_:);
  }
  else {
    uint64_t v3 = ContentLoaderWithContextRetrieval.load(_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  BOOL v56;
  void (*v57)(uint64_t, uint64_t);
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  void (*v72)(uint64_t, uint64_t);
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(unint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, unint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  void (*v117)(uint64_t, uint64_t);
  NSObject *v118;
  os_log_type_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t);
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  void (*v147)(uint64_t, uint64_t, uint64_t);
  void (*v148)(uint64_t, uint64_t, uint64_t);
  void (*v149)(uint64_t, uint64_t);
  NSObject *v150;
  os_log_type_t v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  void (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  os_log_type_t v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  void (*v207)(uint64_t, uint64_t);
  NSObject *v208;
  os_log_type_t v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  NSObject *v221;
  os_log_type_t v222;
  const char *v223;
  NSObject *v224;
  os_log_type_t v225;
  BOOL v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void (*v235)(uint64_t, uint64_t);
  NSObject *v236;
  os_log_type_t v237;
  BOOL v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned char *v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  os_log_type_t v250;
  BOOL v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t (*v299)(void);
  uint64_t v300;
  uint64_t v301;
  void (*v302)(uint64_t, uint64_t);
  void (*v303)(uint64_t, uint64_t);
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void (*v310)(uint64_t, uint64_t, uint64_t);
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void (*v315)(uint64_t, uint64_t, uint64_t);
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void (*v327)(uint64_t, uint64_t);
  uint64_t v328;
  uint64_t v329;
  void (*v330)(uint64_t, uint64_t);
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void (*v336)(uint64_t, uint64_t, uint64_t);
  uint64_t v337;
  void (*v338)(uint64_t, uint64_t);
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  void (*v342)(uint64_t, uint64_t);
  void (*v343)(uint64_t, uint64_t);
  void (*v344)(uint64_t, uint64_t);
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  void (*v351)(uint64_t, uint64_t);
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void (*v361)(uint64_t, uint64_t, uint64_t);
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  void (*v366)(uint64_t, uint64_t);
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  void (*v373)(uint64_t, uint64_t);
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  void (*v382)(uint64_t, uint64_t);
  uint64_t v383[3];
  uint64_t v384;
  uint64_t v385;

  v384 = v0;
  uint64_t v1 = *(void *)(v0 + 888);
  uint64_t v2 = *(void *)(v0 + 880);
  uint64_t v3 = *(void *)(v0 + 568);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    unint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
    uint64_t v5 = *(void *)(v0 + 1024);
    uint64_t v6 = *(void *)(v0 + 824);
    uint64_t v7 = *(void *)(v0 + 728);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v3, &demangling cache variable for type metadata for OnScreenContent?);
    v4(v6, v5, v7);
    uint64_t v8 = Logger.logObject.getter();
    unint64_t v9 = static os_log_type_t.info.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
    v365 = *(void *)(v0 + 880);
    v372 = *(void *)(v0 + 968);
    v313 = *(void *)(v0 + 728);
    long long v322 = *(void *)(v0 + 824);
    v356 = *(void *)(v0 + 680);
    v344 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
    v348 = *(void *)(v0 + 640);
    uint64_t v13 = *(void *)(v0 + 600);
    v328 = *(void *)(v0 + 592);
    uint64_t v335 = *(void *)(v0 + 616);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      v383[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315394;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v16 = _typeName(_:qualified:)();
      *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v8, v9, "%s.%s converted document is unexpected nil, skipping on screen content", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v15, -1, -1);
      MEMORY[0x25336A180](v14, -1, -1);

      v344(v322, v313);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v335, v328);
      v11(v356, v348);
      v12(v372, v365);
    }
    else
    {

      v344(v322, v313);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v335, v328);
      v11(v356, v348);
      v12(v372, v365);
    }
  }
  else
  {
    v336 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
    v366 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    uint64_t v19 = *(void *)(v0 + 936);
    unint64_t v20 = *(void *)(v0 + 928);
    v349 = *(void *)(v0 + 920);
    uint64_t v314 = *(void *)(v0 + 848);
    long long v323 = *(void *)(v0 + 728);
    uint64_t v329 = *(void *)(v0 + 1024);
    os_log_type_t v21 = *(void *)(v0 + 520);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v19, v3, v2);
    static MetricsUtils.shared.getter();
    static Signpost.documentContextConversion.getter();
    uint64_t v22 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
    dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v21, &demangling cache variable for type metadata for OSSignpostID?);
    v336(v314, v329, v323);
    v18(v20, v19, v2);
    v18(v349, v20, v2);
    v366(v20, v2);
    uint64_t v23 = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.debug.getter();
    uint64_t v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
    if (v25)
    {
      v373 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      uint64_t v315 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      unint64_t v27 = *(void *)(v0 + 944);
      uint64_t v304 = *(void *)(v0 + 920);
      uint64_t v28 = *(void *)(v0 + 880);
      v357 = *(void *)(v0 + 728);
      v367 = *(void *)(v0 + 848);
      uint64_t v330 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
      unint64_t v29 = swift_slowAlloc();
      v337 = swift_slowAlloc();
      v383[0] = v337;
      *(_DWORD *)unint64_t v29 = 136315650;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      id v30 = _typeName(_:qualified:)();
      *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 22) = 2080;
      v315(v27, v304, v28);
      uint64_t v32 = String.init<A>(describing:)();
      *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v330(v304, v28);
      _os_log_impl(&dword_24F9A2000, v23, v24, "%s.%s convertedDocument: %s", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v337, -1, -1);
      MEMORY[0x25336A180](v29, -1, -1);

      v373(v367, v357);
    }
    else
    {
      int v34 = *(void *)(v0 + 848);
      uint64_t v35 = *(void *)(v0 + 728);
      (*(void (**)(void, void))(v0 + 1048))(*(void *)(v0 + 920), *(void *)(v0 + 880));

      v26(v34, v35);
    }
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t))(v0 + 1072);
    uint64_t v37 = *(_DWORD *)(v0 + 1228);
    uint64_t v38 = *(void *)(v0 + 712);
    int v39 = *(void *)(v0 + 688);
    OnScreenContent.content.getter();
    if (v36(v38, v39) == v37)
    {
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1104);
      uint64_t v41 = *(void *)(v0 + 712);
      uint64_t v42 = *(void *)(v0 + 656);
      uint64_t v43 = *(void *)(v0 + 640);
      uint64_t v44 = *(void *)(v0 + 448);
      uint64_t v45 = *(unsigned char **)(v0 + 432);
      uint64_t v46 = *(void *)(v0 + 400);
      uint64_t v47 = *(void *)(v0 + 376);
      v374 = *(void *)(v0 + 368);
      v378 = *(void *)(v0 + 440);
      (*(void (**)(uint64_t, void))(v0 + 1088))(v41, *(void *)(v0 + 688));
      v40(v42, v41, v43);
      OnScreenContent.uiMetadata.getter();
      ContentLoaderWithContextRetrieval.getScreenContent(document:uiMetadata:isAppEntity:)(v46, 1, v45);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v374);
      id v48 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v44 + 48))(v45, 1, v378);
      uint64_t v49 = *(void *)(v0 + 432);
      if (v48 != 1)
      {
        uint64_t v81 = *(void *)(v0 + 504);
        uint64_t v80 = *(void *)(v0 + 512);
        outlined init with take of ContentLoaderWithContextRetrieval(v49, v80, type metadata accessor for ScreenContent);
        outlined init with copy of ContentLoaderWithContextRetrieval(v80, v81, type metadata accessor for ScreenContent);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v347 = *(void *)(v0 + 1008);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          v347 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v347 + 16) + 1, 1, v347);
        }
        uint64_t v84 = *(void *)(v347 + 16);
        uint64_t v83 = *(void *)(v347 + 24);
        int v85 = v84 + 1;
        if (v84 >= v83 >> 1)
        {
          v300 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1, v347);
          int v85 = v84 + 1;
          v347 = v300;
        }
        uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
        uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
        v380 = *(void *)(v0 + 968);
        v340 = *(void *)(v0 + 936);
        uint64_t v88 = *(void *)(v0 + 880);
        v377 = *(void *)(v0 + 680);
        uint64_t v89 = *(void *)(v0 + 656);
        os_log_type_t v90 = *(void *)(v0 + 640);
        BOOL v91 = *(void *)(v0 + 600);
        v352 = *(void *)(v0 + 592);
        v360 = *(void *)(v0 + 616);
        uint64_t v92 = *(void *)(v0 + 504);
        uint64_t v93 = *(void *)(v0 + 512);
        uint64_t v94 = *(void *)(v0 + 448);
        *(void *)(v347 + 16) = v85;
        outlined init with take of ContentLoaderWithContextRetrieval(v92, v347+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(void *)(v94 + 72) * v84, type metadata accessor for ScreenContent);
        outlined destroy of ScreenContent(v93, type metadata accessor for ScreenContent);
        v86(v89, v90);
        v87(v340, v88);
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v360, v352);
        v86(v377, v90);
        v87(v380, v88);
        goto LABEL_22;
      }
      uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
      uint64_t v51 = *(void *)(v0 + 1024);
      uint64_t v52 = *(void *)(v0 + 840);
      uint64_t v53 = *(void *)(v0 + 728);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v49, &demangling cache variable for type metadata for ScreenContent?);
      v50(v52, v51, v53);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.info.getter();
      BOOL v56 = os_log_type_enabled(v54, v55);
      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
      uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
      v375 = *(void *)(v0 + 880);
      v379 = *(void *)(v0 + 968);
      unint64_t v316 = *(void *)(v0 + 728);
      uint64_t v324 = *(void *)(v0 + 840);
      v358 = *(void *)(v0 + 936);
      v368 = *(void *)(v0 + 680);
      uint64_t v331 = *(void *)(v0 + 656);
      v338 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      uint64_t v59 = *(void *)(v0 + 640);
      uint64_t v60 = *(void *)(v0 + 600);
      v345 = *(void *)(v0 + 592);
      v350 = *(void *)(v0 + 616);
      if (v56)
      {
        char v303 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
        uint64_t v61 = swift_slowAlloc();
        uint64_t v62 = swift_slowAlloc();
        v383[0] = v62;
        *(_DWORD *)uint64_t v61 = 136315394;
        type metadata accessor for ContentLoaderWithContextRetrieval();
        unint64_t v63 = _typeName(_:qualified:)();
        *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v383);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 12) = 2080;
        *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v54, v55, "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v62, -1, -1);
        MEMORY[0x25336A180](v61, -1, -1);

        v338(v324, v316);
        v57(v331, v59);
        v303(v358, v375);
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v350, v345);
        v57(v368, v59);
        v303(v379, v375);
      }
      else
      {

        v338(v324, v316);
        v57(v331, v59);
        v58(v358, v375);
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v350, v345);
        v57(v368, v59);
        v58(v379, v375);
      }
    }
    else
    {
      unint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
      uint64_t v66 = *(void *)(v0 + 1024);
      uint64_t v67 = *(void *)(v0 + 832);
      uint64_t v68 = *(void *)(v0 + 728);
      (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 712), *(void *)(v0 + 688));
      v65(v67, v66, v68);
      uint64_t v69 = Logger.logObject.getter();
      uint64_t v70 = static os_log_type_t.info.getter();
      uint64_t v71 = os_log_type_enabled(v69, v70);
      uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
      uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
      uint64_t v74 = *(void *)(v0 + 880);
      uint64_t v325 = *(void *)(v0 + 832);
      uint64_t v317 = *(void *)(v0 + 728);
      v369 = *(void *)(v0 + 680);
      v376 = *(void *)(v0 + 968);
      v351 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      v359 = *(void *)(v0 + 640);
      v339 = *(void *)(v0 + 936);
      v346 = *(void *)(v0 + 616);
      uint64_t v75 = *(void *)(v0 + 600);
      char v332 = *(void *)(v0 + 592);
      if (v71)
      {
        uint64_t v76 = swift_slowAlloc();
        uint64_t v302 = v73;
        uint64_t v77 = swift_slowAlloc();
        v383[0] = v77;
        *(_DWORD *)uint64_t v76 = 136315394;
        type metadata accessor for ContentLoaderWithContextRetrieval();
        uint64_t v78 = _typeName(_:qualified:)();
        *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v383);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 12) = 2080;
        *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v69, v70, "%s.%s Unexpected OnScreenContent content type, skipping on screen content", (uint8_t *)v76, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v77, -1, -1);
        MEMORY[0x25336A180](v76, -1, -1);

        v351(v325, v317);
        v302(v339, v74);
        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v346, v332);
        v72(v369, v359);
        v302(v376, v74);
      }
      else
      {

        v351(v325, v317);
        v73(v339, v74);
        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v346, v332);
        v72(v369, v359);
        v73(v376, v74);
      }
    }
  }
  v347 = *(void *)(v0 + 1008);
LABEL_22:
  uint64_t v95 = *(void *)(v0 + 1000) + 1;
  if (v95 == *(void *)(v0 + 976))
  {
LABEL_23:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v96 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v96(v347);
  }
  uint64_t v301 = *(void *)(v0 + 1152);
  while (1)
  {
    *(void *)(v0 + 1008) = v347;
    *(void *)(v0 + 1000) = v95;
    uint64_t v104 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 992);
    uint64_t v105 = *(void *)(v0 + 968);
    uint64_t v106 = *(void *)(v0 + 880);
    uint64_t v107 = *(void *)(v0 + 320)
         + ((*(unsigned __int8 *)(v0 + 1224) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1224))
         + *(void *)(v0 + 984) * v95;
    *(void *)(v0 + 1016) = (*(void *)(v0 + 888) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v104(v105, v107, v106);
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    char v108 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    char v109 = *(void *)(v0 + 968);
    uint64_t v110 = *(void *)(v0 + 960);
    v381 = *(void *)(v0 + 952);
    os_log_type_t v111 = *(void *)(v0 + 888);
    BOOL v112 = *(void *)(v0 + 880);
    uint64_t v113 = *(void *)(v0 + 872);
    uint64_t v114 = *(void *)(v0 + 736);
    uint64_t v115 = __swift_project_value_buffer(*(void *)(v0 + 728), (uint64_t)static Logger.contextRetrieval);
    *(void *)(v0 + 1024) = v115;
    uint64_t v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 16);
    *(void *)(v0 + 1032) = v116;
    *(void *)(v0 + 1040) = (v114 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v353 = v115;
    v361 = v116;
    ((void (*)(uint64_t))v116)(v113);
    v108(v110, v109, v112);
    v108(v381, v110, v112);
    uint64_t v117 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
    *(void *)(v0 + 1048) = v117;
    *(void *)(v0 + 1056) = (v111 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v117(v110, v112);
    uint64_t v118 = Logger.logObject.getter();
    uint64_t v119 = static os_log_type_t.debug.getter();
    v382 = v117;
    if (os_log_type_enabled(v118, v119))
    {
      v307 = *(void *)(v0 + 952);
      v310 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      long long v306 = *(void *)(v0 + 944);
      uint64_t v120 = *(void *)(v0 + 880);
      uint64_t v326 = *(void *)(v0 + 736);
      v333 = *(void *)(v0 + 728);
      v341 = *(void *)(v0 + 872);
      unint64_t v121 = swift_slowAlloc();
      uint64_t v318 = swift_slowAlloc();
      v383[0] = v318;
      *(_DWORD *)unint64_t v121 = 136315650;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v122 = _typeName(_:qualified:)();
      *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v121 + 12) = 2080;
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v121 + 22) = 2080;
      v310(v306, v307, v120);
      BOOL v124 = String.init<A>(describing:)();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v117(v307, v120);
      _os_log_impl(&dword_24F9A2000, v118, v119, "%s.%s current context retrieval on screen content: %s", (uint8_t *)v121, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v318, -1, -1);
      MEMORY[0x25336A180](v121, -1, -1);

      uint64_t v126 = *(void (**)(uint64_t, uint64_t))(v326 + 8);
      v126(v341, v333);
    }
    else
    {
      uint64_t v127 = *(void *)(v0 + 872);
      uint64_t v128 = *(void *)(v0 + 736);
      uint64_t v129 = *(void *)(v0 + 728);
      v117(*(void *)(v0 + 952), *(void *)(v0 + 880));

      uint64_t v126 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
      v126(v127, v129);
    }
    *(void *)(v0 + 1064) = v126;
    uint64_t v130 = *(_DWORD *)(v0 + 1228);
    uint64_t v131 = *(void *)(v0 + 720);
    unint64_t v132 = *(void *)(v0 + 696);
    uint64_t v133 = *(void *)(v0 + 688);
    OnScreenContent.content.getter();
    os_log_type_t v134 = *(uint64_t (**)(uint64_t, uint64_t))(v132 + 88);
    *(void *)(v0 + 1072) = v134;
    *(void *)(v0 + 1080) = (v132 + 88) & 0xFFFFFFFFFFFFLL | 0xA3B5000000000000;
    BOOL v135 = v134(v131, v133);
    if (v135 != v130) {
      break;
    }
    uint64_t v136 = *(void *)(v0 + 864);
    uint64_t v137 = *(void *)(v0 + 728);
    uint64_t v138 = *(void *)(v0 + 720);
    uint64_t v139 = *(void *)(v0 + 696);
    uint64_t v140 = *(void *)(v0 + 688);
    uint64_t v141 = *(void *)(v0 + 680);
    uint64_t v142 = *(void *)(v0 + 672);
    uint64_t v143 = *(void *)(v0 + 664);
    unint64_t v144 = *(void **)(v0 + 648);
    uint64_t v145 = *(void *)(v0 + 640);
    uint64_t v146 = *(void (**)(uint64_t, uint64_t))(v139 + 96);
    *(void *)(v0 + 1088) = v146;
    *(void *)(v0 + 1096) = (v139 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
    v146(v138, v140);
    uint64_t v147 = (void (*)(uint64_t, uint64_t, uint64_t))v144[4];
    *(void *)(v0 + 1104) = v147;
    *(void *)(v0 + 1112) = (unint64_t)(v144 + 4) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v147(v141, v138, v145);
    v361(v136, v353, v137);
    uint64_t v148 = (void (*)(uint64_t, uint64_t, uint64_t))v144[2];
    v148(v142, v141, v145);
    v148(v143, v142, v145);
    int v149 = (void (*)(uint64_t, uint64_t))v144[1];
    *(void *)(v0 + 1120) = v149;
    *(void *)(v0 + 1128) = (unint64_t)(v144 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v149(v142, v145);
    uint64_t v150 = Logger.logObject.getter();
    uint64_t v151 = static os_log_type_t.debug.getter();
    uint64_t v152 = os_log_type_enabled(v150, v151);
    uint64_t v153 = *(void *)(v0 + 864);
    os_log_type_t v154 = *(void *)(v0 + 728);
    BOOL v155 = *(void *)(v0 + 664);
    v342 = v126;
    long long v327 = v149;
    if (v152)
    {
      uint64_t v308 = *(void *)(v0 + 640);
      uint64_t v156 = swift_slowAlloc();
      uint64_t v157 = swift_slowAlloc();
      v383[0] = v157;
      *(_DWORD *)uint64_t v156 = 136315650;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v158 = _typeName(_:qualified:)();
      *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, v159, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v156 + 12) = 2080;
      *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v156 + 22) = 2080;
      OnScreenContent.Document.paginationInfo.getter();
      uint64_t v160 = String.init<A>(describing:)();
      *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v161, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v149(v155, v308);
      _os_log_impl(&dword_24F9A2000, v150, v151, "%s.%s current document pagination info: %s", (uint8_t *)v156, 0x20u);
      swift_arrayDestroy();
      uint64_t v162 = v157;
      uint64_t v126 = v342;
      MEMORY[0x25336A180](v162, -1, -1);
      MEMORY[0x25336A180](v156, -1, -1);

      v342(v153, v154);
    }
    else
    {
      v149(v155, *(void *)(v0 + 640));

      v126(v153, v154);
    }
    uint64_t v200 = *(void *)(v0 + 600);
    uint64_t v201 = *(void *)(v0 + 592);
    uint64_t v202 = *(void *)(v0 + 584);
    OnScreenContent.Document.entity.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v200 + 48))(v202, 1, v201) != 1)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 616), *(void *)(v0 + 584), *(void *)(v0 + 592));
      if ((ContentLoaderWithContextRetrieval.shouldIgnoreEntity(_:)() & 1) == 0)
      {
        v288 = *(unsigned int *)(v0 + 1240);
        v289 = *(uint64_t **)(v0 + 552);
        v290 = *(void *)(v0 + 536);
        char v291 = *(void *)(v0 + 528);
        *(void *)(v0 + 1136) = type metadata accessor for MetricsUtils();
        static MetricsUtils.shared.getter();
        static Signpost.documentContextConversion.getter();
        dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>);
        type metadata accessor for UTType();
        v292 = swift_allocObject();
        *(_OWORD *)(v292 + 16) = xmmword_24FA3E1D0;
        static UTType.pdf.getter();
        *v289 = v292;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v290 + 104))(v289, v288, v291);
        uint64_t v293 = (void *)swift_task_alloc();
        *(void *)(v0 + 1144) = v293;
        *uint64_t v293 = v0;
        v293[1] = ContentLoaderWithContextRetrieval.load(_:);
        uint64_t v285 = *(void *)(v0 + 616);
        uint64_t v286 = *(void *)(v0 + 568);
        v287 = *(void *)(v0 + 552);
        goto LABEL_75;
      }
      uint64_t v235 = v126;
      v361(*(void *)(v0 + 856), v353, *(void *)(v0 + 728));
      uint64_t v236 = Logger.logObject.getter();
      uint64_t v237 = static os_log_type_t.info.getter();
      uint64_t v238 = os_log_type_enabled(v236, v237);
      uint64_t v239 = *(void *)(v0 + 968);
      uint64_t v240 = *(void *)(v0 + 728);
      v364 = *(void *)(v0 + 680);
      v371 = *(void *)(v0 + 880);
      v355 = *(void *)(v0 + 640);
      unint64_t v320 = *(void *)(v0 + 616);
      uint64_t v241 = *(void *)(v0 + 600);
      uint64_t v309 = *(void *)(v0 + 856);
      uint64_t v312 = *(void *)(v0 + 592);
      if (v238)
      {
        uint64_t v305 = *(void *)(v0 + 968);
        uint64_t v98 = swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        v383[0] = v99;
        *(_DWORD *)uint64_t v98 = 136315394;
        type metadata accessor for ContentLoaderWithContextRetrieval();
        unint64_t v100 = _typeName(_:qualified:)();
        *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v383);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v98 + 12) = 2080;
        *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v236, v237, "%s.%s should ignore entity, skipping on screen content", (uint8_t *)v98, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v99, -1, -1);
        MEMORY[0x25336A180](v98, -1, -1);

        v342(v309, v240);
        (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v320, v312);
        v149(v364, v355);
        uint64_t v102 = v305;
      }
      else
      {

        v235(v309, v240);
        (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v320, v312);
        v149(v364, v355);
        uint64_t v102 = v239;
      }
      uint64_t v103 = v371;
      goto LABEL_29;
    }
    uint64_t v203 = *(void *)(v0 + 400);
    uint64_t v204 = *(void *)(v0 + 368);
    uint64_t v205 = *(void *)(v0 + 376);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 584), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
    OnScreenContent.uiMetadata.getter();
    uint64_t v206 = ContentLoaderWithContextRetrieval.shouldIgnoreDocument(metadata:)();
    uint64_t v207 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
    v207(v203, v204);
    if (v206)
    {
      v361(*(void *)(v0 + 816), v353, *(void *)(v0 + 728));
      uint64_t v208 = Logger.logObject.getter();
      uint64_t v209 = static os_log_type_t.info.getter();
      uint64_t v210 = os_log_type_enabled(v208, v209);
      uint64_t v211 = *(void *)(v0 + 968);
      uint64_t v212 = *(void *)(v0 + 880);
      uint64_t v213 = *(void *)(v0 + 816);
      uint64_t v214 = *(void *)(v0 + 728);
      uint64_t v215 = *(void *)(v0 + 680);
      uint64_t v216 = *(void *)(v0 + 640);
      if (!v210) {
        goto LABEL_65;
      }
      v363 = *(void *)(v0 + 640);
      uint64_t v217 = swift_slowAlloc();
      uint64_t v218 = swift_slowAlloc();
      v383[0] = v218;
      *(_DWORD *)uint64_t v217 = 136315394;
      v354 = v215;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v219 = _typeName(_:qualified:)();
      char v319 = v211;
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v219, v220, v383);
      v311 = v212;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v217 + 12) = 2080;
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v221 = v208;
      uint64_t v222 = v209;
      int v223 = "%s.%s should ignore document, skipping on screen content";
    }
    else
    {
      uint64_t v242 = *(void *)(v0 + 448);
      char v321 = *(void *)(v0 + 440);
      uint64_t v243 = *(unsigned char **)(v0 + 424);
      uint64_t v244 = *(void *)(v0 + 400);
      uint64_t v245 = *(void *)(v0 + 368);
      OnScreenContent.uiMetadata.getter();
      ContentLoaderWithContextRetrieval.getScreenContent(document:uiMetadata:isAppEntity:)(v244, 0, v243);
      v207(v244, v245);
      uint64_t v246 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v242 + 48))(v243, 1, v321);
      uint64_t v247 = *(void *)(v0 + 424);
      if (v246 != 1)
      {
        uint64_t v266 = *(void *)(v0 + 488);
        uint64_t v267 = *(void *)(v0 + 496);
        outlined init with take of ContentLoaderWithContextRetrieval(v247, v267, type metadata accessor for ScreenContent);
        outlined init with copy of ContentLoaderWithContextRetrieval(v267, v266, type metadata accessor for ScreenContent);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v347 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v347 + 16) + 1, 1, v347);
        }
        uint64_t v269 = *(void *)(v347 + 16);
        uint64_t v268 = *(void *)(v347 + 24);
        if (v269 >= v268 >> 1) {
          v347 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v268 > 1, v269 + 1, 1, v347);
        }
        uint64_t v270 = *(void *)(v0 + 968);
        uint64_t v271 = *(void *)(v0 + 880);
        uint64_t v272 = *(void *)(v0 + 680);
        uint64_t v273 = *(void *)(v0 + 640);
        uint64_t v274 = *(void *)(v0 + 488);
        uint64_t v275 = *(void *)(v0 + 496);
        char v276 = *(void *)(v0 + 448);
        *(void *)(v347 + 16) = v269 + 1;
        outlined init with take of ContentLoaderWithContextRetrieval(v274, v347+ ((*(unsigned __int8 *)(v276 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80))+ *(void *)(v276 + 72) * v269, type metadata accessor for ScreenContent);
        outlined destroy of ScreenContent(v275, type metadata accessor for ScreenContent);
        v327(v272, v273);
        v382(v270, v271);
        goto LABEL_30;
      }
      uint64_t v248 = *(void *)(v0 + 808);
      uint64_t v249 = *(void *)(v0 + 728);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v247, &demangling cache variable for type metadata for ScreenContent?);
      v361(v248, v353, v249);
      uint64_t v208 = Logger.logObject.getter();
      uint64_t v250 = static os_log_type_t.info.getter();
      uint64_t v251 = os_log_type_enabled(v208, v250);
      uint64_t v211 = *(void *)(v0 + 968);
      uint64_t v212 = *(void *)(v0 + 880);
      uint64_t v213 = *(void *)(v0 + 808);
      uint64_t v214 = *(void *)(v0 + 728);
      uint64_t v215 = *(void *)(v0 + 680);
      uint64_t v216 = *(void *)(v0 + 640);
      if (!v251)
      {
LABEL_65:

        v342(v213, v214);
        v327(v215, v216);
        uint64_t v102 = v211;
        uint64_t v103 = v212;
        goto LABEL_29;
      }
      v363 = *(void *)(v0 + 640);
      uint64_t v217 = swift_slowAlloc();
      uint64_t v218 = swift_slowAlloc();
      v383[0] = v218;
      *(_DWORD *)uint64_t v217 = 136315394;
      v354 = v215;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v252 = _typeName(_:qualified:)();
      char v319 = v211;
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v252, v253, v383);
      v311 = v212;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v217 + 12) = 2080;
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v221 = v208;
      uint64_t v222 = v250;
      int v223 = "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content";
    }
    _os_log_impl(&dword_24F9A2000, v221, v222, v223, (uint8_t *)v217, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v218, -1, -1);
    MEMORY[0x25336A180](v217, -1, -1);

    v342(v213, v214);
    v327(v354, v363);
    uint64_t v103 = v311;
    uint64_t v102 = v319;
LABEL_29:
    v382(v102, v103);
LABEL_30:
    uint64_t v95 = *(void *)(v0 + 1000) + 1;
    if (v95 == *(void *)(v0 + 976)) {
      goto LABEL_23;
    }
  }
  if (v135 != *(_DWORD *)(v0 + 1232))
  {
    v361(*(void *)(v0 + 760), v353, *(void *)(v0 + 728));
    unint64_t v224 = Logger.logObject.getter();
    unint64_t v225 = static os_log_type_t.info.getter();
    uint64_t v226 = os_log_type_enabled(v224, v225);
    uint64_t v227 = *(void *)(v0 + 968);
    uint64_t v228 = *(void *)(v0 + 880);
    v229 = *(void *)(v0 + 760);
    uint64_t v230 = *(void *)(v0 + 728);
    if (v226)
    {
      uint64_t v231 = swift_slowAlloc();
      uint64_t v232 = swift_slowAlloc();
      v383[0] = v232;
      *(_DWORD *)uint64_t v231 = 136315394;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v233 = _typeName(_:qualified:)();
      *(void *)(v231 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v233, v234, v383);
      swift_bridgeObjectRelease();
      *(_WORD *)(v231 + 12) = 2080;
      *(void *)(v231 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
      _os_log_impl(&dword_24F9A2000, v224, v225, "%s.%s Unexpected OnScreenContent content type, skipping on screen content", (uint8_t *)v231, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v232, -1, -1);
      MEMORY[0x25336A180](v231, -1, -1);
    }

    v126(v229, v230);
    v382(v227, v228);
    (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 720), *(void *)(v0 + 688));
    goto LABEL_30;
  }
  unint64_t v163 = *(void *)(v0 + 720);
  uint64_t v164 = *(void *)(v0 + 696);
  uint64_t v165 = *(void *)(v0 + 688);
  unint64_t v166 = *(void *)(v0 + 600);
  unint64_t v167 = *(void *)(v0 + 592);
  unint64_t v168 = *(void *)(v0 + 576);
  uint64_t v169 = *(void *)(v0 + 360);
  uint64_t v170 = *(void *)(v0 + 336);
  uint64_t v171 = *(void *)(v0 + 344);
  uint64_t v172 = *(void (**)(uint64_t, uint64_t))(v164 + 96);
  *(void *)(v0 + 1160) = v172;
  *(void *)(v0 + 1168) = (v164 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
  v172(v163, v165);
  uint64_t v173 = *(void (**)(uint64_t, uint64_t, uint64_t))(v171 + 32);
  *(void *)(v0 + 1176) = v173;
  *(void *)(v0 + 1184) = (v171 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v173(v169, v163, v170);
  OnScreenContent.Image.entity.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v166 + 48))(v168, 1, v167) != 1)
  {
    uint64_t v277 = *(unsigned int *)(v0 + 1236);
    uint64_t v278 = *(void **)(v0 + 544);
    uint64_t v279 = *(void *)(v0 + 536);
    uint64_t v280 = *(void *)(v0 + 528);
    uint64_t v281 = *(void *)(v0 + 328);
    (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 608), *(void *)(v0 + 576), *(void *)(v0 + 592));
    *(void *)(v0 + 1192) = type metadata accessor for MetricsUtils();
    static MetricsUtils.shared.getter();
    static Signpost.imageContextConversion.getter();
    dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
    swift_release();
    os_log_type_t v282 = type metadata accessor for ContentLoaderWithContextRetrieval();
    *(void *)(v0 + 1200) = v282;
    uint64_t v283 = *(int *)(v282 + 36);
    *(_DWORD *)(v0 + 1244) = v283;
    *uint64_t v278 = *(void *)(v281 + v283);
    (*(void (**)(void *, uint64_t, uint64_t))(v279 + 104))(v278, v277, v280);
    swift_bridgeObjectRetain();
    uint64_t v284 = (void *)swift_task_alloc();
    *(void *)(v0 + 1208) = v284;
    *uint64_t v284 = v0;
    v284[1] = ContentLoaderWithContextRetrieval.load(_:);
    uint64_t v285 = *(void *)(v0 + 608);
    uint64_t v286 = *(void *)(v0 + 560);
    v287 = *(void *)(v0 + 544);
LABEL_75:
    return MEMORY[0x270F3F1D0](v286, v285, v287);
  }
  uint64_t v174 = *(void *)(v0 + 408);
  uint64_t v175 = *(void *)(v0 + 384);
  uint64_t v176 = *(void *)(v0 + 360);
  uint64_t v177 = *(void *)(v0 + 328);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 576), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
  uint64_t v178 = *(void *)(v177 + *(int *)(type metadata accessor for ContentLoaderWithContextRetrieval() + 36));
  OnScreenContent.uiMetadata.getter();
  ContentLoaderWithContextRetrieval.getScreenContent(image:representations:uiMetadata:isAppEntity:)(v176, v178, v175, 0, v174);
  if (!v301)
  {
    uint64_t v179 = *(void *)(v0 + 440);
    unint64_t v180 = *(void *)(v0 + 448);
    unint64_t v181 = *(void *)(v0 + 408);
    (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 384), *(void *)(v0 + 368));
    unint64_t v182 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v180 + 48))(v181, 1, v179);
    uint64_t v183 = *(void *)(v0 + 408);
    if (v182 == 1)
    {
      v343 = v126;
      uint64_t v184 = *(void *)(v0 + 768);
      uint64_t v185 = *(void *)(v0 + 728);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v183, &demangling cache variable for type metadata for ScreenContent?);
      v361(v184, v353, v185);
      uint64_t v186 = Logger.logObject.getter();
      uint64_t v187 = static os_log_type_t.info.getter();
      uint64_t v188 = os_log_type_enabled(v186, v187);
      uint64_t v189 = *(void *)(v0 + 968);
      uint64_t v190 = *(void *)(v0 + 880);
      uint64_t v191 = *(void *)(v0 + 728);
      uint64_t v192 = *(void *)(v0 + 360);
      uint64_t v193 = *(void *)(v0 + 344);
      v362 = *(void *)(v0 + 768);
      v370 = *(void *)(v0 + 336);
      if (v188)
      {
        uint64_t v194 = swift_slowAlloc();
        uint64_t v334 = v190;
        uint64_t v195 = swift_slowAlloc();
        v383[0] = v195;
        *(_DWORD *)uint64_t v194 = 136315394;
        uint64_t v196 = _typeName(_:qualified:)();
        *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v196, v197, v383);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v194 + 12) = 2080;
        *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v383);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v186, v187, "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content", (uint8_t *)v194, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v195, -1, -1);
        MEMORY[0x25336A180](v194, -1, -1);

        v343(v362, v191);
        (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v192, v370);
        uint64_t v198 = v189;
        uint64_t v199 = v334;
      }
      else
      {

        v343(v362, v191);
        (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v192, v370);
        uint64_t v198 = v189;
        uint64_t v199 = v190;
      }
      v382(v198, v199);
      uint64_t v301 = 0;
    }
    else
    {
      char v254 = *(void *)(v0 + 456);
      uint64_t v255 = *(void *)(v0 + 464);
      outlined init with take of ContentLoaderWithContextRetrieval(v183, v255, type metadata accessor for ScreenContent);
      outlined init with copy of ContentLoaderWithContextRetrieval(v255, v254, type metadata accessor for ScreenContent);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v347 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v347 + 16) + 1, 1, v347);
      }
      uint64_t v257 = *(void *)(v347 + 16);
      uint64_t v256 = *(void *)(v347 + 24);
      if (v257 >= v256 >> 1) {
        v347 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v256 > 1, v257 + 1, 1, v347);
      }
      uint64_t v258 = *(void *)(v0 + 968);
      int v259 = *(void *)(v0 + 880);
      uint64_t v260 = *(void *)(v0 + 456);
      uint64_t v261 = *(void *)(v0 + 464);
      uint64_t v262 = *(void *)(v0 + 448);
      uint64_t v263 = *(void *)(v0 + 360);
      long long v264 = *(void *)(v0 + 336);
      unsigned int v265 = *(void *)(v0 + 344);
      *(void *)(v347 + 16) = v257 + 1;
      outlined init with take of ContentLoaderWithContextRetrieval(v260, v347+ ((*(unsigned __int8 *)(v262 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v262 + 80))+ *(void *)(v262 + 72) * v257, type metadata accessor for ScreenContent);
      outlined destroy of ScreenContent(v261, type metadata accessor for ScreenContent);
      (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v263, v264);
      v382(v258, v259);
      uint64_t v301 = 0;
    }
    goto LABEL_30;
  }
  v294 = *(void *)(v0 + 968);
  uint64_t v295 = *(void *)(v0 + 880);
  v296 = *(void *)(v0 + 360);
  uint64_t v297 = *(void *)(v0 + 336);
  uint64_t v298 = *(void *)(v0 + 344);
  (*(void (**)(void))(*(void *)(v0 + 376) + 8))();
  (*(void (**)(uint64_t, uint64_t))(v298 + 8))(v296, v297);
  v382(v294, v295);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v299 = *(uint64_t (**)(void))(v0 + 8);
  return v299();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1216) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[67] + 8))(v2[68], v2[66]);
  if (v0) {
    uint64_t v3 = ContentLoaderWithContextRetrieval.load(_:);
  }
  else {
    uint64_t v3 = ContentLoaderWithContextRetrieval.load(_:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t);
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  id v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(unint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void (*v97)(uint64_t, unint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t);
  void (*v110)(uint64_t, uint64_t);
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t);
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  void (*v140)(uint64_t, uint64_t, uint64_t);
  void (*v141)(uint64_t, uint64_t, uint64_t);
  void (*v142)(uint64_t, uint64_t);
  NSObject *v143;
  os_log_type_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(uint64_t, uint64_t);
  void (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  os_log_type_t v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  void (*v199)(uint64_t, uint64_t);
  NSObject *v200;
  os_log_type_t v201;
  BOOL v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  NSObject *v214;
  os_log_type_t v215;
  BOOL v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  NSObject *v225;
  os_log_type_t v226;
  BOOL v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned char *v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  NSObject *v243;
  os_log_type_t v244;
  BOOL v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  void (*v283)(uint64_t, uint64_t, uint64_t);
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  NSObject *v287;
  os_log_type_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  void (*v295)(uint64_t, uint64_t);
  void (*v296)(uint64_t, uint64_t);
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t (*v329)(void);
  uint64_t v330;
  uint64_t v331;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  void (*v336)(uint64_t, uint64_t);
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  void (*v345)(uint64_t, uint64_t);
  void (*v346)(uint64_t, uint64_t);
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void (*v354)(uint64_t, uint64_t);
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void (*v370)(uint64_t, uint64_t, uint64_t);
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void (*v384)(uint64_t, uint64_t, uint64_t);
  uint64_t v385;
  uint64_t v386;
  void (*v387)(uint64_t, uint64_t);
  void (*v388)(uint64_t, uint64_t);
  uint64_t v389;
  void (*v390)(uint64_t, uint64_t);
  uint64_t v391;
  void (*v392)(uint64_t, uint64_t);
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  void (*v396)(uint64_t, uint64_t, uint64_t);
  void (*v397)(uint64_t, uint64_t);
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  void (*v407)(uint64_t, uint64_t);
  void (*v408)(uint64_t, uint64_t);
  void (*v409)(uint64_t, uint64_t);
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  void (*v416)(uint64_t, uint64_t);
  void (*v417)(uint64_t, uint64_t);
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  void (*v421)(uint64_t, uint64_t);
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  void (*v428)(uint64_t, uint64_t);
  uint64_t v429;
  void (*v430)(uint64_t, uint64_t);
  void (*v431)(uint64_t, uint64_t);
  uint64_t v432;
  void (*v433)(uint64_t, uint64_t);
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  void (*v437)(uint64_t, uint64_t, uint64_t);
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  void (*v442)(uint64_t, uint64_t);
  uint64_t v443;
  uint64_t v444;
  NSObject *v445;
  void (*v446)(uint64_t, uint64_t);
  uint64_t v447;
  void (*v448)(uint64_t, uint64_t);
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  void (*v457)(uint64_t, uint64_t);
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461[3];
  uint64_t v462;
  uint64_t v463;

  v462 = v0;
  uint64_t v1 = *(void *)(v0 + 888);
  uint64_t v2 = *(void *)(v0 + 880);
  uint64_t v3 = *(void *)(v0 + 560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    unint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
    uint64_t v5 = *(void *)(v0 + 1024);
    uint64_t v6 = *(void *)(v0 + 776);
    uint64_t v7 = *(void *)(v0 + 728);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v3, &demangling cache variable for type metadata for OnScreenContent?);
    v4(v6, v5, v7);
    uint64_t v8 = Logger.logObject.getter();
    unint64_t v9 = static os_log_type_t.info.getter();
    v445 = v8;
    if (os_log_type_enabled(v8, v9))
    {
      v421 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
      v402 = *(void *)(v0 + 880);
      v412 = *(void *)(v0 + 968);
      v361 = *(void *)(v0 + 728);
      v365 = *(void *)(v0 + 776);
      uint64_t v10 = *(void *)(v0 + 600);
      v368 = *(void *)(v0 + 592);
      v373 = *(void *)(v0 + 608);
      v388 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      v395 = *(void *)(v0 + 360);
      uint64_t v11 = *(void *)(v0 + 344);
      v382 = *(void *)(v0 + 336);
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v461[0] = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      uint64_t v14 = _typeName(_:qualified:)();
      *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v8, v9, "%s.%s Unable to convert the entity to an image, skipping on screen content", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v13, -1, -1);
      MEMORY[0x25336A180](v12, -1, -1);

      v388(v365, v361);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v373, v368);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v395, v382);
      v421(v412, v402);
    }
    else
    {
      id v30 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      v422 = *(void *)(v0 + 968);
      v433 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
      uint64_t v31 = *(void *)(v0 + 776);
      uint64_t v32 = *(void *)(v0 + 728);
      uint64_t v33 = *(void *)(v0 + 608);
      int v34 = *(void *)(v0 + 600);
      uint64_t v35 = *(void *)(v0 + 592);
      v403 = *(void *)(v0 + 360);
      v415 = *(void *)(v0 + 880);
      uint64_t v37 = *(void *)(v0 + 336);
      uint64_t v36 = *(void *)(v0 + 344);

      v30(v31, v32);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v403, v37);
      v433(v422, v415);
    }
LABEL_15:
    v356 = *(void *)(v0 + 1216);
LABEL_16:
    v399 = *(void *)(v0 + 1008);
    goto LABEL_17;
  }
  v396 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
  v431 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
  uint64_t v17 = *(void *)(v0 + 912);
  uint64_t v18 = *(void *)(v0 + 904);
  v413 = *(void *)(v0 + 896);
  v374 = *(void *)(v0 + 800);
  v383 = *(void *)(v0 + 728);
  v389 = *(void *)(v0 + 1024);
  uint64_t v19 = *(void *)(v0 + 520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v17, v3, v2);
  static MetricsUtils.shared.getter();
  static Signpost.imageContextConversion.getter();
  unint64_t v20 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v19, &demangling cache variable for type metadata for OSSignpostID?);
  v396(v374, v389, v383);
  v16(v18, v17, v2);
  v16(v413, v18, v2);
  v431(v18, v2);
  os_log_type_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v397 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
    v384 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    v358 = *(void *)(v0 + 944);
    v375 = *(void *)(v0 + 896);
    uint64_t v23 = *(void *)(v0 + 880);
    v432 = *(void *)(v0 + 800);
    v446 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
    v414 = *(void *)(v0 + 728);
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v461[0] = v25;
    *(_DWORD *)uint64_t v24 = 136315650;
    uint64_t v26 = _typeName(_:qualified:)();
    *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v461);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 22) = 2080;
    v384(v358, v375, v23);
    uint64_t v28 = String.init<A>(describing:)();
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v461);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v397(v375, v23);
    _os_log_impl(&dword_24F9A2000, v21, v22, "%s.%s convertedImage: %s", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v25, -1, -1);
    MEMORY[0x25336A180](v24, -1, -1);

    v446(v432, v414);
  }
  else
  {
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
    int v39 = *(void *)(v0 + 800);
    uint64_t v40 = *(void *)(v0 + 728);
    (*(void (**)(void, void))(v0 + 1048))(*(void *)(v0 + 896), *(void *)(v0 + 880));

    v38(v39, v40);
  }
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t))(v0 + 1072);
  uint64_t v42 = *(_DWORD *)(v0 + 1232);
  uint64_t v43 = *(void *)(v0 + 704);
  uint64_t v44 = *(void *)(v0 + 688);
  OnScreenContent.content.getter();
  if (v41(v43, v44) != v42)
  {
    uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
    uint64_t v71 = *(void *)(v0 + 1024);
    uint64_t v72 = *(void *)(v0 + 784);
    uint64_t v73 = *(void *)(v0 + 728);
    (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 704), *(void *)(v0 + 688));
    v70(v72, v71, v73);
    uint64_t v74 = Logger.logObject.getter();
    uint64_t v75 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v416 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
      v369 = *(void *)(v0 + 880);
      v376 = *(void *)(v0 + 912);
      v362 = *(void *)(v0 + 784);
      v359 = *(void *)(v0 + 728);
      v390 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      v398 = *(void *)(v0 + 608);
      uint64_t v76 = *(void *)(v0 + 600);
      v385 = *(void *)(v0 + 592);
      v435 = *(void *)(v0 + 360);
      v449 = *(void *)(v0 + 968);
      uint64_t v77 = *(void *)(v0 + 344);
      v404 = *(void *)(v0 + 336);
      uint64_t v78 = swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      v461[0] = v79;
      *(_DWORD *)uint64_t v78 = 136315394;
      uint64_t v80 = _typeName(_:qualified:)();
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v78 + 12) = 2080;
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v74, v75, "%s.%s Unexpected OnScreenContent content type, skipping on screen content", (uint8_t *)v78, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v79, -1, -1);
      MEMORY[0x25336A180](v78, -1, -1);

      v390(v362, v359);
      v416(v376, v369);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v398, v385);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v435, v404);
      v416(v449, v369);
    }
    else
    {
      uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
      uint64_t v83 = *(void *)(v0 + 912);
      uint64_t v84 = *(void *)(v0 + 880);
      int v85 = *(void *)(v0 + 784);
      uint64_t v86 = *(void *)(v0 + 728);
      v417 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      v424 = *(void *)(v0 + 608);
      uint64_t v87 = v74;
      uint64_t v88 = *(void *)(v0 + 600);
      v405 = *(void *)(v0 + 592);
      v450 = *(void *)(v0 + 360);
      v455 = *(void *)(v0 + 968);
      uint64_t v89 = *(void *)(v0 + 344);
      v436 = *(void *)(v0 + 336);

      v417(v85, v86);
      v82(v83, v84);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v424, v405);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v450, v436);
      v82(v455, v84);
    }
    goto LABEL_15;
  }
  uint64_t v45 = *(int *)(v0 + 1244);
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1176);
  uint64_t v47 = *(void *)(v0 + 704);
  v447 = *(void *)(v0 + 416);
  v454 = *(void **)(v0 + 1216);
  id v48 = *(void *)(v0 + 392);
  uint64_t v49 = *(void *)(v0 + 352);
  uint64_t v51 = *(void *)(v0 + 328);
  uint64_t v50 = *(void *)(v0 + 336);
  (*(void (**)(uint64_t, void))(v0 + 1160))(v47, *(void *)(v0 + 688));
  v46(v49, v47, v50);
  uint64_t v52 = *(void *)(v51 + v45);
  OnScreenContent.uiMetadata.getter();
  ContentLoaderWithContextRetrieval.getScreenContent(image:representations:uiMetadata:isAppEntity:)(v49, v52, v48, 1, v447);
  if (v454)
  {
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
    uint64_t v54 = *(void *)(v0 + 912);
    os_log_type_t v55 = *(void *)(v0 + 880);
    uint64_t v57 = *(void *)(v0 + 344);
    BOOL v56 = *(void *)(v0 + 352);
    uint64_t v58 = *(void *)(v0 + 336);
    (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 392), *(void *)(v0 + 368));
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    v53(v54, v55);
    (*(void (**)(void, void, void))(v0 + 1032))(*(void *)(v0 + 744), *(void *)(v0 + 1024), *(void *)(v0 + 728));
    uint64_t v59 = v454;
    uint64_t v60 = v454;
    uint64_t v61 = Logger.logObject.getter();
    uint64_t v62 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v434 = *(void *)(v0 + 744);
      v448 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      v423 = *(void *)(v0 + 728);
      unint64_t v63 = swift_slowAlloc();
      uint64_t v64 = (void *)swift_slowAlloc();
      unint64_t v65 = swift_slowAlloc();
      v461[0] = v65;
      *(_DWORD *)unint64_t v63 = 136315650;
      uint64_t v66 = _typeName(_:qualified:)();
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2080;
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 22) = 2112;
      uint64_t v68 = v454;
      uint64_t v69 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v64 = v69;

      _os_log_impl(&dword_24F9A2000, v61, v62, "%s.%s Unable to convert the entity due to an error: %@, skipping on screen content", (uint8_t *)v63, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v64, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v65, -1, -1);
      MEMORY[0x25336A180](v63, -1, -1);

      v448(v434, v423);
    }
    else
    {
      v296 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      uint64_t v297 = *(void *)(v0 + 744);
      uint64_t v298 = *(void *)(v0 + 728);

      v296(v297, v298);
    }
    v442 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
    uint64_t v299 = *(void *)(v0 + 968);
    v300 = *(void *)(v0 + 880);
    uint64_t v301 = *(void *)(v0 + 608);
    uint64_t v302 = *(void *)(v0 + 600);
    char v303 = *(void *)(v0 + 592);
    uint64_t v304 = *(void *)(v0 + 360);
    long long v306 = *(void *)(v0 + 336);
    uint64_t v305 = *(void *)(v0 + 344);
    static MetricsUtils.shared.getter();
    static Signpost.imageContextConversionError.getter();
    dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v302 + 8))(v301, v303);
    (*(void (**)(uint64_t, uint64_t))(v305 + 8))(v304, v306);
    v442(v299, v300);
    v356 = 0;
    goto LABEL_16;
  }
  uint64_t v278 = *(void *)(v0 + 440);
  uint64_t v279 = *(void *)(v0 + 448);
  uint64_t v280 = *(void *)(v0 + 416);
  (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 392), *(void *)(v0 + 368));
  uint64_t v281 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v279 + 48))(v280, 1, v278);
  os_log_type_t v282 = *(void *)(v0 + 416);
  if (v281 == 1)
  {
    uint64_t v283 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
    uint64_t v284 = *(void *)(v0 + 1024);
    uint64_t v285 = *(void *)(v0 + 792);
    uint64_t v286 = *(void *)(v0 + 728);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v282, &demangling cache variable for type metadata for ScreenContent?);
    v283(v285, v284, v286);
    v287 = Logger.logObject.getter();
    v288 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v287, v288))
    {
      v458 = *(void *)(v0 + 968);
      v387 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      v394 = *(void *)(v0 + 880);
      v381 = *(void *)(v0 + 792);
      v360 = *(void *)(v0 + 728);
      v418 = *(void *)(v0 + 608);
      v428 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
      v289 = *(void *)(v0 + 600);
      v400 = *(void *)(v0 + 912);
      v410 = *(void *)(v0 + 592);
      v441 = *(void *)(v0 + 360);
      v290 = *(void *)(v0 + 344);
      v364 = *(void *)(v0 + 352);
      v357 = *(void *)(v0 + 336);
      char v291 = swift_slowAlloc();
      v292 = swift_slowAlloc();
      v461[0] = v292;
      *(_DWORD *)char v291 = 136315394;
      uint64_t v293 = _typeName(_:qualified:)();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v293, v294, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v291 + 12) = 2080;
      *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v287, v288, "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content", (uint8_t *)v291, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v292, -1, -1);
      MEMORY[0x25336A180](v291, -1, -1);

      v387(v381, v360);
      uint64_t v295 = *(void (**)(uint64_t, uint64_t))(v290 + 8);
      v295(v364, v357);
      v428(v400, v394);
      (*(void (**)(uint64_t, uint64_t))(v289 + 8))(v418, v410);
      v295(v441, v357);
      v428(v458, v394);
    }
    else
    {
      v346 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
      v460 = *(void *)(v0 + 968);
      v347 = *(void *)(v0 + 880);
      v348 = *(void *)(v0 + 792);
      v349 = *(void *)(v0 + 728);
      v420 = *(void *)(v0 + 608);
      v430 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
      v350 = *(void *)(v0 + 600);
      v401 = *(void *)(v0 + 912);
      v411 = *(void *)(v0 + 592);
      v351 = *(void *)(v0 + 352);
      v444 = *(void *)(v0 + 360);
      v353 = *(void *)(v0 + 336);
      v352 = *(void *)(v0 + 344);

      v346(v348, v349);
      v354 = *(void (**)(uint64_t, uint64_t))(v352 + 8);
      v354(v351, v353);
      v430(v401, v347);
      (*(void (**)(uint64_t, uint64_t))(v350 + 8))(v420, v411);
      v354(v444, v353);
      v430(v460, v347);
    }
    v356 = 0;
    goto LABEL_16;
  }
  uint64_t v331 = *(void *)(v0 + 472);
  uint64_t v330 = *(void *)(v0 + 480);
  outlined init with take of ContentLoaderWithContextRetrieval(v282, v330, type metadata accessor for ScreenContent);
  outlined init with copy of ContentLoaderWithContextRetrieval(v330, v331, type metadata accessor for ScreenContent);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v399 = *(void *)(v0 + 1008);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    v399 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v399 + 16) + 1, 1, v399);
  }
  uint64_t v334 = *(void *)(v399 + 16);
  v333 = *(void *)(v399 + 24);
  uint64_t v335 = v334 + 1;
  if (v334 >= v333 >> 1)
  {
    v355 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v333 > 1, v334 + 1, 1, v399);
    uint64_t v335 = v334 + 1;
    v399 = v355;
  }
  v336 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
  v337 = *(void *)(v0 + 880);
  v453 = *(void *)(v0 + 608);
  v459 = *(void *)(v0 + 968);
  v338 = *(void *)(v0 + 600);
  v443 = *(void *)(v0 + 592);
  v339 = *(void *)(v0 + 472);
  v340 = *(void *)(v0 + 480);
  v341 = *(void *)(v0 + 448);
  v342 = *(void *)(v0 + 352);
  v419 = *(void *)(v0 + 912);
  v429 = *(void *)(v0 + 360);
  v343 = *(void *)(v0 + 336);
  v344 = *(void *)(v0 + 344);
  *(void *)(v399 + 16) = v335;
  outlined init with take of ContentLoaderWithContextRetrieval(v339, v399+ ((*(unsigned __int8 *)(v341 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v341 + 80))+ *(void *)(v341 + 72) * v334, type metadata accessor for ScreenContent);
  outlined destroy of ScreenContent(v340, type metadata accessor for ScreenContent);
  v345 = *(void (**)(uint64_t, uint64_t))(v344 + 8);
  v345(v342, v343);
  v336(v419, v337);
  (*(void (**)(uint64_t, uint64_t))(v338 + 8))(v453, v443);
  v345(v429, v343);
  v336(v459, v337);
  v356 = 0;
LABEL_17:
  os_log_type_t v90 = *(void *)(v0 + 1000) + 1;
  if (v90 == *(void *)(v0 + 976))
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v91 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v91(v399);
  }
  while (1)
  {
    *(void *)(v0 + 1008) = v399;
    *(void *)(v0 + 1000) = v90;
    uint64_t v97 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 992);
    uint64_t v98 = *(void *)(v0 + 968);
    uint64_t v99 = *(void *)(v0 + 880);
    unint64_t v100 = *(void *)(v0 + 320)
         + ((*(unsigned __int8 *)(v0 + 1224) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1224))
         + *(void *)(v0 + 984) * v90;
    *(void *)(v0 + 1016) = (*(void *)(v0 + 888) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v97(v98, v100, v99);
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    uint64_t v102 = *(void *)(v0 + 968);
    uint64_t v103 = *(void *)(v0 + 960);
    v456 = *(void *)(v0 + 952);
    uint64_t v104 = *(void *)(v0 + 888);
    uint64_t v105 = *(void *)(v0 + 880);
    uint64_t v106 = *(void *)(v0 + 872);
    uint64_t v107 = *(void *)(v0 + 736);
    char v108 = __swift_project_value_buffer(*(void *)(v0 + 728), (uint64_t)static Logger.contextRetrieval);
    *(void *)(v0 + 1024) = v108;
    char v109 = *(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16);
    *(void *)(v0 + 1032) = v109;
    *(void *)(v0 + 1040) = (v107 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v425 = v108;
    v437 = v109;
    ((void (*)(uint64_t))v109)(v106);
    v101(v103, v102, v105);
    v101(v456, v103, v105);
    uint64_t v110 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
    *(void *)(v0 + 1048) = v110;
    *(void *)(v0 + 1056) = (v104 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v110(v103, v105);
    os_log_type_t v111 = Logger.logObject.getter();
    BOOL v112 = static os_log_type_t.debug.getter();
    v457 = v110;
    if (os_log_type_enabled(v111, v112))
    {
      v366 = *(void *)(v0 + 952);
      v370 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      v363 = *(void *)(v0 + 944);
      uint64_t v113 = *(void *)(v0 + 880);
      v406 = *(void *)(v0 + 872);
      v386 = *(void *)(v0 + 736);
      v391 = *(void *)(v0 + 728);
      uint64_t v114 = swift_slowAlloc();
      v377 = swift_slowAlloc();
      v461[0] = v377;
      *(_DWORD *)uint64_t v114 = 136315650;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v115 = _typeName(_:qualified:)();
      *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v114 + 12) = 2080;
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v114 + 22) = 2080;
      v370(v363, v366, v113);
      uint64_t v117 = String.init<A>(describing:)();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v110(v366, v113);
      _os_log_impl(&dword_24F9A2000, v111, v112, "%s.%s current context retrieval on screen content: %s", (uint8_t *)v114, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v377, -1, -1);
      MEMORY[0x25336A180](v114, -1, -1);

      uint64_t v119 = *(void (**)(uint64_t, uint64_t))(v386 + 8);
      v119(v406, v391);
    }
    else
    {
      uint64_t v120 = *(void *)(v0 + 872);
      unint64_t v121 = *(void *)(v0 + 736);
      uint64_t v122 = *(void *)(v0 + 728);
      v110(*(void *)(v0 + 952), *(void *)(v0 + 880));

      uint64_t v119 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
      v119(v120, v122);
    }
    *(void *)(v0 + 1064) = v119;
    os_log_type_t v123 = *(_DWORD *)(v0 + 1228);
    BOOL v124 = *(void *)(v0 + 720);
    uint64_t v125 = *(void *)(v0 + 696);
    uint64_t v126 = *(void *)(v0 + 688);
    OnScreenContent.content.getter();
    uint64_t v127 = *(uint64_t (**)(uint64_t, uint64_t))(v125 + 88);
    *(void *)(v0 + 1072) = v127;
    *(void *)(v0 + 1080) = (v125 + 88) & 0xFFFFFFFFFFFFLL | 0xA3B5000000000000;
    uint64_t v128 = v127(v124, v126);
    if (v128 != v123) {
      break;
    }
    v407 = v119;
    uint64_t v129 = *(void *)(v0 + 864);
    uint64_t v130 = *(void *)(v0 + 728);
    uint64_t v131 = *(void *)(v0 + 720);
    unint64_t v132 = *(void *)(v0 + 696);
    uint64_t v133 = *(void *)(v0 + 688);
    os_log_type_t v134 = *(void *)(v0 + 680);
    BOOL v135 = *(void *)(v0 + 672);
    uint64_t v136 = *(void *)(v0 + 664);
    uint64_t v137 = *(void **)(v0 + 648);
    uint64_t v138 = *(void *)(v0 + 640);
    uint64_t v139 = *(void (**)(uint64_t, uint64_t))(v132 + 96);
    *(void *)(v0 + 1088) = v139;
    *(void *)(v0 + 1096) = (v132 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
    v139(v131, v133);
    uint64_t v140 = (void (*)(uint64_t, uint64_t, uint64_t))v137[4];
    *(void *)(v0 + 1104) = v140;
    *(void *)(v0 + 1112) = (unint64_t)(v137 + 4) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v140(v134, v131, v138);
    v437(v129, v425, v130);
    uint64_t v141 = (void (*)(uint64_t, uint64_t, uint64_t))v137[2];
    v141(v135, v134, v138);
    v141(v136, v135, v138);
    uint64_t v142 = (void (*)(uint64_t, uint64_t))v137[1];
    *(void *)(v0 + 1120) = v142;
    *(void *)(v0 + 1128) = (unint64_t)(v137 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v142(v135, v138);
    uint64_t v143 = Logger.logObject.getter();
    unint64_t v144 = static os_log_type_t.debug.getter();
    uint64_t v145 = os_log_type_enabled(v143, v144);
    uint64_t v146 = *(void *)(v0 + 864);
    uint64_t v147 = *(void *)(v0 + 728);
    uint64_t v148 = *(void *)(v0 + 664);
    v392 = v142;
    if (v145)
    {
      v367 = *(void *)(v0 + 640);
      int v149 = swift_slowAlloc();
      v371 = v147;
      uint64_t v150 = swift_slowAlloc();
      v461[0] = v150;
      *(_DWORD *)int v149 = 136315650;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v151 = _typeName(_:qualified:)();
      *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v152, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v149 + 12) = 2080;
      *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v149 + 22) = 2080;
      OnScreenContent.Document.paginationInfo.getter();
      uint64_t v153 = String.init<A>(describing:)();
      *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v154, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v392(v148, v367);
      _os_log_impl(&dword_24F9A2000, v143, v144, "%s.%s current document pagination info: %s", (uint8_t *)v149, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v150, -1, -1);
      MEMORY[0x25336A180](v149, -1, -1);

      v407(v146, v371);
    }
    else
    {
      v142(v148, *(void *)(v0 + 640));

      v407(v146, v147);
    }
    uint64_t v192 = *(void *)(v0 + 600);
    uint64_t v193 = *(void *)(v0 + 592);
    uint64_t v194 = *(void *)(v0 + 584);
    OnScreenContent.Document.entity.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v192 + 48))(v194, 1, v193) != 1)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 616), *(void *)(v0 + 584), *(void *)(v0 + 592));
      if ((ContentLoaderWithContextRetrieval.shouldIgnoreEntity(_:)() & 1) == 0)
      {
        uint64_t v318 = *(unsigned int *)(v0 + 1240);
        char v319 = *(uint64_t **)(v0 + 552);
        unint64_t v320 = *(void *)(v0 + 536);
        char v321 = *(void *)(v0 + 528);
        *(void *)(v0 + 1136) = type metadata accessor for MetricsUtils();
        static MetricsUtils.shared.getter();
        static Signpost.documentContextConversion.getter();
        dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>);
        type metadata accessor for UTType();
        long long v322 = swift_allocObject();
        *(_OWORD *)(v322 + 16) = xmmword_24FA3E1D0;
        static UTType.pdf.getter();
        *char v319 = v322;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v320 + 104))(v319, v318, v321);
        long long v323 = (void *)swift_task_alloc();
        *(void *)(v0 + 1144) = v323;
        *long long v323 = v0;
        v323[1] = ContentLoaderWithContextRetrieval.load(_:);
        uint64_t v315 = *(void *)(v0 + 616);
        unint64_t v316 = *(void *)(v0 + 568);
        uint64_t v317 = *(void *)(v0 + 552);
        goto LABEL_77;
      }
      v437(*(void *)(v0 + 856), v425, *(void *)(v0 + 728));
      unint64_t v225 = Logger.logObject.getter();
      uint64_t v226 = static os_log_type_t.info.getter();
      uint64_t v227 = os_log_type_enabled(v225, v226);
      uint64_t v228 = *(void *)(v0 + 968);
      v229 = *(void *)(v0 + 880);
      v379 = *(void *)(v0 + 856);
      uint64_t v230 = *(void *)(v0 + 728);
      uint64_t v231 = *(void *)(v0 + 680);
      v440 = *(void *)(v0 + 616);
      v452 = *(void *)(v0 + 640);
      uint64_t v232 = *(void *)(v0 + 600);
      v427 = *(void *)(v0 + 592);
      if (v227)
      {
        uint64_t v93 = swift_slowAlloc();
        uint64_t v94 = swift_slowAlloc();
        v461[0] = v94;
        *(_DWORD *)uint64_t v93 = 136315394;
        type metadata accessor for ContentLoaderWithContextRetrieval();
        uint64_t v95 = _typeName(_:qualified:)();
        *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, v461);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v93 + 12) = 2080;
        *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v225, v226, "%s.%s should ignore entity, skipping on screen content", (uint8_t *)v93, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v94, -1, -1);
        MEMORY[0x25336A180](v93, -1, -1);
      }

      v407(v379, v230);
      (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v440, v427);
      v392(v231, v452);
      uint64_t v233 = v228;
      uint64_t v234 = v229;
      goto LABEL_22;
    }
    uint64_t v195 = *(void *)(v0 + 400);
    uint64_t v196 = *(void *)(v0 + 368);
    uint64_t v197 = *(void *)(v0 + 376);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 584), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
    OnScreenContent.uiMetadata.getter();
    uint64_t v198 = ContentLoaderWithContextRetrieval.shouldIgnoreDocument(metadata:)();
    uint64_t v199 = *(void (**)(uint64_t, uint64_t))(v197 + 8);
    v199(v195, v196);
    if (v198)
    {
      v437(*(void *)(v0 + 816), v425, *(void *)(v0 + 728));
      uint64_t v200 = Logger.logObject.getter();
      uint64_t v201 = static os_log_type_t.info.getter();
      uint64_t v202 = os_log_type_enabled(v200, v201);
      uint64_t v203 = *(void *)(v0 + 968);
      uint64_t v204 = *(void *)(v0 + 880);
      uint64_t v205 = *(void *)(v0 + 816);
      uint64_t v206 = *(void *)(v0 + 728);
      uint64_t v207 = *(void *)(v0 + 680);
      uint64_t v208 = *(void *)(v0 + 640);
      if (!v202)
      {

        v407(v205, v206);
        v392(v207, v208);
        uint64_t v233 = v203;
        uint64_t v234 = v204;
        goto LABEL_22;
      }
      v439 = *(void *)(v0 + 640);
      uint64_t v209 = swift_slowAlloc();
      uint64_t v210 = swift_slowAlloc();
      v461[0] = v210;
      *(_DWORD *)uint64_t v209 = 136315394;
      v426 = v207;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v211 = _typeName(_:qualified:)();
      v378 = v203;
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v211, v212, v461);
      v372 = v204;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v209 + 12) = 2080;
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v200, v201, "%s.%s should ignore document, skipping on screen content", (uint8_t *)v209, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v210, -1, -1);
      MEMORY[0x25336A180](v209, -1, -1);

      uint64_t v213 = v205;
    }
    else
    {
      uint64_t v235 = *(void *)(v0 + 448);
      v380 = *(void *)(v0 + 440);
      uint64_t v236 = *(unsigned char **)(v0 + 424);
      uint64_t v237 = *(void *)(v0 + 400);
      uint64_t v238 = *(void *)(v0 + 368);
      OnScreenContent.uiMetadata.getter();
      ContentLoaderWithContextRetrieval.getScreenContent(document:uiMetadata:isAppEntity:)(v237, 0, v236);
      v199(v237, v238);
      uint64_t v239 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v235 + 48))(v236, 1, v380);
      uint64_t v240 = *(void *)(v0 + 424);
      if (v239 != 1)
      {
        uint64_t v267 = *(void *)(v0 + 488);
        uint64_t v268 = *(void *)(v0 + 496);
        outlined init with take of ContentLoaderWithContextRetrieval(v240, v268, type metadata accessor for ScreenContent);
        outlined init with copy of ContentLoaderWithContextRetrieval(v268, v267, type metadata accessor for ScreenContent);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v399 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v399 + 16) + 1, 1, v399);
        }
        uint64_t v270 = *(void *)(v399 + 16);
        uint64_t v269 = *(void *)(v399 + 24);
        if (v270 >= v269 >> 1) {
          v399 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v269 > 1, v270 + 1, 1, v399);
        }
        uint64_t v271 = *(void *)(v0 + 968);
        uint64_t v272 = *(void *)(v0 + 880);
        uint64_t v273 = *(void *)(v0 + 680);
        uint64_t v274 = *(void *)(v0 + 640);
        uint64_t v275 = *(void *)(v0 + 488);
        char v276 = *(void *)(v0 + 496);
        uint64_t v277 = *(void *)(v0 + 448);
        *(void *)(v399 + 16) = v270 + 1;
        outlined init with take of ContentLoaderWithContextRetrieval(v275, v399+ ((*(unsigned __int8 *)(v277 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v277 + 80))+ *(void *)(v277 + 72) * v270, type metadata accessor for ScreenContent);
        outlined destroy of ScreenContent(v276, type metadata accessor for ScreenContent);
        v392(v273, v274);
        v457(v271, v272);
        goto LABEL_23;
      }
      uint64_t v241 = *(void *)(v0 + 808);
      uint64_t v242 = *(void *)(v0 + 728);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v240, &demangling cache variable for type metadata for ScreenContent?);
      v437(v241, v425, v242);
      uint64_t v243 = Logger.logObject.getter();
      uint64_t v244 = static os_log_type_t.info.getter();
      uint64_t v245 = os_log_type_enabled(v243, v244);
      uint64_t v246 = *(void *)(v0 + 968);
      uint64_t v247 = *(void *)(v0 + 880);
      uint64_t v248 = *(void *)(v0 + 808);
      uint64_t v206 = *(void *)(v0 + 728);
      uint64_t v249 = *(void *)(v0 + 680);
      uint64_t v250 = *(void *)(v0 + 640);
      if (!v245)
      {

        v407(v248, v206);
        v392(v249, v250);
        uint64_t v233 = v246;
        uint64_t v234 = v247;
        goto LABEL_22;
      }
      v439 = *(void *)(v0 + 640);
      uint64_t v251 = swift_slowAlloc();
      uint64_t v252 = swift_slowAlloc();
      v461[0] = v252;
      *(_DWORD *)uint64_t v251 = 136315394;
      v426 = v249;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v253 = _typeName(_:qualified:)();
      v378 = v246;
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v253, v254, v461);
      v372 = v247;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v251 + 12) = 2080;
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v243, v244, "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content", (uint8_t *)v251, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v252, -1, -1);
      MEMORY[0x25336A180](v251, -1, -1);

      uint64_t v213 = v248;
    }
    v407(v213, v206);
    v392(v426, v439);
    uint64_t v234 = v372;
    uint64_t v233 = v378;
LABEL_22:
    v457(v233, v234);
LABEL_23:
    os_log_type_t v90 = *(void *)(v0 + 1000) + 1;
    if (v90 == *(void *)(v0 + 976)) {
      goto LABEL_18;
    }
  }
  if (v128 != *(_DWORD *)(v0 + 1232))
  {
    v437(*(void *)(v0 + 760), v425, *(void *)(v0 + 728));
    uint64_t v214 = Logger.logObject.getter();
    uint64_t v215 = static os_log_type_t.info.getter();
    uint64_t v216 = os_log_type_enabled(v214, v215);
    uint64_t v217 = *(void *)(v0 + 968);
    uint64_t v218 = *(void *)(v0 + 880);
    uint64_t v219 = *(void *)(v0 + 760);
    uint64_t v220 = *(void *)(v0 + 728);
    if (v216)
    {
      uint64_t v221 = swift_slowAlloc();
      v409 = v119;
      uint64_t v222 = swift_slowAlloc();
      v461[0] = v222;
      *(_DWORD *)uint64_t v221 = 136315394;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      int v223 = _typeName(_:qualified:)();
      *(void *)(v221 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v223, v224, v461);
      swift_bridgeObjectRelease();
      *(_WORD *)(v221 + 12) = 2080;
      *(void *)(v221 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
      _os_log_impl(&dword_24F9A2000, v214, v215, "%s.%s Unexpected OnScreenContent content type, skipping on screen content", (uint8_t *)v221, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v222, -1, -1);
      MEMORY[0x25336A180](v221, -1, -1);

      v409(v219, v220);
    }
    else
    {

      v119(v219, v220);
    }
    v457(v217, v218);
    (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 720), *(void *)(v0 + 688));
    goto LABEL_23;
  }
  BOOL v155 = *(void *)(v0 + 720);
  uint64_t v156 = *(void *)(v0 + 696);
  uint64_t v157 = *(void *)(v0 + 688);
  uint64_t v158 = *(void *)(v0 + 600);
  uint64_t v159 = *(void *)(v0 + 592);
  uint64_t v160 = *(void *)(v0 + 576);
  uint64_t v161 = *(void *)(v0 + 360);
  uint64_t v162 = *(void *)(v0 + 336);
  unint64_t v163 = *(void *)(v0 + 344);
  uint64_t v164 = *(void (**)(uint64_t, uint64_t))(v156 + 96);
  *(void *)(v0 + 1160) = v164;
  *(void *)(v0 + 1168) = (v156 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
  v164(v155, v157);
  uint64_t v165 = *(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 32);
  *(void *)(v0 + 1176) = v165;
  *(void *)(v0 + 1184) = (v163 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v165(v161, v155, v162);
  OnScreenContent.Image.entity.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v160, 1, v159) != 1)
  {
    v307 = *(unsigned int *)(v0 + 1236);
    uint64_t v308 = *(void **)(v0 + 544);
    uint64_t v309 = *(void *)(v0 + 536);
    v310 = *(void *)(v0 + 528);
    v311 = *(void *)(v0 + 328);
    (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 608), *(void *)(v0 + 576), *(void *)(v0 + 592));
    *(void *)(v0 + 1192) = type metadata accessor for MetricsUtils();
    static MetricsUtils.shared.getter();
    static Signpost.imageContextConversion.getter();
    dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
    swift_release();
    uint64_t v312 = type metadata accessor for ContentLoaderWithContextRetrieval();
    *(void *)(v0 + 1200) = v312;
    v313 = *(int *)(v312 + 36);
    *(_DWORD *)(v0 + 1244) = v313;
    *uint64_t v308 = *(void *)(v311 + v313);
    (*(void (**)(void *, uint64_t, uint64_t))(v309 + 104))(v308, v307, v310);
    swift_bridgeObjectRetain();
    uint64_t v314 = (void *)swift_task_alloc();
    *(void *)(v0 + 1208) = v314;
    *uint64_t v314 = v0;
    v314[1] = ContentLoaderWithContextRetrieval.load(_:);
    uint64_t v315 = *(void *)(v0 + 608);
    unint64_t v316 = *(void *)(v0 + 560);
    uint64_t v317 = *(void *)(v0 + 544);
LABEL_77:
    return MEMORY[0x270F3F1D0](v316, v315, v317);
  }
  unint64_t v166 = *(void *)(v0 + 408);
  unint64_t v167 = *(void *)(v0 + 384);
  unint64_t v168 = *(void *)(v0 + 360);
  uint64_t v169 = *(void *)(v0 + 328);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 576), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
  uint64_t v170 = *(void *)(v169 + *(int *)(type metadata accessor for ContentLoaderWithContextRetrieval() + 36));
  OnScreenContent.uiMetadata.getter();
  ContentLoaderWithContextRetrieval.getScreenContent(image:representations:uiMetadata:isAppEntity:)(v168, v170, v167, 0, v166);
  if (!v356)
  {
    uint64_t v171 = *(void *)(v0 + 440);
    uint64_t v172 = *(void *)(v0 + 448);
    uint64_t v173 = *(void *)(v0 + 408);
    (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 384), *(void *)(v0 + 368));
    uint64_t v174 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v172 + 48))(v173, 1, v171);
    uint64_t v175 = *(void *)(v0 + 408);
    if (v174 == 1)
    {
      v408 = v119;
      uint64_t v176 = *(void *)(v0 + 768);
      uint64_t v177 = *(void *)(v0 + 728);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v175, &demangling cache variable for type metadata for ScreenContent?);
      v437(v176, v425, v177);
      uint64_t v178 = Logger.logObject.getter();
      uint64_t v179 = static os_log_type_t.info.getter();
      unint64_t v180 = os_log_type_enabled(v178, v179);
      unint64_t v181 = *(void *)(v0 + 968);
      unint64_t v182 = *(void *)(v0 + 880);
      uint64_t v183 = *(void *)(v0 + 728);
      uint64_t v184 = *(void *)(v0 + 360);
      uint64_t v185 = *(void *)(v0 + 344);
      v438 = *(void *)(v0 + 768);
      v451 = *(void *)(v0 + 336);
      if (v180)
      {
        uint64_t v186 = swift_slowAlloc();
        v393 = v181;
        uint64_t v187 = swift_slowAlloc();
        v461[0] = v187;
        *(_DWORD *)uint64_t v186 = 136315394;
        uint64_t v188 = _typeName(_:qualified:)();
        *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v188, v189, v461);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v186 + 12) = 2080;
        *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v461);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v178, v179, "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content", (uint8_t *)v186, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v187, -1, -1);
        MEMORY[0x25336A180](v186, -1, -1);

        v408(v438, v183);
        (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v184, v451);
        uint64_t v191 = v182;
        uint64_t v190 = v393;
      }
      else
      {

        v408(v438, v183);
        (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v184, v451);
        uint64_t v190 = v181;
        uint64_t v191 = v182;
      }
      v457(v190, v191);
      v356 = 0;
    }
    else
    {
      uint64_t v255 = *(void *)(v0 + 456);
      uint64_t v256 = *(void *)(v0 + 464);
      outlined init with take of ContentLoaderWithContextRetrieval(v175, v256, type metadata accessor for ScreenContent);
      outlined init with copy of ContentLoaderWithContextRetrieval(v256, v255, type metadata accessor for ScreenContent);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v399 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v399 + 16) + 1, 1, v399);
      }
      uint64_t v258 = *(void *)(v399 + 16);
      uint64_t v257 = *(void *)(v399 + 24);
      if (v258 >= v257 >> 1) {
        v399 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v257 > 1, v258 + 1, 1, v399);
      }
      int v259 = *(void *)(v0 + 968);
      uint64_t v260 = *(void *)(v0 + 880);
      uint64_t v261 = *(void *)(v0 + 456);
      uint64_t v262 = *(void *)(v0 + 464);
      uint64_t v263 = *(void *)(v0 + 448);
      long long v264 = *(void *)(v0 + 360);
      unsigned int v265 = *(void *)(v0 + 336);
      uint64_t v266 = *(void *)(v0 + 344);
      *(void *)(v399 + 16) = v258 + 1;
      outlined init with take of ContentLoaderWithContextRetrieval(v261, v399+ ((*(unsigned __int8 *)(v263 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80))+ *(void *)(v263 + 72) * v258, type metadata accessor for ScreenContent);
      outlined destroy of ScreenContent(v262, type metadata accessor for ScreenContent);
      (*(void (**)(uint64_t, uint64_t))(v266 + 8))(v264, v265);
      v457(v259, v260);
      v356 = 0;
    }
    goto LABEL_23;
  }
  uint64_t v324 = *(void *)(v0 + 968);
  uint64_t v325 = *(void *)(v0 + 880);
  uint64_t v326 = *(void *)(v0 + 360);
  long long v327 = *(void *)(v0 + 336);
  v328 = *(void *)(v0 + 344);
  (*(void (**)(void))(*(void *)(v0 + 376) + 8))();
  (*(void (**)(uint64_t, uint64_t))(v328 + 8))(v326, v327);
  v457(v324, v325);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v329 = *(uint64_t (**)(void))(v0 + 8);
  return v329();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(unint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  void (*v77)(uint64_t, uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t, uint64_t);
  void (*v79)(uint64_t, uint64_t);
  NSObject *v80;
  os_log_type_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  void (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  void (*v134)(uint64_t, uint64_t);
  NSObject *v135;
  os_log_type_t v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  const char *v148;
  NSObject *v149;
  os_log_type_t v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned char *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  os_log_type_t v174;
  BOOL v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void (*v234)(uint64_t, uint64_t);
  void (*v235)(uint64_t, uint64_t);
  void *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void (*v242)(uint64_t, uint64_t);
  void (*v243)(uint64_t, uint64_t, uint64_t);
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(uint64_t, uint64_t);
  void (*v252)(uint64_t, uint64_t);
  void (*v253)(uint64_t, uint64_t);
  uint64_t v254;
  uint64_t v255[3];
  uint64_t v256;
  uint64_t v257;

  uint64_t v256 = v0;
  uint64_t v1 = *(void **)(v0 + 1152);
  (*(void (**)(void, void, void))(v0 + 1032))(*(void *)(v0 + 752), *(void *)(v0 + 1024), *(void *)(v0 + 728));
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  unint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 1152);
    uint64_t v250 = *(void *)(v0 + 752);
    uint64_t v253 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
    uint64_t v247 = *(void *)(v0 + 728);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v236 = (void *)swift_slowAlloc();
    uint64_t v241 = swift_slowAlloc();
    v255[0] = v241;
    *(_DWORD *)uint64_t v7 = 136315650;
    type metadata accessor for ContentLoaderWithContextRetrieval();
    uint64_t v8 = _typeName(_:qualified:)();
    *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 22) = 2112;
    uint64_t v10 = v6;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 176) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v236 = v11;

    _os_log_impl(&dword_24F9A2000, v4, v5, "%s.%s Unable to convert the entity due to an error: %@, skipping on screen content", (uint8_t *)v7, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v236, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v241, -1, -1);
    MEMORY[0x25336A180](v7, -1, -1);

    v253(v250, v247);
  }
  else
  {
    uint64_t v12 = *(void **)(v0 + 1152);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
    uint64_t v14 = *(void *)(v0 + 752);
    uint64_t v15 = *(void *)(v0 + 728);

    v13(v14, v15);
  }
  uint64_t v16 = *(void **)(v0 + 1152);
  uint64_t v242 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
  uint64_t v251 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
  uint64_t v17 = *(void *)(v0 + 968);
  uint64_t v18 = *(void *)(v0 + 880);
  uint64_t v19 = *(void *)(v0 + 680);
  unint64_t v20 = *(void *)(v0 + 640);
  os_log_type_t v21 = *(void *)(v0 + 616);
  uint64_t v22 = *(void *)(v0 + 600);
  uint64_t v23 = *(void *)(v0 + 592);
  static MetricsUtils.shared.getter();
  static Signpost.documentContextConversionError.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  v242(v19, v20);
  v251(v17, v18);
  uint64_t v237 = *(void *)(v0 + 1008);
  uint64_t v24 = *(void *)(v0 + 1000) + 1;
  if (v24 == *(void *)(v0 + 976))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v25(v237);
  }
  while (1)
  {
    *(void *)(v0 + 1008) = v237;
    *(void *)(v0 + 1000) = v24;
    uint64_t v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 992);
    uint64_t v33 = *(void *)(v0 + 968);
    int v34 = *(void *)(v0 + 880);
    uint64_t v35 = *(void *)(v0 + 320)
        + ((*(unsigned __int8 *)(v0 + 1224) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1224))
        + *(void *)(v0 + 984) * v24;
    *(void *)(v0 + 1016) = (*(void *)(v0 + 888) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v32(v33, v35, v34);
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    uint64_t v37 = *(void *)(v0 + 968);
    uint64_t v38 = *(void *)(v0 + 960);
    char v254 = *(void *)(v0 + 952);
    int v39 = *(void *)(v0 + 888);
    uint64_t v40 = *(void *)(v0 + 880);
    uint64_t v41 = *(void *)(v0 + 872);
    uint64_t v42 = *(void *)(v0 + 736);
    uint64_t v43 = __swift_project_value_buffer(*(void *)(v0 + 728), (uint64_t)static Logger.contextRetrieval);
    *(void *)(v0 + 1024) = v43;
    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
    *(void *)(v0 + 1032) = v44;
    *(void *)(v0 + 1040) = (v42 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v238 = v43;
    uint64_t v243 = v44;
    ((void (*)(uint64_t))v44)(v41);
    v36(v38, v37, v40);
    v36(v254, v38, v40);
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    *(void *)(v0 + 1048) = v45;
    *(void *)(v0 + 1056) = (v39 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v45(v38, v40);
    uint64_t v46 = Logger.logObject.getter();
    uint64_t v47 = static os_log_type_t.debug.getter();
    uint64_t v252 = v45;
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v219 = *(void *)(v0 + 952);
      int v223 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      id v48 = *(void *)(v0 + 944);
      uint64_t v49 = *(void *)(v0 + 880);
      uint64_t v228 = *(void *)(v0 + 736);
      uint64_t v231 = *(void *)(v0 + 728);
      uint64_t v233 = *(void *)(v0 + 872);
      uint64_t v50 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      v255[0] = v51;
      *(_DWORD *)uint64_t v50 = 136315650;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v52 = _typeName(_:qualified:)();
      *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2080;
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 22) = 2080;
      v223(v48, v219, v49);
      uint64_t v54 = String.init<A>(describing:)();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v252(v219, v49);
      _os_log_impl(&dword_24F9A2000, v46, v47, "%s.%s current context retrieval on screen content: %s", (uint8_t *)v50, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v51, -1, -1);
      MEMORY[0x25336A180](v50, -1, -1);

      BOOL v56 = *(void (**)(uint64_t, uint64_t))(v228 + 8);
      v56(v233, v231);
    }
    else
    {
      uint64_t v57 = *(void *)(v0 + 872);
      uint64_t v58 = *(void *)(v0 + 736);
      uint64_t v59 = *(void *)(v0 + 728);
      v45(*(void *)(v0 + 952), *(void *)(v0 + 880));

      BOOL v56 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v56(v57, v59);
    }
    *(void *)(v0 + 1064) = v56;
    uint64_t v60 = *(_DWORD *)(v0 + 1228);
    uint64_t v61 = *(void *)(v0 + 720);
    uint64_t v62 = *(void *)(v0 + 696);
    unint64_t v63 = *(void *)(v0 + 688);
    OnScreenContent.content.getter();
    uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t))(v62 + 88);
    *(void *)(v0 + 1072) = v64;
    *(void *)(v0 + 1080) = (v62 + 88) & 0xFFFFFFFFFFFFLL | 0xA3B5000000000000;
    unint64_t v65 = v64(v61, v63);
    if (v65 == v60) {
      break;
    }
    if (v65 != *(_DWORD *)(v0 + 1232))
    {
      v243(*(void *)(v0 + 760), v238, *(void *)(v0 + 728));
      int v149 = Logger.logObject.getter();
      uint64_t v150 = static os_log_type_t.info.getter();
      uint64_t v151 = os_log_type_enabled(v149, v150);
      uint64_t v152 = *(void *)(v0 + 968);
      uint64_t v153 = *(void *)(v0 + 880);
      os_log_type_t v154 = *(void *)(v0 + 760);
      BOOL v155 = *(void *)(v0 + 728);
      if (v151)
      {
        uint64_t v156 = swift_slowAlloc();
        uint64_t v157 = swift_slowAlloc();
        v255[0] = v157;
        *(_DWORD *)uint64_t v156 = 136315394;
        type metadata accessor for ContentLoaderWithContextRetrieval();
        uint64_t v158 = _typeName(_:qualified:)();
        *(void *)(v156 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, v159, v255);
        swift_bridgeObjectRelease();
        *(_WORD *)(v156 + 12) = 2080;
        *(void *)(v156 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v255);
        _os_log_impl(&dword_24F9A2000, v149, v150, "%s.%s Unexpected OnScreenContent content type, skipping on screen content", (uint8_t *)v156, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v157, -1, -1);
        MEMORY[0x25336A180](v156, -1, -1);
      }

      v56(v154, v155);
      v252(v152, v153);
      (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 720), *(void *)(v0 + 688));
      goto LABEL_11;
    }
    BOOL v91 = *(void *)(v0 + 720);
    uint64_t v92 = *(void *)(v0 + 696);
    uint64_t v93 = *(void *)(v0 + 688);
    uint64_t v94 = *(void *)(v0 + 600);
    uint64_t v95 = *(void *)(v0 + 592);
    uint64_t v96 = *(void *)(v0 + 576);
    uint64_t v97 = *(void *)(v0 + 360);
    uint64_t v98 = *(void *)(v0 + 336);
    uint64_t v99 = *(void *)(v0 + 344);
    unint64_t v100 = *(void (**)(uint64_t, uint64_t))(v92 + 96);
    *(void *)(v0 + 1160) = v100;
    *(void *)(v0 + 1168) = (v92 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
    v100(v91, v93);
    uint64_t v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 32);
    *(void *)(v0 + 1176) = v101;
    *(void *)(v0 + 1184) = (v99 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v101(v97, v91, v98);
    OnScreenContent.Image.entity.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v96, 1, v95) != 1)
    {
      uint64_t v201 = *(unsigned int *)(v0 + 1236);
      uint64_t v202 = *(void **)(v0 + 544);
      uint64_t v203 = *(void *)(v0 + 536);
      uint64_t v204 = *(void *)(v0 + 528);
      uint64_t v205 = *(void *)(v0 + 328);
      (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 608), *(void *)(v0 + 576), *(void *)(v0 + 592));
      *(void *)(v0 + 1192) = type metadata accessor for MetricsUtils();
      static MetricsUtils.shared.getter();
      static Signpost.imageContextConversion.getter();
      dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
      swift_release();
      uint64_t v206 = type metadata accessor for ContentLoaderWithContextRetrieval();
      *(void *)(v0 + 1200) = v206;
      uint64_t v207 = *(int *)(v206 + 36);
      *(_DWORD *)(v0 + 1244) = v207;
      *uint64_t v202 = *(void *)(v205 + v207);
      (*(void (**)(void *, uint64_t, uint64_t))(v203 + 104))(v202, v201, v204);
      swift_bridgeObjectRetain();
      uint64_t v208 = (void *)swift_task_alloc();
      *(void *)(v0 + 1208) = v208;
      *uint64_t v208 = v0;
      v208[1] = ContentLoaderWithContextRetrieval.load(_:);
      uint64_t v209 = *(void *)(v0 + 608);
      uint64_t v210 = *(void *)(v0 + 560);
      uint64_t v211 = *(void *)(v0 + 544);
      goto LABEL_56;
    }
    uint64_t v102 = *(void *)(v0 + 408);
    uint64_t v103 = *(void *)(v0 + 384);
    uint64_t v104 = *(void *)(v0 + 360);
    uint64_t v105 = *(void *)(v0 + 328);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 576), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
    uint64_t v106 = *(void *)(v105 + *(int *)(type metadata accessor for ContentLoaderWithContextRetrieval() + 36));
    OnScreenContent.uiMetadata.getter();
    ContentLoaderWithContextRetrieval.getScreenContent(image:representations:uiMetadata:isAppEntity:)(v104, v106, v103, 0, v102);
    uint64_t v107 = *(void *)(v0 + 440);
    char v108 = *(void *)(v0 + 448);
    char v109 = *(void *)(v0 + 408);
    (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 384), *(void *)(v0 + 368));
    uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v109, 1, v107);
    os_log_type_t v111 = *(void *)(v0 + 408);
    if (v110 != 1)
    {
      uint64_t v178 = *(void *)(v0 + 456);
      uint64_t v179 = *(void *)(v0 + 464);
      outlined init with take of ContentLoaderWithContextRetrieval(v111, v179, type metadata accessor for ScreenContent);
      outlined init with copy of ContentLoaderWithContextRetrieval(v179, v178, type metadata accessor for ScreenContent);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v237 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v237 + 16) + 1, 1, v237);
      }
      unint64_t v181 = *(void *)(v237 + 16);
      unint64_t v180 = *(void *)(v237 + 24);
      if (v181 >= v180 >> 1) {
        uint64_t v237 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v180 > 1, v181 + 1, 1, v237);
      }
      unint64_t v182 = *(void *)(v0 + 968);
      uint64_t v183 = *(void *)(v0 + 880);
      uint64_t v184 = *(void *)(v0 + 456);
      uint64_t v185 = *(void *)(v0 + 464);
      uint64_t v186 = *(void *)(v0 + 448);
      uint64_t v187 = *(void *)(v0 + 360);
      uint64_t v188 = *(void *)(v0 + 336);
      uint64_t v189 = *(void *)(v0 + 344);
      *(void *)(v237 + 16) = v181 + 1;
      outlined init with take of ContentLoaderWithContextRetrieval(v184, v237+ ((*(unsigned __int8 *)(v186 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80))+ *(void *)(v186 + 72) * v181, type metadata accessor for ScreenContent);
      outlined destroy of ScreenContent(v185, type metadata accessor for ScreenContent);
      (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v187, v188);
      v252(v182, v183);
      goto LABEL_11;
    }
    uint64_t v234 = v56;
    BOOL v112 = *(void *)(v0 + 768);
    uint64_t v113 = *(void *)(v0 + 728);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v111, &demangling cache variable for type metadata for ScreenContent?);
    v243(v112, v238, v113);
    uint64_t v114 = Logger.logObject.getter();
    uint64_t v115 = static os_log_type_t.info.getter();
    uint64_t v116 = os_log_type_enabled(v114, v115);
    uint64_t v117 = *(void *)(v0 + 968);
    uint64_t v118 = *(void *)(v0 + 880);
    uint64_t v119 = *(void *)(v0 + 728);
    uint64_t v120 = *(void *)(v0 + 360);
    unint64_t v121 = *(void *)(v0 + 344);
    uint64_t v244 = *(void *)(v0 + 768);
    uint64_t v248 = *(void *)(v0 + 336);
    if (!v116)
    {

      v234(v244, v119);
      (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v120, v248);
      goto LABEL_53;
    }
    uint64_t v122 = swift_slowAlloc();
    uint64_t v232 = v117;
    os_log_type_t v123 = swift_slowAlloc();
    v255[0] = v123;
    *(_DWORD *)uint64_t v122 = 136315394;
    BOOL v124 = _typeName(_:qualified:)();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v122 + 12) = 2080;
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v114, v115, "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content", (uint8_t *)v122, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v123, -1, -1);
    MEMORY[0x25336A180](v122, -1, -1);

    v234(v244, v119);
    (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v120, v248);
    uint64_t v126 = v118;
    uint64_t v31 = v232;
LABEL_10:
    v252(v31, v126);
LABEL_11:
    uint64_t v24 = *(void *)(v0 + 1000) + 1;
    if (v24 == *(void *)(v0 + 976)) {
      goto LABEL_5;
    }
  }
  uint64_t v66 = *(void *)(v0 + 864);
  uint64_t v67 = *(void *)(v0 + 728);
  uint64_t v68 = *(void *)(v0 + 720);
  uint64_t v69 = *(void *)(v0 + 696);
  uint64_t v70 = *(void *)(v0 + 688);
  uint64_t v71 = *(void *)(v0 + 680);
  uint64_t v72 = *(void *)(v0 + 672);
  uint64_t v73 = *(void *)(v0 + 664);
  uint64_t v74 = *(void **)(v0 + 648);
  uint64_t v75 = *(void *)(v0 + 640);
  uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v69 + 96);
  *(void *)(v0 + 1088) = v76;
  *(void *)(v0 + 1096) = (v69 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
  v76(v68, v70);
  uint64_t v77 = (void (*)(uint64_t, uint64_t, uint64_t))v74[4];
  *(void *)(v0 + 1104) = v77;
  *(void *)(v0 + 1112) = (unint64_t)(v74 + 4) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v77(v71, v68, v75);
  v243(v66, v238, v67);
  uint64_t v78 = (void (*)(uint64_t, uint64_t, uint64_t))v74[2];
  v78(v72, v71, v75);
  v78(v73, v72, v75);
  uint64_t v79 = (void (*)(uint64_t, uint64_t))v74[1];
  *(void *)(v0 + 1120) = v79;
  *(void *)(v0 + 1128) = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v79(v72, v75);
  uint64_t v80 = Logger.logObject.getter();
  uint64_t v81 = static os_log_type_t.debug.getter();
  uint64_t v82 = os_log_type_enabled(v80, v81);
  uint64_t v83 = *(void *)(v0 + 864);
  uint64_t v84 = *(void *)(v0 + 728);
  int v85 = *(void *)(v0 + 664);
  if (v82)
  {
    uint64_t v220 = *(void *)(v0 + 640);
    uint64_t v86 = swift_slowAlloc();
    unint64_t v224 = swift_slowAlloc();
    v255[0] = v224;
    *(_DWORD *)uint64_t v86 = 136315650;
    type metadata accessor for ContentLoaderWithContextRetrieval();
    uint64_t v87 = _typeName(_:qualified:)();
    *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v86 + 12) = 2080;
    *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v86 + 22) = 2080;
    OnScreenContent.Document.paginationInfo.getter();
    uint64_t v89 = String.init<A>(describing:)();
    *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v79(v85, v220);
    _os_log_impl(&dword_24F9A2000, v80, v81, "%s.%s current document pagination info: %s", (uint8_t *)v86, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v224, -1, -1);
    MEMORY[0x25336A180](v86, -1, -1);
  }
  else
  {
    v79(v85, *(void *)(v0 + 640));
  }

  v56(v83, v84);
  uint64_t v127 = *(void *)(v0 + 600);
  uint64_t v128 = *(void *)(v0 + 592);
  uint64_t v129 = *(void *)(v0 + 584);
  OnScreenContent.Document.entity.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v129, 1, v128) == 1)
  {
    v229 = v79;
    uint64_t v235 = v56;
    uint64_t v130 = *(void *)(v0 + 400);
    uint64_t v131 = *(void *)(v0 + 368);
    unint64_t v132 = *(void *)(v0 + 376);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 584), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
    OnScreenContent.uiMetadata.getter();
    uint64_t v133 = ContentLoaderWithContextRetrieval.shouldIgnoreDocument(metadata:)();
    os_log_type_t v134 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
    v134(v130, v131);
    if (v133)
    {
      v243(*(void *)(v0 + 816), v238, *(void *)(v0 + 728));
      BOOL v135 = Logger.logObject.getter();
      uint64_t v136 = static os_log_type_t.info.getter();
      uint64_t v137 = os_log_type_enabled(v135, v136);
      uint64_t v117 = *(void *)(v0 + 968);
      uint64_t v118 = *(void *)(v0 + 880);
      uint64_t v138 = *(void *)(v0 + 816);
      uint64_t v139 = *(void *)(v0 + 728);
      uint64_t v140 = *(void *)(v0 + 680);
      uint64_t v141 = *(void *)(v0 + 640);
      if (!v137) {
        goto LABEL_46;
      }
      uint64_t v245 = *(void *)(v0 + 640);
      uint64_t v142 = swift_slowAlloc();
      uint64_t v143 = swift_slowAlloc();
      v255[0] = v143;
      *(_DWORD *)uint64_t v142 = 136315394;
      uint64_t v239 = v117;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      unint64_t v144 = _typeName(_:qualified:)();
      unint64_t v225 = v118;
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v144, v145, v255);
      uint64_t v221 = v140;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v142 + 12) = 2080;
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v146 = v135;
      uint64_t v147 = v136;
      uint64_t v148 = "%s.%s should ignore document, skipping on screen content";
    }
    else
    {
      unint64_t v166 = *(void *)(v0 + 448);
      uint64_t v227 = *(void *)(v0 + 440);
      unint64_t v167 = *(unsigned char **)(v0 + 424);
      unint64_t v168 = *(void *)(v0 + 400);
      uint64_t v169 = *(void *)(v0 + 368);
      OnScreenContent.uiMetadata.getter();
      ContentLoaderWithContextRetrieval.getScreenContent(document:uiMetadata:isAppEntity:)(v168, 0, v167);
      v134(v168, v169);
      uint64_t v170 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v166 + 48))(v167, 1, v227);
      uint64_t v171 = *(void *)(v0 + 424);
      if (v170 != 1)
      {
        uint64_t v190 = *(void *)(v0 + 488);
        uint64_t v191 = *(void *)(v0 + 496);
        outlined init with take of ContentLoaderWithContextRetrieval(v171, v191, type metadata accessor for ScreenContent);
        outlined init with copy of ContentLoaderWithContextRetrieval(v191, v190, type metadata accessor for ScreenContent);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v237 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v237 + 16) + 1, 1, v237);
        }
        uint64_t v193 = *(void *)(v237 + 16);
        uint64_t v192 = *(void *)(v237 + 24);
        if (v193 >= v192 >> 1) {
          uint64_t v237 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v192 > 1, v193 + 1, 1, v237);
        }
        uint64_t v194 = *(void *)(v0 + 968);
        uint64_t v195 = *(void *)(v0 + 880);
        uint64_t v196 = *(void *)(v0 + 680);
        uint64_t v197 = *(void *)(v0 + 640);
        uint64_t v198 = *(void *)(v0 + 488);
        uint64_t v199 = *(void *)(v0 + 496);
        uint64_t v200 = *(void *)(v0 + 448);
        *(void *)(v237 + 16) = v193 + 1;
        outlined init with take of ContentLoaderWithContextRetrieval(v198, v237+ ((*(unsigned __int8 *)(v200 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v200 + 80))+ *(void *)(v200 + 72) * v193, type metadata accessor for ScreenContent);
        outlined destroy of ScreenContent(v199, type metadata accessor for ScreenContent);
        v229(v196, v197);
        v252(v194, v195);
        goto LABEL_11;
      }
      uint64_t v172 = *(void *)(v0 + 808);
      uint64_t v173 = *(void *)(v0 + 728);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v171, &demangling cache variable for type metadata for ScreenContent?);
      v243(v172, v238, v173);
      BOOL v135 = Logger.logObject.getter();
      uint64_t v174 = static os_log_type_t.info.getter();
      uint64_t v175 = os_log_type_enabled(v135, v174);
      uint64_t v117 = *(void *)(v0 + 968);
      uint64_t v118 = *(void *)(v0 + 880);
      uint64_t v138 = *(void *)(v0 + 808);
      uint64_t v139 = *(void *)(v0 + 728);
      uint64_t v140 = *(void *)(v0 + 680);
      uint64_t v141 = *(void *)(v0 + 640);
      if (!v175)
      {
LABEL_46:

        v235(v138, v139);
        v229(v140, v141);
LABEL_53:
        uint64_t v31 = v117;
        uint64_t v126 = v118;
        goto LABEL_10;
      }
      uint64_t v245 = *(void *)(v0 + 640);
      uint64_t v142 = swift_slowAlloc();
      uint64_t v143 = swift_slowAlloc();
      v255[0] = v143;
      *(_DWORD *)uint64_t v142 = 136315394;
      uint64_t v239 = v117;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v176 = _typeName(_:qualified:)();
      unint64_t v225 = v118;
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v176, v177, v255);
      uint64_t v221 = v140;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v142 + 12) = 2080;
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v146 = v135;
      uint64_t v147 = v174;
      uint64_t v148 = "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content";
    }
    _os_log_impl(&dword_24F9A2000, v146, v147, v148, (uint8_t *)v142, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v143, -1, -1);
    MEMORY[0x25336A180](v142, -1, -1);

    v235(v138, v139);
    v229(v221, v245);
    uint64_t v31 = v239;
    uint64_t v126 = v225;
    goto LABEL_10;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 616), *(void *)(v0 + 584), *(void *)(v0 + 592));
  if (ContentLoaderWithContextRetrieval.shouldIgnoreEntity(_:)())
  {
    v243(*(void *)(v0 + 856), v238, *(void *)(v0 + 728));
    uint64_t v160 = Logger.logObject.getter();
    uint64_t v161 = static os_log_type_t.info.getter();
    uint64_t v162 = os_log_type_enabled(v160, v161);
    unint64_t v163 = *(void *)(v0 + 968);
    uint64_t v164 = *(void *)(v0 + 880);
    uint64_t v222 = *(void *)(v0 + 728);
    uint64_t v226 = *(void *)(v0 + 856);
    uint64_t v246 = *(void *)(v0 + 640);
    uint64_t v249 = *(void *)(v0 + 680);
    uint64_t v240 = *(void *)(v0 + 616);
    uint64_t v165 = *(void *)(v0 + 600);
    uint64_t v230 = *(void *)(v0 + 592);
    if (v162)
    {
      uint64_t v218 = *(void *)(v0 + 968);
      unint64_t v27 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v255[0] = v28;
      *(_DWORD *)unint64_t v27 = 136315394;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      unint64_t v29 = _typeName(_:qualified:)();
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v160, v161, "%s.%s should ignore entity, skipping on screen content", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v28, -1, -1);
      MEMORY[0x25336A180](v27, -1, -1);

      v56(v226, v222);
      (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v240, v230);
      v79(v249, v246);
      uint64_t v31 = v218;
    }
    else
    {

      v56(v226, v222);
      (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v240, v230);
      v79(v249, v246);
      uint64_t v31 = v163;
    }
    uint64_t v126 = v164;
    goto LABEL_10;
  }
  uint64_t v212 = *(unsigned int *)(v0 + 1240);
  uint64_t v213 = *(uint64_t **)(v0 + 552);
  uint64_t v214 = *(void *)(v0 + 536);
  uint64_t v215 = *(void *)(v0 + 528);
  *(void *)(v0 + 1136) = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.documentContextConversion.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>);
  type metadata accessor for UTType();
  uint64_t v216 = swift_allocObject();
  *(_OWORD *)(v216 + 16) = xmmword_24FA3E1D0;
  static UTType.pdf.getter();
  *uint64_t v213 = v216;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v214 + 104))(v213, v212, v215);
  uint64_t v217 = (void *)swift_task_alloc();
  *(void *)(v0 + 1144) = v217;
  *uint64_t v217 = v0;
  v217[1] = ContentLoaderWithContextRetrieval.load(_:);
  uint64_t v209 = *(void *)(v0 + 616);
  uint64_t v210 = *(void *)(v0 + 568);
  uint64_t v211 = *(void *)(v0 + 552);
LABEL_56:
  return MEMORY[0x270F3F1D0](v210, v209, v211);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(unint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  void (*v76)(uint64_t, uint64_t, uint64_t);
  void (*v77)(uint64_t, uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t);
  NSObject *v79;
  os_log_type_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  void (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  void (*v133)(uint64_t, uint64_t);
  NSObject *v134;
  os_log_type_t v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  const char *v147;
  NSObject *v148;
  os_log_type_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned char *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  os_log_type_t v173;
  BOOL v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void (*v228)(uint64_t, uint64_t);
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void (*v233)(uint64_t, uint64_t);
  void (*v234)(uint64_t, uint64_t);
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void (*v246)(uint64_t, uint64_t);
  uint64_t v247;
  uint64_t v248;
  void (*v249)(uint64_t, uint64_t);
  void (*v250)(uint64_t, uint64_t);
  void *v251;
  uint64_t v252;
  uint64_t v253[3];
  uint64_t v254;
  uint64_t v255;

  char v254 = v0;
  uint64_t v1 = *(void **)(v0 + 1216);
  (*(void (**)(void, void, void))(v0 + 1032))(*(void *)(v0 + 744), *(void *)(v0 + 1024), *(void *)(v0 + 728));
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  unint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.info.getter();
  uint64_t v251 = v1;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v245 = *(void *)(v0 + 744);
    uint64_t v249 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
    uint64_t v240 = *(void *)(v0 + 728);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v236 = swift_slowAlloc();
    v253[0] = v236;
    *(_DWORD *)uint64_t v6 = 136315650;
    uint64_t v8 = _typeName(_:qualified:)();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2112;
    uint64_t v10 = v1;
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v11;

    _os_log_impl(&dword_24F9A2000, v4, v5, "%s.%s Unable to convert the entity due to an error: %@, skipping on screen content", (uint8_t *)v6, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v7, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v236, -1, -1);
    MEMORY[0x25336A180](v6, -1, -1);

    v249(v245, v240);
  }
  else
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 1064);
    uint64_t v13 = *(void *)(v0 + 744);
    uint64_t v14 = *(void *)(v0 + 728);

    v12(v13, v14);
  }
  uint64_t v246 = *(void (**)(uint64_t, uint64_t))(v0 + 1048);
  uint64_t v15 = *(void *)(v0 + 968);
  uint64_t v16 = *(void *)(v0 + 880);
  uint64_t v17 = *(void *)(v0 + 608);
  uint64_t v18 = *(void *)(v0 + 600);
  uint64_t v19 = *(void *)(v0 + 592);
  unint64_t v20 = *(void *)(v0 + 360);
  uint64_t v22 = *(void *)(v0 + 336);
  os_log_type_t v21 = *(void *)(v0 + 344);
  static MetricsUtils.shared.getter();
  static Signpost.imageContextConversionError.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  v246(v15, v16);
  uint64_t v235 = *(void *)(v0 + 1008);
  uint64_t v23 = *(void *)(v0 + 1000) + 1;
  if (v23 == *(void *)(v0 + 976))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v24(v235);
  }
  while (1)
  {
    *(void *)(v0 + 1008) = v235;
    *(void *)(v0 + 1000) = v23;
    uint64_t v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 992);
    uint64_t v32 = *(void *)(v0 + 968);
    uint64_t v33 = *(void *)(v0 + 880);
    int v34 = *(void *)(v0 + 320)
        + ((*(unsigned __int8 *)(v0 + 1224) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1224))
        + *(void *)(v0 + 984) * v23;
    *(void *)(v0 + 1016) = (*(void *)(v0 + 888) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v31(v32, v34, v33);
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    uint64_t v36 = *(void *)(v0 + 968);
    uint64_t v37 = *(void *)(v0 + 960);
    uint64_t v252 = *(void *)(v0 + 952);
    uint64_t v38 = *(void *)(v0 + 888);
    int v39 = *(void *)(v0 + 880);
    uint64_t v40 = *(void *)(v0 + 872);
    uint64_t v41 = *(void *)(v0 + 736);
    uint64_t v42 = __swift_project_value_buffer(*(void *)(v0 + 728), (uint64_t)static Logger.contextRetrieval);
    *(void *)(v0 + 1024) = v42;
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
    *(void *)(v0 + 1032) = v43;
    *(void *)(v0 + 1040) = (v41 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v237 = v42;
    uint64_t v241 = v43;
    ((void (*)(uint64_t))v43)(v40);
    v35(v37, v36, v39);
    v35(v252, v37, v39);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    *(void *)(v0 + 1048) = v44;
    *(void *)(v0 + 1056) = (v38 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v44(v37, v39);
    uint64_t v45 = Logger.logObject.getter();
    uint64_t v46 = static os_log_type_t.debug.getter();
    uint64_t v250 = v44;
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v218 = *(void *)(v0 + 952);
      uint64_t v222 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      uint64_t v47 = *(void *)(v0 + 944);
      id v48 = *(void *)(v0 + 880);
      uint64_t v227 = *(void *)(v0 + 736);
      uint64_t v230 = *(void *)(v0 + 728);
      uint64_t v232 = *(void *)(v0 + 872);
      uint64_t v49 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      v253[0] = v50;
      *(_DWORD *)uint64_t v49 = 136315650;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v51 = _typeName(_:qualified:)();
      *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v49 + 22) = 2080;
      v222(v47, v218, v48);
      uint64_t v53 = String.init<A>(describing:)();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v250(v218, v48);
      _os_log_impl(&dword_24F9A2000, v45, v46, "%s.%s current context retrieval on screen content: %s", (uint8_t *)v49, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v50, -1, -1);
      MEMORY[0x25336A180](v49, -1, -1);

      os_log_type_t v55 = *(void (**)(uint64_t, uint64_t))(v227 + 8);
      v55(v232, v230);
    }
    else
    {
      BOOL v56 = *(void *)(v0 + 872);
      uint64_t v57 = *(void *)(v0 + 736);
      uint64_t v58 = *(void *)(v0 + 728);
      v44(*(void *)(v0 + 952), *(void *)(v0 + 880));

      os_log_type_t v55 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v55(v56, v58);
    }
    *(void *)(v0 + 1064) = v55;
    uint64_t v59 = *(_DWORD *)(v0 + 1228);
    uint64_t v60 = *(void *)(v0 + 720);
    uint64_t v61 = *(void *)(v0 + 696);
    uint64_t v62 = *(void *)(v0 + 688);
    OnScreenContent.content.getter();
    unint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t))(v61 + 88);
    *(void *)(v0 + 1072) = v63;
    *(void *)(v0 + 1080) = (v61 + 88) & 0xFFFFFFFFFFFFLL | 0xA3B5000000000000;
    uint64_t v64 = v63(v60, v62);
    if (v64 == v59) {
      break;
    }
    if (v64 != *(_DWORD *)(v0 + 1232))
    {
      v241(*(void *)(v0 + 760), v237, *(void *)(v0 + 728));
      uint64_t v148 = Logger.logObject.getter();
      int v149 = static os_log_type_t.info.getter();
      uint64_t v150 = os_log_type_enabled(v148, v149);
      uint64_t v151 = *(void *)(v0 + 968);
      uint64_t v152 = *(void *)(v0 + 880);
      uint64_t v153 = *(void *)(v0 + 760);
      os_log_type_t v154 = *(void *)(v0 + 728);
      if (v150)
      {
        BOOL v155 = swift_slowAlloc();
        uint64_t v156 = swift_slowAlloc();
        v253[0] = v156;
        *(_DWORD *)BOOL v155 = 136315394;
        type metadata accessor for ContentLoaderWithContextRetrieval();
        uint64_t v157 = _typeName(_:qualified:)();
        *(void *)(v155 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v158, v253);
        swift_bridgeObjectRelease();
        *(_WORD *)(v155 + 12) = 2080;
        *(void *)(v155 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v253);
        _os_log_impl(&dword_24F9A2000, v148, v149, "%s.%s Unexpected OnScreenContent content type, skipping on screen content", (uint8_t *)v155, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v156, -1, -1);
        MEMORY[0x25336A180](v155, -1, -1);
      }

      v55(v153, v154);
      v250(v151, v152);
      (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 720), *(void *)(v0 + 688));
      goto LABEL_11;
    }
    os_log_type_t v90 = *(void *)(v0 + 720);
    BOOL v91 = *(void *)(v0 + 696);
    uint64_t v92 = *(void *)(v0 + 688);
    uint64_t v93 = *(void *)(v0 + 600);
    uint64_t v94 = *(void *)(v0 + 592);
    uint64_t v95 = *(void *)(v0 + 576);
    uint64_t v96 = *(void *)(v0 + 360);
    uint64_t v97 = *(void *)(v0 + 336);
    uint64_t v98 = *(void *)(v0 + 344);
    uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v91 + 96);
    *(void *)(v0 + 1160) = v99;
    *(void *)(v0 + 1168) = (v91 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
    v99(v90, v92);
    unint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 32);
    *(void *)(v0 + 1176) = v100;
    *(void *)(v0 + 1184) = (v98 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v100(v96, v90, v97);
    OnScreenContent.Image.entity.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v95, 1, v94) != 1)
    {
      uint64_t v200 = *(unsigned int *)(v0 + 1236);
      uint64_t v201 = *(void **)(v0 + 544);
      uint64_t v202 = *(void *)(v0 + 536);
      uint64_t v203 = *(void *)(v0 + 528);
      uint64_t v204 = *(void *)(v0 + 328);
      (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 608), *(void *)(v0 + 576), *(void *)(v0 + 592));
      *(void *)(v0 + 1192) = type metadata accessor for MetricsUtils();
      static MetricsUtils.shared.getter();
      static Signpost.imageContextConversion.getter();
      dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
      swift_release();
      uint64_t v205 = type metadata accessor for ContentLoaderWithContextRetrieval();
      *(void *)(v0 + 1200) = v205;
      uint64_t v206 = *(int *)(v205 + 36);
      *(_DWORD *)(v0 + 1244) = v206;
      *uint64_t v201 = *(void *)(v204 + v206);
      (*(void (**)(void *, uint64_t, uint64_t))(v202 + 104))(v201, v200, v203);
      swift_bridgeObjectRetain();
      uint64_t v207 = (void *)swift_task_alloc();
      *(void *)(v0 + 1208) = v207;
      *uint64_t v207 = v0;
      v207[1] = ContentLoaderWithContextRetrieval.load(_:);
      uint64_t v208 = *(void *)(v0 + 608);
      uint64_t v209 = *(void *)(v0 + 560);
      uint64_t v210 = *(void *)(v0 + 544);
      goto LABEL_56;
    }
    uint64_t v101 = *(void *)(v0 + 408);
    uint64_t v102 = *(void *)(v0 + 384);
    uint64_t v103 = *(void *)(v0 + 360);
    uint64_t v104 = *(void *)(v0 + 328);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 576), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
    uint64_t v105 = *(void *)(v104 + *(int *)(type metadata accessor for ContentLoaderWithContextRetrieval() + 36));
    OnScreenContent.uiMetadata.getter();
    ContentLoaderWithContextRetrieval.getScreenContent(image:representations:uiMetadata:isAppEntity:)(v103, v105, v102, 0, v101);
    uint64_t v106 = *(void *)(v0 + 440);
    uint64_t v107 = *(void *)(v0 + 448);
    char v108 = *(void *)(v0 + 408);
    (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 384), *(void *)(v0 + 368));
    char v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v108, 1, v106);
    uint64_t v110 = *(void *)(v0 + 408);
    if (v109 != 1)
    {
      uint64_t v177 = *(void *)(v0 + 456);
      uint64_t v178 = *(void *)(v0 + 464);
      outlined init with take of ContentLoaderWithContextRetrieval(v110, v178, type metadata accessor for ScreenContent);
      outlined init with copy of ContentLoaderWithContextRetrieval(v178, v177, type metadata accessor for ScreenContent);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v235 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v235 + 16) + 1, 1, v235);
      }
      unint64_t v180 = *(void *)(v235 + 16);
      uint64_t v179 = *(void *)(v235 + 24);
      if (v180 >= v179 >> 1) {
        uint64_t v235 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v179 > 1, v180 + 1, 1, v235);
      }
      unint64_t v181 = *(void *)(v0 + 968);
      unint64_t v182 = *(void *)(v0 + 880);
      uint64_t v183 = *(void *)(v0 + 456);
      uint64_t v184 = *(void *)(v0 + 464);
      uint64_t v185 = *(void *)(v0 + 448);
      uint64_t v186 = *(void *)(v0 + 360);
      uint64_t v187 = *(void *)(v0 + 336);
      uint64_t v188 = *(void *)(v0 + 344);
      *(void *)(v235 + 16) = v180 + 1;
      outlined init with take of ContentLoaderWithContextRetrieval(v183, v235+ ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80))+ *(void *)(v185 + 72) * v180, type metadata accessor for ScreenContent);
      outlined destroy of ScreenContent(v184, type metadata accessor for ScreenContent);
      (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v186, v187);
      v250(v181, v182);
      goto LABEL_11;
    }
    uint64_t v233 = v55;
    os_log_type_t v111 = *(void *)(v0 + 768);
    BOOL v112 = *(void *)(v0 + 728);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v110, &demangling cache variable for type metadata for ScreenContent?);
    v241(v111, v237, v112);
    uint64_t v113 = Logger.logObject.getter();
    uint64_t v114 = static os_log_type_t.info.getter();
    uint64_t v115 = os_log_type_enabled(v113, v114);
    uint64_t v116 = *(void *)(v0 + 968);
    uint64_t v117 = *(void *)(v0 + 880);
    uint64_t v118 = *(void *)(v0 + 728);
    uint64_t v119 = *(void *)(v0 + 360);
    uint64_t v120 = *(void *)(v0 + 344);
    uint64_t v242 = *(void *)(v0 + 768);
    uint64_t v247 = *(void *)(v0 + 336);
    if (!v115)
    {

      v233(v242, v118);
      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v119, v247);
      goto LABEL_53;
    }
    unint64_t v121 = swift_slowAlloc();
    uint64_t v231 = v116;
    uint64_t v122 = swift_slowAlloc();
    v253[0] = v122;
    *(_DWORD *)unint64_t v121 = 136315394;
    os_log_type_t v123 = _typeName(_:qualified:)();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v121 + 12) = 2080;
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v113, v114, "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content", (uint8_t *)v121, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v122, -1, -1);
    MEMORY[0x25336A180](v121, -1, -1);

    v233(v242, v118);
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v119, v247);
    uint64_t v125 = v117;
    id v30 = v231;
LABEL_10:
    v250(v30, v125);
LABEL_11:
    uint64_t v23 = *(void *)(v0 + 1000) + 1;
    if (v23 == *(void *)(v0 + 976)) {
      goto LABEL_5;
    }
  }
  unint64_t v65 = *(void *)(v0 + 864);
  uint64_t v66 = *(void *)(v0 + 728);
  uint64_t v67 = *(void *)(v0 + 720);
  uint64_t v68 = *(void *)(v0 + 696);
  uint64_t v69 = *(void *)(v0 + 688);
  uint64_t v70 = *(void *)(v0 + 680);
  uint64_t v71 = *(void *)(v0 + 672);
  uint64_t v72 = *(void *)(v0 + 664);
  uint64_t v73 = *(void **)(v0 + 648);
  uint64_t v74 = *(void *)(v0 + 640);
  uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v68 + 96);
  *(void *)(v0 + 1088) = v75;
  *(void *)(v0 + 1096) = (v68 + 96) & 0xFFFFFFFFFFFFLL | 0x41D000000000000;
  v75(v67, v69);
  uint64_t v76 = (void (*)(uint64_t, uint64_t, uint64_t))v73[4];
  *(void *)(v0 + 1104) = v76;
  *(void *)(v0 + 1112) = (unint64_t)(v73 + 4) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v76(v70, v67, v74);
  v241(v65, v237, v66);
  uint64_t v77 = (void (*)(uint64_t, uint64_t, uint64_t))v73[2];
  v77(v71, v70, v74);
  v77(v72, v71, v74);
  uint64_t v78 = (void (*)(uint64_t, uint64_t))v73[1];
  *(void *)(v0 + 1120) = v78;
  *(void *)(v0 + 1128) = (unint64_t)(v73 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v78(v71, v74);
  uint64_t v79 = Logger.logObject.getter();
  uint64_t v80 = static os_log_type_t.debug.getter();
  uint64_t v81 = os_log_type_enabled(v79, v80);
  uint64_t v82 = *(void *)(v0 + 864);
  uint64_t v83 = *(void *)(v0 + 728);
  uint64_t v84 = *(void *)(v0 + 664);
  if (v81)
  {
    uint64_t v219 = *(void *)(v0 + 640);
    int v85 = swift_slowAlloc();
    int v223 = swift_slowAlloc();
    v253[0] = v223;
    *(_DWORD *)int v85 = 136315650;
    type metadata accessor for ContentLoaderWithContextRetrieval();
    uint64_t v86 = _typeName(_:qualified:)();
    *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v85 + 12) = 2080;
    *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v85 + 22) = 2080;
    OnScreenContent.Document.paginationInfo.getter();
    uint64_t v88 = String.init<A>(describing:)();
    *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v253);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v78(v84, v219);
    _os_log_impl(&dword_24F9A2000, v79, v80, "%s.%s current document pagination info: %s", (uint8_t *)v85, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v223, -1, -1);
    MEMORY[0x25336A180](v85, -1, -1);
  }
  else
  {
    v78(v84, *(void *)(v0 + 640));
  }

  v55(v82, v83);
  uint64_t v126 = *(void *)(v0 + 600);
  uint64_t v127 = *(void *)(v0 + 592);
  uint64_t v128 = *(void *)(v0 + 584);
  OnScreenContent.Document.entity.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v128, 1, v127) == 1)
  {
    uint64_t v228 = v78;
    uint64_t v234 = v55;
    uint64_t v129 = *(void *)(v0 + 400);
    uint64_t v130 = *(void *)(v0 + 368);
    uint64_t v131 = *(void *)(v0 + 376);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 584), &demangling cache variable for type metadata for TypedValue.EntityIdentifierValue?);
    OnScreenContent.uiMetadata.getter();
    unint64_t v132 = ContentLoaderWithContextRetrieval.shouldIgnoreDocument(metadata:)();
    uint64_t v133 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
    v133(v129, v130);
    if (v132)
    {
      v241(*(void *)(v0 + 816), v237, *(void *)(v0 + 728));
      os_log_type_t v134 = Logger.logObject.getter();
      BOOL v135 = static os_log_type_t.info.getter();
      uint64_t v136 = os_log_type_enabled(v134, v135);
      uint64_t v116 = *(void *)(v0 + 968);
      uint64_t v117 = *(void *)(v0 + 880);
      uint64_t v137 = *(void *)(v0 + 816);
      uint64_t v138 = *(void *)(v0 + 728);
      uint64_t v139 = *(void *)(v0 + 680);
      uint64_t v140 = *(void *)(v0 + 640);
      if (!v136) {
        goto LABEL_46;
      }
      uint64_t v243 = *(void *)(v0 + 640);
      uint64_t v141 = swift_slowAlloc();
      uint64_t v142 = swift_slowAlloc();
      v253[0] = v142;
      *(_DWORD *)uint64_t v141 = 136315394;
      uint64_t v238 = v116;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v143 = _typeName(_:qualified:)();
      unint64_t v224 = v117;
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v144, v253);
      uint64_t v220 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v141 + 12) = 2080;
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v145 = v134;
      uint64_t v146 = v135;
      uint64_t v147 = "%s.%s should ignore document, skipping on screen content";
    }
    else
    {
      uint64_t v165 = *(void *)(v0 + 448);
      uint64_t v226 = *(void *)(v0 + 440);
      unint64_t v166 = *(unsigned char **)(v0 + 424);
      unint64_t v167 = *(void *)(v0 + 400);
      unint64_t v168 = *(void *)(v0 + 368);
      OnScreenContent.uiMetadata.getter();
      ContentLoaderWithContextRetrieval.getScreenContent(document:uiMetadata:isAppEntity:)(v167, 0, v166);
      v133(v167, v168);
      uint64_t v169 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v165 + 48))(v166, 1, v226);
      uint64_t v170 = *(void *)(v0 + 424);
      if (v169 != 1)
      {
        uint64_t v189 = *(void *)(v0 + 488);
        uint64_t v190 = *(void *)(v0 + 496);
        outlined init with take of ContentLoaderWithContextRetrieval(v170, v190, type metadata accessor for ScreenContent);
        outlined init with copy of ContentLoaderWithContextRetrieval(v190, v189, type metadata accessor for ScreenContent);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v235 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v235 + 16) + 1, 1, v235);
        }
        uint64_t v192 = *(void *)(v235 + 16);
        uint64_t v191 = *(void *)(v235 + 24);
        if (v192 >= v191 >> 1) {
          uint64_t v235 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v191 > 1, v192 + 1, 1, v235);
        }
        uint64_t v193 = *(void *)(v0 + 968);
        uint64_t v194 = *(void *)(v0 + 880);
        uint64_t v195 = *(void *)(v0 + 680);
        uint64_t v196 = *(void *)(v0 + 640);
        uint64_t v197 = *(void *)(v0 + 488);
        uint64_t v198 = *(void *)(v0 + 496);
        uint64_t v199 = *(void *)(v0 + 448);
        *(void *)(v235 + 16) = v192 + 1;
        outlined init with take of ContentLoaderWithContextRetrieval(v197, v235+ ((*(unsigned __int8 *)(v199 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v199 + 80))+ *(void *)(v199 + 72) * v192, type metadata accessor for ScreenContent);
        outlined destroy of ScreenContent(v198, type metadata accessor for ScreenContent);
        v228(v195, v196);
        v250(v193, v194);
        goto LABEL_11;
      }
      uint64_t v171 = *(void *)(v0 + 808);
      uint64_t v172 = *(void *)(v0 + 728);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v170, &demangling cache variable for type metadata for ScreenContent?);
      v241(v171, v237, v172);
      os_log_type_t v134 = Logger.logObject.getter();
      uint64_t v173 = static os_log_type_t.info.getter();
      uint64_t v174 = os_log_type_enabled(v134, v173);
      uint64_t v116 = *(void *)(v0 + 968);
      uint64_t v117 = *(void *)(v0 + 880);
      uint64_t v137 = *(void *)(v0 + 808);
      uint64_t v138 = *(void *)(v0 + 728);
      uint64_t v139 = *(void *)(v0 + 680);
      uint64_t v140 = *(void *)(v0 + 640);
      if (!v174)
      {
LABEL_46:

        v234(v137, v138);
        v228(v139, v140);
LABEL_53:
        id v30 = v116;
        uint64_t v125 = v117;
        goto LABEL_10;
      }
      uint64_t v243 = *(void *)(v0 + 640);
      uint64_t v141 = swift_slowAlloc();
      uint64_t v142 = swift_slowAlloc();
      v253[0] = v142;
      *(_DWORD *)uint64_t v141 = 136315394;
      uint64_t v238 = v116;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v175 = _typeName(_:qualified:)();
      unint64_t v224 = v117;
      *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v175, v176, v253);
      uint64_t v220 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v141 + 12) = 2080;
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v145 = v134;
      uint64_t v146 = v173;
      uint64_t v147 = "%s.%s Unable to convert the OnScreenContent to ScreenContent, skipping on screen content";
    }
    _os_log_impl(&dword_24F9A2000, v145, v146, v147, (uint8_t *)v141, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v142, -1, -1);
    MEMORY[0x25336A180](v141, -1, -1);

    v234(v137, v138);
    v228(v220, v243);
    id v30 = v238;
    uint64_t v125 = v224;
    goto LABEL_10;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 600) + 32))(*(void *)(v0 + 616), *(void *)(v0 + 584), *(void *)(v0 + 592));
  if (ContentLoaderWithContextRetrieval.shouldIgnoreEntity(_:)())
  {
    v241(*(void *)(v0 + 856), v237, *(void *)(v0 + 728));
    uint64_t v159 = Logger.logObject.getter();
    uint64_t v160 = static os_log_type_t.info.getter();
    uint64_t v161 = os_log_type_enabled(v159, v160);
    uint64_t v162 = *(void *)(v0 + 968);
    unint64_t v163 = *(void *)(v0 + 880);
    uint64_t v221 = *(void *)(v0 + 728);
    unint64_t v225 = *(void *)(v0 + 856);
    uint64_t v244 = *(void *)(v0 + 640);
    uint64_t v248 = *(void *)(v0 + 680);
    uint64_t v239 = *(void *)(v0 + 616);
    uint64_t v164 = *(void *)(v0 + 600);
    v229 = *(void *)(v0 + 592);
    if (v161)
    {
      uint64_t v217 = *(void *)(v0 + 968);
      uint64_t v26 = swift_slowAlloc();
      unint64_t v27 = swift_slowAlloc();
      v253[0] = v27;
      *(_DWORD *)uint64_t v26 = 136315394;
      type metadata accessor for ContentLoaderWithContextRetrieval();
      uint64_t v28 = _typeName(_:qualified:)();
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v253);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v159, v160, "%s.%s should ignore entity, skipping on screen content", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v27, -1, -1);
      MEMORY[0x25336A180](v26, -1, -1);

      v55(v225, v221);
      (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v239, v229);
      v78(v248, v244);
      id v30 = v217;
    }
    else
    {

      v55(v225, v221);
      (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v239, v229);
      v78(v248, v244);
      id v30 = v162;
    }
    uint64_t v125 = v163;
    goto LABEL_10;
  }
  uint64_t v211 = *(unsigned int *)(v0 + 1240);
  uint64_t v212 = *(uint64_t **)(v0 + 552);
  uint64_t v213 = *(void *)(v0 + 536);
  uint64_t v214 = *(void *)(v0 + 528);
  *(void *)(v0 + 1136) = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.documentContextConversion.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>);
  type metadata accessor for UTType();
  uint64_t v215 = swift_allocObject();
  *(_OWORD *)(v215 + 16) = xmmword_24FA3E1D0;
  static UTType.pdf.getter();
  *uint64_t v212 = v215;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v213 + 104))(v212, v211, v214);
  uint64_t v216 = (void *)swift_task_alloc();
  *(void *)(v0 + 1144) = v216;
  *uint64_t v216 = v0;
  v216[1] = ContentLoaderWithContextRetrieval.load(_:);
  uint64_t v208 = *(void *)(v0 + 616);
  uint64_t v209 = *(void *)(v0 + 568);
  uint64_t v210 = *(void *)(v0 + 552);
LABEL_56:
  return MEMORY[0x270F3F1D0](v209, v208, v210);
}

uint64_t ContentLoaderWithContextRetrieval.getSources(method:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v68 = a2;
  uint64_t v67 = 1953718630;
  uint64_t v71 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v70 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ContentLoaderWithContextRetrieval();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for OnScreenContentSources();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v72 = (char *)&v66 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v66 - v16;
  v77[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentSources and conformance OnScreenContentSources, MEMORY[0x263F4D030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OnScreenContentSources]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [OnScreenContentSources] and conformance [A], &demangling cache variable for type metadata for [OnScreenContentSources]);
  uint64_t v73 = v17;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v74 = a1;
  if (!(_BYTE)a1)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = v73;
    goto LABEL_5;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = v73;
  if (v18)
  {
LABEL_5:
    static OnScreenContentSources.windowContentGeneratedPDFDisabled.getter();
    unint64_t v20 = v72;
    specialized OptionSet<>.insert(_:)(v72, (uint64_t)v13);
    os_log_type_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v13, v9);
    v21(v20, v9);
  }
  if (!(_BYTE)v74)
  {
    uint64_t v23 = v71;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = v71;
  if (v22) {
    goto LABEL_12;
  }
  if (v74 == 2) {
    goto LABEL_11;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v47 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_12:
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  char v24 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter();
  outlined init with copy of ContentLoaderWithContextRetrieval((uint64_t)v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ContentLoaderWithContextRetrieval);
  if (v24)
  {
    outlined destroy of ScreenContent((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ContentLoaderWithContextRetrieval);
    uint64_t v19 = v73;
LABEL_15:
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v23, (uint64_t)static Logger.contextRetrieval);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      v77[0] = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x800000024FA42AE0, v77);
      uint64_t v23 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v26, v27, "%s.%s Feature Flag is enabled for Context Retrieval's image support or Context Retrieval's document support, adding uiHierarchyContent to sources", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      uint64_t v30 = v29;
      uint64_t v19 = v73;
      MEMORY[0x25336A180](v30, -1, -1);
      MEMORY[0x25336A180](v28, -1, -1);
    }

    static OnScreenContentSources.uiHierarchyContent.getter();
    uint64_t v31 = v72;
    specialized OptionSet<>.insert(_:)(v72, (uint64_t)v13);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v13, v9);
    v32(v31, v9);
    goto LABEL_20;
  }
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  char v25 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isDocumentSupportWithContextRetrievalEnabled.getter();
  outlined destroy of ScreenContent((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ContentLoaderWithContextRetrieval);
  uint64_t v19 = v73;
  if (v25) {
    goto LABEL_15;
  }
LABEL_20:
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  if (dispatch thunk of GenerativeAssistantFeatureFlagManaging.isEntitySupportWithContextRetrievalEnabled.getter())
  {
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v23, (uint64_t)static Logger.contextRetrieval);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v77[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x800000024FA42AE0, v77);
      uint64_t v23 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v33, v34, "%s.%s Feature Flag is enabled for Context Retrieval's entity support, adding appEntities to sources", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      uint64_t v37 = v36;
      uint64_t v19 = v73;
      MEMORY[0x25336A180](v37, -1, -1);
      MEMORY[0x25336A180](v35, -1, -1);
    }

    static OnScreenContentSources.appEntities.getter();
    uint64_t v38 = v72;
    specialized OptionSet<>.insert(_:)(v72, (uint64_t)v13);
    int v39 = *(void (**)(char *, uint64_t))(v10 + 8);
    v39(v13, v9);
    v39(v38, v9);
  }
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  if ((dispatch thunk of GenerativeAssistantFeatureFlagManaging.isSnapshotSupportWithContextRetrievalEnabled.getter() & 1) != 0
    && !specialized ScreenLockChecker.isScreenLocked()())
  {
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v23, (uint64_t)static Logger.contextRetrieval);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      v77[0] = v43;
      *(_DWORD *)uint64_t v42 = 136315394;
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x800000024FA42AE0, v77);
      uint64_t v23 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v40, v41, "%s.%s Feature Flag is enabled for Context Retrieval's snapshot support, adding appWindowSnapshots to sources", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      uint64_t v44 = v43;
      uint64_t v19 = v73;
      MEMORY[0x25336A180](v44, -1, -1);
      MEMORY[0x25336A180](v42, -1, -1);
    }

    static OnScreenContentSources.appWindowSnapshots.getter();
    uint64_t v45 = v72;
    specialized OptionSet<>.insert(_:)(v72, (uint64_t)v13);
    uint64_t v46 = *(void (**)(char *, uint64_t))(v10 + 8);
    v46(v13, v9);
    v46(v45, v9);
  }
LABEL_34:
  if ((_BYTE)v74)
  {
    uint64_t v48 = v69;
    if (v74 == 1) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v48 = v69;
  }
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v49) {
    goto LABEL_45;
  }
  if (!(_BYTE)v74)
  {
LABEL_42:
    char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v50 & 1) == 0) {
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  if (v74 == 1)
  {
    uint64_t v67 = 2003790963;
    goto LABEL_42;
  }
LABEL_44:
  swift_bridgeObjectRelease();
LABEL_45:
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  if (dispatch thunk of GenerativeAssistantFeatureFlagManaging.isDocumentSupportWithContextRetrievalEnabled.getter())
  {
    static OnScreenContentSources.windowContentGeneratedPDFEnabled.getter();
    uint64_t v51 = v72;
    specialized OptionSet<>.insert(_:)(v72, (uint64_t)v13);
    uint64_t v52 = *(void (**)(char *, uint64_t))(v10 + 8);
    v52(v13, v9);
    v52(v51, v9);
  }
LABEL_47:
  if (one-time initialization token for contextRetrieval != -1) {
    swift_once();
  }
  uint64_t v53 = __swift_project_value_buffer(v23, (uint64_t)static Logger.contextRetrieval);
  uint64_t v54 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v70, v53, v23);
  os_log_type_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    v77[0] = v58;
    *(_DWORD *)uint64_t v57 = 136315906;
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v57 + 12) = 2080;
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x800000024FA42AE0, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v59 = 8 * (char)v74;
    uint64_t v60 = *(void *)&aFast[v59];
    *(_WORD *)(v57 + 22) = 2080;
    unint64_t v61 = *(void *)((char *)&unk_24FA3E8F0 + v59);
    uint64_t v74 = v10;
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 32) = 2080;
    uint64_t v19 = v73;
    swift_beginAccess();
    uint64_t v62 = OnScreenContentSources.description.getter();
    uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24F9A2000, v55, v56, "%s.%s Context Retrieval sources for method '%s': %s", (uint8_t *)v57, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v58, -1, -1);
    MEMORY[0x25336A180](v57, -1, -1);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v70, v71);
    uint64_t v10 = v74;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v48 + 8))(v54, v23);
  }
  uint64_t v64 = v68;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v64, v19, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v19, v9);
}

uint64_t ContentLoaderWithContextRetrieval.shouldIgnoreEntity(_:)()
{
  uint64_t v1 = type metadata accessor for TypeIdentifier();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x253368F70](v3);
  if ((*(unsigned int (**)(char *, uint64_t))(v2 + 88))(v5, v1) != *MEMORY[0x263F80740])
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    return 0;
  }
  os_log_type_t v34 = v0;
  (*(void (**)(char *, uint64_t))(v2 + 96))(v5, v1);
  uint64_t v6 = *(void *)(*(void *)v5 + 16);
  unint64_t v7 = *(void *)(*(void *)v5 + 24);
  uint64_t v9 = *(void *)(*(void *)v5 + 32);
  unint64_t v8 = *(void *)(*(void *)v5 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  if (one-time initialization token for contextRetrieval != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.contextRetrieval);
  swift_bridgeObjectRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v35 = v11;
  if (v14)
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v33 = v9;
    uint64_t v17 = v16;
    uint64_t v37 = v16;
    *(_DWORD *)uint64_t v15 = 136315650;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000024FA427C0, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v12, v13, "%s.%s current entity bundle id: %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    uint64_t v18 = v17;
    uint64_t v9 = v33;
    MEMORY[0x25336A180](v18, -1, -1);
    MEMORY[0x25336A180](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v19 = v34;
  swift_bridgeObjectRetain_n();
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v37 = v23;
    *(_DWORD *)uint64_t v22 = 136315650;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000024FA427C0, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v20, v21, "%s.%s current entity type name: %s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v23, -1, -1);
    MEMORY[0x25336A180](v22, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  __swift_project_boxed_opaque_existential_1(v19, v19[3]);
  if ((dispatch thunk of GenerativeAssistantFeatureFlagManaging.isBrowserPDFConversionEnabled.getter() & 1) == 0)
  {
    BOOL v24 = v9 == 0x7469746E45626154 && v8 == 0xE900000000000079;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      char v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v37 = v28;
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 12) = 2080;
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000024FA427C0, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v29 = "%s.%s current entity is a TabEntity and BrowserPDFConversion feature is disabled, returning true";
LABEL_28:
        _os_log_impl(&dword_24F9A2000, v25, v26, v29, (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v28, -1, -1);
        MEMORY[0x25336A180](v27, -1, -1);
        goto LABEL_29;
      }
      goto LABEL_29;
    }
  }
  __swift_project_boxed_opaque_existential_1(v19, v19[3]);
  if (dispatch thunk of GenerativeAssistantFeatureFlagManaging.isMailPDFConversionEnabled.getter())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v9 == 0xD000000000000011 && v8 == 0x800000024FA427A0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v31 & 1) == 0) {
      return result;
    }
  }
  char v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v37 = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000024FA427C0, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v29 = "%s.%s current entity is a MailMessageEntity and MailPDFConversion feature is disabled, returning true";
    goto LABEL_28;
  }
LABEL_29:

  return 1;
}

uint64_t ContentLoaderWithContextRetrieval.getScreenContent(document:uiMetadata:isAppEntity:)@<X0>(uint64_t a1@<X1>, int a2@<W2>, unsigned char *a3@<X8>)
{
  int v108 = a2;
  uint64_t v107 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v4 - 8);
  char v109 = &v96[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = &v96[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for IntelligenceFile.Attributes();
  uint64_t v110 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v96[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = &v96[-v14];
  MEMORY[0x270FA5388](v13);
  BOOL v112 = &v96[-v16];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = &v96[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v106 = &v96[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v22);
  os_log_type_t v111 = &v96[-v24];
  uint64_t v25 = OnScreenContent.Document.file.getter();
  if (!v25)
  {
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.contextRetrieval);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v114[0] = v35;
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000032, 0x800000024FA427E0, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v28, v33, "%s.%s OnScreenContent.Document is missing the file, returning nil", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v35, -1, -1);
      MEMORY[0x25336A180](v34, -1, -1);
    }
    goto LABEL_11;
  }
  uint64_t v26 = v25;
  IntelligenceFile.fileURL.getter();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v19, &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.contextRetrieval);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v28, v29))
    {

      swift_release();
      goto LABEL_17;
    }
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    v114[0] = v31;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000032, 0x800000024FA427E0, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v28, v29, "%s.%s IntelligenceFile is missing the fileURL, returning nil", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v31, -1, -1);
    MEMORY[0x25336A180](v30, -1, -1);
    swift_release();
LABEL_11:

LABEL_17:
    uint64_t v51 = type metadata accessor for ScreenContent(0);
    uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56);
    uint64_t v53 = a3;
    return v52((uint64_t)v53, 1, 1, v51);
  }
  uint64_t v104 = a3;
  unint64_t v100 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 32);
  uint64_t v101 = v21 + 32;
  v100(v111, v19, v20);
  uint64_t v36 = v112;
  IntelligenceFile.attributes.getter();
  if (one-time initialization token for contextRetrieval != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.contextRetrieval);
  uint64_t v39 = v110;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v110 + 16))(v15, v36, v9);
  uint64_t v102 = v38;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  int v42 = v41;
  BOOL v43 = os_log_type_enabled(v40, v41);
  uint64_t v105 = v26;
  uint64_t v103 = v20;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v98 = swift_slowAlloc();
    v114[0] = v98;
    *(_DWORD *)uint64_t v44 = 136315650;
    int v97 = v42;
    uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v114);
    uint64_t v99 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 12) = 2080;
    uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000032, 0x800000024FA427E0, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 22) = 2080;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type IntelligenceFile.Attributes and conformance IntelligenceFile.Attributes, MEMORY[0x263F81898]);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    char v47 = *(unsigned char **)(v39 + 8);
    uint64_t v48 = v15;
    uint64_t v49 = v9;
    uint64_t v21 = v99;
    ((void (*)(unsigned char *, uint64_t))v47)(v48, v9);
    _os_log_impl(&dword_24F9A2000, v40, (os_log_type_t)v97, "%s.%s fileAttributes: %s", (uint8_t *)v44, 0x20u);
    uint64_t v50 = v98;
    swift_arrayDestroy();
    MEMORY[0x25336A180](v50, -1, -1);
    MEMORY[0x25336A180](v44, -1, -1);
  }
  else
  {
    char v47 = *(unsigned char **)(v39 + 8);
    os_log_type_t v55 = v15;
    uint64_t v49 = v9;
    ((void (*)(unsigned char *, uint64_t))v47)(v55, v9);
  }

  os_log_type_t v56 = v112;
  IntelligenceFile.Attributes.contentType.getter();
  uint64_t v57 = type metadata accessor for UTType();
  uint64_t v58 = *(void *)(v57 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v58 + 48))(v8, 1, v57) == 1)
  {
    uint64_t v59 = v21;
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v8, &demangling cache variable for type metadata for UTType?);
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.info.getter();
    BOOL v62 = os_log_type_enabled(v60, v61);
    unint64_t v63 = v104;
    if (v62)
    {
      uint64_t v64 = swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      v114[0] = v65;
      *(_DWORD *)uint64_t v64 = 136315394;
      char v109 = v47;
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v64 + 12) = 2080;
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000032, 0x800000024FA427E0, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v60, v61, "%s.%s Attributes is missing the content type, returning nil", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v65, -1, -1);
      MEMORY[0x25336A180](v64, -1, -1);
      swift_release();

      ((void (*)(unsigned char *, uint64_t))v109)(v112, v49);
    }
    else
    {
      swift_release();

      ((void (*)(unsigned char *, uint64_t))v47)(v112, v49);
    }
    (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v111, v103);
    uint64_t v51 = type metadata accessor for ScreenContent(0);
    uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56);
    uint64_t v53 = v63;
    return v52((uint64_t)v53, 1, 1, v51);
  }
  uint64_t v98 = UTType.identifier.getter();
  uint64_t v99 = v66;
  (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v8, v57);
  uint64_t v67 = v105;
  IntelligenceFile.attributes.getter();
  uint64_t v68 = IntelligenceFile.Attributes.fileSize.getter();
  char v70 = v69;
  uint64_t v71 = v49;
  ((void (*)(unsigned char *, uint64_t))v47)(v12, v49);
  if (v70)
  {
    uint64_t v89 = (void (*)(unsigned char *, uint64_t))v47;
    swift_bridgeObjectRelease();
    os_log_type_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      v114[0] = v93;
      *(_DWORD *)uint64_t v92 = 136315394;
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v114);
      uint64_t v110 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v92 + 12) = 2080;
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000032, 0x800000024FA427E0, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v90, v91, "%s.%s Attributes is missing the file size, returning nil", (uint8_t *)v92, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v93, -1, -1);
      MEMORY[0x25336A180](v92, -1, -1);
      swift_release();

      uint64_t v94 = v112;
      uint64_t v95 = v110;
    }
    else
    {
      swift_release();

      uint64_t v94 = v112;
      uint64_t v95 = v49;
    }
    v89(v94, v95);
    (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v111, v103);
    uint64_t v51 = type metadata accessor for ScreenContent(0);
    uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56);
    uint64_t v53 = v104;
    return v52((uint64_t)v53, 1, 1, v51);
  }
  float v72 = (float)v68 * 0.00000095367;
  uint64_t v73 = v106;
  uint64_t v74 = v111;
  uint64_t v75 = v103;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 16))(v106, v111, v103);
  swift_retain();
  uint64_t v110 = IntelligenceFile.name.getter();
  uint64_t v102 = v76;
  IntelligenceFile.Attributes.creationDate.getter();
  swift_release();
  ((void (*)(unsigned char *, uint64_t))v47)(v56, v71);
  (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v74, v75);
  uint64_t v77 = (int *)type metadata accessor for DocumentInfo(0);
  uint64_t v78 = v104;
  uint64_t v79 = v67;
  uint64_t v80 = &v104[v77[11]];
  uint64_t v81 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v82 = *(void *)(v81 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v82 + 16))(v80, v107, v81);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v82 + 56))(v80, 0, 1, v81);
  v100(v78, v73, v75);
  *(void *)&v78[v77[5]] = 0;
  *(void *)&v78[v77[6]] = v79;
  uint64_t v83 = (uint64_t *)&v78[v77[7]];
  uint64_t v84 = (uint64_t)v109;
  uint64_t v85 = v102;
  *uint64_t v83 = v110;
  v83[1] = v85;
  uint64_t v86 = (uint64_t *)&v78[v77[8]];
  uint64_t v87 = v99;
  *uint64_t v86 = v98;
  v86[1] = v87;
  outlined init with take of URL?(v84, (uint64_t)&v78[v77[9]], &demangling cache variable for type metadata for Date?);
  *(float *)&v78[v77[10]] = v72;
  v78[v77[12]] = v108 & 1;
  uint64_t v88 = type metadata accessor for ScreenContent(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v78, 0, 1, v88);
}

uint64_t ContentLoaderWithContextRetrieval.shouldIgnoreDocument(metadata:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IntelligenceProcessInfo();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceProcessInfo?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OnScreenContent.UIMetadata.window.getter();
  OnScreenContent.UIMetadata.Window.appProcess.getter();
  uint64_t v13 = v6;
  uint64_t v14 = v3;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v12, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
  }
  else
  {
    uint64_t v15 = IntelligenceProcessInfo.bundleIdentifier.getter();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v2);
    if (v17) {
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = 0;
  uint64_t v17 = 0xE000000000000000;
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24FA3E410;
  *(void *)(inited + 32) = 0xD000000000000014;
  uint64_t v50 = (void *)inited;
  uint64_t v51 = inited + 32;
  *(void *)(inited + 40) = 0x800000024FA42820;
  strcpy((char *)(inited + 48), "com.apple.mail");
  *(unsigned char *)(inited + 63) = -18;
  uint64_t v19 = OnScreenContent.UIMetadata.nestedRemoteProcesses.getter();
  int64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v47 = v15;
    uint64_t v48 = v17;
    uint64_t v49 = v0;
    uint64_t v57 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    uint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    uint64_t v21 = v14 + 16;
    unint64_t v23 = (*(unsigned __int8 *)(v21 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 64);
    uint64_t v24 = v21;
    v46[1] = v19;
    unint64_t v25 = v19 + v23;
    uint64_t v52 = *(void *)(v24 + 56);
    uint64_t v53 = v22;
    uint64_t v54 = v24;
    uint64_t v55 = v2;
    uint64_t v26 = (void (**)(char *, uint64_t))(v24 - 8);
    do
    {
      v53(v5, v25, v2);
      uint64_t v27 = IntelligenceProcessInfo.bundleIdentifier.getter();
      uint64_t v29 = v28;
      (*v26)(v5, v2);
      uint64_t v30 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
        uint64_t v30 = v57;
      }
      unint64_t v32 = *(void *)(v30 + 16);
      unint64_t v31 = *(void *)(v30 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        uint64_t v30 = v57;
      }
      *(void *)(v30 + 16) = v32 + 1;
      uint64_t v33 = v30 + 16 * v32;
      *(void *)(v33 + 32) = v27;
      *(void *)(v33 + 40) = v29;
      v25 += v52;
      --v20;
      uint64_t v2 = v55;
    }
    while (v20);
    swift_bridgeObjectRelease();
    uint64_t v17 = v48;
    uint64_t v1 = v49;
    uint64_t v15 = v47;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = MEMORY[0x263F8EE78];
  }
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (dispatch thunk of GenerativeAssistantFeatureFlagManaging.isMailPDFConversionEnabled.getter())
  {
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  else
  {
    char v34 = specialized Sequence<>.contains(_:)(v15, v17, v50);
    swift_setDeallocating();
    swift_arrayDestroy();
    if (v34)
    {
      uint64_t v35 = *(void *)(v30 + 16);
      if (!v35)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (one-time initialization token for contextRetrieval != -1) {
          swift_once();
        }
        uint64_t v45 = type metadata accessor for Logger();
        __swift_project_value_buffer(v45, (uint64_t)static Logger.contextRetrieval);
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v39, v40)) {
          goto LABEL_37;
        }
        uint64_t v41 = swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        uint64_t v57 = v42;
        *(_DWORD *)uint64_t v41 = 136315394;
        uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v41 + 12) = 2080;
        uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA42860, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        BOOL v43 = "%s.%s on screen content is from Mail and not backed by QuickLook (QuickLook = email attachment), returning true";
        goto LABEL_36;
      }
      uint64_t v36 = (void *)(v30 + 40);
      while (!*v36
           || (*(v36 - 1) != 0xD00000000000001FLL || *v36 != 0x800000024FA42840)
           && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v36 += 2;
        if (!--v35) {
          goto LABEL_32;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (dispatch thunk of GenerativeAssistantFeatureFlagManaging.isBrowserPDFConversionEnabled.getter())
  {
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    return 0;
  }
  char v37 = specialized Sequence<>.contains(_:)(v15, v17, outlined read-only object #0 of ContentLoaderWithContextRetrieval.shouldIgnoreDocument(metadata:));
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  if ((v37 & 1) == 0) {
    return 0;
  }
  if (one-time initialization token for contextRetrieval != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.contextRetrieval);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    uint64_t v57 = v42;
    *(_DWORD *)uint64_t v41 = 136315394;
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 12) = 2080;
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x800000024FA42860, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    BOOL v43 = "%s.%s on screen content is from Safari or Chrome, returning true";
LABEL_36:
    _os_log_impl(&dword_24F9A2000, v39, v40, v43, (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v42, -1, -1);
    MEMORY[0x25336A180](v41, -1, -1);
  }
LABEL_37:

  return 1;
}

uint64_t ContentLoaderWithContextRetrieval.getScreenContent(image:representations:uiMetadata:isAppEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v100 = a4;
  uint64_t v98 = a3;
  uint64_t v101 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v99 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ImageInfo(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = (void *)type metadata accessor for IntelligenceImage.Representation();
  uint64_t v12 = *(v117 - 1);
  uint64_t v13 = MEMORY[0x270FA5388](v117);
  uint64_t v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v116 = (char *)&v92 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceImage?);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for IntelligenceImage();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  unint64_t v23 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = a1;
  OnScreenContent.Image.image.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v19, &demangling cache variable for type metadata for IntelligenceImage?);
    if (one-time initialization token for contextRetrieval == -1)
    {
LABEL_3:
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.contextRetrieval);
      unint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v119 = v28;
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, &v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 12) = 2080;
        uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003FLL, 0x800000024FA42880, &v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v25, v26, "%s.%s OnScreenContent.Image is missing the image, returning nil", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v28, -1, -1);
        MEMORY[0x25336A180](v27, -1, -1);
      }

      goto LABEL_53;
    }
LABEL_57:
    swift_once();
    goto LABEL_3;
  }
  uint64_t v94 = v11;
  uint64_t v96 = v21;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v30 = v23;
  uint64_t v95 = v20;
  v29(v23, v19, v20);
  uint64_t v31 = *(void *)(a2 + 56);
  uint64_t v110 = a2 + 56;
  uint64_t v32 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & v31;
  int64_t v111 = (unint64_t)(v32 + 63) >> 6;
  uint64_t v35 = v12;
  uint64_t v114 = v12 + 32;
  uint64_t v115 = v12 + 16;
  uint64_t v113 = (void (**)(char *, void *))(v12 + 8);
  swift_bridgeObjectRetain();
  id v102 = 0;
  uint64_t v103 = 0;
  int64_t v36 = 0;
  *(void *)&long long v37 = 136315394;
  long long v108 = v37;
  unint64_t v92 = (unint64_t)&unk_24FA3E860;
  unint64_t v107 = 0x800000024FA3E860;
  unint64_t v93 = (unint64_t)"shouldIgnoreDocument(metadata:)";
  unint64_t v106 = 0x800000024FA42880;
  uint64_t v105 = MEMORY[0x263F8EE58] + 8;
  uint64_t v38 = v109;
  for (i = v35; ; uint64_t v35 = i)
  {
    while (1)
    {
      while (1)
      {
        if (v34)
        {
          unint64_t v39 = __clz(__rbit64(v34));
          v34 &= v34 - 1;
          unint64_t v40 = v39 | (v36 << 6);
          goto LABEL_23;
        }
        if (__OFADD__(v36++, 1))
        {
          __break(1u);
          goto LABEL_56;
        }
        if (v36 >= v111) {
          goto LABEL_38;
        }
        unint64_t v42 = *(void *)(v110 + 8 * v36);
        if (v42) {
          goto LABEL_22;
        }
        int64_t v43 = v36 + 1;
        if (v36 + 1 >= v111) {
          goto LABEL_38;
        }
        unint64_t v42 = *(void *)(v110 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v36 + 2;
          if (v36 + 2 >= v111) {
            goto LABEL_38;
          }
          unint64_t v42 = *(void *)(v110 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v36 + 3;
            if (v36 + 3 < v111)
            {
              unint64_t v42 = *(void *)(v110 + 8 * v43);
              if (v42) {
                goto LABEL_21;
              }
              while (1)
              {
                int64_t v36 = v43 + 1;
                if (__OFADD__(v43, 1)) {
                  break;
                }
                if (v36 >= v111) {
                  goto LABEL_38;
                }
                unint64_t v42 = *(void *)(v110 + 8 * v36);
                ++v43;
                if (v42) {
                  goto LABEL_22;
                }
              }
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
LABEL_38:
            swift_release();
            uint64_t v61 = v96;
            uint64_t v62 = v95;
            if (v103)
            {
              if (v102)
              {
                unint64_t v63 = v103;
                swift_retain();
                id v64 = v102;
                uint64_t v117 = v102;
                char v65 = OnScreenContent.Image.isSnapshot.getter();
                uint64_t v66 = v30;
                uint64_t v67 = type metadata accessor for OnScreenContent.UIMetadata();
                uint64_t v68 = *(void *)(v67 - 8);
                uint64_t v69 = v61;
                uint64_t v70 = (uint64_t)v99;
                (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v99, v98, v67);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v70, 0, 1, v67);
                char v71 = v65 & 1;
                uint64_t v72 = (uint64_t)v94;
                ImageInfo.init(source:isScreenshot:appBundleID:uiMetadata:isAppEntity:)(v63, v64, 0, v71, 0, 0, v70, v100 & 1, (uint64_t)v94);

                swift_release();
                (*(void (**)(char *, uint64_t))(v69 + 8))(v66, v62);
                uint64_t v73 = v72;
                uint64_t v74 = v101;
                outlined init with take of ContentLoaderWithContextRetrieval(v73, v101, type metadata accessor for ImageInfo);
                uint64_t v75 = type metadata accessor for ScreenContent(0);
                swift_storeEnumTagMultiPayload();
                return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v74, 0, 1, v75);
              }
              uint64_t v77 = v30;
              uint64_t v84 = one-time initialization token for contextRetrieval;
              swift_retain();
              if (v84 != -1) {
                swift_once();
              }
              uint64_t v85 = type metadata accessor for Logger();
              __swift_project_value_buffer(v85, (uint64_t)static Logger.contextRetrieval);
              uint64_t v86 = Logger.logObject.getter();
              os_log_type_t v87 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v86, v87))
              {
                uint64_t v88 = swift_slowAlloc();
                uint64_t v89 = swift_slowAlloc();
                uint64_t v119 = v89;
                *(_DWORD *)uint64_t v88 = v108;
                uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, v92 | 0x8000000000000000, &v119);
                uint64_t v83 = v62;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v88 + 12) = 2080;
                uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003FLL, v93 | 0x8000000000000000, &v119);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl(&dword_24F9A2000, v86, v87, "%s.%s Prepared thumbnail is missing, returning nil", (uint8_t *)v88, 0x16u);
                swift_arrayDestroy();
                MEMORY[0x25336A180](v89, -1, -1);
                MEMORY[0x25336A180](v88, -1, -1);
                swift_release_n();

                goto LABEL_49;
              }
              swift_release_n();
            }
            else
            {
              uint64_t v77 = v30;
              if (one-time initialization token for contextRetrieval != -1) {
                swift_once();
              }
              uint64_t v78 = type metadata accessor for Logger();
              __swift_project_value_buffer(v78, (uint64_t)static Logger.contextRetrieval);
              uint64_t v79 = Logger.logObject.getter();
              os_log_type_t v80 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v79, v80))
              {
                uint64_t v81 = swift_slowAlloc();
                uint64_t v82 = swift_slowAlloc();
                uint64_t v119 = v82;
                *(_DWORD *)uint64_t v81 = v108;
                uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, v92 | 0x8000000000000000, &v119);
                uint64_t v83 = v62;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v81 + 12) = 2080;
                uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003FLL, v93 | 0x8000000000000000, &v119);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl(&dword_24F9A2000, v79, v80, "%s.%s IntelligenceFile is missing, returning nil", (uint8_t *)v81, 0x16u);
                swift_arrayDestroy();
                MEMORY[0x25336A180](v82, -1, -1);
                MEMORY[0x25336A180](v81, -1, -1);

LABEL_49:
                (*(void (**)(char *, uint64_t))(v61 + 8))(v77, v83);
                goto LABEL_53;
              }
            }
            (*(void (**)(char *, uint64_t))(v61 + 8))(v77, v62);
LABEL_53:
            uint64_t v90 = v101;
            uint64_t v91 = type metadata accessor for ScreenContent(0);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 1, 1, v91);
          }
        }
LABEL_21:
        int64_t v36 = v43;
LABEL_22:
        unint64_t v34 = (v42 - 1) & v42;
        unint64_t v40 = __clz(__rbit64(v42)) + (v36 << 6);
LABEL_23:
        uint64_t v45 = v116;
        uint64_t v44 = v117;
        (*(void (**)(char *, unint64_t, void *))(v35 + 16))(v116, *(void *)(a2 + 48) + *(void *)(v35 + 72) * v40, v117);
        (*(void (**)(char *, char *, void *))(v35 + 32))(v15, v45, v44);
        uint64_t v46 = IntelligenceImage.image(for:)();
        if (v46) {
          break;
        }
        if (one-time initialization token for contextRetrieval != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        __swift_project_value_buffer(v50, (uint64_t)static Logger.contextRetrieval);
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = swift_slowAlloc();
          uint64_t v54 = a2;
          uint64_t v55 = v30;
          uint64_t v56 = swift_slowAlloc();
          uint64_t v119 = v56;
          *(_DWORD *)uint64_t v53 = v108;
          *(void *)(v53 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, v107, &v119);
          *(_WORD *)(v53 + 12) = 2080;
          *(void *)(v53 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003FLL, v106, &v119);
          _os_log_impl(&dword_24F9A2000, v51, v52, "%s.%s No intelligence file found for the image representation, skipping representation", (uint8_t *)v53, 0x16u);
          swift_arrayDestroy();
          uint64_t v57 = v56;
          uint64_t v30 = v55;
          a2 = v54;
          uint64_t v38 = v109;
          MEMORY[0x25336A180](v57, -1, -1);
          MEMORY[0x25336A180](v53, -1, -1);
        }

        (*v113)(v15, v117);
        uint64_t v35 = i;
      }
      uint64_t v47 = v46;
      uint64_t v48 = type metadata accessor for ContentLoaderWithContextRetrieval();
      if (MEMORY[0x253368010](v15, v38 + *(int *)(v48 + 32))) {
        break;
      }
      char v49 = MEMORY[0x253368010](v15, v38 + *(int *)(v48 + 28));
      (*v113)(v15, v117);
      swift_release();
      if (v49) {
        uint64_t v103 = (void *)v47;
      }
      uint64_t v35 = i;
    }
    unint64_t v58 = (unint64_t)IntelligenceFile.getImage()();
    uint64_t v104 = v59;
    if (v59) {
      break;
    }
    uint64_t v60 = (void *)v58;
    (*v113)(v15, v117);
    swift_release();

    id v102 = v60;
  }
  swift_release();

  swift_release();
  (*v113)(v15, v117);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v30, v95);
}

UIImage_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IntelligenceFile.getImage()()
{
  uint64_t v57 = *v0;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v60 = *(void *)(v1 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v53[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v2);
  unint64_t v58 = &v53[-v5];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v53[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = &v53[-v14];
  IntelligenceFile.fileURL.getter();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v8, &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v16 = __swift_project_value_buffer(v1, (uint64_t)static Logger.contextRetrieval);
    uint64_t v17 = v60;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v60 + 16))(v4, v16, v1);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      unint64_t v58 = (unsigned char *)swift_slowAlloc();
      uint64_t v62 = v58;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v21 = _typeName(_:qualified:)();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6567616D49746567, 0xEA00000000002928, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v18, v19, "%s.%s Creating the PlatformImage with the file's data", (uint8_t *)v20, 0x16u);
      unint64_t v23 = v58;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v23, -1, -1);
      MEMORY[0x25336A180](v20, -1, -1);

      (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v4, v1);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v4, v1);
    }
    uint64_t v41 = v59;
    uint64_t v42 = IntelligenceFile.data.getter();
    if (!v41)
    {
      uint64_t v48 = v42;
      unint64_t v49 = v43;
      id v50 = objc_allocWithZone(MEMORY[0x263F827E8]);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v18 = objc_msgSend(v50, sel_initWithData_, isa);
      outlined consume of Data._Representation(v48, v49);
    }
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v15, v8, v9);
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v24 = v1;
    uint64_t v25 = __swift_project_value_buffer(v1, (uint64_t)static Logger.contextRetrieval);
    uint64_t v26 = v60;
    uint64_t v27 = v58;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v60 + 16))(v58, v25, v24);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v13, v15, v9);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    int v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = swift_slowAlloc();
      os_log_t v55 = v28;
      uint64_t v32 = v31;
      uint64_t v56 = swift_slowAlloc();
      uint64_t v62 = (unsigned char *)v56;
      *(_DWORD *)uint64_t v32 = 136315650;
      uint64_t v33 = _typeName(_:qualified:)();
      int v54 = v30;
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)&v62);
      uint64_t v57 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6567616D49746567, 0xEA00000000002928, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 22) = 2080;
      lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      long long v37 = v13;
      uint64_t v38 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
      v38(v37, v9);
      os_log_t v39 = v55;
      _os_log_impl(&dword_24F9A2000, v55, (os_log_type_t)v54, "%s.%s Creating the PlatformImage with the file's url: %s", (uint8_t *)v32, 0x20u);
      uint64_t v40 = v56;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v40, -1, -1);
      MEMORY[0x25336A180](v32, -1, -1);

      (*(void (**)(unsigned char *, uint64_t))(v26 + 8))(v58, v57);
    }
    else
    {
      uint64_t v44 = v13;
      uint64_t v38 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
      v38(v44, v9);

      (*(void (**)(unsigned char *, uint64_t))(v26 + 8))(v27, v24);
    }
    URL.startAccessingSecurityScopedResource()();
    Swift::String v45 = URL.path(percentEncoded:)(0);
    id v46 = objc_allocWithZone(MEMORY[0x263F827E8]);
    uint64_t v47 = (void *)MEMORY[0x2533691D0](v45._countAndFlagsBits, v45._object);
    swift_bridgeObjectRelease();
    uint64_t v18 = objc_msgSend(v46, sel_initWithContentsOfFile_, v47);

    URL.stopAccessingSecurityScopedResource()();
    v38(v15, v9);
  }
  os_log_type_t v52 = (objc_class *)v18;
  result.is_nil = v43;
  result.value.super.Class isa = v52;
  return result;
}

Swift::Int ContentLoaderWithContextRetrieval.getAssistantSchemas()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24FA3E800;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x800000024FA427A0;
  *(void *)(inited + 48) = 0x7469746E45626154;
  *(void *)(inited + 56) = 0xE900000000000079;
  *(void *)(inited + 64) = 0x746E456F746F6850;
  *(void *)(inited + 72) = 0xEB00000000797469;
  *(void *)(inited + 80) = 0x69746E45656C6946;
  *(void *)(inited + 88) = 0xEA00000000007974;
  *(void *)(inited + 96) = 0xD00000000000001BLL;
  *(void *)(inited + 120) = 0x800000024FA428E0;
  *(void *)(inited + 128) = 0xD000000000000014;
  *(void *)(inited + 104) = 0x800000024FA428C0;
  *(void *)(inited + 112) = 0xD000000000000011;
  *(void *)(inited + 136) = 0x800000024FA42900;
  *(void *)(inited + 144) = 0xD000000000000012;
  *(void *)(inited + 152) = 0x800000024FA42920;
  Swift::Int v1 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v1;
}

uint64_t specialized OptionSet<>.insert(_:)(char *a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (inserted: Bool, memberAfterInsert: OnScreenContentSources));
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  os_log_type_t v29 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v25 - v7;
  uint64_t v9 = type metadata accessor for OnScreenContentSources();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v25 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v28 = v2;
  uint64_t v26 = v16;
  v16(v13, v2, v9);
  uint64_t v17 = (void (*)(uint64_t))MEMORY[0x263F4D030];
  v25[1] = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentSources and conformance OnScreenContentSources, MEMORY[0x263F4D030]);
  dispatch thunk of SetAlgebra.intersection(_:)();
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentSources and conformance OnScreenContentSources, v17);
  uint64_t v27 = a2;
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
  uint64_t v30 = v4;
  os_log_type_t v19 = &v8[*(int *)(v4 + 48)];
  unsigned char *v8 = v18 & 1;
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    unint64_t v22 = v26;
    uint64_t v21 = v27;
    v26(v19, v27, v9);
    v22(v13, v21, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v20(v19, v15, v9);
  }
  unint64_t v23 = &v29[*(int *)(v30 + 48)];
  v20(v23, v19, v9);
  v20(v31, v23, v9);
  return v18 & 1;
}

uint64_t OnScreenContentSources.description.getter()
{
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OnScreenContentSources, String));
  uint64_t v1 = *(void *)(v31 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v31);
  uint64_t v30 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  os_log_type_t v29 = (char *)&v27 - v4;
  if (one-time initialization token for debugDescriptions != -1) {
    swift_once();
  }
  uint64_t v5 = swift_beginAccess();
  uint64_t v6 = static OnScreenContentSources.debugDescriptions;
  MEMORY[0x270FA5388](v5);
  *(&v27 - 2) = v0;
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in OnScreenContentSources.description.getter, (uint64_t)(&v27 - 4), v6);
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v7 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    uint64_t v10 = *(void *)(v1 + 72);
    uint64_t v27 = v7;
    uint64_t v28 = v10;
    uint64_t v11 = (uint64_t)v29;
    uint64_t v12 = v30;
    do
    {
      outlined init with copy of OnScreenContent.UIMetadata?(v9, v11, &demangling cache variable for type metadata for (OnScreenContentSources, String));
      uint64_t v13 = *(int *)(v31 + 48);
      uint64_t v14 = &v12[v13];
      uint64_t v15 = (uint64_t *)(v11 + v13);
      uint64_t v16 = type metadata accessor for OnScreenContentSources();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v12, v11, v16);
      uint64_t v18 = *v15;
      uint64_t v19 = v15[1];
      *(void *)uint64_t v14 = *v15;
      *((void *)v14 + 1) = v19;
      uint64_t v20 = *(void (**)(char *, uint64_t))(v17 + 8);
      swift_bridgeObjectRetain();
      v20(v12, v16);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v11, &demangling cache variable for type metadata for (OnScreenContentSources, String));
      uint64_t v21 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
        uint64_t v21 = v32;
      }
      unint64_t v23 = *(void *)(v21 + 16);
      unint64_t v22 = *(void *)(v21 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v21 = v32;
      }
      *(void *)(v21 + 16) = v23 + 1;
      uint64_t v24 = v21 + 16 * v23;
      *(void *)(v24 + 32) = v18;
      *(void *)(v24 + 40) = v19;
      v9 += v28;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x263F8EE78];
  }
  uint64_t v32 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t protocol witness for ContentLoaderProviding.load() in conformance ContentLoaderWithContextRetrieval(uint64_t a1)
{
  void v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation.BufferingPolicy);
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x270FA2498](protocol witness for ContentLoaderProviding.load() in conformance ContentLoaderWithContextRetrieval, 0, 0);
}

uint64_t protocol witness for ContentLoaderProviding.load() in conformance ContentLoaderWithContextRetrieval()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = (uint64_t *)v0[2];
  *(void *)(swift_task_alloc() + 16) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ScreenContent]);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F8F580], v3);
  v5[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>);
  v5[4] = lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<[ScreenContent]> and conformance AsyncStream<A>, &demangling cache variable for type metadata for AsyncStream<[ScreenContent]>);
  __swift_allocate_boxed_opaque_existential_1(v5);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t one-time initialization function for debugDescriptions()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(OnScreenContentSources, String)>);
  uint64_t v0 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OnScreenContentSources, String))
             - 8);
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v3 = 2 * v1;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24FA3E810;
  unint64_t v5 = v4 + v2;
  static OnScreenContentSources.appEntities.getter();
  uint64_t v6 = v0[14];
  uint64_t v7 = v5 + v6;
  strcpy((char *)(v5 + v6), "App Entities");
  *(unsigned char *)(v7 + 13) = 0;
  *(_WORD *)(v7 + 14) = -5120;
  uint64_t v8 = (void *)(v5 + v1 + v6);
  static OnScreenContentSources.uiHierarchyContent.getter();
  void *v8 = 0xD000000000000013;
  v8[1] = 0x800000024FA42780;
  uint64_t result = static OnScreenContentSources.appWindowSnapshots.getter();
  uint64_t v10 = v5 + v3 + v0[14];
  strcpy((char *)v10, "App Snapshots");
  *(_WORD *)(v10 + 14) = -4864;
  static OnScreenContentSources.debugDescriptions = v4;
  return result;
}

uint64_t static OnScreenContentSources.debugDescriptions.getter()
{
  if (one-time initialization token for debugDescriptions != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static OnScreenContentSources.debugDescriptions.setter(uint64_t a1)
{
  if (one-time initialization token for debugDescriptions != -1) {
    swift_once();
  }
  swift_beginAccess();
  static OnScreenContentSources.debugDescriptions = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static OnScreenContentSources.debugDescriptions.modify())()
{
  if (one-time initialization token for debugDescriptions != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static OnScreenContentSources.debugDescriptions.modify;
}

uint64_t partial apply for closure #1 in OnScreenContentSources.description.getter()
{
  return dispatch thunk of SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OnScreenContentSources, String));
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    uint64_t v15 = MEMORY[0x263F8EE78];
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void *)(v24 + 72);
      outlined init with copy of OnScreenContent.UIMetadata?(a3 + v16 + v13 * v14, (uint64_t)v12, &demangling cache variable for type metadata for (OnScreenContentSources, String));
      char v17 = a1(v12);
      if (v3)
      {
        outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v12, &demangling cache variable for type metadata for (OnScreenContentSources, String));
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if (v17)
      {
        outlined init with take of URL?((uint64_t)v12, v23, &demangling cache variable for type metadata for (OnScreenContentSources, String));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = *(void *)(v25 + 16);
        unint64_t v18 = *(void *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }
        *(void *)(v15 + 16) = v19 + 1;
        uint64_t result = outlined init with take of URL?(v23, v15 + v16 + v19 * v13, &demangling cache variable for type metadata for (OnScreenContentSources, String));
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v12, &demangling cache variable for type metadata for (OnScreenContentSources, String));
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<IntelligenceProcessInfo>, MEMORY[0x263F81B08]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ScreenContent>, type metadata accessor for ScreenContent);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolType>, MEMORY[0x263F40E50]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Attribution>, MEMORY[0x263F408A8]);
  *uint64_t v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(OnScreenContentSources, String)>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OnScreenContentSources, String))
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OnScreenContentSources, String))
                  - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (char *)v13 + v17;
  unint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
    uint64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = (unint64_t)(v10 + 4);
  size_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t type metadata accessor for ContentLoaderWithContextRetrieval()
{
  uint64_t result = type metadata singleton initialization cache for ContentLoaderWithContextRetrieval;
  if (!type metadata singleton initialization cache for ContentLoaderWithContextRetrieval) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OnScreenContentType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentType and conformance OnScreenContentType, MEMORY[0x263F4CF88]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    size_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentType and conformance OnScreenContentType, MEMORY[0x263F4CF88]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for OnScreenContentType();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OnScreenContentType>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    long long v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentType and conformance OnScreenContentType, MEMORY[0x263F4CF88]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for OnScreenContentType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentType and conformance OnScreenContentType, MEMORY[0x263F4CF88]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    int64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentType and conformance OnScreenContentType, MEMORY[0x263F4CF88]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OnScreenContentType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OnScreenContentType>);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OnScreenContentType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OnScreenContentType>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentType and conformance OnScreenContentType, MEMORY[0x263F4CF88]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IntelligenceImage.Representation();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<IntelligenceImage.Representation>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    BOOL v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type IntelligenceImage.Representation and conformance IntelligenceImage.Representation, MEMORY[0x263F818F8]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type IntelligenceImage.Representation and conformance IntelligenceImage.Representation, MEMORY[0x263F818F8]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t initializeBufferWithCopyOfBuffer for ContentLoaderWithContextRetrieval(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    long long v8 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v4 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v4 + 40, (uint64_t)(a2 + 5));
    *(void *)(v4 + 80) = a2[10];
    uint64_t v9 = a3[7];
    uint64_t v10 = v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for IntelligenceImage.Representation();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    v13(v10, v11, v12);
    v13(v4 + a3[8], (uint64_t)a2 + a3[8], v12);
    *(void *)(v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ContentLoaderWithContextRetrieval(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for IntelligenceImage.Representation();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 32), v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ContentLoaderWithContextRetrieval(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for IntelligenceImage.Representation();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_retain();
  v12(v9, v10, v11);
  v12(a1 + a3[8], a2 + a3[8], v11);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ContentLoaderWithContextRetrieval(uint64_t *a1, uint64_t *a2, int *a3)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  a1[10] = a2[10];
  swift_retain();
  swift_release();
  uint64_t v6 = a3[7];
  long long v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IntelligenceImage.Representation();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10((char *)a1 + a3[8], (char *)a2 + a3[8], v9);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ContentLoaderWithContextRetrieval(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v12 = type metadata accessor for IntelligenceImage.Representation();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v13(a1 + a3[8], a2 + a3[8], v12);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for ContentLoaderWithContextRetrieval(uint64_t a1, uint64_t a2, int *a3)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_release();
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for IntelligenceImage.Representation();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12(a1 + a3[8], a2 + a3[8], v11);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentLoaderWithContextRetrieval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24F9DBEF0);
}

uint64_t sub_24F9DBEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for IntelligenceImage.Representation();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ContentLoaderWithContextRetrieval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24F9DBFB4);
}

uint64_t sub_24F9DBFB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for IntelligenceImage.Representation();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for ContentLoaderWithContextRetrieval()
{
  uint64_t result = type metadata accessor for IntelligenceImage.Representation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in ContentLoaderWithContextRetrieval.load()(uint64_t a1)
{
  return closure #1 in ContentLoaderWithContextRetrieval.load()(a1, *(void *)(v1 + 16));
}

uint64_t sub_24F9DC11C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  long long v6 = (int *)(type metadata accessor for ContentLoaderWithContextRetrieval() - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(*(void *)v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v11 = v0 + v8;
  __swift_destroy_boxed_opaque_existential_0(v0 + v8);
  __swift_destroy_boxed_opaque_existential_0(v0 + v8 + 40);
  swift_release();
  uint64_t v12 = v0 + v8 + v6[9];
  uint64_t v13 = type metadata accessor for IntelligenceImage.Representation();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v14(v12, v13);
  v14(v11 + v6[10], v13);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v9, v10);
}

uint64_t partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load()(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ContentLoaderWithContextRetrieval() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + (v9 & ~v8);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load()(a1, v10, v11, v12, v13);
}

uint64_t partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load()()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t outlined init with copy of ContentLoaderWithContextRetrieval(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ContentLoaderWithContextRetrieval(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized ContentLoaderWithContextRetrieval.getContentTypes(representations:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  uint64_t v77 = *(void *)(v2 - 8);
  uint64_t v78 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v83 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v87 = (uint64_t)&v75 - v5;
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v84 = *(void *)(v6 - 8);
  uint64_t v85 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v86 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v82 = (char *)&v75 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = type metadata accessor for OnScreenContentType();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v81 = (unint64_t *)((char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v80 = (uint64_t)&v75 - v15;
  uint64_t v16 = type metadata accessor for ContentLoaderWithContextRetrieval();
  MEMORY[0x270FA5388](v16);
  unint64_t v18 = (unint64_t *)((char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v90 = MEMORY[0x263F8EE88];
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  char v19 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter();
  outlined init with copy of ContentLoaderWithContextRetrieval((uint64_t)v1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ContentLoaderWithContextRetrieval);
  if (v19)
  {
    outlined destroy of ScreenContent((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ContentLoaderWithContextRetrieval);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v18, v18[3]);
    char v20 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isSnapshotSupportWithContextRetrievalEnabled.getter();
    outlined destroy of ScreenContent((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ContentLoaderWithContextRetrieval);
    if ((v20 & 1) == 0) {
      goto LABEL_9;
    }
  }
  if (one-time initialization token for contextRetrieval != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.contextRetrieval);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    v89[0] = swift_slowAlloc();
    uint64_t v79 = v12;
    uint64_t v25 = v89[0];
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA42940, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v22, v23, "%s.%s Feature Flag is enabled for Context Retrieval's image support or Context Retrieval's snapshot support, adding image to content types", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    uint64_t v26 = v25;
    uint64_t v12 = v79;
    MEMORY[0x25336A180](v26, -1, -1);
    MEMORY[0x25336A180](v24, -1, -1);
  }

  unint64_t v27 = *(void *)((char *)v1 + *(int *)(v16 + 36));
  BOOL v28 = (char *)v81;
  *uint64_t v81 = v27;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v28, *MEMORY[0x263F4CF70], v11);
  swift_bridgeObjectRetain();
  uint64_t v29 = v80;
  specialized Set._Variant.insert(_:)(v80, v28);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v29, v11);
LABEL_9:
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (dispatch thunk of GenerativeAssistantFeatureFlagManaging.isEntitySupportWithContextRetrievalEnabled.getter())
  {
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.contextRetrieval);
    BOOL v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v89[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2080;
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA42940, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v31, v32, "%s.%s Feature Flag is enabled for Context Retrieval's entity support, adding entity to content types", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v34, -1, -1);
      MEMORY[0x25336A180](v33, -1, -1);
    }

    uint64_t v35 = (char *)v81;
    (*(void (**)(unint64_t *, void, uint64_t))(v12 + 104))(v81, *MEMORY[0x263F4CF78], v11);
    uint64_t v36 = v80;
    specialized Set._Variant.insert(_:)(v80, v35);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v36, v11);
  }
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (dispatch thunk of GenerativeAssistantFeatureFlagManaging.isDocumentSupportWithContextRetrievalEnabled.getter())
  {
    if (one-time initialization token for contextRetrieval != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.contextRetrieval);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = (uint64_t)v83;
    uint64_t v76 = v11;
    uint64_t v79 = v12;
    if (v40)
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      v89[0] = v43;
      *(_DWORD *)uint64_t v42 = 136315394;
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA42940, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v38, v39, "%s.%s Feature Flag is enabled for Context Retrieval's document support, adding file to content types", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v43, -1, -1);
      MEMORY[0x25336A180](v42, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UTType?>);
    uint64_t v44 = *(void *)(v77 + 72);
    unint64_t v45 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    uint64_t v46 = 40;
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_24FA3E820;
    uint64_t v77 = v47;
    uint64_t v48 = v47 + v45;
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.vCard.getter();
    uint64_t v49 = v85;
    uint64_t v51 = v84 + 56;
    id v50 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56);
    v50(v48 + 4 * v44, 0, 1, v85);
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.html.getter();
    v50(v48 + 7 * v44, 0, 1, v49);
    static UTType.data.getter();
    unint64_t v75 = 0xD000000000000011;
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.xml.getter();
    v50(v48 + 10 * v44, 0, 1, v49);
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.javaScript.getter();
    v50(v48 + 14 * v44, 0, 1, v49);
    static UTType.cHeader.getter();
    v50(v48 + 15 * v44, 0, 1, v49);
    static UTType.cSource.getter();
    v50(v48 + 16 * v44, 0, 1, v49);
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.cPlusPlusHeader.getter();
    v50(v48 + 18 * v44, 0, 1, v49);
    static UTType.cPlusPlusSource.getter();
    v50(v48 + 19 * v44, 0, 1, v49);
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.phpScript.getter();
    v50(v48 + 23 * v44, 0, 1, v49);
    static UTType.pythonScript.getter();
    v50(v48 + 24 * v44, 0, 1, v49);
    static UTType.rubyScript.getter();
    v50(v48 + 25 * v44, 0, 1, v49);
    static UTType.shellScript.getter();
    v50(v48 + 26 * v44, 0, 1, v49);
    static UTType.pdf.getter();
    v50(v48 + 27 * v44, 0, 1, v49);
    static UTType.commaSeparatedText.getter();
    v50(v48 + 28 * v44, 0, 1, v49);
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.json.getter();
    v50(v48 + 31 * v44, 0, 1, v49);
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.rtf.getter();
    v50(v48 + 33 * v44, 0, 1, v49);
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.plainText.getter();
    v50(v48 + 35 * v44, 0, 1, v49);
    static UTType.tarArchive.getter();
    v50(v48 + 36 * v44, 0, 1, v49);
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    static UTType.zip.getter();
    v50(v48 + 38 * v44, 0, 1, v49);
    uint64_t v52 = v44;
    static UTType.data.getter();
    UTType.init(mimeType:conformingTo:)();
    uint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 - 8);
    int v54 = (void (**)(char *, uint64_t, uint64_t))(v51 - 24);
    uint64_t v55 = v49;
    unint64_t v56 = MEMORY[0x263F8EE78];
    unint64_t v75 = v48;
    do
    {
      uint64_t v57 = v87;
      outlined init with copy of OnScreenContent.UIMetadata?(v48, v87, &demangling cache variable for type metadata for UTType?);
      outlined init with take of URL?(v57, v41, &demangling cache variable for type metadata for UTType?);
      if ((*v53)(v41, 1, v55) == 1)
      {
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v41, &demangling cache variable for type metadata for UTType?);
      }
      else
      {
        unint64_t v58 = *v54;
        uint64_t v59 = v41;
        uint64_t v60 = v82;
        (*v54)(v82, v59, v55);
        v58(v86, (uint64_t)v60, v55);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v56 + 16) + 1, 1, v56);
        }
        unint64_t v62 = *(void *)(v56 + 16);
        unint64_t v61 = *(void *)(v56 + 24);
        if (v62 >= v61 >> 1) {
          unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, v56);
        }
        *(void *)(v56 + 16) = v62 + 1;
        uint64_t v55 = v85;
        v58((char *)(v56+ ((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80))+ *(void *)(v84 + 72) * v62), (uint64_t)v86, v85);
        uint64_t v41 = (uint64_t)v83;
      }
      v48 += v52;
      --v46;
    }
    while (v46);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    unint64_t v63 = (char *)v81;
    *uint64_t v81 = v56;
    uint64_t v64 = v79;
    uint64_t v65 = v76;
    (*(void (**)(char *, void, uint64_t))(v79 + 104))(v63, *MEMORY[0x263F4CF80], v76);
    uint64_t v66 = v80;
    specialized Set._Variant.insert(_:)(v80, v63);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v66, v65);
  }
  if (one-time initialization token for contextRetrieval != -1) {
    swift_once();
  }
  uint64_t v67 = type metadata accessor for Logger();
  __swift_project_value_buffer(v67, (uint64_t)static Logger.contextRetrieval);
  swift_bridgeObjectRetain_n();
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    v89[0] = v71;
    *(_DWORD *)uint64_t v70 = 136315650;
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA3E860, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v70 + 12) = 2080;
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA42940, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v70 + 22) = 2080;
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type OnScreenContentType and conformance OnScreenContentType, MEMORY[0x263F4CF88]);
    uint64_t v72 = Set.description.getter();
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24F9A2000, v68, v69, "%s.%s Context Retrieval should return the following content types: %s", (uint8_t *)v70, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v71, -1, -1);
    MEMORY[0x25336A180](v70, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  return v90;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          char v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t outlined destroy of ScreenContent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Bool __swiftcall String.isLongerThan(num:unit:)(Swift::Int num, NLTokenUnit unit)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14040]), sel_initWithUnit_, unit);
  uint64_t v8 = (void *)MEMORY[0x2533691D0](v5, v4);
  objc_msgSend(v7, sel_setString_, v8);

  NLTokenizer.enumerateTokens(in:using:)();
  return num < 0;
}

uint64_t String.withoutEmoji.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    uint64_t v5 = a2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i < v2; i += v9)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        int v7 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          uint64_t v22 = a1;
          uint64_t v23 = v5;
        }
        else if ((a1 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v7 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v9 = v8;
      LODWORD(v22) = v7;
      if (closure #1 in String.withoutEmoji.getter((int *)&v22)) {
        String.UnicodeScalarView.append(_:)();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v24;
    unint64_t v10 = v25;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0xE000000000000000;
  }
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  if ((v10 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(v10) & 0xF;
  }
  else {
    uint64_t v12 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    while (1)
    {
      if ((v10 & 0x1000000000000000) != 0)
      {
        unsigned int v14 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        if (v14 > 0x7F) {
          goto LABEL_27;
        }
      }
      else
      {
        if ((v10 & 0x2000000000000000) != 0)
        {
          uint64_t v22 = v11;
          uint64_t v23 = v10 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v11 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        unsigned int v14 = _decodeScalar(_:startingAt:)();
        if (v14 > 0x7F)
        {
LABEL_27:
          int v16 = (v14 & 0x3F) << 8;
          if (v14 >= 0x800)
          {
            int v19 = (v16 | (v14 >> 6) & 0x3F) << 8;
            int v20 = (((v19 | (v14 >> 12) & 0x3F) << 8) | (v14 >> 18)) - 2122219023;
            unsigned int v17 = (v19 | (v14 >> 12)) + 8487393;
            if (HIWORD(v14)) {
              unsigned int v17 = v20;
            }
          }
          else
          {
            unsigned int v17 = (v16 | (v14 >> 6)) + 33217;
          }
          goto LABEL_32;
        }
      }
      unsigned int v17 = v14 + 1;
LABEL_32:
      v13 += v15;
      uint64_t v22 = (v17 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v17) >> 3))));
      v18._uint64_t countAndFlagsBits = MEMORY[0x253369280](&v22);
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      if (v13 >= v12)
      {
        swift_bridgeObjectRelease_n();
        return v24;
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t closure #1 in String.withoutEmoji.getter(int *a1)
{
  uint64_t v2 = type metadata accessor for Unicode.NumericType();
  uint64_t v40 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v37 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Unicode.NumericType?, Unicode.NumericType?));
  MEMORY[0x270FA5388](v39);
  uint64_t v41 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v38 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v37 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v42 = (uint64_t)&v37 - v11;
  uint64_t v12 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  int v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  Swift::String v18 = (char *)&v37 - v17;
  int v19 = *a1;
  Unicode.Scalar.properties.getter();
  char v20 = Unicode.Scalar.Properties.isEmojiPresentation.getter();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v18, v12);
  if ((v20 & 1) != 0
    || (Unicode.Scalar.properties.getter(),
        char v22 = Unicode.Scalar.Properties.isEmoji.getter(),
        v21(v18, v12),
        (v22 & 1) != 0)
    || (Unicode.Scalar.properties.getter(),
        char v23 = Unicode.Scalar.Properties.isVariationSelector.getter(),
        v21(v18, v12),
        (v23 & 1) != 0)
    || v19 == 8205)
  {
    Unicode.Scalar.properties.getter();
    uint64_t v25 = v42;
    Unicode.Scalar.Properties.numericType.getter();
    v21(v16, v12);
    uint64_t v26 = v25;
    uint64_t v27 = v40;
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v10, *MEMORY[0x263F8EA38], v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v10, 0, 1, v2);
    uint64_t v28 = v41;
    uint64_t v29 = v41 + *(int *)(v39 + 48);
    outlined init with copy of Unicode.NumericType?(v26, v41);
    outlined init with copy of Unicode.NumericType?((uint64_t)v10, v29);
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    if (v30(v28, 1, v2) == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v10, &demangling cache variable for type metadata for Unicode.NumericType?);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v26, &demangling cache variable for type metadata for Unicode.NumericType?);
      int v31 = v30(v29, 1, v2);
      if (v31 == 1) {
        os_log_type_t v32 = &demangling cache variable for type metadata for Unicode.NumericType?;
      }
      else {
        os_log_type_t v32 = &demangling cache variable for type metadata for (Unicode.NumericType?, Unicode.NumericType?);
      }
      if (v31 == 1) {
        char v24 = -1;
      }
      else {
        char v24 = 0;
      }
    }
    else
    {
      uint64_t v33 = v38;
      outlined init with copy of Unicode.NumericType?(v28, v38);
      if (v30(v29, 1, v2) == 1)
      {
        outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v10, &demangling cache variable for type metadata for Unicode.NumericType?);
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v26, &demangling cache variable for type metadata for Unicode.NumericType?);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v33, v2);
        char v24 = 0;
        os_log_type_t v32 = &demangling cache variable for type metadata for (Unicode.NumericType?, Unicode.NumericType?);
      }
      else
      {
        uint64_t v34 = v37;
        (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v37, v29, v2);
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v35 = *(void (**)(char *, uint64_t))(v27 + 8);
        v35(v34, v2);
        os_log_type_t v32 = &demangling cache variable for type metadata for Unicode.NumericType?;
        outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v10, &demangling cache variable for type metadata for Unicode.NumericType?);
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v42, &demangling cache variable for type metadata for Unicode.NumericType?);
        v35((char *)v33, v2);
      }
    }
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v28, v32);
  }
  else
  {
    char v24 = 1;
  }
  return v24 & 1;
}

double closure #1 in String.withoutMarkdownURLs.getter@<D0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match);
  Regex.Match.output.getter();
  swift_bridgeObjectRelease();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t String.asDisplayURL.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v6, &demangling cache variable for type metadata for URL?);
LABEL_17:
    if (one-time initialization token for intent != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.intent);
    swift_bridgeObjectRetain_n();
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      uint64_t v63 = v61;
      *(_DWORD *)uint64_t v60 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24F9A2000, v58, v59, "Url is invalid: %s", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v61, -1, -1);
      MEMORY[0x25336A180](v60, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  uint64_t v9 = URL.host.getter();
  uint64_t v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  if (!v11) {
    goto LABEL_17;
  }
  MEMORY[0x270FA5388](v12);
  *(&v63 - 2) = v9;
  *(&v63 - 1) = v11;
  uint64_t v13 = (uint64_t)specialized String.withCString<A>(_:)((uint64_t)partial apply for closure #1 in String.asDisplayURL.getter, (uint64_t)(&v63 - 4), v9, v11);
  uint64_t v15 = (void *)v14;
  uint64_t v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v16)
  {
    uint64_t v17 = v13;
    Swift::Bool v18 = String.hasSuffix(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRetain();
    uint64_t v19 = v9;
    unint64_t v20 = v11;
    if (v18)
    {
      uint64_t v21 = String.count.getter();
      uint64_t v23 = specialized BidirectionalCollection.dropLast(_:)(v21, v9, v11, v22);
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      uint64_t v19 = MEMORY[0x253369260](v23, v25, v27, v29);
      unint64_t v20 = v30;
      swift_bridgeObjectRelease();
    }
    uint64_t v31 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0) {
      uint64_t v31 = v19 & 0xFFFFFFFFFFFFLL;
    }
    if (v31)
    {
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 46;
      v32._object = (void *)0xE100000000000000;
      uint64_t v33 = String.hasSuffix(_:)(v32);
      if (v33)
      {
        swift_bridgeObjectRetain();
        uint64_t v34 = String.count.getter();
        uint64_t v36 = specialized BidirectionalCollection.dropLast(_:)(v34, v19, v20, v35);
        uint64_t v38 = v37;
        uint64_t v40 = v39;
        uint64_t v42 = v41;
        swift_bridgeObjectRelease();
        uint64_t v19 = MEMORY[0x253369260](v36, v38, v40, v42);
        unint64_t v44 = v43;
        swift_bridgeObjectRelease();
        uint64_t v33 = swift_bridgeObjectRelease();
        unint64_t v20 = v44;
      }
      uint64_t v63 = 46;
      unint64_t v64 = 0xE100000000000000;
      MEMORY[0x270FA5388](v33);
      *(&v63 - 2) = (uint64_t)&v63;
      specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)(&v63 - 4), v19, v20);
      if ((v45 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        unint64_t v46 = String.index(after:)();
        swift_bridgeObjectRelease();
        uint64_t v47 = specialized Collection.suffix(from:)(v46, v19, v20);
        uint64_t v49 = v48;
        uint64_t v51 = v50;
        uint64_t v53 = v52;
        swift_bridgeObjectRelease();
        uint64_t v19 = MEMORY[0x253369260](v47, v49, v51, v53);
        unint64_t v20 = v54;
        swift_bridgeObjectRelease();
      }
      uint64_t v63 = v19;
      unint64_t v64 = v20;
      swift_bridgeObjectRetain();
      v55._uint64_t countAndFlagsBits = 46;
      v55._object = (void *)0xE100000000000000;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v56._uint64_t countAndFlagsBits = v17;
      v56._object = v15;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v63;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t closure #1 in String.asDisplayURL.getter@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  strlen(a1);
  if (_CFHostGetTopLevelDomain())
  {
    uint64_t result = String.init(cString:)();
    a2 = result;
    a3 = v8;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a4 = a2;
  a4[1] = a3;
  return result;
}

void *specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v7)(uint64_t *__return_ptr, void *);
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  void v12[3];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    uint64_t result = (void *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4) {
      return (void *)v12[2];
    }
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v12[0] = v5;
      v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t result = v7(&v11, v12);
      if (!v4) {
        return (void *)v11;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      return (void *)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5SS_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAGGSSsAD_pIgyrzo_Tf1cn_n(v8, v9, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    }
  }
  return result;
}

Swift::String __swiftcall String.createBreadcrumbURL(_:)(Swift::Bool a1)
{
  uint64_t countAndFlagsBits = v2;
  uint64_t v4 = v1;
  BOOL v5 = a1;
  uint64_t v6 = type metadata accessor for CharacterSet();
  unint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v133 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<Substring>);
  uint64_t v129 = *(void (***)(char *, uint64_t))(v135 - 8);
  MEMORY[0x270FA5388](v135);
  os_log_type_t v134 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v136 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  Swift::Bool v18 = (char *)&v121 - v17;
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v12, &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for intent == -1) {
      goto LABEL_3;
    }
    goto LABEL_84;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v12, v13);
  uint64_t v24 = URL.host.getter();
  if (!v25)
  {
    if (one-time initialization token for intent != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.intent);
    swift_bridgeObjectRetain_n();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      unint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v141 = v45;
      uint64_t v125 = v18;
      *(_DWORD *)unint64_t v44 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v139 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, countAndFlagsBits, &v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24F9A2000, v42, v43, "Invalid host: %s", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v45, -1, -1);
      MEMORY[0x25336A180](v44, -1, -1);

      (*(void (**)(char *, uint64_t))(v14 + 8))(v125, v13);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    }
    goto LABEL_32;
  }
  unint64_t v26 = v24;
  unint64_t v27 = v25;
  v28._uint64_t countAndFlagsBits = 779581303;
  v28._object = (void *)0xE400000000000000;
  Swift::Bool v29 = String.hasPrefix(_:)(v28);
  uint64_t v132 = v6;
  BOOL v124 = v5;
  unint64_t v128 = v7;
  if (v29)
  {
    unint64_t v30 = String.count.getter();
    uint64_t v32 = specialized Collection.dropFirst(_:)(v30, v26, v27, v31);
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    uint64_t v37 = v18;
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x253369260](v32, v34, v36, v39);
    uint64_t countAndFlagsBits = v40;
    Swift::Bool v18 = v37;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = v26;
    uint64_t countAndFlagsBits = v27;
  }
  uint64_t v46 = URL.pathComponents.getter();
  uint64_t v143 = v46;
  unint64_t v47 = *(void *)(v46 + 16);
  if (v47 <= 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
LABEL_72:
    swift_bridgeObjectRelease();
    goto LABEL_73;
  }
  uint64_t v48 = v46;
  uint64_t v125 = v18;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v49 = swift_dynamicCastClass();
  if (!v49)
  {
    swift_bridgeObjectRelease();
    uint64_t v49 = MEMORY[0x263F8EE78];
  }
  uint64_t v50 = *(void *)(v49 + 16);
  swift_release();
  uint64_t v123 = v14;
  if (v50 == v47 - 1)
  {
    uint64_t v51 = (void *)swift_dynamicCastClass();
    if (!v51)
    {
      swift_bridgeObjectRelease();
      uint64_t v51 = (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v51 = (void *)specialized _copyCollectionToContiguousArray<A>(_:)(v48, v48 + 32, 1, (2 * v47) | 1);
  }
  swift_bridgeObjectRelease();
  uint64_t v143 = (uint64_t)v51;
  uint64_t v52 = v51[2];
  if (!v52)
  {
LABEL_62:
    uint64_t v100 = v123;
    uint64_t v93 = MEMORY[0x263F8EE78];
LABEL_66:
    swift_bridgeObjectRelease();
    uint64_t v143 = v93;
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v4, countAndFlagsBits);
    uint64_t v101 = (void *)v143;
    uint64_t v141 = v143;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
    uint64_t countAndFlagsBits = v102;
    swift_bridgeObjectRelease();
    if (v101[2] < 3uLL || !v124) {
      goto LABEL_71;
    }
    uint64_t v103 = swift_bridgeObjectRelease();
    if (v101[2])
    {
      uint64_t v105 = v101[4];
      uint64_t v106 = v101[5];
      unint64_t v107 = v101 + 4;
      uint64_t v141 = v105;
      uint64_t v142 = v106;
      swift_bridgeObjectRetain_n();
      v108._uint64_t countAndFlagsBits = 32;
      v108._object = (void *)0xE100000000000000;
      String.append(_:)(v108);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v109._uint64_t countAndFlagsBits = 12222690;
      v109._object = (void *)0xA300000000000000;
      String.append(_:)(v109);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v110._uint64_t countAndFlagsBits = 32;
      v110._object = (void *)0xE100000000000000;
      String.append(_:)(v110);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v111._uint64_t countAndFlagsBits = 3026478;
      v111._object = (void *)0xE300000000000000;
      String.append(_:)(v111);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v112._uint64_t countAndFlagsBits = 32;
      v112._object = (void *)0xE100000000000000;
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v113._uint64_t countAndFlagsBits = 12222690;
      v113._object = (void *)0xA300000000000000;
      String.append(_:)(v113);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v114._uint64_t countAndFlagsBits = 32;
      v114._object = (void *)0xE100000000000000;
      String.append(_:)(v114);
      uint64_t v103 = swift_bridgeObjectRelease();
      uint64_t v115 = *(v107 - 2);
      if (v115)
      {
        uint64_t v116 = &v107[2 * v115];
        uint64_t v117 = *(v116 - 2);
        uint64_t v118 = (void *)*(v116 - 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v119._uint64_t countAndFlagsBits = v117;
        v119._object = v118;
        String.append(_:)(v119);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v141;
        uint64_t countAndFlagsBits = v142;
LABEL_71:
        (*(void (**)(char *, uint64_t))(v100 + 8))(v125, v13);
        goto LABEL_72;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v126 = v13;
  uint64_t v121 = v4;
  uint64_t v122 = countAndFlagsBits;
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  uint64_t v4 = 0xE100000000000000;
  do
  {
    if (v54 >= v51[2])
    {
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    uint64_t v55 = v51[v53 + 5];
    uint64_t v141 = v51[v53 + 4];
    uint64_t v142 = v55;
    uint64_t v139 = 45;
    unint64_t v140 = 0xE100000000000000;
    uint64_t v137 = 32;
    unint64_t v138 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v56 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v58 = v57;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew()(v51);
    }
    if (v54 >= v51[2]) {
      goto LABEL_75;
    }
    uint64_t countAndFlagsBits = (uint64_t)&v51[v53];
    *(void *)(countAndFlagsBits + 32) = v56;
    *(void *)(countAndFlagsBits + 40) = v58;
    swift_bridgeObjectRelease();
    if (v54 >= v51[2]) {
      goto LABEL_76;
    }
    uint64_t v59 = *(void *)(countAndFlagsBits + 40);
    uint64_t v141 = *(void *)(countAndFlagsBits + 32);
    uint64_t v142 = v59;
    uint64_t v139 = 95;
    unint64_t v140 = 0xE100000000000000;
    uint64_t v137 = 32;
    unint64_t v138 = 0xE100000000000000;
    uint64_t v60 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    if (v54 >= v51[2]) {
      goto LABEL_77;
    }
    ++v54;
    *(void *)(countAndFlagsBits + 32) = v60;
    *(void *)(countAndFlagsBits + 40) = v61;
    swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v51;
    v53 += 2;
  }
  while (v52 != v54);
  uint64_t v13 = v126;
  uint64_t v131 = v51[2];
  if (!v131)
  {
    uint64_t countAndFlagsBits = v122;
    uint64_t v4 = v121;
    goto LABEL_62;
  }
  uint64_t v4 = 0;
  unint64_t v62 = 0;
  ++v129;
  uint64_t v130 = (void (**)(char *, uint64_t))(v123 + 8);
  uint64_t v127 = (void (**)(char *, uint64_t))(v128 + 8);
  unint64_t v128 = 0x800000024FA42B00;
  while (v62 < v51[2])
  {
    swift_bridgeObjectRetain();
    URL.init(fileURLWithPath:)();
    uint64_t v63 = URL.lastPathComponent.getter();
    uint64_t v65 = v64;
    v66._uint64_t countAndFlagsBits = URL.pathExtension.getter();
    uint64_t countAndFlagsBits = v66._countAndFlagsBits;
    if (String.hasSuffix(_:)(v66))
    {
      swift_bridgeObjectRetain();
      uint64_t v67 = String.count.getter();
      uint64_t v69 = specialized BidirectionalCollection.dropLast(_:)(v67, v63, v65, v68);
      uint64_t countAndFlagsBits = v70;
      uint64_t v72 = v71;
      uint64_t v74 = v73;
      swift_bridgeObjectRelease();
      uint64_t v63 = MEMORY[0x253369260](v69, countAndFlagsBits, v72, v74);
      uint64_t v76 = v75;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v65 = v76;
      uint64_t v13 = v126;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*v130)(v136, v13);
    swift_bridgeObjectRelease();
    uint64_t v77 = (void *)v143;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew()(v77);
    }
    if (v62 >= v77[2]) {
      goto LABEL_79;
    }
    uint64_t v78 = (char *)v77 + v4;
    *((void *)v78 + 4) = v63;
    *((void *)v78 + 5) = v65;
    swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v77;
    if (v62 >= v77[2]) {
      goto LABEL_80;
    }
    uint64_t v79 = v13;
    unint64_t v80 = *((void *)v78 + 5);
    uint64_t v139 = *((void *)v78 + 4);
    unint64_t v140 = v80;
    swift_bridgeObjectRetain();
    uint64_t v81 = v134;
    Regex.init(_regexString:version:)();
    uint64_t v137 = 32;
    unint64_t v138 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Regex<Substring> and conformance Regex<A>, &demangling cache variable for type metadata for Regex<Substring>);
    uint64_t countAndFlagsBits = v135;
    RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
    (*v129)(v81, countAndFlagsBits);
    swift_bridgeObjectRelease();
    uint64_t v82 = v141;
    uint64_t v83 = v142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew()(v77);
    }
    if (v62 >= v77[2]) {
      goto LABEL_81;
    }
    uint64_t v13 = v79;
    uint64_t v84 = (char *)v77 + v4;
    *((void *)v84 + 4) = v82;
    *((void *)v84 + 5) = v83;
    swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v77;
    if (v62 >= v77[2]) {
      goto LABEL_82;
    }
    uint64_t v85 = *((void *)v84 + 5);
    uint64_t v141 = *((void *)v84 + 4);
    uint64_t v142 = v85;
    swift_bridgeObjectRetain();
    uint64_t v86 = v133;
    static CharacterSet.whitespaces.getter();
    uint64_t v87 = StringProtocol.trimmingCharacters(in:)();
    uint64_t v89 = v88;
    (*v127)(v86, v132);
    swift_bridgeObjectRelease();
    uint64_t v51 = (void *)v143;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew()(v51);
    }
    if (v62 >= v51[2]) {
      goto LABEL_83;
    }
    uint64_t v90 = (char *)v51 + v4;
    ++v62;
    *((void *)v90 + 4) = v87;
    *((void *)v90 + 5) = v89;
    swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v51;
    v4 += 16;
    if (v131 == v62)
    {
      uint64_t v91 = v51[2];
      if (v91)
      {
        swift_bridgeObjectRetain();
        unint64_t v92 = v51 + 5;
        uint64_t v93 = MEMORY[0x263F8EE78];
        uint64_t countAndFlagsBits = v122;
        uint64_t v4 = v121;
        do
        {
          uint64_t v95 = *(v92 - 1);
          uint64_t v94 = *v92;
          swift_bridgeObjectRetain();
          if (String.count.getter() < 2)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v141 = v93;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v93 + 16) + 1, 1);
              uint64_t v93 = v141;
            }
            unint64_t v98 = *(void *)(v93 + 16);
            unint64_t v97 = *(void *)(v93 + 24);
            if (v98 >= v97 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1);
              uint64_t v93 = v141;
            }
            *(void *)(v93 + 16) = v98 + 1;
            uint64_t v99 = v93 + 16 * v98;
            *(void *)(v99 + 32) = v95;
            *(void *)(v99 + 40) = v94;
          }
          v92 += 2;
          --v91;
        }
        while (v91);
        swift_bridgeObjectRelease();
        uint64_t v13 = v126;
      }
      else
      {
        uint64_t v93 = MEMORY[0x263F8EE78];
        uint64_t countAndFlagsBits = v122;
        uint64_t v4 = v121;
      }
      uint64_t v100 = v123;
      goto LABEL_66;
    }
  }
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  swift_once();
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.intent);
  swift_bridgeObjectRetain_n();
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v141 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v139 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, countAndFlagsBits, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v20, v21, "Url is invalid: %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v23, -1, -1);
    MEMORY[0x25336A180](v22, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
LABEL_32:
  swift_bridgeObjectRetain();
LABEL_73:
  uint64_t v103 = v4;
  uint64_t v104 = (void *)countAndFlagsBits;
LABEL_88:
  result._object = v104;
  result._uint64_t countAndFlagsBits = v103;
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      id v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5SS_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAGGSSsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = *(void **)v4;
  int64_t v7 = *(void *)(*(void *)v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  uint64_t v16 = &v6[2 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = v6[2];
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v16 + 2);
    os_log_type_t v21 = &v6[2 * a2 + 4];
    if (v16 + 2 != v21 || result >= (char *)&v21[2 * v20]) {
      uint64_t result = (char *)memmove(result, v21, 16 * v20);
    }
    uint64_t v22 = v6[2];
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      v6[2] = v23;
LABEL_20:
      *uint64_t v16 = a3;
      v16[1] = a4;
      *(void *)uint64_t v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = String.index(_:offsetBy:limitedBy:)();
    if (v7) {
      a2 = 15;
    }
    else {
      a2 = v6;
    }
    a1 = 15;
    a3 = v5;
    a4 = v4;
  }
  return MEMORY[0x270F9D8F0](a1, a2, a3, a4);
}

uint64_t specialized Collection.suffix(from:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 < a1 >> 14) {
    __break(1u);
  }
  return MEMORY[0x270F9D8F0]();
}

uint64_t specialized Collection.dropFirst(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return MEMORY[0x270F9D8F0](a1, a2, a3, a4);
  }
  unint64_t v4 = a3;
  unint64_t v5 = a2;
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v7 = 11;
  }
  unint64_t v8 = v7 | (v6 << 16);
  a1 = String.index(_:offsetBy:limitedBy:)();
  if (a2) {
    a1 = v8;
  }
  if (4 * v6 < a1 >> 14) {
    goto LABEL_14;
  }
  a2 = v8;
  a3 = v5;
  a4 = v4;
  return MEMORY[0x270F9D8F0](a1, a2, a3, a4);
}

BOOL partial apply for closure #1 in String.isLongerThan(num:unit:)()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = *v1 + 1;
  if (__OFADD__(*v1, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t *v1 = v2;
    return v2 <= v3;
  }
  return result;
}

uint64_t outlined init with copy of Unicode.NumericType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unicode.NumericType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in String.asDisplayURL.getter@<X0>(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in String.asDisplayURL.getter(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(void *a1@<X8>)
{
  BOOL result = (*(void *(**)(void *__return_ptr))(v1 + 16))(v6);
  if (!v2)
  {
    uint64_t v5 = v6[1];
    *a1 = v6[0];
    a1[1] = v5;
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, TypedValueAsyncResolvable>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of OnScreenContent.UIMetadata?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, TypedValueAsyncResolvable));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    int64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *int64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = outlined init with take of ForegroundAppDetecting(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of OnScreenContent.UIMetadata?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    int64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *int64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *int64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    char *v12 = v8;
    v12[1] = v7;
    BOOL v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    void v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ExtendedAttributeUtils, String?>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((unsigned char *)v4 - 16);
    uint64_t v7 = *(v4 - 1);
    uint64_t v6 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    char v10 = (void *)(v2[7] + 16 * result);
    *char v10 = v7;
    v10[1] = v6;
    int64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    void v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    int64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    BOOL v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t static IntentDialogUtils.getDialog(catID:response:includeContentProviderName:appName:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v27[0] = a5;
  v27[1] = a7;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v16 = *a1;
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v18 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v18 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v28 = v17;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a3, 0x65736E6F70736572, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    unint64_t v17 = v28;
    swift_bridgeObjectRelease();
  }
  if (a4)
  {
    if (one-time initialization token for contentProviderName != -1) {
      swift_once();
    }
    uint64_t v20 = static Disclaimer.contentProviderName;
    uint64_t v21 = *(void *)algn_269A49808;
    swift_bridgeObjectRetain();
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v28 = v17;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, v21, 0xD000000000000013, 0x800000024FA42BC0, v22);
    unint64_t v17 = v28;
    swift_bridgeObjectRelease();
  }
  if (a6)
  {
    swift_bridgeObjectRetain();
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v28 = v17;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27[0], a6, 0x656D614E707061, 0xE700000000000000, v23);
    unint64_t v17 = v28;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v28) = v16;
  v24._uint64_t countAndFlagsBits = CatId.rawValue.getter();
  unint64_t v28 = 0xD000000000000019;
  unint64_t v29 = 0x800000024FA42BA0;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  if (one-time initialization token for catTemplateDirectoryURL != -1) {
    swift_once();
  }
  uint64_t v25 = __swift_project_value_buffer(v12, (uint64_t)static IntentDialogUtils.catTemplateDirectoryURL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v25, v12);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v17);
  swift_bridgeObjectRelease();
  return IntentDialog.init(identifier:templateDirectoryURL:parameters:)();
}

uint64_t one-time initialization function for catTemplateDirectoryURL()
{
  uint64_t v0 = type metadata accessor for URL();
  __swift_allocate_value_buffer(v0, static IntentDialogUtils.catTemplateDirectoryURL);
  __swift_project_value_buffer(v0, (uint64_t)static IntentDialogUtils.catTemplateDirectoryURL);
  return closure #1 in variable initialization expression of static IntentDialogUtils.catTemplateDirectoryURL();
}

uint64_t closure #1 in variable initialization expression of static IntentDialogUtils.catTemplateDirectoryURL()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  type metadata accessor for IntentDialogUtils();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v11 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v12 = objc_msgSend(v11, sel_resourceURL);
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_5;
  }
  uint64_t v13 = v12;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v14(v2, v7, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_5:
    id v15 = objc_msgSend(v11, sel_bundleURL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    outlined destroy of URL?((uint64_t)v2);
    goto LABEL_6;
  }
  v14(v9, v2, v3);
LABEL_6:
  URL.appendingPathComponent(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t static IntentDialogUtils.getDialogAndInsertToFeatureStore(requestID:catID:response:text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v13 = *a3;
  unint64_t v14 = a7;
  if (!a7)
  {
    swift_bridgeObjectRetain();
    a6 = a4;
    unint64_t v14 = a5;
  }
  unint64_t v15 = CatId.rawValue.getter();
  uint64_t v17 = v16;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  type metadata accessor for FeatureStoreService();
  v21[0] = 0xD000000000000019;
  v21[1] = 0x800000024FA42BA0;
  v21[2] = a1;
  _OWORD v21[3] = a2;
  v21[4] = a6;
  v21[5] = v14;
  lazy protocol witness table accessor for type IntentDialogUtils.GenerativeAssistantToolResult and conformance IntentDialogUtils.GenerativeAssistantToolResult();
  lazy protocol witness table accessor for type IntentDialogUtils.GenerativeAssistantToolResult and conformance IntentDialogUtils.GenerativeAssistantToolResult();
  swift_bridgeObjectRetain();
  static FeatureStoreService.insert<A>(interactionId:item:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LOBYTE(v21[0]) = v13;
  return static IntentDialogUtils.getDialog(catID:response:includeContentProviderName:appName:)((char *)v21, a4, a5, 0, 0, 0, a8);
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, _IntentValue & Sendable>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v25 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(63 - v3) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v7 = MEMORY[0x263F8D310];
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v13 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v13 >= v24) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v25 + 8 * v13);
  int64_t v15 = i + 1;
  if (!v14)
  {
    int64_t v15 = i + 2;
    if (i + 2 >= v24) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = i + 3;
      if (i + 3 >= v24) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = i + 4;
        if (i + 4 >= v24) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v15);
        if (!v14)
        {
          int64_t v16 = i + 5;
          if (i + 5 < v24)
          {
            unint64_t v14 = *(void *)(v25 + 8 * v16);
            if (v14)
            {
              int64_t v15 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v15 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_36;
              }
              if (v15 >= v24) {
                break;
              }
              unint64_t v14 = *(void *)(v25 + 8 * v15);
              ++v16;
              if (v14) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          outlined consume of [String : String].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v14 - 1) & v14;
  unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
  for (i = v15; ; unint64_t v12 = v11 | (i << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v27 = *v17;
    uint64_t v28 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IntentValue & Sendable);
    swift_dynamicCast();
    outlined init with take of ForegroundAppDetecting(&v29, (uint64_t)v31);
    outlined init with take of ForegroundAppDetecting(v31, (uint64_t)v32);
    outlined init with take of ForegroundAppDetecting(v32, (uint64_t)&v30);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
    unint64_t v18 = result;
    if (v19)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v9 = v27;
      v9[1] = v28;
      uint64_t v7 = v8;
      uint64_t v10 = v2[7] + 40 * v18;
      __swift_destroy_boxed_opaque_existential_0(v10);
      unint64_t result = outlined init with take of ForegroundAppDetecting(&v30, v10);
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v20 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v20 = v27;
    v20[1] = v28;
    unint64_t result = outlined init with take of ForegroundAppDetecting(&v30, v2[7] + 40 * result);
    uint64_t v21 = v2[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_34;
    }
    void v2[2] = v23;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aCatid_3[8 * a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys()
{
  return IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t IntentDialogUtils.GenerativeAssistantToolResult.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

double protocol witness for Decodable.init(from:) in conformance IntentDialogUtils.GenerativeAssistantToolResult@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized IntentDialogUtils.GenerativeAssistantToolResult.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntentDialogUtils.GenerativeAssistantToolResult(void *a1)
{
  return IntentDialogUtils.GenerativeAssistantToolResult.encode(to:)(a1);
}

uint64_t IntentDialogUtils.deinit()
{
  return v0;
}

uint64_t IntentDialogUtils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type IntentDialogUtils.GenerativeAssistantToolResult and conformance IntentDialogUtils.GenerativeAssistantToolResult()
{
  unint64_t result = lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult and conformance IntentDialogUtils.GenerativeAssistantToolResult;
  if (!lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult and conformance IntentDialogUtils.GenerativeAssistantToolResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult and conformance IntentDialogUtils.GenerativeAssistantToolResult);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult and conformance IntentDialogUtils.GenerativeAssistantToolResult;
  if (!lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult and conformance IntentDialogUtils.GenerativeAssistantToolResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult and conformance IntentDialogUtils.GenerativeAssistantToolResult);
  }
  return result;
}

uint64_t type metadata accessor for IntentDialogUtils()
{
  return self;
}

uint64_t method lookup function for IntentDialogUtils(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IntentDialogUtils);
}

uint64_t destroy for IntentDialogUtils.GenerativeAssistantToolResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for IntentDialogUtils.GenerativeAssistantToolResult(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IntentDialogUtils.GenerativeAssistantToolResult(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for IntentDialogUtils.GenerativeAssistantToolResult(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IntentDialogUtils.GenerativeAssistantToolResult(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IntentDialogUtils.GenerativeAssistantToolResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IntentDialogUtils.GenerativeAssistantToolResult()
{
  return &type metadata for IntentDialogUtils.GenerativeAssistantToolResult;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      unint64_t result = swift_bridgeObjectRelease();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

uint64_t specialized IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6449746163 && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4974736575716572 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized IntentDialogUtils.GenerativeAssistantToolResult.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  char v25 = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  return result;
}

unint64_t lazy protocol witness table accessor for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys and conformance IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys);
  }
  return result;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24F9E24C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

void *type metadata accessor for IntentDialogUtils.GenerativeAssistantToolResult.CodingKeys()
{
  return &unk_27011B888;
}

uint64_t dispatch thunk of ForegroundAppDetecting.getForegroundAppBundleID()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ForegroundAppDetector.getForegroundAppBundleID()()
{
  double v1 = v0;
  uint64_t v29 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v29 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v29);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  BOOL v7 = (char *)&v27 - v6;
  id v8 = objc_msgSend(self, sel_configurationForDefaultMainDisplayMonitor);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = MEMORY[0x263F8EE78];
  uint64_t v10 = v9 + 16;
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = partial apply for closure #1 in ForegroundAppDetector.getForegroundAppBundleID();
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed FBSDisplayLayoutMonitor, @guaranteed FBSDisplayLayout?, @guaranteed FBSDisplayLayoutTransitionContext?) -> ();
  aBlock[3] = &block_descriptor_1;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v14 = v11;
  swift_release();
  objc_msgSend(v8, sel_setTransitionHandler_, v13);
  _Block_release(v13);
  uint64_t v15 = self;
  id v28 = v8;
  id v16 = objc_msgSend(v15, sel_monitorWithConfiguration_, v8);
  static DispatchTime.now()();
  MEMORY[0x253369020](v5, v1);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v18 = v5;
  uint64_t v19 = v29;
  v17(v18, v29);
  MEMORY[0x253369510](v7);
  v17(v7, v19);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    lazy protocol witness table accessor for type ForegroundAppDetector.DetectorError and conformance ForegroundAppDetector.DetectorError();
    swift_allocError();
    swift_willThrow();
    objc_msgSend(v16, sel_invalidate);

    swift_release();
  }
  else
  {
    uint64_t v20 = v16;
    id v21 = v28;
    swift_beginAccess();
    uint64_t v22 = *(void *)(*(void *)v10 + 16);
    if (v22)
    {
      uint64_t v23 = *(void *)v10 + 16 * v22;
      id v16 = *(id *)(v23 + 16);
      BOOL v7 = *(char **)(v23 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      id v16 = 0;
      BOOL v7 = 0;
    }
    objc_msgSend(v20, sel_invalidate);

    swift_release();
  }
  uint64_t v24 = (uint64_t)v16;
  char v25 = v7;
  result.value._object = v25;
  result.value._uint64_t countAndFlagsBits = v24;
  return result;
}

uint64_t sub_24F9E2984()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void closure #1 in ForegroundAppDetector.getForegroundAppBundleID()(int a1, id a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    unint64_t v4 = (unint64_t)a2;
    id v5 = objc_msgSend(a2, sel_elements);
    type metadata accessor for FBSDisplayLayoutElement();
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7)
      {
LABEL_4:
        BOOL v8 = __OFSUB__(v7, 1);
        unint64_t v9 = v7 - 1;
        if (v8)
        {
          __break(1u);
        }
        else if ((v6 & 0xC000000000000001) == 0)
        {
          if ((v9 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else
          {
            unint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRelease();
            if (v9 < v10) {
              goto LABEL_8;
            }
          }
          __break(1u);
          goto LABEL_31;
        }
        MEMORY[0x2533696C0](v9, v6);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
LABEL_8:
        id v11 = objc_msgSend((id)v4, sel_elements);
        unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v4 >> 62))
        {
          uint64_t v12 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v12)
          {
LABEL_10:
            if (v12 < 1)
            {
              __break(1u);
              return;
            }
            uint64_t v13 = 0;
            uint64_t v14 = (void *)MEMORY[0x263F8EE78];
            do
            {
              if ((v4 & 0xC000000000000001) != 0) {
                id v15 = (id)MEMORY[0x2533696C0](v13, v4);
              }
              else {
                id v15 = *(id *)(v4 + 8 * v13 + 32);
              }
              id v16 = v15;
              id v17 = objc_msgSend(v15, sel_bundleIdentifier);
              if (v17)
              {
                uint64_t v18 = v17;
                uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v21 = v20;

                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
                }
                unint64_t v23 = v14[2];
                unint64_t v22 = v14[3];
                if (v23 >= v22 >> 1) {
                  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v14);
                }
                v14[2] = v23 + 1;
                uint64_t v24 = &v14[2 * v23];
                v24[4] = v19;
                v24[5] = v21;
              }
              else
              {
              }
              ++v13;
            }
            while (v12 != v13);
            goto LABEL_33;
          }
LABEL_32:
          uint64_t v14 = (void *)MEMORY[0x263F8EE78];
LABEL_33:
          swift_bridgeObjectRelease_n();
          swift_beginAccess();
          *(void *)(a4 + 16) = v14;
          swift_bridgeObjectRelease();
          OS_dispatch_semaphore.signal()();
          return;
        }
LABEL_31:
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        if (v12) {
          goto LABEL_10;
        }
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v7) {
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_24F9E2CAC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in ForegroundAppDetector.getForegroundAppBundleID()(int a1, void *a2, uint64_t a3)
{
  closure #1 in ForegroundAppDetector.getForegroundAppBundleID()(a1, a2, a3, *(void *)(v3 + 16));
}

void thunk for @escaping @callee_guaranteed (@guaranteed FBSDisplayLayoutMonitor, @guaranteed FBSDisplayLayout?, @guaranteed FBSDisplayLayoutTransitionContext?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ForegroundAppDetector.DetectorError and conformance ForegroundAppDetector.DetectorError()
{
  unint64_t result = lazy protocol witness table cache variable for type ForegroundAppDetector.DetectorError and conformance ForegroundAppDetector.DetectorError;
  if (!lazy protocol witness table cache variable for type ForegroundAppDetector.DetectorError and conformance ForegroundAppDetector.DetectorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForegroundAppDetector.DetectorError and conformance ForegroundAppDetector.DetectorError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ForegroundAppDetector.DetectorError and conformance ForegroundAppDetector.DetectorError;
  if (!lazy protocol witness table cache variable for type ForegroundAppDetector.DetectorError and conformance ForegroundAppDetector.DetectorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForegroundAppDetector.DetectorError and conformance ForegroundAppDetector.DetectorError);
  }
  return result;
}

unint64_t type metadata accessor for FBSDisplayLayoutElement()
{
  unint64_t result = lazy cache variable for type metadata for FBSDisplayLayoutElement;
  if (!lazy cache variable for type metadata for FBSDisplayLayoutElement)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for FBSDisplayLayoutElement);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ForegroundAppDetector.DetectorError()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ForegroundAppDetector.DetectorError()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ForegroundAppDetector.DetectorError()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ForegroundAppDetector.DetectorError()
{
  return Hasher._finalize()();
}

uint64_t getEnumTagSinglePayload for ForegroundAppDetector.DetectorError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ForegroundAppDetector.DetectorError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24F9E2FE4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for ForegroundAppDetector.DetectorError()
{
  return 0;
}

ValueMetadata *type metadata accessor for ForegroundAppDetector.DetectorError()
{
  return &type metadata for ForegroundAppDetector.DetectorError;
}

ValueMetadata *type metadata accessor for ForegroundAppDetector()
{
  return &type metadata for ForegroundAppDetector;
}

double one-time initialization function for instance()
{
  *(void *)&v2[8] = type metadata accessor for GenerativeAssistantFeatureFlagManager();
  *(void *)&v2[16] = MEMORY[0x263F406E8];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v1);
  static GenerativeAssistantFeatureFlagManager.instance.getter();
  __swift_project_boxed_opaque_existential_1(&v1, *(uint64_t *)&v2[8]);
  v2[24] = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isPromptOverrideEnabled.getter() & 1;
  static DefaultPromptFactory.instance = v1;
  *(_OWORD *)algn_269A45D60 = *(_OWORD *)v2;
  double result = *(double *)&v2[9];
  *(_OWORD *)&algn_269A45D60[9] = *(_OWORD *)&v2[9];
  return result;
}

uint64_t static DefaultPromptFactory.instance.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return outlined init with copy of DefaultPromptFactory((uint64_t)&static DefaultPromptFactory.instance, a1);
}

void one-time initialization function for mulitModalTemplateID()
{
  static DefaultPromptFactory.mulitModalTemplateID = 0x6C756D2E69726973;
  unk_269A496B0 = 0xEF6C61646F6D6974;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DefaultPromptFactory.createPrompt(appBundleID:interactionMode:)(Swift::String_optional appBundleID, GenerativeAssistantActions::GATInteractionMode_optional interactionMode)
{
  uint64_t v4 = v3;
  unint64_t v5 = v2;
  unint64_t v6 = *(unsigned __int8 **)&interactionMode;
  object = appBundleID.value._object;
  uint64_t countAndFlagsBits = appBundleID.value._countAndFlagsBits;
  uint64_t v9 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v67 = *(void *)(v12 - 8);
  uint64_t v68 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v70 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  id v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v69 = *v6;
  LODWORD(v71) = specialized static TamaleUtils.requestWithTamale(appBundleID:)(countAndFlagsBits, (uint64_t)object);
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v18 = __swift_project_value_buffer(v14, (uint64_t)static Logger.modelInteraction);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v18, v14);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v63 = v18;
    uint64_t v22 = v21;
    uint64_t v23 = swift_slowAlloc();
    unint64_t v64 = v5;
    uint64_t v24 = v23;
    uint64_t v73 = v23;
    *(_DWORD *)uint64_t v22 = 136315650;
    uint64_t v65 = v11;
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v73);
    uint64_t v66 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000024FA436A0, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 22) = 2080;
    if (v71) {
      uint64_t v25 = 0x656C616D6174;
    }
    else {
      uint64_t v25 = 0x6D6574737973;
    }
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, 0xE600000000000000, &v73);
    uint64_t v11 = v65;
    uint64_t v4 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24F9A2000, v19, v20, "%s.%s Prompt type used %s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    uint64_t v26 = v24;
    unint64_t v5 = v64;
    MEMORY[0x25336A180](v26, -1, -1);
    MEMORY[0x25336A180](v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (*(unsigned char *)(v5 + 40) == 1 && (DefaultPromptFactory.getOverridePath(from:)(v71 & 1), v27))
  {
    id v28 = v70;
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    static String.Encoding.utf8.getter();
    uint64_t v29 = String.init(contentsOf:encoding:)();
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v28, v68);
    }
    else
    {
      uint64_t v11 = v29;
      unint64_t v5 = v30;
      swift_bridgeObjectRetain_n();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.info.getter();
      unsigned int v47 = v46;
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v48 = swift_slowAlloc();
        unsigned int v69 = v47;
        uint64_t v49 = v48;
        uint64_t v71 = swift_slowAlloc();
        uint64_t v73 = v71;
        *(_DWORD *)uint64_t v49 = 136315650;
        uint64_t v66 = 0;
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 12) = 2080;
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000024FA436A0, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 22) = 2080;
        uint64_t v65 = v49 + 24;
        swift_bridgeObjectRetain();
        uint64_t v51 = specialized Collection.prefix(_:)(100, v11, v5, v50);
        uint64_t v53 = v52;
        uint64_t v55 = v54;
        uint64_t v57 = v56;
        swift_bridgeObjectRelease();
        uint64_t v58 = MEMORY[0x253369260](v51, v53, v55, v57);
        unint64_t v60 = v59;
        swift_bridgeObjectRelease();
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24F9A2000, v45, (os_log_type_t)v69, "%s.%s Prompt loaded:  %s...", (uint8_t *)v49, 0x20u);
        uint64_t v61 = v71;
        swift_arrayDestroy();
        MEMORY[0x25336A180](v61, -1, -1);
        MEMORY[0x25336A180](v49, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(char *, uint64_t))(v67 + 8))(v70, v68);
    }
  }
  else
  {
    if (v71)
    {
      uint64_t v11 = 0x1000000000000A1FLL;
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        uint64_t v73 = v34;
        *(_DWORD *)uint64_t v33 = 136315394;
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v33 + 12) = 2080;
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000024FA436A0, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v31, v32, "%s.%s Using tamale prompt", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v34, -1, -1);
        MEMORY[0x25336A180](v33, -1, -1);
      }

      uint64_t v35 = "Imagine you are an expert narrator, seeing this real world scene, with your own eyes.\n"
            "\n"
            "Analyze what you see and do the following:\n"
            "\n"
            "1. Identify the key elements: Recognize the main subject, such as objects, diagrams, charts, scenes, locatio"
            "ns, animals, plants, or text.   Keep this to yourself.\n"
            "\n"
            "2. Determine the context: Infer the likely category based on the list below, and think about the most import"
            "ant insights and information    to share. Keep this to yourself.\n"
            "\n"
            "- Animals, Plants & Nature: Identify the subject and learn interesting facts & important details\n"
            "- Points of Interest: Learn about the significance, history, and design of buildings & landmarks\n"
            "- Foods & Ingredients: Identify and learn about nutritional value, cooking tips & safety info\n"
            "- Signs & Symbols: Understand the meaning, purpose, or instructions being communicated\n"
            "- Art & Literature: Identify and learn about the piece, its artist, and their inspiration\n"
            "- Natural Environments: Identify and learn about the  environmental elements & systems\n"
            "- Cultural Activities & Events: Learn the background and/or history of a tradition or celebration\n"
            "- Historically Significant Scenes: Understand the background and context, and learn interesting facts\n"
            "- Urban & Man-Made: Learn about the history, architecture or engineering\n"
            "- Repair or Fix: Identify and resolve issues related to broken or malfunctioning items\n"
            "- How-To Instructions: Get guidance to perform a specific task or process\n"
            "- Puzzles and Riddles: Understand the process to find an answer and/or find the answer\n"
            "- Math Problems: Understand the calculation process and/or find the answer\n"
            "- Health & Medical: Get advice on treatment options & when to see a professional\n"
            "- Statistical & Data Analysis: Learn how to interpret the data, and any interesting call-outs\n"
            "- Historical & Cultural Diagrams: Analyze & understand background, context and connections\n"
            "- Technical & Engineering: Learn how to read  and understand details from diagrams or blueprints\n"
            "- Scientific Data: Interpret and understand formulas, concepts and processes\n"
            "- Business & Organizational: Interpret & understand processes, structures, or project timelines\n"
            "\n"
            "3. Provide insight and information based on the categorization.\n"
            "\n"
            "- Never refer to what you see as an image or scene; focus on delivering relevant info about what you’re view"
            "ing\n"
            "- Be interesting. Never include information that’s shallow, mundane or visually obvious.\n"
            "- Be very concise. Address the most likely user intent in 2 brief sentences or less\n"
            "- Never refer to yourself in the first person\n"
            "- Never refer to a viewer or audience";
    }
    else
    {
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      BOOL v38 = os_log_type_enabled(v36, v37);
      if (v69 > 1)
      {
        uint64_t v11 = 0x1000000000002835;
        if (v38)
        {
          uint64_t v41 = swift_slowAlloc();
          uint64_t v42 = swift_slowAlloc();
          uint64_t v73 = v42;
          *(_DWORD *)uint64_t v41 = 136315394;
          uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v41 + 12) = 2080;
          uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000024FA436A0, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v36, v37, "%s.%s Using default system prompt", (uint8_t *)v41, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v42, -1, -1);
          MEMORY[0x25336A180](v41, -1, -1);
        }

        uint64_t v35 = aYouAreAHelpful;
      }
      else
      {
        if (v38)
        {
          uint64_t v39 = swift_slowAlloc();
          uint64_t v40 = swift_slowAlloc();
          uint64_t v73 = v40;
          *(_DWORD *)uint64_t v39 = 136315394;
          uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v39 + 12) = 2080;
          uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x800000024FA436A0, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v36, v37, "%s.%s Using voice-forward/voice-only prompt", (uint8_t *)v39, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v40, -1, -1);
          MEMORY[0x25336A180](v39, -1, -1);
        }

        uint64_t v11 = 0x1000000000002EC2;
        uint64_t v35 = aYouAreAHelpful_0;
      }
    }
    unint64_t v5 = (unint64_t)(v35 - 32) | 0x8000000000000000;
  }
  uint64_t v43 = v11;
  unint64_t v44 = (void *)v5;
  result._object = v44;
  result._uint64_t countAndFlagsBits = v43;
  return result;
}

uint64_t DefaultPromptFactory.getOverridePath(from:)(char a1)
{
  void (*v1)(uint64_t *__return_ptr, id);
  id v2;
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, id);
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void (*v16)(uint64_t *__return_ptr, id);
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  if ((a1 & 1) == 0)
  {
    if (one-time initialization token for _systemPromptOverridePath != -1) {
      swift_once();
    }
    if (byte_269A45918 != 1) {
      return 0;
    }
    long long v1 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A45900 + 1);
    unint64_t v2 = (id)static Overrides._systemPromptOverridePath;
    swift_bridgeObjectRetain();
    swift_retain();
    v1(&v29, v2);
    swift_release();
    swift_bridgeObjectRelease();

    return v29;
  }
  if (one-time initialization token for _tamaleAppDebugPromptOverridePath != -1) {
    swift_once();
  }
  if (byte_269A458E8)
  {
    uint64_t v4 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A458D0 + 1);
    unint64_t v5 = (id)static Overrides._tamaleAppDebugPromptOverridePath;
    swift_bridgeObjectRetain();
    swift_retain();
    v4(&v29, v5);
    swift_release();
    swift_bridgeObjectRelease();

    unint64_t v6 = v30;
    if (v30)
    {
      uint64_t v3 = v29;
      uint64_t v7 = objc_msgSend(self, sel_defaultManager);
      id v8 = (void *)MEMORY[0x2533691D0](v3, v6);
      uint64_t v9 = objc_msgSend(v7, sel_fileExistsAtPath_, v8);

      if (v9)
      {
        if (one-time initialization token for modelInteraction != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)static Logger.modelInteraction);
        uint64_t v11 = Logger.logObject.getter();
        uint64_t v12 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v11, v12)) {
          goto LABEL_27;
        }
        uint64_t v13 = swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        uint64_t v29 = v14;
        *(_DWORD *)uint64_t v13 = 136315394;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 12) = 2080;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000024FA48E50, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v15 = "%s.%s Using AppDebugPath";
LABEL_26:
        _os_log_impl(&dword_24F9A2000, v11, v12, v15, (uint8_t *)v13, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v14, -1, -1);
        MEMORY[0x25336A180](v13, -1, -1);
LABEL_27:

        return v3;
      }
      swift_bridgeObjectRelease();
    }
  }
  if (one-time initialization token for _tamalePromptOverridePath != -1) {
    swift_once();
  }
  if (byte_269A458B8)
  {
    uint64_t v16 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A458A0 + 1);
    id v17 = (id)static Overrides._tamalePromptOverridePath;
    swift_bridgeObjectRetain();
    swift_retain();
    v16(&v29, v17);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v18 = v30;
    if (v30)
    {
      uint64_t v3 = v29;
      uint64_t v19 = objc_msgSend(self, sel_defaultManager);
      os_log_type_t v20 = (void *)MEMORY[0x2533691D0](v3, v18);
      uint64_t v21 = objc_msgSend(v19, sel_fileExistsAtPath_, v20);

      if (v21)
      {
        if (one-time initialization token for modelInteraction != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        __swift_project_value_buffer(v22, (uint64_t)static Logger.modelInteraction);
        uint64_t v11 = Logger.logObject.getter();
        uint64_t v12 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v11, v12)) {
          goto LABEL_27;
        }
        uint64_t v13 = swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        uint64_t v29 = v14;
        *(_DWORD *)uint64_t v13 = 136315394;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 12) = 2080;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000024FA48E50, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v15 = "%s.%s Using PromptOverridePath";
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
    }
  }
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.modelInteraction);
  uint64_t v24 = Logger.logObject.getter();
  uint64_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v26 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x800000024FA48E50, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v24, v25, "%s.%s Override path not available", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v27, -1, -1);
    MEMORY[0x25336A180](v26, -1, -1);
  }

  return 0;
}

Swift::String_optional __swiftcall DefaultPromptFactory.getTemplateID(appBundleID:interactionMode:)(Swift::String_optional appBundleID, GenerativeAssistantActions::GATInteractionMode_optional interactionMode)
{
  unsigned int v2 = *(unsigned __int8 *)interactionMode.value;
  if (specialized static TamaleUtils.requestWithTamale(appBundleID:)(appBundleID.value._countAndFlagsBits, (uint64_t)appBundleID.value._object))
  {
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.modelInteraction);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v24 = v7;
      *(_DWORD *)uint64_t v6 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA48DE0, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v4, v5, "%s.%s Using tamale template", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v7, -1, -1);
      MEMORY[0x25336A180](v6, -1, -1);
    }

    unint64_t v8 = 0xD00000000000001DLL;
    uint64_t v9 = "siri.visualIntelligenceCamera";
LABEL_13:
    unint64_t v15 = (unint64_t)(v9 - 32) | 0x8000000000000000;
    goto LABEL_21;
  }
  if (v2 <= 1)
  {
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.modelInteraction);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v24 = v14;
      *(_DWORD *)uint64_t v13 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA48DE0, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v11, v12, "%s.%s Using voice-forward/voice-only template", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v14, -1, -1);
      MEMORY[0x25336A180](v13, -1, -1);
    }

    unint64_t v8 = 0xD000000000000011;
    uint64_t v9 = "siri.voiceForward";
    goto LABEL_13;
  }
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.modelInteraction);
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v24 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x800000024FA3EC20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA48DE0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v17, v18, "%s.%s Using default system template", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v20, -1, -1);
    MEMORY[0x25336A180](v19, -1, -1);
  }

  if (one-time initialization token for mulitModalTemplateID != -1) {
    swift_once();
  }
  unint64_t v8 = static DefaultPromptFactory.mulitModalTemplateID;
  unint64_t v15 = unk_269A496B0;
  swift_bridgeObjectRetain();
LABEL_21:
  uint64_t v21 = v8;
  uint64_t v22 = (void *)v15;
  result.value._object = v22;
  result.value._uint64_t countAndFlagsBits = v21;
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v6 = a2;
    }
    uint64_t v7 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v7 = 11;
    }
    uint64_t v8 = v7 | (v6 << 16);
    uint64_t v9 = String.index(_:offsetBy:limitedBy:)();
    if (v10) {
      a2 = v8;
    }
    else {
      a2 = v9;
    }
    a1 = 15;
    a3 = v5;
    a4 = v4;
  }
  return MEMORY[0x270F9D8F0](a1, a2, a3, a4);
}

uint64_t dispatch thunk of PromptFactory.createPrompt(appBundleID:interactionMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of PromptFactory.getTemplateID(appBundleID:interactionMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t initializeWithCopy for DefaultPromptFactory(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for DefaultPromptFactory(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DefaultPromptFactory(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultPromptFactory(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultPromptFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultPromptFactory()
{
  return &type metadata for DefaultPromptFactory;
}

unint64_t static Logger.category.getter()
{
  return 0xD000000000000018;
}

unint64_t static Logger.subsystem.getter()
{
  return 0xD00000000000003FLL;
}

uint64_t one-time initialization function for contentLoader(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.contentLoader);
}

uint64_t static Logger.contentLoader.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for contentLoader, MEMORY[0x263F90268], (uint64_t)static Logger.contentLoader, a1);
}

uint64_t one-time initialization function for contentSelector(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.contentSelector);
}

uint64_t static Logger.contentSelector.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for contentSelector, MEMORY[0x263F90268], (uint64_t)static Logger.contentSelector, a1);
}

uint64_t one-time initialization function for contextRetrieval(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.contextRetrieval);
}

uint64_t static Logger.contextRetrieval.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for contextRetrieval, MEMORY[0x263F90268], (uint64_t)static Logger.contextRetrieval, a1);
}

uint64_t one-time initialization function for foregroundAppDetector(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.foregroundAppDetector);
}

uint64_t static Logger.foregroundAppDetector.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for foregroundAppDetector, MEMORY[0x263F90268], (uint64_t)static Logger.foregroundAppDetector, a1);
}

uint64_t one-time initialization function for generativeResponse(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.generativeResponse);
}

uint64_t static Logger.generativeResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for generativeResponse, MEMORY[0x263F90268], (uint64_t)static Logger.generativeResponse, a1);
}

uint64_t one-time initialization function for genFromMediaController(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.genFromMediaController);
}

uint64_t static Logger.genFromMediaController.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for genFromMediaController, MEMORY[0x263F90268], (uint64_t)static Logger.genFromMediaController, a1);
}

uint64_t one-time initialization function for genFromTextController(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.genFromTextController);
}

uint64_t static Logger.genFromTextController.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for genFromTextController, MEMORY[0x263F90268], (uint64_t)static Logger.genFromTextController, a1);
}

uint64_t one-time initialization function for kgFallback(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.kgFallback);
}

uint64_t static Logger.kgFallback.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for kgFallback, MEMORY[0x263F90268], (uint64_t)static Logger.kgFallback, a1);
}

uint64_t one-time initialization function for imageLoader(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.imageLoader);
}

uint64_t static Logger.imageLoader.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for imageLoader, MEMORY[0x263F90268], (uint64_t)static Logger.imageLoader, a1);
}

uint64_t one-time initialization function for imageUtils(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.imageUtils);
}

uint64_t static Logger.imageUtils.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for imageUtils, MEMORY[0x263F90268], (uint64_t)static Logger.imageUtils, a1);
}

uint64_t one-time initialization function for intent(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.intent);
}

uint64_t static Logger.intent.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for intent, MEMORY[0x263F90268], (uint64_t)static Logger.intent, a1);
}

uint64_t one-time initialization function for richContentLoader(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.richContentLoader);
}

uint64_t static Logger.richContentLoader.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for richContentLoader, MEMORY[0x263F90268], (uint64_t)static Logger.richContentLoader, a1);
}

uint64_t one-time initialization function for modelInteraction(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.modelInteraction);
}

uint64_t static Logger.modelInteraction.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for modelInteraction, MEMORY[0x263F90268], (uint64_t)static Logger.modelInteraction, a1);
}

uint64_t one-time initialization function for onscreen(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.onscreen);
}

uint64_t static Logger.onscreen.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for onscreen, MEMORY[0x263F90268], (uint64_t)static Logger.onscreen, a1);
}

uint64_t one-time initialization function for screenshot(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.screenshot);
}

uint64_t static Logger.screenshot.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for screenshot, MEMORY[0x263F90268], (uint64_t)static Logger.screenshot, a1);
}

uint64_t one-time initialization function for shortcuts(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.shortcuts);
}

uint64_t static Logger.shortcuts.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for shortcuts, MEMORY[0x263F90268], (uint64_t)static Logger.shortcuts, a1);
}

uint64_t one-time initialization function for textAssistantHandoff(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.textAssistantHandoff);
}

uint64_t static Logger.textAssistantHandoff.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for textAssistantHandoff, MEMORY[0x263F90268], (uint64_t)static Logger.textAssistantHandoff, a1);
}

uint64_t one-time initialization function for confirmationUtils(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.confirmationUtils);
}

uint64_t static Logger.confirmationUtils.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for confirmationUtils, MEMORY[0x263F90268], (uint64_t)static Logger.confirmationUtils, a1);
}

uint64_t one-time initialization function for dialog(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.dialog);
}

uint64_t static Logger.dialog.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for dialog, MEMORY[0x263F90268], (uint64_t)static Logger.dialog, a1);
}

uint64_t one-time initialization function for metricsLogger(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.metricsLogger);
}

uint64_t static Logger.metricsLogger.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for metricsLogger, MEMORY[0x263F90268], (uint64_t)static Logger.metricsLogger, a1);
}

uint64_t one-time initialization function for signposter()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static Logger.signposter);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.signposter);
  return OSSignposter.init(subsystem:category:)();
}

uint64_t static Logger.signposter.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for signposter, MEMORY[0x263F90228], (uint64_t)static Logger.signposter, a1);
}

uint64_t one-time initialization function for autoBugCapture(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.autoBugCapture);
}

uint64_t static Logger.autoBugCapture.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for autoBugCapture, MEMORY[0x263F90268], (uint64_t)static Logger.autoBugCapture, a1);
}

uint64_t one-time initialization function for runningBoard(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.runningBoard);
}

uint64_t static Logger.runningBoard.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for runningBoard, MEMORY[0x263F90268], (uint64_t)static Logger.runningBoard, a1);
}

uint64_t one-time initialization function for selfSchemaLogger(uint64_t a1)
{
  return one-time initialization function for contentLoader(a1, static Logger.selfSchemaLogger);
}

uint64_t one-time initialization function for contentLoader(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t static Logger.selfSchemaLogger.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.contentLoader.getter(&one-time initialization token for selfSchemaLogger, MEMORY[0x263F90268], (uint64_t)static Logger.selfSchemaLogger, a1);
}

uint64_t static Logger.contentLoader.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  return v9(a4, v8, v7);
}

uint64_t DummyEnum.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DummyEnum.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

unint64_t DummyEnum.rawValue.getter()
{
  return 0xD000000000000015;
}

unint64_t lazy protocol witness table accessor for type DummyEnum and conformance DummyEnum()
{
  unint64_t result = lazy protocol witness table cache variable for type DummyEnum and conformance DummyEnum;
  if (!lazy protocol witness table cache variable for type DummyEnum and conformance DummyEnum)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DummyEnum and conformance DummyEnum);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DummyEnum()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DummyEnum()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DummyEnum()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DummyEnum@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance DummyEnum, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DummyEnum(void *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x800000024FA40FF0;
}

unsigned char *storeEnumTagSinglePayload for DummyEnum(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24F9E5818);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DummyEnum()
{
  return &type metadata for DummyEnum;
}

uint64_t GenerateTextController.init(attemptTextAssistantHandoff:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v13 = &type metadata for DefaultModelSessionFactory;
  uint64_t v14 = &protocol witness table for DefaultModelSessionFactory;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  char v10 = &type metadata for TextAssistantHandoff;
  uint64_t v11 = &protocol witness table for TextAssistantHandoff;
  *(void *)&long long v9 = swift_allocObject();
  outlined init with copy of TextAssistantHandoff((uint64_t)&static TextAssistantHandoff.instance, v9 + 16);
  outlined init with copy of ModelSessionFactory((uint64_t)v12, (uint64_t)v8);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v6 = &type metadata for DefaultPromptFactory;
  uint64_t v7 = &protocol witness table for DefaultPromptFactory;
  *(void *)&long long v5 = swift_allocObject();
  outlined init with copy of DefaultPromptFactory((uint64_t)&static DefaultPromptFactory.instance, v5 + 16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  outlined init with take of ForegroundAppDetecting(v8, a2);
  outlined init with take of ForegroundAppDetecting(&v5, a2 + 40);
  uint64_t result = outlined init with take of ForegroundAppDetecting(&v9, a2 + 80);
  *(unsigned char *)(a2 + 120) = a1 & 1;
  return result;
}

uint64_t sub_24F9E59A8()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t outlined init with copy of TextAssistantHandoff(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24F9E5A44()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 632) = v8;
  *(void *)(v9 + 624) = v27;
  *(_OWORD *)(v9 + 592) = v25;
  *(_OWORD *)(v9 + 608) = v26;
  *(_OWORD *)(v9 + 576) = v24;
  *(void *)(v9 + 568) = a8;
  *(void *)(v9 + 560) = a7;
  *(void *)(v9 + 552) = a6;
  *(void *)(v9 + 544) = a5;
  *(void *)(v9 + 536) = a4;
  *(void *)(v9 + 528) = a3;
  *(void *)(v9 + 520) = a2;
  *(void *)(v9 + 512) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v9 + 640) = swift_task_alloc();
  *(void *)(v9 + 648) = swift_task_alloc();
  type metadata accessor for ModelResponse();
  *(void *)(v9 + 656) = swift_task_alloc();
  *(void *)(v9 + 664) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GATError();
  *(void *)(v9 + 672) = v10;
  *(void *)(v9 + 680) = *(void *)(v10 - 8);
  *(void *)(v9 + 688) = swift_task_alloc();
  *(void *)(v9 + 696) = swift_task_alloc();
  *(void *)(v9 + 704) = swift_task_alloc();
  *(void *)(v9 + 712) = swift_task_alloc();
  *(void *)(v9 + 720) = swift_task_alloc();
  *(void *)(v9 + 728) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for RequestType();
  *(void *)(v9 + 736) = v11;
  *(void *)(v9 + 744) = *(void *)(v11 - 8);
  *(void *)(v9 + 752) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Date();
  *(void *)(v9 + 760) = v12;
  *(void *)(v9 + 768) = *(void *)(v12 - 8);
  *(void *)(v9 + 776) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  *(void *)(v9 + 784) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for LocalizedStringResource();
  *(void *)(v9 + 792) = v13;
  *(void *)(v9 + 800) = *(void *)(v13 - 8);
  *(void *)(v9 + 808) = swift_task_alloc();
  *(void *)(v9 + 816) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for ConfirmationActionName();
  *(void *)(v9 + 824) = v14;
  *(void *)(v9 + 832) = *(void *)(v14 - 8);
  *(void *)(v9 + 840) = swift_task_alloc();
  *(void *)(v9 + 848) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for IntentDialog();
  *(void *)(v9 + 856) = v15;
  *(void *)(v9 + 864) = *(void *)(v15 - 8);
  *(void *)(v9 + 872) = swift_task_alloc();
  *(void *)(v9 + 880) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for GenerativeAssistantSettingsIntentHelper.RequestType();
  *(void *)(v9 + 888) = v16;
  *(void *)(v9 + 896) = *(void *)(v16 - 8);
  *(void *)(v9 + 904) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for GenerativeAssistantSettingsIntentHelper.ResponseType();
  *(void *)(v9 + 912) = v17;
  *(void *)(v9 + 920) = *(void *)(v17 - 8);
  *(void *)(v9 + 928) = swift_task_alloc();
  *(void *)(v9 + 936) = type metadata accessor for InvocationContext();
  *(void *)(v9 + 944) = swift_task_alloc();
  *(void *)(v9 + 952) = swift_task_alloc();
  *(void *)(v9 + 960) = swift_task_alloc();
  *(void *)(v9 + 968) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for Logger();
  *(void *)(v9 + 976) = v18;
  *(void *)(v9 + 984) = *(void *)(v18 - 8);
  *(void *)(v9 + 992) = swift_task_alloc();
  *(void *)(v9 + 1000) = swift_task_alloc();
  *(void *)(v9 + 1008) = swift_task_alloc();
  *(void *)(v9 + 1016) = swift_task_alloc();
  *(void *)(v9 + 1024) = swift_task_alloc();
  *(void *)(v9 + 1032) = swift_task_alloc();
  *(void *)(v9 + 1040) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for GenerativeAssistantUseCase();
  *(void *)(v9 + 1048) = v19;
  *(void *)(v9 + 1056) = *(void *)(v19 - 8);
  *(void *)(v9 + 1064) = swift_task_alloc();
  *(void *)(v9 + 1072) = swift_task_alloc();
  *(void *)(v9 + 1080) = swift_task_alloc();
  *(void *)(v9 + 1088) = swift_task_alloc();
  *(void *)(v9 + 1096) = swift_task_alloc();
  *(void *)(v9 + 1104) = swift_task_alloc();
  *(void *)(v9 + 1112) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v9 + 1120) = static MainActor.shared.getter();
  uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 1128) = v21;
  *(void *)(v9 + 1136) = v20;
  return MEMORY[0x270FA2498](GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:), v21, v20);
}

uint64_t GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:)()
{
  uint64_t v226 = v0;
  long long v1 = *(void (**)(void, void, void))(*(void *)(v0 + 1056) + 104);
  v1(*(void *)(v0 + 1112), *MEMORY[0x263F40718], *(void *)(v0 + 1048));
  lazy protocol witness table accessor for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase((unint64_t *)&lazy protocol witness table cache variable for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase, MEMORY[0x263F40720]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v218 = v1;
  if (*(void *)(v0 + 120) == *(void *)(v0 + 152) && *(void *)(v0 + 128) == *(void *)(v0 + 160)) {
    char v221 = 1;
  }
  else {
    char v221 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v2 = *(void *)(v0 + 1112);
  uint64_t v3 = *(void *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 1056);
  uint64_t v5 = *(void *)(v0 + 1048);
  uint64_t v6 = *(void *)(v0 + 536);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v0 + 1144) = v7;
  *(void *)(v0 + 1152) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v2, v5);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 1160) = v8;
  *(void *)(v0 + 1168) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v3, v6, v5);
  if (v221)
  {
    char v9 = 1;
  }
  else
  {
    v218(*(void *)(v0 + 1096), *MEMORY[0x263F40700], *(void *)(v0 + 1048));
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(void *)(v0 + 136) == *(void *)(v0 + 168) && *(void *)(v0 + 144) == *(void *)(v0 + 176)) {
      char v9 = 1;
    }
    else {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v10 = *(void *)(v0 + 1096);
    uint64_t v11 = *(void *)(v0 + 1048);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7(v10, v11);
  }
  char v222 = v9;
  *(unsigned char *)(v0 + 1327) = v9 & 1;
  v7(*(void *)(v0 + 1104), *(void *)(v0 + 1048));
  if (one-time initialization token for genFromTextController != -1) {
    swift_once();
  }
  uint64_t v12 = *(void *)(v0 + 1040);
  uint64_t v13 = *(void *)(v0 + 984);
  uint64_t v14 = *(void *)(v0 + 968);
  uint64_t v15 = *(void *)(v0 + 960);
  uint64_t v16 = *(void *)(v0 + 952);
  uint64_t v17 = *(void *)(v0 + 544);
  uint64_t v18 = __swift_project_value_buffer(*(void *)(v0 + 976), (uint64_t)static Logger.genFromTextController);
  *(void *)(v0 + 1176) = v18;
  uint64_t v19 = *(void (**)(void))(v13 + 16);
  *(void *)(v0 + 1184) = v19;
  *(void *)(v0 + 1192) = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v215 = v18;
  uint64_t v205 = (void (*)(void, uint64_t, void))v19;
  v19(v12);
  outlined init with copy of InvocationContext(v17, v14, (uint64_t (*)(void))type metadata accessor for InvocationContext);
  outlined init with copy of InvocationContext(v14, v15, (uint64_t (*)(void))type metadata accessor for InvocationContext);
  outlined init with take of InvocationContext(v14, v16);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = *(void *)(v0 + 1040);
  uint64_t v24 = *(void *)(v0 + 984);
  uint64_t v25 = *(void *)(v0 + 976);
  long long v26 = *(unsigned __int8 **)(v0 + 960);
  uint64_t v219 = *(void *)(v0 + 952);
  unint64_t v27 = *(void *)(v0 + 528);
  if (v22)
  {
    uint64_t v202 = *(void *)(v0 + 520);
    uint64_t v28 = swift_slowAlloc();
    uint64_t v209 = v23;
    uint64_t v29 = swift_slowAlloc();
    v225[0] = v29;
    *(_DWORD *)uint64_t v28 = 136315906;
    uint64_t v30 = _typeName(_:qualified:)();
    *(void *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v202, v27, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 32) = 1024;
    int v32 = *v26;
    outlined destroy of InvocationContext((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for InvocationContext);
    *(_DWORD *)(v0 + 1316) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of InvocationContext(v219, (uint64_t (*)(void))type metadata accessor for InvocationContext);
    _os_log_impl(&dword_24F9A2000, v20, v21, "%s.%s [userQuery = %s] [isExplicitRequest: %{BOOL}d]", (uint8_t *)v28, 0x26u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v29, -1, -1);
    MEMORY[0x25336A180](v28, -1, -1);

    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
    uint64_t v34 = v33(v209, v25);
  }
  else
  {
    outlined destroy of InvocationContext((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for InvocationContext);
    swift_bridgeObjectRelease_n();
    outlined destroy of InvocationContext(v219, (uint64_t (*)(void))type metadata accessor for InvocationContext);

    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
    uint64_t v34 = v33(v23, v25);
  }
  uint64_t v204 = (void (*)(uint64_t, uint64_t))v33;
  *(void *)(v0 + 1200) = v33;
  uint64_t v35 = *(void *)(v0 + 936);
  uint64_t v36 = *(void *)(v0 + 928);
  uint64_t v37 = *(void *)(v0 + 920);
  uint64_t v38 = *(void *)(v0 + 912);
  uint64_t v39 = *(void *)(v0 + 904);
  uint64_t v40 = *(void *)(v0 + 896);
  uint64_t v41 = *(void *)(v0 + 888);
  (*(void (**)(uint64_t, float))(v0 + 584))(v34, 0.2);
  uint64_t v42 = (unsigned int *)MEMORY[0x263F407E0];
  if ((v222 & 1) == 0) {
    uint64_t v42 = (unsigned int *)MEMORY[0x263F407D8];
  }
  (*(void (**)(uint64_t, void, uint64_t))(v40 + 104))(v39, *v42, v41);
  *(_DWORD *)(v0 + 1320) = *(_DWORD *)(v35 + 32);
  static GenerativeAssistantSettingsIntentHelper.responseType(for:isExplicitRequest:sessionId:withTamale:)();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  int v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 88))(v36, v38);
  if (v43 == *MEMORY[0x263F407F8])
  {
    swift_release();
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      v225[0] = v47;
      *(_DWORD *)uint64_t v46 = 136315394;
      uint64_t v48 = _typeName(_:qualified:)();
      *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 2080;
      *(void *)(v0 + 360) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v44, v45, "%s.%s Fallback to SiriX.", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v47, -1, -1);
      MEMORY[0x25336A180](v46, -1, -1);
    }

    unint64_t v50 = *(void **)(v0 + 728);
    uint64_t v51 = *(void *)(v0 + 680);
    uint64_t v52 = *(void *)(v0 + 672);
    void *v50 = 0xD000000000000043;
    v50[1] = 0x800000024FA42290;
    (*(void (**)(void *, void, uint64_t))(v51 + 104))(v50, *MEMORY[0x263F40798], v52);
    GATError.logError()();
    (*(void (**)(void *, uint64_t))(v51 + 8))(v50, v52);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
    return v53();
  }
  int v55 = v43;
  if (v43 == *MEMORY[0x263F40808])
  {
    if (!*(void *)(v0 + 568) || (v222 & 1) != 0)
    {
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        v225[0] = v59;
        *(_DWORD *)uint64_t v58 = 136315394;
        uint64_t v60 = _typeName(_:qualified:)();
        *(void *)(v0 + 448) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v58 + 12) = 2080;
        *(void *)(v0 + 456) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v56, v57, "%s.%s Skipping confirmation: as confirmation callback was nil.", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        uint64_t v62 = v59;
LABEL_40:
        MEMORY[0x25336A180](v62, -1, -1);
        MEMORY[0x25336A180](v58, -1, -1);
        goto LABEL_41;
      }
      goto LABEL_41;
    }
    uint64_t v82 = (uint64_t *)(v0 + 56);
    swift_retain();
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      v225[0] = v86;
      *(_DWORD *)uint64_t v85 = 136315394;
      uint64_t v87 = _typeName(_:qualified:)();
      *(void *)(v0 + 504) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v85 + 12) = 2080;
      *(void *)(v0 + 464) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
      uint64_t v82 = (uint64_t *)(v0 + 56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v83, v84, "%s.%s Requesting confirmation", (uint8_t *)v85, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v86, -1, -1);
      MEMORY[0x25336A180](v85, -1, -1);
    }

    uint64_t v89 = *(void *)(v0 + 880);
    uint64_t v90 = *(void *)(v0 + 864);
    uint64_t v91 = *(void *)(v0 + 856);
    *(void *)(v0 + 1208) = type metadata accessor for MetricsUtils();
    static MetricsUtils.shared.getter();
    static Signpost.waitUserConfirmToContinueDuration.getter();
    dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
    swift_release();
    type metadata accessor for IntentDialogUtils();
    LOBYTE(v225[0]) = 19;
    static IntentDialogUtils.getDialog(catID:response:includeContentProviderName:appName:)((char *)v225, 0, 0xE000000000000000, 1, 0, 0, v89);
    *(void *)(v0 + 80) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResultContainer<Never, Never, Never, IntentDialog>);
    *(void *)(v0 + 88) = lazy protocol witness table accessor for type IntentResultContainer<Never, Never, Never, IntentDialog> and conformance IntentResultContainer<A, B, C, D>();
    __swift_allocate_boxed_opaque_existential_1(v82);
    static IntentResult.result<>(dialog:)();
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v91);
    if (one-time initialization token for textCreationConfirmationButtonText != -1) {
      swift_once();
    }
    uint64_t v92 = *(void *)(v0 + 816);
    uint64_t v93 = *(void *)(v0 + 800);
    uint64_t v94 = *(void *)(v0 + 792);
    uint64_t v95 = __swift_project_value_buffer(v94, (uint64_t)static ConfirmationText.textCreationConfirmationButtonText);
    uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
    v96(v92, v95, v94);
    if (one-time initialization token for userResponseAcceptValues != -1) {
      swift_once();
    }
    if (one-time initialization token for declineButtonText != -1) {
      swift_once();
    }
    uint64_t v97 = *(void *)(v0 + 808);
    uint64_t v98 = *(void *)(v0 + 792);
    uint64_t v99 = __swift_project_value_buffer(v98, (uint64_t)static ConfirmationText.declineButtonText);
    v96(v97, v99, v98);
    if (one-time initialization token for userResponseDeclineValues != -1) {
      swift_once();
    }
    uint64_t v100 = *(void *)(v0 + 816);
    uint64_t v101 = *(void *)(v0 + 808);
    uint64_t v102 = *(void *)(v0 + 800);
    uint64_t v103 = *(void *)(v0 + 792);
    uint64_t v104 = *(int **)(v0 + 568);
    static ConfirmationActionName.custom(acceptLabel:acceptAlternatives:denyLabel:denyAlternatives:destructive:)();
    uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
    v105(v101, v103);
    v105(v100, v103);
    int v223 = (uint64_t (*)(void))((char *)v104 + *v104);
    uint64_t v106 = (void *)swift_task_alloc();
    *(void *)(v0 + 1216) = v106;
    void *v106 = v0;
    v106[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
    uint64_t v107 = *(void *)(v0 + 848);
    Swift::String v108 = v82;
    goto LABEL_93;
  }
  uint64_t v63 = (uint64_t *)(v0 + 384);
  if (v43 != *MEMORY[0x263F40800])
  {
    int v77 = *MEMORY[0x263F407F0];
    uint64_t v56 = Logger.logObject.getter();
    if (v55 != v77)
    {
      os_log_type_t v109 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v109))
      {
        uint64_t v110 = swift_slowAlloc();
        uint64_t v111 = swift_slowAlloc();
        v225[0] = v111;
        *(_DWORD *)uint64_t v110 = 136315394;
        uint64_t v112 = _typeName(_:qualified:)();
        *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v110 + 12) = 2080;
        *(void *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v56, v109, "%s.%s Unkown Default when checking for confirmation vs enablement vs SiriX", (uint8_t *)v110, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v111, -1, -1);
        MEMORY[0x25336A180](v110, -1, -1);
      }

      (*(void (**)(void, void))(*(void *)(v0 + 920) + 8))(*(void *)(v0 + 928), *(void *)(v0 + 912));
      goto LABEL_56;
    }
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v78))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      v225[0] = v79;
      *(_DWORD *)uint64_t v58 = 136315394;
      uint64_t v80 = _typeName(_:qualified:)();
      *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2080;
      *(void *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v56, v78, "%s.%s Skipping confirmation: explicit invocation or user set skip confirmation or previously communicated with GMS in this session", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      uint64_t v62 = v79;
      goto LABEL_40;
    }
LABEL_41:

LABEL_56:
    uint64_t v114 = *(void *)(v0 + 632);
    if (*(unsigned char *)(v114 + 120) == 1)
    {
      __swift_project_boxed_opaque_existential_1((void *)(v114 + 80), *(void *)(v114 + 104));
      uint64_t v115 = (void *)swift_task_alloc();
      *(void *)(v0 + 1272) = v115;
      *uint64_t v115 = v0;
      v115[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
      uint64_t v116 = *(void *)(v0 + 528);
      uint64_t v117 = *(void *)(v0 + 520);
      return TextAssistantHandoff.attemptHandoff(userQuery:)(v117, v116);
    }
    else
    {
      if (*(void *)(*(void *)(v0 + 544) + *(int *)(v0 + 1320) + 8))
      {
        uint64_t v118 = static SessionPersistenceUtils.setConfirmation(forTextSession:)();
      }
      else
      {
        Swift::String v119 = Logger.logObject.getter();
        os_log_type_t v120 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v119, v120))
        {
          uint64_t v121 = swift_slowAlloc();
          uint64_t v122 = swift_slowAlloc();
          v225[0] = v122;
          *(_DWORD *)uint64_t v121 = 136315394;
          uint64_t v123 = _typeName(_:qualified:)();
          *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, v225);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v121 + 12) = 2080;
          *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v119, v120, "%s.%s Attempting to save the current sessionID but found nil", (uint8_t *)v121, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v122, -1, -1);
          MEMORY[0x25336A180](v121, -1, -1);
        }
      }
      uint64_t v212 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1184);
      uint64_t v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
      uint64_t v126 = *(void *)(v0 + 1088);
      uint64_t v213 = *(void *)(v0 + 1080);
      uint64_t v216 = *(void *)(v0 + 1072);
      uint64_t v127 = *(void *)(v0 + 1056);
      uint64_t v128 = *(void *)(v0 + 1048);
      uint64_t v129 = *(void *)(v0 + 1016);
      uint64_t v208 = *(void *)(v0 + 976);
      uint64_t v210 = *(void *)(v0 + 1176);
      uint64_t v130 = *(void *)(v0 + 560);
      uint64_t v131 = *(void *)(v0 + 552);
      uint64_t v206 = *(void *)(v0 + 536);
      (*(void (**)(uint64_t, float))(v0 + 584))(v118, 0.6);
      uint64_t v132 = swift_allocObject();
      *(void *)(v0 + 1288) = v132;
      *(void *)(v132 + 16) = v131;
      *(void *)(v132 + 24) = v130;
      uint64_t v220 = v132;
      v212(v129, v210, v208);
      v125(v126, v206, v128);
      v125(v213, v126, v128);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 32))(v216, v126, v128);
      swift_retain();
      uint64_t v133 = Logger.logObject.getter();
      os_log_type_t v217 = static os_log_type_t.error.getter();
      BOOL v134 = os_log_type_enabled(v133, v217);
      uint64_t v135 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
      uint64_t v136 = *(void (**)(uint64_t, uint64_t))(v0 + 1144);
      uint64_t v137 = *(void *)(v0 + 1080);
      uint64_t v138 = *(void *)(v0 + 1048);
      uint64_t v139 = *(void *)(v0 + 1016);
      uint64_t v140 = *(void *)(v0 + 976);
      if (v134)
      {
        uint64_t v214 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
        uint64_t v203 = *(void *)(v0 + 1072);
        uint64_t v141 = swift_slowAlloc();
        uint64_t v207 = swift_slowAlloc();
        v225[0] = v207;
        *(_DWORD *)uint64_t v141 = 136315650;
        uint64_t v142 = _typeName(_:qualified:)();
        *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v143, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v141 + 12) = 2080;
        *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v141 + 22) = 2080;
        uint64_t v144 = GenerativeAssistantUseCase.rawValue.getter();
        *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v144, v145, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v136(v203, v138);
        v136(v137, v138);
        _os_log_impl(&dword_24F9A2000, v133, v217, "%s.%s Calling model orchestrator with use case %s", (uint8_t *)v141, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v207, -1, -1);
        MEMORY[0x25336A180](v141, -1, -1);

        v214(v139, v140);
      }
      else
      {
        v136(*(void *)(v0 + 1072), *(void *)(v0 + 1048));
        v136(v137, v138);

        v135(v139, v140);
      }
      uint64_t v146 = *(void *)(v0 + 648);
      uint64_t v147 = *(void *)(v0 + 640);
      uint64_t v148 = *(void *)(v0 + 544);
      int v149 = (uint64_t *)(v148 + *(int *)(v0 + 1320));
      type metadata accessor for SELFUtils();
      static SELFUtils.shared.getter();
      LOBYTE(v225[0]) = 0;
      dispatch thunk of SELFUtils.gatUsecase.setter();
      swift_release();
      uint64_t v150 = type metadata accessor for URL();
      uint64_t v151 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56);
      v151(v146, 1, 1, v150);
      v151(v147, 1, 1, v150);
      uint64_t v152 = *v149;
      uint64_t v153 = v149[1];
      *(unsigned char *)(v0 + 1324) = *(unsigned char *)(v148 + 1);
      swift_retain();
      os_log_type_t v154 = (void *)swift_task_alloc();
      *(void *)(v0 + 1296) = v154;
      LOBYTE(v225[0]) = 1;
      void *v154 = v0;
      v154[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
      char v155 = *(unsigned char *)(v0 + 1327);
      uint64_t v156 = *(void *)(v0 + 664);
      uint64_t v157 = *(void *)(v0 + 648);
      uint64_t v158 = *(void *)(v0 + 640);
      uint64_t v159 = *(void *)(v0 + 608);
      uint64_t v160 = *(void *)(v0 + 600);
      uint64_t v161 = *(void *)(v0 + 528);
      uint64_t v162 = *(void *)(v0 + 520);
      uint64_t v243 = *(void *)(v0 + 536);
      uint64_t v244 = v0 + 1324;
      long long v242 = 0u;
      char v241 = v155;
      uint64_t v239 = v160;
      uint64_t v240 = v159;
      long long v238 = 0u;
      uint64_t v236 = &async function pointer to partial apply for closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
      uint64_t v237 = v220;
      uint64_t v234 = v152;
      uint64_t v235 = v153;
      uint64_t v233 = v158;
      long long v232 = 0u;
      long long v231 = 0u;
      char v230 = 2;
      uint64_t v229 = 0x100000000;
      char v228 = 1;
      return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v156, v162, v161, v157, 0, 0, 0, 0);
    }
  }
  if (*(void *)(v0 + 568))
  {
    outlined init with copy of InvocationContext(*(void *)(v0 + 544), *(void *)(v0 + 944), (uint64_t (*)(void))type metadata accessor for InvocationContext);
    unint64_t v64 = *(unsigned __int8 **)(v0 + 944);
    if (v222)
    {
      int v65 = *v64;
      swift_retain();
      outlined destroy of InvocationContext((uint64_t)v64, (uint64_t (*)(void))type metadata accessor for InvocationContext);
      if (v65 != 1)
      {
        outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?(*(void *)(v0 + 568));
        goto LABEL_35;
      }
    }
    else
    {
      swift_retain();
      outlined destroy of InvocationContext((uint64_t)v64, (uint64_t (*)(void))type metadata accessor for InvocationContext);
    }
    unint64_t v163 = (uint64_t *)(v0 + 16);
    uint64_t v164 = Logger.logObject.getter();
    os_log_type_t v165 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v164, v165))
    {
      uint64_t v166 = swift_slowAlloc();
      uint64_t v167 = swift_slowAlloc();
      v225[0] = v167;
      *(_DWORD *)uint64_t v166 = 136315394;
      uint64_t v168 = _typeName(_:qualified:)();
      *(void *)(v0 + 432) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v168, v169, v225);
      unint64_t v163 = (uint64_t *)(v0 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v166 + 12) = 2080;
      *(void *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v164, v165, "%s.%s Confirming JIT enablement", (uint8_t *)v166, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v167, -1, -1);
      MEMORY[0x25336A180](v166, -1, -1);
    }

    uint64_t v170 = *(unsigned char **)(v0 + 544);
    *(void *)(v0 + 1232) = type metadata accessor for GenerativeAssistantSettingsUserDefaults();
    static GenerativeAssistantSettingsUserDefaults.declineComposeViaSiriExpiration()();
    if (*v170 == 1
      || (uint64_t v171 = *(void *)(v0 + 752),
          uint64_t v172 = *(void *)(v0 + 744),
          uint64_t v173 = *(void *)(v0 + 736),
          uint64_t v174 = *(unsigned char **)(v0 + 544),
          (*(void (**)(uint64_t, void, uint64_t))(v172 + 104))(v171, *MEMORY[0x263F40828], v173), MEMORY[0x253368B50](v171), (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v171, v173), *v174 == 1))
    {
      uint64_t v175 = *(void *)(v0 + 872);
      type metadata accessor for IntentDialogUtils();
      char v176 = 15;
    }
    else
    {
      uint64_t v175 = *(void *)(v0 + 872);
      type metadata accessor for IntentDialogUtils();
      char v176 = 16;
    }
    LOBYTE(v225[0]) = v176;
    static IntentDialogUtils.getDialog(catID:response:includeContentProviderName:appName:)((char *)v225, 0, 0xE000000000000000, 1, 0, 0, v175);
    uint64_t v184 = *(void *)(v0 + 872);
    uint64_t v185 = *(void *)(v0 + 864);
    uint64_t v186 = *(void *)(v0 + 856);
    *(void *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResultContainer<Never, Never, Never, IntentDialog>);
    *(void *)(v0 + 48) = lazy protocol witness table accessor for type IntentResultContainer<Never, Never, Never, IntentDialog> and conformance IntentResultContainer<A, B, C, D>();
    __swift_allocate_boxed_opaque_existential_1(v163);
    static IntentResult.result<>(dialog:)();
    (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v184, v186);
    if (one-time initialization token for enablementConfirmationButtonText != -1) {
      swift_once();
    }
    uint64_t v187 = *(void *)(v0 + 816);
    uint64_t v188 = *(void *)(v0 + 800);
    uint64_t v189 = *(void *)(v0 + 792);
    uint64_t v190 = __swift_project_value_buffer(v189, (uint64_t)static ConfirmationText.enablementConfirmationButtonText);
    uint64_t v191 = *(void (**)(uint64_t, uint64_t, uint64_t))(v188 + 16);
    v191(v187, v190, v189);
    if (one-time initialization token for userResponseAcceptValues != -1) {
      swift_once();
    }
    if (one-time initialization token for enablementDeclineButtonText != -1) {
      swift_once();
    }
    uint64_t v192 = *(void *)(v0 + 808);
    uint64_t v193 = *(void *)(v0 + 792);
    uint64_t v194 = __swift_project_value_buffer(v193, (uint64_t)static ConfirmationText.enablementDeclineButtonText);
    v191(v192, v194, v193);
    if (one-time initialization token for userResponseDeclineValues != -1) {
      swift_once();
    }
    uint64_t v195 = *(void *)(v0 + 816);
    uint64_t v196 = *(void *)(v0 + 808);
    uint64_t v197 = *(void *)(v0 + 800);
    uint64_t v198 = *(void *)(v0 + 792);
    uint64_t v199 = *(int **)(v0 + 568);
    static ConfirmationActionName.custom(acceptLabel:acceptAlternatives:denyLabel:denyAlternatives:destructive:)();
    uint64_t v200 = *(void (**)(uint64_t, uint64_t))(v197 + 8);
    v200(v196, v198);
    v200(v195, v198);
    int v223 = (uint64_t (*)(void))((char *)v199 + *v199);
    uint64_t v201 = (void *)swift_task_alloc();
    *(void *)(v0 + 1240) = v201;
    *uint64_t v201 = v0;
    v201[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
    uint64_t v107 = *(void *)(v0 + 840);
    Swift::String v108 = v163;
LABEL_93:
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v223)(v108, v107, 1);
  }
LABEL_35:
  v205(*(void *)(v0 + 1032), v215, *(void *)(v0 + 976));
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  BOOL v68 = os_log_type_enabled(v66, v67);
  uint64_t v69 = *(void *)(v0 + 1032);
  uint64_t v70 = *(void *)(v0 + 976);
  if (v68)
  {
    uint64_t v71 = swift_slowAlloc();
    uint64_t v211 = v70;
    uint64_t v72 = swift_slowAlloc();
    v225[0] = v72;
    *(_DWORD *)uint64_t v71 = 136315650;
    uint64_t v73 = _typeName(_:qualified:)();
    *(void *)(v0 + 400) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v71 + 12) = 2080;
    *(void *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
    uint64_t v63 = (uint64_t *)(v0 + 384);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v71 + 22) = 1024;
    *(_DWORD *)(v0 + 1312) = v222 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v66, v67, "%s.%s Skipping confirmation: as confirmation callback was nil and isKnowledge case is %{BOOL}d", (uint8_t *)v71, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v72, -1, -1);
    MEMORY[0x25336A180](v71, -1, -1);

    uint64_t v75 = v69;
    uint64_t v76 = v211;
  }
  else
  {

    uint64_t v75 = v69;
    uint64_t v76 = v70;
  }
  v204(v75, v76);
  uint64_t v177 = Logger.logObject.getter();
  os_log_type_t v178 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v177, v178))
  {
    uint64_t v179 = swift_slowAlloc();
    uint64_t v180 = swift_slowAlloc();
    v225[0] = v180;
    *(_DWORD *)uint64_t v179 = 136315394;
    uint64_t v181 = _typeName(_:qualified:)();
    uint64_t *v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v181, v182, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v179 + 12) = 2080;
    *(void *)(v0 + 392) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v177, v178, "%s.%s User Confirmed Showing JIT Enablement.", (uint8_t *)v179, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v180, -1, -1);
    MEMORY[0x25336A180](v179, -1, -1);
  }

  unint64_t v224 = (uint64_t (*)(void))(*(void *)(v0 + 616) + **(int **)(v0 + 616));
  uint64_t v183 = (void *)swift_task_alloc();
  *(void *)(v0 + 1256) = v183;
  void *v183 = v0;
  v183[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  return v224();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1224) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[104] + 8))(v2[106], v2[103]);
  if (v0)
  {
    uint64_t v3 = v2[142];
    uint64_t v4 = v2[141];
    uint64_t v5 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v2 + 7));
    uint64_t v3 = v2[142];
    uint64_t v4 = v2[141];
    uint64_t v5 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  BOOL v32;
  void (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_t log;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, os_log_t);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  os_log_type_t typea[8];
  os_log_type_t type;
  uint64_t v64;
  uint64_t v65;

  long long v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    int v65 = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    uint64_t v5 = _typeName(_:qualified:)();
    *(void *)(v0 + 488) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    *(void *)(v0 + 496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s User confirmed", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v4, -1, -1);
    MEMORY[0x25336A180](v3, -1, -1);
  }

  uint64_t v7 = *(void *)(v0 + 784);
  static MetricsUtils.shared.getter();
  static Signpost.waitUserConfirmToContinueDuration.getter();
  uint64_t v8 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v7, &demangling cache variable for type metadata for OSSignpostID?);
  type metadata accessor for GenerativeAssistantSettingsUserDefaults();
  char v9 = MEMORY[0x253368B80]();
  uint64_t v10 = *(void *)(v0 + 568);
  if ((v9 & 1) == 0) {
    static GenerativeAssistantSettingsUserDefaults.logConfirmationCount()();
  }
  outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?(v10);
  uint64_t v11 = *(void *)(v0 + 632);
  if (*(unsigned char *)(v11 + 120) == 1)
  {
    __swift_project_boxed_opaque_existential_1((void *)(v11 + 80), *(void *)(v11 + 104));
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 1272) = v12;
    void *v12 = v0;
    v12[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
    uint64_t v13 = *(void *)(v0 + 528);
    uint64_t v14 = *(void *)(v0 + 520);
    return TextAssistantHandoff.attemptHandoff(userQuery:)(v14, v13);
  }
  else
  {
    if (*(void *)(*(void *)(v0 + 544) + *(int *)(v0 + 1320) + 8))
    {
      uint64_t v16 = static SessionPersistenceUtils.setConfirmation(forTextSession:)();
    }
    else
    {
      uint64_t v17 = Logger.logObject.getter();
      uint64_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        int v65 = v20;
        *(_DWORD *)uint64_t v19 = 136315394;
        os_log_type_t v21 = _typeName(_:qualified:)();
        *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v17, v18, "%s.%s Attempting to save the current sessionID but found nil", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v20, -1, -1);
        MEMORY[0x25336A180](v19, -1, -1);
      }
    }
    uint64_t v59 = *(void (**)(uint64_t, uint64_t, os_log_t))(v0 + 1184);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
    uint64_t v24 = *(void *)(v0 + 1088);
    uint64_t v60 = *(void *)(v0 + 1080);
    *(void *)typea = *(void *)(v0 + 1072);
    uint64_t v25 = *(void *)(v0 + 1056);
    long long v26 = *(void *)(v0 + 1048);
    unint64_t v27 = *(void *)(v0 + 1016);
    log = *(os_log_t *)(v0 + 976);
    uint64_t v58 = *(void *)(v0 + 1176);
    uint64_t v28 = *(void *)(v0 + 560);
    uint64_t v29 = *(void *)(v0 + 552);
    int v55 = *(void *)(v0 + 536);
    (*(void (**)(uint64_t, float))(v0 + 584))(v16, 0.6);
    uint64_t v30 = swift_allocObject();
    *(void *)(v0 + 1288) = v30;
    *(void *)(v30 + 16) = v29;
    *(void *)(v30 + 24) = v28;
    v59(v27, v58, log);
    v23(v24, v55, v26);
    v23(v60, v24, v26);
    (*(void (**)(os_log_type_t *, uint64_t, uint64_t))(v25 + 32))(*(os_log_type_t **)typea, v24, v26);
    swift_retain();
    unint64_t v31 = Logger.logObject.getter();
    type = static os_log_type_t.error.getter();
    int v32 = os_log_type_enabled(v31, type);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 1144);
    uint64_t v35 = *(void *)(v0 + 1080);
    uint64_t v36 = *(void *)(v0 + 1048);
    uint64_t v37 = *(void *)(v0 + 1016);
    uint64_t v38 = *(void *)(v0 + 976);
    if (v32)
    {
      unint64_t v61 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
      uint64_t v54 = *(void *)(v0 + 1072);
      uint64_t v39 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      int v65 = v56;
      *(_DWORD *)uint64_t v39 = 136315650;
      uint64_t v40 = _typeName(_:qualified:)();
      *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2080;
      *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 22) = 2080;
      uint64_t v42 = GenerativeAssistantUseCase.rawValue.getter();
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v34(v54, v36);
      v34(v35, v36);
      _os_log_impl(&dword_24F9A2000, v31, type, "%s.%s Calling model orchestrator with use case %s", (uint8_t *)v39, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v56, -1, -1);
      MEMORY[0x25336A180](v39, -1, -1);

      v61(v37, v38);
    }
    else
    {
      v34(*(void *)(v0 + 1072), *(void *)(v0 + 1048));
      v34(v35, v36);

      v33(v37, v38);
    }
    unint64_t v44 = *(void *)(v0 + 648);
    os_log_type_t v45 = *(void *)(v0 + 640);
    uint64_t v46 = *(void *)(v0 + 544);
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    LOBYTE(v65) = 0;
    dispatch thunk of SELFUtils.gatUsecase.setter();
    swift_release();
    uint64_t v47 = type metadata accessor for URL();
    uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56);
    v48(v44, 1, 1, v47);
    v48(v45, 1, 1, v47);
    *(unsigned char *)(v0 + 1324) = *(unsigned char *)(v46 + 1);
    swift_retain();
    unint64_t v49 = (void *)swift_task_alloc();
    *(void *)(v0 + 1296) = v49;
    LOBYTE(v65) = 1;
    *unint64_t v49 = v0;
    v49[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
    unint64_t v50 = *(void *)(v0 + 664);
    uint64_t v51 = *(void *)(v0 + 648);
    uint64_t v52 = *(void *)(v0 + 528);
    uint64_t v53 = *(void *)(v0 + 520);
    return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v50, v53, v52, v51, 0, 0, 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1248) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[104] + 8))(v2[105], v2[103]);
  if (v0)
  {
    uint64_t v3 = v2[142];
    uint64_t v4 = v2[141];
    uint64_t v5 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v2 + 2));
    uint64_t v3 = v2[142];
    uint64_t v4 = v2[141];
    uint64_t v5 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = v0;
  if (**(unsigned char **)(v0 + 544))
  {
    long long v1 = *(void *)(v0 + 568);
    (*(void (**)(void, void))(*(void *)(v0 + 768) + 8))(*(void *)(v0 + 776), *(void *)(v0 + 760));
    outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?(v1);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 776);
    uint64_t v3 = *(void *)(v0 + 768);
    uint64_t v4 = *(void *)(v0 + 760);
    uint64_t v5 = *(void *)(v0 + 752);
    uint64_t v6 = *(void *)(v0 + 744);
    uint64_t v7 = *(void *)(v0 + 736);
    uint64_t v8 = *(void *)(v0 + 568);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, *MEMORY[0x263F40828], v7);
    static GenerativeAssistantSettingsUserDefaults.decrementDecline(for:expirationDate:)();
    outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?(v8);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  }
  char v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = _typeName(_:qualified:)();
    *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v0 + 392) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v9, v10, "%s.%s User Confirmed Showing JIT Enablement.", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v12, -1, -1);
    MEMORY[0x25336A180](v11, -1, -1);
  }

  uint64_t v17 = (uint64_t (*)(void))(*(void *)(v0 + 616) + **(int **)(v0 + 616));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 1256) = v15;
  *uint64_t v15 = v0;
  v15[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  return v17();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1264) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1136);
  uint64_t v4 = *(void *)(v2 + 1128);
  if (v0) {
    uint64_t v5 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  else {
    uint64_t v5 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  BOOL v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_t log;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, os_log_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  os_log_type_t typea[8];
  os_log_type_t type;
  uint64_t v54;
  uint64_t v55;

  long long v1 = *(void *)(v0 + 632);
  if (*(unsigned char *)(v1 + 120) == 1)
  {
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 80), *(void *)(v1 + 104));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 1272) = v2;
    *uint64_t v2 = v0;
    v2[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
    uint64_t v3 = *(void *)(v0 + 528);
    uint64_t v4 = *(void *)(v0 + 520);
    return TextAssistantHandoff.attemptHandoff(userQuery:)(v4, v3);
  }
  else
  {
    if (*(void *)(*(void *)(v0 + 544) + *(int *)(v0 + 1320) + 8))
    {
      uint64_t v6 = static SessionPersistenceUtils.setConfirmation(forTextSession:)();
    }
    else
    {
      uint64_t v7 = Logger.logObject.getter();
      uint64_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        char v9 = swift_slowAlloc();
        uint64_t v10 = swift_slowAlloc();
        int v55 = v10;
        *(_DWORD *)char v9 = 136315394;
        uint64_t v11 = _typeName(_:qualified:)();
        *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v9 + 12) = 2080;
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v7, v8, "%s.%s Attempting to save the current sessionID but found nil", (uint8_t *)v9, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v10, -1, -1);
        MEMORY[0x25336A180](v9, -1, -1);
      }
    }
    unint64_t v49 = *(void (**)(uint64_t, uint64_t, os_log_t))(v0 + 1184);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
    uint64_t v14 = *(void *)(v0 + 1088);
    unint64_t v50 = *(void *)(v0 + 1080);
    *(void *)typea = *(void *)(v0 + 1072);
    uint64_t v15 = *(void *)(v0 + 1056);
    uint64_t v16 = *(void *)(v0 + 1048);
    uint64_t v17 = *(void *)(v0 + 1016);
    log = *(os_log_t *)(v0 + 976);
    uint64_t v48 = *(void *)(v0 + 1176);
    uint64_t v18 = *(void *)(v0 + 560);
    uint64_t v19 = *(void *)(v0 + 552);
    os_log_type_t v45 = *(void *)(v0 + 536);
    (*(void (**)(uint64_t, float))(v0 + 584))(v6, 0.6);
    uint64_t v20 = swift_allocObject();
    *(void *)(v0 + 1288) = v20;
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = v18;
    v49(v17, v48, log);
    v13(v14, v45, v16);
    v13(v50, v14, v16);
    (*(void (**)(os_log_type_t *, uint64_t, uint64_t))(v15 + 32))(*(os_log_type_t **)typea, v14, v16);
    swift_retain();
    os_log_type_t v21 = Logger.logObject.getter();
    type = static os_log_type_t.error.getter();
    BOOL v22 = os_log_type_enabled(v21, type);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 1144);
    uint64_t v25 = *(void *)(v0 + 1080);
    long long v26 = *(void *)(v0 + 1048);
    unint64_t v27 = *(void *)(v0 + 1016);
    uint64_t v28 = *(void *)(v0 + 976);
    if (v22)
    {
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
      unint64_t v44 = *(void *)(v0 + 1072);
      uint64_t v29 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      int v55 = v46;
      *(_DWORD *)uint64_t v29 = 136315650;
      uint64_t v30 = _typeName(_:qualified:)();
      *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 22) = 2080;
      int v32 = GenerativeAssistantUseCase.rawValue.getter();
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v24(v44, v26);
      v24(v25, v26);
      _os_log_impl(&dword_24F9A2000, v21, type, "%s.%s Calling model orchestrator with use case %s", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v46, -1, -1);
      MEMORY[0x25336A180](v29, -1, -1);

      v51(v27, v28);
    }
    else
    {
      v24(*(void *)(v0 + 1072), *(void *)(v0 + 1048));
      v24(v25, v26);

      v23(v27, v28);
    }
    uint64_t v34 = *(void *)(v0 + 648);
    uint64_t v35 = *(void *)(v0 + 640);
    uint64_t v36 = *(void *)(v0 + 544);
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    LOBYTE(v55) = 0;
    dispatch thunk of SELFUtils.gatUsecase.setter();
    swift_release();
    uint64_t v37 = type metadata accessor for URL();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
    v38(v34, 1, 1, v37);
    v38(v35, 1, 1, v37);
    *(unsigned char *)(v0 + 1324) = *(unsigned char *)(v36 + 1);
    swift_retain();
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 1296) = v39;
    LOBYTE(v55) = 1;
    *uint64_t v39 = v0;
    v39[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
    uint64_t v40 = *(void *)(v0 + 664);
    uint64_t v41 = *(void *)(v0 + 648);
    uint64_t v42 = *(void *)(v0 + 528);
    int v43 = *(void *)(v0 + 520);
    return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v40, v43, v42, v41, 0, 0, 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  BOOL v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;

  if (*(unsigned char *)(v0 + 1328) == 1)
  {
    swift_release();
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestHandoff()();
    swift_release();
    if (one-time initialization token for textAssistantHandoffResponse != -1) {
      swift_once();
    }
    long long v1 = *(void *)(v0 + 512);
    uint64_t v2 = type metadata accessor for GeneratedResponse();
    uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static GeneratedResponse.textAssistantHandoffResponse);
    outlined init with copy of InvocationContext(v3, v1, (uint64_t (*)(void))type metadata accessor for GeneratedResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    if (*(void *)(*(void *)(v0 + 544) + *(int *)(v0 + 1320) + 8))
    {
      uint64_t v6 = static SessionPersistenceUtils.setConfirmation(forTextSession:)();
    }
    else
    {
      uint64_t v7 = Logger.logObject.getter();
      uint64_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        char v9 = swift_slowAlloc();
        uint64_t v10 = swift_slowAlloc();
        int v55 = v10;
        *(_DWORD *)char v9 = 136315394;
        uint64_t v11 = _typeName(_:qualified:)();
        *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v9 + 12) = 2080;
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v7, v8, "%s.%s Attempting to save the current sessionID but found nil", (uint8_t *)v9, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v10, -1, -1);
        MEMORY[0x25336A180](v9, -1, -1);
      }
    }
    unint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1184);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
    uint64_t v14 = *(void *)(v0 + 1088);
    unint64_t v50 = *(void *)(v0 + 1080);
    uint64_t v52 = *(void *)(v0 + 1072);
    uint64_t v15 = *(void *)(v0 + 1056);
    uint64_t v16 = *(void *)(v0 + 1048);
    uint64_t v17 = *(void *)(v0 + 1016);
    uint64_t v47 = *(void *)(v0 + 976);
    uint64_t v48 = *(void *)(v0 + 1176);
    uint64_t v18 = *(void *)(v0 + 560);
    uint64_t v19 = *(void *)(v0 + 552);
    os_log_type_t v45 = *(void *)(v0 + 536);
    (*(void (**)(uint64_t, float))(v0 + 584))(v6, 0.6);
    uint64_t v20 = swift_allocObject();
    *(void *)(v0 + 1288) = v20;
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = v18;
    v49(v17, v48, v47);
    v13(v14, v45, v16);
    v13(v50, v14, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v52, v14, v16);
    swift_retain();
    os_log_type_t v21 = Logger.logObject.getter();
    uint64_t v53 = static os_log_type_t.error.getter();
    BOOL v22 = os_log_type_enabled(v21, v53);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 1144);
    uint64_t v25 = *(void *)(v0 + 1080);
    long long v26 = *(void *)(v0 + 1048);
    unint64_t v27 = *(void *)(v0 + 1016);
    uint64_t v28 = *(void *)(v0 + 976);
    if (v22)
    {
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
      unint64_t v44 = *(void *)(v0 + 1072);
      uint64_t v29 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      int v55 = v46;
      *(_DWORD *)uint64_t v29 = 136315650;
      uint64_t v30 = _typeName(_:qualified:)();
      *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 22) = 2080;
      int v32 = GenerativeAssistantUseCase.rawValue.getter();
      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v24(v44, v26);
      v24(v25, v26);
      _os_log_impl(&dword_24F9A2000, v21, v53, "%s.%s Calling model orchestrator with use case %s", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v46, -1, -1);
      MEMORY[0x25336A180](v29, -1, -1);

      v51(v27, v28);
    }
    else
    {
      v24(*(void *)(v0 + 1072), *(void *)(v0 + 1048));
      v24(v25, v26);

      v23(v27, v28);
    }
    uint64_t v34 = *(void *)(v0 + 648);
    uint64_t v35 = *(void *)(v0 + 640);
    uint64_t v36 = *(void *)(v0 + 544);
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    LOBYTE(v55) = 0;
    dispatch thunk of SELFUtils.gatUsecase.setter();
    swift_release();
    uint64_t v37 = type metadata accessor for URL();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
    v38(v34, 1, 1, v37);
    v38(v35, 1, 1, v37);
    *(unsigned char *)(v0 + 1324) = *(unsigned char *)(v36 + 1);
    swift_retain();
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 1296) = v39;
    LOBYTE(v55) = 1;
    *uint64_t v39 = v0;
    v39[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
    uint64_t v40 = *(void *)(v0 + 664);
    uint64_t v41 = *(void *)(v0 + 648);
    uint64_t v42 = *(void *)(v0 + 528);
    int v43 = *(void *)(v0 + 520);
    return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v40, v43, v42, v41, 0, 0, 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  uint8_t *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  BOOL v31;
  void (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_t log;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, os_log_t);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  os_log_type_t typea[8];
  os_log_type_t type;
  uint64_t v64;
  uint64_t v65;

  long long v1 = *(void **)(v0 + 1280);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1184);
  uint64_t v3 = *(void *)(v0 + 1176);
  uint64_t v4 = *(void *)(v0 + 1024);
  uint64_t v5 = *(void *)(v0 + 976);
  type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.textAssistantHandoffError.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  v2(v4, v3, v5);
  uint64_t v6 = v1;
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    char v9 = *(void **)(v0 + 1280);
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    uint64_t v12 = v9;
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 328) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v13;

    _os_log_impl(&dword_24F9A2000, v7, v8, "Error handing off to Text Assistant: %@", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v11, -1, -1);
    MEMORY[0x25336A180](v10, -1, -1);
  }
  else
  {
    uint64_t v14 = *(void **)(v0 + 1280);
  }
  (*(void (**)(void, void))(v0 + 1200))(*(void *)(v0 + 1024), *(void *)(v0 + 976));
  if (*(void *)(*(void *)(v0 + 544) + *(int *)(v0 + 1320) + 8))
  {
    uint64_t v15 = static SessionPersistenceUtils.setConfirmation(forTextSession:)();
  }
  else
  {
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      int v65 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v20 = _typeName(_:qualified:)();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v16, v17, "%s.%s Attempting to save the current sessionID but found nil", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v19, -1, -1);
      MEMORY[0x25336A180](v18, -1, -1);
    }
  }
  uint64_t v59 = *(void (**)(uint64_t, uint64_t, os_log_t))(v0 + 1184);
  BOOL v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
  uint64_t v23 = *(void *)(v0 + 1088);
  uint64_t v60 = *(void *)(v0 + 1080);
  *(void *)typea = *(void *)(v0 + 1072);
  uint64_t v24 = *(void *)(v0 + 1056);
  uint64_t v25 = *(void *)(v0 + 1048);
  long long v26 = *(void *)(v0 + 1016);
  log = *(os_log_t *)(v0 + 976);
  uint64_t v58 = *(void *)(v0 + 1176);
  unint64_t v27 = *(void *)(v0 + 560);
  uint64_t v28 = *(void *)(v0 + 552);
  int v55 = *(void *)(v0 + 536);
  (*(void (**)(uint64_t, float))(v0 + 584))(v15, 0.6);
  uint64_t v29 = swift_allocObject();
  *(void *)(v0 + 1288) = v29;
  *(void *)(v29 + 16) = v28;
  *(void *)(v29 + 24) = v27;
  v59(v26, v58, log);
  v22(v23, v55, v25);
  v22(v60, v23, v25);
  (*(void (**)(os_log_type_t *, uint64_t, uint64_t))(v24 + 32))(*(os_log_type_t **)typea, v23, v25);
  swift_retain();
  uint64_t v30 = Logger.logObject.getter();
  type = static os_log_type_t.error.getter();
  unint64_t v31 = os_log_type_enabled(v30, type);
  int v32 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1144);
  uint64_t v34 = *(void *)(v0 + 1080);
  uint64_t v35 = *(void *)(v0 + 1048);
  uint64_t v36 = *(void *)(v0 + 1016);
  uint64_t v37 = *(void *)(v0 + 976);
  if (v31)
  {
    unint64_t v61 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
    uint64_t v54 = *(void *)(v0 + 1072);
    uint64_t v38 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    int v65 = v56;
    *(_DWORD *)uint64_t v38 = 136315650;
    uint64_t v39 = _typeName(_:qualified:)();
    *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 22) = 2080;
    uint64_t v41 = GenerativeAssistantUseCase.rawValue.getter();
    *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v33(v54, v35);
    v33(v34, v35);
    _os_log_impl(&dword_24F9A2000, v30, type, "%s.%s Calling model orchestrator with use case %s", (uint8_t *)v38, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v56, -1, -1);
    MEMORY[0x25336A180](v38, -1, -1);

    v61(v36, v37);
  }
  else
  {
    v33(*(void *)(v0 + 1072), *(void *)(v0 + 1048));
    v33(v34, v35);

    v32(v36, v37);
  }
  int v43 = *(void *)(v0 + 648);
  unint64_t v44 = *(void *)(v0 + 640);
  os_log_type_t v45 = *(void *)(v0 + 544);
  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  LOBYTE(v65) = 0;
  dispatch thunk of SELFUtils.gatUsecase.setter();
  swift_release();
  uint64_t v46 = type metadata accessor for URL();
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56);
  v47(v43, 1, 1, v46);
  v47(v44, 1, 1, v46);
  *(unsigned char *)(v0 + 1324) = *(unsigned char *)(v45 + 1);
  swift_retain();
  uint64_t v48 = (void *)swift_task_alloc();
  *(void *)(v0 + 1296) = v48;
  LOBYTE(v65) = 1;
  unsigned char *v48 = v0;
  v48[1] = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  unint64_t v49 = *(void *)(v0 + 664);
  unint64_t v50 = *(void *)(v0 + 648);
  uint64_t v51 = *(void *)(v0 + 528);
  uint64_t v52 = *(void *)(v0 + 520);
  return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v49, v52, v51, v50, 0, 0, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[81];
    uint64_t v4 = v2[80];
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v3, &demangling cache variable for type metadata for URL?);
    uint64_t v5 = v2[142];
    uint64_t v6 = v2[141];
    uint64_t v7 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  else
  {
    uint64_t v8 = v2[81];
    char v9 = v2[80];
    swift_release();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v9, &demangling cache variable for type metadata for URL?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v8, &demangling cache variable for type metadata for URL?);
    uint64_t v5 = v2[142];
    uint64_t v6 = v2[141];
    uint64_t v7 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v7, v6, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t, float);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 v14[9];
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  long long v1 = v0[133];
  uint64_t v2 = v0[131];
  uint64_t v12 = v0[117];
  uint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[145];
  uint64_t v3 = v0[83];
  uint64_t v4 = (void *)v0[82];
  uint64_t v5 = (void (*)(uint64_t, float))v0[73];
  uint64_t v6 = v0[68];
  uint64_t v7 = v0[67];
  uint64_t v8 = v0[64];
  char v9 = swift_release();
  v5(v9, 0.85);
  outlined init with copy of InvocationContext(v3, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  v14[0] = *(unsigned char *)(v6 + 1);
  v13(v1, v7, v2);
  GeneratedResponse.init(_:mode:useCaseID:isFirstRequest:)(v4, v14, v1, *(unsigned char *)(v6 + *(int *)(v12 + 36)), v8);
  swift_release();
  outlined destroy of InvocationContext(v3, (uint64_t (*)(void))type metadata accessor for ModelResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  char v12;
  uint64_t v13[2];
  void *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  static MetricsUtils.shared.getter();
  static Signpost.userCancelDuringConfirmation.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRequestCanceled()();
  swift_release();
  long long v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v13[0] = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    uint64_t v5 = _typeName(_:qualified:)();
    v0[59] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    v0[60] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s User cancelled", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v4, -1, -1);
    MEMORY[0x25336A180](v3, -1, -1);
  }

  uint64_t v7 = (void *)v0[153];
  uint64_t v8 = v0[71];
  char v9 = v0[64];
  uint64_t v12 = 7;
  static GeneratedResponse.failureResponse(_:catId:)(&v12, v9);
  outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?(v8);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  long long v1 = v0[97];
  uint64_t v2 = v0[96];
  uint64_t v3 = v0[95];
  outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?(v0[71]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  void (*v14)(uint64_t, uint64_t);
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void **v28;
  id v29;
  int v30;
  void *v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  BOOL v64;
  void *v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  id v76;
  void *v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  uint64_t (*v82)(void);
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[3];
  uint64_t v93;
  uint64_t v94;

  uint64_t v93 = v0;
  long long v1 = *(void **)(v0 + 1304);
  swift_release();
  swift_release();
  *(void *)(v0 + 424) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void **)(v0 + 1304);
  if (v3)
  {
    uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1184);
    uint64_t v5 = *(void *)(v0 + 1176);
    uint64_t v6 = *(void *)(v0 + 1008);
    uint64_t v7 = *(void *)(v0 + 976);
    uint64_t v8 = *(void *)(v0 + 720);
    char v9 = *(void *)(v0 + 712);
    uint64_t v10 = *(void *)(v0 + 704);
    uint64_t v91 = *(void *)(v0 + 696);
    uint64_t v11 = *(void *)(v0 + 680);
    uint64_t v12 = *(void *)(v0 + 672);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v8, v12);
    v86(v6, v5, v7);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v13(v10, v9, v12);
    unint64_t v88 = v13;
    v13(v91, v10, v12);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v14(v10, v12);
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    uint64_t v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
    uint64_t v19 = *(void *)(v0 + 1008);
    uint64_t v20 = *(void *)(v0 + 976);
    os_log_type_t v21 = *(void *)(v0 + 696);
    BOOL v22 = *(void *)(v0 + 672);
    if (v17)
    {
      uint64_t v23 = swift_slowAlloc();
      os_log_type_t v84 = swift_slowAlloc();
      v92[0] = v84;
      *(_DWORD *)uint64_t v23 = 136315650;
      uint64_t v24 = _typeName(_:qualified:)();
      *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2080;
      lazy protocol witness table accessor for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase((unint64_t *)&lazy protocol witness table cache variable for type GATError and conformance GATError, MEMORY[0x263F407A8]);
      long long v26 = Error.localizedDescription.getter();
      *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v14(v21, v22);
      _os_log_impl(&dword_24F9A2000, v15, v16, "%s.%s [GATError = %s]", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v84, -1, -1);
      MEMORY[0x25336A180](v23, -1, -1);

      v18(v19, v20);
    }
    else
    {
      v14(*(void *)(v0 + 696), *(void *)(v0 + 672));

      v18(v19, v20);
    }
    unint64_t v49 = *(void *)(v0 + 712);
    unint64_t v50 = *(void *)(v0 + 688);
    uint64_t v51 = *(void *)(v0 + 680);
    uint64_t v52 = *(void *)(v0 + 672);

    v88(v50, v49, v52);
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 88))(v50, v52);
    uint64_t v54 = *(void *)(v0 + 712);
    int v55 = *(void *)(v0 + 688);
    if (v53 == *MEMORY[0x263F407A0])
    {
      uint64_t v56 = *(void *)(v0 + 672);
      (*(void (**)(void, uint64_t))(*(void *)(v0 + 680) + 96))(*(void *)(v0 + 688), v56);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase((unint64_t *)&lazy protocol witness table cache variable for type GATError and conformance GATError, MEMORY[0x263F407A8]);
      swift_allocError();
      v88(v57, v54, v56);
      swift_willThrow();
      v14(v54, v56);
    }
    else
    {
      unint64_t v74 = v14;
      uint64_t v75 = *(void *)(v0 + 672);
      static GATError.errorDomain.getter();
      GATError.errorCode.getter();
      uint64_t v76 = objc_allocWithZone((Class)type metadata accessor for CustomErrorWithLocalizedDescription());
      CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)();
      swift_willThrow();
      v74(v54, v75);
      v74(v55, v75);
    }
    uint64_t v58 = *(void **)(v0 + 424);
  }
  else
  {
    uint64_t v28 = (void **)(v0 + 216);

    *(void *)(v0 + 216) = v4;
    uint64_t v29 = v4;
    uint64_t v30 = swift_dynamicCast();
    unint64_t v31 = *(void **)(v0 + 1304);
    int v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1184);
    uint64_t v33 = *(void *)(v0 + 1176);
    uint64_t v34 = *(void *)(v0 + 976);
    if (v30)
    {
      uint64_t v35 = *(void *)(v0 + 1000);

      uint64_t v36 = *(unsigned char *)(v0 + 1325);
      v32(v35, v33, v34);
      uint64_t v37 = Logger.logObject.getter();
      uint64_t v38 = static os_log_type_t.error.getter();
      uint64_t v39 = os_log_type_enabled(v37, v38);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
      uint64_t v41 = *(void *)(v0 + 1000);
      uint64_t v42 = *(void *)(v0 + 976);
      if (v39)
      {
        uint64_t v89 = *(void *)(v0 + 1000);
        uint64_t v87 = *(void *)(v0 + 976);
        int v43 = swift_slowAlloc();
        unint64_t v44 = swift_slowAlloc();
        v92[0] = v44;
        *(_DWORD *)int v43 = 136315650;
        os_log_type_t v45 = _typeName(_:qualified:)();
        *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2080;
        *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 22) = 2080;
        uint64_t v28 = (void **)(v0 + 216);
        *(unsigned char *)(v0 + 1326) = v36;
        lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
        uint64_t v47 = Error.localizedDescription.getter();
        *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24F9A2000, v37, v38, "%s.%s [ModelOrchestrator.Error = %s]", (uint8_t *)v43, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v44, -1, -1);
        MEMORY[0x25336A180](v43, -1, -1);

        v40(v89, v87);
      }
      else
      {

        v40(v41, v42);
      }
      objc_allocWithZone((Class)type metadata accessor for CustomErrorWithLocalizedDescription());
      swift_bridgeObjectRetain();
      CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)();
      swift_willThrow();
      uint64_t v58 = *v28;
    }
    else
    {
      uint64_t v59 = *(void *)(v0 + 992);

      v32(v59, v33, v34);
      uint64_t v60 = v31;
      unint64_t v61 = v31;
      uint64_t v62 = Logger.logObject.getter();
      uint64_t v63 = static os_log_type_t.error.getter();
      unint64_t v64 = os_log_type_enabled(v62, v63);
      int v65 = *(void **)(v0 + 1304);
      uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v0 + 1200);
      os_log_type_t v67 = *(void *)(v0 + 992);
      BOOL v68 = *(void *)(v0 + 976);
      if (v64)
      {
        uint64_t v90 = *(void *)(v0 + 992);
        uint64_t v69 = swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        v92[0] = v85;
        *(_DWORD *)uint64_t v69 = 136315650;
        uint64_t v70 = _typeName(_:qualified:)();
        *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v69 + 12) = 2080;
        *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000C4, 0x800000024FA48FD0, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v69 + 22) = 2080;
        swift_getErrorValue();
        uint64_t v72 = Error.localizedDescription.getter();
        *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_24F9A2000, v62, v63, "%s.%s [error = %s]", (uint8_t *)v69, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v85, -1, -1);
        MEMORY[0x25336A180](v69, -1, -1);

        v66(v90, v68);
      }
      else
      {

        v66(v67, v68);
      }
      int v77 = *(void **)(v0 + 1304);
      os_log_type_t v78 = (void *)_convertErrorToNSError(_:)();
      uint64_t v79 = objc_msgSend(v78, sel_domain);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v80 = (void *)_convertErrorToNSError(_:)();
      objc_msgSend(v80, sel_code);

      unint64_t v81 = objc_allocWithZone((Class)type metadata accessor for CustomErrorWithLocalizedDescription());
      CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)();
      swift_willThrow();
      uint64_t v58 = v77;
    }
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v82 = *(uint64_t (**)(void))(v0 + 8);
  return v82();
}

uint64_t GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:)(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1280) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 1136);
    uint64_t v6 = *(void *)(v4 + 1128);
    uint64_t v7 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  else
  {
    *(unsigned char *)(v4 + 1328) = a1 & 1;
    uint64_t v5 = *(void *)(v4 + 1136);
    uint64_t v6 = *(void *)(v4 + 1128);
    uint64_t v7 = GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v7, v6, v5);
}

uint64_t closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v6;
  v4[8] = v5;
  return MEMORY[0x270FA2498](closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:), v6, v5);
}

uint64_t closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:)()
{
  uint64_t v11 = v0;
  if (one-time initialization token for acmeAsks != -1) {
    swift_once();
  }
  unint64_t v1 = v0[3];
  uint64_t v2 = (int *)v0[4];
  uint64_t v3 = v0[2];
  strcpy((char *)v10, "ChatGPT asks: ");
  HIBYTE(v10[1]) = -18;
  v4._uint64_t countAndFlagsBits = String.withoutEmoji.getter(v3, v1);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = v10[0];
  uint64_t v5 = v10[1];
  v0[9] = v10[1];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v2 + *v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[10] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  return v9(v6, v5);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  unint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  return v1(v2, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  *(void *)(*(void *)v3 + 88) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = v6[7];
    uint64_t v8 = v6[8];
    uint64_t v9 = closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  else
  {
    swift_bridgeObjectRelease();
    v6[12] = a2;
    v6[13] = a1;
    uint64_t v7 = v6[7];
    uint64_t v8 = v6[8];
    uint64_t v9 = closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  }
  return MEMORY[0x270FA2498](v9, v7, v8);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  a4(&v7);
  uint64_t v5 = *a1 + 4;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

{
  return a1();
}

uint64_t outlined init with take of InvocationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InvocationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24F9ED21C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = partial apply for closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  return closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:)(a1, a2, v7, v6);
}

{
  uint64_t *v2;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

unint64_t lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error;
  if (!lazy protocol witness table cache variable for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error;
  if (!lazy protocol witness table cache variable for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error;
  if (!lazy protocol witness table cache variable for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type GenerativeAssistantUseCase and conformance GenerativeAssistantUseCase(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of InvocationContext(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of InvocationContext(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type IntentResultContainer<Never, Never, Never, IntentDialog> and conformance IntentResultContainer<A, B, C, D>()
{
  unint64_t result = lazy protocol witness table cache variable for type IntentResultContainer<Never, Never, Never, IntentDialog> and conformance IntentResultContainer<A, B, C, D>;
  if (!lazy protocol witness table cache variable for type IntentResultContainer<Never, Never, Never, IntentDialog> and conformance IntentResultContainer<A, B, C, D>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for IntentResultContainer<Never, Never, Never, IntentDialog>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentResultContainer<Never, Never, Never, IntentDialog> and conformance IntentResultContainer<A, B, C, D>);
  }
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t destroy for GenerateTextController(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  return __swift_destroy_boxed_opaque_existential_0(a1 + 80);
}

uint64_t initializeWithCopy for GenerateTextController(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  return a1;
}

uint64_t assignWithCopy for GenerateTextController(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(long long *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for GenerateTextController(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenerateTextController(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 121)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenerateTextController(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 120) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 121) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 121) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenerateTextController()
{
  return &type metadata for GenerateTextController;
}

uint64_t dispatch thunk of ModelSessionFactory.createSession(systemPrompt:tools:useCaseID:enableBrowserTool:sessionID:templateID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a11 + 8))(a1, a2, a3);
}

uint64_t dispatch thunk of ModelSession.hasRegisteredDocuments.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a11 + 16) + **(int **)(a11 + 16));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v11 + 16) = v18;
  void *v18 = v11;
  v18[1] = dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t dispatch thunk of ModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a12 + 24) + **(int **)(a12 + 24));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v12 + 16) = v18;
  void *v18 = v12;
  v18[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t dispatch thunk of ModelSession.generate(userQuery:useCaseID:keepAliveCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a8 + 32) + **(int **)(a8 + 32));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *uint64_t v17 = v8;
  v17[1] = dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of ModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a9 + 40) + **(int **)(a9 + 40));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v17;
  *uint64_t v17 = v9;
  v17[1] = dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t dispatch thunk of ModelSession.attachTools(tooling:enableBrowserTool:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of Result<URL, SharingMediaAttachmentError>(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void *DefaultModelSession.init(systemPrompt:tools:useCaseID:enableBrowserTool:sessionID:templateID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v32)(uint64_t *__return_ptr, id);
  id v33;
  void (*v34)(uint64_t *__return_ptr, id);
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  BOOL v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  unsigned char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  unint64_t v81 = a1;
  uint64_t v82 = a8;
  uint64_t v90 = a7;
  uint64_t v96 = a4;
  uint64_t v97 = a6;
  uint64_t v92 = a3;
  uint64_t v87 = a2;
  uint64_t v83 = *v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  MEMORY[0x270FA5388](v12 - 8);
  os_log_type_t v84 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ToolChoice();
  MEMORY[0x270FA5388](v14 - 8);
  os_log_type_t v78 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for GenerativeAssistantUseCase();
  uint64_t v95 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  int v77 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v79 = (char *)&v75 - v19;
  uint64_t v20 = type metadata accessor for SessionConfiguration();
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v80 = (uint64_t)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SamplingStrategy?);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  unint64_t v27 = (char *)&v75 - v26;
  uint64_t v28 = type metadata accessor for SamplingParameters();
  uint64_t v93 = *(void *)(v28 - 8);
  uint64_t v94 = v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v88 = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.createSessionProcess.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  uint64_t v89 = type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordCreateSessionStarted()();
  swift_release();
  uint64_t v31 = type metadata accessor for SamplingStrategy();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v27, 1, 1, v31);
  if (one-time initialization token for _modelMaximumTokens != -1) {
    swift_once();
  }
  uint64_t v91 = a5;
  uint64_t v98 = v9;
  if (byte_269A456A8 == 1)
  {
    int v32 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A45690 + 1);
    uint64_t v33 = (id)static Overrides._modelMaximumTokens;
    swift_bridgeObjectRetain();
    swift_retain();
    v32(&v100, v33);
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for _modelRandomSeed != -1) {
    swift_once();
  }
  uint64_t v99 = v16;
  uint64_t v85 = v10;
  uint64_t v86 = a9;
  if (byte_269A456D8 == 1)
  {
    uint64_t v34 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A456C0 + 1);
    uint64_t v35 = (id)static Overrides._modelRandomSeed;
    swift_bridgeObjectRetain();
    swift_retain();
    v34(&v100, v35);
    swift_release();
    swift_bridgeObjectRelease();
  }
  outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)v27, (uint64_t)v25, &demangling cache variable for type metadata for SamplingStrategy?);
  SamplingParameters.init(strategy:temperature:frequencyPenalty:lengthPenalty:maximumTokens:stopSequences:randomSeed:timeout:)();
  SamplingParameters.promptLookupDraftSteps.setter();
  SamplingParameters.speculativeSampling.setter();
  SamplingParameters.tokenHealing.setter();
  outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v27, &demangling cache variable for type metadata for SamplingStrategy?);
  uint64_t v36 = (char *)v98 + OBJC_IVAR____TtC26GenerativeAssistantActions19DefaultModelSession_samplingParameters;
  (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))((uint64_t)v98 + OBJC_IVAR____TtC26GenerativeAssistantActions19DefaultModelSession_samplingParameters, v30, v94);
  uint64_t v37 = v96;
  uint64_t v38 = v99;
  uint64_t v39 = v92;
  uint64_t v40 = v90;
  if (v90)
  {
    type metadata accessor for GenerativeExperiencesSession();
    swift_bridgeObjectRetain();
    specialized static DefaultModelSession.getTools(tooling:enableBrowserTool:)(v39, v91 & 1);
    uint64_t v41 = static GenerativeExperiencesSession.retrieveSession(with:reattaching:)();
    swift_bridgeObjectRelease();
    if (v41)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for modelInteraction != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.modelInteraction);
      swift_bridgeObjectRetain();
      int v43 = Logger.logObject.getter();
      unint64_t v44 = static os_log_type_t.debug.getter();
      os_log_type_t v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = v98;
      if (v45)
      {
        uint64_t v47 = swift_slowAlloc();
        uint64_t v94 = swift_slowAlloc();
        uint64_t v100 = v94;
        *(_DWORD *)uint64_t v47 = 136315650;
        uint64_t v48 = _typeName(_:qualified:)();
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v50 = v98;
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2080;
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004ALL, 0x800000024FA493E0, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v47 + 22) = 2080;
        uint64_t v46 = v50;
        swift_bridgeObjectRetain();
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v40, &v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24F9A2000, v43, v44, "%s.%s Using existing session, id: %s", (uint8_t *)v47, 0x20u);
        uint64_t v51 = v94;
        swift_arrayDestroy();
        uint64_t v37 = v96;
        MEMORY[0x25336A180](v51, -1, -1);
        MEMORY[0x25336A180](v47, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v69 = v95;
LABEL_26:
      void v46[2] = v41;
      static MetricsUtils.shared.getter();
      static Signpost.createSessionProcess.getter();
      uint64_t v72 = type metadata accessor for OSSignpostID();
      uint64_t v73 = (uint64_t)v84;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v84, 1, 1, v72);
      dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
      swift_release();
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v73, &demangling cache variable for type metadata for OSSignpostID?);
      static SELFUtils.shared.getter();
      dispatch thunk of SELFUtils.recordCreateSessionEnded()();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v37, v99);
      return v46;
    }
    swift_bridgeObjectRelease();
    uint64_t v38 = v99;
  }
  uint64_t v76 = v36;
  uint64_t v52 = v95;
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
  uint64_t v54 = (uint64_t)v79;
  v53(v79, v37, v38);
  SessionConfiguration.init(_:_:_:_:)(v81, v87, v97, v40, v54, v82, v86, v80);
  type metadata accessor for GenerativeExperiencesSession();
  swift_allocObject();
  int v55 = GenerativeExperiencesSession.init(configuration:)();
  if (v55)
  {
    uint64_t v41 = v55;
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.modelInteraction);
    os_log_type_t v57 = v77;
    uint64_t v58 = v99;
    v53(v77, v37, v99);
    swift_retain_n();
    uint64_t v59 = Logger.logObject.getter();
    uint64_t v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      unint64_t v61 = v57;
      uint64_t v62 = swift_slowAlloc();
      uint64_t v97 = swift_slowAlloc();
      uint64_t v100 = v97;
      *(_DWORD *)uint64_t v62 = 136315906;
      uint64_t v63 = _typeName(_:qualified:)();
      uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v62 + 12) = 2080;
      uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004ALL, 0x800000024FA493E0, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v62 + 22) = 2080;
      int v65 = GenerativeAssistantUseCase.rawValue.getter();
      uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v67 = v95;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v61, v99);
      *(_WORD *)(v62 + 32) = 2080;
      uint64_t v39 = v92;
      BOOL v68 = GenerativeExperiencesSession.sessionIdentifier()();
      uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68._countAndFlagsBits, (unint64_t)v68._object, &v100);
      uint64_t v69 = v67;
      uint64_t v46 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v59, v60, "%s.%s Created a new session for %s, id: %s", (uint8_t *)v62, 0x2Au);
      uint64_t v70 = v97;
      swift_arrayDestroy();
      uint64_t v37 = v96;
      MEMORY[0x25336A180](v70, -1, -1);
      MEMORY[0x25336A180](v62, -1, -1);
    }
    else
    {
      uint64_t v69 = v95;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v57, v58);

      swift_release_n();
      uint64_t v46 = v98;
    }
    specialized static DefaultModelSession.getTools(tooling:enableBrowserTool:)(v39, v91 & 1);
    swift_bridgeObjectRelease();
    GenerativeExperiencesSession.tools.setter();
    static ToolChoice.automatic.getter();
    GenerativeExperiencesSession.toolChoice.setter();
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  static MetricsUtils.shared.getter();
  static Signpost.sessionCreationError.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordCreateSessionFailed(code:domain:)();
  swift_release();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordCreateSessionFailed(code:domain:)();
  swift_release();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
  swift_release();
  lazy protocol witness table accessor for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError();
  swift_allocError();
  *uint64_t v71 = 0;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v76, v94);
  uint64_t v46 = v98;
  swift_deallocPartialClassInstance();
  return v46;
}

uint64_t SessionConfiguration.init(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v54 = a6;
  uint64_t v55 = a7;
  uint64_t v52 = a2;
  uint64_t v53 = a8;
  uint64_t v48 = a1;
  uint64_t v46 = type metadata accessor for ChatMessageRole();
  uint64_t v45 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v47 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ChatMessagePrompt();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v51 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CachePolicy();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SessionConfiguration();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  unint64_t v44 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v41 = a3;
  uint64_t v49 = v25;
  uint64_t v50 = v22;
  uint64_t v40 = v15;
  uint64_t v39 = v16;
  uint64_t v38 = v18;
  if (a4)
  {
    uint64_t v43 = a3;
    uint64_t v42 = a4;
  }
  else
  {
    UUID.init()();
    uint64_t v43 = UUID.uuidString.getter();
    uint64_t v42 = v26;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  swift_bridgeObjectRetain();
  uint64_t v56 = a5;
  GenerativeAssistantUseCase.rawValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ModelBundle>);
  type metadata accessor for ModelBundle();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_24FA3E1D0;
  static Catalog.Resource.LLM.Model.ChatGPT()();
  uint64_t v28 = v59;
  uint64_t v27 = v60;
  uint64_t v29 = __swift_project_boxed_opaque_existential_1(v58, v59);
  v57[3] = v28;
  v57[4] = *(void *)(v27 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(boxed_opaque_existential_1, v29, v28);
  ModelBundle.init(resource:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v58);
  static CachePolicy.inMemory.getter();
  getProcessIdenitifierForSiri()();
  SessionConfiguration.init(identifier:useCaseID:preferredModelBundles:handlesSensitiveData:cachePolicy:onBehalfOf:)();
  uint64_t v32 = v49;
  uint64_t v31 = v50;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v44, v24, v50);
  uint64_t v33 = (*(uint64_t (**)(char *, void, uint64_t))(v45 + 104))(v47, *MEMORY[0x263F62110], v46);
  MEMORY[0x270FA5388](v33);
  ChatMessagePrompt.init(role:prompt:)();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    uint64_t v34 = v38;
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v40);
  }
  SessionConfiguration.init(tokenGeneratorConfig:identifier:instructions:templateID:)();
  uint64_t v35 = type metadata accessor for GenerativeAssistantUseCase();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(v56, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v24, v31);
}

uint64_t DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  long long v8[2] = a1;
  v8[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  v8[10] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PromptCompletionStream();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for PromptCompletion();
  v8[14] = v10;
  v8[15] = *(void *)(v10 - 8);
  unsigned char v8[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v8[17] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v8[18] = v11;
  v8[19] = *(void *)(v11 - 8);
  v8[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v8[21] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for StringResponseSanitizer.DefaultableGuardrails();
  v8[22] = v12;
  v8[23] = *(void *)(v12 - 8);
  v8[24] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for StringResponseSanitizer.DefaultableOverrides();
  v8[25] = v13;
  v8[26] = *(void *)(v13 - 8);
  v8[27] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for StringResponseSanitizer();
  v8[28] = v14;
  v8[29] = *(void *)(v14 - 8);
  v8[30] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for StringRenderedPromptSanitizer.DefaultableGuardrails();
  v8[31] = v15;
  v8[32] = *(void *)(v15 - 8);
  v8[33] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for StringRenderedPromptSanitizer.DefaultableOverrides();
  v8[34] = v16;
  v8[35] = *(void *)(v16 - 8);
  v8[36] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for StringRenderedPromptSanitizer();
  v8[37] = v17;
  v8[38] = *(void *)(v17 - 8);
  v8[39] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for SamplingParameters();
  v8[40] = v18;
  v8[41] = *(void *)(v18 - 8);
  v8[42] = swift_task_alloc();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<ModelResponse>);
  v8[43] = v19;
  v8[44] = *(void *)(v19 - 8);
  v8[45] = swift_task_alloc();
  v8[46] = type metadata accessor for MainActor();
  v8[47] = static MainActor.shared.getter();
  uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[48] = v21;
  v8[49] = v20;
  return MEMORY[0x270FA2498](DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:), v21, v20);
}

uint64_t DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)()
{
  uint64_t v1 = v0[41];
  uint64_t v30 = v0[40];
  uint64_t v32 = v0[42];
  uint64_t v3 = v0[35];
  uint64_t v2 = v0[36];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[32];
  uint64_t v34 = v0[34];
  uint64_t v36 = v0[31];
  uint64_t v6 = v0[26];
  uint64_t v38 = v0[27];
  uint64_t v39 = v0[25];
  uint64_t v41 = v0[24];
  uint64_t v43 = v0[23];
  uint64_t v45 = v0[22];
  uint64_t v47 = v0[21];
  uint64_t v48 = v0[19];
  uint64_t v49 = v0[18];
  uint64_t v7 = v0[9];
  v0[50] = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.responseGenerationDuration.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  v0[51] = type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordGenerativeRequestStarted(usecase:mediaQAUseCase:llmAgentName:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v32, v7 + OBJC_IVAR____TtC26GenerativeAssistantActions19DefaultModelSession_samplingParameters, v30);
  GenerativeAssistantUseCase.inputOverrides()(v2);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, *MEMORY[0x263F41440], v34);
  uint64_t v8 = type metadata accessor for StringRenderedPromptSanitizer.Guardrails();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, *MEMORY[0x263F41448], v36);
  StringRenderedPromptSanitizer.init(overrides:guardrails:)();
  GenerativeAssistantUseCase.outputOverrides()(v38);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v38, *MEMORY[0x263F413F8], v39);
  uint64_t v9 = type metadata accessor for StringResponseSanitizer.Guardrails();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v41, 1, 1, v9);
  (*(void (**)(uint64_t, void, uint64_t))(v43 + 104))(v41, *MEMORY[0x263F41400], v45);
  StringResponseSanitizer.init(overrides:guardrails:)();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.gatID.getter();
  swift_release();
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v47, 1, v49);
  uint64_t v11 = v0[21];
  if (v10)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v0[21], &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    uint64_t v13 = v0[19];
    uint64_t v12 = v0[20];
    uint64_t v14 = v0[18];
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 16))(v12, v0[21], v14);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v11, &demangling cache variable for type metadata for UUID?);
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  uint64_t v15 = v0[41];
  uint64_t v16 = v0[38];
  uint64_t v31 = v0[39];
  uint64_t v33 = v0[42];
  uint64_t v18 = v0[29];
  uint64_t v17 = v0[30];
  uint64_t v35 = v0[28];
  uint64_t v37 = v0[37];
  uint64_t v40 = v0[40];
  uint64_t v42 = v0[17];
  uint64_t v44 = v0[8];
  uint64_t v46 = v0[7];
  uint64_t v19 = v0[4];
  uint64_t v20 = v0[5];
  uint64_t v21 = v0[3];
  type metadata accessor for ModelResponse();
  uint64_t v22 = (void *)swift_task_alloc();
  _OWORD v22[2] = v20;
  v22[3] = v21;
  v22[4] = v19;
  lazy protocol witness table accessor for type ModelResponse and conformance ModelResponse(&lazy protocol witness table cache variable for type ModelResponse and conformance ModelResponse, (void (*)(uint64_t))type metadata accessor for ModelResponse);
  GenerativeExperiencesSession.complete<A>(generating:parameters:promptSanitizer:responseSanitizer:clientRequestID:query:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v35);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v31, v37);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v33, v40);
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v42, 1, 1, v23);
  swift_retain();
  uint64_t v24 = static MainActor.shared.getter();
  uint64_t v25 = (void *)swift_allocObject();
  uint64_t v26 = MEMORY[0x263F8F500];
  void v25[2] = v24;
  v25[3] = v26;
  v25[4] = v46;
  v25[5] = v44;
  v0[52] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v42, (uint64_t)&async function pointer to partial apply for closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:), (uint64_t)v25);
  TokenStream.events.getter();
  uint64_t v27 = (void *)swift_task_alloc();
  v0[53] = v27;
  void *v27 = v0;
  v27[1] = DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:);
  uint64_t v28 = v0[16];
  return MEMORY[0x270F7F040](v28);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = (void *)*v1;
  v2[54] = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[12] + 8))(v2[13], v2[11]);
    uint64_t v3 = v2[48];
    uint64_t v4 = v2[49];
    return MEMORY[0x270FA2498](DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:), v3, v4);
  }
  else
  {
    (*(void (**)(void, void))(v2[12] + 8))(v2[13], v2[11]);
    uint64_t v5 = (void *)swift_task_alloc();
    v2[55] = v5;
    *uint64_t v5 = v2;
    v5[1] = DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:);
    uint64_t v6 = v2[16];
    uint64_t v7 = v2[2];
    return DefaultModelSession.getModelResponse(from:keepAliveCallback:)(v7, v6);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 392);
  uint64_t v3 = *(void *)(v1 + 384);
  return MEMORY[0x270FA2498](DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = v0[52];
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[45];
  uint64_t v12 = v0[43];
  uint64_t v4 = v0[15];
  int v10 = v0[14];
  uint64_t v11 = v0[16];
  uint64_t v5 = v0[10];
  swift_release();
  static MetricsUtils.shared.getter();
  static Signpost.responseGenerationDuration.getter();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v5, &demangling cache variable for type metadata for OSSignpostID?);
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordGenerativeRequestEnded()();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v10);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x253369450](v1, MEMORY[0x263F8EE60] + 8, v7, MEMORY[0x263F8E4E0]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = v0[52];
  uint64_t v3 = v0[44];
  uint64_t v2 = v0[45];
  uint64_t v9 = v0[43];
  uint64_t v4 = v0[10];
  swift_release();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x253369450](v1, MEMORY[0x263F8EE60] + 8, v5, MEMORY[0x263F8E4E0]);
  swift_release();
  static MetricsUtils.shared.getter();
  static Signpost.responseGenerationDuration.getter();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for OSSignpostID?);
  static MetricsUtils.shared.getter();
  static Signpost.gmsResultError.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordGenerativeRequestFailed(code:domain:)();
  swift_release();
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t closure #1 in DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a3;
  uint64_t v17 = a2;
  uint64_t v22 = a4;
  uint64_t v5 = type metadata accessor for User();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ChatMessagesPrompt();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1;
  uint64_t v20 = v17;
  uint64_t v21 = v18;
  User.init(_:)();
  static ChatMessagesPromptBuilder.buildExpression<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ChatMessagesPrompt>);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_24FA3E1D0;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 16))(v14 + v13, v12, v9);
  MEMORY[0x253369060](v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t closure #1 in closure #1 in DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v7 = type metadata accessor for Prompt();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v24[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v24[-1] - v13;
  uint64_t v25 = &type metadata for PromptImage;
  unint64_t v26 = lazy protocol witness table accessor for type PromptImage and conformance PromptImage();
  v24[0] = a1;
  id v15 = a1;
  static CustomPromptBuilder.buildExpression(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
  uint64_t v25 = (ValueMetadata *)MEMORY[0x263F8D310];
  unint64_t v26 = MEMORY[0x263F62188];
  v24[0] = a2;
  v24[1] = a3;
  swift_bridgeObjectRetain();
  static CustomPromptBuilder.buildExpression(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt>);
  uint64_t v16 = *(void *)(v8 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_24FA3E410;
  unint64_t v19 = v18 + v17;
  uint64_t v20 = *(void (**)(unint64_t, char *, uint64_t))(v9 + 16);
  v20(v19, v14, v7);
  v20(v19 + v16, v12, v7);
  MEMORY[0x253369080](v18, v7, MEMORY[0x263F620B0]);
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v12, v7);
  return ((uint64_t (*)(char *, uint64_t))v21)(v14, v7);
}

uint64_t DefaultModelSession.getModelResponse(from:keepAliveCallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  v3[24] = a2;
  v3[25] = v4;
  v3[23] = a1;
  v3[26] = type metadata accessor for ModelResponse();
  v3[27] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OpenAIAuthenticator();
  v3[28] = v5;
  v3[29] = *(void *)(v5 - 8);
  v3[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpenAIAuthenticator.RateLimitBudgets?);
  v3[31] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OpenAIAuthenticator.RateLimitBudgets();
  v3[32] = v6;
  v3[33] = *(void *)(v6 - 8);
  v3[34] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GenerativeAssistantFeatureFlagManager();
  v3[35] = v7;
  v3[36] = *(void *)(v7 - 8);
  v3[37] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PromptCompletion.Annotation();
  v3[38] = v8;
  v3[39] = *(void *)(v8 - 8);
  v3[40] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for String.Encoding();
  v3[41] = v9;
  v3[42] = *(void *)(v9 - 8);
  v3[43] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for PromptCompletion.TextContent();
  v3[44] = v10;
  v3[45] = *(void *)(v10 - 8);
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for PromptCompletion.ImageContent();
  v3[49] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[50] = v12;
  v3[51] = *(void *)(v12 + 64);
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for PromptCompletion.Content();
  v3[54] = v13;
  v3[55] = *(void *)(v13 - 8);
  v3[56] = swift_task_alloc();
  v3[57] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for PromptCompletion.Segment();
  v3[58] = v14;
  v3[59] = *(void *)(v14 - 8);
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for PromptCompletion.Candidate();
  v3[62] = v15;
  v3[63] = *(void *)(v15 - 8);
  v3[64] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[65] = swift_task_alloc();
  v3[66] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[67] = static MainActor.shared.getter();
  uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[68] = v17;
  v3[69] = v16;
  return MEMORY[0x270FA2498](DefaultModelSession.getModelResponse(from:keepAliveCallback:), v17, v16);
}

uint64_t DefaultModelSession.getModelResponse(from:keepAliveCallback:)()
{
  uint64_t v232 = v0;
  uint64_t v1 = *(void *)(v0 + 528);
  *(void *)(v0 + 160) = MEMORY[0x263F8EE78];
  uint64_t v2 = type metadata accessor for URL();
  *(void *)(v0 + 560) = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  *(void *)(v0 + 568) = v4;
  *(void *)(v0 + 576) = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v4(v1, 1, 1, v2);
  *(void *)(v0 + 120) = 0;
  uint64_t v5 = v0 + 120;
  *(void *)(v0 + 128) = 0xE000000000000000;
  uint64_t v6 = PromptCompletion.candidates.getter();
  uint64_t v7 = v6;
  uint64_t v188 = *(void *)(v6 + 16);
  if (v188)
  {
    uint64_t v189 = 0;
    unint64_t v8 = 0;
    uint64_t v191 = (_OWORD *)(v0 + 56);
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v10 = *(void *)(v0 + 440);
    unint64_t v186 = v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v218 = (uint64_t (**)(uint64_t, uint64_t))(v10 + 88);
    uint64_t v183 = *(void *)(v0 + 472);
    uint64_t v215 = (void (**)(uint64_t, uint64_t))(v183 + 8);
    uint64_t v193 = (void (**)(void, void))(v10 + 8);
    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v211 = (void (**)(uint64_t, void))(v10 + 96);
    uint64_t v195 = *(void *)(v0 + 400);
    int v217 = *MEMORY[0x263F7F8F8];
    uint64_t v210 = (void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    uint64_t v214 = (void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    int v209 = *MEMORY[0x263F7F900];
    uint64_t v216 = (void (**)(uint64_t, uint64_t))(v11 + 8);
    uint64_t v208 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 336) + 8);
    uint64_t v187 = v9;
    uint64_t v185 = (void (**)(uint64_t, uint64_t))(v9 + 8);
    unint64_t v201 = 0xE000000000000000;
    uint64_t v199 = MEMORY[0x263F8EE78];
    uint64_t v220 = (void *)MEMORY[0x263F8EE78];
    uint64_t v184 = v6;
    while (1)
    {
      if (v8 >= *(void *)(v7 + 16))
      {
        __break(1u);
        goto LABEL_104;
      }
      unint64_t v190 = v8;
      (*(void (**)(void, unint64_t, void))(v187 + 16))(*(void *)(v0 + 512), v186 + *(void *)(v187 + 72) * v8, *(void *)(v0 + 496));
      uint64_t v12 = PromptCompletion.Candidate.segments.getter();
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        unint64_t v14 = v12 + ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80));
        uint64_t v219 = *(void *)(v183 + 72);
        int v223 = *(void (**)(void, unint64_t, void))(v183 + 16);
        do
        {
          uint64_t v15 = *(void *)(v0 + 456);
          uint64_t v16 = *(void *)(v0 + 432);
          v223(*(void *)(v0 + 488), v14, *(void *)(v0 + 464));
          PromptCompletion.Segment.content.getter();
          int v17 = (*v218)(v15, v16);
          if (v17 == v217)
          {
            uint64_t v18 = *(void *)(v0 + 456);
            uint64_t v19 = *(void *)(v0 + 384);
            uint64_t v20 = *(void *)(v0 + 352);
            (*v211)(v18, *(void *)(v0 + 432));
            (*v210)(v19, v18, v20);
            if (one-time initialization token for modelInteraction != -1) {
              swift_once();
            }
            uint64_t v21 = *(void *)(v0 + 376);
            uint64_t v22 = *(void *)(v0 + 384);
            uint64_t v23 = *(void *)(v0 + 352);
            uint64_t v24 = type metadata accessor for Logger();
            __swift_project_value_buffer(v24, (uint64_t)static Logger.modelInteraction);
            uint64_t v25 = *v214;
            (*v214)(v21, v22, v23);
            unint64_t v26 = Logger.logObject.getter();
            os_log_type_t v27 = static os_log_type_t.info.getter();
            BOOL v28 = os_log_type_enabled(v26, v27);
            uint64_t v29 = *(void *)(v0 + 376);
            uint64_t v30 = *(void *)(v0 + 352);
            uint64_t v225 = v13;
            if (v28)
            {
              uint64_t v31 = swift_slowAlloc();
              uint64_t v32 = swift_slowAlloc();
              uint64_t v228 = v32;
              *(_DWORD *)uint64_t v31 = 136315138;
              uint64_t v33 = PromptCompletion.TextContent.value.getter();
              *(void *)(v31 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v228);
              swift_bridgeObjectRelease();
              uint64_t v35 = *v216;
              (*v216)(v29, v30);
              _os_log_impl(&dword_24F9A2000, v26, v27, "Text content: %s", (uint8_t *)v31, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x25336A180](v32, -1, -1);
              MEMORY[0x25336A180](v31, -1, -1);
            }
            else
            {
              uint64_t v35 = *v216;
              (*v216)(v29, v30);
            }

            uint64_t v51 = *(void *)(v0 + 344);
            uint64_t v52 = *(void *)(v0 + 328);
            PromptCompletion.TextContent.value.getter();
            static String.Encoding.utf8.getter();
            uint64_t v53 = String.data(using:allowLossyConversion:)();
            unint64_t v55 = v54;
            swift_bridgeObjectRelease();
            (*v208)(v51, v52);
            if (v55 >> 60 == 15)
            {
              uint64_t v56 = v35;
              v25(*(void *)(v0 + 368), *(void *)(v0 + 384), *(void *)(v0 + 352));
              os_log_type_t v57 = Logger.logObject.getter();
              os_log_type_t v58 = static os_log_type_t.error.getter();
              BOOL v59 = os_log_type_enabled(v57, v58);
              uint64_t v60 = *(void *)(v0 + 488);
              uint64_t v61 = *(void *)(v0 + 464);
              uint64_t v62 = *(void *)(v0 + 384);
              uint64_t v63 = *(void *)(v0 + 368);
              uint64_t v64 = *(void *)(v0 + 352);
              if (v59)
              {
                uint64_t v206 = *(void *)(v0 + 488);
                uint64_t v65 = swift_slowAlloc();
                uint64_t v204 = v61;
                uint64_t v66 = swift_slowAlloc();
                uint64_t v228 = v66;
                *(_DWORD *)uint64_t v65 = 136315650;
                uint64_t v67 = _typeName(_:qualified:)();
                *(void *)(v65 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v228);
                swift_bridgeObjectRelease();
                *(_WORD *)(v65 + 12) = 2080;
                *(void *)(v65 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x800000024FA49380, &v228);
                *(_WORD *)(v65 + 22) = 2080;
                uint64_t v69 = PromptCompletion.TextContent.value.getter();
                *(void *)(v65 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v228);
                swift_bridgeObjectRelease();
                v56(v63, v64);
                _os_log_impl(&dword_24F9A2000, v57, v58, "%s.%s Failed to decode into JSON: %s", (uint8_t *)v65, 0x20u);
                swift_arrayDestroy();
                MEMORY[0x25336A180](v66, -1, -1);
                MEMORY[0x25336A180](v65, -1, -1);

                v56(v62, v64);
                (*v215)(v206, v204);
              }
              else
              {

                v56(v63, v64);
                v56(v62, v64);
                (*v215)(v60, v61);
              }
            }
            else
            {
              type metadata accessor for JSONDecoder();
              swift_allocObject();
              JSONDecoder.init()();
              lazy protocol witness table accessor for type ModelResponseText and conformance ModelResponseText();
              dispatch thunk of JSONDecoder.decode<A>(_:from:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              uint64_t v91 = *(void *)(v0 + 16);
              uint64_t v90 = *(void **)(v0 + 24);
              unint64_t v92 = *(void *)(v0 + 40);
              uint64_t v189 = *(void *)(v0 + 32);
              uint64_t v93 = *(void *)(v0 + 48);
              v94._uint64_t countAndFlagsBits = v91;
              v94._object = v90;
              String.append(_:)(v94);
              unint64_t v201 = v92;
              swift_bridgeObjectRetain();
              uint64_t v199 = v93;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              if (isUniquelyReferenced_nonNull_native) {
                uint64_t v96 = v220;
              }
              else {
                uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v220[2] + 1, 1, v220);
              }
              unint64_t v98 = v96[2];
              unint64_t v97 = v96[3];
              uint64_t v192 = v35;
              if (v98 >= v97 >> 1) {
                uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v97 > 1), v98 + 1, 1, v96);
              }
              uint64_t v213 = *(void *)(v0 + 488);
              uint64_t v207 = *(void *)(v0 + 464);
              uint64_t v99 = *(void *)(v0 + 384);
              uint64_t v100 = *(void *)(v0 + 352);
              v96[2] = v98 + 1;
              uint64_t v220 = v96;
              uint64_t v101 = &v96[3 * v98];
              v101[4] = v91;
              v101[5] = v90;
              *((unsigned char *)v101 + 48) = 0;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v102 = PromptCompletion.TextContent.annotations.getter();
              specialized Array.append<A>(contentsOf:)(v102);
              outlined consume of Data?(v53, v55);
              v192(v99, v100);
              (*v215)(v213, v207);
            }
            uint64_t v13 = v225;
          }
          else if (v17 == v209)
          {
            uint64_t v226 = v13;
            uint64_t v36 = *(void *)(v0 + 456);
            uint64_t v37 = *(void *)(v0 + 424);
            uint64_t v38 = *(void *)(v0 + 416);
            uint64_t v39 = *(void *)(v0 + 392);
            (*v211)(v36, *(void *)(v0 + 432));
            uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 32);
            v40(v37, v36, v39);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 16))(v38, v37, v39);
            unint64_t v41 = (*(unsigned __int8 *)(v195 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80);
            uint64_t v42 = swift_allocObject();
            v40(v42 + v41, v38, v39);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v43 = v220;
            }
            else {
              uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v220[2] + 1, 1, v220);
            }
            unint64_t v45 = v43[2];
            unint64_t v44 = v43[3];
            uint64_t v13 = v226;
            if (v45 >= v44 >> 1) {
              uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v43);
            }
            uint64_t v46 = *(void *)(v0 + 488);
            uint64_t v47 = *(void *)(v0 + 464);
            uint64_t v48 = *(void *)(v0 + 424);
            uint64_t v49 = *(void *)(v0 + 392);
            v43[2] = v45 + 1;
            uint64_t v220 = v43;
            uint64_t v50 = &v43[3 * v45];
            v50[4] = &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in DefaultModelSession.getModelResponse(from:keepAliveCallback:);
            v50[5] = v42;
            *((unsigned char *)v50 + 48) = 1;
            (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v48, v49);
            (*v215)(v46, v47);
          }
          else
          {
            if (one-time initialization token for modelInteraction != -1) {
              swift_once();
            }
            uint64_t v71 = *(void *)(v0 + 480);
            unint64_t v72 = *(void *)(v0 + 488);
            uint64_t v73 = *(void *)(v0 + 464);
            uint64_t v74 = type metadata accessor for Logger();
            __swift_project_value_buffer(v74, (uint64_t)static Logger.modelInteraction);
            v223(v71, v72, v73);
            uint64_t v75 = Logger.logObject.getter();
            os_log_type_t v76 = static os_log_type_t.error.getter();
            BOOL v77 = os_log_type_enabled(v75, v76);
            uint64_t v78 = *(void *)(v0 + 480);
            uint64_t v79 = *(void *)(v0 + 488);
            uint64_t v80 = *(void *)(v0 + 464);
            if (v77)
            {
              uint64_t v212 = *(void *)(v0 + 488);
              uint64_t v227 = v13;
              uint64_t v81 = swift_slowAlloc();
              uint64_t v82 = swift_slowAlloc();
              uint64_t v228 = v82;
              *(_DWORD *)uint64_t v81 = 136315650;
              uint64_t v83 = _typeName(_:qualified:)();
              *(void *)(v81 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v228);
              swift_bridgeObjectRelease();
              *(_WORD *)(v81 + 12) = 2080;
              *(void *)(v81 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x800000024FA49380, &v228);
              *(_WORD *)(v81 + 22) = 2080;
              PromptCompletion.Segment.content.getter();
              uint64_t v85 = String.init<A>(describing:)();
              *(void *)(v81 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, &v228);
              swift_bridgeObjectRelease();
              uint64_t v87 = *v215;
              (*v215)(v78, v80);
              _os_log_impl(&dword_24F9A2000, v75, v76, "%s.%s Unhandled segment content type: %s", (uint8_t *)v81, 0x20u);
              swift_arrayDestroy();
              MEMORY[0x25336A180](v82, -1, -1);
              uint64_t v88 = v81;
              uint64_t v13 = v227;
              MEMORY[0x25336A180](v88, -1, -1);

              v87(v212, v80);
            }
            else
            {

              uint64_t v89 = *v215;
              (*v215)(v78, v80);
              v89(v79, v80);
            }
            (*v193)(*(void *)(v0 + 456), *(void *)(v0 + 432));
          }
          v14 += v219;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        uint64_t v5 = v0 + 120;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v103 = PromptCompletion.Candidate.metadata.getter();
      if (*(void *)(v103 + 16)
        && (unint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(0x61756E69746E6F43, 0xEF4C52556E6F6974),
            (v105 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v103 + 56) + 32 * v104, (uint64_t)v191);
      }
      else
      {
        *uint64_t v191 = 0u;
        *(_OWORD *)(v0 + 72) = 0u;
      }
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 80))
      {
        if (swift_dynamicCast())
        {
          uint64_t v106 = *(void *)(v0 + 528);
          uint64_t v107 = *(void *)(v0 + 520);
          uint64_t v109 = *(void *)(v0 + 136);
          unint64_t v108 = *(void *)(v0 + 144);
          URL.init(string:)();
          outlined destroy of Result<URL, SharingMediaAttachmentError>(v106, &demangling cache variable for type metadata for URL?);
          outlined init with take of URL?(v107, v106);
          if (one-time initialization token for modelInteraction != -1) {
            swift_once();
          }
          uint64_t v110 = type metadata accessor for Logger();
          __swift_project_value_buffer(v110, (uint64_t)static Logger.modelInteraction);
          swift_bridgeObjectRetain();
          uint64_t v111 = Logger.logObject.getter();
          os_log_type_t v112 = static os_log_type_t.info.getter();
          BOOL v113 = os_log_type_enabled(v111, v112);
          uint64_t v114 = *(void *)(v0 + 512);
          uint64_t v115 = *(void *)(v0 + 496);
          if (v113)
          {
            uint64_t v116 = (uint8_t *)swift_slowAlloc();
            uint64_t v117 = swift_slowAlloc();
            *(_DWORD *)uint64_t v116 = 136315138;
            uint64_t v228 = v117;
            swift_bridgeObjectRetain();
            *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v108, &v228);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_24F9A2000, v111, v112, "Received punch out url %s", v116, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x25336A180](v117, -1, -1);
            uint64_t v118 = v116;
            uint64_t v5 = v0 + 120;
            MEMORY[0x25336A180](v118, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*v185)(v114, v115);
          uint64_t v7 = v184;
          goto LABEL_5;
        }
      }
      else
      {
        outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v191, &demangling cache variable for type metadata for Any?);
      }
      uint64_t v7 = v184;
      (*v185)(*(void *)(v0 + 512), *(void *)(v0 + 496));
LABEL_5:
      unint64_t v8 = v190 + 1;
      if (v190 + 1 == v188)
      {
        swift_bridgeObjectRelease();
        uint64_t v119 = *(void *)(v0 + 160);
        uint64_t v120 = v189;
        uint64_t v122 = v199;
        unint64_t v121 = v201;
        uint64_t v123 = v220;
        goto LABEL_57;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v120 = 0;
  unint64_t v121 = 0xE000000000000000;
  uint64_t v119 = MEMORY[0x263F8EE78];
  uint64_t v122 = MEMORY[0x263F8EE78];
  uint64_t v123 = (void *)MEMORY[0x263F8EE78];
LABEL_57:
  *(void *)(v0 + 608) = v123;
  *(void *)(v0 + 600) = v121;
  *(void *)(v0 + 592) = v120;
  *(void *)(v0 + 584) = v122;
  uint64_t v124 = *(void *)(v119 + 16);
  if (v124)
  {
    uint64_t v125 = *(void *)(v0 + 312);
    uint64_t v126 = *(void (**)(uint64_t, uint64_t, void))(v125 + 16);
    v125 += 16;
    uint64_t v127 = v119 + ((*(unsigned __int8 *)(v125 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 64));
    char v222 = (void (**)(void, void))(v125 - 8);
    unint64_t v224 = v126;
    uint64_t v221 = *(void *)(v125 + 56);
    swift_bridgeObjectRetain_n();
    uint64_t v128 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v130 = *(void *)(v0 + 320);
      v224(v130, v127, *(void *)(v0 + 304));
      closure #1 in DefaultModelSession.getModelResponse(from:keepAliveCallback:)(v130, &v228);
      (*v222)(*(void *)(v0 + 320), *(void *)(v0 + 304));
      uint64_t v131 = v229;
      if (v229)
      {
        uint64_t v132 = v228;
        uint64_t v133 = v230;
        uint64_t v134 = v231;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v128[2] + 1, 1, v128);
        }
        unint64_t v136 = v128[2];
        unint64_t v135 = v128[3];
        if (v136 >= v135 >> 1) {
          uint64_t v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v135 > 1), v136 + 1, 1, v128);
        }
        v128[2] = v136 + 1;
        uint64_t v129 = &v128[4 * v136];
        v129[4] = v132;
        v129[5] = v131;
        v129[6] = v133;
        v129[7] = v134;
        uint64_t v5 = v0 + 120;
      }
      v127 += v221;
      --v124;
    }
    while (v124);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v128 = (void *)MEMORY[0x263F8EE78];
  }
  *(void *)(v0 + 616) = v128;
  uint64_t v137 = PromptCompletion.metadata.getter();
  if (*(void *)(v137 + 16)
    && (unint64_t v138 = specialized __RawDictionaryStorage.find<A>(_:)(0x73656369746F4ELL, 0xE700000000000000), (v139 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v137 + 56) + 32 * v138, v5 - 32);
  }
  else
  {
    *(_OWORD *)(v5 - 32) = 0u;
    *(_OWORD *)(v5 - 16) = 0u;
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 112))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
    if (swift_dynamicCast())
    {
      uint64_t v140 = *(void *)(v5 + 32);
      goto LABEL_77;
    }
  }
  else
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v5 - 32, &demangling cache variable for type metadata for Any?);
  }
  uint64_t v140 = MEMORY[0x263F8EE78];
LABEL_77:
  uint64_t v141 = *(void *)(v140 + 16);
  uint64_t v142 = (void *)MEMORY[0x263F8EE78];
  if (v141)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v141; ++i)
    {
      uint64_t v144 = *(void *)(v140 + 8 * i + 32);
      if (*(void *)(v144 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v145 = specialized __RawDictionaryStorage.find<A>(_:)(0x6567617373656DLL, 0xE700000000000000);
        if (v146)
        {
          uint64_t v147 = (uint64_t *)(*(void *)(v144 + 56) + 16 * v145);
          uint64_t v149 = *v147;
          uint64_t v148 = v147[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v142 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v142[2] + 1, 1, v142);
          }
          unint64_t v151 = v142[2];
          unint64_t v150 = v142[3];
          if (v151 >= v150 >> 1) {
            uint64_t v142 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v150 > 1), v151 + 1, 1, v142);
          }
          v142[2] = v151 + 1;
          uint64_t v152 = &v142[2 * v151];
          v152[4] = v149;
          v152[5] = v148;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 624) = v142;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for modelInteraction != -1) {
LABEL_104:
  }
    swift_once();
  uint64_t v153 = type metadata accessor for Logger();
  __swift_project_value_buffer(v153, (uint64_t)static Logger.modelInteraction);
  swift_bridgeObjectRetain_n();
  os_log_type_t v154 = Logger.logObject.getter();
  os_log_type_t v155 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v154, v155))
  {
    uint64_t v156 = (uint8_t *)swift_slowAlloc();
    uint64_t v157 = swift_slowAlloc();
    uint64_t v228 = v157;
    *(_DWORD *)uint64_t v156 = 136315138;
    uint64_t v158 = swift_bridgeObjectRetain();
    uint64_t v159 = MEMORY[0x253369370](v158, MEMORY[0x263F8D310]);
    unint64_t v161 = v160;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v161, &v228);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v154, v155, "Received notice(s) %s", v156, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v157, -1, -1);
    MEMORY[0x25336A180](v156, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  type metadata accessor for GenerativeAssistantSettingsUserDefaults();
  char v162 = MEMORY[0x253368B60]();
  if (v162 == 2)
  {
    uint64_t v164 = *(void *)(v0 + 288);
    uint64_t v163 = *(void *)(v0 + 296);
    uint64_t v165 = *(void *)(v0 + 280);
    static GenerativeAssistantFeatureFlagManager.instance.getter();
    char v166 = GenerativeAssistantFeatureFlagManager.isManageSubscriptionEnabled.getter();
    (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v163, v165);
    if (v166)
    {
      static OpenAIAuthenticator.shared.getter();
      uint64_t v167 = (void *)swift_task_alloc();
      *(void *)(v0 + 632) = v167;
      *uint64_t v167 = v0;
      v167[1] = DefaultModelSession.getModelResponse(from:keepAliveCallback:);
      uint64_t v168 = *(void *)(v0 + 248);
      return MEMORY[0x270F0C1E0](v168);
    }
    swift_release();
    char v205 = 0;
  }
  else
  {
    char v169 = v162;
    swift_release();
    char v205 = v169 & 1;
  }
  uint64_t v202 = *(void *)(v0 + 616);
  uint64_t v203 = *(void *)(v0 + 624);
  uint64_t v200 = *(void *)(v0 + 600);
  uint64_t v196 = *(void *)(v0 + 592);
  uint64_t v197 = *(void *)(v0 + 584);
  uint64_t v198 = *(void *)(v0 + 608);
  uint64_t v170 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 568);
  uint64_t v171 = *(void *)(v0 + 560);
  uint64_t v172 = *(void *)(v0 + 528);
  uint64_t v173 = *(void *)(v0 + 520);
  uint64_t v175 = *(int **)(v0 + 208);
  uint64_t v174 = *(void **)(v0 + 216);
  uint64_t v194 = *(void *)(v0 + 184);
  uint64_t v176 = *(void *)(v0 + 120);
  uint64_t v177 = *(void *)(v0 + 128);
  outlined init with copy of OnScreenContent.UIMetadata?(v172, v173, &demangling cache variable for type metadata for URL?);
  uint64_t v178 = (uint64_t)v174 + v175[8];
  v170(v178, 1, 1, v171);
  uint64_t v179 = v175[9];
  *(void *)((char *)v174 + v179) = MEMORY[0x263F8EE78];
  *uint64_t v174 = v198;
  v174[1] = v196;
  v174[2] = v200;
  v174[3] = v197;
  outlined assign with take of URL?(v173, v178);
  swift_bridgeObjectRelease();
  *(void *)((char *)v174 + v179) = v203;
  v174[4] = v202;
  uint64_t v180 = (void *)((char *)v174 + v175[11]);
  *uint64_t v180 = v176;
  v180[1] = v177;
  *((unsigned char *)v174 + v175[10]) = v205;
  outlined init with take of ModelResponse((uint64_t)v174, v194);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v172, &demangling cache variable for type metadata for URL?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v181 = *(uint64_t (**)(void))(v0 + 8);
  return v181();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v3 = (void *)*v1;
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v4 = v2[30];
  uint64_t v5 = v2[29];
  uint64_t v6 = v2[28];
  if (v0)
  {

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v3[69];
    unint64_t v8 = v3[68];
    uint64_t v9 = DefaultModelSession.getModelResponse(from:keepAliveCallback:);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v3[69];
    unint64_t v8 = v3[68];
    uint64_t v9 = DefaultModelSession.getModelResponse(from:keepAliveCallback:);
  }
  return MEMORY[0x270FA2498](v9, v8, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[32];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v3, 0, 1, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v3, v4);
  uint64_t v25 = OpenAIAuthenticator.RateLimitBudgets.isRateLimited.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  uint64_t v23 = v0[77];
  uint64_t v24 = v0[78];
  uint64_t v21 = v0[76];
  uint64_t v22 = v0[75];
  uint64_t v19 = v0[74];
  uint64_t v20 = v0[73];
  uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[71];
  uint64_t v6 = v0[70];
  uint64_t v7 = v0[66];
  unint64_t v8 = v0[65];
  uint64_t v10 = (int *)v0[26];
  uint64_t v9 = (void *)v0[27];
  uint64_t v18 = v0[23];
  uint64_t v12 = v0[15];
  uint64_t v11 = v0[16];
  outlined init with copy of OnScreenContent.UIMetadata?(v7, v8, &demangling cache variable for type metadata for URL?);
  uint64_t v13 = (uint64_t)v9 + v10[8];
  v5(v13, 1, 1, v6);
  unint64_t v14 = v10[9];
  *(void *)((char *)v9 + v14) = MEMORY[0x263F8EE78];
  *uint64_t v9 = v21;
  v9[1] = v19;
  id v9[2] = v22;
  v9[3] = v20;
  outlined assign with take of URL?(v8, v13);
  swift_bridgeObjectRelease();
  *(void *)((char *)v9 + v14) = v24;
  v9[4] = v23;
  uint64_t v15 = (void *)((char *)v9 + v10[11]);
  *uint64_t v15 = v12;
  v15[1] = v11;
  *((unsigned char *)v9 + v10[10]) = v25 & 1;
  outlined init with take of ModelResponse((uint64_t)v9, v18);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v7, &demangling cache variable for type metadata for URL?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v1 = v0[32];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[31];
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v3, &demangling cache variable for type metadata for OpenAIAuthenticator.RateLimitBudgets?);
  uint64_t v22 = v0[77];
  uint64_t v23 = v0[78];
  uint64_t v20 = v0[76];
  uint64_t v21 = v0[75];
  uint64_t v18 = v0[74];
  uint64_t v19 = v0[73];
  uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[71];
  uint64_t v5 = v0[70];
  uint64_t v6 = v0[66];
  uint64_t v7 = v0[65];
  uint64_t v9 = (int *)v0[26];
  unint64_t v8 = (void *)v0[27];
  int v17 = v0[23];
  uint64_t v10 = v0[15];
  uint64_t v11 = v0[16];
  outlined init with copy of OnScreenContent.UIMetadata?(v6, v7, &demangling cache variable for type metadata for URL?);
  uint64_t v12 = (uint64_t)v8 + v9[8];
  v4(v12, 1, 1, v5);
  uint64_t v13 = v9[9];
  *(void *)((char *)v8 + v13) = MEMORY[0x263F8EE78];
  char *v8 = v20;
  v8[1] = v18;
  long long v8[2] = v21;
  v8[3] = v19;
  outlined assign with take of URL?(v7, v12);
  swift_bridgeObjectRelease();
  *(void *)((char *)v8 + v13) = v23;
  v8[4] = v22;
  unint64_t v14 = (void *)((char *)v8 + v9[11]);
  *unint64_t v14 = v10;
  v14[1] = v11;
  *((unsigned char *)v8 + v9[10]) = 0;
  outlined init with take of ModelResponse((uint64_t)v8, v17);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v6, &demangling cache variable for type metadata for URL?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 80) = v17;
  *(void *)(v9 + 88) = v8;
  *(void *)(v9 + 64) = a8;
  *(void *)(v9 + 72) = v16;
  *(void *)(v9 + 48) = a6;
  *(void *)(v9 + 56) = a7;
  *(void *)(v9 + 32) = a4;
  *(void *)(v9 + 40) = a5;
  *(unsigned char *)(v9 + 256) = a3;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 96) = *v8;
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v9 + 104) = v10;
  *(void *)(v9 + 112) = *(void *)(v10 - 8);
  *(void *)(v9 + 120) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v9 + 128) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URL();
  *(void *)(v9 + 136) = v11;
  *(void *)(v9 + 144) = *(void *)(v11 - 8);
  *(void *)(v9 + 152) = swift_task_alloc();
  *(void *)(v9 + 160) = swift_task_alloc();
  *(void *)(v9 + 168) = swift_task_alloc();
  *(void *)(v9 + 176) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v9 + 184) = static MainActor.shared.getter();
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 192) = v13;
  *(void *)(v9 + 200) = v12;
  return MEMORY[0x270FA2498](DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:), v13, v12);
}

uint64_t DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  outlined init with copy of OnScreenContent.UIMetadata?(*(void *)(v0 + 24), v3, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 144) + 32))(*(void *)(v0 + 176), *(void *)(v0 + 128), *(void *)(v0 + 136));
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v13;
    *uint64_t v13 = v0;
    v13[1] = DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:);
    uint64_t v18 = *(void *)(v0 + 176);
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(v0 + 16);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 128), &demangling cache variable for type metadata for URL?);
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v8 = *(void *)(v0 + 16);
    swift_retain();
    uint64_t v9 = NSTemporaryDirectory();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(fileURLWithPath:isDirectory:)();
    swift_bridgeObjectRelease();
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 1735290926;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v8 + 24);
    unint64_t v11 = *(void *)(v8 + 32);
    outlined copy of Data._Representation(v12, v11);
    Data.write(to:options:)();
    uint64_t v16 = *(void *)(v0 + 152);
    outlined consume of Data._Representation(v12, v11);
    URL.genericProcessExtendedSandbox()(v16);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v17;
    *uint64_t v17 = v0;
    v17[1] = DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:);
    uint64_t v18 = *(void *)(v0 + 152);
LABEL_8:
    uint64_t v19 = *(void *)(v0 + 64);
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v21 = *(void *)(v0 + 48);
    uint64_t v22 = *(void *)(v0 + 56);
    uint64_t v23 = *(void *)(v0 + 32);
    uint64_t v24 = *(void *)(v0 + 40);
    char v25 = *(unsigned char *)(v0 + 256);
    return DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)(v18, v25, v23, v24, v21, v22, v19, v20);
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 200);
  uint64_t v4 = *(void *)(v2 + 192);
  if (v0) {
    uint64_t v5 = DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:);
  }
  else {
    uint64_t v5 = DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[22];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  uint64_t v4 = *(void *)(*(void *)v1 + 144);
  uint64_t v5 = *(void *)(*(void *)v1 + 136);
  v2[29] = v0;
  swift_task_dealloc();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v2[30] = v6;
  v2[31] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v3, v5);
  uint64_t v7 = v2[25];
  uint64_t v8 = v2[24];
  if (v0) {
    uint64_t v9 = DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:);
  }
  else {
    uint64_t v9 = DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:);
  }
  return MEMORY[0x270FA2498](v9, v8, v7);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[30];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[17];
  swift_release();
  $defer #1 () in DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:)();
  swift_release();
  v1(v2, v4);
  v1(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[18];
  swift_release();
  (*(void (**)(void, void))(v1 + 8))(v0[22], v0[17]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[30];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  swift_release();
  $defer #1 () in DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:)();
  swift_release();
  v1(v2, v3);
  ((void (*)(void, void))v0[30])(v0[21], v0[17]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 192) = v21;
  *(void *)(v9 + 200) = v8;
  *(void *)(v9 + 176) = a7;
  *(void *)(v9 + 184) = a8;
  *(void *)(v9 + 160) = a5;
  *(void *)(v9 + 168) = a6;
  *(void *)(v9 + 144) = a3;
  *(void *)(v9 + 152) = a4;
  *(unsigned char *)(v9 + 480) = a2;
  *(void *)(v9 + 136) = a1;
  *(void *)(v9 + 208) = *v8;
  uint64_t v10 = type metadata accessor for DocumentRegistration.Progress();
  *(void *)(v9 + 216) = v10;
  *(void *)(v9 + 224) = *(void *)(v10 - 8);
  *(void *)(v9 + 232) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DocumentRegistration.Status();
  *(void *)(v9 + 240) = v11;
  *(void *)(v9 + 248) = *(void *)(v11 - 8);
  *(void *)(v9 + 256) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for DocumentRegistration();
  *(void *)(v9 + 264) = v12;
  *(void *)(v9 + 272) = *(void *)(v12 - 8);
  *(void *)(v9 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentRegistration?);
  *(void *)(v9 + 288) = swift_task_alloc();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of GenerativeExperiencesSession.register(documents:)>>.0.AsyncSequence.AsyncIterator);
  *(void *)(v9 + 296) = v13;
  *(void *)(v9 + 304) = *(void *)(v13 - 8);
  *(void *)(v9 + 312) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of GenerativeExperiencesSession.register(documents:)>>.0)?);
  *(void *)(v9 + 320) = swift_task_alloc();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of GenerativeExperiencesSession.register(documents:)>>.0);
  *(void *)(v9 + 328) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v9 + 336) = v15;
  *(void *)(v9 + 344) = *(void *)(v15 + 64);
  *(void *)(v9 + 352) = swift_task_alloc();
  *(void *)(v9 + 360) = swift_task_alloc();
  *(void *)(v9 + 368) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for URL();
  *(void *)(v9 + 376) = v16;
  *(void *)(v9 + 384) = *(void *)(v16 - 8);
  *(void *)(v9 + 392) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v9 + 400) = swift_task_alloc();
  *(void *)(v9 + 408) = type metadata accessor for MainActor();
  *(void *)(v9 + 416) = static MainActor.shared.getter();
  uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 424) = v18;
  *(void *)(v9 + 432) = v17;
  return MEMORY[0x270FA2498](DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:), v18, v17);
}

uint64_t DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)()
{
  uint64_t v75 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 480);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ExtendedAttributeUtils, String?)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24FA3E1D0;
  *(unsigned char *)(inited + 32) = 0;
  if (v1 == 2)
  {
    *(void *)(inited + 40) = 0;
    *(void *)(inited + 48) = 0;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    goto LABEL_13;
  }
  if (*(unsigned char *)(v0 + 480))
  {
    uint64_t v14 = *(void *)(v0 + 160);
    uint64_t v13 = *(void *)(v0 + 168);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v15 = *(void *)(v0 + 152);
    *(_OWORD *)(inited + 40) = xmmword_24FA3EDD0;
    unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v15, 1, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    v74[0] = v17;
    uint64_t v20 = v14;
    uint64_t v21 = v13;
    char v22 = 2;
LABEL_11:
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, v21, v22, v19);
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 176);
  *(_OWORD *)(inited + 40) = xmmword_24FA3EDE0;
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  outlined init with copy of OnScreenContent.UIMetadata?(v6, v3, &demangling cache variable for type metadata for URL?);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5);
  uint64_t v9 = *(void *)(v0 + 400);
  if (v8 != 1)
  {
    uint64_t v24 = *(void *)(v0 + 376);
    uint64_t v23 = *(void *)(v0 + 384);
    uint64_t v25 = URL.absoluteString.getter();
    uint64_t v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v9, v24);
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    v74[0] = v7;
    uint64_t v20 = v25;
    uint64_t v21 = v27;
    char v22 = 3;
    goto LABEL_11;
  }
  outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 400), &demangling cache variable for type metadata for URL?);
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(3);
  char v12 = v11;
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0) {
    goto LABEL_13;
  }
  v74[0] = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    unint64_t v7 = v74[0];
  }
  specialized _NativeDictionary._delete(at:)(v10, v7);
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v28 = swift_bridgeObjectRetain();
  URL.setExtendedAttributes(_:)((Swift::OpaquePointer)v28);
  swift_bridgeObjectRelease();
  if (!URL.startAccessingSecurityScopedResource()())
  {
    swift_bridgeObjectRelease();
    swift_release();
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.modelInteraction);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      v74[0] = v40;
      *(_DWORD *)uint64_t v39 = 136315394;
      uint64_t v41 = _typeName(_:qualified:)();
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2080;
      *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000057, 0x800000024FA491F0, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v37, v38, "%s.%s failed to access security scoped resources for document", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v40, -1, -1);
      MEMORY[0x25336A180](v39, -1, -1);
    }

    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRegisterMediaFailed(code:domain:)();
    swift_release();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    lazy protocol witness table accessor for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError();
    swift_allocError();
    *uint64_t v43 = 1;
    swift_willThrow();
    goto LABEL_40;
  }
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  *(void *)(v0 + 440) = __swift_project_value_buffer(v29, (uint64_t)static Logger.modelInteraction);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    v74[0] = v33;
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v34 = _typeName(_:qualified:)();
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000057, 0x800000024FA491F0, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24F9A2000, v30, v31, "%s.%s started accessing security scoped resources for document", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v33, -1, -1);
    MEMORY[0x25336A180](v32, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v45 = *(void *)(v0 + 384);
  uint64_t v44 = *(void *)(v0 + 392);
  uint64_t v46 = *(void *)(v0 + 376);
  uint64_t v47 = *(void *)(v0 + 136);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DocumentResource>);
  type metadata accessor for DocumentResource();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_24FA3E1D0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v44, v47, v46);
  DocumentResource.init(url:)();
  unint64_t v48 = GenerativeExperiencesSession.register(documents:)();
  swift_bridgeObjectRelease();
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && v48 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v60) {
      goto LABEL_29;
    }
  }
  else
  {
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    uint64_t v50 = v48 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0) {
      uint64_t v50 = v48;
    }
    if (*(void *)(v50 + 16))
    {
LABEL_29:
      if (_swift_isClassOrObjCExistentialType())
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v48 & 0xC000000000000001) == 0, v48);
        if ((v48 & 0xC000000000000001) != 0)
        {
          uint64_t v51 = *(void *)(v0 + 344);
          uint64_t v52 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v48);
          if (v51 != 8)
          {
            __break(1u);
            return MEMORY[0x270FA1E88](v52, v53, v54);
          }
          uint64_t v55 = v52;
          uint64_t v56 = *(void *)(v0 + 360);
          uint64_t v57 = *(void *)(v0 + 328);
          uint64_t v58 = *(void *)(v0 + 336);
          *(void *)(v0 + 88) = v55;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v56, v0 + 88, v57);
          swift_unknownObjectRelease();
          goto LABEL_35;
        }
      }
      else
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v48);
      }
      (*(void (**)(void, unint64_t, void))(*(void *)(v0 + 336) + 16))(*(void *)(v0 + 360), v48+ ((*(unsigned __int8 *)(*(void *)(v0 + 336) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 336) + 80)), *(void *)(v0 + 328));
LABEL_35:
      (*(void (**)(void, void, void))(*(void *)(v0 + 336) + 32))(*(void *)(v0 + 320), *(void *)(v0 + 360), *(void *)(v0 + 328));
      uint64_t v59 = 0;
      goto LABEL_38;
    }
  }
  uint64_t v59 = 1;
LABEL_38:
  uint64_t v61 = *(void *)(v0 + 328);
  uint64_t v62 = *(void *)(v0 + 336);
  uint64_t v63 = *(void *)(v0 + 320);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, v59, 1, v61);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1, v61) != 1)
  {
    uint64_t v68 = *(void *)(v0 + 368);
    uint64_t v69 = *(void *)(v0 + 352);
    uint64_t v70 = *(void *)(v0 + 328);
    uint64_t v71 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, void, uint64_t))(v71 + 32))(v68, *(void *)(v0 + 320), v70);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v69, v68, v70);
    *(void *)(v0 + 448) = swift_getOpaqueTypeConformance2();
    dispatch thunk of AsyncSequence.makeAsyncIterator()();
    *(_DWORD *)(v0 + 472) = *MEMORY[0x263F41580];
    *(_DWORD *)(v0 + 476) = *MEMORY[0x263F41588];
    uint64_t v72 = static MainActor.shared.getter();
    *(void *)(v0 + 456) = v72;
    swift_getAssociatedConformanceWitness();
    uint64_t v73 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v73;
    *uint64_t v73 = v0;
    v73[1] = DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
    uint64_t v52 = *(void *)(v0 + 288);
    uint64_t v54 = MEMORY[0x263F8F500];
    uint64_t v53 = v72;
    return MEMORY[0x270FA1E88](v52, v53, v54);
  }
  uint64_t v64 = *(void *)(v0 + 320);
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v64, &demangling cache variable for type metadata for (<<opaque return type of GenerativeExperiencesSession.register(documents:)>>.0)?);
  type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.registerDocumentError.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRegisterMediaFailed(code:domain:)();
  swift_release();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
  swift_release();
  lazy protocol witness table accessor for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError();
  swift_allocError();
  *uint64_t v65 = 1;
  swift_willThrow();
  $defer #1 () in DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)();
LABEL_40:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v66 = *(uint64_t (**)(void))(v0 + 8);
  return v66();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 424);
  uint64_t v4 = *(void *)(v2 + 432);
  if (v0) {
    uint64_t v5 = DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  }
  else {
    uint64_t v5 = DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  uint64_t (*v8)(void);
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t type;
  uint64_t v53;
  uint64_t v54[2];
  uint64_t v55;
  uint64_t v56;

  uint64_t v55 = v0;
  int v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 368);
    uint64_t v5 = *(void *)(v0 + 328);
    uint64_t v6 = *(void *)(v0 + 336);
    (*(void (**)(void, void))(*(void *)(v0 + 304) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 296));
    swift_release();
    type metadata accessor for MetricsUtils();
    static MetricsUtils.shared.getter();
    static Signpost.registerDocumentNeverFinishError.getter();
    dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
    swift_release();
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRegisterMediaFailed(code:domain:)();
    swift_release();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    lazy protocol witness table accessor for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError();
    swift_allocError();
    *unint64_t v7 = 2;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    $defer #1 () in DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_3:
    return v8();
  }
  unint64_t v10 = *(_DWORD *)(v0 + 472);
  char v12 = *(void *)(v0 + 248);
  char v11 = *(void *)(v0 + 256);
  uint64_t v13 = *(void *)(v0 + 240);
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 280), v1, v2);
  DocumentRegistration.status.getter();
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 88))(v11, v13);
  if (v14 == v10)
  {
    uint64_t v15 = *(void *)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 232);
    unint64_t v17 = *(void *)(v0 + 216);
    uint64_t v18 = *(void *)(v0 + 224);
    char v19 = *(void *)(v0 + 184);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 248) + 96))(v15, *(void *)(v0 + 240));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v16, v15, v17);
    if (v19)
    {
      uint64_t v20 = *(void (**)(uint64_t))(v0 + 184);
      uint64_t v21 = DocumentRegistration.Progress.progress.getter();
      v20(v21);
    }
    uint64_t v23 = *(void *)(v0 + 272);
    char v22 = *(void *)(v0 + 280);
    uint64_t v24 = *(void *)(v0 + 264);
    uint64_t v26 = *(void *)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v27 = *(void *)(v0 + 216);
  }
  else
  {
    if (v14 == *(_DWORD *)(v0 + 476))
    {
      uint64_t v29 = *(void *)(v0 + 248);
      uint64_t v28 = *(void *)(v0 + 256);
      uint64_t v30 = *(void *)(v0 + 240);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v29 + 96))(v28, v30);
      os_log_type_t v31 = Logger.logObject.getter();
      type = static os_log_type_t.debug.getter();
      uint64_t v32 = os_log_type_enabled(v31, type);
      uint64_t v33 = *(void *)(v0 + 368);
      uint64_t v34 = *(void *)(v0 + 328);
      unint64_t v35 = *(void *)(v0 + 336);
      uint64_t v36 = *(void *)(v0 + 304);
      uint64_t v37 = *(void *)(v0 + 312);
      os_log_type_t v38 = *(void *)(v0 + 296);
      uint64_t v39 = *(void *)(v0 + 272);
      uint64_t v40 = *(void *)(v0 + 280);
      uint64_t v53 = *(void *)(v0 + 264);
      if (v32)
      {
        uint64_t v51 = *(void *)(v0 + 280);
        uint64_t v41 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        v54[0] = v50;
        *(_DWORD *)uint64_t v41 = 136315394;
        unint64_t v42 = _typeName(_:qualified:)();
        *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v41 + 12) = 2080;
        *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000057, 0x800000024FA491F0, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v31, type, "%s.%s finished registering document", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v50, -1, -1);
        MEMORY[0x25336A180](v41, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v51, v53);
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v53);
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
      }
      unint64_t v48 = *(void *)(v0 + 256);
      uint64_t v49 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v48, v49);
      $defer #1 () in DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int v8 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_3;
    }
    uint64_t v26 = *(void *)(v0 + 272);
    uint64_t v25 = *(void *)(v0 + 280);
    char v22 = *(void *)(v0 + 256);
    uint64_t v27 = *(void *)(v0 + 264);
    uint64_t v24 = *(void *)(v0 + 240);
    uint64_t v23 = *(void *)(v0 + 248);
  }
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  uint64_t v44 = static MainActor.shared.getter();
  *(void *)(v0 + 456) = v44;
  swift_getAssociatedConformanceWitness();
  uint64_t v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v45;
  *uint64_t v45 = v0;
  v45[1] = DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  uint64_t v46 = *(void *)(v0 + 288);
  uint64_t v47 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA1E88](v46, v44, v47);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  int v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  uint64_t v5 = v0[38];
  uint64_t v4 = v0[39];
  uint64_t v6 = v0[37];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  $defer #1 () in DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void $defer #1 () in DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:)()
{
  v21[1] = *(id *)MEMORY[0x263EF8340];
  id v0 = objc_msgSend(self, sel_defaultManager);
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  v21[0] = 0;
  unsigned int v4 = objc_msgSend(v0, sel_removeItemAtURL_error_, v2, v21);

  id v5 = v21[0];
  if (v4)
  {
    id v6 = v5;
  }
  else
  {
    id v7 = v21[0];
    int v8 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.modelInteraction);
    id v10 = v8;
    id v11 = v8;
    char v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      v21[0] = v16;
      *(_DWORD *)uint64_t v14 = 136315650;
      uint64_t v17 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000064, 0x800000024FA49180, (uint64_t *)v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2112;
      id v19 = v8;
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v20;

      _os_log_impl(&dword_24F9A2000, v12, v13, "%s.%s Failed to delete temp file: %@", (uint8_t *)v14, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v15, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v16, -1, -1);
      MEMORY[0x25336A180](v14, -1, -1);
    }
    else
    {
    }
  }
}

void URL.genericProcessExtendedSandbox()(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Data.Deallocator();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.path.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v7 = (const char *)sandbox_extension_issue_file();
  swift_release();
  if (!v7) {
    goto LABEL_8;
  }
  size_t v8 = strlen(v7);
  uint64_t v9 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F06EF0], v3);
  Data.Deallocator._deallocator.getter();
  if (v9)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v10 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v11 = specialized Data._Representation.init(_:count:)(v10, v9);
    unint64_t v13 = v12;
    swift_release();
  }
  else
  {
    uint64_t v14 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
    v14(v7, 0);
    swift_release();
    swift_release();
    uint64_t v11 = 0;
    unint64_t v13 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, v1, v15);
  URL._bridgeToObjectiveC()(v16);
  unint64_t v18 = v17;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  MEMORY[0x253369B20](v18, isa);
  outlined consume of Data._Representation(v11, v13);
}

uint64_t ExtendedAttributeUtils.SourceType.rawValue.getter(char a1)
{
  if (a1) {
    return 1701603686;
  }
  else {
    return 0x65746973626577;
  }
}

Swift::Void __swiftcall URL.setExtendedAttributes(_:)(Swift::OpaquePointer a1)
{
  uint64_t v29 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v29);
  uint64_t v28 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *((void *)a1._rawValue + 8);
  uint64_t v30 = (char *)a1._rawValue + 64;
  uint64_t v5 = 1 << *((unsigned char *)a1._rawValue + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v27 = (void (**)(char *, uint64_t))(v2 + 8);
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = MEMORY[0x263F8EE60] + 8;
  uint64_t rawValue = a1._rawValue;
  while (v7)
  {
    unint64_t v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_19:
    if (*(void *)(*((void *)a1._rawValue + 7) + 16 * v10 + 8))
    {
      uint64_t v14 = 8 * *(char *)(*((void *)a1._rawValue + 6) + v10);
      uint64_t v15 = *(void *)&aSourceTfileNam[v14];
      uint64_t v16 = *(void *)&aSourceTfileNam[v14 + 32];
      swift_bridgeObjectRetain();
      uint64_t v17 = v28;
      static String.Encoding.utf8.getter();
      uint64_t v18 = String.data(using:allowLossyConversion:)();
      unint64_t v20 = v19;
      (*v27)(v17, v29);
      if (v20 >> 60 != 15)
      {
        BOOL v21 = URL.startAccessingSecurityScopedResource()();
        BOOL v25 = v21;
        MEMORY[0x270FA5388](v21);
        *(&v23 - 4) = v18;
        *(&v23 - 3) = v20;
        *(&v23 - 2) = v15;
        *(&v23 - 1) = v16;
        uint64_t v22 = v26;
        URL.withUnsafeFileSystemRepresentation<A>(_:)();
        uint64_t v26 = v22;
        if (v25) {
          URL.stopAccessingSecurityScopedResource()();
        }
        outlined consume of Data?(v18, v20);
        a1._uint64_t rawValue = rawValue;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (__OFADD__(v8++, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v8 >= v31) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)&v30[8 * v8];
  if (v12)
  {
LABEL_18:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_19;
  }
  int64_t v13 = v8 + 1;
  if (v8 + 1 >= v31) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)&v30[8 * v13];
  if (v12) {
    goto LABEL_17;
  }
  int64_t v13 = v8 + 2;
  if (v8 + 2 >= v31) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)&v30[8 * v13];
  if (v12) {
    goto LABEL_17;
  }
  int64_t v13 = v8 + 3;
  if (v8 + 3 >= v31)
  {
LABEL_27:
    swift_release();
    return;
  }
  unint64_t v12 = *(void *)&v30[8 * v13];
  if (v12)
  {
LABEL_17:
    int64_t v8 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v31) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)&v30[8 * v8];
    ++v13;
    if (v12) {
      goto LABEL_18;
    }
  }
LABEL_29:
  __break(1u);
}

void $defer #1 () in DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)()
{
  URL.stopAccessingSecurityScopedResource()();
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.modelInteraction);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v3 = swift_slowAlloc();
    uint64_t v7 = v3;
    *(_DWORD *)uint64_t v2 = 136315394;
    uint64_t v4 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000057, 0x800000024FA491F0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, oslog, v1, "%s.%s stopped accessing security scoped resources for document", (uint8_t *)v2, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v3, -1, -1);
    MEMORY[0x25336A180](v2, -1, -1);
  }
  else
  {
  }
}

uint64_t DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  v7[9] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PromptCompletionStream();
  v7[10] = v8;
  v7[11] = *(void *)(v8 - 8);
  v7[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for PromptCompletion();
  v7[13] = v9;
  v7[14] = *(void *)(v9 - 8);
  v7[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v7[16] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v7[17] = v10;
  v7[18] = *(void *)(v10 - 8);
  v7[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v7[20] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for StringResponseSanitizer.DefaultableGuardrails();
  v7[21] = v11;
  v7[22] = *(void *)(v11 - 8);
  v7[23] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for StringResponseSanitizer.DefaultableOverrides();
  v7[24] = v12;
  v7[25] = *(void *)(v12 - 8);
  v7[26] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for StringResponseSanitizer();
  v7[27] = v13;
  v7[28] = *(void *)(v13 - 8);
  v7[29] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for StringRenderedPromptSanitizer.DefaultableGuardrails();
  v7[30] = v14;
  v7[31] = *(void *)(v14 - 8);
  v7[32] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for StringRenderedPromptSanitizer.DefaultableOverrides();
  v7[33] = v15;
  v7[34] = *(void *)(v15 - 8);
  v7[35] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for StringRenderedPromptSanitizer();
  v7[36] = v16;
  v7[37] = *(void *)(v16 - 8);
  v7[38] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for SamplingParameters();
  v7[39] = v17;
  v7[40] = *(void *)(v17 - 8);
  v7[41] = swift_task_alloc();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenStream<ModelResponse>);
  v7[42] = v18;
  v7[43] = *(void *)(v18 - 8);
  v7[44] = swift_task_alloc();
  v7[45] = type metadata accessor for MainActor();
  v7[46] = static MainActor.shared.getter();
  uint64_t v20 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[47] = v20;
  v7[48] = v19;
  return MEMORY[0x270FA2498](DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:), v20, v19);
}

uint64_t DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)()
{
  uint64_t v1 = v0[40];
  uint64_t v30 = v0[39];
  uint64_t v31 = v0[41];
  uint64_t v3 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v4 = v0[32];
  uint64_t v5 = v0[31];
  uint64_t v33 = v0[33];
  uint64_t v35 = v0[30];
  uint64_t v6 = v0[25];
  uint64_t v37 = v0[26];
  uint64_t v38 = v0[24];
  uint64_t v40 = v0[23];
  uint64_t v42 = v0[22];
  uint64_t v44 = v0[21];
  uint64_t v46 = v0[20];
  uint64_t v47 = v0[18];
  uint64_t v48 = v0[17];
  uint64_t v7 = v0[8];
  v0[49] = type metadata accessor for MetricsUtils();
  static MetricsUtils.shared.getter();
  static Signpost.responseGenerationDuration.getter();
  dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
  swift_release();
  v0[50] = type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordGenerativeRequestStarted(usecase:mediaQAUseCase:llmAgentName:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v31, v7 + OBJC_IVAR____TtC26GenerativeAssistantActions19DefaultModelSession_samplingParameters, v30);
  GenerativeAssistantUseCase.inputOverrides()(v2);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, *MEMORY[0x263F41440], v33);
  uint64_t v8 = type metadata accessor for StringRenderedPromptSanitizer.Guardrails();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, *MEMORY[0x263F41448], v35);
  StringRenderedPromptSanitizer.init(overrides:guardrails:)();
  GenerativeAssistantUseCase.outputOverrides()(v37);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v37, *MEMORY[0x263F413F8], v38);
  uint64_t v9 = type metadata accessor for StringResponseSanitizer.Guardrails();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v40, 1, 1, v9);
  (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))(v40, *MEMORY[0x263F41400], v44);
  StringResponseSanitizer.init(overrides:guardrails:)();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.gatID.getter();
  swift_release();
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v46, 1, v48);
  uint64_t v11 = v0[20];
  if (v10)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v0[20], &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    uint64_t v13 = v0[18];
    uint64_t v12 = v0[19];
    uint64_t v14 = v0[17];
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 16))(v12, v0[20], v14);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v11, &demangling cache variable for type metadata for UUID?);
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  uint64_t v15 = v0[40];
  uint64_t v16 = v0[38];
  uint64_t v17 = v0[37];
  uint64_t v36 = v0[36];
  uint64_t v19 = v0[28];
  uint64_t v18 = v0[29];
  uint64_t v32 = v0[41];
  uint64_t v34 = v0[27];
  uint64_t v39 = v0[39];
  uint64_t v41 = v0[16];
  uint64_t v43 = v0[7];
  uint64_t v45 = v0[6];
  uint64_t v21 = v0[3];
  uint64_t v20 = v0[4];
  type metadata accessor for ModelResponse();
  uint64_t v22 = swift_task_alloc();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = v20;
  lazy protocol witness table accessor for type ModelResponse and conformance ModelResponse(&lazy protocol witness table cache variable for type ModelResponse and conformance ModelResponse, (void (*)(uint64_t))type metadata accessor for ModelResponse);
  GenerativeExperiencesSession.complete<A>(generating:parameters:promptSanitizer:responseSanitizer:clientRequestID:query:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v34);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v36);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v32, v39);
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v41, 1, 1, v23);
  swift_retain();
  uint64_t v24 = static MainActor.shared.getter();
  BOOL v25 = (void *)swift_allocObject();
  uint64_t v26 = MEMORY[0x263F8F500];
  void v25[2] = v24;
  v25[3] = v26;
  v25[4] = v45;
  v25[5] = v43;
  v0[51] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v41, (uint64_t)&closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:)partial apply, (uint64_t)v25);
  TokenStream.events.getter();
  uint64_t v27 = (void *)swift_task_alloc();
  v0[52] = v27;
  void *v27 = v0;
  v27[1] = DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:);
  uint64_t v28 = v0[15];
  return MEMORY[0x270F7F040](v28);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = (void *)*v1;
  v2[53] = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[11] + 8))(v2[12], v2[10]);
    uint64_t v3 = v2[47];
    uint64_t v4 = v2[48];
    return MEMORY[0x270FA2498](DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:), v3, v4);
  }
  else
  {
    (*(void (**)(void, void))(v2[11] + 8))(v2[12], v2[10]);
    uint64_t v5 = (void *)swift_task_alloc();
    v2[54] = v5;
    *uint64_t v5 = v2;
    v5[1] = DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:);
    uint64_t v6 = v2[15];
    uint64_t v7 = v2[2];
    return DefaultModelSession.getModelResponse(from:keepAliveCallback:)(v7, v6);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 384);
  uint64_t v3 = *(void *)(v1 + 376);
  return MEMORY[0x270FA2498](DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = v0[51];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[44];
  uint64_t v12 = v0[42];
  uint64_t v4 = v0[14];
  int v10 = v0[13];
  uint64_t v11 = v0[15];
  uint64_t v5 = v0[9];
  swift_release();
  static MetricsUtils.shared.getter();
  static Signpost.responseGenerationDuration.getter();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v5, &demangling cache variable for type metadata for OSSignpostID?);
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordGenerativeRequestEnded()();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v11, v10);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x253369450](v1, MEMORY[0x263F8EE60] + 8, v7, MEMORY[0x263F8E4E0]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;

  uint64_t v1 = v0[51];
  uint64_t v3 = v0[43];
  uint64_t v2 = v0[44];
  uint64_t v9 = v0[42];
  uint64_t v4 = v0[9];
  swift_release();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x253369450](v1, MEMORY[0x263F8EE60] + 8, v5, MEMORY[0x263F8E4E0]);
  swift_release();
  static MetricsUtils.shared.getter();
  static Signpost.responseGenerationDuration.getter();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for OSSignpostID?);
  static MetricsUtils.shared.getter();
  static Signpost.gmsResultError.getter();
  dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
  swift_release();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordGenerativeRequestFailed(code:domain:)();
  swift_release();
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t closure #1 in DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v15[0] = a2;
  v15[7] = a3;
  uint64_t v4 = type metadata accessor for User();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ChatMessagesPrompt();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[4] = a1;
  v15[5] = v15[0];
  User.init(_:)();
  static ChatMessagesPromptBuilder.buildExpression<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ChatMessagesPrompt>);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_24FA3E1D0;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 16))(v13 + v12, v11, v8);
  MEMORY[0x253369060](v13);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t implicit closure #2 in implicit closure #1 in DefaultModelSession.getModelResponse(from:keepAliveCallback:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = implicit closure #2 in implicit closure #1 in DefaultModelSession.getModelResponse(from:keepAliveCallback:);
  return MEMORY[0x270F7EDB8]();
}

uint64_t implicit closure #2 in implicit closure #1 in DefaultModelSession.getModelResponse(from:keepAliveCallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for ScreenContent(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v23 = v4 + v2;
  }
  else {
    uint64_t v23 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for PromptCompletion.Annotation() - 8);
  unint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  uint64_t v15 = a1 + v13;
  unint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  uint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  BOOL v20 = *(void *)(v3 + 16);
  uint64_t v21 = __OFADD__(v20, v8);
  int64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in DefaultModelSession.getModelResponse(from:keepAliveCallback:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v3 = type metadata accessor for PromptCompletion.Annotation();
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v47 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)v42 - v6;
  uint64_t v48 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PromptCompletion.URLCitation();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PromptCompletion.Annotation.Type();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  PromptCompletion.Annotation.type.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 88))(v17, v14) == *MEMORY[0x263F7F8D0])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))(v17, v14);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, v10);
    PromptCompletion.URLCitation.url.getter();
    uint64_t v18 = URL.absoluteString.getter();
    unint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v48);
    uint64_t v21 = String.asDisplayURL.getter(v18, v20);
    unint64_t v23 = v22;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (!v23)
    {
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v21 = v18;
      unint64_t v23 = v20;
    }
    BOOL v25 = v52;
    *uint64_t v52 = v21;
    v25[1] = v23;
    void v25[2] = v18;
    v25[3] = v20;
  }
  else
  {
    uint64_t v48 = v14;
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.modelInteraction);
    uint64_t v27 = v49;
    uint64_t v28 = v50;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
    uint64_t v30 = v51;
    v29(v49, a1, v51);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      int v45 = v33;
      uint64_t v34 = v30;
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v54 = v46;
      uint64_t v43 = v35;
      os_log_t v44 = v31;
      *(_DWORD *)uint64_t v35 = 136315138;
      v42[1] = v35 + 4;
      v29(v47, (uint64_t)v27, v34);
      uint64_t v36 = String.init<A>(describing:)();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v34);
      uint64_t v38 = v43;
      uint64_t v31 = v44;
      _os_log_impl(&dword_24F9A2000, v44, (os_log_type_t)v45, "Unexpected annotation type: %s", v43, 0xCu);
      uint64_t v39 = v46;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v39, -1, -1);
      MEMORY[0x25336A180](v38, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v30);
    }

    uint64_t v40 = v48;
    uint64_t v41 = v52;
    *(_OWORD *)uint64_t v52 = 0u;
    *((_OWORD *)v41 + 1) = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v40);
  }
  return result;
}

uint64_t closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[10] = a4;
  v5[11] = a5;
  uint64_t v6 = type metadata accessor for CancellationError();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ContinuousClock.Instant();
  v5[15] = v7;
  v5[16] = *(void *)(v7 - 8);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v5[19] = v8;
  v5[20] = *(void *)(v8 - 8);
  v5[21] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[22] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[23] = v10;
  v5[24] = v9;
  return MEMORY[0x270FA2498](closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:), v10, v9);
}

uint64_t closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:)()
{
  uint64_t v8 = v0;
  if (one-time initialization token for generativeResponse != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 200) = __swift_project_value_buffer(v1, (uint64_t)static Logger.generativeResponse);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v7 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA493B0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v2, v3, "[keep-alive]: %s starting task for keep-alive callbacks", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v5, -1, -1);
    MEMORY[0x25336A180](v4, -1, -1);
  }

  *(void *)(v0 + 208) = 1;
  ContinuousClock.init()();
  *(_OWORD *)(v0 + 40) = xmmword_24FA3EDF0;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  return MEMORY[0x270FA2498](closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  os_log_type_t v3 = v0[15];
  uint64_t v4 = lazy protocol witness table accessor for type ModelResponse and conformance ModelResponse(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x263F8F710]);
  dispatch thunk of Clock.now.getter();
  lazy protocol witness table accessor for type ModelResponse and conformance ModelResponse(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, MEMORY[0x263F8F6D8]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[27] = v5;
  v0[28] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[29] = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:);
  uint64_t v8 = v0[18];
  uint64_t v7 = v0[19];
  return MEMORY[0x270FA2380](v8, v0 + 2, v7, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 216))(*(void *)(v2 + 144), *(void *)(v2 + 120));
    os_log_type_t v3 = closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 160);
    uint64_t v6 = *(void *)(v2 + 168);
    uint64_t v8 = *(void *)(v2 + 152);
    (*(void (**)(void, void))(v2 + 216))(*(void *)(v2 + 144), *(void *)(v2 + 120));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v4 = *(void *)(v2 + 184);
    uint64_t v5 = *(void *)(v2 + 192);
    os_log_type_t v3 = closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:);
  }
  return MEMORY[0x270FA2498](v3, v4, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  id v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;

  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = static Task<>.checkCancellation()();
  if (v1)
  {
    swift_release();
    *(void *)(v0 + 56) = v1;
    os_log_type_t v3 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {

      uint64_t v4 = Logger.logObject.getter();
      uint64_t v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_24F9A2000, v4, v5, "[keep-alive]: task canceled", v6, 2u);
        MEMORY[0x25336A180](v6, -1, -1);
      }
      uint64_t v8 = *(void *)(v0 + 104);
      uint64_t v7 = *(void *)(v0 + 112);
      uint64_t v9 = *(void *)(v0 + 96);

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      goto LABEL_18;
    }

    unint64_t v17 = v1;
    uint64_t v18 = v1;
    uint64_t v14 = Logger.logObject.getter();
    unint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 138412290;
      unint64_t v22 = v1;
      unint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 64) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v23;

      _os_log_impl(&dword_24F9A2000, v14, v19, "[keep-alive]: task encountered error: %@", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v21, -1, -1);
      MEMORY[0x25336A180](v20, -1, -1);

LABEL_18:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
      return v24();
    }

LABEL_17:
    goto LABEL_18;
  }
  (*(void (**)(uint64_t))(v0 + 80))(v2);
  uint64_t v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_24F9A2000, v10, v11, "[keep-alive]: did invoke app intent keep-alive callback", v12, 2u);
    MEMORY[0x25336A180](v12, -1, -1);
  }
  unint64_t v13 = *(void *)(v0 + 208);

  if (v13 == 6)
  {
    swift_release();
    uint64_t v14 = Logger.logObject.getter();
    uint64_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_24F9A2000, v14, v15, "[keep-alive]: 30s passed, allow app intent to naturally time out", v16, 2u);
      MEMORY[0x25336A180](v16, -1, -1);
    }
    goto LABEL_17;
  }
  ++*(void *)(v0 + 208);
  ContinuousClock.init()();
  *(_OWORD *)(v0 + 40) = xmmword_24FA3EDF0;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  return MEMORY[0x270FA2498](closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  return MEMORY[0x270FA2498](closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:), v1, v2);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;

  swift_release();
  uint64_t v1 = *(void **)(v0 + 240);
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    os_log_type_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_24F9A2000, v3, v4, "[keep-alive]: task canceled", v5, 2u);
      MEMORY[0x25336A180](v5, -1, -1);
    }
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 96);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  else
  {

    uint64_t v9 = v1;
    uint64_t v10 = v1;
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 138412290;
      uint64_t v15 = v1;
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 64) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v16;

      _os_log_impl(&dword_24F9A2000, v11, v12, "[keep-alive]: task encountered error: %@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v14, -1, -1);
      MEMORY[0x25336A180](v13, -1, -1);
    }
    else
    {
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t DefaultModelSession.__deallocating_deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC26GenerativeAssistantActions19DefaultModelSession_samplingParameters;
  uint64_t v2 = type metadata accessor for SamplingParameters();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DefaultModelSession()
{
  return type metadata accessor for DefaultModelSession();
}

uint64_t type metadata accessor for DefaultModelSession()
{
  uint64_t result = type metadata singleton initialization cache for DefaultModelSession;
  if (!type metadata singleton initialization cache for DefaultModelSession) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for DefaultModelSession()
{
  uint64_t result = type metadata accessor for SamplingParameters();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultModelSessionFactory()
{
  return &type metadata for DefaultModelSessionFactory;
}

uint64_t protocol witness for ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:) in conformance DefaultModelSession(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  return DefaultModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for ModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:) in conformance DefaultModelSession(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v15;
  *uint64_t v15 = v8;
  v15[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return DefaultModelSession.registerImage(image:imageURL:imageSource:imageName:imageMimeType:websiteURL:uploadProgressCallback:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t getProcessIdenitifierForSiri()()
{
  v19[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v0 = (void *)MEMORY[0x2533691D0](0x6C7070612E6D6F63, 0xEE00697269732E65);
  id v1 = objc_msgSend(self, sel_predicateMatchingBundleIdentifier_, v0);

  uint64_t v2 = self;
  v19[0] = 0;
  id v3 = v1;
  id v4 = objc_msgSend(v2, sel_handleForPredicate_error_, v3, v19);
  if (v4)
  {
    id v5 = v19[0];

    signed int v6 = objc_msgSend(v4, sel_pid);
    return v6;
  }
  else
  {
    id v8 = v19[0];
    uint64_t v9 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.modelInteraction);
    id v11 = v9;
    id v12 = v9;
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      id v17 = v9;
      uint64_t v18 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v19[0] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v18;

      _os_log_impl(&dword_24F9A2000, v13, v14, "Error retrieving PID for Siri: %@", v15, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v16, -1, -1);
      MEMORY[0x25336A180](v15, -1, -1);
    }
    else
    {
    }
    return 0;
  }
}

uint64_t closure #1 in closure #1 in DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Prompt();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[3] = MEMORY[0x263F8D310];
  v13[4] = MEMORY[0x263F62188];
  v13[0] = a1;
  v13[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = MEMORY[0x263F620B0];
  static CustomPromptBuilder.buildExpression(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt>);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_24FA3E1D0;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v10 + v9, v7, v4);
  MEMORY[0x253369080](v10, v4, v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ExtendedAttributeUtils.rawValue.getter(char a1)
{
  return *(void *)&aSourceTfileNam[8 * a1];
}

void closure #1 in URL.setExtendedAttribute(_:forName:)(const char *a1, uint64_t a2, unint64_t a3)
{
  value[2] = *MEMORY[0x263EF8340];
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      outlined copy of Data._Representation(a2, a3);
      uint64_t v8 = (char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (__OFSUB__((int)a2, v9))
        {
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
        }
        v8 += (int)a2 - v9;
      }
      __DataStorage._length.getter();
      if (__OFSUB__(HIDWORD(a2), a2))
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      uint64_t v10 = String.utf8CString.getter();
      int v11 = setxattr(a1, (const char *)(v10 + 32), v8, HIDWORD(a2) - (int)a2, 0, 0);
      swift_release();
      outlined consume of Data._Representation(a2, a3);
      if (v11 < 0)
      {
LABEL_18:
        if (one-time initialization token for modelInteraction != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        __swift_project_value_buffer(v22, (uint64_t)static Logger.modelInteraction);
        unint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = swift_slowAlloc();
          uint64_t v33 = swift_slowAlloc();
          value[0] = v33;
          *(_DWORD *)uint64_t v25 = 136315650;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(5001813, 0xE300000000000000, value);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v25 + 12) = 2080;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x800000024FA49350, value);
          uint64_t v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v25 + 22) = 2080;
          int v27 = MEMORY[0x253368EE0](v26);
          uint64_t v28 = specialized static URL.posixError(_:)(v27);
          id v29 = objc_msgSend(v28, sel_localizedDescription);

          uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v32 = v31;

          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, value);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24F9A2000, v23, v24, "%s.%s Extended attribute could not be set: %s", (uint8_t *)v25, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v33, -1, -1);
          MEMORY[0x25336A180](v25, -1, -1);
        }
      }
      return;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      unint64_t v13 = (char *)__DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v14 = __DataStorage._offset.getter();
      if (__OFSUB__(v12, v14)) {
        goto LABEL_28;
      }
      v13 += v12 - v14;
LABEL_14:
      __DataStorage._length.getter();
      uint64_t v16 = *(void *)(a2 + 16);
      uint64_t v15 = *(void *)(a2 + 24);
      size_t v17 = v15 - v16;
      if (__OFSUB__(v15, v16)) {
        goto LABEL_25;
      }
      uint64_t v18 = String.utf8CString.getter();
      int v19 = setxattr(a1, (const char *)(v18 + 32), v13, v17, 0, 0);
      swift_release();
      swift_release();
      swift_release();
      if (v19 < 0) {
        goto LABEL_18;
      }
      return;
    case 3uLL:
      memset(value, 0, 14);
      uint64_t v20 = String.utf8CString.getter();
      int v21 = setxattr(a1, (const char *)(v20 + 32), value, 0, 0, 0);
      swift_release();
      if (v21 < 0) {
        goto LABEL_18;
      }
      return;
    default:
      value[0] = a2;
      LOWORD(value[1]) = a3;
      BYTE2(value[1]) = BYTE2(a3);
      BYTE3(value[1]) = BYTE3(a3);
      BYTE4(value[1]) = BYTE4(a3);
      BYTE5(value[1]) = BYTE5(a3);
      uint64_t v6 = String.utf8CString.getter();
      int v7 = setxattr(a1, (const char *)(v6 + 32), value, BYTE6(a3), 0, 0);
      swift_release();
      if (v7 < 0) {
        goto LABEL_18;
      }
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExtendedAttributeUtils(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExtendedAttributeUtils()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExtendedAttributeUtils()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExtendedAttributeUtils()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExtendedAttributeUtils@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ExtendedAttributeUtils.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExtendedAttributeUtils@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ExtendedAttributeUtils.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError;
  if (!lazy protocol witness table cache variable for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError;
  if (!lazy protocol witness table cache variable for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultModelSession.SessionError and conformance DefaultModelSession.SessionError);
  }
  return result;
}

uint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(uint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0) {
    return result;
  }
  unint64_t v4 = result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of GenerativeExperiencesSession.register(documents:)>>.0);
  unint64_t result = _swift_isClassOrObjCExistentialType();
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a3;
  }
  if (*(void *)(v5 + 16) <= v4) {
    goto LABEL_8;
  }
  return result;
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of GenerativeExperiencesSession.register(documents:)>>.0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v21 - v9;
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && a2 >> 62)
  {
    uint64_t v11 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v21 = v11;
    swift_unknownObjectRetain();
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      return v11;
    }
    goto LABEL_15;
  }
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(85);
    unint64_t v15 = 0xD000000000000046;
    uint64_t v16 = "NSArray element failed to match the Swift Array Element type\nExpected ";
    goto LABEL_17;
  }
  if (isClassOrObjCExistentialType) {
    uint64_t v13 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  else {
    uint64_t v13 = a2;
  }
  if (*(void *)(v13 + 16) <= a1) {
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  uint64_t v21 = v11;
  swift_unknownObjectRetain_n();
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    return v11;
  }
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(82);
  unint64_t v15 = 0xD000000000000043;
  uint64_t v16 = "Down-casted Array element failed to match the target type\nExpected ";
LABEL_17:
  unint64_t v17 = (unint64_t)(v16 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v15);
  v18._object = (void *)0x800000024FA492A0;
  v18._uint64_t countAndFlagsBits = 0xD000000000000057;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0x756F662074756220;
  v19._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v19);
  swift_getObjectType();
  swift_unknownObjectRelease();
  v20._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t result = Hasher._finalize()();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          uint64_t v10 = *(void *)(a2 + 48);
          uint64_t v11 = (unsigned char *)(v10 + v3);
          uint64_t v12 = (unsigned char *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *uint64_t v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          unint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            *uint64_t v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void partial apply for closure #1 in URL.setExtendedAttribute(_:forName:)(const char *a1)
{
  closure #1 in URL.setExtendedAttribute(_:forName:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

unint64_t specialized static DefaultModelSession.getTools(tooling:enableBrowserTool:)(uint64_t a1, int a2)
{
  void (*v24)(void *__return_ptr, id);
  id v25;
  unint64_t v26;
  unint64_t v27;
  unsigned char v29[12];
  int v30;
  unsigned char *v31;
  unsigned char *v32;
  void v33[5];
  unint64_t v34;

  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for ToolType();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  unint64_t v32 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  unint64_t v9 = &v29[-v8];
  MEMORY[0x270FA5388](v7);
  unint64_t v31 = &v29[-v10];
  int64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = MEMORY[0x263F8EE78];
  if (v11)
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v13 = a1 + 32;
    unint64_t v12 = v34;
    do
    {
      outlined init with copy of ModelSessionFactory(v13, (uint64_t)v33);
      static ToolType.tooling(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        unint64_t v12 = v34;
      }
      unint64_t v15 = *(void *)(v12 + 16);
      unint64_t v14 = *(void *)(v12 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        unint64_t v12 = v34;
      }
      *(void *)(v12 + 16) = v15 + 1;
      (*(void (**)(unint64_t, unsigned char *, uint64_t))(v4 + 32))(v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v15, v9, v3);
      uint64_t v34 = v12;
      v13 += 40;
      --v11;
    }
    while (v11);
  }
  uint64_t v16 = v31;
  static ToolType.imageGenerator.getter();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, v12);
  }
  unint64_t v18 = *(void *)(v12 + 16);
  unint64_t v17 = *(void *)(v12 + 24);
  if (v18 >= v17 >> 1) {
    unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v18 + 1;
  uint64_t v21 = *(void (**)(unint64_t, unsigned char *, uint64_t))(v4 + 32);
  uint64_t v19 = v4 + 32;
  BOOL v20 = v21;
  unint64_t v22 = (*(unsigned __int8 *)(v19 + 48) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 48);
  uint64_t v23 = *(void *)(v19 + 40);
  v21(v12 + v22 + v23 * v18, v16, v3);
  if (one-time initialization token for _enableWebSources != -1) {
    swift_once();
  }
  if (byte_269A45888)
  {
    os_log_type_t v24 = (void (*)(void *__return_ptr, id))*((void *)&xmmword_269A45870 + 1);
    uint64_t v25 = (id)static Overrides._enableWebSources;
    swift_bridgeObjectRetain();
    swift_retain();
    v24(v33, v25);
    swift_release();
    swift_bridgeObjectRelease();

    if (LOBYTE(v33[0]) != 2 && (v33[0] & 1) != 0) {
      goto LABEL_18;
    }
  }
  if (v30)
  {
LABEL_18:
    static ToolType.browser.getter();
    int v27 = *(void *)(v12 + 16);
    uint64_t v26 = *(void *)(v12 + 24);
    if (v27 >= v26 >> 1) {
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v12);
    }
    *(void *)(v12 + 16) = v27 + 1;
    v20(v12 + v22 + v27 * v23, v32, v3);
  }
  return v12;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data._Representation.init(_:count:)(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = __DataStorage._length.getter();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = specialized Data.InlineData.init(_:)(v4, v8);
      swift_release();
      return v3;
    }
    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

char *specialized static URL.posixError(_:)(int a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24FA3E1D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v6;
  uint64_t result = strerror(a1);
  if (result)
  {
    uint64_t v8 = String.init(cString:)();
    *(void *)(inited + 72) = MEMORY[0x263F8D310];
    *(void *)(inited + 48) = v8;
    *(void *)(inited + 56) = v9;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    id v10 = objc_allocWithZone(MEMORY[0x263F087E8]);
    int64_t v11 = (void *)MEMORY[0x2533691D0](v2, v4);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v10, sel_initWithDomain_code_userInfo_, v11, a1, isa);

    return (char *)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)(v1[2], v1[3], v1[4], a1);
}

uint64_t partial apply for closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  return closure #1 in DefaultModelSession.createAndRunKeepAliveTask(using:)(a1, v4, v5, v7, v6);
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ModelResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModelResponseText and conformance ModelResponseText()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelResponseText and conformance ModelResponseText;
  if (!lazy protocol witness table cache variable for type ModelResponseText and conformance ModelResponseText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelResponseText and conformance ModelResponseText);
  }
  return result;
}

uint64_t sub_24F9FA844()
{
  uint64_t v1 = type metadata accessor for PromptCompletion.ImageContent();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in DefaultModelSession.getModelResponse(from:keepAliveCallback:)()
{
  type metadata accessor for PromptCompletion.ImageContent();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = partial apply for closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  return implicit closure #2 in implicit closure #1 in DefaultModelSession.getModelResponse(from:keepAliveCallback:)();
}

uint64_t lazy protocol witness table accessor for type ModelResponse and conformance ModelResponse(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

unint64_t lazy protocol witness table accessor for type PromptImage and conformance PromptImage()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptImage and conformance PromptImage;
  if (!lazy protocol witness table cache variable for type PromptImage and conformance PromptImage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptImage and conformance PromptImage);
  }
  return result;
}

uint64_t partial apply for closure #1 in DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)()
{
  return closure #1 in closure #1 in DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

ValueMetadata *type metadata accessor for DefaultModelSession.SessionError()
{
  return &type metadata for DefaultModelSession.SessionError;
}

uint64_t getEnumTagSinglePayload for DefaultModelSession.SessionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DefaultModelSession.SessionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24F9FAC4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtendedAttributeUtils()
{
  return &type metadata for ExtendedAttributeUtils;
}

unint64_t lazy protocol witness table accessor for type ExtendedAttributeUtils and conformance ExtendedAttributeUtils()
{
  unint64_t result = lazy protocol witness table cache variable for type ExtendedAttributeUtils and conformance ExtendedAttributeUtils;
  if (!lazy protocol witness table cache variable for type ExtendedAttributeUtils and conformance ExtendedAttributeUtils)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtendedAttributeUtils and conformance ExtendedAttributeUtils);
  }
  return result;
}

unint64_t specialized ExtendedAttributeUtils.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExtendedAttributeUtils.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t partial apply for closure #2 in SessionConfiguration.init(_:_:_:_:)()
{
  return partial apply for closure #1 in closure #1 in DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)();
}

uint64_t ContentLoaderWithShortcuts.load()(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation.BufferingPolicy);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  return MEMORY[0x270FA2498](ContentLoaderWithShortcuts.load(), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = ContentLoaderWithShortcuts.load();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 184) = a1;
    uint64_t v5 = ContentLoaderWithShortcuts.load();
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t ContentLoaderWithShortcuts.load()()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = swift_task_alloc();
  v0[16] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[17] = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WFOnScreenContentNode?);
  *uint64_t v3 = v0;
  v3[1] = ContentLoaderWithShortcuts.load();
  return MEMORY[0x270FA2360](v0 + 4, 0, 0, 0xD000000000000014, 0x800000024FA494A0, partial apply for closure #1 in ContentLoaderWithShortcuts.getOnScreenContent(), v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ContentLoaderWithShortcuts.load();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = ContentLoaderWithShortcuts.load();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37[2];
  void *v38;
  uint64_t v39;

  uint64_t v38 = v0;
  uint64_t v1 = (void *)v0[4];
  v0[19] = v1;
  if (one-time initialization token for shortcuts != -1) {
    swift_once();
  }
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.shortcuts);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v6 = v1;
  BOOL v7 = Logger.logObject.getter();
  int v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v33 = v0 + 2;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v34 = (void *)swift_slowAlloc();
    v37[0] = v34;
    *(_DWORD *)uint64_t v9 = 136315650;
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, (uint64_t *)v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x292864616F6CLL, 0xE600000000000000, (uint64_t *)v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 2080;
    uint64_t v36 = v1;
    if (v1)
    {
      uint64_t v10 = objc_msgSend(v6, sel_description);
      int64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v13 = v12;
    }
    else
    {
      int64_t v11 = 0;
      id v13 = 0;
    }
    BOOL v20 = v0[14];
    uint64_t v19 = v0[15];
    uint64_t v35 = (id)v0[13];
    v0[2] = v11;
    v0[3] = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v21 = String.init<A>(describing:)();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_24F9A2000, v7, v8, "%s.%s on screen content node: %s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v34, -1, -1);
    MEMORY[0x25336A180](v9, -1, -1);

    (*(void (**)(uint64_t, id))(v20 + 8))(v19, v35);
    uint64_t v1 = v36;
    if (!v36) {
      goto LABEL_10;
    }
LABEL_7:
    unint64_t v17 = objc_msgSend(v6, sel_children, v33);
    type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for WFOnScreenContentNode);
    unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_11;
  }
  unint64_t v15 = v0[14];
  unint64_t v14 = v0[15];
  uint64_t v16 = v0[13];

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  if (v1) {
    goto LABEL_7;
  }
LABEL_10:
  unint64_t v18 = MEMORY[0x263F8EE78];
LABEL_11:
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v23 = result;
    if (!result) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v23 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = swift_bridgeObjectRetain();
    if (!v23) {
      goto LABEL_20;
    }
  }
  if (v23 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v25 = 0;
  do
  {
    if ((v18 & 0xC000000000000001) != 0) {
      uint64_t v26 = (id)MEMORY[0x2533696C0](v25, v18);
    }
    else {
      uint64_t v26 = *(id *)(v18 + 8 * v25 + 32);
    }
    int v27 = v26;
    ++v25;
    v37[0] = v26;
    closure #1 in ContentLoaderWithShortcuts.load()(v37);
  }
  while (v23 != v25);
LABEL_20:
  swift_bridgeObjectRelease();
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31 <= 1) {
      goto LABEL_22;
    }
LABEL_24:
    id v29 = (void *)specialized _arrayForceCast<A, B>(_:)(v18);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  if (*(uint64_t *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) > 1) {
    goto LABEL_24;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WFOnScreenContentNode?>);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_24FA3E1D0;
  *(void *)(v28 + 32) = v1;
  v37[0] = (void *)v28;
  specialized Array._endMutation()();
  id v29 = v37[0];
  uint64_t v30 = v6;
LABEL_25:
  v0[20] = v29;
  unint64_t v32 = (void *)swift_task_alloc();
  v0[21] = v32;
  uint64_t *v32 = v0;
  v32[1] = ContentLoaderWithShortcuts.load();
  return ContentLoaderWithShortcuts.load(nodes:)((uint64_t)v29);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[23];
  uint64_t v2 = (void *)v0[19];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[10];
  uint64_t v6 = (uint64_t *)v0[8];
  *(void *)(swift_task_alloc() + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ScreenContent]);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, *MEMORY[0x263F8F580], v5);
  v6[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>);
  v6[4] = lazy protocol witness table accessor for type AsyncStream<[ScreenContent]> and conformance AsyncStream<A>();
  __swift_allocate_boxed_opaque_existential_1(v6);
  AsyncStream.init(_:bufferingPolicy:_:)();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 152);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in ContentLoaderWithShortcuts.load()(void **a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v7 = *a1;
  if (one-time initialization token for shortcuts != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v3, (uint64_t)static Logger.shortcuts);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  id v9 = v7;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  int v12 = v11;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = v1;
    uint64_t v14 = v13;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v27 = v24;
    *(_DWORD *)uint64_t v14 = 136315650;
    int v22 = v12;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v23 = v3;
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x292864616F6CLL, 0xE600000000000000, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2080;
    id v15 = objc_msgSend(v9, sel_description, v14 + 24);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24F9A2000, v10, (os_log_type_t)v22, "%s.%s child node: %s", (uint8_t *)v14, 0x20u);
    uint64_t v19 = v24;
    swift_arrayDestroy();
    MEMORY[0x25336A180](v19, -1, -1);
    MEMORY[0x25336A180](v14, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v23);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = 0;
        do
        {
          uint64_t v5 = v4 + 1;
          uint64_t v10 = (void *)MEMORY[0x2533696C0]();
          type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for WFOnScreenContentNode);
          id v6 = v10;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WFOnScreenContentNode?);
          swift_dynamicCast();
          swift_unknownObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v4 = v5;
        }
        while (v2 != v5);
      }
      else
      {
        BOOL v7 = (void **)(a1 + 32);
        type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for WFOnScreenContentNode);
        do
        {
          uint64_t v8 = *v7++;
          id v9 = v8;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WFOnScreenContentNode?);
          swift_dynamicCast();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v2;
        }
        while (v2);
      }
      return v11;
    }
  }
  return result;
}

uint64_t ContentLoaderWithShortcuts.load(nodes:)(uint64_t a1)
{
  v2[44] = a1;
  v2[45] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = type metadata accessor for DocumentInfo(0);
  v2[49] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v2[50] = v3;
  v2[51] = *(void *)(v3 - 8);
  v2[52] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  v2[53] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ScreenContent(0);
  v2[54] = v4;
  v2[55] = *(void *)(v4 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[64] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[65] = v5;
  v2[66] = *(void *)(v5 - 8);
  v2[67] = swift_task_alloc();
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  return MEMORY[0x270FA2498](ContentLoaderWithShortcuts.load(nodes:), 0, 0);
}

{
  void *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  *(void *)(*(void *)v2 + 680) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();

    uint64_t v3 = ContentLoaderWithShortcuts.load(nodes:);
  }
  else
  {
    uint64_t v3 = ContentLoaderWithShortcuts.load(nodes:);
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 704) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = ContentLoaderWithShortcuts.load(nodes:);
  }
  else
  {
    *(void *)(v4 + 712) = a1;
    uint64_t v5 = ContentLoaderWithShortcuts.load(nodes:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t ContentLoaderWithShortcuts.load(nodes:)()
{
  uint64_t v60 = v0;
  uint64_t v1 = *(void *)(v0[44] + 16);
  v0[71] = v1;
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1)
  {
LABEL_25:
    v0[86] = v2;
    uint64_t v37 = *(void *)(v2 + 16);
    outlined init with copy of ContentLoaderWithShortcuts(v0[45], (uint64_t)(v0 + 2));
    if (v37)
    {
      outlined destroy of ContentLoaderWithShortcuts((uint64_t)(v0 + 2));
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
      uint64_t v38 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isSnapshotSupportWithContextRetrievalEnabled.getter();
      outlined destroy of ContentLoaderWithShortcuts((uint64_t)(v0 + 2));
      if ((v38 & 1) == 0)
      {
        if (one-time initialization token for shortcuts != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v45 = swift_slowAlloc();
          uint64_t v59 = v45;
          *(_DWORD *)uint64_t v44 = 136315394;
          v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v44 + 12) = 2080;
          v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v42, v43, "%s.%s screen contents is empty, taking screenshot as fallback", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v45, -1, -1);
          MEMORY[0x25336A180](v44, -1, -1);
        }

        __swift_project_boxed_opaque_existential_1((void *)(v0[45] + 88), *(void *)(v0[45] + 112));
        uint64_t v46 = (void *)swift_task_alloc();
        v0[87] = v46;
        *uint64_t v46 = v0;
        v46[1] = ContentLoaderWithShortcuts.load(nodes:);
        return ScreenshotLoader.load()();
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v40 = MEMORY[0x263F8EE78];
    return v39(v40);
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  unint64_t v4 = 0x269A45000uLL;
  while (1)
  {
    v0[73] = v2;
    v0[72] = v3;
    uint64_t v5 = *(void **)(v0[44] + 8 * v3 + 32);
    v0[74] = v5;
    if (!v5) {
      goto LABEL_18;
    }
    id v6 = v5;
    id v7 = objc_msgSend(v6, sel_file);
    v0[75] = v7;
    if (!v7) {
      goto LABEL_18;
    }
    uint64_t v8 = v7;
    id v9 = objc_msgSend(v7, sel_fileURL);
    if (!v9)
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[66] + 56))(v0[64], 1, 1, v0[65]);
LABEL_17:
      uint64_t v32 = v0[64];

      outlined destroy of URL?(v32);
LABEL_18:
      if (*(void *)(v4 + 1112) != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v59 = v36;
        *(_DWORD *)uint64_t v35 = 136315394;
        *(void *)(v35 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v59);
        *(_WORD *)(v35 + 12) = 2080;
        *(void *)(v35 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v59);
        _os_log_impl(&dword_24F9A2000, v33, v34, "%s.%s No file or file url found, skipping node", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v36, -1, -1);
        MEMORY[0x25336A180](v35, -1, -1);
      }

      goto LABEL_4;
    }
    uint64_t v10 = v9;
    uint64_t v11 = v0[69];
    uint64_t v12 = v0[66];
    uint64_t v13 = v0[65];
    uint64_t v14 = v0[64];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    id v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    v0[76] = v15;
    v0[77] = (v12 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v15(v14, v11, v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v13);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v13);
    unint64_t v4 = 0x269A45000;
    uint64_t v2 = MEMORY[0x263F8EE78];
    if (v16 == 1) {
      goto LABEL_17;
    }
    v15(v0[70], v0[64], v0[65]);
    id v17 = objc_msgSend(v6, sel_applicationBundleIdentifier);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    v0[78] = v18;
    v0[79] = v20;
    id v21 = objc_msgSend(v6, sel_contentItem);
    v0[80] = v21;
    if (!v21) {
      goto LABEL_39;
    }
    int v22 = v21;
    self;
    uint64_t v23 = swift_dynamicCastObjCClass();
    if (!v23) {
      break;
    }
    uint64_t v24 = v23;
    __swift_project_boxed_opaque_existential_1((void *)v0[45], *(void *)(v0[45] + 24));
    if ((dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter() & 1) == 0)
    {
      if (one-time initialization token for shortcuts != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        uint64_t v59 = v52;
        *(_DWORD *)uint64_t v51 = 136315394;
        v0[40] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v51 + 12) = 2080;
        v0[41] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v49, v50, "%s.%s Loading as Photos media item", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v52, -1, -1);
        MEMORY[0x25336A180](v51, -1, -1);
      }

      __swift_project_boxed_opaque_existential_1((void *)(v0[45] + 48), *(void *)(v0[45] + 72));
      uint64_t v53 = swift_task_alloc();
      v0[81] = v53;
      *(void *)(v53 + 16) = v24;
      uint64_t v54 = (void *)swift_task_alloc();
      v0[82] = v54;
      uint64_t v55 = type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for UIImage);
      *uint64_t v54 = v0;
      v54[1] = ContentLoaderWithShortcuts.load(nodes:);
      return MEMORY[0x270FA2360](v0 + 39, 0, 0, 0xD000000000000010, 0x800000024FA494C0, partial apply for closure #1 in ImageLoader.load(mediaItem:), v53, v55);
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for shortcuts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = v0[70];
    uint64_t v29 = v0[66];
    uint64_t v30 = v0[65];
    if (v27)
    {
      uint64_t v57 = v0[65];
      uint64_t v31 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v59 = v56;
      *(_DWORD *)uint64_t v31 = 136315394;
      v0[42] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 12) = 2080;
      v0[43] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v25, v26, "%s.%s Feature Flag is enabled for Context Retrieval's Image Support, skipping node", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v56, -1, -1);
      MEMORY[0x25336A180](v31, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v57);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    }
    uint64_t v2 = MEMORY[0x263F8EE78];
    unint64_t v4 = 0x269A45000;
LABEL_4:
    uint64_t v3 = v0[72] + 1;
    if (v3 == v0[71])
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }

LABEL_39:
  uint64_t v58 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ImageLoader.load(from:)
                                        + async function pointer to specialized ImageLoader.load(from:));
  uint64_t v47 = (void *)swift_task_alloc();
  v0[84] = v47;
  *uint64_t v47 = v0;
  v47[1] = ContentLoaderWithShortcuts.load(nodes:);
  uint64_t v48 = v0[70];
  return v58(v48);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 664) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ContentLoaderWithShortcuts.load(nodes:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = ContentLoaderWithShortcuts.load(nodes:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  int v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t (*v79)(uint64_t);
  uint64_t v80;
  void *v81;
  uint64_t v82;

  uint64_t v81 = v0;
  uint64_t v1 = v0[79];
  uint64_t v2 = v0[78];
  unint64_t v4 = v0[62];
  uint64_t v3 = v0[63];
  uint64_t v5 = v0[53];
  id v6 = (void *)v0[39];
  id v7 = type metadata accessor for OnScreenContent.UIMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  uint64_t v8 = v6;
  ImageInfo.init(source:isScreenshot:appBundleID:uiMetadata:isAppEntity:)(v6, 0, 1, 0, v2, v1, v5, 0, v3);
  swift_storeEnumTagMultiPayload();
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_0(v3, v4, type metadata accessor for ScreenContent);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = v0[73];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1, v10);
  }
  uint64_t v12 = *(void *)(v10 + 16);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v78 = v8;
  if (v12 >= v11 >> 1) {
    BOOL v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1, v10);
  }
  else {
    BOOL v77 = v10;
  }
  uint64_t v13 = (void *)v0[80];
  uint64_t v14 = (void *)v0[75];
  id v15 = (void *)v0[74];
  uint64_t v76 = v0[70];
  int v16 = v0[66];
  id v17 = v0[65];
  uint64_t v18 = v0[62];
  uint64_t v19 = v0[63];
  uint64_t v20 = v0[55];
  id v21 = v77;
  *(void *)(v77 + 16) = v12 + 1;
  outlined init with take of ScreenContent(v18, v77+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v12);

  _s26GenerativeAssistantActions13ScreenContentOWOhTm_0(v19, type metadata accessor for ScreenContent);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v76, v17);
  int v22 = v0[72] + 1;
  if (v22 == v0[71])
  {
LABEL_6:
    swift_bridgeObjectRelease();
    v0[86] = v21;
    uint64_t v23 = *(void *)(v21 + 16);
    outlined init with copy of ContentLoaderWithShortcuts(v0[45], (uint64_t)(v0 + 2));
    if (v23)
    {
      outlined destroy of ContentLoaderWithShortcuts((uint64_t)(v0 + 2));
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
      uint64_t v58 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isSnapshotSupportWithContextRetrievalEnabled.getter();
      outlined destroy of ContentLoaderWithShortcuts((uint64_t)(v0 + 2));
      if ((v58 & 1) == 0)
      {
        if (one-time initialization token for shortcuts != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
        uint64_t v61 = Logger.logObject.getter();
        uint64_t v62 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          uint64_t v80 = v64;
          *(_DWORD *)uint64_t v63 = 136315394;
          v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v63 + 12) = 2080;
          v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v61, v62, "%s.%s screen contents is empty, taking screenshot as fallback", (uint8_t *)v63, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v64, -1, -1);
          MEMORY[0x25336A180](v63, -1, -1);
        }

        __swift_project_boxed_opaque_existential_1((void *)(v0[45] + 88), *(void *)(v0[45] + 112));
        uint64_t v65 = (void *)swift_task_alloc();
        v0[87] = v65;
        *uint64_t v65 = v0;
        v65[1] = ContentLoaderWithShortcuts.load(nodes:);
        return ScreenshotLoader.load()();
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v59 = (uint64_t (*)(uint64_t))v0[1];
    return v59(v21);
  }
  uint64_t v24 = 0x269A45000uLL;
  while (1)
  {
    v0[73] = v21;
    v0[72] = v22;
    uint64_t v25 = *(void **)(v0[44] + 8 * v22 + 32);
    v0[74] = v25;
    if (!v25) {
      goto LABEL_24;
    }
    os_log_type_t v26 = v25;
    BOOL v27 = objc_msgSend(v26, sel_file);
    v0[75] = v27;
    if (!v27) {
      goto LABEL_24;
    }
    uint64_t v28 = v27;
    uint64_t v29 = objc_msgSend(v27, sel_fileURL);
    if (!v29)
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[66] + 56))(v0[64], 1, 1, v0[65]);
LABEL_23:
      uint64_t v53 = v0[64];

      outlined destroy of URL?(v53);
LABEL_24:
      if (*(void *)(v24 + 1112) != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
      uint64_t v54 = Logger.logObject.getter();
      uint64_t v55 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        uint64_t v80 = v57;
        *(_DWORD *)uint64_t v56 = 136315394;
        *(void *)(v56 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v80);
        *(_WORD *)(v56 + 12) = 2080;
        *(void *)(v56 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v80);
        _os_log_impl(&dword_24F9A2000, v54, v55, "%s.%s No file or file url found, skipping node", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v57, -1, -1);
        MEMORY[0x25336A180](v56, -1, -1);
      }

      goto LABEL_10;
    }
    uint64_t v30 = v29;
    uint64_t v31 = v0[69];
    uint64_t v32 = v0[66];
    uint64_t v33 = v0[65];
    os_log_type_t v34 = v0[64];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
    v0[76] = v35;
    v0[77] = (v32 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v35(v34, v31, v33);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v33);
    uint64_t v36 = v34;
    uint64_t v24 = 0x269A45000;
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v36, 1, v33);
    id v21 = v77;
    if (v37 == 1) {
      goto LABEL_23;
    }
    v35(v0[70], v0[64], v0[65]);
    uint64_t v38 = objc_msgSend(v26, sel_applicationBundleIdentifier);
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    v0[78] = v39;
    v0[79] = v41;
    uint64_t v42 = objc_msgSend(v26, sel_contentItem);
    v0[80] = v42;
    if (!v42) {
      goto LABEL_41;
    }
    os_log_type_t v43 = v42;
    self;
    uint64_t v44 = swift_dynamicCastObjCClass();
    if (!v44) {
      break;
    }
    uint64_t v45 = v44;
    __swift_project_boxed_opaque_existential_1((void *)v0[45], *(void *)(v0[45] + 24));
    if ((dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter() & 1) == 0)
    {
      if (one-time initialization token for shortcuts != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
      uint64_t v68 = Logger.logObject.getter();
      uint64_t v69 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        uint64_t v80 = v71;
        *(_DWORD *)uint64_t v70 = 136315394;
        v0[40] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v70 + 12) = 2080;
        v0[41] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v68, v69, "%s.%s Loading as Photos media item", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v71, -1, -1);
        MEMORY[0x25336A180](v70, -1, -1);
      }

      __swift_project_boxed_opaque_existential_1((void *)(v0[45] + 48), *(void *)(v0[45] + 72));
      uint64_t v72 = swift_task_alloc();
      v0[81] = v72;
      *(void *)(v72 + 16) = v45;
      uint64_t v73 = (void *)swift_task_alloc();
      v0[82] = v73;
      uint64_t v74 = type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for UIImage);
      *uint64_t v73 = v0;
      v73[1] = ContentLoaderWithShortcuts.load(nodes:);
      return MEMORY[0x270FA2360](v0 + 39, 0, 0, 0xD000000000000010, 0x800000024FA494C0, partial apply for closure #1 in ImageLoader.load(mediaItem:), v72, v74);
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for shortcuts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
    uint64_t v46 = Logger.logObject.getter();
    uint64_t v47 = static os_log_type_t.info.getter();
    uint64_t v48 = os_log_type_enabled(v46, v47);
    uint64_t v49 = v0[70];
    os_log_type_t v50 = v0[66];
    uint64_t v51 = v0[65];
    if (v48)
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      uint64_t v80 = v75;
      *(_DWORD *)uint64_t v52 = 136315394;
      v0[42] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 12) = 2080;
      v0[43] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v46, v47, "%s.%s Feature Flag is enabled for Context Retrieval's Image Support, skipping node", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v75, -1, -1);
      MEMORY[0x25336A180](v52, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    id v21 = v77;
    uint64_t v24 = 0x269A45000;
LABEL_10:
    int v22 = v0[72] + 1;
    if (v22 == v0[71]) {
      goto LABEL_6;
    }
  }

LABEL_41:
  uint64_t v79 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ImageLoader.load(from:)
                                        + async function pointer to specialized ImageLoader.load(from:));
  uint64_t v66 = (void *)swift_task_alloc();
  v0[84] = v66;
  *uint64_t v66 = v0;
  v66[1] = ContentLoaderWithShortcuts.load(nodes:);
  uint64_t v67 = v0[70];
  return v79(v67);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[80];
  uint64_t v2 = (void *)v0[75];
  uint64_t v3 = (void *)v0[74];
  unint64_t v4 = v0[70];
  uint64_t v5 = v0[66];
  id v6 = v0[65];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  int v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(unint64_t);
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t);
  uint64_t v96;
  void *v97;
  uint64_t v98;

  unint64_t v97 = v0;
  __swift_project_boxed_opaque_existential_1((void *)v0[45], *(void *)(v0[45] + 24));
  if (dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter())
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for shortcuts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.info.getter();
    uint64_t v3 = os_log_type_enabled(v1, v2);
    unint64_t v4 = (void *)v0[85];
    uint64_t v5 = (void *)v0[75];
    id v6 = (void *)v0[74];
    id v7 = v0[70];
    uint64_t v8 = v0[65];
    id v9 = (void (**)(uint64_t, uint64_t))(v0[66] + 8);
    if (v3)
    {
      Swift::String v94 = v0[65];
      uint64_t v10 = swift_slowAlloc();
      uint64_t v93 = v6;
      uint64_t v11 = swift_slowAlloc();
      uint64_t v96 = v11;
      *(_DWORD *)uint64_t v10 = 136315394;
      v0[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2080;
      v0[38] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v1, v2, "%s.%s Feature Flag is enabled for Context Retrieval's Image Support, skipping node", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v11, -1, -1);
      MEMORY[0x25336A180](v10, -1, -1);

      (*v9)(v7, v94);
    }
    else
    {

      (*v9)(v7, v8);
    }
    uint64_t v38 = v0[73];
  }
  else
  {
    if (one-time initialization token for shortcuts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      id v15 = swift_slowAlloc();
      uint64_t v96 = v15;
      *(_DWORD *)uint64_t v14 = 136315394;
      v0[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      v0[36] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v12, v13, "%s.%s Loading Image from file", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v15, -1, -1);
      MEMORY[0x25336A180](v14, -1, -1);
    }

    int v16 = (void *)v0[85];
    id v17 = v0[79];
    uint64_t v18 = v0[78];
    uint64_t v20 = v0[60];
    uint64_t v19 = v0[61];
    id v21 = v0[53];
    int v22 = type metadata accessor for OnScreenContent.UIMetadata();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
    uint64_t v23 = v16;
    ImageInfo.init(source:isScreenshot:appBundleID:uiMetadata:isAppEntity:)(v16, 0, 1, 0, v18, v17, v21, 0, v19);
    swift_storeEnumTagMultiPayload();
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_0(v19, v20, type metadata accessor for ScreenContent);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v0[73];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1, v25);
    }
    BOOL v27 = *(void *)(v25 + 16);
    os_log_type_t v26 = *(void *)(v25 + 24);
    if (v27 >= v26 >> 1) {
      uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v25);
    }
    uint64_t v28 = (void *)v0[85];
    uint64_t v29 = (void *)v0[75];
    uint64_t v30 = (void *)v0[74];
    uint64_t v31 = v0[70];
    uint64_t v32 = v0[66];
    uint64_t v33 = v0[65];
    os_log_type_t v34 = v0[60];
    uint64_t v35 = v0[61];
    uint64_t v36 = v0[55];
    *(void *)(v25 + 16) = v27 + 1;
    uint64_t v37 = v25
        + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
        + *(void *)(v36 + 72) * v27;
    uint64_t v38 = v25;
    outlined init with take of ScreenContent(v34, v37);

    _s26GenerativeAssistantActions13ScreenContentOWOhTm_0(v35, type metadata accessor for ScreenContent);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }
  uint64_t v39 = v0[72] + 1;
  if (v39 == v0[71])
  {
LABEL_18:
    swift_bridgeObjectRelease();
    v0[86] = v38;
    uint64_t v40 = *(void *)(v38 + 16);
    outlined init with copy of ContentLoaderWithShortcuts(v0[45], (uint64_t)(v0 + 2));
    if (v40)
    {
      outlined destroy of ContentLoaderWithShortcuts((uint64_t)(v0 + 2));
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
      uint64_t v74 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isSnapshotSupportWithContextRetrievalEnabled.getter();
      outlined destroy of ContentLoaderWithShortcuts((uint64_t)(v0 + 2));
      if ((v74 & 1) == 0)
      {
        if (one-time initialization token for shortcuts != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
        BOOL v77 = Logger.logObject.getter();
        uint64_t v78 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = swift_slowAlloc();
          uint64_t v80 = swift_slowAlloc();
          uint64_t v96 = v80;
          *(_DWORD *)uint64_t v79 = 136315394;
          v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v96);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v79 + 12) = 2080;
          v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v96);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v77, v78, "%s.%s screen contents is empty, taking screenshot as fallback", (uint8_t *)v79, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v80, -1, -1);
          MEMORY[0x25336A180](v79, -1, -1);
        }

        __swift_project_boxed_opaque_existential_1((void *)(v0[45] + 88), *(void *)(v0[45] + 112));
        uint64_t v81 = (void *)swift_task_alloc();
        v0[87] = v81;
        *uint64_t v81 = v0;
        v81[1] = ContentLoaderWithShortcuts.load(nodes:);
        return ScreenshotLoader.load()();
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v75 = (uint64_t (*)(unint64_t))v0[1];
    return v75(v38);
  }
  uint64_t v41 = 0x269A45000uLL;
  unint64_t v92 = v38;
  while (1)
  {
    v0[73] = v38;
    v0[72] = v39;
    uint64_t v42 = *(void **)(v0[44] + 8 * v39 + 32);
    v0[74] = v42;
    if (!v42) {
      goto LABEL_36;
    }
    os_log_type_t v43 = v42;
    uint64_t v44 = objc_msgSend(v43, sel_file);
    v0[75] = v44;
    if (!v44) {
      goto LABEL_36;
    }
    uint64_t v45 = v44;
    uint64_t v46 = objc_msgSend(v44, sel_fileURL);
    if (!v46)
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[66] + 56))(v0[64], 1, 1, v0[65]);
LABEL_35:
      uint64_t v69 = v0[64];

      outlined destroy of URL?(v69);
      uint64_t v38 = v92;
LABEL_36:
      if (*(void *)(v41 + 1112) != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
      uint64_t v70 = Logger.logObject.getter();
      uint64_t v71 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = swift_slowAlloc();
        uint64_t v73 = swift_slowAlloc();
        uint64_t v96 = v73;
        *(_DWORD *)uint64_t v72 = 136315394;
        *(void *)(v72 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v96);
        *(_WORD *)(v72 + 12) = 2080;
        *(void *)(v72 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v96);
        _os_log_impl(&dword_24F9A2000, v70, v71, "%s.%s No file or file url found, skipping node", (uint8_t *)v72, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v73, -1, -1);
        MEMORY[0x25336A180](v72, -1, -1);
      }

      goto LABEL_22;
    }
    uint64_t v47 = v46;
    uint64_t v48 = v0[69];
    uint64_t v49 = v0[66];
    os_log_type_t v50 = v0[65];
    uint64_t v51 = v0[64];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
    v0[76] = v52;
    v0[77] = (v49 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v52(v51, v48, v50);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v50);
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v51, 1, v50);
    uint64_t v41 = 0x269A45000;
    if (v53 == 1) {
      goto LABEL_35;
    }
    v52(v0[70], v0[64], v0[65]);
    uint64_t v54 = objc_msgSend(v43, sel_applicationBundleIdentifier);
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v56;

    v0[78] = v55;
    v0[79] = v57;
    uint64_t v58 = objc_msgSend(v43, sel_contentItem);
    v0[80] = v58;
    if (!v58) {
      goto LABEL_53;
    }
    uint64_t v59 = v58;
    self;
    uint64_t v60 = swift_dynamicCastObjCClass();
    if (!v60) {
      break;
    }
    uint64_t v61 = v60;
    __swift_project_boxed_opaque_existential_1((void *)v0[45], *(void *)(v0[45] + 24));
    if ((dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter() & 1) == 0)
    {
      if (one-time initialization token for shortcuts != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
      unint64_t v84 = Logger.logObject.getter();
      uint64_t v85 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v84, v85))
      {
        unint64_t v86 = swift_slowAlloc();
        uint64_t v87 = swift_slowAlloc();
        uint64_t v96 = v87;
        *(_DWORD *)unint64_t v86 = 136315394;
        v0[40] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v86 + 12) = 2080;
        v0[41] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v84, v85, "%s.%s Loading as Photos media item", (uint8_t *)v86, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v87, -1, -1);
        MEMORY[0x25336A180](v86, -1, -1);
      }

      __swift_project_boxed_opaque_existential_1((void *)(v0[45] + 48), *(void *)(v0[45] + 72));
      uint64_t v88 = swift_task_alloc();
      v0[81] = v88;
      *(void *)(v88 + 16) = v61;
      uint64_t v89 = (void *)swift_task_alloc();
      v0[82] = v89;
      uint64_t v90 = type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for UIImage);
      *uint64_t v89 = v0;
      v89[1] = ContentLoaderWithShortcuts.load(nodes:);
      return MEMORY[0x270FA2360](v0 + 39, 0, 0, 0xD000000000000010, 0x800000024FA494C0, partial apply for closure #1 in ImageLoader.load(mediaItem:), v88, v90);
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for shortcuts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v0[50], (uint64_t)static Logger.shortcuts);
    uint64_t v62 = Logger.logObject.getter();
    uint64_t v63 = static os_log_type_t.info.getter();
    uint64_t v64 = os_log_type_enabled(v62, v63);
    uint64_t v65 = v0[70];
    uint64_t v66 = v0[66];
    uint64_t v67 = v0[65];
    if (v64)
    {
      uint64_t v68 = swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      uint64_t v96 = v91;
      *(_DWORD *)uint64_t v68 = 136315394;
      v0[42] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 12) = 2080;
      v0[43] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v62, v63, "%s.%s Feature Flag is enabled for Context Retrieval's Image Support, skipping node", (uint8_t *)v68, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v91, -1, -1);
      MEMORY[0x25336A180](v68, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
    uint64_t v38 = v92;
    uint64_t v41 = 0x269A45000;
LABEL_22:
    uint64_t v39 = v0[72] + 1;
    if (v39 == v0[71]) {
      goto LABEL_18;
    }
  }

LABEL_53:
  uint64_t v95 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ImageLoader.load(from:)
                                        + async function pointer to specialized ImageLoader.load(from:));
  uint64_t v82 = (void *)swift_task_alloc();
  v0[84] = v82;
  uint64_t *v82 = v0;
  v82[1] = ContentLoaderWithShortcuts.load(nodes:);
  uint64_t v83 = v0[70];
  return v95(v83);
}

{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  int v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(unint64_t);
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  NSObject *v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  os_log_type_t type;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t);
  void (*v161)(uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  uint64_t v163 = v0;
  uint64_t v1 = objc_msgSend(*(id *)(v0 + 592), sel_fileTypeIdentifier);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    specialized SupportedDocumentHelper.init()((void *)(v0 + 144));
    v6._uint64_t countAndFlagsBits = v3;
    v6._object = v5;
    LOBYTE(v2) = SupportedDocumentHelper.isSupportedDocument(typeIdentifier:)(v6);
    outlined release of SupportedDocumentHelper(v0 + 144);
    if (v2)
    {
      __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 360), *(void *)(*(void *)(v0 + 360) + 24));
      if ((dispatch thunk of GenerativeAssistantFeatureFlagManaging.isDocumentSupportWithContextRetrievalEnabled.getter() & 1) == 0)
      {
        uint64_t v74 = objc_msgSend(*(id *)(v0 + 600), sel_data);
        uint64_t v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        BOOL v77 = v76;

        switch(v77 >> 62)
        {
          case 1uLL:
            outlined consume of Data._Representation(v75, v77);
            LODWORD(v78) = HIDWORD(v75) - v75;
            if (__OFSUB__(HIDWORD(v75), v75))
            {
              __break(1u);
              JUMPOUT(0x24FA0099CLL);
            }
            uint64_t v78 = (int)v78;
            break;
          case 2uLL:
            uint64_t v89 = *(void *)(v75 + 16);
            uint64_t v88 = *(void *)(v75 + 24);
            outlined consume of Data._Representation(v75, v77);
            uint64_t v78 = v88 - v89;
            if (__OFSUB__(v88, v89))
            {
              __break(1u);
              goto LABEL_69;
            }
            break;
          case 3uLL:
LABEL_69:
            outlined consume of Data._Representation(v75, v77);
            uint64_t v78 = 0;
            break;
          default:
            outlined consume of Data._Representation(v75, v77);
            uint64_t v78 = BYTE6(v77);
            break;
        }
        os_log_type_t v154 = v3;
        uint64_t v90 = (float)v78;
        if (one-time initialization token for shortcuts != -1) {
          swift_once();
        }
        uint64_t v91 = v90 * 0.00000095367;
        unint64_t v92 = *(void *)(v0 + 560);
        uint64_t v93 = *(void *)(v0 + 544);
        Swift::String v94 = *(void *)(v0 + 528);
        uint64_t v95 = *(void *)(v0 + 520);
        uint64_t v96 = *(void *)(v0 + 408);
        unint64_t v97 = *(void *)(v0 + 416);
        unint64_t v98 = *(void *)(v0 + 400);
        uint64_t v99 = __swift_project_value_buffer(v98, (uint64_t)static Logger.shortcuts);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v97, v99, v98);
        uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16);
        v100(v93, v92, v95);
        uint64_t v101 = Logger.logObject.getter();
        type = static os_log_type_t.debug.getter();
        uint64_t v102 = os_log_type_enabled(v101, type);
        uint64_t v103 = *(void *)(v0 + 528);
        unint64_t v104 = *(void *)(v0 + 520);
        uint64_t v106 = *(void *)(v0 + 408);
        char v105 = *(void *)(v0 + 416);
        uint64_t v107 = *(void *)(v0 + 400);
        uint64_t v158 = (uint64_t)v5;
        if (v102)
        {
          uint64_t v144 = *(void *)(v0 + 544);
          char v146 = *(void *)(v0 + 416);
          unint64_t v108 = swift_slowAlloc();
          unint64_t v145 = swift_slowAlloc();
          char v162 = v145;
          *(_DWORD *)unint64_t v108 = 136315906;
          *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v108 + 12) = 2080;
          *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v108 + 22) = 2080;
          lazy protocol witness table accessor for type URL and conformance URL();
          uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          unint64_t v161 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
          v161(v144, v104);
          *(_WORD *)(v108 + 32) = 2080;
          uint64_t v111 = Float.description.getter();
          *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24F9A2000, v101, type, "%s.%s document file url: %s, MB: %s", (uint8_t *)v108, 0x2Au);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v145, -1, -1);
          MEMORY[0x25336A180](v108, -1, -1);

          (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v146, v107);
        }
        else
        {
          unint64_t v161 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
          v161(*(void *)(v0 + 544), v104);

          (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v105, v107);
        }
        BOOL v113 = *(void **)(v0 + 600);
        uint64_t v114 = *(void **)(v0 + 592);
        v100(*(void *)(v0 + 536), *(void *)(v0 + 560), *(void *)(v0 + 520));
        uint64_t v115 = objc_msgSend(v113, sel_filename);
        uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v151 = v117;
        uint64_t v152 = v116;

        uint64_t v118 = objc_msgSend(v114, sel_fileCreationDate);
        uint64_t v119 = *(void *)(v0 + 368);
        if (v118)
        {
          uint64_t v120 = v118;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v121 = type metadata accessor for Date();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v119, 0, 1, v121);
        }
        else
        {
          uint64_t v122 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56))(v119, 1, 1, v122);
        }
        uint64_t v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
        uint64_t v124 = *(void *)(v0 + 536);
        uint64_t v125 = *(void *)(v0 + 520);
        uint64_t v126 = *(void *)(v0 + 472);
        unint64_t v150 = *(void *)(v0 + 464);
        uint64_t v147 = *(void *)(v0 + 600);
        uint64_t v127 = *(int **)(v0 + 384);
        uint64_t v128 = *(void *)(v0 + 392);
        uint64_t v129 = *(void *)(v0 + 376);
        outlined init with take of URL?(*(void *)(v0 + 368), v129, &demangling cache variable for type metadata for Date?);
        uint64_t v130 = v128 + v127[11];
        uint64_t v131 = type metadata accessor for OnScreenContent.UIMetadata();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56))(v130, 1, 1, v131);
        v123(v128, v124, v125);
        *(void *)(v128 + v127[5]) = v147;
        *(void *)(v128 + v127[6]) = 0;
        uint64_t v132 = (uint64_t *)(v128 + v127[7]);
        *uint64_t v132 = v152;
        v132[1] = v151;
        uint64_t v133 = (uint64_t *)(v128 + v127[8]);
        *uint64_t v133 = v154;
        v133[1] = v158;
        outlined init with take of URL?(v129, v128 + v127[9], &demangling cache variable for type metadata for Date?);
        *(float *)(v128 + v127[10]) = v91;
        *(unsigned char *)(v128 + v127[12]) = 0;
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_0(v128, v126, type metadata accessor for DocumentInfo);
        swift_storeEnumTagMultiPayload();
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_0(v126, v150, type metadata accessor for ScreenContent);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v29 = *(void *)(v0 + 584);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, *(void *)(v0 + 584));
        }
        unint64_t v136 = *(void *)(v29 + 16);
        unint64_t v135 = *(void *)(v29 + 24);
        if (v136 >= v135 >> 1) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1, v29);
        }
        uint64_t v137 = *(void **)(v0 + 592);
        unint64_t v138 = *(void *)(v0 + 560);
        char v139 = *(void *)(v0 + 520);
        uint64_t v140 = *(void *)(v0 + 464);
        uint64_t v141 = *(void *)(v0 + 472);
        uint64_t v142 = *(void *)(v0 + 440);
        unint64_t v143 = *(void *)(v0 + 392);
        *(void *)(v29 + 16) = v136 + 1;
        outlined init with take of ScreenContent(v140, v29+ ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80))+ *(void *)(v142 + 72) * v136);

        _s26GenerativeAssistantActions13ScreenContentOWOhTm_0(v141, type metadata accessor for ScreenContent);
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_0(v143, type metadata accessor for DocumentInfo);
        v161(v138, v139);
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      if (one-time initialization token for shortcuts != -1) {
        swift_once();
      }
      __swift_project_value_buffer(*(void *)(v0 + 400), (uint64_t)static Logger.shortcuts);
      id v7 = Logger.logObject.getter();
      uint64_t v8 = static os_log_type_t.info.getter();
      id v9 = os_log_type_enabled(v7, v8);
      uint64_t v10 = *(void **)(v0 + 600);
      uint64_t v11 = *(void **)(v0 + 592);
      uint64_t v12 = *(void *)(v0 + 560);
      uint64_t v13 = *(void *)(v0 + 528);
      uint64_t v14 = *(void *)(v0 + 520);
      if (v9)
      {
        uint64_t v159 = *(void *)(v0 + 520);
        id v15 = swift_slowAlloc();
        os_log_type_t v155 = v11;
        int v16 = swift_slowAlloc();
        char v162 = v16;
        *(_DWORD *)id v15 = 136315394;
        *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v15 + 12) = 2080;
        *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v7, v8, "%s.%s Feature Flag is enabled for Context Retrieval's Document Support, skipping node", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v16, -1, -1);
        MEMORY[0x25336A180](v15, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v159);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      }
    }
    else
    {
      BOOL v27 = *(void **)(v0 + 600);
      uint64_t v28 = *(void **)(v0 + 592);
      (*(void (**)(void, void))(*(void *)(v0 + 528) + 8))(*(void *)(v0 + 560), *(void *)(v0 + 520));

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for shortcuts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(*(void *)(v0 + 400), (uint64_t)static Logger.shortcuts);
    id v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.info.getter();
    uint64_t v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void **)(v0 + 600);
    id v21 = *(void **)(v0 + 592);
    int v22 = *(void *)(v0 + 560);
    uint64_t v23 = *(void *)(v0 + 520);
    uint64_t v24 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 528) + 8);
    if (v19)
    {
      uint64_t v156 = *(void *)(v0 + 560);
      uint64_t v25 = swift_slowAlloc();
      uint64_t v153 = v23;
      os_log_type_t v26 = swift_slowAlloc();
      char v162 = v26;
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2080;
      *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v17, v18, "%s.%s No file type identifier found, skipping node", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v26, -1, -1);
      MEMORY[0x25336A180](v25, -1, -1);

      (*v24)(v156, v153);
    }
    else
    {

      (*v24)(v22, v23);
    }
  }
  uint64_t v29 = *(void *)(v0 + 584);
LABEL_15:
  uint64_t v30 = *(void *)(v0 + 576) + 1;
  uint64_t v157 = v29;
  if (v30 == *(void *)(v0 + 568))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    *(void *)(v0 + 688) = v29;
    uint64_t v31 = *(void *)(v29 + 16);
    outlined init with copy of ContentLoaderWithShortcuts(*(void *)(v0 + 360), v0 + 16);
    if (v31)
    {
      outlined destroy of ContentLoaderWithShortcuts(v0 + 16);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v66 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isSnapshotSupportWithContextRetrievalEnabled.getter();
      outlined destroy of ContentLoaderWithShortcuts(v0 + 16);
      if ((v66 & 1) == 0)
      {
        if (one-time initialization token for shortcuts != -1) {
          swift_once();
        }
        __swift_project_value_buffer(*(void *)(v0 + 400), (uint64_t)static Logger.shortcuts);
        uint64_t v69 = Logger.logObject.getter();
        uint64_t v70 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v71 = swift_slowAlloc();
          uint64_t v72 = swift_slowAlloc();
          char v162 = v72;
          *(_DWORD *)uint64_t v71 = 136315394;
          *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v71 + 12) = 2080;
          *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v69, v70, "%s.%s screen contents is empty, taking screenshot as fallback", (uint8_t *)v71, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v72, -1, -1);
          MEMORY[0x25336A180](v71, -1, -1);
        }

        __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 360) + 88), *(void *)(*(void *)(v0 + 360) + 112));
        uint64_t v73 = (void *)swift_task_alloc();
        *(void *)(v0 + 696) = v73;
        *uint64_t v73 = v0;
        v73[1] = ContentLoaderWithShortcuts.load(nodes:);
        return ScreenshotLoader.load()();
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v67 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v67(v157);
  }
  uint64_t v32 = 0x269A45000uLL;
  while (1)
  {
    *(void *)(v0 + 584) = v29;
    *(void *)(v0 + 576) = v30;
    uint64_t v33 = *(void **)(*(void *)(v0 + 352) + 8 * v30 + 32);
    *(void *)(v0 + 592) = v33;
    if (!v33) {
      goto LABEL_34;
    }
    os_log_type_t v34 = v33;
    uint64_t v35 = objc_msgSend(v34, sel_file);
    *(void *)(v0 + 600) = v35;
    if (!v35) {
      goto LABEL_34;
    }
    uint64_t v36 = v35;
    uint64_t v37 = objc_msgSend(v35, sel_fileURL);
    if (!v37)
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 528) + 56))(*(void *)(v0 + 512), 1, 1, *(void *)(v0 + 520));
LABEL_33:
      uint64_t v61 = *(void *)(v0 + 512);

      outlined destroy of URL?(v61);
LABEL_34:
      if (*(void *)(v32 + 1112) != -1) {
        swift_once();
      }
      __swift_project_value_buffer(*(void *)(v0 + 400), (uint64_t)static Logger.shortcuts);
      uint64_t v62 = Logger.logObject.getter();
      uint64_t v63 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        char v162 = v65;
        *(_DWORD *)uint64_t v64 = 136315394;
        *(void *)(v64 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v162);
        *(_WORD *)(v64 + 12) = 2080;
        *(void *)(v64 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v162);
        _os_log_impl(&dword_24F9A2000, v62, v63, "%s.%s No file or file url found, skipping node", (uint8_t *)v64, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v65, -1, -1);
        MEMORY[0x25336A180](v64, -1, -1);
      }

      goto LABEL_20;
    }
    uint64_t v38 = v37;
    uint64_t v39 = *(void *)(v0 + 552);
    uint64_t v40 = *(void *)(v0 + 528);
    uint64_t v41 = *(void *)(v0 + 520);
    uint64_t v42 = *(void *)(v0 + 512);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32);
    *(void *)(v0 + 608) = v43;
    *(void *)(v0 + 616) = (v40 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v43(v42, v39, v41);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v41);
    uint64_t v44 = v42;
    uint64_t v32 = 0x269A45000;
    uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v44, 1, v41);
    uint64_t v29 = v157;
    if (v45 == 1) {
      goto LABEL_33;
    }
    v43(*(void *)(v0 + 560), *(void *)(v0 + 512), *(void *)(v0 + 520));
    uint64_t v46 = objc_msgSend(v34, sel_applicationBundleIdentifier);
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v48;

    *(void *)(v0 + 624) = v47;
    *(void *)(v0 + 632) = v49;
    os_log_type_t v50 = objc_msgSend(v34, sel_contentItem);
    *(void *)(v0 + 640) = v50;
    if (!v50) {
      goto LABEL_54;
    }
    uint64_t v51 = v50;
    self;
    uint64_t v52 = swift_dynamicCastObjCClass();
    if (!v52) {
      break;
    }
    uint64_t v53 = v52;
    __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 360), *(void *)(*(void *)(v0 + 360) + 24));
    if ((dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter() & 1) == 0)
    {
      if (one-time initialization token for shortcuts != -1) {
        swift_once();
      }
      __swift_project_value_buffer(*(void *)(v0 + 400), (uint64_t)static Logger.shortcuts);
      uint64_t v81 = Logger.logObject.getter();
      uint64_t v82 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = swift_slowAlloc();
        unint64_t v84 = swift_slowAlloc();
        char v162 = v84;
        *(_DWORD *)uint64_t v83 = 136315394;
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v83 + 12) = 2080;
        *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v81, v82, "%s.%s Loading as Photos media item", (uint8_t *)v83, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v84, -1, -1);
        MEMORY[0x25336A180](v83, -1, -1);
      }

      __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 360) + 48), *(void *)(*(void *)(v0 + 360) + 72));
      uint64_t v85 = swift_task_alloc();
      *(void *)(v0 + 648) = v85;
      *(void *)(v85 + 16) = v53;
      unint64_t v86 = (void *)swift_task_alloc();
      *(void *)(v0 + 656) = v86;
      uint64_t v87 = type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for UIImage);
      *unint64_t v86 = v0;
      v86[1] = ContentLoaderWithShortcuts.load(nodes:);
      return MEMORY[0x270FA2360](v0 + 312, 0, 0, 0xD000000000000010, 0x800000024FA494C0, partial apply for closure #1 in ImageLoader.load(mediaItem:), v85, v87);
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for shortcuts != -1) {
      swift_once();
    }
    __swift_project_value_buffer(*(void *)(v0 + 400), (uint64_t)static Logger.shortcuts);
    uint64_t v54 = Logger.logObject.getter();
    uint64_t v55 = static os_log_type_t.info.getter();
    uint64_t v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = *(void *)(v0 + 560);
    uint64_t v58 = *(void *)(v0 + 528);
    uint64_t v59 = *(void *)(v0 + 520);
    if (v56)
    {
      uint64_t v60 = swift_slowAlloc();
      uint64_t v149 = swift_slowAlloc();
      char v162 = v149;
      *(_DWORD *)uint64_t v60 = 136315394;
      *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA3F070, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 12) = 2080;
      *(void *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646F6E2864616F6CLL, 0xEC000000293A7365, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v54, v55, "%s.%s Feature Flag is enabled for Context Retrieval's Image Support, skipping node", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v149, -1, -1);
      MEMORY[0x25336A180](v60, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
    uint64_t v29 = v157;
    uint64_t v32 = 0x269A45000;
LABEL_20:
    uint64_t v30 = *(void *)(v0 + 576) + 1;
    if (v30 == *(void *)(v0 + 568)) {
      goto LABEL_16;
    }
  }

LABEL_54:
  unint64_t v160 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ImageLoader.load(from:)
                                         + async function pointer to specialized ImageLoader.load(from:));
  uint64_t v79 = (void *)swift_task_alloc();
  *(void *)(v0 + 672) = v79;
  NSObject *v79 = v0;
  v79[1] = ContentLoaderWithShortcuts.load(nodes:);
  uint64_t v80 = *(void *)(v0 + 560);
  return v160(v80);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(unint64_t);
  uint64_t v15;

  uint64_t v1 = (void *)v0[89];
  uint64_t v3 = v0[56];
  uint64_t v2 = v0[57];
  unint64_t v4 = v0[53];
  uint64_t v5 = type metadata accessor for OnScreenContent.UIMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  ImageInfo.init(source:isScreenshot:appBundleID:uiMetadata:isAppEntity:)(v1, 0, 1, 1, 0, 0, v4, 0, v2);
  swift_storeEnumTagMultiPayload();
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_0(v2, v3, type metadata accessor for ScreenContent);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v7 = v0[86];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    id v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, v0[86]);
  }
  id v9 = *(void *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 24);
  if (v9 >= v8 >> 1) {
    id v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1, v7);
  }
  uint64_t v10 = v0[56];
  uint64_t v11 = v0[57];
  uint64_t v12 = v0[55];
  *(void *)(v7 + 16) = v9 + 1;
  outlined init with take of ScreenContent(v10, v7+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v9);
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_0(v11, type metadata accessor for ScreenContent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(unint64_t))v0[1];
  return v13(v7);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #2 in ContentLoaderWithShortcuts.load()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation.YieldResult);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  AsyncStream.Continuation.finish()();
}

void closure #1 in ContentLoaderWithShortcuts.getOnScreenContent()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<WFOnScreenContentNode?, Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  id v7 = *(void **)(a2 + 40);
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F853A0]), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in ContentLoaderWithShortcuts.getOnScreenContent();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed WFOnScreenContentNode?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_2;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_getOnScreenContentWithOptions_completionHandler_, v8, v11);
  _Block_release(v11);
}

uint64_t closure #1 in closure #1 in ContentLoaderWithShortcuts.getOnScreenContent()(void *a1, id a2)
{
  if (a2)
  {
    id v2 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<WFOnScreenContentNode?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v4 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<WFOnScreenContentNode?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed WFOnScreenContentNode?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t protocol witness for ContentLoaderProviding.load() in conformance ContentLoaderWithShortcuts(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return ContentLoaderWithShortcuts.load()(a1);
}

id @objc WFOnScreenContentNode.description.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = WFOnScreenContentNode.description.getter();
  uint64_t v4 = v3;

  uint64_t v5 = (void *)MEMORY[0x2533691D0](v2, v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t WFOnScreenContentNode.description.getter()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v52 = 0;
  unint64_t v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(108);
  v11._uint64_t countAndFlagsBits = 0x49746E65746E6F63;
  v11._object = (void *)0xED0000203A6D6574;
  String.append(_:)(v11);
  id v50 = objc_msgSend(v0, sel_contentItem);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WFContentItem?);
  v12._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0xEC000000203A6E65;
  v13._uint64_t countAndFlagsBits = 0x72646C696863202CLL;
  String.append(_:)(v13);
  id v14 = objc_msgSend(v0, sel_children);
  uint64_t v15 = type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for WFOnScreenContentNode);
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = MEMORY[0x253369370](v16, v15);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0x7520656C6966202CLL;
  v21._object = (void *)0xEC000000203A6C72;
  String.append(_:)(v21);
  id v22 = objc_msgSend(v1, sel_file);
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = objc_msgSend(v22, sel_fileURL);

    if (v24)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v8, 0, 1, v25);
    }
    else
    {
      uint64_t v27 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v8, 1, 1, v27);
    }
    outlined init with take of URL?((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    uint64_t v26 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v10, 1, 1, v26);
  }
  v28._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0x6E20656C6966202CLL;
  v29._object = (void *)0xED0000203A656D61;
  String.append(_:)(v29);
  id v30 = objc_msgSend(v1, sel_file);
  uint64_t v31 = v30;
  if (v30)
  {
    id v32 = objc_msgSend(v30, sel_filename);

    uint64_t v31 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v34 = 0;
  }
  id v50 = v31;
  uint64_t v51 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v35._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0xD000000000000018;
  v36._object = (void *)0x800000024FA49430;
  String.append(_:)(v36);
  id v37 = objc_msgSend(v1, sel_fileTypeIdentifier);
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;
  }
  else
  {
    uint64_t v39 = 0;
    uint64_t v41 = 0;
  }
  id v50 = (id)v39;
  uint64_t v51 = v41;
  v42._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._object = (void *)0x800000024FA49450;
  v43._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v43);
  id v44 = objc_msgSend(v1, sel_fileCreationDate);
  if (v44)
  {
    uint64_t v45 = v44;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v46 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v4, 0, 1, v46);
  }
  else
  {
    uint64_t v47 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v4, 1, 1, v47);
  }
  v48._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  return v52;
}

uint64_t destroy for ContentLoaderWithShortcuts(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);

  __swift_destroy_boxed_opaque_existential_0(a1 + 48);
  return __swift_destroy_boxed_opaque_existential_0(a1 + 88);
}

uint64_t initializeWithCopy for ContentLoaderWithShortcuts(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  long long v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  uint64_t v7 = v6;
  id v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  id v9 = v5;
  v8(a1 + 48, a2 + 48, v7);
  long long v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 88, a2 + 88);
  return a1;
}

uint64_t *assignWithCopy for ContentLoaderWithShortcuts(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  long long v4 = (void *)a2[5];
  uint64_t v5 = (void *)a1[5];
  a1[5] = (uint64_t)v4;
  id v6 = v4;

  __swift_assign_boxed_opaque_existential_1(a1 + 6, a2 + 6);
  __swift_assign_boxed_opaque_existential_1(a1 + 11, a2 + 11);
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for ContentLoaderWithShortcuts(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  long long v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  __swift_destroy_boxed_opaque_existential_0(a1 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  __swift_destroy_boxed_opaque_existential_0(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentLoaderWithShortcuts(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentLoaderWithShortcuts(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentLoaderWithShortcuts()
{
  return &type metadata for ContentLoaderWithShortcuts;
}

void partial apply for closure #1 in ContentLoaderWithShortcuts.getOnScreenContent()(uint64_t a1)
{
  closure #1 in ContentLoaderWithShortcuts.getOnScreenContent()(a1, *(void *)(v1 + 16));
}

void partial apply for closure #2 in ContentLoaderWithShortcuts.load()(uint64_t a1)
{
  closure #2 in ContentLoaderWithShortcuts.load()(a1, *(void *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type AsyncStream<[ScreenContent]> and conformance AsyncStream<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AsyncStream<[ScreenContent]> and conformance AsyncStream<A>;
  if (!lazy protocol witness table cache variable for type AsyncStream<[ScreenContent]> and conformance AsyncStream<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<[ScreenContent]> and conformance AsyncStream<A>);
  }
  return result;
}

uint64_t outlined init with copy of ContentLoaderWithShortcuts(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of ContentLoaderWithShortcuts(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of ScreenContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScreenContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s26GenerativeAssistantActions13ScreenContentOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s26GenerativeAssistantActions13ScreenContentOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t partial apply for closure #1 in ImageLoader.load(mediaItem:)(uint64_t a1)
{
  return closure #1 in ImageLoader.load(mediaItem:)(a1, *(void **)(v1 + 16));
}

uint64_t type metadata accessor for WFOnScreenContentNode(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_24FA01F10()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<WFOnScreenContentNode?, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ContentLoaderWithShortcuts.getOnScreenContent()(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<WFOnScreenContentNode?, Error>);
  return closure #1 in closure #1 in ContentLoaderWithShortcuts.getOnScreenContent()(a1, a2);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for ModelOrchestrator()
{
  return &type metadata for ModelOrchestrator;
}

uint64_t getEnumTagSinglePayload for ModelOrchestrator.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelOrchestrator.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24FA021ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelOrchestrator.Error()
{
  return &type metadata for ModelOrchestrator.Error;
}

uint64_t ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 608) = v8;
  *(void *)(v9 + 600) = v31;
  *(void *)(v9 + 592) = v30;
  *(void *)(v9 + 584) = v29;
  *(unsigned char *)(v9 + 1002) = v28;
  *(void *)(v9 + 576) = v27;
  *(_OWORD *)(v9 + 544) = v25;
  *(_OWORD *)(v9 + 560) = v26;
  *(_OWORD *)(v9 + 512) = v23;
  *(_OWORD *)(v9 + 528) = v24;
  *(_OWORD *)(v9 + 480) = v21;
  *(_OWORD *)(v9 + 496) = v22;
  *(unsigned char *)(v9 + 1001) = v20;
  *(void *)(v9 + 464) = a8;
  *(void *)(v9 + 472) = v19;
  *(unsigned char *)(v9 + 1000) = v18;
  *(void *)(v9 + 448) = a6;
  *(void *)(v9 + 456) = a7;
  *(void *)(v9 + 432) = a4;
  *(void *)(v9 + 440) = a5;
  *(void *)(v9 + 416) = a2;
  *(void *)(v9 + 424) = a3;
  *(void *)(v9 + 408) = a1;
  uint64_t v10 = type metadata accessor for GATError();
  *(void *)(v9 + 616) = v10;
  *(void *)(v9 + 624) = *(void *)(v10 - 8);
  *(void *)(v9 + 632) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeUsecases();
  *(void *)(v9 + 640) = v11;
  *(void *)(v9 + 648) = *(void *)(v11 - 8);
  *(void *)(v9 + 656) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GATAttachedMediaInfo?);
  *(void *)(v9 + 664) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  *(void *)(v9 + 672) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v9 + 680) = swift_task_alloc();
  *(void *)(v9 + 688) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for URL();
  *(void *)(v9 + 696) = v12;
  *(void *)(v9 + 704) = *(void *)(v12 - 8);
  *(void *)(v9 + 712) = swift_task_alloc();
  *(void *)(v9 + 720) = type metadata accessor for ModelResponse();
  *(void *)(v9 + 728) = swift_task_alloc();
  *(void *)(v9 + 736) = swift_task_alloc();
  *(void *)(v9 + 744) = swift_task_alloc();
  *(void *)(v9 + 752) = swift_task_alloc();
  *(void *)(v9 + 760) = swift_task_alloc();
  *(void *)(v9 + 768) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GenerativeAssistantUseCase();
  *(void *)(v9 + 776) = v13;
  *(void *)(v9 + 784) = *(void *)(v13 - 8);
  *(void *)(v9 + 792) = swift_task_alloc();
  *(unsigned char *)(v9 + 1003) = *v32;
  type metadata accessor for MainActor();
  *(void *)(v9 + 800) = static MainActor.shared.getter();
  uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v9 + 808) = v14;
  *(void *)(v9 + 816) = v15;
  return MEMORY[0x270FA2498](ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:), v14, v15);
}

uint64_t ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)()
{
  uint64_t v152 = v0;
  v151[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[67];
  uint64_t v2 = type metadata accessor for CallEmergencyServicesTool(0);
  int v3 = (void *)swift_allocObject();
  v0[103] = (uint64_t)v3;
  v3[2] = 0xD000000000000017;
  v3[3] = 0x800000024FA49680;
  v3[4] = 0xD00000000000008BLL;
  v3[5] = 0x800000024FA496A0;
  v3[7] = 0;
  v3[8] = 0;
  v3[6] = 0;
  v0[104] = OBJC_IVAR____TtC26GenerativeAssistantActions25CallEmergencyServicesTool___observationRegistrar;
  ObservationRegistrar.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Tooling>);
  uint64_t inited = swift_initStackObject();
  v0[105] = inited;
  *(_OWORD *)(inited + 16) = xmmword_24FA3E1D0;
  *(void *)(inited + 56) = v2;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool, (void (*)(uint64_t))type metadata accessor for CallEmergencyServicesTool);
  *(void *)(inited + 32) = v3;
  if (v1)
  {
    uint64_t v5 = v0[68];
    uint64_t v6 = v0[67];
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed @async (@guaranteed String) -> (@owned String, @error @owned Error))?(v6);
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.modelInteraction);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v149 = inited;
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      v151[0] = v11;
      *(_DWORD *)uint64_t v10 = 136315394;
      v0[49] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2080;
      v0[50] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v8, v9, "%s.%s allowing model follow-up", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v11, -1, -1);
      uint64_t v12 = v10;
      uint64_t inited = v149;
      MEMORY[0x25336A180](v12, -1, -1);
    }

    uint64_t v13 = type metadata accessor for TextInputTool(0);
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = 0xD000000000000012;
    v14[3] = 0x800000024FA498C0;
    v14[4] = 0xD000000000000052;
    v14[5] = 0x800000024FA498E0;
    swift_retain();
    ObservationRegistrar.init()();
    v14[6] = v6;
    v14[7] = v5;
    unint64_t v16 = *(void *)(inited + 16);
    unint64_t v15 = *(void *)(inited + 24);
    swift_retain();
    if (v16 >= v15 >> 1) {
      uint64_t inited = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, (void *)inited);
    }
    uint64_t v17 = v0[67];
    v0[19] = v13;
    v0[20] = lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type TextInputTool and conformance TextInputTool, (void (*)(uint64_t))type metadata accessor for TextInputTool);
    v0[16] = (uint64_t)v14;
    *(void *)(inited + 16) = v16 + 1;
    uint64_t v150 = inited;
    outlined init with take of ForegroundAppDetecting((long long *)v0 + 8, inited + 40 * v16 + 32);
    outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?(v17);
    swift_release();
  }
  else
  {
    uint64_t v18 = one-time initialization token for modelInteraction;
    swift_retain();
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v150 = inited;
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.modelInteraction);
    char v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v151[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315394;
      v0[46] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2080;
      v0[47] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v20, v21, "%s.%s no model follow-up", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v23, -1, -1);
      MEMORY[0x25336A180](v22, -1, -1);
    }
  }
  char v24 = *((unsigned char *)v0 + 1003);
  uint64_t v25 = v0[76];
  long long v26 = (void *)v0[74];
  uint64_t v27 = v0[73];
  uint64_t v28 = v0[55];
  BOOL v29 = *(_OWORD *)(v0 + 55) != 0;
  __swift_project_boxed_opaque_existential_1((void *)(v25 + 40), *(void *)(v25 + 64));
  LOBYTE(v151[0]) = v24;
  v30.value._uint64_t countAndFlagsBits = v27;
  v30.value._object = v26;
  Swift::String v31 = DefaultPromptFactory.createPrompt(appBundleID:interactionMode:)(v30, (GenerativeAssistantActions::GATInteractionMode_optional)v151);
  if (v32)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v44 = (uint64_t (*)(void))v0[1];
    return v44();
  }
  BOOL v140 = v29;
  uint64_t v139 = v28;
  char v33 = *((unsigned char *)v0 + 1003);
  uint64_t v34 = v0[99];
  uint64_t v35 = v0[98];
  uint64_t v141 = v0[97];
  uint64_t v36 = v0[75];
  id v37 = (void *)v0[74];
  uint64_t v38 = v0[73];
  int v144 = *((unsigned __int8 *)v0 + 1002);
  unint64_t v142 = v0[66];
  uint64_t v143 = v0[65];
  __swift_project_boxed_opaque_existential_1((void *)(v25 + 40), *(void *)(v25 + 64));
  LOBYTE(v151[0]) = v33;
  v39.value._uint64_t countAndFlagsBits = v38;
  v39.value._object = v37;
  Swift::String_optional v40 = DefaultPromptFactory.getTemplateID(appBundleID:interactionMode:)(v39, (GenerativeAssistantActions::GATInteractionMode_optional)v151);
  uint64_t v41 = v34;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v34, v36, v141);
  uint64_t v42 = type metadata accessor for DefaultModelSession();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String v43 = DefaultModelSession.init(systemPrompt:tools:useCaseID:enableBrowserTool:sessionID:templateID:)(v31._countAndFlagsBits, (uint64_t)v31._object, v150, v41, v144, v143, v142, v40.value._countAndFlagsBits, (uint64_t)v40.value._object);
  uint64_t v46 = v0 + 11;
  uint64_t v47 = v0 + 38;
  v0[14] = v42;
  v0[15] = (uint64_t)&protocol witness table for DefaultModelSession;
  v0[11] = (uint64_t)v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v0 + 11, v0[14]);
  uint64_t v48 = *(void *)(GenerativeExperiencesSession.registeredDocuments()() + 16);
  swift_bridgeObjectRelease();
  uint64_t v49 = v0;
  if (v48)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.modelInteraction);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      v151[0] = v54;
      *(_DWORD *)uint64_t v53 = 136315394;
      v0[36] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v53 + 12) = 2080;
      v0[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v151);
      uint64_t v49 = v0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v51, v52, "%s.%s Session has registered documents, skipping registration", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v54, -1, -1);
      MEMORY[0x25336A180](v53, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1(v0 + 11, v49[14]);
    uint64_t v55 = (void *)swift_task_alloc();
    v49[123] = (uint64_t)v55;
    *uint64_t v55 = v49;
    v55[1] = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
    uint64_t v56 = v49[91];
    uint64_t v57 = v49[75];
    uint64_t v58 = v49[72];
    uint64_t v59 = v49[71];
    uint64_t v60 = v49[52];
    uint64_t v61 = v49[53];
    return DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)(v56, v60, v61, v57, v59, v58);
  }
  uint64_t v62 = v0 + 44;
  uint64_t v63 = v0[88];
  uint64_t v64 = v49[87];
  uint64_t v65 = v49[86];
  outlined init with copy of URL?(v49[54], v65);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v65, 1, v64) != 1)
  {
    uint64_t v69 = v49[89];
    uint64_t v70 = v49[88];
    uint64_t v71 = v49[87];
    uint64_t v72 = v49[86];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v69, v72, v71);
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.modelInteraction);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      v151[0] = v77;
      *(_DWORD *)uint64_t v76 = 136315394;
      *uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v76 + 12) = 2080;
      v49[45] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v74, v75, "%s.%s Uploading file.", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v77, -1, -1);
      MEMORY[0x25336A180](v76, -1, -1);
    }

    v49[106] = type metadata accessor for MetricsUtils();
    static MetricsUtils.shared.getter();
    static Signpost.registerDocumentProcess.getter();
    dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
    swift_release();
    v49[107] = type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRegisterMediaStarted()();
    swift_release();
    uint64_t v78 = v49[14];
    uint64_t v79 = v49[15];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v46, v78);
    uint64_t v146 = *(void *)(v79 + 16) + **(int **)(v79 + 16);
    uint64_t v80 = (void *)swift_task_alloc();
    v49[108] = (uint64_t)v80;
    *uint64_t v80 = v49;
    v80[1] = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
    uint64_t v81 = v49[70];
    uint64_t v155 = v78;
    uint64_t v156 = v79;
    uint64_t v154 = v81;
    __asm { BRAA            X9, X16 }
  }
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v49[86], &demangling cache variable for type metadata for URL?);
  if (v140)
  {
    uint64_t v68 = v49[57];
    if (ModelOrchestrator.shouldUploadImage(imageSizeInMB:imageSize:)((Swift::Float_optional *)(v49[59] | ((HIDWORD(v49[59]) & 1) << 32)), *(CGSize_optional *)&v66))
    {
      unint64_t v145 = v49 + 42;
      swift_bridgeObjectRelease();
      if (v139 && *(void *)(v49[55] + 56)) {
        swift_bridgeObjectRetain();
      }
      else {
        swift_bridgeObjectRelease();
      }
      uint64_t v99 = v49[83];
      static GATSchemaGATMediaType.from(fileExtension:)();
      swift_bridgeObjectRelease();
      uint64_t v100 = v49;
      v49[112] = type metadata accessor for SELFUtils();
      static SELFUtils.shared.getter();
      LOBYTE(v151[0]) = 0;
      GATAttachedMediaInfo.init(originalMediaType:originalMediaSizeInKBs:mediaQAUseCase:gatUsecase:processedMediaType:processedMediaSizeInKBs:)();
      uint64_t v101 = type metadata accessor for GATAttachedMediaInfo();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v99, 0, 1, v101);
      dispatch thunk of SELFUtils.gatMediaInfo.setter();
      swift_release();
      if (one-time initialization token for selfSchemaLogger != -1) {
        swift_once();
      }
      uint64_t v102 = type metadata accessor for Logger();
      __swift_project_value_buffer(v102, (uint64_t)static Logger.selfSchemaLogger);
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v103, v104))
      {
        char v105 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v105 = 0;
        _os_log_impl(&dword_24F9A2000, v103, v104, "Successfully updated GAT MediaInfoContext.", v105, 2u);
        MEMORY[0x25336A180](v105, -1, -1);
      }

      if (one-time initialization token for modelInteraction != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v102, (uint64_t)static Logger.modelInteraction);
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        v151[0] = v109;
        *(_DWORD *)uint64_t v108 = 136315394;
        *unint64_t v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v151);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v108 + 12) = 2080;
        v100[43] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v151);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v106, v107, "%s.%s Image will be uploaded.", (uint8_t *)v108, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v109, -1, -1);
        MEMORY[0x25336A180](v108, -1, -1);
      }

      uint64_t v110 = v100[82];
      uint64_t v111 = v100[81];
      uint64_t v112 = v100[80];
      uint64_t v113 = v100[56];
      v100[113] = type metadata accessor for MetricsUtils();
      static MetricsUtils.shared.getter();
      (*(void (**)(uint64_t, void, uint64_t))(v111 + 104))(v110, *MEMORY[0x263F406E0], v112);
      GenerativeUsecases.staticString.getter();
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v110, v112);
      dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
      swift_release();
      static MetricsUtils.shared.getter();
      static Signpost.registerImageProcess.getter();
      dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
      swift_release();
      static SELFUtils.shared.getter();
      dispatch thunk of SELFUtils.recordRegisterMediaStarted()();
      swift_release();
      if (v113) {
        IntelligenceFile.fileURL.getter();
      }
      else {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v100[88] + 56))(v100[85], 1, 1, v100[87]);
      }
      uint64_t v120 = v100[14];
      uint64_t v121 = v100[15];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v46, v120);
      uint64_t v148 = *(void *)(v121 + 24) + **(int **)(v121 + 24);
      uint64_t v122 = (void *)swift_task_alloc();
      v100[114] = (uint64_t)v122;
      *uint64_t v122 = v100;
      v122[1] = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
      uint64_t v123 = v100[70];
      uint64_t v124 = v100[69];
      uint64_t v156 = v120;
      uint64_t v157 = v121;
      uint64_t v154 = v124;
      uint64_t v155 = v123;
      __asm { BRAA            X9, X16 }
    }
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v94 = type metadata accessor for Logger();
    __swift_project_value_buffer(v94, (uint64_t)static Logger.modelInteraction);
    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.debug.getter();
    uint64_t v147 = v94;
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = swift_slowAlloc();
      uint64_t v98 = swift_slowAlloc();
      v151[0] = v98;
      *(_DWORD *)uint64_t v97 = 136315394;
      v49[40] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v97 + 12) = 2080;
      v49[41] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v95, v96, "%s.%s Image will be sent inline.", (uint8_t *)v97, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v98, -1, -1);
      MEMORY[0x25336A180](v97, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v114 = v49[82];
    uint64_t v115 = v49[81];
    uint64_t v116 = v49[80];
    uint64_t v117 = v49[56];
    type metadata accessor for MetricsUtils();
    static MetricsUtils.shared.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v115 + 104))(v114, *MEMORY[0x263F406D8], v116);
    GenerativeUsecases.staticString.getter();
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v114, v116);
    dispatch thunk of MetricsUtils.emitSignpostEvent(_:)();
    swift_release();
    if (!v117) {
      goto LABEL_72;
    }
    uint64_t v0 = v49;
    unint64_t v118 = (unint64_t)IntelligenceFile.getImage()();
    if (v119)
    {
      swift_release();
LABEL_82:
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v46);
      goto LABEL_17;
    }
    id v125 = (id)v118;
    if (!v118)
    {
LABEL_72:
      if (!v139)
      {
        uint64_t v0 = v49;
        swift_release();
        lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
        swift_allocError();
        *unint64_t v138 = 1;
        swift_willThrow();
        goto LABEL_82;
      }
      id v125 = *(id *)(v49[55] + 16);
    }
    v49[118] = (uint64_t)v125;
    uint64_t v126 = v49[83];
    UIImage.getFileExtension()();
    static GATSchemaGATMediaType.from(fileExtension:)();
    swift_bridgeObjectRelease();
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    LOBYTE(v151[0]) = 0;
    GATAttachedMediaInfo.init(originalMediaType:originalMediaSizeInKBs:mediaQAUseCase:gatUsecase:processedMediaType:processedMediaSizeInKBs:)();
    uint64_t v127 = type metadata accessor for GATAttachedMediaInfo();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v127 - 8) + 56))(v126, 0, 1, v127);
    dispatch thunk of SELFUtils.gatMediaInfo.setter();
    swift_release();
    if (one-time initialization token for selfSchemaLogger != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v147, (uint64_t)static Logger.selfSchemaLogger);
    uint64_t v128 = Logger.logObject.getter();
    os_log_type_t v129 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v128, v129))
    {
      uint64_t v130 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v130 = 0;
      _os_log_impl(&dword_24F9A2000, v128, v129, "Successfully updated GAT MediaInfoContext.", v130, 2u);
      MEMORY[0x25336A180](v130, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1(v46, v49[14]);
    uint64_t v131 = (void *)swift_task_alloc();
    v49[119] = (uint64_t)v131;
    *uint64_t v131 = v49;
    v131[1] = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
    uint64_t v132 = v49[93];
    uint64_t v133 = v49[75];
    uint64_t v134 = v49[72];
    uint64_t v135 = v49[71];
    uint64_t v136 = v49[52];
    uint64_t v137 = v49[53];
    return DefaultModelSession.registerImageInLineAndGenerateResponse(userQuery:image:useCaseID:keepAliveCallback:)(v132, v136, v137, (uint64_t)v125, v133, v135, v134);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    __swift_project_value_buffer(v82, (uint64_t)static Logger.modelInteraction);
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      v151[0] = v86;
      *(_DWORD *)uint64_t v85 = 136315394;
      *uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v85 + 12) = 2080;
      v49[39] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v83, v84, "%s.%s Generating for text creation.", (uint8_t *)v85, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v86, -1, -1);
      MEMORY[0x25336A180](v85, -1, -1);
    }

    uint64_t v87 = (void *)swift_task_alloc();
    v49[121] = (uint64_t)v87;
    *uint64_t v87 = v49;
    v87[1] = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
    uint64_t v88 = v49[92];
    uint64_t v89 = v49[75];
    uint64_t v90 = v49[72];
    uint64_t v91 = v49[71];
    uint64_t v92 = v49[52];
    uint64_t v93 = v49[53];
    return ModelOrchestrator.generateForTextRequest(userQuery:useCaseID:session:responseGenerationKeepAliveCallback:)(v88, v92, v93, v89, (uint64_t)v46, v91, v90);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 872) = v0;
  swift_task_dealloc();
  int v3 = *(void *)(v2 + 816);
  unsigned int v4 = *(void *)(v2 + 808);
  if (v0) {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  else {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[84];
  static MetricsUtils.shared.getter();
  static Signpost.registerDocumentProcess.getter();
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v1, &demangling cache variable for type metadata for OSSignpostID?);
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRegisterMediaEnded()();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v0 + 11, v0[14]);
  int v3 = (void *)swift_task_alloc();
  v0[110] = v3;
  *int v3 = v0;
  v3[1] = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  unsigned int v4 = v0[95];
  uint64_t v5 = v0[75];
  uint64_t v6 = v0[72];
  uint64_t v7 = v0[71];
  uint64_t v8 = v0[52];
  os_log_type_t v9 = v0[53];
  return DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)(v4, v8, v9, v5, v7, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 888) = v0;
  swift_task_dealloc();
  int v3 = *(void *)(v2 + 816);
  unsigned int v4 = *(void *)(v2 + 808);
  if (v0) {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  else {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32[2];
  void *v33;
  uint64_t v34;

  char v33 = v0;
  v32[1] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[89];
  uint64_t v2 = v0[88];
  int v3 = v0[87];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  unsigned int v4 = v0[103];
  outlined init with take of ModelResponse(v0[95], v0[96]);
  swift_getKeyPath();
  v0[48] = v4;
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool, (void (*)(uint64_t))type metadata accessor for CallEmergencyServicesTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v4 + 64))
  {
    uint64_t v5 = v0[96];
    uint64_t v6 = (unint64_t *)v0[79];
    uint64_t v7 = v0[78];
    uint64_t v8 = v0[77];
    *uint64_t v6 = EmergencyServicesInvocation.EmergencyService.rawValue.getter(*(unsigned char *)(v0[103] + 48));
    v6[1] = v9;
    (*(void (**)(unint64_t *, void, uint64_t))(v7 + 104))(v6, *MEMORY[0x263F407A0], v8);
    GATError.logError()();
    (*(void (**)(unint64_t *, uint64_t))(v7 + 8))(v6, v8);
    swift_willThrow();
    swift_release();
    outlined destroy of ModelResponse(v5);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.modelInteraction);
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      unint64_t v15 = swift_slowAlloc();
      v32[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315650;
      v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2080;
      swift_beginAccess();
      unint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v17 = MEMORY[0x253369370](v16, &type metadata for GeneratedResponse.RichContentEntity);
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      v0[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v12, v13, "%s.%s Received response %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v15, -1, -1);
      MEMORY[0x25336A180](v14, -1, -1);
    }

    char v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v32[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315650;
      v0[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2080;
      v0[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 22) = 2080;
      swift_beginAccess();
      char v24 = swift_bridgeObjectRetain();
      uint64_t v25 = MEMORY[0x253369370](v24, &type metadata for Attribution);
      uint64_t v27 = v26;
      swift_bridgeObjectRelease();
      v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v20, v21, "%s.%s Received attribution %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v23, -1, -1);
      MEMORY[0x25336A180](v22, -1, -1);
    }

    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v28 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((v28 & 0x8000000000000000) != 0 || HIDWORD(v28)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    BOOL v29 = v0[96];
    LOBYTE(v32[0]) = 0;
    Swift::String_optional v30 = v0[51];
    dispatch thunk of SELFUtils.generativeResultCharactersCount.setter();
    swift_release();
    swift_release();
    outlined init with copy of ModelResponse(v29, v30);
    outlined destroy of ModelResponse(v29);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
  }
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[89];
  uint64_t v2 = v0[88];
  int v3 = v0[87];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  (*v1)[115] = v0;
  swift_task_dealloc();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v2[85], &demangling cache variable for type metadata for URL?);
  int v3 = v2[102];
  unsigned int v4 = v2[101];
  if (v0) {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  else {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[84];
  static MetricsUtils.shared.getter();
  static Signpost.registerImageProcess.getter();
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v1, &demangling cache variable for type metadata for OSSignpostID?);
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.recordRegisterMediaEnded()();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v0 + 11, v0[14]);
  int v3 = (void *)swift_task_alloc();
  v0[116] = v3;
  *int v3 = v0;
  v3[1] = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  unsigned int v4 = v0[94];
  uint64_t v5 = v0[75];
  uint64_t v6 = v0[72];
  uint64_t v7 = v0[71];
  uint64_t v8 = v0[52];
  os_log_type_t v9 = v0[53];
  return DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)(v4, v8, v9, v5, v7, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 936) = v0;
  swift_task_dealloc();
  int v3 = *(void *)(v2 + 816);
  unsigned int v4 = *(void *)(v2 + 808);
  if (v0) {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  else {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[2];
  void *v30;
  uint64_t v31;

  Swift::String_optional v30 = v0;
  v29[1] = *MEMORY[0x263EF8340];
  swift_release();
  uint64_t v1 = v0[103];
  outlined init with take of ModelResponse(v0[94], v0[96]);
  swift_getKeyPath();
  v0[48] = v1;
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool, (void (*)(uint64_t))type metadata accessor for CallEmergencyServicesTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v1 + 64))
  {
    uint64_t v2 = v0[96];
    int v3 = (unint64_t *)v0[79];
    unsigned int v4 = v0[78];
    uint64_t v5 = v0[77];
    *int v3 = EmergencyServicesInvocation.EmergencyService.rawValue.getter(*(unsigned char *)(v0[103] + 48));
    v3[1] = v6;
    (*(void (**)(unint64_t *, void, uint64_t))(v4 + 104))(v3, *MEMORY[0x263F407A0], v5);
    GATError.logError()();
    (*(void (**)(unint64_t *, uint64_t))(v4 + 8))(v3, v5);
    swift_willThrow();
    swift_release();
    outlined destroy of ModelResponse(v2);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.modelInteraction);
    os_log_type_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v29[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315650;
      v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2080;
      v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2080;
      swift_beginAccess();
      uint64_t v13 = swift_bridgeObjectRetain();
      uint64_t v14 = MEMORY[0x253369370](v13, &type metadata for GeneratedResponse.RichContentEntity);
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      v0[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v9, v10, "%s.%s Received response %s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v12, -1, -1);
      MEMORY[0x25336A180](v11, -1, -1);
    }

    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      char v20 = swift_slowAlloc();
      v29[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315650;
      v0[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      v0[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 22) = 2080;
      swift_beginAccess();
      os_log_type_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = MEMORY[0x253369370](v21, &type metadata for Attribution);
      char v24 = v23;
      swift_bridgeObjectRelease();
      v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v17, v18, "%s.%s Received attribution %s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v20, -1, -1);
      MEMORY[0x25336A180](v19, -1, -1);
    }

    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v25 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((v25 & 0x8000000000000000) != 0 || HIDWORD(v25)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    long long v26 = v0[96];
    LOBYTE(v29[0]) = 0;
    uint64_t v27 = v0[51];
    dispatch thunk of SELFUtils.generativeResultCharactersCount.setter();
    swift_release();
    swift_release();
    outlined init with copy of ModelResponse(v26, v27);
    outlined destroy of ModelResponse(v26);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
  }
  return v7();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 960) = v0;
  swift_task_dealloc();
  int v3 = *(void *)(v2 + 816);
  unsigned int v4 = *(void *)(v2 + 808);
  if (v0) {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  else {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  uint64_t v31;

  Swift::String_optional v30 = v0;
  v29[1] = *MEMORY[0x263EF8340];

  swift_release();
  uint64_t v1 = *(void *)(v0 + 824);
  outlined init with take of ModelResponse(*(void *)(v0 + 744), *(void *)(v0 + 768));
  swift_getKeyPath();
  *(void *)(v0 + 384) = v1;
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool, (void (*)(uint64_t))type metadata accessor for CallEmergencyServicesTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v1 + 64))
  {
    uint64_t v2 = *(void *)(v0 + 768);
    int v3 = *(unint64_t **)(v0 + 632);
    unsigned int v4 = *(void *)(v0 + 624);
    uint64_t v5 = *(void *)(v0 + 616);
    *int v3 = EmergencyServicesInvocation.EmergencyService.rawValue.getter(*(unsigned char *)(*(void *)(v0 + 824) + 48));
    v3[1] = v6;
    (*(void (**)(unint64_t *, void, uint64_t))(v4 + 104))(v3, *MEMORY[0x263F407A0], v5);
    GATError.logError()();
    (*(void (**)(unint64_t *, uint64_t))(v4 + 8))(v3, v5);
    swift_willThrow();
    swift_release();
    outlined destroy of ModelResponse(v2);
    __swift_destroy_boxed_opaque_existential_0(v0 + 88);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.modelInteraction);
    os_log_type_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v29[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315650;
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2080;
      *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2080;
      swift_beginAccess();
      uint64_t v13 = swift_bridgeObjectRetain();
      uint64_t v14 = MEMORY[0x253369370](v13, &type metadata for GeneratedResponse.RichContentEntity);
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v9, v10, "%s.%s Received response %s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v12, -1, -1);
      MEMORY[0x25336A180](v11, -1, -1);
    }

    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      char v20 = swift_slowAlloc();
      v29[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315650;
      *(void *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 22) = 2080;
      swift_beginAccess();
      os_log_type_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = MEMORY[0x253369370](v21, &type metadata for Attribution);
      char v24 = v23;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v17, v18, "%s.%s Received attribution %s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v20, -1, -1);
      MEMORY[0x25336A180](v19, -1, -1);
    }

    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v25 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((v25 & 0x8000000000000000) != 0 || HIDWORD(v25)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    long long v26 = *(void *)(v0 + 768);
    LOBYTE(v29[0]) = 0;
    uint64_t v27 = *(void *)(v0 + 408);
    dispatch thunk of SELFUtils.generativeResultCharactersCount.setter();
    swift_release();
    swift_release();
    outlined init with copy of ModelResponse(v26, v27);
    outlined destroy of ModelResponse(v26);
    __swift_destroy_boxed_opaque_existential_0(v0 + 88);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v7();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 944);
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 976) = v0;
  swift_task_dealloc();
  int v3 = *(void *)(v2 + 816);
  unsigned int v4 = *(void *)(v2 + 808);
  if (v0) {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  else {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[2];
  void *v30;
  uint64_t v31;

  Swift::String_optional v30 = v0;
  v29[1] = *MEMORY[0x263EF8340];
  swift_release();
  uint64_t v1 = v0[103];
  outlined init with take of ModelResponse(v0[92], v0[96]);
  swift_getKeyPath();
  v0[48] = v1;
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool, (void (*)(uint64_t))type metadata accessor for CallEmergencyServicesTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v1 + 64))
  {
    uint64_t v2 = v0[96];
    int v3 = (unint64_t *)v0[79];
    unsigned int v4 = v0[78];
    uint64_t v5 = v0[77];
    *int v3 = EmergencyServicesInvocation.EmergencyService.rawValue.getter(*(unsigned char *)(v0[103] + 48));
    v3[1] = v6;
    (*(void (**)(unint64_t *, void, uint64_t))(v4 + 104))(v3, *MEMORY[0x263F407A0], v5);
    GATError.logError()();
    (*(void (**)(unint64_t *, uint64_t))(v4 + 8))(v3, v5);
    swift_willThrow();
    swift_release();
    outlined destroy of ModelResponse(v2);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.modelInteraction);
    os_log_type_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v29[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315650;
      v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2080;
      v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2080;
      swift_beginAccess();
      uint64_t v13 = swift_bridgeObjectRetain();
      uint64_t v14 = MEMORY[0x253369370](v13, &type metadata for GeneratedResponse.RichContentEntity);
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      v0[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v9, v10, "%s.%s Received response %s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v12, -1, -1);
      MEMORY[0x25336A180](v11, -1, -1);
    }

    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      char v20 = swift_slowAlloc();
      v29[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315650;
      v0[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      v0[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 22) = 2080;
      swift_beginAccess();
      os_log_type_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = MEMORY[0x253369370](v21, &type metadata for Attribution);
      char v24 = v23;
      swift_bridgeObjectRelease();
      v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v17, v18, "%s.%s Received attribution %s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v20, -1, -1);
      MEMORY[0x25336A180](v19, -1, -1);
    }

    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v25 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((v25 & 0x8000000000000000) != 0 || HIDWORD(v25)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    long long v26 = v0[96];
    LOBYTE(v29[0]) = 0;
    uint64_t v27 = v0[51];
    dispatch thunk of SELFUtils.generativeResultCharactersCount.setter();
    swift_release();
    swift_release();
    outlined init with copy of ModelResponse(v26, v27);
    outlined destroy of ModelResponse(v26);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
  }
  return v7();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 992) = v0;
  swift_task_dealloc();
  int v3 = *(void *)(v2 + 816);
  unsigned int v4 = *(void *)(v2 + 808);
  if (v0) {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  else {
    uint64_t v5 = ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[2];
  void *v30;
  uint64_t v31;

  Swift::String_optional v30 = v0;
  v29[1] = *MEMORY[0x263EF8340];
  swift_release();
  uint64_t v1 = v0[103];
  outlined init with take of ModelResponse(v0[91], v0[96]);
  swift_getKeyPath();
  v0[48] = v1;
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool, (void (*)(uint64_t))type metadata accessor for CallEmergencyServicesTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(void *)(v1 + 64))
  {
    uint64_t v2 = v0[96];
    int v3 = (unint64_t *)v0[79];
    unsigned int v4 = v0[78];
    uint64_t v5 = v0[77];
    *int v3 = EmergencyServicesInvocation.EmergencyService.rawValue.getter(*(unsigned char *)(v0[103] + 48));
    v3[1] = v6;
    (*(void (**)(unint64_t *, void, uint64_t))(v4 + 104))(v3, *MEMORY[0x263F407A0], v5);
    GATError.logError()();
    (*(void (**)(unint64_t *, uint64_t))(v4 + 8))(v3, v5);
    swift_willThrow();
    swift_release();
    outlined destroy of ModelResponse(v2);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.modelInteraction);
    os_log_type_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v29[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315650;
      v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2080;
      v0[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2080;
      swift_beginAccess();
      uint64_t v13 = swift_bridgeObjectRetain();
      uint64_t v14 = MEMORY[0x253369370](v13, &type metadata for GeneratedResponse.RichContentEntity);
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      v0[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v9, v10, "%s.%s Received response %s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v12, -1, -1);
      MEMORY[0x25336A180](v11, -1, -1);
    }

    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      char v20 = swift_slowAlloc();
      v29[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315650;
      v0[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      v0[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000010DLL, 0x800000024FA497B0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 22) = 2080;
      swift_beginAccess();
      os_log_type_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = MEMORY[0x253369370](v21, &type metadata for Attribution);
      char v24 = v23;
      swift_bridgeObjectRelease();
      v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v17, v18, "%s.%s Received attribution %s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v20, -1, -1);
      MEMORY[0x25336A180](v19, -1, -1);
    }

    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v25 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((v25 & 0x8000000000000000) != 0 || HIDWORD(v25)) {
      return _assertionFailure(_:_:file:line:flags:)();
    }
    long long v26 = v0[96];
    LOBYTE(v29[0]) = 0;
    uint64_t v27 = v0[51];
    dispatch thunk of SELFUtils.generativeResultCharactersCount.setter();
    swift_release();
    swift_release();
    outlined init with copy of ModelResponse(v26, v27);
    outlined destroy of ModelResponse(v26);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
  }
  return v7();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[89];
  uint64_t v2 = v0[88];
  int v3 = v0[87];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 11));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t ModelOrchestrator.Error.errorUserInfo.getter(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24FA3E1D0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000024FA41EF0;
  unint64_t v3 = 0xD00000000000002BLL;
  unint64_t v4 = 0x800000024FA49650;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xD000000000000018;
      uint64_t v5 = "Missing image for upload";
      goto LABEL_9;
    case 2:
      uint64_t v6 = "Unable to connect. Try again.";
      goto LABEL_5;
    case 3:
      uint64_t v6 = "Request timed out. Try again.";
LABEL_5:
      unint64_t v4 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD00000000000001DLL;
      break;
    case 4:
      unint64_t v3 = 0xD000000000000025;
      uint64_t v5 = "Service unavailable. Try again later.";
      goto LABEL_9;
    case 5:
      unint64_t v3 = 0xD00000000000002FLL;
      uint64_t v5 = "Unable to create content from that description.";
      goto LABEL_9;
    case 6:
      unint64_t v3 = 0xD000000000000037;
      uint64_t v5 = "Unable to create content at this time. Try again later.";
LABEL_9:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v4;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance ModelOrchestrator.Error()
{
  uint64_t v0 = static ModelOrchestrator.Error.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance ModelOrchestrator.Error()
{
  return *v0;
}

unint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance ModelOrchestrator.Error()
{
  return ModelOrchestrator.Error.errorUserInfo.getter(*v0);
}

uint64_t protocol witness for Error._domain.getter in conformance ModelOrchestrator.Error(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance ModelOrchestrator.Error(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
  return MEMORY[0x270EF2668](a1, v2);
}

Swift::Bool __swiftcall ModelOrchestrator.shouldUploadImage(imageSizeInMB:imageSize:)(Swift::Float_optional *imageSizeInMB, CGSize_optional imageSize)
{
  if ((unint64_t)imageSizeInMB & 0x100000000) != 0 || (v3)
  {
    if (one-time initialization token for modelInteraction != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.modelInteraction);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v6, v16)) {
      goto LABEL_22;
    }
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA49940, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v19 = "%s.%s Missing file size or image size, defaulting to upload image.";
    goto LABEL_21;
  }
  double v4 = v2;
  double v5 = *(double *)&imageSize.is_nil;
  LODWORD(v6) = imageSizeInMB;
  if (one-time initialization token for _enableImageInline != -1) {
    swift_once();
  }
  if (byte_269A45828)
  {
    long long v7 = xmmword_269A45810;
    id v8 = (id)static Overrides._enableImageInline;
    swift_bridgeObjectRetain();
    swift_retain();
    (*((void (**)(uint64_t *__return_ptr, id))&v7 + 1))(&v31, v8);
    swift_release();
    swift_bridgeObjectRelease();

    if (v31 != 2)
    {
      LOBYTE(v6) = (v31 & 1) == 0;
      if (one-time initialization token for modelInteraction == -1)
      {
LABEL_40:
        uint64_t v23 = type metadata accessor for Logger();
        __swift_project_value_buffer(v23, (uint64_t)static Logger.modelInteraction);
        char v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc();
          uint64_t v27 = swift_slowAlloc();
          uint64_t v31 = v27;
          *(_DWORD *)uint64_t v26 = 136315650;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, &v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v26 + 12) = 2080;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA49940, &v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v26 + 22) = 1024;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v24, v25, "%s.%s Override enableImageInline set to %{BOOL}d.", (uint8_t *)v26, 0x1Cu);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v27, -1, -1);
          MEMORY[0x25336A180](v26, -1, -1);
        }

        return (char)v6;
      }
LABEL_57:
      swift_once();
      goto LABEL_40;
    }
  }
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.modelInteraction);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v31 = v13;
    *(_DWORD *)uint64_t v12 = 136316162;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA49940, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2048;
    uint64_t v14 = *(void *)&v5 & 0x7FF0000000000000;
    if ((*(void *)&v5 & 0x7FF0000000000000) == 0x7FF0000000000000)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v5 <= -9.22337204e18)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v5 >= 9.22337204e18)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 32) = 2048;
    if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v4 <= -9.22337204e18)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v4 >= 9.22337204e18)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 42) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v10, v11, "%s.%s Confirming image size (width=%ld height=%ld) is smaller than maxPixelsLong=%ld...", (uint8_t *)v12, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v13, -1, -1);
    MEMORY[0x25336A180](v12, -1, -1);
  }
  else
  {

    uint64_t v14 = *(void *)&v5 & 0x7FF0000000000000;
  }
  if (v5 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v14 == 0x7FF0000000000000 || (*(void *)&v4 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    goto LABEL_48;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v21 = (uint64_t)v5;
  if ((uint64_t)v4 > (uint64_t)v5) {
    uint64_t v21 = (uint64_t)v4;
  }
  if (v21 > 2048)
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v6, v16)) {
      goto LABEL_22;
    }
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA49940, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v19 = "%s.%s Image size is bigger than ImageUtilsDefault.maxPixelsLong after loaded. This is unexpected, defaulting to upload image.";
LABEL_21:
    _os_log_impl(&dword_24F9A2000, v6, v16, v19, (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v18, -1, -1);
    MEMORY[0x25336A180](v17, -1, -1);
LABEL_22:

    LOBYTE(v6) = 1;
    return (char)v6;
  }
  float v22 = *(float *)&v6;
  uint64_t v6 = Logger.logObject.getter();
  if (v22 > 1.0)
  {
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v6, v16)) {
      goto LABEL_22;
    }
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA49940, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v19 = "%s.%s Image is still too large even as JPEG. Uploading image.";
    goto LABEL_21;
  }
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = v30;
    *(_DWORD *)uint64_t v29 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA49940, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v6, v28, "%s.%s Image is within inline size, using sending image inline rather than upload.", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v30, -1, -1);
    MEMORY[0x25336A180](v29, -1, -1);
  }

  LOBYTE(v6) = 0;
  return (char)v6;
}

uint64_t ModelOrchestrator.generateForTextRequest(userQuery:useCaseID:session:responseGenerationKeepAliveCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[31] = a6;
  v7[32] = a7;
  v7[29] = a4;
  v7[30] = a5;
  v7[27] = a2;
  v7[28] = a3;
  v7[26] = a1;
  uint64_t v8 = type metadata accessor for GenerativeError.PromptError.ErrorType();
  v7[33] = v8;
  v7[34] = *(void *)(v8 - 8);
  v7[35] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GenerativeError.PromptError();
  v7[36] = v9;
  v7[37] = *(void *)(v9 - 8);
  v7[38] = swift_task_alloc();
  v7[39] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeError.NetworkingError();
  v7[40] = v10;
  v7[41] = *(void *)(v10 - 8);
  v7[42] = swift_task_alloc();
  v7[43] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v7[44] = v11;
  v7[45] = *(void *)(v11 - 8);
  v7[46] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for GenerativeError.RuntimeError();
  v7[47] = v12;
  v7[48] = *(void *)(v12 - 8);
  v7[49] = swift_task_alloc();
  v7[50] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v7[51] = v13;
  v7[52] = *(void *)(v13 - 8);
  v7[53] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for GenerativeError.AvailabilityError();
  v7[54] = v14;
  v7[55] = *(void *)(v14 - 8);
  v7[56] = swift_task_alloc();
  v7[57] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for GenerativeError.ErrorType();
  v7[58] = v15;
  v7[59] = *(void *)(v15 - 8);
  v7[60] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for GenerativeError();
  v7[61] = v16;
  v7[62] = *(void *)(v16 - 8);
  v7[63] = swift_task_alloc();
  v7[64] = swift_task_alloc();
  v7[65] = swift_task_alloc();
  v7[66] = swift_task_alloc();
  type metadata accessor for MainActor();
  v7[67] = static MainActor.shared.getter();
  uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[68] = v18;
  v7[69] = v17;
  return MEMORY[0x270FA2498](ModelOrchestrator.generateForTextRequest(userQuery:useCaseID:session:responseGenerationKeepAliveCallback:), v18, v17);
}

uint64_t ModelOrchestrator.generateForTextRequest(userQuery:useCaseID:session:responseGenerationKeepAliveCallback:)()
{
  uint64_t v15 = v0;
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 560) = __swift_project_value_buffer(v1, (uint64_t)static Logger.modelInteraction);
  double v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v14 = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000058, 0x800000024FA49970, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v2, v3, "%s.%s Generating for text creation.", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v5, -1, -1);
    MEMORY[0x25336A180](v4, -1, -1);
  }

  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 240), *(void *)(*(void *)(v0 + 240) + 24));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 568) = v6;
  *uint64_t v6 = v0;
  v6[1] = ModelOrchestrator.generateForTextRequest(userQuery:useCaseID:session:responseGenerationKeepAliveCallback:);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 208);
  uint64_t v12 = *(void *)(v0 + 216);
  return DefaultModelSession.generate(userQuery:useCaseID:keepAliveCallback:)(v11, v12, v9, v10, v7, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  double v2 = *v1;
  *(void *)(*v1 + 576) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 552);
  uint64_t v4 = *(void *)(v2 + 544);
  if (v0) {
    uint64_t v5 = ModelOrchestrator.generateForTextRequest(userQuery:useCaseID:session:responseGenerationKeepAliveCallback:);
  }
  else {
    uint64_t v5 = ModelOrchestrator.generateForTextRequest(userQuery:useCaseID:session:responseGenerationKeepAliveCallback:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t *v2;
  id v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  BOOL v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  unsigned char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  NSObject *v78;
  os_log_type_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  void (*v109)(os_log_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned char *v130;
  uint64_t (*v131)(void);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  void (*v151)(os_log_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  uint64_t v156;
  unsigned char *v157;
  void (*v158)(uint64_t, void, uint64_t);
  NSObject *v159;
  os_log_type_t v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  uint64_t v172;
  unsigned char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned char *v179;
  os_log_t log;
  os_log_t loga;
  NSObject *type;
  os_log_type_t typea[8];
  uint64_t v184;
  uint64_t v185;
  void *v186;
  void (*v187)(uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  os_log_type_t v190[8];
  os_log_type_t v191[8];
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  os_log_type_t v198;
  os_log_type_t v199;
  uint64_t v200[2];
  void *v201;
  uint64_t v202;

  unint64_t v201 = v0;
  uint64_t v1 = (void *)v0[72];
  swift_release();
  v0[2] = v1;
  double v2 = v0 + 2;
  os_log_type_t v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v4 = swift_dynamicCast();
  uint64_t v5 = (void *)v0[72];
  uint64_t v197 = v0;
  if (!v4)
  {

    Swift::String_optional v39 = v5;
    Swift::String_optional v40 = v5;
    uint64_t v41 = Logger.logObject.getter();
    uint64_t v42 = static os_log_type_t.error.getter();
    Swift::String v43 = os_log_type_enabled(v41, v42);
    id v44 = (void *)v0[72];
    if (v43)
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v46 = (void *)swift_slowAlloc();
      uint64_t v193 = swift_slowAlloc();
      v200[0] = v193;
      *(_DWORD *)uint64_t v45 = 136315650;
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 12) = 2080;
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000058, 0x800000024FA49970, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 22) = 2112;
      uint64_t v47 = v44;
      uint64_t v48 = _swift_stdlib_bridgeErrorToNSError();
      v0[5] = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v46 = v48;

      _os_log_impl(&dword_24F9A2000, v41, v42, "%s.%s Received an unknown error %@", (uint8_t *)v45, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v46, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v193, -1, -1);
      MEMORY[0x25336A180](v45, -1, -1);
    }
    else
    {
    }
    uint64_t v49 = (void *)v0[72];
    lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
    swift_allocError();
    void *v50 = 6;
    swift_willThrow();
    uint64_t v51 = v49;
    goto LABEL_29;
  }
  uint64_t v6 = v0[66];
  uint64_t v7 = v0[65];
  uint64_t v9 = v0[61];
  uint64_t v8 = v0[62];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v6, v9);
  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  uint64_t result = GenerativeError.errorCode.getter();
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_45;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_45:
    __break(1u);
    return result;
  }
  uint64_t v11 = v0 + 9;
  uint64_t v192 = v0 + 15;
  uint64_t v12 = v0[59];
  uint64_t v13 = v0[60];
  uint64_t v14 = v0[58];
  dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
  swift_release();
  GenerativeError.type.getter();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 88))(v13, v14);
  if (v15 == *MEMORY[0x263F40B78])
  {
    uint64_t v16 = v0 + 12;
    uint64_t v17 = v0[59];
    uint64_t v18 = v0[60];
    uint64_t v19 = v0[58];
    uint64_t v20 = v0[39];
    uint64_t v21 = v0[37];
    float v22 = v197[36];
    uint64_t v23 = v197[35];
    char v24 = v197[34];
    os_log_type_t v25 = v197[33];
    (*(void (**)(uint64_t, uint64_t))(v17 + 96))(v18, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v20, v18, v22);
    uint64_t v26 = v197;
    GenerativeError.PromptError.type.getter();
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 88))(v23, v25);
    if (v27 == *MEMORY[0x263F40AF0] || v27 == *MEMORY[0x263F40AF8])
    {
      uint64_t v72 = v197[65];
      uint64_t v73 = v197[64];
      uint64_t v74 = v197[62];
      os_log_type_t v75 = v197[61];
      (*(void (**)(void, void))(v197[34] + 8))(v197[35], v197[33]);
      uint64_t v76 = v73;
      uint64_t v77 = v197;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v76, v72, v75);
      uint64_t v78 = Logger.logObject.getter();
      uint64_t v79 = static os_log_type_t.error.getter();
      uint64_t v80 = os_log_type_enabled(v78, v79);
      uint64_t v81 = v197[64];
      uint64_t v83 = v197[61];
      uint64_t v82 = v197[62];
      if (v80)
      {
        os_log_type_t v84 = v2 + 11;
        uint64_t v85 = v2 + 12;
        uint64_t v86 = swift_slowAlloc();
        uint64_t v189 = swift_slowAlloc();
        v200[0] = v189;
        *(_DWORD *)uint64_t v86 = 136315650;
        *uint64_t v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v86 + 12) = 2080;
        char *v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000058, 0x800000024FA49970, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v86 + 22) = 2080;
        lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
        uint64_t v87 = Encodable.asJSONString.getter();
        *uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v200);
        uint64_t v77 = v197;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
        v89(v81, v83);
        _os_log_impl(&dword_24F9A2000, v78, v79, "%s.%s Received a prompt error: safetyRejected or denyListRejected %s", (uint8_t *)v86, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v189, -1, -1);
        MEMORY[0x25336A180](v86, -1, -1);
      }
      else
      {
        uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
        v89(v197[64], v197[61]);
      }

      id v125 = v77[65];
      uint64_t v126 = v197[61];
      uint64_t v127 = v197[39];
      uint64_t v128 = v197[37];
      os_log_type_t v129 = v197[36];
      lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
      swift_allocError();
      uint8_t *v130 = 5;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v127, v129);
      uint64_t v0 = v197;
      v89(v125, v126);
    }
    else
    {
      (*(void (**)(void, void, void))(v197[37] + 16))(v197[38], v197[39], v197[36]);
      os_log_type_t v28 = Logger.logObject.getter();
      uint64_t v29 = static os_log_type_t.error.getter();
      uint64_t v30 = os_log_type_enabled(v28, v29);
      uint64_t v32 = v197[37];
      uint64_t v31 = v197[38];
      char v33 = v197[36];
      if (v30)
      {
        uint64_t v34 = v2 + 8;
        uint64_t v35 = v2 + 9;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v184 = swift_slowAlloc();
        v200[0] = v184;
        *(_DWORD *)uint64_t v36 = 136315650;
        *uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 12) = 2080;
        char *v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000058, 0x800000024FA49970, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 22) = 2080;
        lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type GenerativeError.PromptError and conformance GenerativeError.PromptError, MEMORY[0x263F40B10]);
        id v37 = Encodable.asJSONString.getter();
        *uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v26 = v197;
        swift_bridgeObjectRelease();
        uint64_t v187 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v187(v31, v33);
        _os_log_impl(&dword_24F9A2000, v28, v29, "%s.%s Received a prompt error %s", (uint8_t *)v36, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v184, -1, -1);
        MEMORY[0x25336A180](v36, -1, -1);
      }
      else
      {
        uint64_t v187 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v187(v197[38], v197[36]);
      }

      uint64_t v110 = v26[65];
      uint64_t v111 = v26[62];
      uint64_t v112 = v197[61];
      uint64_t v113 = v197[39];
      uint64_t v114 = v197[36];
      uint64_t v115 = v197[35];
      uint64_t v116 = v197[34];
      uint64_t v117 = v197[33];
      lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
      swift_allocError();
      *unint64_t v118 = 6;
      swift_willThrow();
      v187(v113, v114);
      uint64_t v0 = v197;
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v110, v112);
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v117);
    }
  }
  else if (v15 == *MEMORY[0x263F40B68])
  {
    os_log_type_t v52 = v0[59];
    uint64_t v53 = v0[60];
    uint64_t v54 = v0[58];
    uint64_t v55 = v0;
    uint64_t v57 = v0[42];
    uint64_t v56 = v0[43];
    uint64_t v58 = v0[41];
    uint64_t v59 = v55[40];
    (*(void (**)(uint64_t, uint64_t))(v52 + 96))(v53, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v56, v53, v59);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v57, v56, v59);
    uint64_t v60 = Logger.logObject.getter();
    uint64_t v61 = static os_log_type_t.error.getter();
    uint64_t v62 = os_log_type_enabled(v60, v61);
    uint64_t v64 = v55[41];
    uint64_t v63 = v55[42];
    uint64_t v65 = v55[40];
    if (v62)
    {
      uint64_t v66 = v2 + 14;
      uint64_t v67 = v2 + 15;
      uint64_t v68 = swift_slowAlloc();
      uint64_t v188 = swift_slowAlloc();
      v200[0] = v188;
      *(_DWORD *)uint64_t v68 = 136315650;
      *uint64_t v192 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 12) = 2080;
      *uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000058, 0x800000024FA49970, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 22) = 2080;
      lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type GenerativeError.NetworkingError and conformance GenerativeError.NetworkingError, MEMORY[0x263F40A00]);
      uint64_t v69 = Encodable.asJSONString.getter();
      *uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
      v71(v63, v65);
      _os_log_impl(&dword_24F9A2000, v60, v61, "%s.%s Received a networking error %s", (uint8_t *)v68, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v188, -1, -1);
      MEMORY[0x25336A180](v68, -1, -1);
    }
    else
    {
      uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
      v71(v55[42], v55[40]);
    }

    uint64_t v0 = v197;
    uint64_t v119 = v197[65];
    uint64_t v121 = v197[61];
    uint64_t v120 = v197[62];
    uint64_t v122 = v197[43];
    uint64_t v123 = v197[40];
    lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
    swift_allocError();
    *uint64_t v124 = 4;
    swift_willThrow();
    v71(v122, v123);
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v119, v121);
  }
  else
  {
    if (v15 == *MEMORY[0x263F40B70])
    {
      uint64_t v90 = v0[59];
      uint64_t v91 = v0[60];
      uint64_t v93 = v0[57];
      uint64_t v92 = v0[58];
      uint64_t v94 = v0;
      uint64_t v97 = v0 + 55;
      uint64_t v95 = v0[55];
      os_log_type_t v96 = v97[1];
      uint64_t v98 = v94[54];
      (*(void (**)(uint64_t, uint64_t))(v90 + 96))(v91, v92);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 32))(v93, v91, v98);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v96, v93, v98);
      uint64_t v99 = Logger.logObject.getter();
      uint64_t v100 = static os_log_type_t.error.getter();
      uint64_t v101 = os_log_type_enabled(v99, v100);
      uint64_t v102 = v94[55];
      if (v101)
      {
        uint64_t v198 = v100;
        uint64_t v103 = v94[52];
        os_log_type_t v104 = v94[53];
        uint64_t v185 = v94[51];
        *(void *)unint64_t v190 = v94[54];
        log = (os_log_t)v94[56];
        char v105 = swift_slowAlloc();
        uint64_t v194 = swift_slowAlloc();
        v200[0] = v194;
        *(_DWORD *)char v105 = 136315650;
        v94[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v105 + 12) = 2080;
        v94[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000058, 0x800000024FA49970, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v105 + 22) = 2080;
        GenerativeError.AvailabilityError.type.getter();
        lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type GenerativeError.AvailabilityError.ErrorType and conformance GenerativeError.AvailabilityError.ErrorType, MEMORY[0x263F40A38]);
        uint64_t v106 = Encodable.asJSONString.getter();
        uint64_t v108 = v107;
        (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v104, v185);
        v94[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v108, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v109 = *(void (**)(os_log_t, uint64_t))(v102 + 8);
        v109(log, *(void *)v190);
        _os_log_impl(&dword_24F9A2000, v99, v198, "%s.%s Received an availability error %s", (uint8_t *)v105, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v194, -1, -1);
        MEMORY[0x25336A180](v105, -1, -1);
      }
      else
      {
        uint64_t v109 = *(void (**)(os_log_t, uint64_t))(v102 + 8);
        v109((os_log_t)v94[56], v94[54]);
      }

      uint64_t v152 = v94[65];
      uint64_t v154 = v94[61];
      uint64_t v153 = v94[62];
      uint64_t v155 = v94[57];
      uint64_t v156 = v94[54];
      lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
      swift_allocError();
      *uint64_t v157 = 2;
      swift_willThrow();
      v109(v155, v156);
      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v152, v154);

      uint64_t v0 = v94;
      goto LABEL_30;
    }
    if (v15 == *MEMORY[0x263F40B80])
    {
      uint64_t v132 = v0[59];
      uint64_t v133 = v0[60];
      uint64_t v134 = v0[58];
      uint64_t v135 = v0;
      uint64_t v137 = v0[49];
      uint64_t v136 = v0[50];
      unint64_t v138 = v0[48];
      uint64_t v139 = v135[47];
      (*(void (**)(uint64_t, uint64_t))(v132 + 96))(v133, v134);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 32))(v136, v133, v139);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 16))(v137, v136, v139);
      BOOL v140 = Logger.logObject.getter();
      uint64_t v141 = static os_log_type_t.error.getter();
      unint64_t v142 = os_log_type_enabled(v140, v141);
      uint64_t v143 = v135[48];
      if (v142)
      {
        uint64_t v199 = v141;
        type = v140;
        unint64_t v145 = v135[45];
        int v144 = v135[46];
        uint64_t v146 = v135[44];
        *(void *)uint64_t v191 = v135[47];
        os_log_t loga = (os_log_t)v135[49];
        uint64_t v147 = swift_slowAlloc();
        uint64_t v195 = swift_slowAlloc();
        v200[0] = v195;
        *(_DWORD *)uint64_t v147 = 136315650;
        v135[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v147 + 12) = 2080;
        v135[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000058, 0x800000024FA49970, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v147 + 22) = 2080;
        GenerativeError.RuntimeError.type.getter();
        lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type GenerativeError.RuntimeError.ErrorType and conformance GenerativeError.RuntimeError.ErrorType, MEMORY[0x263F40B58]);
        uint64_t v148 = Encodable.asJSONString.getter();
        uint64_t v150 = v149;
        (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v144, v146);
        v135[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v150, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v151 = *(void (**)(os_log_t, uint64_t))(v143 + 8);
        v151(loga, *(void *)v191);
        BOOL v140 = type;
        _os_log_impl(&dword_24F9A2000, type, v199, "%s.%s Received a runtime error %s", (uint8_t *)v147, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v195, -1, -1);
        MEMORY[0x25336A180](v147, -1, -1);
      }
      else
      {
        unint64_t v151 = *(void (**)(os_log_t, uint64_t))(v143 + 8);
        v151((os_log_t)v135[49], v135[47]);
      }

      uint64_t v168 = v135[65];
      uint64_t v170 = v135[61];
      char v169 = v135[62];
      uint64_t v171 = v135[50];
      uint64_t v172 = v135[47];
      lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
      swift_allocError();
      *uint64_t v173 = 3;
      swift_willThrow();
      v151(v171, v172);
      (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v168, v170);

      uint64_t v0 = v135;
      goto LABEL_30;
    }
    uint64_t v158 = *(void (**)(uint64_t, void, uint64_t))(v0[62] + 16);
    v158(v0[63], v0[65], v0[61]);
    uint64_t v159 = Logger.logObject.getter();
    unint64_t v160 = static os_log_type_t.error.getter();
    unint64_t v161 = os_log_type_enabled(v159, v160);
    char v162 = v0[62];
    uint64_t v163 = v0[61];
    if (v161)
    {
      *(void *)typea = v0[63];
      uint64_t v164 = swift_slowAlloc();
      unint64_t v186 = (void *)swift_slowAlloc();
      uint64_t v196 = swift_slowAlloc();
      v200[0] = v196;
      *(_DWORD *)uint64_t v164 = 136315650;
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x800000024FA3F0C0, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v164 + 12) = 2080;
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000058, 0x800000024FA49970, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v164 + 22) = 2112;
      lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, MEMORY[0x263F40B88]);
      swift_allocError();
      v158(v165, *(void *)typea, v163);
      char v166 = _swift_stdlib_bridgeErrorToNSError();
      v0[8] = v166;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v186 = v166;
      uint64_t v167 = *(void (**)(uint64_t, uint64_t))(v162 + 8);
      v167(*(void *)typea, v163);
      _os_log_impl(&dword_24F9A2000, v159, v160, "%s.%s Received an unknown error %@", (uint8_t *)v164, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v186, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v196, -1, -1);
      MEMORY[0x25336A180](v164, -1, -1);
    }
    else
    {
      uint64_t v167 = *(void (**)(uint64_t, uint64_t))(v162 + 8);
      v167(v0[63], v0[61]);
    }

    uint64_t v174 = v0[65];
    uint64_t v175 = v0[61];
    uint64_t v176 = v0[60];
    uint64_t v177 = v0[59];
    uint64_t v178 = v0[58];
    lazy protocol witness table accessor for type ModelOrchestrator.Error and conformance ModelOrchestrator.Error();
    swift_allocError();
    *uint64_t v179 = 6;
    swift_willThrow();
    v167(v174, v175);
    (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v176, v178);
  }
  uint64_t v51 = (void *)v0[2];
LABEL_29:

LABEL_30:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v131 = (uint64_t (*)(void))v0[1];
  return v131();
}

uint64_t outlined init with copy of ModelResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModelResponse(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ModelResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t outlined copy of (@escaping @callee_guaranteed @async (@guaranteed String) -> (@owned String, @error @owned Error))?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

GenerativeAssistantActions::GATInteractionMode_optional __swiftcall GATInteractionMode.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GATInteractionMode.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 4;
  if (v5 < 4) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t GATInteractionMode.rawValue.getter()
{
  return *(void *)&aVoiceonlvoicef_0[8 * *v0];
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t InvocationContext.isFirstRequest.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationContext() + 36));
}

uint64_t type metadata accessor for InvocationContext()
{
  uint64_t result = type metadata singleton initialization cache for InvocationContext;
  if (!type metadata singleton initialization cache for InvocationContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t InvocationContext.init(explicitInvocation:interactionMode:interfaceIdiom:useCase:sessionID:)@<X0>(char a1@<W0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  char v11 = *a2;
  char v12 = *a3;
  *a7 = a1;
  a7[1] = v11;
  a7[2] = v12;
  uint64_t v13 = (int *)type metadata accessor for InvocationContext();
  uint64_t v14 = &a7[v13[7]];
  uint64_t v15 = type metadata accessor for GenerativeAssistantUseCase();
  uint64_t v20 = *(void *)(v15 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v20 + 16))(v14, a4, v15);
  uint64_t v16 = &a7[v13[8]];
  *uint64_t v16 = a5;
  v16[1] = a6;
  swift_bridgeObjectRetain();
  char v17 = static SessionPersistenceUtils.isBackToBackRequest(sessionId:)();
  a7[v13[9]] = (v17 & 1) == 0;
  if (v17)
  {
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a4, v15);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (a6)
    {
      static SessionPersistenceUtils.setSession(forCurrentSession:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
    return v19(a4, v15);
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GATInteractionMode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GATInteractionMode()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GATInteractionMode()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GATInteractionMode()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

GenerativeAssistantActions::GATInteractionMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GATInteractionMode(Swift::String *a1)
{
  return GATInteractionMode.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GATInteractionMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GATInteractionMode.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

GenerativeAssistantActions::GATInterfaceIdiom_optional __swiftcall GATInterfaceIdiom.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GATInterfaceIdiom.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 11;
  if (v5 < 0xB) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t GATInterfaceIdiom.rawValue.getter()
{
  return *(void *)&aCarplay_1[8 * *v0];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GATInterfaceIdiom(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GATInterfaceIdiom()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GATInterfaceIdiom()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GATInterfaceIdiom()
{
  return Hasher._finalize()();
}

GenerativeAssistantActions::GATInterfaceIdiom_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GATInterfaceIdiom(Swift::String *a1)
{
  return GATInterfaceIdiom.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GATInterfaceIdiom@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GATInterfaceIdiom.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Optional<A>.asGATInterfaceIdiom.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.InterfaceIdiom?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - v8;
  outlined init with copy of IntentSystemContext.InterfaceIdiom?(v2, (uint64_t)&v15 - v8);
  uint64_t v10 = type metadata accessor for IntentSystemContext.InterfaceIdiom();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    outlined init with copy of IntentSystemContext.InterfaceIdiom?((uint64_t)v9, (uint64_t)v7);
    int v13 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v7, v10);
    if (v13 == *MEMORY[0x263EFBBC8])
    {
      char v12 = 0;
      goto LABEL_23;
    }
    if (v13 == *MEMORY[0x263EFBBD8])
    {
      char v12 = 1;
      goto LABEL_23;
    }
    if (v13 == *MEMORY[0x263EFBBD0])
    {
      char v12 = 2;
      goto LABEL_23;
    }
    if (v13 == *MEMORY[0x263EFBB98])
    {
      char v12 = 3;
      goto LABEL_23;
    }
    if (v13 == *MEMORY[0x263EFBBC0])
    {
      char v12 = 4;
      goto LABEL_23;
    }
    if (v13 == *MEMORY[0x263EFBBB0])
    {
      char v12 = 5;
      goto LABEL_23;
    }
    if (v13 == *MEMORY[0x263EFBBA0])
    {
      char v12 = 6;
      goto LABEL_23;
    }
    if (v13 == *MEMORY[0x263EFBBA8])
    {
      char v12 = 7;
      goto LABEL_23;
    }
    if (v13 == *MEMORY[0x263EFBB90])
    {
      char v12 = 8;
      goto LABEL_23;
    }
    if (v13 == *MEMORY[0x263EFBBB8])
    {
      char v12 = 9;
      goto LABEL_23;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
  }
  char v12 = 10;
LABEL_23:
  *a1 = v12;
  return outlined destroy of IntentSystemContext.InterfaceIdiom?((uint64_t)v9);
}

uint64_t outlined init with copy of IntentSystemContext.InterfaceIdiom?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.InterfaceIdiom?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IntentSystemContext.InterfaceIdiom?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.InterfaceIdiom?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type GATInteractionMode and conformance GATInteractionMode()
{
  unint64_t result = lazy protocol witness table cache variable for type GATInteractionMode and conformance GATInteractionMode;
  if (!lazy protocol witness table cache variable for type GATInteractionMode and conformance GATInteractionMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GATInteractionMode and conformance GATInteractionMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GATInterfaceIdiom and conformance GATInterfaceIdiom()
{
  unint64_t result = lazy protocol witness table cache variable for type GATInterfaceIdiom and conformance GATInterfaceIdiom;
  if (!lazy protocol witness table cache variable for type GATInterfaceIdiom and conformance GATInterfaceIdiom)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GATInterfaceIdiom and conformance GATInterfaceIdiom);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for InvocationContext(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    uint64_t v7 = a3[7];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for GenerativeAssistantUseCase();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[8];
    uint64_t v12 = a3[9];
    int v13 = (void *)((char *)v4 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *int v13 = *v14;
    v13[1] = v15;
    *((unsigned char *)v4 + v12) = *((unsigned char *)a2 + v12);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for InvocationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for GenerativeAssistantUseCase();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InvocationContext(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for GenerativeAssistantUseCase();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a3[9];
  uint64_t v12 = (void *)(a1 + v10);
  int v13 = (void *)(a2 + v10);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for InvocationContext(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = a3[7];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for GenerativeAssistantUseCase();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t initializeWithTake for InvocationContext(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for GenerativeAssistantUseCase();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  return a1;
}

uint64_t assignWithTake for InvocationContext(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for GenerativeAssistantUseCase();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvocationContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24FA0C14C);
}

uint64_t sub_24FA0C14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for GenerativeAssistantUseCase();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for InvocationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24FA0C234);
}

uint64_t sub_24FA0C234(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for GenerativeAssistantUseCase();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 28);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  }
  return result;
}

uint64_t type metadata completion function for InvocationContext()
{
  uint64_t result = type metadata accessor for GenerativeAssistantUseCase();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for GATInteractionMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24FA0C47CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GATInteractionMode()
{
  return &type metadata for GATInteractionMode;
}

uint64_t getEnumTagSinglePayload for GATInterfaceIdiom(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GATInterfaceIdiom(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24FA0C610);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GATInterfaceIdiom()
{
  return &type metadata for GATInterfaceIdiom;
}

uint64_t protocol witness for ShortcutsScreenshotProviding.delegate.setter in conformance WFContextualActionRunnerClient(uint64_t a1)
{
  objc_msgSend(*v1, sel_setDelegate_, a1);
  return swift_unknownObjectRelease();
}

id protocol witness for ShortcutsScreenshotProviding.start() in conformance WFContextualActionRunnerClient()
{
  return objc_msgSend(*v0, sel_start);
}

BOOL protocol witness for ShortcutsScreenshotProviding.canTakeScreenShot() in conformance WFContextualActionRunnerClient()
{
  return !specialized ScreenLockChecker.isScreenLocked()();
}

uint64_t dispatch thunk of ShortcutsScreenshotProviding.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ShortcutsScreenshotProviding.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ShortcutsScreenshotProviding.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ShortcutsScreenshotProviding.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ShortcutsScreenshotProviding.canTakeScreenShot()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

void ScreenshotDelegate.workflowRunnerClient(_:didFinishRunningWorkflowWithOutputFiles:error:cancelled:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for screenshot != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.screenshot);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109376;
    objc_msgSend(v9, sel_isRunning);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v12 + 8) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v10, v11, "ScreenshotDelegate workflowRunnerClient was invoked, client.isRunning: %{BOOL}d cancelled: %{BOOL}d", (uint8_t *)v12, 0xEu);
    MEMORY[0x25336A180](v12, -1, -1);

    if (a3)
    {
LABEL_5:
      int v13 = *(void (**)(void *, uint64_t))(v4
                                                   + OBJC_IVAR____TtC26GenerativeAssistantActions18ScreenshotDelegate_callback);
      id v14 = a3;
      v13(a3, 1);

      return;
    }
  }
  else
  {

    if (a3) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t, void))(v4
                                          + OBJC_IVAR____TtC26GenerativeAssistantActions18ScreenshotDelegate_callback))(a2, 0);
}

id ScreenshotDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ScreenshotDelegate()
{
  return self;
}

unint64_t type metadata accessor for WFContextualActionFile()
{
  unint64_t result = lazy cache variable for type metadata for WFContextualActionFile;
  if (!lazy cache variable for type metadata for WFContextualActionFile)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for WFContextualActionFile);
  }
  return result;
}

unint64_t FixedResponse.rawValue.getter()
{
  unint64_t result = 0x100000000000002FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 2:
    case 4:
    case 0x10:
      unint64_t result = 0xD000000000000028;
      break;
    case 3:
      unint64_t result = 0xD000000000000022;
      break;
    case 5:
      unint64_t result = 0x636E6163202C4B4FLL;
      break;
    case 6:
      unint64_t result = 0;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0xD0000000000000B2;
      break;
    case 9:
      unint64_t result = 0xD00000000000003CLL;
      break;
    case 0xA:
      unint64_t result = 0xD000000000000033;
      break;
    case 0xB:
      unint64_t result = 0x1000000000000062;
      break;
    case 0xC:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 0xD:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 0xE:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 0xF:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 0x11:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 0x12:
      unint64_t result = 0xD000000000000025;
      break;
    case 0x13:
      unint64_t result = 0x100000000000003BLL;
      break;
    case 0x14:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 0x15:
      unint64_t result = 0xD000000000000035;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t FixedResponse.description.getter()
{
  return FixedResponse.rawValue.getter();
}

unint64_t CatId.rawValue.getter()
{
  unint64_t result = 0xD000000000000024;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 2:
    case 9:
    case 0xA:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000020;
      break;
    case 4:
      unint64_t result = 0xD000000000000029;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x65526C65636E6163;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 0xB:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 0xC:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 0xD:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 0xE:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 0xF:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x10:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x11:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x12:
      unint64_t result = 0xD000000000000018;
      break;
    case 0x13:
      unint64_t result = 0xD000000000000018;
      break;
    case 0x14:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 0x15:
      unint64_t result = 0xD000000000000017;
      break;
    case 0x16:
      unint64_t result = 0xD000000000000014;
      break;
    case 0x17:
      unint64_t result = 0x7974706D65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t static FixedResponse.disabledResponse.getter()
{
  return 0xD00000000000001ALL;
}

void one-time initialization function for acmeAsks()
{
  unk_269A496C5 = 0;
  unk_269A496C6 = -5120;
}

uint64_t one-time initialization function for displayForwardSupportingDialog()
{
  _StringGuts.grow(_:)(26);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for contentProviderName != -1) {
    uint64_t result = swift_once();
  }
  static FixedResponse.displayForwardSupportingDialog = 0x100000000000001FLL;
  unk_269A496D0 = 0x800000024FA49DC0;
  return result;
}

GenerativeAssistantActions::FixedResponse_optional __swiftcall FixedResponse.init(rawValue:)(Swift::String rawValue)
{
  objc_super v2 = v1;
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 4;
  switch(v3)
  {
    case 0:
      goto LABEL_6;
    case 1:
      char v5 = 1;
      goto LABEL_6;
    case 2:
      char v5 = 2;
      goto LABEL_6;
    case 3:
      char v5 = 3;
LABEL_6:
      char v6 = v5;
      break;
    case 4:
      break;
    case 5:
      char v6 = 5;
      break;
    case 6:
      char v6 = 6;
      break;
    case 7:
      char v6 = 7;
      break;
    case 8:
      char v6 = 8;
      break;
    case 9:
      char v6 = 9;
      break;
    case 10:
      char v6 = 10;
      break;
    case 11:
      char v6 = 11;
      break;
    case 12:
      char v6 = 12;
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    default:
      char v6 = 22;
      break;
  }
  *objc_super v2 = v6;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FixedResponse(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FixedResponse(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance FixedResponse(a1, a2, (void (*)(uint64_t))FixedResponse.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FixedResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance FixedResponse(a1, a2, a3, (void (*)(void))FixedResponse.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FixedResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FixedResponse(a1, a2, a3, (void (*)(uint64_t))FixedResponse.rawValue.getter);
}

GenerativeAssistantActions::FixedResponse_optional protocol witness for RawRepresentable.init(rawValue:) in conformance FixedResponse(Swift::String *a1)
{
  return FixedResponse.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FixedResponse@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = FixedResponse.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance FixedResponse()
{
  return FixedResponse.rawValue.getter();
}

void one-time initialization function for implicitImageConfirmation()
{
  _StringGuts.grow(_:)(72);
  v0._object = (void *)0x800000024FA49ED0;
  v0._uint64_t countAndFlagsBits = 0x1000000000000032;
  String.append(_:)(v0);
  if (one-time initialization token for contentProviderName != -1) {
    swift_once();
  }
  uint64_t v1 = static Disclaimer.contentProviderName;
  objc_super v2 = *(void **)algn_269A49808;
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000024FA49F10;
  v4._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v4);
  static ConfirmationText.implicitImageConfirmation = 0;
  unk_269A496E0 = 0xE000000000000000;
}

uint64_t one-time initialization function for explicitImageConfirmation()
{
  _StringGuts.grow(_:)(22);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for contentProviderName != -1) {
    uint64_t result = swift_once();
  }
  static ConfirmationText.explicitImageConfirmation = 0xD00000000000001BLL;
  unk_269A496F0 = 0x800000024FA49EB0;
  return result;
}

void one-time initialization function for implicitScreenshotConfirmation()
{
  _StringGuts.grow(_:)(66);
  v0._object = (void *)0x800000024FA49E60;
  v0._uint64_t countAndFlagsBits = 0x1000000000000023;
  String.append(_:)(v0);
  if (one-time initialization token for contentProviderName != -1) {
    swift_once();
  }
  uint64_t v1 = static Disclaimer.contentProviderName;
  objc_super v2 = *(void **)algn_269A49808;
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000024FA49E90;
  v4._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v4);
  static ConfirmationText.implicitScreenshotConfirmation = 0;
  unk_269A49700 = 0xE000000000000000;
}

uint64_t one-time initialization function for explicitScreenshotConfirmation()
{
  _StringGuts.grow(_:)(27);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for contentProviderName != -1) {
    uint64_t result = swift_once();
  }
  static ConfirmationText.explicitScreenshotConfirmation = 0xD000000000000020;
  unk_269A49710 = 0x800000024FA49E30;
  return result;
}

uint64_t one-time initialization function for condensedConfirmation()
{
  _StringGuts.grow(_:)(16);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for contentProviderName != -1) {
    uint64_t result = swift_once();
  }
  static ConfirmationText.condensedConfirmation = 0xD000000000000015;
  unk_269A49720 = 0x800000024FA49E10;
  return result;
}

uint64_t one-time initialization function for enablementConfirmationButtonText(uint64_t a1)
{
  return one-time initialization function for enablementConfirmationButtonText(a1, static ConfirmationText.enablementConfirmationButtonText);
}

uint64_t one-time initialization function for enablementDeclineButtonText(uint64_t a1)
{
  return one-time initialization function for enablementConfirmationButtonText(a1, static ConfirmationText.enablementDeclineButtonText);
}

uint64_t one-time initialization function for mediaConfirmationButtonText(uint64_t a1)
{
  return one-time initialization function for enablementConfirmationButtonText(a1, static ConfirmationText.mediaConfirmationButtonText);
}

uint64_t one-time initialization function for textCreationConfirmationButtonText(uint64_t a1)
{
  return one-time initialization function for textCreationConfirmationButtonText(a1, static ConfirmationText.textCreationConfirmationButtonText);
}

uint64_t one-time initialization function for declineButtonText(uint64_t a1)
{
  return one-time initialization function for enablementConfirmationButtonText(a1, static ConfirmationText.declineButtonText);
}

uint64_t one-time initialization function for knowledgeFallbackConfirmation()
{
  _StringGuts.grow(_:)(40);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for contentProviderName != -1) {
    uint64_t result = swift_once();
  }
  static ConfirmationText.knowledgeFallbackConfirmation = 0xD00000000000002DLL;
  *(void *)algn_269A497A8 = 0x800000024FA49DE0;
  return result;
}

uint64_t one-time initialization function for userResponseAcceptValues()
{
  uint64_t v0 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x270FA5388](v0 - 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
  type metadata accessor for LocalizedStringResource();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_24FA3E800;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._uint64_t countAndFlagsBits = 543912769;
  v2._object = (void *)0xE400000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v2);
  if (one-time initialization token for contentProviderName != -1) {
    swift_once();
  }
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)((Swift::String)static Disclaimer.contentProviderName);
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v3);
  uint64_t result = LocalizedStringResource.init(stringInterpolation:)();
  static ConfirmationText.userResponseAcceptValues = v1;
  return result;
}

uint64_t one-time initialization function for userResponseDeclineValues()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
  type metadata accessor for LocalizedStringResource();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_24FA3E550;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t result = LocalizedStringResource.init(stringLiteral:)();
  static ConfirmationText.userResponseDeclineValues = v0;
  return result;
}

uint64_t one-time initialization function for knowledgeFallbackConfirmationAcceptLabel(uint64_t a1)
{
  return one-time initialization function for textCreationConfirmationButtonText(a1, static ConfirmationText.knowledgeFallbackConfirmationAcceptLabel);
}

uint64_t one-time initialization function for textCreationConfirmationButtonText(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v4, a2);
  __swift_project_value_buffer(v4, (uint64_t)a2);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._uint64_t countAndFlagsBits = 543519573;
  v5._object = (void *)0xE400000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v5);
  if (one-time initialization token for contentProviderName != -1) {
    swift_once();
  }
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)((Swift::String)static Disclaimer.contentProviderName);
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v6);
  return LocalizedStringResource.init(stringInterpolation:)();
}

uint64_t one-time initialization function for knowledgeFallbackConfirmationDeclineLabel(uint64_t a1)
{
  return one-time initialization function for enablementConfirmationButtonText(a1, static ConfirmationText.knowledgeFallbackConfirmationDeclineLabel);
}

uint64_t one-time initialization function for enablementConfirmationButtonText(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t one-time initialization function for knowledgeFallbackConfirmationAcceptValues()
{
  uint64_t v0 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  MEMORY[0x270FA5388](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
  type metadata accessor for LocalizedStringResource();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_24FA3F680;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v3._uint64_t countAndFlagsBits = 543912769;
  v3._object = (void *)0xE400000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v3);
  if (one-time initialization token for contentProviderName != -1) {
    swift_once();
  }
  Swift::String v4 = (Swift::String)static Disclaimer.contentProviderName;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)((Swift::String)static Disclaimer.contentProviderName);
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v5);
  LocalizedStringResource.init(stringInterpolation:)();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._uint64_t countAndFlagsBits = 543519573;
  v6._object = (void *)0xE400000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v6);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v4);
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v7);
  uint64_t result = LocalizedStringResource.init(stringInterpolation:)();
  static ConfirmationText.knowledgeFallbackConfirmationAcceptValues = v2;
  return result;
}

uint64_t one-time initialization function for knowledgeFallbackConfirmationDeclineValues()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>);
  type metadata accessor for LocalizedStringResource();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_24FA3F680;
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t result = LocalizedStringResource.init(stringLiteral:)();
  static ConfirmationText.knowledgeFallbackConfirmationDeclineValues = v0;
  return result;
}

void one-time initialization function for contentProviderName()
{
  static Disclaimer.contentProviderName = 0x54504774616843;
  *(void *)algn_269A49808 = 0xE700000000000000;
}

uint64_t one-time initialization function for shortResultFirstTimeDisclaimerDialog()
{
  _StringGuts.grow(_:)(20);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for contentProviderName != -1) {
    uint64_t result = swift_once();
  }
  static Disclaimer.shortResultFirstTimeDisclaimerDialog = 0xD000000000000039;
  *(void *)algn_269A49818 = 0x800000024FA49D60;
  return result;
}

uint64_t one-time initialization function for longResultFirstTimeDisclaimerDialog()
{
  _StringGuts.grow(_:)(33);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for contentProviderName != -1) {
    uint64_t result = swift_once();
  }
  static Disclaimer.longResultFirstTimeDisclaimerDialog = 0xD000000000000046;
  *(void *)algn_269A49828 = 0x800000024FA49CE0;
  return result;
}

uint64_t one-time initialization function for shortResultSubsequentDisclaimerDialog()
{
  _StringGuts.grow(_:)(17);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for contentProviderName != -1) {
    uint64_t result = swift_once();
  }
  static Disclaimer.shortResultSubsequentDisclaimerDialog = 0xD000000000000016;
  *(void *)algn_269A49838 = 0x800000024FA49DA0;
  return result;
}

uint64_t one-time initialization function for longResultSubsequentDisclaimerDialog()
{
  _StringGuts.grow(_:)(30);
  uint64_t result = swift_bridgeObjectRelease();
  if (one-time initialization token for contentProviderName != -1) {
    uint64_t result = swift_once();
  }
  static Disclaimer.longResultSubsequentDisclaimerDialog = 0xD000000000000023;
  *(void *)algn_269A49848 = 0x800000024FA49D30;
  return result;
}

void one-time initialization function for modelDisclaimerMessage()
{
  _StringGuts.grow(_:)(134);
  v0._object = (void *)0x800000024FA49AB0;
  v0._uint64_t countAndFlagsBits = 0x1000000000000026;
  String.append(_:)(v0);
  if (one-time initialization token for contentProviderName != -1) {
    swift_once();
  }
  Swift::String v1 = (Swift::String)static Disclaimer.contentProviderName;
  swift_bridgeObjectRetain();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x100000000000005ELL;
  v2._object = (void *)0x800000024FA49AE0;
  String.append(_:)(v2);
  static Disclaimer.modelDisclaimerMessage = 0;
  *(void *)algn_269A49858 = 0xE000000000000000;
}

uint64_t static ProgressText.textCreationProgressText.getter()
{
  return 0x1000000000000024;
}

GenerativeAssistantActions::CatId_optional __swiftcall CatId.init(rawValue:)(Swift::String rawValue)
{
  Swift::String v2 = v1;
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 6;
  switch(v3)
  {
    case 0:
      goto LABEL_7;
    case 1:
      char v5 = 1;
      goto LABEL_7;
    case 2:
      char v5 = 2;
      goto LABEL_7;
    case 3:
      char v5 = 3;
      goto LABEL_7;
    case 4:
      char v5 = 4;
      goto LABEL_7;
    case 5:
      char v5 = 5;
LABEL_7:
      char v6 = v5;
      break;
    case 6:
      break;
    case 7:
      char v6 = 7;
      break;
    case 8:
      char v6 = 8;
      break;
    case 9:
      char v6 = 9;
      break;
    case 10:
      char v6 = 10;
      break;
    case 11:
      char v6 = 11;
      break;
    case 12:
      char v6 = 12;
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    case 22:
      char v6 = 22;
      break;
    case 23:
      char v6 = 23;
      break;
    default:
      char v6 = 24;
      break;
  }
  *Swift::String v2 = v6;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CatId(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CatId(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance FixedResponse(a1, a2, (void (*)(uint64_t))CatId.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FixedResponse(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = Hasher.init(_seed:)();
  a3(v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CatId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance FixedResponse(a1, a2, a3, (void (*)(void))CatId.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FixedResponse(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CatId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FixedResponse(a1, a2, a3, (void (*)(uint64_t))CatId.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FixedResponse(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = Hasher.init(_seed:)();
  a4(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

GenerativeAssistantActions::CatId_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CatId(Swift::String *a1)
{
  return CatId.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CatId@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = CatId.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t one-time initialization function for webSources()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Attribution>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_24FA3E550;
  *(void *)(result + 32) = 0x6F632E656C707061;
  *(void *)(result + 40) = 0xE90000000000006DLL;
  *(void *)(result + 48) = 0xD000000000000015;
  *(void *)(result + 56) = 0x800000024FA49B40;
  strcpy((char *)(result + 64), "wikipedia.org");
  *(_WORD *)(result + 78) = -4864;
  *(void *)(result + 80) = 0xD000000000000028;
  *(void *)(result + 88) = 0x800000024FA49B60;
  strcpy((char *)(result + 96), "britannica.com");
  *(unsigned char *)(result + 111) = -18;
  *(void *)(result + 112) = 0xD00000000000002FLL;
  *(void *)(result + 120) = 0x800000024FA49B90;
  *(void *)(result + 128) = 0xD000000000000010;
  *(void *)(result + 136) = 0x800000024FA49BC0;
  *(void *)(result + 144) = 0xD000000000000035;
  *(void *)(result + 152) = 0x800000024FA49BE0;
  *(void *)(result + 160) = 0xD000000000000010;
  *(void *)(result + 168) = 0x800000024FA49BC0;
  *(void *)(result + 176) = 0xD000000000000049;
  *(void *)(result + 184) = 0x800000024FA49C20;
  *(void *)(result + 192) = 0xD000000000000010;
  *(void *)(result + 200) = 0x800000024FA49BC0;
  *(void *)(result + 208) = 0xD000000000000063;
  *(void *)(result + 216) = 0x800000024FA49C70;
  static DummyKnowledgeSources.webSources = result;
  return result;
}

uint64_t static DummyKnowledgeSources.webSources.getter()
{
  if (one-time initialization token for webSources != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t static ModelDisclaimer.rateLimitDisclaimer()(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for GenerativeAssistantSettingsDestination.Origin();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for GenerativeAssistantSettingsDestination();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](static ModelDisclaimer.rateLimitDisclaimer(), 0, 0);
}

uint64_t static ModelDisclaimer.rateLimitDisclaimer()()
{
  if (one-time initialization token for modelDisclaimerMessage != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)algn_269A49858;
  v0[12] = static Disclaimer.modelDisclaimerMessage;
  v0[13] = v1;
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[14] = v2;
  *uint64_t v2 = v0;
  v2[1] = static ModelDisclaimer.rateLimitDisclaimer();
  return MEMORY[0x270F2EC90]();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v8 = v0[3];
  Swift::String v7 = v0[4];
  uint64_t v12 = v0[2];
  int v13 = v0[9];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, *MEMORY[0x263F407C0], v6);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v5, *MEMORY[0x263F407D0], v8);
  GenerativeAssistantSettingsDestination.fullURL(origin:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  URL.absoluteString.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v13);
  ModelDisclaimer.init(message:displayUrl:url:)();
  id v9 = type metadata accessor for ModelDisclaimer();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v12, 0, 1, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t static ModelDisclaimer.rateLimitDisclaimer()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = a2;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](static ModelDisclaimer.rateLimitDisclaimer(), 0, 0);
}

unint64_t lazy protocol witness table accessor for type FixedResponse and conformance FixedResponse()
{
  unint64_t result = lazy protocol witness table cache variable for type FixedResponse and conformance FixedResponse;
  if (!lazy protocol witness table cache variable for type FixedResponse and conformance FixedResponse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FixedResponse and conformance FixedResponse);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CatId and conformance CatId()
{
  unint64_t result = lazy protocol witness table cache variable for type CatId and conformance CatId;
  if (!lazy protocol witness table cache variable for type CatId and conformance CatId)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CatId and conformance CatId);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FixedResponse(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FixedResponse(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *unint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24FA0F040);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FixedResponse()
{
  return &type metadata for FixedResponse;
}

ValueMetadata *type metadata accessor for ProgressText()
{
  return &type metadata for ProgressText;
}

ValueMetadata *type metadata accessor for DefaultURL()
{
  return &type metadata for DefaultURL;
}

uint64_t getEnumTagSinglePayload for CatId(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE9) {
    goto LABEL_17;
  }
  if (a2 + 23 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 23) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 23;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 23;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 23;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x18;
  int v8 = v6 - 24;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CatId(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE8)
  {
    unsigned int v6 = ((a2 - 233) >> 8) + 1;
    *unint64_t result = a2 + 23;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24FA0F1F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 23;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CatId()
{
  return &type metadata for CatId;
}

ValueMetadata *type metadata accessor for DummyKnowledgeSources()
{
  return &type metadata for DummyKnowledgeSources;
}

unint64_t specialized static ConfirmationText.explicitDocumentConfirmation(appName:)(uint64_t a1, void *a2)
{
  if (a2)
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = a1;
    v4._object = a2;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 544175136;
    v5._object = (void *)0xE400000000000000;
    String.append(_:)(v5);
    if (one-time initialization token for contentProviderName != -1) {
      swift_once();
    }
    Swift::String v6 = (Swift::String)static Disclaimer.contentProviderName;
    swift_bridgeObjectRetain();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 63;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    return 0xD000000000000017;
  }
  else
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    if (one-time initialization token for contentProviderName != -1) {
      swift_once();
    }
    return 0xD00000000000001DLL;
  }
}

uint64_t specialized static ConfirmationText.implicitDocumentConfirmation(appName:)(uint64_t a1, void *a2)
{
  if (a2)
  {
    _StringGuts.grow(_:)(71);
    v4._object = (void *)0x800000024FA49E60;
    v4._uint64_t countAndFlagsBits = 0x1000000000000023;
    String.append(_:)(v4);
    if (one-time initialization token for contentProviderName != -1) {
      swift_once();
    }
    Swift::String v5 = (Swift::String)static Disclaimer.contentProviderName;
    swift_bridgeObjectRetain();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v6._object = (void *)0x800000024FA49F90;
    String.append(_:)(v6);
    v7._uint64_t countAndFlagsBits = a1;
    v7._object = a2;
    String.append(_:)(v7);
    unint64_t v8 = 63;
    unint64_t v9 = 0xE100000000000000;
  }
  else
  {
    _StringGuts.grow(_:)(63);
    v10._object = (void *)0x800000024FA49E60;
    v10._uint64_t countAndFlagsBits = 0x1000000000000023;
    String.append(_:)(v10);
    if (one-time initialization token for contentProviderName != -1) {
      swift_once();
    }
    Swift::String v11 = (Swift::String)static Disclaimer.contentProviderName;
    swift_bridgeObjectRetain();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    unint64_t v9 = 0x800000024FA49F70;
    unint64_t v8 = 0xD00000000000001ALL;
  }
  String.append(_:)(*(Swift::String *)&v8);
  return 0;
}

UIImage __swiftcall UIImage.resizedImage(maxPixelsLong:maxPixelsShort:)(Swift::Int_optional maxPixelsLong, Swift::Int_optional maxPixelsShort)
{
  Swift::Bool is_nil = maxPixelsShort.is_nil;
  Swift::Int value = maxPixelsShort.value;
  Swift::Bool v4 = maxPixelsLong.is_nil;
  Swift::Int v5 = maxPixelsLong.value;
  swift_getObjectType();
  char v6 = is_nil;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v47, sel_size);
  double v11 = v10;
  double v13 = v12;
  objc_msgSend(v47, sel_scale);
  double v15 = v14;
  uint64_t v16 = getMaxSizes(long:short:)(v5, v4, value, v6);
  if (v13 > v11) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v17;
  }
  if (v13 > v11) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v16;
  }
  double v20 = floor((double)v19 / v15);
  double v21 = floor((double)v18 / v15);
  objc_msgSend(v47, sel_size);
  if (v22 <= v20 && (objc_msgSend(v47, sel_size), v23 <= v21))
  {
    id v45 = v47;
    return (UIImage)v45;
  }
  else
  {
    type metadata accessor for MetricsUtils();
    static MetricsUtils.shared.getter();
    static Signpost.imageResizeProcess.getter();
    dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
    swift_release();
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordImageResizingStarted()();
    swift_release();
    objc_msgSend(v47, sel_size);
    double v25 = v24 / v20;
    BOOL v27 = v26 / v21 < v24 / v20;
    double v28 = v24 / (v26 / v21);
    double v29 = v26 / v25;
    if (v27) {
      double v21 = v29;
    }
    if (!v27) {
      double v20 = v28;
    }
    objc_msgSend(v47, sel_scale);
    CGFloat v31 = v30;
    v51.width = v20;
    v51.height = v21;
    UIGraphicsBeginImageContextWithOptions(v51, 0, v31);
    objc_msgSend(v47, sel_drawInRect_, 0.0, 0.0, v20, v21);
    uint64_t v32 = UIGraphicsGetImageFromCurrentImageContext();
    if (v32)
    {
      v33.super.Class isa = (Class)v32;
      static MetricsUtils.shared.getter();
      static Signpost.imageResizeProcess.getter();
      uint64_t v34 = type metadata accessor for OSSignpostID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v9, 1, 1, v34);
      dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
      swift_release();
      outlined destroy of OSSignpostID?((uint64_t)v9);
      static SELFUtils.shared.getter();
      LOBYTE(v49) = 1;
      dispatch thunk of SELFUtils.recordImageResizingEnded(processedMediaType:processedMediaSizeInKBs:)();
      swift_release();
      UIGraphicsEndImageContext();
      return v33;
    }
    else
    {
      if (one-time initialization token for imageUtils != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.imageUtils);
      id v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        uint64_t v49 = v40;
        *(_DWORD *)uint64_t v39 = 136315394;
        uint64_t v41 = _typeName(_:qualified:)();
        uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2080;
        uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x800000024FA49FB0, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v37, v38, "%s.%s Image resizing failed.", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v40, -1, -1);
        MEMORY[0x25336A180](v39, -1, -1);
      }

      static MetricsUtils.shared.getter();
      static Signpost.imageResizeProcess.getter();
      uint64_t v43 = type metadata accessor for OSSignpostID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v9, 1, 1, v43);
      dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
      swift_release();
      outlined destroy of OSSignpostID?((uint64_t)v9);
      static SELFUtils.shared.getter();
      dispatch thunk of SELFUtils.recordImageResizingFailed(code:domain:)();
      swift_release();
      id v44 = v47;
      UIGraphicsEndImageContext();
      return (UIImage)v44;
    }
  }
}

void *PHAsset.image.getter()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  Swift::Int v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for imageLoader != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v2, (uint64_t)static Logger.imageLoader);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = v1;
    uint64_t v11 = v10;
    aBlock[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v12 = _typeName(_:qualified:)();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6567616D69, 0xE500000000000000, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v7, v8, "%s.%s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    uint64_t v14 = v11;
    uint64_t v1 = v23;
    MEMORY[0x25336A180](v14, -1, -1);
    MEMORY[0x25336A180](v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  id v16 = objc_msgSend(self, sel_defaultManager);
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14E40]), sel_init);
  objc_msgSend(v17, sel_setVersion_, 2);
  objc_msgSend(v17, sel_setSynchronous_, 1);
  objc_msgSend(v17, sel_setNetworkAccessAllowed_, 1);
  aBlock[4] = (uint64_t)partial apply for closure #1 in PHAsset.image.getter;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data?, @guaranteed String?, @unowned UIImageOrientation, @guaranteed [AnyHashable : Any]?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_3;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v17;
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_requestImageDataForAsset_options_resultHandler_, v1, v19, v18);

  _Block_release(v18);
  swift_beginAccess();
  double v20 = *(void **)(v15 + 16);
  id v21 = v20;
  swift_release();
  return v20;
}

NSData *PromptImage.toValue()@<X0>(UIImage *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v12)(double *__return_ptr, id);
  id v13;
  double v14;
  NSData *result;
  NSData *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;

  uint64_t v4 = type metadata accessor for Prompt.ImageFormat();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Prompt.ImageData();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F61FD8], v4);
  if (one-time initialization token for _compressionRatio != -1) {
    swift_once();
  }
  if (byte_269A45858 == 1)
  {
    uint64_t v12 = (void (*)(double *__return_ptr, id))*((void *)&xmmword_269A45840 + 1);
    unint64_t v13 = (id)static Overrides._compressionRatio;
    swift_bridgeObjectRetain();
    swift_retain();
    v12(&v19, v13);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v14 = v19;
    if (v20) {
      uint64_t v14 = 0.6;
    }
  }
  else
  {
    uint64_t v14 = 0.6;
  }
  unint64_t result = UIImageJPEGRepresentation(a1, v14);
  if (result)
  {
    id v16 = result;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    Prompt.ImageData.init(format:data:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v11, v8);
    id v17 = *MEMORY[0x263F62088];
    uint64_t v18 = type metadata accessor for Prompt.Component.Value();
    return (NSData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(a2, v17, v18);
  }
  else
  {
    __break(1u);
  }
  return result;
}

NSData *protocol witness for PromptComponentValueConvertible.toValue() in conformance PromptImage@<X0>(uint64_t a1@<X8>)
{
  return PromptImage.toValue()(*v1, a1);
}

uint64_t getMaxSizes(long:short:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  void (*v6)(uint64_t *__return_ptr, id);
  id v7;
  void (*v8)(uint64_t *__return_ptr, id);
  id v9;
  uint64_t v11;
  char v12;

  if (a2)
  {
    if (one-time initialization token for _maxImageSizeLong != -1) {
      swift_once();
    }
    if (byte_269A45708 != 1)
    {
      a1 = 2048;
      if ((a4 & 1) == 0) {
        return a1;
      }
      goto LABEL_11;
    }
    uint64_t v6 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A456F0 + 1);
    uint64_t v7 = (id)static Overrides._maxImageSizeLong;
    swift_bridgeObjectRetain();
    swift_retain();
    v6(&v11, v7);
    swift_release();
    swift_bridgeObjectRelease();

    if (v12) {
      a1 = 2048;
    }
    else {
      a1 = v11;
    }
  }
  if ((a4 & 1) == 0) {
    return a1;
  }
LABEL_11:
  if (one-time initialization token for _maxImageSizeShort != -1) {
    swift_once();
  }
  if (byte_269A45738 == 1)
  {
    uint64_t v8 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A45720 + 1);
    uint64_t v9 = (id)static Overrides._maxImageSizeShort;
    swift_bridgeObjectRetain();
    swift_retain();
    v8(&v11, v9);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return a1;
}

void closure #1 in PHAsset.image.getter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 >> 60 != 15)
  {
    id v10 = objc_allocWithZone(MEMORY[0x263F827E8]);
    outlined copy of Data._Representation(a1, a2);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v12 = objc_msgSend(v10, sel_initWithData_, isa);
    outlined consume of Data?(a1, a2);

    swift_beginAccess();
    unint64_t v13 = *(void **)(a7 + 16);
    *(void *)(a7 + 16) = v12;
  }
}

ValueMetadata *type metadata accessor for PromptImage()
{
  return &type metadata for PromptImage;
}

uint64_t sub_24FA10508()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in PHAsset.image.getter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  closure #1 in PHAsset.image.getter(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t CallEmergencyServicesTool.invocation.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool, (void (*)(uint64_t))type metadata accessor for CallEmergencyServicesTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t EmergencyServicesInvocation.EmergencyService.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x746C7561737361;
      break;
    case 2:
      unint64_t result = 0x6469636341726163;
      break;
    case 3:
      unint64_t result = 0x7265676E6164;
      break;
    case 4:
      unint64_t result = 1701996902;
      break;
    case 5:
      unint64_t result = 0x75617373416E7567;
      break;
    case 6:
      unint64_t result = 1886152040;
      break;
    case 7:
    case 9:
    case 14:
      return result;
    case 8:
      unint64_t result = 0x697070616E64696BLL;
      break;
    case 10:
      unint64_t result = 0x65736F647265766FLL;
      break;
    case 11:
      unint64_t result = 0x636E617473627573;
      break;
    case 12:
      unint64_t result = 0x7369726F72726574;
      break;
    case 13:
      unint64_t result = 0xD000000000000011;
      break;
    case 15:
      unint64_t result = 0x73416C6175786573;
      break;
    case 16:
      unint64_t result = 0x6F436E6F73696F70;
      break;
    case 17:
      unint64_t result = 0x636E656772656D65;
      break;
    default:
      unint64_t result = 0x6853657669746361;
      break;
  }
  return result;
}

uint64_t one-time initialization function for schema()
{
  uint64_t v0 = type metadata accessor for Schema();
  __swift_allocate_value_buffer(v0, static EmergencyServicesInvocation.schema);
  __swift_project_value_buffer(v0, (uint64_t)static EmergencyServicesInvocation.schema);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Schema.Field>);
  type metadata accessor for Schema.Field();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_24FA3E810;
  lazy protocol witness table accessor for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService();
  Schema.Field.init<A>(name:description:type:)();
  Schema.Field.init<A>(name:description:type:)();
  Schema.Field.init<A>(name:description:type:)();
  return Schema.init(fields:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Schema();
  __swift_allocate_value_buffer(v0, static TextInputTool.TextInputRequest.schema);
  __swift_project_value_buffer(v0, (uint64_t)static TextInputTool.TextInputRequest.schema);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Schema.Field>);
  type metadata accessor for Schema.Field();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_24FA3E1D0;
  Schema.Field.init<A>(name:description:type:)();
  return Schema.init(fields:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Schema();
  __swift_allocate_value_buffer(v0, static ModelResponse.schema);
  __swift_project_value_buffer(v0, (uint64_t)static ModelResponse.schema);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Schema.Field>);
  type metadata accessor for Schema.Field();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_24FA3E810;
  if (one-time initialization token for content != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  Schema.Field.init<A>(name:description:type:)();
  if (one-time initialization token for suggestions != -1) {
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  swift_bridgeObjectRetain();
  Schema.Field.init<A>(name:description:type:)();
  if (one-time initialization token for summary != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  Schema.Field.init<A>(name:description:type:)();
  return Schema.init(fields:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EmergencyServicesInvocation.EmergencyService(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = EmergencyServicesInvocation.EmergencyService.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == EmergencyServicesInvocation.EmergencyService.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EmergencyServicesInvocation.EmergencyService()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  EmergencyServicesInvocation.EmergencyService.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EmergencyServicesInvocation.EmergencyService()
{
  EmergencyServicesInvocation.EmergencyService.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EmergencyServicesInvocation.EmergencyService()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  EmergencyServicesInvocation.EmergencyService.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance EmergencyServicesInvocation.EmergencyService@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized EmergencyServicesInvocation.EmergencyService.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance EmergencyServicesInvocation.EmergencyService@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = EmergencyServicesInvocation.EmergencyService.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance EmergencyServicesInvocation.EmergencyService(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static EmergencyServicesInvocation.EmergencyService.allCases.getter;
}

uint64_t protocol witness for static Generable.schema.getter in conformance EmergencyServicesInvocation.EmergencyService(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService();
  unint64_t v5 = lazy protocol witness table accessor for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService();
  return MEMORY[0x270F2F558](a1, a2, v4, v5);
}

uint64_t protocol witness for Generable.init(from:) in conformance EmergencyServicesInvocation.EmergencyService()
{
  return CaseIterable<>.init(from:)();
}

uint64_t protocol witness for static Generable.schema.getter in conformance EmergencyServicesInvocation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static Generable.schema.getter in conformance EmergencyServicesInvocation(&one-time initialization token for schema, (uint64_t)static EmergencyServicesInvocation.schema, a1);
}

uint64_t protocol witness for Generable.init(from:) in conformance EmergencyServicesInvocation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized EmergencyServicesInvocation.init(from:)(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t key path getter for CallEmergencyServicesTool.invocation : CallEmergencyServicesTool@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool, (void (*)(uint64_t))type metadata accessor for CallEmergencyServicesTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 64);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 48);
  *(void *)(a2 + 16) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for CallEmergencyServicesTool.invocation : CallEmergencyServicesTool()
{
  return swift_bridgeObjectRelease();
}

uint64_t CallEmergencyServicesTool.invoke(arguments:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 24) = a2;
  *(unsigned char *)(v4 + 48) = a1;
  return MEMORY[0x270FA2498](CallEmergencyServicesTool.invoke(arguments:), 0, 0);
}

uint64_t CallEmergencyServicesTool.invoke(arguments:)()
{
  uint64_t v20 = v0;
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.modelInteraction);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 32);
  if (v4)
  {
    uint64_t v18 = *(void *)(v0 + 24);
    char v6 = *(unsigned char *)(v0 + 48);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v19[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    unint64_t v9 = EmergencyServicesInvocation.EmergencyService.rawValue.getter(v6);
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v5, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v2, v3, "ACME invoked call_emergency_services tool with situation '%s', rationale: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v8, -1, -1);
    MEMORY[0x25336A180](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v12 = *(void *)(v0 + 32);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v13 = *(void *)(v0 + 24);
  uint64_t v14 = *(unsigned __int8 *)(v0 + 48);
  swift_getKeyPath();
  uint64_t v15 = (void *)swift_task_alloc();
  v15[2] = v11;
  v15[3] = v14;
  v15[4] = v13;
  v15[5] = v12;
  *(void *)(v0 + 16) = v11;
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool, (void (*)(uint64_t))type metadata accessor for CallEmergencyServicesTool);
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  id v16 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
  return v16(1701736292, 0xE400000000000000);
}

uint64_t CallEmergencyServicesTool.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC26GenerativeAssistantActions25CallEmergencyServicesTool___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for CallEmergencyServicesTool()
{
  return type metadata accessor for CallEmergencyServicesTool(0);
}

uint64_t type metadata accessor for CallEmergencyServicesTool(uint64_t a1)
{
  return type metadata accessor for CallEmergencyServicesTool(a1, (uint64_t *)&type metadata singleton initialization cache for CallEmergencyServicesTool);
}

uint64_t type metadata completion function for CallEmergencyServicesTool()
{
  return type metadata completion function for CallEmergencyServicesTool();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for Tooling.invoke(arguments:) in conformance CallEmergencyServicesTool(uint64_t a1, char *a2)
{
  *(void *)(v3 + 16) = a1;
  char v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = *v2;
  uint64_t v8 = swift_task_alloc();
  *(void *)(v3 + 24) = v8;
  *(void *)uint64_t v8 = v3;
  *(void *)(v8 + 8) = thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@owned String, @error @owned Error);
  *(void *)(v8 + 32) = v6;
  *(void *)(v8 + 40) = v7;
  *(void *)(v8 + 24) = v5;
  *(unsigned char *)(v8 + 48) = v4;
  return MEMORY[0x270FA2498](CallEmergencyServicesTool.invoke(arguments:), 0, 0);
}

uint64_t protocol witness for static Generable.schema.getter in conformance TextInputTool.TextInputRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static Generable.schema.getter in conformance EmergencyServicesInvocation(&one-time initialization token for schema, (uint64_t)static TextInputTool.TextInputRequest.schema, a1);
}

uint64_t protocol witness for static Generable.schema.getter in conformance EmergencyServicesInvocation@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Schema();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t protocol witness for Generable.init(from:) in conformance TextInputTool.TextInputRequest@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized TextInputTool.TextInputRequest.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t TextInputTool.userPromptCallback.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type TextInputTool and conformance TextInputTool, (void (*)(uint64_t))type metadata accessor for TextInputTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 48);
  swift_retain();
  return v1;
}

uint64_t key path getter for TextInputTool.userPromptCallback : TextInputTool@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type TextInputTool and conformance TextInputTool, (void (*)(uint64_t))type metadata accessor for TextInputTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@owned String, @error @owned Error);
  a2[1] = v6;
  return swift_retain();
}

uint64_t thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@owned String, @error @owned Error)(uint64_t a1, uint64_t *a2, int *a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *uint64_t v6 = v3;
  v6[1] = thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@owned String, @error @owned Error);
  return v8(v4, v5);
}

uint64_t key path setter for TextInputTool.userPromptCallback : TextInputTool(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_getKeyPath();
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type TextInputTool and conformance TextInputTool, (void (*)(uint64_t))type metadata accessor for TextInputTool);
  swift_retain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed String) -> (@out String, @error @owned Error)(uint64_t a1, uint64_t a2, int *a3)
{
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v6 = (int *)((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[6] = v4;
  *uint64_t v4 = v3;
  v4[1] = thunk for @escaping @callee_guaranteed @async (@in_guaranteed String) -> (@out String, @error @owned Error);
  return ((uint64_t (*)(void *, void *))v6)(v3 + 4, v3 + 2);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed String) -> (@out String, @error @owned Error)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *(void *)(v2 + 40);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    return v8(v6, v7);
  }
}

uint64_t TextInputTool.invoke(arguments:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v3[8] = *v2;
  return MEMORY[0x270FA2498](TextInputTool.invoke(arguments:), 0, 0);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v6 = *v3;
  *(void *)(*v3 + 88) = v2;
  swift_task_dealloc();
  if (v2)
  {
    return MEMORY[0x270FA2498](TextInputTool.invoke(arguments:), 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v7(a1, a2);
  }
}

uint64_t TextInputTool.invoke(arguments:)()
{
  id v16 = v0;
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.modelInteraction);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v15 = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x800000024FA4A140, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v2, v3, "%s.%s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v5, -1, -1);
    MEMORY[0x25336A180](v4, -1, -1);
  }

  uint64_t v8 = v0[7];
  swift_getKeyPath();
  v0[2] = v8;
  lazy protocol witness table accessor for type CallEmergencyServicesTool and conformance CallEmergencyServicesTool(&lazy protocol witness table cache variable for type TextInputTool and conformance TextInputTool, (void (*)(uint64_t))type metadata accessor for TextInputTool);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v9 = *(int **)(v8 + 48);
  v0[9] = *(void *)(v8 + 56);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)v9 + *v9);
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[10] = v10;
  *uint64_t v10 = v0;
  v10[1] = TextInputTool.invoke(arguments:);
  uint64_t v12 = v0[5];
  uint64_t v11 = v0[6];
  return v14(v12, v11);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TextInputTool.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC26GenerativeAssistantActions13TextInputTool___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TextInputTool()
{
  return type metadata accessor for TextInputTool(0);
}

uint64_t type metadata accessor for TextInputTool(uint64_t a1)
{
  return type metadata accessor for CallEmergencyServicesTool(a1, (uint64_t *)&type metadata singleton initialization cache for TextInputTool);
}

uint64_t type metadata accessor for CallEmergencyServicesTool(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for TextInputTool()
{
  return type metadata completion function for CallEmergencyServicesTool();
}

uint64_t destroy for EmergencyServicesInvocation()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for EmergencyServicesInvocation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EmergencyServicesInvocation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for EmergencyServicesInvocation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmergencyServicesInvocation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyServicesInvocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyServicesInvocation()
{
  return &type metadata for EmergencyServicesInvocation;
}

unint64_t lazy protocol witness table accessor for type EmergencyServicesInvocation and conformance EmergencyServicesInvocation()
{
  unint64_t result = lazy protocol witness table cache variable for type EmergencyServicesInvocation and conformance EmergencyServicesInvocation;
  if (!lazy protocol witness table cache variable for type EmergencyServicesInvocation and conformance EmergencyServicesInvocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyServicesInvocation and conformance EmergencyServicesInvocation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmergencyServicesInvocation and conformance EmergencyServicesInvocation;
  if (!lazy protocol witness table cache variable for type EmergencyServicesInvocation and conformance EmergencyServicesInvocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyServicesInvocation and conformance EmergencyServicesInvocation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextInputTool.TextInputRequest and conformance TextInputTool.TextInputRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type TextInputTool.TextInputRequest and conformance TextInputTool.TextInputRequest;
  if (!lazy protocol witness table cache variable for type TextInputTool.TextInputRequest and conformance TextInputTool.TextInputRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextInputTool.TextInputRequest and conformance TextInputTool.TextInputRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextInputTool.TextInputRequest and conformance TextInputTool.TextInputRequest;
  if (!lazy protocol witness table cache variable for type TextInputTool.TextInputRequest and conformance TextInputTool.TextInputRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextInputTool.TextInputRequest and conformance TextInputTool.TextInputRequest);
  }
  return result;
}

uint64_t protocol witness for Tooling.name.getter in conformance TextInputTool()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for Tooling.usageDescription.getter in conformance TextInputTool()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for Tooling.invoke(arguments:) in conformance TextInputTool(uint64_t a1, uint64_t *a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *v2;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v7;
  *unint64_t v7 = v3;
  v7[1] = protocol witness for Tooling.invoke(arguments:) in conformance TextInputTool;
  v7[6] = v5;
  v7[7] = v6;
  v7[5] = v4;
  v7[8] = *v6;
  return MEMORY[0x270FA2498](TextInputTool.invoke(arguments:), 0, 0);
}

uint64_t protocol witness for Tooling.invoke(arguments:) in conformance TextInputTool(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (!v2)
  {
    uint64_t v8 = *(void **)(v6 + 16);
    void *v8 = a1;
    v8[1] = a2;
  }
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t partial apply for closure #1 in CallEmergencyServicesTool.invocation.setter()
{
  return partial apply for closure #1 in CallEmergencyServicesTool.invocation.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(v0 + 24);
  *(void *)(v1 + 64) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t specialized EmergencyServicesInvocation.init(from:)(uint64_t a1)
{
  lazy protocol witness table accessor for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService();
  GeneratedValues.extract<A>(field:)();
  GeneratedValues.extract<A>(field:)();
  uint64_t v3 = type metadata accessor for GeneratedValues();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return v4;
}

uint64_t specialized EmergencyServicesInvocation.EmergencyService.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12) {
    return 18;
  }
  else {
    return v0;
  }
}

uint64_t specialized TextInputTool.TextInputRequest.init(from:)(uint64_t a1)
{
  GeneratedValues.extract<A>(field:)();
  uint64_t v3 = type metadata accessor for GeneratedValues();
  if (v1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return v5;
}

uint64_t sub_24FA12B00()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed String) -> (@out String, @error @owned Error)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in GenerateTextController.generateRichContent(userQuery:useCaseID:invocationContext:requestValueCallback:requestConfirmationCallback:progressReportingCallback:responseGenerationKeepAliveCallback:showJITEnablementCallback:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed String) -> (@out String, @error @owned Error)
                                                       + async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed String) -> (@out String, @error @owned Error));
  return v8(a1, a2, v6);
}

uint64_t partial apply for closure #1 in TextInputTool.userPromptCallback.setter()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[4];
  *(void *)(v1 + 48) = v0[3];
  *(void *)(v1 + 56) = v2;
  swift_retain();
  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@owned String, @error @owned Error)(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t *, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@owned String, @error @owned Error)
                                                         + async function pointer to thunk for @escaping @callee_guaranteed @async (@guaranteed String) -> (@owned String, @error @owned Error));
  return v8(a1, a2, v6);
}

unint64_t lazy protocol witness table accessor for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService()
{
  unint64_t result = lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService;
  if (!lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService;
  if (!lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService;
  if (!lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService;
  if (!lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmergencyServicesInvocation.EmergencyService and conformance EmergencyServicesInvocation.EmergencyService);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextInputTool.TextInputRequest()
{
  return &type metadata for TextInputTool.TextInputRequest;
}

uint64_t getEnumTagSinglePayload for EmergencyServicesInvocation.EmergencyService(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EmergencyServicesInvocation.EmergencyService(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *unint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24FA12EC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyServicesInvocation.EmergencyService()
{
  return &type metadata for EmergencyServicesInvocation.EmergencyService;
}

unint64_t lazy protocol witness table accessor for type [EmergencyServicesInvocation.EmergencyService] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [EmergencyServicesInvocation.EmergencyService] and conformance [A];
  if (!lazy protocol witness table cache variable for type [EmergencyServicesInvocation.EmergencyService] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [EmergencyServicesInvocation.EmergencyService]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [EmergencyServicesInvocation.EmergencyService] and conformance [A]);
  }
  return result;
}

uint64_t RunningBoardAssertion.__deallocating_deinit()
{
  uint64_t v1 = v0;
  int v2 = *(void **)(v0 + 16);
  if (v2)
  {
    uint64_t v3 = one-time initialization token for runningBoard;
    id v4 = v2;
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.runningBoard);
    unsigned int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_24F9A2000, v6, v7, "Invalidating RBS assertion.", v8, 2u);
      MEMORY[0x25336A180](v8, -1, -1);
    }

    objc_msgSend(v4, sel_invalidate);
    uint64_t v9 = *(void **)(v1 + 16);
    *(void *)(v1 + 16) = 0;

    int v2 = *(void **)(v1 + 16);
  }

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RunningBoardAssertion()
{
  return self;
}

uint64_t static GeneratedResponse.failureResponse(_:catId:)@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  unint64_t v4 = FixedResponse.rawValue.getter();
  uint64_t v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeneratedResponse.RichContentEntity>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_24FA3E1D0;
  *(void *)(v7 + 32) = FixedResponse.rawValue.getter();
  *(void *)(v7 + 40) = v8;
  *(unsigned char *)(v7 + 48) = 0;
  if (CatId.rawValue.getter() == 0x7974706D65 && v9 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_24FA3E1D0;
    *(void *)(v11 + 32) = FixedResponse.rawValue.getter();
    *(void *)(v11 + 40) = v12;
    goto LABEL_7;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10) {
    goto LABEL_5;
  }
  uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_7:
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v14 = (int *)type metadata accessor for GeneratedResponse();
  uint64_t v15 = a2 + v14[10];
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v14[13];
  if (one-time initialization token for contentProviderName != -1) {
    swift_once();
  }
  uint64_t v18 = (void *)(a2 + v17);
  uint64_t v19 = *(void *)algn_269A49808;
  void *v18 = static Disclaimer.contentProviderName;
  v18[1] = v19;
  uint64_t v20 = (void *)(a2 + v14[14]);
  *uint64_t v20 = 0xD000000000000022;
  v20[1] = 0x800000024FA4A2A0;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v11;
  *(unsigned char *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v13;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + v14[15]) = v13;
  *(unsigned char *)(a2 + v14[12]) = 1;
  uint64_t v21 = (void *)(a2 + v14[11]);
  *uint64_t v21 = 0;
  v21[1] = 0xE000000000000000;
  *(unsigned char *)(a2 + v14[16]) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t GeneratedResponse.init(_:mode:useCaseID:isFirstRequest:)@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unsigned __int8 v34 = *a2;
  if (one-time initialization token for displayForwardSupportingDialog != -1) {
    swift_once();
  }
  long long v35 = xmmword_24FA3FDD0;
  uint64_t v36 = 5;
  uint64_t v37 = static FixedResponse.displayForwardSupportingDialog;
  uint64_t v38 = unk_269A496D0;
  swift_bridgeObjectRetain();
  uint64_t v32 = ModelResponse.dialog(mode:useCaseID:config:isFirstRequest:)(&v34, a3, (Swift::Int *)&v35, a4 & 1);
  swift_bridgeObjectRelease();
  uint64_t v9 = a1[4];
  uint64_t v33 = a3;
  char v10 = (int *)type metadata accessor for ModelResponse();
  uint64_t v11 = (void *)((char *)a1 + v10[11]);
  uint64_t v31 = *v11;
  uint64_t v28 = v11[1];
  uint64_t v12 = *a1;
  uint64_t v13 = a1[3];
  uint64_t v14 = *(void *)((char *)a1 + v10[9]);
  uint64_t v15 = (uint64_t)a1 + v10[8];
  uint64_t v16 = (int *)type metadata accessor for GeneratedResponse();
  outlined init with copy of URL?(v15, a5 + v16[10]);
  uint64_t v17 = a1[2];
  uint64_t v30 = a1[1];
  char v29 = *((unsigned char *)a1 + v10[10]);
  uint64_t v18 = v16[13];
  uint64_t v19 = one-time initialization token for contentProviderName;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = (void *)(a5 + v18);
  uint64_t v21 = MEMORY[0x263F8EE78];
  if (v14) {
    uint64_t v21 = v14;
  }
  uint64_t v22 = *(void *)algn_269A49808;
  *uint64_t v20 = static Disclaimer.contentProviderName;
  v20[1] = v22;
  uint64_t v23 = (void *)(a5 + v16[14]);
  *uint64_t v23 = 0xD000000000000022;
  v23[1] = 0x800000024FA4A2A0;
  *(void *)a5 = v31;
  *(void *)(a5 + 8) = v28;
  *(void *)(a5 + 16) = v12;
  *(void *)(a5 + 24) = v32;
  *(unsigned char *)(a5 + 32) = 23;
  *(void *)(a5 + 40) = v9;
  *(void *)(a5 + 48) = v13;
  *(void *)(a5 + v16[15]) = v21;
  *(unsigned char *)(a5 + v16[12]) = 0;
  uint64_t v24 = (void *)(a5 + v16[11]);
  *uint64_t v24 = v30;
  v24[1] = v17;
  *(unsigned char *)(a5 + v16[16]) = v29;
  uint64_t v25 = type metadata accessor for GenerativeAssistantUseCase();
  double v26 = *(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8);
  swift_bridgeObjectRetain();
  v26(v33, v25);
  return outlined destroy of ModelResponse((uint64_t)a1);
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

GenerativeAssistantActions::Attribution __swiftcall Attribution.init(displayUrl:url:)(Swift::String displayUrl, Swift::String url)
{
  *int v2 = displayUrl;
  v2[1] = url;
  result.url = url;
  result.displayUrl = displayUrl;
  return result;
}

BOOL static GeneratedResponse.Outcome.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GeneratedResponse.Outcome.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int GeneratedResponse.Outcome.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t GeneratedResponse.text.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeneratedResponse.value.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GeneratedResponse.dialog.getter()
{
  return swift_bridgeObjectRetain();
}

void GeneratedResponse.catId.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

uint64_t GeneratedResponse.attributions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GeneratedResponse.suggestedQueries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GeneratedResponse.punchOutURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GeneratedResponse() + 40);
  return outlined init with copy of URL?(v3, a1);
}

uint64_t type metadata accessor for GeneratedResponse()
{
  uint64_t result = type metadata singleton initialization cache for GeneratedResponse;
  if (!type metadata singleton initialization cache for GeneratedResponse) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GeneratedResponse.summary.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GeneratedResponse() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeneratedResponse.outcome.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for GeneratedResponse();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 48));
  return result;
}

uint64_t GeneratedResponse.contentProviderName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GeneratedResponse() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeneratedResponse.contentDisclaimer.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for GeneratedResponse() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeneratedResponse.criticalDisclaimers.getter()
{
  type metadata accessor for GeneratedResponse();
  return swift_bridgeObjectRetain();
}

uint64_t GeneratedResponse.hasExceededRequestBudget.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for GeneratedResponse() + 64));
}

uint64_t one-time initialization function for textAssistantHandoffResponse()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v0 - 8);
  int v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = (int *)type metadata accessor for GeneratedResponse();
  __swift_allocate_value_buffer((uint64_t)v3, static GeneratedResponse.textAssistantHandoffResponse);
  uint64_t v4 = __swift_project_value_buffer((uint64_t)v3, (uint64_t)static GeneratedResponse.textAssistantHandoffResponse);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
  uint64_t v6 = v3[13];
  if (one-time initialization token for contentProviderName != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)(v4 + v6);
  uint64_t v8 = *((void *)&static Disclaimer.contentProviderName + 1);
  *uint64_t v7 = static Disclaimer.contentProviderName;
  v7[1] = v8;
  uint64_t v9 = (void *)(v4 + v3[14]);
  *uint64_t v9 = 0xD000000000000022;
  v9[1] = 0x800000024FA4A2A0;
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0xE000000000000000;
  *(void *)(v4 + 16) = &outlined read-only object #0 of one-time initialization function for textAssistantHandoffResponse;
  *(void *)(v4 + 24) = &outlined read-only object #1 of one-time initialization function for textAssistantHandoffResponse;
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(unsigned char *)(v4 + 32) = 23;
  *(void *)(v4 + 40) = v10;
  *(void *)(v4 + 48) = v10;
  *(void *)(v4 + v3[15]) = v10;
  *(unsigned char *)(v4 + v3[12]) = 2;
  outlined init with take of URL?((uint64_t)v2, v4 + v3[10]);
  uint64_t v11 = (void *)(v4 + v3[11]);
  *uint64_t v11 = 0;
  v11[1] = 0xE000000000000000;
  *(unsigned char *)(v4 + v3[16]) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t GeneratedResponse.getBreadCrumbAttributions(_:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v91 = v6;
  uint64_t v92 = a1;
  if (v6)
  {
    uint64_t v89 = (void *)v4;
    uint64_t v93 = (void *)v3;
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v10 = *(v8 - 3);
      uint64_t v9 = *(v8 - 2);
      uint64_t v11 = *(v8 - 1);
      uint64_t v12 = *v8;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?((uint64_t)v7);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
      uint64_t v16 = v93[2];
      BOOL v17 = (v14 & 1) == 0;
      uint64_t v18 = v16 + v17;
      if (__OFADD__(v16, v17)) {
        goto LABEL_82;
      }
      char v19 = v14;
      if (v93[3] >= v18)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
        uint64_t v20 = v93;
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
        uint64_t v20 = v93;
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
        if ((v19 & 1) != (v22 & 1)) {
          goto LABEL_86;
        }
        unint64_t v15 = v21;
      }
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        v20[(v15 >> 6) + 8] |= 1 << v15;
        uint64_t v23 = (uint64_t *)(v20[6] + 16 * v15);
        *uint64_t v23 = v10;
        v23[1] = v9;
        *(void *)(v20[7] + 8 * v15) = MEMORY[0x263F8EE78];
        uint64_t v24 = v20[2];
        uint64_t v25 = v20;
        uint64_t v26 = v24 + 1;
        BOOL v27 = __OFADD__(v24, 1);
        swift_bridgeObjectRetain();
        if (v27) {
          goto LABEL_84;
        }
        void v25[2] = v26;
        uint64_t v20 = v25;
      }
      swift_bridgeObjectRetain();
      uint64_t v28 = v20[7];
      uint64_t v93 = v20;
      swift_bridgeObjectRelease();
      char v29 = *(void **)(v28 + 8 * v15);
      char v30 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v28 + 8 * v15) = v29;
      if ((v30 & 1) == 0)
      {
        char v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        *(void *)(v28 + 8 * v15) = v29;
      }
      unint64_t v32 = v29[2];
      unint64_t v31 = v29[3];
      if (v32 >= v31 >> 1)
      {
        char v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v29);
        *(void *)(v28 + 8 * v15) = v29;
      }
      v8 += 4;
      v29[2] = v32 + 1;
      uint64_t v33 = &v29[2 * v32];
      v33[4] = v11;
      v33[5] = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v7 = specialized thunk for @callee_guaranteed () -> (@owned [String]);
      --v6;
    }
    while (v6);
    a1 = v92;
    swift_bridgeObjectRelease();
    uint64_t v86 = specialized thunk for @callee_guaranteed () -> (@owned [String]);
    unint64_t v3 = (unint64_t)v20;
    uint64_t v5 = v89;
    uint64_t v6 = v91;
  }
  else
  {
    uint64_t v86 = 0;
  }
  unint64_t v34 = v3 + 64;
  uint64_t v35 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & *(void *)(v3 + 64);
  int64_t v38 = (unint64_t)(v35 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v39 = 0;
  unint64_t v94 = v3;
  int64_t v87 = v38;
  unint64_t v88 = v3 + 64;
  if (!v37)
  {
LABEL_29:
    int64_t v43 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      goto LABEL_83;
    }
    if (v43 < v38)
    {
      unint64_t v44 = *(void *)(v34 + 8 * v43);
      ++v39;
      if (v44) {
        goto LABEL_44;
      }
      int64_t v39 = v43 + 1;
      if (v43 + 1 < v38)
      {
        unint64_t v44 = *(void *)(v34 + 8 * v39);
        if (v44) {
          goto LABEL_44;
        }
        int64_t v39 = v43 + 2;
        if (v43 + 2 < v38)
        {
          unint64_t v44 = *(void *)(v34 + 8 * v39);
          if (v44) {
            goto LABEL_44;
          }
          int64_t v39 = v43 + 3;
          if (v43 + 3 < v38)
          {
            unint64_t v44 = *(void *)(v34 + 8 * v39);
            if (!v44)
            {
              int64_t v45 = v43 + 4;
              if (v45 < v38)
              {
                unint64_t v44 = *(void *)(v34 + 8 * v45);
                if (!v44)
                {
                  while (1)
                  {
                    int64_t v39 = v45 + 1;
                    if (__OFADD__(v45, 1)) {
                      goto LABEL_85;
                    }
                    if (v39 >= v38) {
                      goto LABEL_61;
                    }
                    unint64_t v44 = *(void *)(v34 + 8 * v39);
                    ++v45;
                    if (v44) {
                      goto LABEL_44;
                    }
                  }
                }
                int64_t v39 = v45;
                goto LABEL_44;
              }
              goto LABEL_61;
            }
LABEL_44:
            unint64_t v37 = (v44 - 1) & v44;
            unint64_t v41 = __clz(__rbit64(v44)) + (v39 << 6);
            goto LABEL_27;
          }
        }
      }
    }
LABEL_61:
    swift_release();
    if (!v6)
    {
      uint64_t v65 = (void *)MEMORY[0x263F8EE78];
LABEL_79:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed @async (@in_guaranteed IntentResult, @in_guaranteed ConfirmationActionName, @unowned Bool) -> (@error @owned Error))?((uint64_t)v86);
      return (uint64_t)v65;
    }
    swift_bridgeObjectRetain();
    uint64_t v64 = (uint64_t *)(a1 + 56);
    uint64_t v65 = (void *)MEMORY[0x263F8EE78];
    uint64_t v66 = v5;
    while (1)
    {
      uint64_t v69 = *(v64 - 3);
      uint64_t v70 = *(v64 - 2);
      uint64_t v72 = *(v64 - 1);
      uint64_t v71 = *v64;
      uint64_t v73 = v5[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v73) {
        goto LABEL_73;
      }
      swift_bridgeObjectRetain();
      unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v72, v71);
      if ((v75 & 1) == 0) {
        break;
      }
      uint64_t v76 = (uint64_t *)(v5[7] + 16 * v74);
      uint64_t v78 = *v76;
      uint64_t v77 = v76[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v79 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65[2] + 1, 1, v65);
      }
      unint64_t v81 = v65[2];
      unint64_t v80 = v65[3];
      if (v81 >= v80 >> 1) {
        uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v80 > 1), v81 + 1, 1, v65);
      }
      v65[2] = v81 + 1;
      uint64_t v82 = &v65[4 * v81];
      v82[4] = v78;
      v82[5] = v77;
      uint64_t v68 = v82 + 6;
      uint64_t v6 = v79;
LABEL_64:
      v64 += 4;
      uint64_t *v68 = v72;
      v68[1] = v71;
      --v6;
      uint64_t v5 = v66;
      if (!v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_79;
      }
    }
    swift_bridgeObjectRelease();
LABEL_73:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65[2] + 1, 1, v65);
    }
    unint64_t v84 = v65[2];
    unint64_t v83 = v65[3];
    if (v84 >= v83 >> 1) {
      uint64_t v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v83 > 1), v84 + 1, 1, v65);
    }
    v65[2] = v84 + 1;
    uint64_t v67 = &v65[4 * v84];
    v67[4] = v69;
    v67[5] = v70;
    uint64_t v68 = v67 + 6;
    goto LABEL_64;
  }
LABEL_26:
  while (1)
  {
    unint64_t v40 = __clz(__rbit64(v37));
    v37 &= v37 - 1;
    unint64_t v41 = v40 | (v39 << 6);
LABEL_27:
    unint64_t v42 = *(void *)(*(void *)(*(void *)(v3 + 56) + 8 * v41) + 16);
    if (v42 >= 2) {
      break;
    }
    if (!v37) {
      goto LABEL_29;
    }
  }
  int64_t v90 = v39;
  uint64_t v46 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  while (1)
  {
    uint64_t v49 = *(v46 - 1);
    uint64_t v48 = *v46;
    swift_bridgeObjectRetain();
    Swift::String v50 = String.createBreadcrumbURL(_:)(0);
    char v51 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48);
    uint64_t v54 = v5[2];
    BOOL v55 = (v52 & 1) == 0;
    uint64_t v56 = v54 + v55;
    if (__OFADD__(v54, v55)) {
      break;
    }
    char v57 = v52;
    if (v5[3] >= v56)
    {
      if (v51)
      {
        if ((v52 & 1) == 0) {
          goto LABEL_55;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v57 & 1) == 0) {
          goto LABEL_55;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, v51);
      unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48);
      if ((v57 & 1) != (v59 & 1)) {
        goto LABEL_86;
      }
      unint64_t v53 = v58;
      if ((v57 & 1) == 0)
      {
LABEL_55:
        v5[(v53 >> 6) + 8] |= 1 << v53;
        uint64_t v60 = (uint64_t *)(v5[6] + 16 * v53);
        *uint64_t v60 = v49;
        v60[1] = v48;
        *(Swift::String *)(v5[7] + 16 * v53) = v50;
        uint64_t v61 = v5[2];
        BOOL v62 = __OFADD__(v61, 1);
        uint64_t v63 = v61 + 1;
        if (v62) {
          goto LABEL_81;
        }
        v5[2] = v63;
        swift_bridgeObjectRetain();
        goto LABEL_47;
      }
    }
    id v47 = (Swift::String *)(v5[7] + 16 * v53);
    swift_bridgeObjectRelease();
    *id v47 = v50;
LABEL_47:
    v46 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v42)
    {
      swift_bridgeObjectRelease();
      a1 = v92;
      unint64_t v3 = v94;
      int64_t v39 = v90;
      uint64_t v6 = v91;
      int64_t v38 = v87;
      unint64_t v34 = v88;
      if (!v37) {
        goto LABEL_29;
      }
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized thunk for @callee_guaranteed () -> (@owned [String])(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t Attribution.displayUrl.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attribution.url.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attribution.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int Attribution.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Attribution()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Attribution()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Attribution()
{
  return Hasher._finalize()();
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Attribution>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeneratedResponse.RichContentEntity>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ContentLoaderProviding>, &demangling cache variable for type metadata for ContentLoaderProviding);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Tooling>, &demangling cache variable for type metadata for Tooling);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ScreenContent>, type metadata accessor for ScreenContent, type metadata accessor for ScreenContent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolType>, MEMORY[0x263F40E50], MEMORY[0x263F40E50]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Annotation>, MEMORY[0x263F7F8E0], MEMORY[0x263F7F8E0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x263F8F3A0], MEMORY[0x263F8F3A0]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  long long v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = 8 * a1;
    uint64_t v7 = *(void *)&aSourceTfileNam_1[v6];
    uint64_t v8 = *(void *)&aSourceTfileNam_1[v6 + 32];
    while (*(void *)&aSourceTfileNam_1[8 * *(char *)(*(void *)(v2 + 48) + v4)] != v7
         || *(void *)&aSourceTfileNam_1[8 * *(char *)(*(void *)(v2 + 48) + v4) + 32] != v8)
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    size_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *size_t v19 = v34;
    v19[1] = v33;
    BOOL v20 = (void *)(*(void *)(v7 + 56) + v18);
    *BOOL v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  long long v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ExtendedAttributeUtils, String?>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v31 = v2;
  unint64_t v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      size_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      BOOL v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v32 + 8 * v21);
    ++v14;
    if (!v23)
    {
      uint64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v32 + 8 * v14);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v31;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v32 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v32 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v14 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    BOOL v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    BOOL v29 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
    uint64_t v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      uint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(unsigned char *)(*(void *)(v7 + 48) + v18) = v29;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v31;
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v22, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      size_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      BOOL v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    BOOL v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    unint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = 0;
      int64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a5[6] + result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    BOOL v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  long long v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ExtendedAttributeUtils, String?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(_OWORD *)(*(void *)(v2 + 56) + 16 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(_OWORD *)(*(void *)(v4 + 56) + 16 * v15) = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    BOOL v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized static Attribution.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeneratedResponse.Outcome and conformance GeneratedResponse.Outcome()
{
  unint64_t result = lazy protocol witness table cache variable for type GeneratedResponse.Outcome and conformance GeneratedResponse.Outcome;
  if (!lazy protocol witness table cache variable for type GeneratedResponse.Outcome and conformance GeneratedResponse.Outcome)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeneratedResponse.Outcome and conformance GeneratedResponse.Outcome);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Attribution and conformance Attribution()
{
  unint64_t result = lazy protocol witness table cache variable for type Attribution and conformance Attribution;
  if (!lazy protocol witness table cache variable for type Attribution and conformance Attribution)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Attribution and conformance Attribution);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for GeneratedResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v9 = a2[6];
    uint64_t v10 = a3[10];
    __dst = (void *)(a1 + v10);
    uint64_t v11 = (char *)a2 + v10;
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v9;
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v32 = *(void *)(v12 - 8);
    uint64_t v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
    int64_t v13 = v11;
    uint64_t v14 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33(v13, 1, v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v13, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(__dst, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v17 = a3[11];
    uint64_t v18 = a3[12];
    uint64_t v19 = (void *)((char *)v4 + v17);
    BOOL v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    *((unsigned char *)v4 + v18) = *((unsigned char *)a2 + v18);
    uint64_t v22 = a3[13];
    uint64_t v23 = a3[14];
    uint64_t v24 = (void *)((char *)v4 + v22);
    int64_t v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    int64_t v27 = (void *)((char *)v4 + v23);
    unint64_t v28 = (uint64_t *)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = a3[16];
    *(void *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *((unsigned char *)v4 + v30) = *((unsigned char *)a2 + v30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for GeneratedResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeneratedResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = a3[10];
  __dst = (void *)(a1 + v9);
  uint64_t v10 = (const void *)(a2 + v9);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v11 - 8);
  uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31(v12, 1, v13))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v12, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(__dst, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v15 = a3[11];
  uint64_t v16 = a3[12];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v20 = a3[13];
  uint64_t v21 = a3[14];
  uint64_t v22 = (void *)(a1 + v20);
  uint64_t v23 = (void *)(a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  int64_t v25 = (void *)(a1 + v21);
  uint64_t v26 = (void *)(a2 + v21);
  uint64_t v27 = v26[1];
  *int64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v28) = *(unsigned char *)(a2 + v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeneratedResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v18 = a3[13];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[14];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  return a1;
}

uint64_t initializeWithTake for GeneratedResponse(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  return a1;
}

uint64_t assignWithTake for GeneratedResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[11];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[14];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  void *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeneratedResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24FA172DC);
}

uint64_t sub_24FA172DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for GeneratedResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24FA173A4);
}

uint64_t sub_24FA173A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for GeneratedResponse()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for URL?()
{
  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for GeneratedResponse.Outcome(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24FA1764CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeneratedResponse.Outcome()
{
  return &type metadata for GeneratedResponse.Outcome;
}

uint64_t outlined copy of GeneratedResponse.RichContentEntity(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t destroy for GeneratedResponse.RichContentEntity(uint64_t a1)
{
  return outlined consume of GeneratedResponse.RichContentEntity(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of GeneratedResponse.RichContentEntity(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for GeneratedResponse.RichContentEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GeneratedResponse.RichContentEntity(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for GeneratedResponse.RichContentEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of GeneratedResponse.RichContentEntity(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of GeneratedResponse.RichContentEntity(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for GeneratedResponse.RichContentEntity(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of GeneratedResponse.RichContentEntity(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeneratedResponse.RichContentEntity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GeneratedResponse.RichContentEntity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for GeneratedResponse.RichContentEntity(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GeneratedResponse.RichContentEntity()
{
  return &type metadata for GeneratedResponse.RichContentEntity;
}

uint64_t destroy for Attribution()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Attribution(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Attribution(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Attribution(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Attribution(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Attribution(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attribution()
{
  return &type metadata for Attribution;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ScreenshotLoaderProviding.load()(uint64_t a1, uint64_t a2)
{
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of TextAssistantHandoffProviding.attemptHandoff(userQuery:);
  return v7(a1, a2);
}

uint64_t ScreenshotLoader.load()()
{
  v1[5] = v0;
  v1[6] = *v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](ScreenshotLoader.load(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  if (one-time initialization token for screenshot != -1) {
    swift_once();
  }
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.screenshot);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  unint64_t v6 = static os_log_type_t.debug.getter();
  unint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v10 = v0[7];
  if (v7)
  {
    uint64_t v19 = v0[7];
    uint64_t v11 = swift_slowAlloc();
    unint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    unint64_t v13 = _typeName(_:qualified:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x292864616F6CLL, 0xE600000000000000, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v5, v6, "%s.%s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v12, -1, -1);
    MEMORY[0x25336A180](v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v19);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v15 = (void *)swift_task_alloc();
  v0[10] = v15;
  uint64_t v16 = type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for UIImage);
  *uint64_t v15 = v0;
  v15[1] = ScreenshotLoader.load();
  uint64_t v17 = v0[5];
  return MEMORY[0x270FA2360](v0 + 2, 0, 0, 0x292864616F6CLL, 0xE600000000000000, partial apply for closure #1 in ScreenshotLoader.load(), v17, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ScreenshotLoader.load();
  }
  else {
    uint64_t v2 = ScreenshotLoader.load();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in ScreenshotLoader.load()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UIImage, Error>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  ScreenshotLoader.load(_:)((void (*)(void, void))partial apply for closure #1 in closure #1 in ImageLoader.load(mediaItem:), v6);
  return swift_release();
}

void ScreenshotLoader.load(_:)(void (*a1)(void, void), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for screenshot != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v4, (uint64_t)static Logger.screenshot);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v40[1] = v8;
    uint64_t v12 = v11;
    v40[0] = swift_slowAlloc();
    v45[0] = v40[0];
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v13 = _typeName(_:qualified:)();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x293A5F2864616F6CLL, 0xE800000000000000, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v9, v10, "%s.%s", (uint8_t *)v12, 0x16u);
    uint64_t v15 = v40[0];
    swift_arrayDestroy();
    MEMORY[0x25336A180](v15, -1, -1);
    MEMORY[0x25336A180](v12, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = (uint64_t)(v3 + 3);
  swift_beginAccess();
  outlined init with copy of ModelSessionFactory((uint64_t)(v3 + 3), (uint64_t)v45);
  uint64_t v17 = v46;
  uint64_t v18 = v47;
  __swift_project_boxed_opaque_existential_1(v45, v46);
  LOBYTE(v17) = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 40))(v17, v18);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
  if (v17)
  {
    swift_unownedRetainStrong();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_release();
    uint64_t v19 = (void (*)(unint64_t, char))swift_allocObject();
    uint64_t v20 = v41;
    uint64_t v21 = v42;
    *((void *)v19 + 2) = v3;
    *((void *)v19 + 3) = v20;
    *((void *)v19 + 4) = v21;
    uint64_t v22 = (objc_class *)type metadata accessor for ScreenshotDelegate();
    uint64_t v23 = (char *)objc_allocWithZone(v22);
    uint64_t v24 = (void (**)(unint64_t, char))&v23[OBJC_IVAR____TtC26GenerativeAssistantActions18ScreenshotDelegate_callback];
    *uint64_t v24 = partial apply for closure #1 in ScreenshotLoader.load(_:);
    v24[1] = v19;
    v43.receiver = v23;
    v43.super_class = v22;
    swift_retain();
    id v25 = objc_msgSendSuper2(&v43, sel_init);
    swift_unownedRelease();
    uint64_t v26 = (void *)v3[2];
    v3[2] = v25;

    uint64_t v27 = (void *)v3[2];
    swift_beginAccess();
    uint64_t v28 = v3[6];
    uint64_t v29 = v3[7];
    __swift_mutable_project_boxed_opaque_existential_1(v16, v28);
    uint64_t v30 = *(void (**)(void *, uint64_t, uint64_t))(v29 + 16);
    id v31 = v27;
    v30(v27, v28, v29);
    swift_endAccess();
    id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F65010]), sel_init);
    objc_msgSend(v32, sel_setShouldHideSiri_, 1);
    outlined init with copy of ModelSessionFactory(v16, (uint64_t)v45);
    uint64_t v33 = v46;
    uint64_t v34 = v47;
    __swift_project_boxed_opaque_existential_1(v45, v46);
    (*(void (**)(uint64_t, uint64_t))(v34 + 32))(v33, v34);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v45);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_24F9A2000, v35, v36, "Ended: handleScreenshot", v37, 2u);
      MEMORY[0x25336A180](v37, -1, -1);
    }
  }
  else
  {
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
    uint64_t v38 = (void *)swift_allocError();
    *int64_t v39 = 10;
    v41(v38, 1);
  }
}

void closure #1 in ScreenshotLoader.load(_:)(unint64_t a1, char a2, uint64_t a3, void (*a4)(unint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for URLError.Code();
  uint64_t v66 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v67 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong();
  unint64_t v14 = *(void **)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  swift_release();

  if (a2)
  {
    id v32 = (id *)(id)a1;
    if (one-time initialization token for screenshot != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.screenshot);
    uint64_t v34 = (id *)(id)a1;
    uint64_t v35 = (id *)(id)a1;
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      int64_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412290;
      int64_t v40 = (id *)(id)a1;
      uint64_t v41 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v69 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v39 = v41;
      outlined consume of Result<[WFContextualActionFile]?, Error>((id)a1, 1);
      outlined consume of Result<[WFContextualActionFile]?, Error>((id)a1, 1);
      _os_log_impl(&dword_24F9A2000, v36, v37, "Failed with error: %@", v38, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v39, -1, -1);
      MEMORY[0x25336A180](v38, -1, -1);
    }
    else
    {
      outlined consume of Result<[WFContextualActionFile]?, Error>((id)a1, 1);
      outlined consume of Result<[WFContextualActionFile]?, Error>((id)a1, 1);
    }

    uint64_t v42 = (id *)(id)a1;
    a4(a1, 1);
    outlined consume of Result<[WFContextualActionFile]?, Error>((id)a1, 1);
    outlined consume of Result<[WFContextualActionFile]?, Error>((id)a1, 1);
    return;
  }
  if (!a1)
  {
LABEL_29:
    type metadata accessor for SELFUtils();
    static SELFUtils.shared.getter();
    dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)();
    swift_release();
    lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
    uint64_t v60 = (void *)swift_allocError();
    *uint64_t v61 = 11;
    a4((unint64_t)v60, 1);

    return;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v15)
  {
LABEL_28:
    outlined consume of Result<[WFContextualActionFile]?, Error>((id)a1, 0);
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v63 = a4;
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v16 = (id)MEMORY[0x2533696C0](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v16 = *(id *)(a1 + 32);
  }
  uint64_t v17 = v16;
  uint64_t v65 = v11;
  outlined consume of Result<[WFContextualActionFile]?, Error>((id)a1, 0);
  id v64 = v17;
  id v18 = objc_msgSend(v17, sel_fileURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = URL.absoluteString.getter();
  unint64_t v21 = v20;
  Swift::Bool v22 = URL.startAccessingSecurityScopedResource()();
  if (one-time initialization token for screenshot != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.screenshot);
  swift_bridgeObjectRetain();
  v62[1] = v24;
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = v19;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v62[0] = a5;
    uint64_t v30 = v29;
    uint64_t v69 = v29;
    *(_DWORD *)uint64_t v28 = 67109378;
    LODWORD(v68) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 8) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v21, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24F9A2000, v25, v26, "Access granted: %{BOOL}d : Loading Screenshot %s", (uint8_t *)v28, 0x12u);
    swift_arrayDestroy();
    uint64_t v31 = v30;
    a5 = v62[0];
    MEMORY[0x25336A180](v31, -1, -1);
    MEMORY[0x25336A180](v28, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v43 = Data.init(contentsOf:options:)();
  unint64_t v45 = v44;
  outlined copy of Data._Representation(v43, v44);
  outlined copy of Data._Representation(v43, v45);
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v62[0] = a5;
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    uint64_t v69 = v49;
    *(_DWORD *)uint64_t v48 = 136315138;
    uint64_t v50 = MEMORY[0x2533678B0](v43, v45);
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v43, v45);
    outlined consume of Data._Representation(v43, v45);
    _os_log_impl(&dword_24F9A2000, v46, v47, "We have a data blob %s", v48, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v49, -1, -1);
    MEMORY[0x25336A180](v48, -1, -1);
  }
  else
  {
    outlined consume of Data._Representation(v43, v45);
    outlined consume of Data._Representation(v43, v45);
  }

  id v52 = objc_allocWithZone(MEMORY[0x263F827E8]);
  outlined copy of Data._Representation(v43, v45);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v54 = objc_msgSend(v52, sel_initWithData_, isa);
  outlined consume of Data._Representation(v43, v45);

  if (v54)
  {
    BOOL v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      char v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v57 = 0;
      _os_log_impl(&dword_24F9A2000, v55, v56, "Success loading screenshot", v57, 2u);
      MEMORY[0x25336A180](v57, -1, -1);
    }

    v71.Swift::Int value = 0;
    v71.Swift::Bool is_nil = 1;
    v72.Swift::Int value = 0;
    v72.Swift::Bool is_nil = 1;
    Class v58 = UIImage.resizedImage(maxPixelsLong:maxPixelsShort:)(v71, v72).super.isa;
    v63((unint64_t)v58, 0);
  }
  outlined consume of Data._Representation(v43, v45);
  URL.stopAccessingSecurityScopedResource()();
  id v59 = v64;
  objc_msgSend(v64, sel_dispose);

  (*(void (**)(char *, uint64_t))(v67 + 8))(v13, v65);
}

uint64_t ScreenshotLoader.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScreenshotLoader()
{
  return self;
}

uint64_t sub_24FA197A8()
{
  swift_unownedRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in ScreenshotLoader.load(_:)(unint64_t a1, char a2)
{
  closure #1 in ScreenshotLoader.load(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(unint64_t, uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

void outlined consume of Result<[WFContextualActionFile]?, Error>(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type URLError.Code and conformance URLError.Code()
{
  unint64_t result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    type metadata accessor for URLError.Code();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }
  return result;
}

uint64_t partial apply for closure #1 in ScreenshotLoader.load()(uint64_t a1)
{
  return closure #1 in ScreenshotLoader.load()(a1);
}

uint64_t sub_24FA19864()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UIImage, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t specialized ScreenshotLoader.__allocating_init(shortcutsScreenshotProvider:)(uint64_t a1)
{
  type metadata accessor for ScreenshotLoader();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  outlined init with copy of ShortcutsScreenshotProviding?(a1, (uint64_t)&v7);
  if (v8)
  {
    outlined destroy of ShortcutsScreenshotProviding?(a1);
    outlined init with take of ForegroundAppDetecting(&v7, (uint64_t)&v9);
  }
  else
  {
    outlined destroy of ShortcutsScreenshotProviding?((uint64_t)&v7);
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F85210]), sel_initWithSurface_, 3);
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F85450]), sel_initWithIgnoreContextualAssistanceLayersOption_, 1);
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F85230]), sel_initWithContextualAction_actionContext_, v4, v3);
    uint64_t v10 = type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for WFContextualActionRunnerClient);
    uint64_t v11 = &protocol witness table for WFContextualActionRunnerClient;

    *(void *)&long long v9 = v5;
    outlined destroy of ShortcutsScreenshotProviding?(a1);
  }
  outlined init with take of ForegroundAppDetecting(&v9, v2 + 24);
  return v2;
}

uint64_t outlined init with copy of ShortcutsScreenshotProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShortcutsScreenshotProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LowConfidenceKnowledgeUtil.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v11 = &type metadata for DefaultModelSessionFactory;
  uint64_t v12 = &protocol witness table for DefaultModelSessionFactory;
  uint64_t v8 = type metadata accessor for GenerativeAssistantFeatureFlagManager();
  uint64_t v9 = MEMORY[0x263F406E8];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v7);
  GenerativeAssistantFeatureFlagManager.init()();
  outlined init with copy of ModelSessionFactory((uint64_t)v10, (uint64_t)v6);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v4 = &type metadata for DefaultPromptFactory;
  id v5 = &protocol witness table for DefaultPromptFactory;
  *(void *)&long long v3 = swift_allocObject();
  outlined init with copy of DefaultPromptFactory((uint64_t)&static DefaultPromptFactory.instance, v3 + 16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  outlined init with take of ForegroundAppDetecting(v6, a1);
  outlined init with take of ForegroundAppDetecting(&v3, a1 + 40);
  return outlined init with take of ForegroundAppDetecting(&v7, a1 + 80);
}

uint64_t sub_24FA19B94()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t LowConfidenceKnowledgeUtil.search(query:callingIntent:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  return LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:)(a1, a2, a3, a4, 0, 0xF000000000000000, a5, a6);
}

uint64_t LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 112) = v20;
  *(void *)(v9 + 120) = v8;
  *(_OWORD *)(v9 + 96) = v19;
  *(void *)(v9 + 80) = a7;
  *(void *)(v9 + 88) = a8;
  *(void *)(v9 + 64) = a3;
  *(void *)(v9 + 72) = a4;
  *(void *)(v9 + 48) = a1;
  *(void *)(v9 + 56) = a2;
  uint64_t v10 = type metadata accessor for SnippetPluginContainer();
  *(void *)(v9 + 128) = v10;
  *(void *)(v9 + 136) = *(void *)(v10 - 8);
  *(void *)(v9 + 144) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeAssistantUseCase();
  *(void *)(v9 + 152) = v11;
  *(void *)(v9 + 160) = *(void *)(v11 - 8);
  *(void *)(v9 + 168) = swift_task_alloc();
  type metadata accessor for GeneratedResponse();
  *(void *)(v9 + 176) = swift_task_alloc();
  *(void *)(v9 + 184) = type metadata accessor for ModelResponse();
  *(void *)(v9 + 192) = swift_task_alloc();
  *(void *)(v9 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelDisclaimer?);
  *(void *)(v9 + 208) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v9 + 216) = swift_task_alloc();
  *(void *)(v9 + 224) = swift_task_alloc();
  *(void *)(v9 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  *(void *)(v9 + 240) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  *(void *)(v9 + 248) = v12;
  *(void *)(v9 + 256) = *(void *)(v12 - 8);
  *(void *)(v9 + 264) = swift_task_alloc();
  *(void *)(v9 + 272) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for ConfirmationActionName();
  *(void *)(v9 + 280) = v13;
  *(void *)(v9 + 288) = *(void *)(v13 - 8);
  *(void *)(v9 + 296) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for IntentDialog();
  *(void *)(v9 + 304) = v14;
  *(void *)(v9 + 312) = *(void *)(v14 - 8);
  *(void *)(v9 + 320) = swift_task_alloc();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResultContainer<Never, Never, Never, IntentDialog>);
  *(void *)(v9 + 328) = v15;
  *(void *)(v9 + 336) = *(void *)(v15 - 8);
  *(void *)(v9 + 344) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for IntentSystemContext();
  *(void *)(v9 + 352) = v16;
  *(void *)(v9 + 360) = *(void *)(v16 - 8);
  *(void *)(v9 + 368) = swift_task_alloc();
  *(void *)(v9 + 376) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext?);
  *(void *)(v9 + 384) = swift_task_alloc();
  *(void *)(v9 + 392) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
  *(void *)(v9 + 400) = swift_task_alloc();
  return MEMORY[0x270FA2498](LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:), 0, 0);
}

uint64_t LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:)()
{
  void (*v24)(char *__return_ptr, id);
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  void *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[2];
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  long long v95;
  long long v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  long long v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  long long v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;

  int64_t v90 = v0;
  uint64_t v1 = *(void *)(v0 + 120);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 80), *(void *)(v1 + 104));
  if (dispatch thunk of GenerativeAssistantFeatureFlagManaging.isLowConfidenceKnowledgeSearchEnabled.getter())
  {
    uint64_t v2 = *(void *)(v0 + 392);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v5 = *(void *)(v0 + 352);
    uint64_t v4 = *(void *)(v0 + 360);
    uint64_t v6 = *(void **)(v0 + 72);
    *(void *)(v0 + 408) = type metadata accessor for MetricsUtils();
    static MetricsUtils.shared.getter();
    static Signpost.lowConfidenceKnowledgeSearchDuration.getter();
    dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
    swift_release();
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    AppIntent.systemContext.getter();
    IntentSystemContext.assistantContext.getter();
    long long v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    *(void *)(v0 + 416) = v7;
    *(void *)(v0 + 424) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v3, v5);
    uint64_t v8 = type metadata accessor for IntentSystemContext.AssistantContext();
    *(void *)(v0 + 432) = v8;
    uint64_t v9 = *(void *)(v8 - 8);
    *(void *)(v0 + 440) = v9;
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    *(void *)(v0 + 448) = v10;
    *(void *)(v0 + 456) = (v9 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    int v11 = v10(v2, 1, v8);
    uint64_t v13 = *(void *)(v0 + 392);
    uint64_t v12 = *(void *)(v0 + 400);
    if (v11 == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 392), &demangling cache variable for type metadata for IntentSystemContext.AssistantContext?);
      uint64_t v14 = type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
    }
    else
    {
      IntentSystemContext.AssistantContext.interactionMode.getter();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
    }
    uint64_t v23 = *(void *)(v0 + 400);
    Optional<A>.asGATInteractionMode.getter(&v111);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v23, &demangling cache variable for type metadata for IntentSystemContext.AssistantContext.InteractionMode?);
    *(unsigned char *)(v0 + 641) = v111;
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 80), *(void *)(v1 + 104));
    if ((dispatch thunk of GenerativeAssistantFeatureFlagManaging.isLowConfidenceKnowledgeConfirmationEnabled.getter() & 1) == 0) {
      goto LABEL_32;
    }
    if (one-time initialization token for _disableKnowledgeConfirmation != -1) {
      swift_once();
    }
    if ((byte_269A457C8 & 1) == 0) {
      goto LABEL_17;
    }
    uint64_t v24 = (void (*)(char *__return_ptr, id))*((void *)&xmmword_269A457B0 + 1);
    id v25 = (id)static Overrides._disableKnowledgeConfirmation;
    swift_bridgeObjectRetain();
    swift_retain();
    v24(&v112, v25);

    swift_bridgeObjectRelease();
    swift_release();
    if (v112)
    {
LABEL_32:
      id v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
      BOOL v55 = *(void *)(v0 + 432);
      os_log_type_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
      char v57 = *(void *)(v0 + 384);
      Class v58 = *(void *)(v0 + 368);
      id v59 = *(void *)(v0 + 352);
      __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 72), *(void *)(*(void *)(v0 + 72) + 24));
      AppIntent.systemContext.getter();
      IntentSystemContext.assistantContext.getter();
      v56(v58, v59);
      if (v54(v57, 1, v55) == 1)
      {
        outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 384), &demangling cache variable for type metadata for IntentSystemContext.AssistantContext?);
        uint64_t v60 = 0;
        uint64_t v61 = 0;
      }
      else
      {
        BOOL v62 = *(void *)(v0 + 432);
        uint64_t v63 = *(void *)(v0 + 440);
        id v64 = *(void *)(v0 + 384);
        uint64_t v60 = IntentSystemContext.AssistantContext.sessionIdentifier.getter();
        uint64_t v61 = v65;
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v62);
      }
      *(void *)(v0 + 488) = v61;
      uint64_t v66 = static SessionPersistenceUtils.isBackToBackRequest(sessionId:)();
      *(unsigned char *)(v0 + 642) = v66 & 1;
      if ((v66 & 1) == 0 && v61)
      {
        uint64_t v67 = one-time initialization token for genFromTextController;
        swift_bridgeObjectRetain();
        if (v67 != -1) {
          swift_once();
        }
        uint64_t v68 = type metadata accessor for Logger();
        __swift_project_value_buffer(v68, (uint64_t)static Logger.genFromTextController);
        swift_bridgeObjectRetain_n();
        uint64_t v69 = Logger.logObject.getter();
        uint64_t v70 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v69, v70))
        {
          Swift::Int_optional v71 = swift_slowAlloc();
          Swift::Int_optional v72 = swift_slowAlloc();
          v89[0] = v72;
          *(_DWORD *)Swift::Int_optional v71 = 136315650;
          *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA401C0, v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v71 + 12) = 2080;
          *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000074, 0x800000024FA4A3A0, v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v71 + 22) = 2080;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_24F9A2000, v69, v70, "%s.%s Saving the current sessionID %s", (uint8_t *)v71, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v72, -1, -1);
          MEMORY[0x25336A180](v71, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        static SessionPersistenceUtils.setSession(forCurrentSession:)();
        swift_bridgeObjectRelease();
      }
      uint64_t v73 = *(unsigned char *)(v0 + 641);
      char v75 = *(void *)(v0 + 216);
      unint64_t v74 = *(void *)(v0 + 224);
      type metadata accessor for SELFUtils();
      static SELFUtils.shared.getter();
      uint64_t v109 = 0;
      dispatch thunk of SELFUtils.gatUsecase.setter();
      swift_release();
      uint64_t v76 = type metadata accessor for URL();
      *(void *)(v0 + 496) = v76;
      uint64_t v77 = *(void *)(v76 - 8);
      uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
      *(void *)(v0 + 504) = v78;
      *(void *)(v0 + 512) = (v77 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v78(v74, 1, 1, v76);
      v78(v75, 1, 1, v76);
      *(unsigned char *)(v0 + 640) = v73;
      uint64_t v79 = (void *)swift_task_alloc();
      *(void *)(v0 + 520) = v79;
      uint64_t v110 = 1;
      NSObject *v79 = v0;
      v79[1] = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
      unint64_t v81 = *(void *)(v0 + 216);
      unint64_t v80 = *(void *)(v0 + 224);
      uint64_t v82 = *(void *)(v0 + 200);
      unint64_t v84 = *(void *)(v0 + 96);
      unint64_t v83 = *(void *)(v0 + 104);
      uint64_t v86 = *(void *)(v0 + 80);
      uint64_t v85 = *(void *)(v0 + 88);
      int64_t v87 = *(void *)(v0 + 56);
      unint64_t v88 = *(void *)(v0 + 64);
      os_log_type_t v107 = *(void *)(v0 + 112);
      uint64_t v108 = v0 + 640;
      uint64_t v106 = 0u;
      char v105 = 0;
      uint64_t v103 = v84;
      os_log_type_t v104 = v83;
      uint64_t v102 = 0u;
      uint64_t v100 = v86;
      uint64_t v101 = v85;
      uint64_t v98 = v60;
      uint64_t v99 = v61;
      uint64_t v97 = v81;
      os_log_type_t v96 = 0u;
      uint64_t v95 = 0u;
      unint64_t v94 = 2;
      uint64_t v93 = 0x100000000;
      uint64_t v92 = 1;
      return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v82, v87, v88, v80, 0, 0, 0, 0);
    }
    else
    {
LABEL_17:
      if (one-time initialization token for kgFallback != -1) {
        swift_once();
      }
      os_log_type_t v26 = type metadata accessor for Logger();
      *(void *)(v0 + 464) = __swift_project_value_buffer(v26, (uint64_t)static Logger.kgFallback);
      uint64_t v27 = Logger.logObject.getter();
      uint64_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl(&dword_24F9A2000, v27, v28, "Presenting confirmation", v29, 2u);
        MEMORY[0x25336A180](v29, -1, -1);
      }
      uint64_t v31 = *(void *)(v0 + 312);
      uint64_t v30 = *(void *)(v0 + 320);
      id v32 = *(void *)(v0 + 304);
      uint64_t v33 = *(void **)(v0 + 72);

      static MetricsUtils.shared.getter();
      static Signpost.waitUserConfirmToContinueDuration.getter();
      dispatch thunk of MetricsUtils.recordSignpostBegin(for:)();
      swift_release();
      uint64_t v35 = v6[3];
      uint64_t v34 = v6[4];
      __swift_project_boxed_opaque_existential_1(v33, v35);
      type metadata accessor for IntentDialogUtils();
      uint64_t v113 = 20;
      static IntentDialogUtils.getDialog(catID:response:includeContentProviderName:appName:)(&v113, 0, 0xE000000000000000, 1, 0, 0, v30);
      static IntentResult.result<>(dialog:)();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      if (one-time initialization token for knowledgeFallbackConfirmationAcceptLabel != -1) {
        swift_once();
      }
      os_log_type_t v36 = *(void *)(v0 + 272);
      os_log_type_t v37 = *(void *)(v0 + 248);
      uint64_t v38 = *(void *)(v0 + 256);
      int64_t v39 = __swift_project_value_buffer(v37, (uint64_t)static ConfirmationText.knowledgeFallbackConfirmationAcceptLabel);
      int64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
      v40(v36, v39, v37);
      if (one-time initialization token for knowledgeFallbackConfirmationAcceptValues != -1) {
        swift_once();
      }
      if (one-time initialization token for knowledgeFallbackConfirmationDeclineLabel != -1) {
        swift_once();
      }
      uint64_t v41 = *(void *)(v0 + 264);
      uint64_t v42 = *(void *)(v0 + 248);
      uint64_t v43 = __swift_project_value_buffer(v42, (uint64_t)static ConfirmationText.knowledgeFallbackConfirmationDeclineLabel);
      v40(v41, v43, v42);
      if (one-time initialization token for knowledgeFallbackConfirmationDeclineValues != -1) {
        swift_once();
      }
      unint64_t v45 = *(void *)(v0 + 264);
      unint64_t v44 = *(void *)(v0 + 272);
      uint64_t v46 = *(void *)(v0 + 248);
      os_log_type_t v47 = *(void *)(v0 + 256);
      static ConfirmationActionName.custom(acceptLabel:acceptAlternatives:denyLabel:denyAlternatives:destructive:)();
      uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v48(v45, v46);
      v48(v44, v46);
      uint64_t v49 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v49;
      uint64_t v50 = lazy protocol witness table accessor for type IntentResultContainer<Never, Never, Never, IntentDialog> and conformance IntentResultContainer<A, B, C, D>();
      *uint64_t v49 = v0;
      v49[1] = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
      unint64_t v51 = *(void *)(v0 + 344);
      id v52 = *(void *)(v0 + 328);
      unint64_t v53 = *(void *)(v0 + 296);
      return MEMORY[0x270EE0D08](v51, v53, 1, v35, v52, v34, v50);
    }
  }
  else
  {
    if (one-time initialization token for kgFallback != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.kgFallback);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_24F9A2000, v16, v17, "LowConfidenceKnowledge FF is off", v18, 2u);
      MEMORY[0x25336A180](v18, -1, -1);
    }
    uint64_t v19 = *(void *)(v0 + 48);

    uint64_t v20 = type metadata accessor for LowConfidenceKnowledgeResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 480) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[43];
  uint64_t v4 = v2[42];
  uint64_t v5 = v2[41];
  (*(void (**)(void, void))(v2[36] + 8))(v2[37], v2[35]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v6 = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
  }
  else {
    uint64_t v6 = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = *(void *)(v0 + 240);
  static MetricsUtils.shared.getter();
  static Signpost.waitUserConfirmToContinueDuration.getter();
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v1, &demangling cache variable for type metadata for OSSignpostID?);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_24F9A2000, v3, v4, "User accepted confirmation", v5, 2u);
    MEMORY[0x25336A180](v5, -1, -1);
  }

  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  long long v7 = *(void *)(v0 + 432);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
  uint64_t v9 = *(void *)(v0 + 384);
  uint64_t v10 = *(void *)(v0 + 368);
  int v11 = *(void *)(v0 + 352);
  __swift_project_boxed_opaque_existential_1(*(void **)(v0 + 72), *(void *)(*(void *)(v0 + 72) + 24));
  AppIntent.systemContext.getter();
  IntentSystemContext.assistantContext.getter();
  v8(v10, v11);
  if (v6(v9, 1, v7) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 384), &demangling cache variable for type metadata for IntentSystemContext.AssistantContext?);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 432);
    uint64_t v15 = *(void *)(v0 + 440);
    uint64_t v16 = *(void *)(v0 + 384);
    uint64_t v12 = IntentSystemContext.AssistantContext.sessionIdentifier.getter();
    uint64_t v13 = v17;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
  }
  *(void *)(v0 + 488) = v13;
  uint64_t v18 = static SessionPersistenceUtils.isBackToBackRequest(sessionId:)();
  *(unsigned char *)(v0 + 642) = v18 & 1;
  if ((v18 & 1) == 0 && v13)
  {
    uint64_t v19 = one-time initialization token for genFromTextController;
    swift_bridgeObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.genFromTextController);
    swift_bridgeObjectRetain_n();
    unint64_t v21 = Logger.logObject.getter();
    Swift::Bool v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v38 = v24;
      *(_DWORD *)uint64_t v23 = 136315650;
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA401C0, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2080;
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000074, 0x800000024FA4A3A0, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24F9A2000, v21, v22, "%s.%s Saving the current sessionID %s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v24, -1, -1);
      MEMORY[0x25336A180](v23, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    static SessionPersistenceUtils.setSession(forCurrentSession:)();
    swift_bridgeObjectRelease();
  }
  id v25 = *(unsigned char *)(v0 + 641);
  uint64_t v27 = *(void *)(v0 + 216);
  os_log_type_t v26 = *(void *)(v0 + 224);
  type metadata accessor for SELFUtils();
  static SELFUtils.shared.getter();
  dispatch thunk of SELFUtils.gatUsecase.setter();
  swift_release();
  uint64_t v28 = type metadata accessor for URL();
  *(void *)(v0 + 496) = v28;
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
  *(void *)(v0 + 504) = v30;
  *(void *)(v0 + 512) = (v29 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v30(v26, 1, 1, v28);
  v30(v27, 1, 1, v28);
  *(unsigned char *)(v0 + 640) = v25;
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v31;
  *uint64_t v31 = v0;
  v31[1] = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
  id v32 = *(void *)(v0 + 224);
  uint64_t v33 = *(void *)(v0 + 200);
  uint64_t v34 = *(void *)(v0 + 56);
  uint64_t v35 = *(void *)(v0 + 64);
  return ModelOrchestrator.generateAndPrompt(userQuery:documentURL:image:imageFile:imageSize:imageSizeInMB:fileSource:fileName:fileMimeType:websiteURL:sessionID:userPromptCallback:uploadProgressCallback:responseGenerationKeepAliveCallback:enableBrowserTool:appBundleID:useCaseID:interactionMode:)(v33, v34, v35, v32, 0, 0, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 528) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v5 = v2 + 216;
    uint64_t v3 = *(void *)(v2 + 216);
    uint64_t v4 = *(void *)(v5 + 8);
    swift_bridgeObjectRelease();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v3, &demangling cache variable for type metadata for URL?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
    uint64_t v6 = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
  }
  else
  {
    uint64_t v9 = v2 + 216;
    long long v7 = *(void *)(v2 + 216);
    uint64_t v8 = *(void *)(v9 + 8);
    swift_bridgeObjectRelease();
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v7, &demangling cache variable for type metadata for URL?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v8, &demangling cache variable for type metadata for URL?);
    uint64_t v6 = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

{
  uint64_t v0;
  char v1;
  unsigned __int8 v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *__return_ptr, id);
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  id v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  long long v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  uint64_t v65 = v0;
  uint64_t v1 = *(unsigned char *)(v0 + 642);
  uint64_t v2 = *(unsigned char *)(v0 + 641);
  uint64_t v3 = *(void **)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 152);
  long long v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 112);
  outlined init with copy of ModelResponse(*(void *)(v0 + 200), (uint64_t)v3);
  uint64_t v63 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
  GeneratedResponse.init(_:mode:useCaseID:isFirstRequest:)(v3, &v63, v5, (v1 & 1) == 0, v4);
  uint64_t v9 = *(void **)(v4 + 24);
  if (v9[2] == 1)
  {
    uint64_t v10 = *(void *)(v0 + 232);
    int v11 = *(void *)(v0 + 200);
    uint64_t v13 = *(uint64_t **)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v14 = v9[4];
    *(void *)(v0 + 536) = v14;
    uint64_t v15 = v9[5];
    *(void *)(v0 + 544) = v15;
    outlined init with copy of URL?(v11 + *(int *)(v12 + 32), v10);
    uint64_t v16 = *v13;
    *(void *)(v0 + 552) = *v13;
    os_log_type_t v17 = v13[1];
    *(void *)(v0 + 560) = v17;
    uint64_t v18 = one-time initialization token for _showMockWebSources;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18 != -1) {
      swift_once();
    }
    if ((byte_269A45798 & 1) == 0) {
      goto LABEL_6;
    }
    uint64_t v19 = (void (*)(uint64_t *__return_ptr, id))*((void *)&xmmword_269A45780 + 1);
    uint64_t v20 = (id)static Overrides._showMockWebSources;
    swift_bridgeObjectRetain();
    swift_retain();
    v19(&v64, v20);

    swift_bridgeObjectRelease();
    swift_release();
    if (v64)
    {
      if (one-time initialization token for webSources != -1) {
        swift_once();
      }
      unint64_t v21 = *(void *)(v0 + 200);
      Swift::Bool v22 = &static DummyKnowledgeSources.webSources;
    }
    else
    {
LABEL_6:
      unint64_t v21 = *(void *)(v0 + 200);
      Swift::Bool v22 = (uint64_t *)(v21 + 32);
    }
    unint64_t v44 = *(void *)(v0 + 184);
    uint64_t v43 = *v22;
    *(void *)(v0 + 568) = *v22;
    unint64_t v45 = *(unsigned __int8 *)(v21 + *(int *)(v44 + 40));
    swift_bridgeObjectRetain();
    if (v45 == 1)
    {
      uint64_t v46 = (void *)swift_task_alloc();
      *(void *)(v0 + 576) = v46;
      *uint64_t v46 = v0;
      v46[1] = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
      os_log_type_t v47 = *(void *)(v0 + 208);
      return static ModelDisclaimer.rateLimitDisclaimer()(v47);
    }
    uint64_t v49 = *(void *)(v0 + 208);
    uint64_t v50 = *(void *)(v0 + 176);
    outlined destroy of ModelResponse(v21, (uint64_t (*)(void))type metadata accessor for ModelResponse);
    outlined destroy of ModelResponse(v50, (uint64_t (*)(void))type metadata accessor for GeneratedResponse);
    unint64_t v51 = type metadata accessor for ModelDisclaimer();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v49, 1, 1, v51);
    uint64_t v42 = 23;
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 200);
    uint64_t v24 = *(void *)(v0 + 176);
    id v25 = type metadata accessor for GATError();
    lazy protocol witness table accessor for type GATError and conformance GATError();
    os_log_type_t v26 = (void *)swift_allocError();
    void *v27 = 0xD00000000000002ELL;
    v27[1] = 0x800000024FA4A370;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x263F40798], v25);
    swift_willThrow();
    outlined destroy of ModelResponse(v23, (uint64_t (*)(void))type metadata accessor for ModelResponse);
    outlined destroy of ModelResponse(v24, (uint64_t (*)(void))type metadata accessor for GeneratedResponse);
    if (one-time initialization token for kgFallback != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.kgFallback);
    uint64_t v29 = v26;
    uint64_t v30 = v26;
    uint64_t v31 = Logger.logObject.getter();
    id v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 138412290;
      uint64_t v35 = v26;
      os_log_type_t v36 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id *v34 = v36;

      _os_log_impl(&dword_24F9A2000, v31, v32, "Error invoking the model: %@", v33, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v34, -1, -1);
      MEMORY[0x25336A180](v33, -1, -1);
    }
    else
    {
    }
    os_log_type_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 504);
    uint64_t v38 = *(void *)(v0 + 496);
    int64_t v39 = *(void *)(v0 + 232);
    int64_t v40 = *(void *)(v0 + 208);

    v37(v39, 1, 1, v38);
    uint64_t v41 = type metadata accessor for ModelDisclaimer();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
    uint64_t v15 = 0x800000024FA41080;
    uint64_t v14 = 0x100000000000002FLL;
    uint64_t v42 = 3;
    uint64_t v43 = MEMORY[0x263F8EE78];
    uint64_t v16 = 0x100000000000002FLL;
    os_log_type_t v17 = 0x800000024FA41080;
  }
  id v52 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 616) = v17;
  *(void *)(v0 + 608) = v16;
  *(void *)(v0 + 600) = v15;
  *(void *)(v0 + 592) = v14;
  *(unsigned char *)(v0 + 643) = v42;
  *(void *)(v0 + 584) = v43;
  type metadata accessor for SnippetPluginUtils();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RichContentResultSegment>);
  unint64_t v53 = *(void *)(type metadata accessor for RichContentResultSegment() - 8);
  id v54 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  BOOL v55 = swift_allocObject();
  *(void *)(v0 + 624) = v55;
  *(_OWORD *)(v55 + 16) = xmmword_24FA3E1D0;
  os_log_type_t v56 = (uint64_t *)(v55 + v54);
  NSObject *v56 = v16;
  v56[1] = v17;
  (*(void (**)(void))(v53 + 104))();
  char v57 = one-time initialization token for contentProviderName;
  swift_bridgeObjectRetain();
  if (v57 != -1) {
    swift_once();
  }
  Class v58 = static Disclaimer.contentProviderName;
  id v59 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v59;
  *id v59 = v0;
  v59[1] = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
  uint64_t v60 = *(void *)(v0 + 232);
  uint64_t v61 = *(void *)(v0 + 208);
  BOOL v62 = *(void *)(v0 + 144);
  uint64_t v67 = v52;
  uint64_t v68 = v61;
  return static SnippetPluginUtils.createRichTextResultContainer(results:provider:disclaimer:attributions:punchOutURL:criticalDisclaimers:modelDisclaimer:)(v62, v55, v58, *((uint64_t *)&v58 + 1), 0xD000000000000022, 0x800000024FA4A2A0, v43, v60);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  long long v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  uint64_t v1 = *(void *)(v0 + 176);
  outlined destroy of ModelResponse(*(void *)(v0 + 200), (uint64_t (*)(void))type metadata accessor for ModelResponse);
  outlined destroy of ModelResponse(v1, (uint64_t (*)(void))type metadata accessor for GeneratedResponse);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 560);
  uint64_t v4 = *(void *)(v0 + 552);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(void *)(v0 + 536);
  *(void *)(v0 + 616) = v3;
  *(void *)(v0 + 608) = v4;
  *(void *)(v0 + 600) = v5;
  *(void *)(v0 + 592) = v6;
  *(unsigned char *)(v0 + 643) = 23;
  *(void *)(v0 + 584) = v2;
  type metadata accessor for SnippetPluginUtils();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RichContentResultSegment>);
  long long v7 = *(void *)(type metadata accessor for RichContentResultSegment() - 8);
  uint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 624) = v9;
  *(_OWORD *)(v9 + 16) = xmmword_24FA3E1D0;
  uint64_t v10 = (void *)(v9 + v8);
  *uint64_t v10 = v4;
  v10[1] = v3;
  (*(void (**)(void))(v7 + 104))();
  int v11 = one-time initialization token for contentProviderName;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = static Disclaimer.contentProviderName;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v13;
  *uint64_t v13 = v0;
  v13[1] = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
  uint64_t v14 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 144);
  return static SnippetPluginUtils.createRichTextResultContainer(results:provider:disclaimer:attributions:punchOutURL:criticalDisclaimers:modelDisclaimer:)(v15, v9, v12, *((uint64_t *)&v12 + 1), 0xD000000000000022, 0x800000024FA4A2A0, v2, v14);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  long long v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v13 = *(_OWORD *)(v0 + 608);
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v3 = *(unsigned char *)(v0 + 643);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);
  long long v7 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 48);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(*(void *)(v0 + 208), &demangling cache variable for type metadata for ModelDisclaimer?);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for URL?);
  *(_OWORD *)uint64_t v8 = v13;
  *(void *)(v8 + 16) = v2;
  *(void *)(v8 + 24) = v1;
  *(unsigned char *)(v8 + 32) = v3;
  uint64_t v9 = type metadata accessor for LowConfidenceKnowledgeResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + *(int *)(v9 + 28), v6, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  static MetricsUtils.shared.getter();
  static Signpost.lowConfidenceKnowledgeSearchDuration.getter();
  uint64_t v10 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v14, 1, 1, v10);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v14, &demangling cache variable for type metadata for OSSignpostID?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_24F9A2000, v1, v2, "User declined confirmation", v3, 2u);
    MEMORY[0x25336A180](v3, -1, -1);
  }
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 48);

  uint64_t v6 = type metadata accessor for LowConfidenceKnowledgeResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  static MetricsUtils.shared.getter();
  static Signpost.lowConfidenceKnowledgeSearchDuration.getter();
  long long v7 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
  dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)();
  swift_release();
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v4, &demangling cache variable for type metadata for OSSignpostID?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  long long v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  uint64_t v1 = *(void **)(v0 + 528);
  if (one-time initialization token for kgFallback != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.kgFallback);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v7 = 138412290;
    uint64_t v9 = v1;
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v10;

    _os_log_impl(&dword_24F9A2000, v5, v6, "Error invoking the model: %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v8, -1, -1);
    MEMORY[0x25336A180](v7, -1, -1);
  }
  else
  {
  }
  int v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 504);
  uint64_t v12 = *(void *)(v0 + 496);
  uint64_t v13 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 208);

  v11(v13, 1, 1, v12);
  uint64_t v15 = type metadata accessor for ModelDisclaimer();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(void *)(v0 + 616) = 0x800000024FA41080;
  *(void *)(v0 + 608) = 0x100000000000002FLL;
  *(void *)(v0 + 600) = 0x800000024FA41080;
  *(void *)(v0 + 592) = 0x100000000000002FLL;
  *(unsigned char *)(v0 + 643) = 3;
  uint64_t v16 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 584) = MEMORY[0x263F8EE78];
  type metadata accessor for SnippetPluginUtils();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RichContentResultSegment>);
  os_log_type_t v17 = *(void *)(type metadata accessor for RichContentResultSegment() - 8);
  uint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v0 + 624) = v19;
  *(_OWORD *)(v19 + 16) = xmmword_24FA3E1D0;
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = 0x100000000000002FLL;
  v20[1] = 0x800000024FA41080;
  (*(void (**)(void))(v17 + 104))();
  unint64_t v21 = one-time initialization token for contentProviderName;
  swift_bridgeObjectRetain();
  if (v21 != -1) {
    swift_once();
  }
  Swift::Bool v22 = static Disclaimer.contentProviderName;
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v23;
  *uint64_t v23 = v0;
  v23[1] = LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:);
  uint64_t v24 = *(void *)(v0 + 232);
  id v25 = *(void *)(v0 + 144);
  return static SnippetPluginUtils.createRichTextResultContainer(results:provider:disclaimer:attributions:punchOutURL:criticalDisclaimers:modelDisclaimer:)(v25, v19, v22, *((uint64_t *)&v22 + 1), 0xD000000000000022, 0x800000024FA4A2A0, v16, v24);
}

uint64_t LowConfidenceKnowledgeUtil.search(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v15;
  *uint64_t v15 = v8;
  v15[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return LowConfidenceKnowledgeUtil.searchHelper(query:callingIntent:webResultsData:requestValueCallback:responseGenerationKeepAliveCallback:useCaseID:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t LowConfidenceKnowledgeResponse.response.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LowConfidenceKnowledgeResponse.dialog.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void LowConfidenceKnowledgeResponse.catId.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

uint64_t LowConfidenceKnowledgeResponse.snippetPluginContainer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LowConfidenceKnowledgeResponse() + 28);
  uint64_t v4 = type metadata accessor for SnippetPluginContainer();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for LowConfidenceKnowledgeResponse()
{
  uint64_t result = type metadata singleton initialization cache for LowConfidenceKnowledgeResponse;
  if (!type metadata singleton initialization cache for LowConfidenceKnowledgeResponse) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_OWORD *initializeWithCopy for LowConfidenceKnowledgeUtil(_OWORD *a1, _OWORD *a2)
{
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

uint64_t *assignWithCopy for LowConfidenceKnowledgeUtil(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for LowConfidenceKnowledgeUtil(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __swift_destroy_boxed_opaque_existential_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for LowConfidenceKnowledgeUtil(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LowConfidenceKnowledgeUtil(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LowConfidenceKnowledgeUtil()
{
  return &type metadata for LowConfidenceKnowledgeUtil;
}

void *initializeBufferWithCopyOfBuffer for LowConfidenceKnowledgeResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *long long v3 = *a2;
    long long v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v10 = type metadata accessor for SnippetPluginContainer();
    int v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for LowConfidenceKnowledgeResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for SnippetPluginContainer();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for LowConfidenceKnowledgeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for SnippetPluginContainer();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for LowConfidenceKnowledgeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for SnippetPluginContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for LowConfidenceKnowledgeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for SnippetPluginContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LowConfidenceKnowledgeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for SnippetPluginContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for LowConfidenceKnowledgeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24FA1D634);
}

uint64_t sub_24FA1D634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SnippetPluginContainer();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LowConfidenceKnowledgeResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24FA1D6F8);
}

uint64_t sub_24FA1D6F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SnippetPluginContainer();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for LowConfidenceKnowledgeResponse()
{
  uint64_t result = type metadata accessor for SnippetPluginContainer();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GATError and conformance GATError()
{
  unint64_t result = lazy protocol witness table cache variable for type GATError and conformance GATError;
  if (!lazy protocol witness table cache variable for type GATError and conformance GATError)
  {
    type metadata accessor for GATError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GATError and conformance GATError);
  }
  return result;
}

uint64_t outlined destroy of ModelResponse(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

float static ProgressLevels.intentStart.getter()
{
  return 0.2;
}

float static ProgressLevels.sendingToGMS.getter()
{
  return 0.6;
}

float static ProgressLevels.receivedResponse.getter()
{
  return 0.85;
}

float static ProgressLevels.executionFinished.getter()
{
  return 1.0;
}

ValueMetadata *type metadata accessor for ProgressLevels()
{
  return &type metadata for ProgressLevels;
}

void *initializeBufferWithCopyOfBuffer for ModelResponse(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    uint64_t v10 = a3[8];
    __dst = (char *)a1 + v10;
    uint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v20 = *(void *)(v12 - 8);
    unint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v11, 1, v12))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dst, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v14 = a3[10];
    *(void *)((char *)v7 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *((unsigned char *)v7 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[11];
    uint64_t v16 = (void *)((char *)v7 + v15);
    os_log_type_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for ModelResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelResponse(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  a1[4] = a2[4];
  uint64_t v7 = a3[8];
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dst, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v12 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[11];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelResponse(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v15 = a3[11];
  uint64_t v16 = (void *)((char *)a1 + v15);
  os_log_type_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

void *assignWithTake for ModelResponse(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[8];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  os_log_type_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *os_log_type_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24FA1E37C);
}

uint64_t sub_24FA1E37C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24FA1E444);
}

void *sub_24FA1E444(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ModelResponse()
{
  uint64_t result = type metadata singleton initialization cache for ModelResponse;
  if (!type metadata singleton initialization cache for ModelResponse) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ModelResponse()
{
  type metadata accessor for URL?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t ModelResponseText.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aContent_1[8 * a1];
}

uint64_t ModelResponseText.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModelResponseText.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 32);
    v10[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ModelResponseText.CodingKeys()
{
  return ModelResponseText.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModelResponseText.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ModelResponseText.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModelResponseText.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModelResponseText.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

double protocol witness for Decodable.init(from:) in conformance ModelResponseText@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized ModelResponseText.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ModelResponseText(void *a1)
{
  return ModelResponseText.encode(to:)(a1);
}

void one-time initialization function for content()
{
  static ModelResponse.content = 0x746E65746E6F63;
  unk_269A498B0 = 0xE700000000000000;
}

void one-time initialization function for summary()
{
  static ModelResponse.summary = 0x7972616D6D7573;
  unk_269A498C0 = 0xE700000000000000;
}

void one-time initialization function for suggestions()
{
  static ModelResponse.suggestions = 0x6974736567677573;
  unk_269A498D0 = 0xEB00000000736E6FLL;
}

uint64_t ModelResponse.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v5 = (int *)type metadata accessor for ModelResponse();
  uint64_t v6 = (uint64_t)a2 + v5[8];
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v5[9];
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)((char *)a2 + v8) = MEMORY[0x263F8EE78];
  *a2 = v9;
  if (one-time initialization token for content != -1) {
    swift_once();
  }
  GeneratedValues.extract<A>(field:)();
  if (v2)
  {
    uint64_t v10 = type metadata accessor for GeneratedValues();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = (void *)((char *)a2 + v5[11]);
    *uint64_t v11 = v14;
    v11[1] = v15;
    if (one-time initialization token for summary != -1) {
      swift_once();
    }
    GeneratedValues.extract<A>(field:)();
    a2[2] = v15;
    a2[1] = v14;
    if (one-time initialization token for suggestions != -1) {
      swift_once();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    GeneratedValues.extract<A>(field:)();
    a2[3] = v14;
    a2[4] = v9;
    uint64_t v13 = type metadata accessor for GeneratedValues();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)((char *)a2 + v8) = v9;
    *((unsigned char *)a2 + v5[10]) = 0;
  }
  return result;
}

uint64_t protocol witness for static Generable.schema.getter in conformance ModelResponse@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for schema != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Schema();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static ModelResponse.schema);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for Generable.init(from:) in conformance ModelResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return ModelResponse.init(from:)(a1, a2);
}

uint64_t destroy for ModelResponseText()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelResponseText(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelResponseText(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ModelResponseText(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelResponseText(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelResponseText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelResponseText()
{
  return &type metadata for ModelResponseText;
}

uint64_t specialized ModelResponseText.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7972616D6D7573 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974736567677573 && a2 == 0xEB00000000736E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ModelResponseText.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModelResponseText.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  char v24 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v20 = v9;
  char v23 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v18 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  char v22 = 2;
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  uint64_t v19 = v14;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v21;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v16 = v19;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v20;
  a2[1] = v11;
  a2[2] = v18;
  a2[3] = v16;
  a2[4] = v15;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelResponseText.CodingKeys and conformance ModelResponseText.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ModelResponseText.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24FA1F850);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ModelResponseText.CodingKeys()
{
  return &unk_27011C8F0;
}

uint64_t dispatch thunk of ContentSelectorProviding.select(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return v11(a1, a2, a3, a4);
}

char *initializeBufferWithCopyOfBuffer for SelectedContent(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v23 = *a2;
    *(void *)a1 = *a2;
    a1 = &v23[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    type metadata accessor for ScreenContent(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for DocumentInfo(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = *(char **)((char *)a2 + v8);
      *(void *)&a1[v8] = v9;
      *(void *)&a1[v7[6]] = *(char **)((char *)a2 + v7[6]);
      uint64_t v10 = v7[7];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = (char **)((char *)a2 + v10);
      uint64_t v13 = v12[1];
      *(void *)uint64_t v11 = *v12;
      *((void *)v11 + 1) = v13;
      uint64_t v14 = v7[8];
      uint64_t v15 = &a1[v14];
      uint64_t v16 = (char **)((char *)a2 + v14);
      uint64_t v17 = v16[1];
      *(void *)uint64_t v15 = *v16;
      *((void *)v15 + 1) = v17;
      uint64_t v18 = v7[9];
      __dst = &a1[v18];
      BOOL v62 = (char *)a2 + v18;
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      id v21 = v9;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v61(v62, 1, v19))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(__dst, v62, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v62, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      uint64_t v36 = a3;
      *(_DWORD *)&a1[v7[10]] = *(_DWORD *)((char *)a2 + v7[10]);
      uint64_t v37 = v7[11];
      uint64_t v38 = &a1[v37];
      int64_t v39 = (char *)a2 + v37;
      uint64_t v40 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v41 = *(void *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      uint64_t v43 = v7 + 12;
    }
    else
    {
      char v24 = *a2;
      id v25 = a2[1];
      char v26 = *((unsigned char *)a2 + 16);
      outlined copy of ImageSource(*a2, v25, v26);
      *(void *)a1 = v24;
      *((void *)a1 + 1) = v25;
      a1[16] = v26;
      a1[17] = *((unsigned char *)a2 + 17);
      uint64_t v27 = a2[4];
      *((void *)a1 + 3) = a2[3];
      *((void *)a1 + 4) = v27;
      uint64_t v28 = type metadata accessor for ImageInfo(0);
      uint64_t v29 = *(int *)(v28 + 28);
      uint64_t v30 = &a1[v29];
      uint64_t v31 = (char *)a2 + v29;
      uint64_t v32 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v36 = a3;
      uint64_t v43 = (int *)(v28 + 32);
    }
    a1[*v43] = *((unsigned char *)a2 + *v43);
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = *(int *)(v36 + 20);
    unint64_t v45 = &a1[v44];
    uint64_t v46 = (char *)a2 + v44;
    uint64_t v47 = type metadata accessor for ImageInfo(0);
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageInfo?);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      uint64_t v50 = *(void **)v46;
      unint64_t v51 = (void *)*((void *)v46 + 1);
      char v52 = v46[16];
      outlined copy of ImageSource(*(void **)v46, v51, v52);
      *(void *)unint64_t v45 = v50;
      *((void *)v45 + 1) = v51;
      v45[16] = v52;
      v45[17] = v46[17];
      uint64_t v53 = *((void *)v46 + 4);
      *((void *)v45 + 3) = *((void *)v46 + 3);
      *((void *)v45 + 4) = v53;
      uint64_t v54 = *(int *)(v47 + 28);
      uint64_t v63 = &v45[v54];
      uint64_t v65 = &v46[v54];
      uint64_t v55 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v56 = *(void *)(v55 - 8);
      char v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
      swift_bridgeObjectRetain();
      if (v57(v65, 1, v55))
      {
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v63, v65, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v63, v65, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v63, 0, 1, v55);
      }
      v45[*(int *)(v47 + 32)] = v46[*(int *)(v47 + 32)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
  }
  return a1;
}

uint64_t destroy for SelectedContent(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScreenContent(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined consume of ImageSource(*(void **)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
    uint64_t v9 = a1 + *(int *)(type metadata accessor for ImageInfo(0) + 28);
    uint64_t v10 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (int *)type metadata accessor for DocumentInfo(0);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + v5[9];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = a1 + v5[11];
  uint64_t v10 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
LABEL_5:
  }
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
LABEL_6:
  uint64_t v12 = a1 + *(int *)(a2 + 20);
  uint64_t v13 = type metadata accessor for ImageInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  if (!result)
  {
    outlined consume of ImageSource(*(void **)v12, *(void **)(v12 + 8), *(unsigned char *)(v12 + 16));
    swift_bridgeObjectRelease();
    uint64_t v15 = v12 + *(int *)(v13 + 28);
    uint64_t v16 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v18 = *(void *)(v16 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v15, 1, v16);
    if (!result)
    {
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
      return v17(v15, v16);
    }
  }
  return result;
}

uint64_t initializeWithCopy for SelectedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ScreenContent(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    uint64_t v6 = (int *)type metadata accessor for DocumentInfo(0);
    uint64_t v7 = v6[5];
    uint64_t v8 = *(void **)(a2 + v7);
    *(void *)(a1 + v7) = v8;
    *(void *)(a1 + v6[6]) = *(void *)(a2 + v6[6]);
    uint64_t v9 = v6[7];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = v6[8];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (void *)(a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = v6[9];
    id v59 = v6;
    __dst = (void *)(a1 + v17);
    uint64_t v18 = (const void *)(a2 + v17);
    uint64_t v19 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v61 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
    id v21 = v8;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v61(v18, 1, v19))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(__dst, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    *(_DWORD *)(a1 + v59[10]) = *(_DWORD *)(a2 + v59[10]);
    uint64_t v35 = v59[11];
    uint64_t v36 = (void *)(a1 + v35);
    uint64_t v37 = (const void *)(a2 + v35);
    uint64_t v38 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    uint64_t v41 = a3;
    uint64_t v42 = v59 + 12;
  }
  else
  {
    char v23 = *(void **)a2;
    char v24 = *(void **)(a2 + 8);
    char v25 = *(unsigned char *)(a2 + 16);
    outlined copy of ImageSource(*(void **)a2, v24, v25);
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v24;
    *(unsigned char *)(a1 + 16) = v25;
    *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
    uint64_t v26 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v26;
    uint64_t v27 = type metadata accessor for ImageInfo(0);
    uint64_t v28 = *(int *)(v27 + 28);
    uint64_t v29 = (void *)(a1 + v28);
    uint64_t v30 = (const void *)(a2 + v28);
    uint64_t v31 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    uint64_t v41 = a3;
    uint64_t v42 = (int *)(v27 + 32);
  }
  *(unsigned char *)(a1 + *v42) = *(unsigned char *)(a2 + *v42);
  swift_storeEnumTagMultiPayload();
  uint64_t v43 = *(int *)(v41 + 20);
  uint64_t v44 = (void *)(a1 + v43);
  unint64_t v45 = (char *)(a2 + v43);
  uint64_t v46 = type metadata accessor for ImageInfo(0);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageInfo?);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    uint64_t v49 = *(void **)v45;
    uint64_t v50 = (void *)*((void *)v45 + 1);
    char v51 = v45[16];
    outlined copy of ImageSource(*(void **)v45, v50, v51);
    *uint64_t v44 = v49;
    v44[1] = v50;
    *((unsigned char *)v44 + 16) = v51;
    *((unsigned char *)v44 + 17) = v45[17];
    uint64_t v52 = *((void *)v45 + 4);
    v44[3] = *((void *)v45 + 3);
    v44[4] = v52;
    uint64_t v53 = *(int *)(v46 + 28);
    BOOL v62 = &v45[v53];
    id v64 = (char *)v44 + v53;
    uint64_t v54 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v55 = *(void *)(v54 - 8);
    uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
    swift_bridgeObjectRetain();
    if (v56(v62, 1, v54))
    {
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v64, v62, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v64, v62, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v64, 0, 1, v54);
    }
    *((unsigned char *)v44 + *(int *)(v46 + 32)) = v45[*(int *)(v46 + 32)];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  return a1;
}

uint64_t assignWithCopy for SelectedContent(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    __src = a3;
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(a1, type metadata accessor for ScreenContent);
    type metadata accessor for ScreenContent(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = (int *)type metadata accessor for DocumentInfo(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = *(void **)(a2 + v7);
      *(void *)(a1 + v7) = v8;
      *(void *)(a1 + v6[6]) = *(void *)(a2 + v6[6]);
      uint64_t v9 = v6[7];
      uint64_t v10 = (void *)(a1 + v9);
      uint64_t v11 = (void *)(a2 + v9);
      *uint64_t v10 = *v11;
      v10[1] = v11[1];
      uint64_t v12 = v6[8];
      uint64_t v13 = (void *)(a1 + v12);
      uint64_t v14 = (void *)(a2 + v12);
      *uint64_t v13 = *v14;
      v13[1] = v14[1];
      uint64_t v15 = v6[9];
      uint64_t v73 = (const void *)(a2 + v15);
      __dst = (void *)(a1 + v15);
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void *)(v16 - 8);
      Swift::Int_optional v72 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
      id v18 = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v72(v73, 1, v16))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(__dst, v73, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v73, v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(_DWORD *)(a1 + v6[10]) = *(_DWORD *)(a2 + v6[10]);
      uint64_t v31 = v6[11];
      uint64_t v32 = (void *)(a1 + v31);
      uint64_t v33 = (const void *)(a2 + v31);
      uint64_t v34 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      uint64_t v37 = v6 + 12;
    }
    else
    {
      uint64_t v20 = *(void **)a2;
      id v21 = *(void **)(a2 + 8);
      char v22 = *(unsigned char *)(a2 + 16);
      outlined copy of ImageSource(*(void **)a2, v21, v22);
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v21;
      *(unsigned char *)(a1 + 16) = v22;
      *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v23 = type metadata accessor for ImageInfo(0);
      uint64_t v24 = *(int *)(v23 + 28);
      char v25 = (void *)(a1 + v24);
      uint64_t v26 = (const void *)(a2 + v24);
      uint64_t v27 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_bridgeObjectRetain();
      if (v29(v26, 1, v27))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v37 = (int *)(v23 + 32);
    }
    *(unsigned char *)(a1 + *v37) = *(unsigned char *)(a2 + *v37);
    swift_storeEnumTagMultiPayload();
    a3 = __src;
  }
  uint64_t v38 = a3[5];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  uint64_t v41 = type metadata accessor for ImageInfo(0);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  int v44 = v43(v39, 1, v41);
  int v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (v45)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v39, type metadata accessor for ImageInfo);
      goto LABEL_21;
    }
    uint64_t v56 = *(void **)v40;
    uint64_t v57 = *(void **)(v40 + 8);
    char v58 = *(unsigned char *)(v40 + 16);
    outlined copy of ImageSource(*(void **)v40, v57, v58);
    id v59 = *(void **)v39;
    uint64_t v60 = *(void **)(v39 + 8);
    char v61 = *(unsigned char *)(v39 + 16);
    *(void *)uint64_t v39 = v56;
    *(void *)(v39 + 8) = v57;
    *(unsigned char *)(v39 + 16) = v58;
    outlined consume of ImageSource(v59, v60, v61);
    *(unsigned char *)(v39 + 17) = *(unsigned char *)(v40 + 17);
    *(void *)(v39 + 24) = *(void *)(v40 + 24);
    *(void *)(v39 + 32) = *(void *)(v40 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v62 = *(int *)(v41 + 28);
    uint64_t v63 = (void *)(v39 + v62);
    id v64 = (void *)(v40 + v62);
    uint64_t v65 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v66 = *(void *)(v65 - 8);
    uint64_t v67 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v66 + 48);
    char v75 = v63;
    LODWORD(v63) = v67(v63, 1, v65);
    int v68 = v67(v64, 1, v65);
    if (v63)
    {
      if (!v68)
      {
        (*(void (**)(void *, void *, uint64_t))(v66 + 16))(v75, v64, v65);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v75, 0, 1, v65);
        goto LABEL_32;
      }
      size_t v69 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?)
                                  - 8)
                      + 64);
      uint64_t v70 = v75;
    }
    else
    {
      if (!v68)
      {
        (*(void (**)(void *, void *, uint64_t))(v66 + 24))(v75, v64, v65);
        goto LABEL_32;
      }
      (*(void (**)(void *, uint64_t))(v66 + 8))(v75, v65);
      size_t v69 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?)
                                  - 8)
                      + 64);
      uint64_t v70 = v75;
    }
    memcpy(v70, v64, v69);
LABEL_32:
    *(unsigned char *)(v39 + *(int *)(v41 + 32)) = *(unsigned char *)(v40 + *(int *)(v41 + 32));
    return a1;
  }
  if (v45)
  {
LABEL_21:
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageInfo?);
    memcpy((void *)v39, (const void *)v40, *(void *)(*(void *)(v55 - 8) + 64));
    return a1;
  }
  uint64_t v46 = *(void **)v40;
  uint64_t v47 = *(void **)(v40 + 8);
  char v48 = *(unsigned char *)(v40 + 16);
  outlined copy of ImageSource(*(void **)v40, v47, v48);
  *(void *)uint64_t v39 = v46;
  *(void *)(v39 + 8) = v47;
  *(unsigned char *)(v39 + 16) = v48;
  *(unsigned char *)(v39 + 17) = *(unsigned char *)(v40 + 17);
  *(void *)(v39 + 24) = *(void *)(v40 + 24);
  *(void *)(v39 + 32) = *(void *)(v40 + 32);
  uint64_t v49 = *(int *)(v41 + 28);
  __srca = (void *)(v39 + v49);
  uint64_t v50 = (const void *)(v40 + v49);
  uint64_t v51 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48);
  swift_bridgeObjectRetain();
  if (v53(v50, 1, v51))
  {
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(__srca, v50, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v52 + 16))(__srca, v50, v51);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(__srca, 0, 1, v51);
  }
  *(unsigned char *)(v39 + *(int *)(v41 + 32)) = *(unsigned char *)(v40 + *(int *)(v41 + 32));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  return a1;
}

uint64_t initializeWithTake for SelectedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ScreenContent(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = (int *)type metadata accessor for DocumentInfo(0);
    *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
    *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
    *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
    *(_OWORD *)(a1 + v7[8]) = *(_OWORD *)(a2 + v7[8]);
    uint64_t v8 = v7[9];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (const void *)(a2 + v8);
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_DWORD *)(a1 + v7[10]) = *(_DWORD *)(a2 + v7[10]);
    uint64_t v21 = v7[11];
    char v22 = (void *)(a1 + v21);
    uint64_t v23 = (const void *)(a2 + v21);
    uint64_t v24 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    uint64_t v27 = v7 + 12;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    uint64_t v14 = type metadata accessor for ImageInfo(0);
    uint64_t v15 = *(int *)(v14 + 28);
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (const void *)(a2 + v15);
    uint64_t v18 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v27 = (int *)(v14 + 32);
  }
  *(unsigned char *)(a1 + *v27) = *(unsigned char *)(a2 + *v27);
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = *(int *)(a3 + 20);
  uint64_t v29 = (_OWORD *)(a1 + v28);
  uint64_t v30 = (_OWORD *)(a2 + v28);
  uint64_t v31 = type metadata accessor for ImageInfo(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageInfo?);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    *uint64_t v29 = *v30;
    *((_WORD *)v29 + 8) = *((_WORD *)v30 + 8);
    *(_OWORD *)((char *)v29 + 24) = *(_OWORD *)((char *)v30 + 24);
    uint64_t v34 = *(int *)(v31 + 28);
    uint64_t v35 = (char *)v29 + v34;
    uint64_t v36 = (char *)v30 + v34;
    uint64_t v37 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    *((unsigned char *)v29 + *(int *)(v31 + 32)) = *((unsigned char *)v30 + *(int *)(v31 + 32));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t assignWithTake for SelectedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(a1, type metadata accessor for ScreenContent);
    type metadata accessor for ScreenContent(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for DocumentInfo(0);
      *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
      *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
      *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
      *(_OWORD *)(a1 + v7[8]) = *(_OWORD *)(a2 + v7[8]);
      uint64_t v8 = v7[9];
      uint64_t v9 = (void *)(a1 + v8);
      uint64_t v10 = (const void *)(a2 + v8);
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_DWORD *)(a1 + v7[10]) = *(_DWORD *)(a2 + v7[10]);
      uint64_t v21 = v7[11];
      char v22 = (void *)(a1 + v21);
      uint64_t v23 = (const void *)(a2 + v21);
      uint64_t v24 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      uint64_t v27 = v7 + 12;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      uint64_t v14 = type metadata accessor for ImageInfo(0);
      uint64_t v15 = *(int *)(v14 + 28);
      uint64_t v16 = (void *)(a1 + v15);
      uint64_t v17 = (const void *)(a2 + v15);
      uint64_t v18 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      uint64_t v27 = (int *)(v14 + 32);
    }
    *(unsigned char *)(a1 + *v27) = *(unsigned char *)(a2 + *v27);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v28 = *(int *)(a3 + 20);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = type metadata accessor for ImageInfo(0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (v35)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v29, type metadata accessor for ImageInfo);
      goto LABEL_21;
    }
    char v43 = *(unsigned char *)(v30 + 16);
    int v44 = *(void **)v29;
    int v45 = *(void **)(v29 + 8);
    char v46 = *(unsigned char *)(v29 + 16);
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    *(unsigned char *)(v29 + 16) = v43;
    outlined consume of ImageSource(v44, v45, v46);
    *(unsigned char *)(v29 + 17) = *(unsigned char *)(v30 + 17);
    uint64_t v47 = *(void *)(v30 + 32);
    *(void *)(v29 + 24) = *(void *)(v30 + 24);
    *(void *)(v29 + 32) = v47;
    swift_bridgeObjectRelease();
    uint64_t v48 = *(int *)(v31 + 28);
    uint64_t v49 = (void *)(v29 + v48);
    uint64_t v50 = (void *)(v30 + v48);
    uint64_t v51 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v52 = *(void *)(v51 - 8);
    uint64_t v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v52 + 48);
    char v58 = v49;
    LODWORD(v49) = v53(v49, 1, v51);
    int v54 = v53(v50, 1, v51);
    if (v49)
    {
      if (!v54)
      {
        (*(void (**)(void *, void *, uint64_t))(v52 + 32))(v58, v50, v51);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v58, 0, 1, v51);
        goto LABEL_32;
      }
      size_t v55 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?)
                                  - 8)
                      + 64);
      uint64_t v56 = v58;
    }
    else
    {
      if (!v54)
      {
        (*(void (**)(void *, void *, uint64_t))(v52 + 40))(v58, v50, v51);
        goto LABEL_32;
      }
      (*(void (**)(void *, uint64_t))(v52 + 8))(v58, v51);
      size_t v55 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?)
                                  - 8)
                      + 64);
      uint64_t v56 = v58;
    }
    memcpy(v56, v50, v55);
LABEL_32:
    *(unsigned char *)(v29 + *(int *)(v31 + 32)) = *(unsigned char *)(v30 + *(int *)(v31 + 32));
    return a1;
  }
  if (v35)
  {
LABEL_21:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageInfo?);
    memcpy((void *)v29, (const void *)v30, *(void *)(*(void *)(v42 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *(_WORD *)(v29 + 16) = *(_WORD *)(v30 + 16);
  *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
  uint64_t v36 = *(int *)(v31 + 28);
  uint64_t v37 = (void *)(v29 + v36);
  uint64_t v38 = (const void *)(v30 + v36);
  uint64_t v39 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v37, v38, v39);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  *(unsigned char *)(v29 + *(int *)(v31 + 32)) = *(unsigned char *)(v30 + *(int *)(v31 + 32));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for SelectedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24FA22030);
}

uint64_t sub_24FA22030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ScreenContent(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageInfo?);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for SelectedContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24FA22140);
}

uint64_t sub_24FA22140(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ScreenContent(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageInfo?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for SelectedContent()
{
  uint64_t result = type metadata singleton initialization cache for SelectedContent;
  if (!type metadata singleton initialization cache for SelectedContent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for SelectedContent()
{
  type metadata accessor for ScreenContent(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ImageInfo?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for ImageInfo?()
{
  if (!lazy cache variable for type metadata for ImageInfo?)
  {
    type metadata accessor for ImageInfo(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageInfo?);
    }
  }
}

uint64_t initializeWithCopy for ContentSelector(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for ContentSelector(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for ContentSelector(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentSelector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentSelector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentSelector()
{
  return &type metadata for ContentSelector;
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance ContentSelector.Error()
{
  uint64_t v0 = static ContentSelector.Error.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance ContentSelector.Error()
{
  return MEMORY[0x270EEE450]();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance ContentSelector.Error()
{
  return MEMORY[0x270EEE440]();
}

uint64_t protocol witness for Error._domain.getter in conformance ContentSelector.Error(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContentSelector.Error and conformance ContentSelector.Error();
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance ContentSelector.Error(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContentSelector.Error and conformance ContentSelector.Error();
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t ContentSelector.select(from:)(uint64_t a1, uint64_t a2)
{
  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[30] = v4;
  v3[31] = *(void *)(v4 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = type metadata accessor for DocumentInfo(0);
  v3[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = type metadata accessor for ImageInfo(0);
  v3[39] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenContent?);
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ScreenContent(0);
  v3[46] = v5;
  v3[47] = *(void *)(v5 - 8);
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  v3[56] = swift_task_alloc();
  v3[57] = swift_task_alloc();
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  v3[62] = swift_task_alloc();
  v3[63] = swift_task_alloc();
  return MEMORY[0x270FA2498](ContentSelector.select(from:), 0, 0);
}

uint64_t ContentSelector.select(from:)()
{
  uint64_t v1 = (void *)v0[28];
  uint64_t v2 = MEMORY[0x263F8EE78];
  v0[7] = MEMORY[0x263F8EE78];
  v0[8] = v2;
  uint64_t v3 = v1[3];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = swift_task_alloc();
  (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))(v6, v4, v3);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  swift_task_dealloc();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[64] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = ContentSelector.select(from:);
  return MEMORY[0x270FA1E88](v0 + 9, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  *(void *)(*(void *)v1 + 520) = v0;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](ContentSelector.select(from:), 0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unsigned int (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133[3];
  void *v134;
  uint64_t v135;

  uint64_t v134 = v0;
  uint64_t v3 = v0[9];
  if (v3)
  {
    uint64_t v124 = (uint64_t)(v0 + 2);
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v128 = v0 + 19;
    v0[19] = MEMORY[0x263F8EE78];
    uint64_t v5 = *(void *)(v3 + 16);
    swift_bridgeObjectRetain();
    uint64_t v132 = v3;
    if (!v5)
    {
LABEL_17:
      uint64_t v29 = v0[46];
      uint64_t v28 = v0[47];
      uint64_t v30 = v0[45];
      swift_bridgeObjectRelease();
      uint64_t v31 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v31);
      uint64_t v32 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v32);
      ContentSelector.getTamaleImage(onScreenContents:)(v4, v30);
      uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
      if (v33(v30, 1, v29) == 1)
      {
        int v34 = v0[46];
        int v35 = v0[44];
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v0[45], &demangling cache variable for type metadata for ScreenContent?);
        ContentSelector.getActiveWindow(onScreenContents:allowSnapshot:)(v4, 0, v35);
        swift_release();
        if (v33(v35, 1, v34) == 1)
        {
          uint64_t v36 = v0[44];
          swift_bridgeObjectRelease();
          outlined destroy of Result<URL, SharingMediaAttachmentError>(v36, &demangling cache variable for type metadata for ScreenContent?);
          __swift_mutable_project_boxed_opaque_existential_1(v124, v0[5]);
          uint64_t v37 = (void *)swift_task_alloc();
          v0[64] = v37;
          *uint64_t v37 = v0;
          v37[1] = ContentSelector.select(from:);
          return MEMORY[0x270FA1E88](v0 + 9, 0, 0);
        }
        uint64_t v50 = v0[59];
        uint64_t v51 = v0[44];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of ScreenContent(v51, v50, type metadata accessor for ScreenContent);
        if (one-time initialization token for contentSelector != -1) {
          swift_once();
        }
        uint64_t v52 = __swift_project_value_buffer(v0[30], (uint64_t)static Logger.contentSelector);
        uint64_t v53 = Logger.logObject.getter();
        int v54 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v53, v54))
        {
          size_t v55 = swift_slowAlloc();
          uint64_t v56 = swift_slowAlloc();
          v133[0] = v56;
          *(_DWORD *)size_t v55 = 136315394;
          v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v55 + 12) = 2080;
          v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x66287463656C6573, 0xED0000293A6D6F72, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v53, v54, "%s.%s early returning active window", (uint8_t *)v55, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v56, -1, -1);
          MEMORY[0x25336A180](v55, -1, -1);
        }

        char v58 = v0[58];
        uint64_t v57 = v0[59];
        (*(void (**)(void, uint64_t, void))(v0[31] + 16))(v0[33], v52, v0[30]);
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v57, v58, type metadata accessor for ScreenContent);
        id v59 = Logger.logObject.getter();
        uint64_t v60 = static os_log_type_t.debug.getter();
        char v61 = os_log_type_enabled(v59, v60);
        uint64_t v62 = v0[58];
        if (v61)
        {
          uint64_t v121 = v0[57];
          os_log_type_t v129 = v0[33];
          uint64_t v123 = v0[31];
          uint64_t v126 = v0[30];
          uint64_t v63 = swift_slowAlloc();
          id v64 = swift_slowAlloc();
          v133[0] = v64;
          *(_DWORD *)uint64_t v63 = 136315650;
          v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v63 + 12) = 2080;
          v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x66287463656C6573, 0xED0000293A6D6F72, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v63 + 22) = 2080;
          _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v62, v121, type metadata accessor for ScreenContent);
          uint64_t v65 = String.init<A>(describing:)();
          v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v62, type metadata accessor for ScreenContent);
          _os_log_impl(&dword_24F9A2000, v59, v60, "%s.%s active window: %s", (uint8_t *)v63, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v64, -1, -1);
          MEMORY[0x25336A180](v63, -1, -1);

          (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v129, v126);
        }
        else
        {
          unint64_t v74 = v0[33];
          char v75 = v0[30];
          uint64_t v76 = v0[31];
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v0[58], type metadata accessor for ScreenContent);

          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
        }
        uint64_t v77 = v0[59];
        ContentSelector.contentWithScreenshot(for:in:)(v77, v132, v0[27]);
        swift_bridgeObjectRelease();
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v77, type metadata accessor for ScreenContent);
        __swift_destroy_boxed_opaque_existential_0(v124);
      }
      else
      {
        char v43 = v0[62];
        int v44 = v0[45];
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with take of ScreenContent(v44, v43, type metadata accessor for ScreenContent);
        if (one-time initialization token for contentSelector != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v0[30], (uint64_t)static Logger.contentSelector);
        int v45 = Logger.logObject.getter();
        char v46 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = swift_slowAlloc();
          uint64_t v48 = swift_slowAlloc();
          v133[0] = v48;
          *(_DWORD *)uint64_t v47 = 136315394;
          v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v47 + 12) = 2080;
          v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x66287463656C6573, 0xED0000293A6D6F72, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v45, v46, "%s.%s returning tamale image", (uint8_t *)v47, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v48, -1, -1);
          MEMORY[0x25336A180](v47, -1, -1);
        }

        uint64_t v49 = v0[62];
        ContentSelector.contentWithScreenshot(for:in:)(v49, v132, v0[27]);
        swift_bridgeObjectRelease();
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v49, type metadata accessor for ScreenContent);
        __swift_destroy_boxed_opaque_existential_0(v124);
      }
      goto LABEL_57;
    }
    uint64_t v6 = 0;
    uint64_t v7 = MEMORY[0x263F8EE78];
    while (v6 < *(void *)(v3 + 16))
    {
      uint64_t v8 = v0[63];
      uint64_t v9 = v0[61];
      uint64_t v10 = v0[47];
      uint64_t v1 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v2 = *(void *)(v10 + 72);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v3 + v1 + v2 * v6, v8, type metadata accessor for ScreenContent);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v8, v9, type metadata accessor for ScreenContent);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v12 = v0[61];
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v14 = v0[35];
        uint64_t v13 = v0[36];
        uint64_t v15 = v0[34];
        outlined init with take of ScreenContent(v12, v14, type metadata accessor for DocumentInfo);
        outlined init with copy of OnScreenContent.UIMetadata?(v14 + *(int *)(v15 + 44), v13, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v16 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v13, 1, v16);
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v13, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v18 = type metadata accessor for DocumentInfo;
        uint64_t v19 = v14;
      }
      else
      {
        uint64_t v20 = v0[38];
        uint64_t v21 = v0[39];
        char v22 = v0[37];
        outlined init with take of ScreenContent(v12, v21, type metadata accessor for ImageInfo);
        outlined init with copy of OnScreenContent.UIMetadata?(v21 + *(int *)(v20 + 28), v22, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v23 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23);
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v22, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v18 = type metadata accessor for ImageInfo;
        uint64_t v19 = v21;
      }
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v19, v18);
      uint64_t v24 = v0[63];
      uint64_t v3 = v132;
      if (v17 == 1)
      {
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v24, type metadata accessor for ScreenContent);
      }
      else
      {
        outlined init with take of ScreenContent(v24, v0[60], type metadata accessor for ScreenContent);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        }
        uint64_t v7 = *v128;
        uint64_t v26 = *(void *)(*v128 + 16);
        uint64_t v25 = *(void *)(*v128 + 24);
        if (v26 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
          uint64_t v7 = *v128;
        }
        uint64_t v27 = v0[60];
        *(void *)(v7 + 16) = v26 + 1;
        outlined init with take of ScreenContent(v27, v7 + v1 + v26 * v2, type metadata accessor for ScreenContent);
      }
      if (v5 == ++v6)
      {
        uint64_t v4 = *v128;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_65:
    os_log_type_t v104 = v0[56];
    char v105 = v0[52];
    uint64_t v109 = v0[27];
    swift_bridgeObjectRelease();
    outlined init with take of ScreenContent(v1, v105, type metadata accessor for ScreenContent);
    uint64_t v110 = v109;
LABEL_66:
    ContentSelector.contentWithScreenshot(for:in:)(v105, v2, v110);
LABEL_55:
    swift_bridgeObjectRelease();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v105, type metadata accessor for ScreenContent);
    unint64_t v84 = v104;
    goto LABEL_56;
  }
  uint64_t v38 = v0[65];
  uint64_t v39 = v0[56];
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
  uint64_t v2 = v0[8];
  uint64_t v40 = swift_bridgeObjectRetain();
  ContentSelector.getDefaultWindow(onScreenContents:)(v40, v39);
  swift_bridgeObjectRelease();
  uint64_t v41 = v0[7];
  if (!v38)
  {
    if (*(void *)(v41 + 16))
    {
      uint64_t v67 = v0[46];
      int v68 = v0[47];
      size_t v69 = v0[43];
      uint64_t v70 = swift_bridgeObjectRetain();
      ContentSelector.getActiveWindow(onScreenContents:allowSnapshot:)(v70, 1, v69);
      swift_bridgeObjectRelease();
      Swift::Int_optional v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
      if (v71(v69, 1, v67) != 1)
      {
        uint64_t v85 = v0[55];
        uint64_t v86 = v0[43];
        swift_bridgeObjectRelease();
        outlined init with take of ScreenContent(v86, v85, type metadata accessor for ScreenContent);
        if (one-time initialization token for contentSelector != -1) {
          swift_once();
        }
        int64_t v87 = __swift_project_value_buffer(v0[30], (uint64_t)static Logger.contentSelector);
        unint64_t v88 = Logger.logObject.getter();
        uint64_t v89 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v88, v89))
        {
          int64_t v90 = swift_slowAlloc();
          uint64_t v91 = swift_slowAlloc();
          v133[0] = v91;
          *(_DWORD *)int64_t v90 = 136315394;
          v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v90 + 12) = 2080;
          v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x66287463656C6573, 0xED0000293A6D6F72, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v88, v89, "%s.%s returning active window after retrieving all contents", (uint8_t *)v90, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v91, -1, -1);
          MEMORY[0x25336A180](v90, -1, -1);
        }

        uint64_t v93 = v0[54];
        uint64_t v92 = v0[55];
        (*(void (**)(void, uint64_t, void))(v0[31] + 16))(v0[32], v87, v0[30]);
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v92, v93, type metadata accessor for ScreenContent);
        unint64_t v94 = Logger.logObject.getter();
        uint64_t v95 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v94, v95))
        {
          os_log_type_t v96 = v0[57];
          uint64_t v122 = v0[54];
          id v125 = v0[31];
          uint64_t v127 = v0[30];
          uint64_t v131 = v0[32];
          uint64_t v97 = swift_slowAlloc();
          uint64_t v98 = swift_slowAlloc();
          v133[0] = v98;
          *(_DWORD *)uint64_t v97 = 136315650;
          v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v97 + 12) = 2080;
          v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x66287463656C6573, 0xED0000293A6D6F72, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v97 + 22) = 2080;
          _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v122, v96, type metadata accessor for ScreenContent);
          uint64_t v99 = String.init<A>(describing:)();
          v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v122, type metadata accessor for ScreenContent);
          _os_log_impl(&dword_24F9A2000, v94, v95, "%s.%s active window: %s", (uint8_t *)v97, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v98, -1, -1);
          MEMORY[0x25336A180](v97, -1, -1);

          (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v131, v127);
        }
        else
        {
          uint64_t v102 = v0[31];
          uint64_t v101 = v0[32];
          uint64_t v103 = v0[30];
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v0[54], type metadata accessor for ScreenContent);

          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
        }
        char v105 = v0[55];
        os_log_type_t v104 = v0[56];
        ContentSelector.contentWithScreenshot(for:in:)(v105, v0[8], v0[27]);
        goto LABEL_55;
      }
      uint64_t v130 = v71;
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v0[43], &demangling cache variable for type metadata for ScreenContent?);
      Swift::Int_optional v72 = ContentSelector.getMostVisibleWindows(onScreenContents:)(v41);
      swift_bridgeObjectRelease();
      if (*(void *)(v72 + 16))
      {
        ContentSelector.getDefaultWindow(onScreenContents:)(v72, v0[53]);
        uint64_t v73 = v0[56];
        uint64_t v106 = v0[53];
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v73, type metadata accessor for ScreenContent);
        outlined init with take of ScreenContent(v106, v73, type metadata accessor for ScreenContent);
      }
      ContentSelector.select(from:defaultContent:)(v72, v0[56], v0[42]);
      uint64_t v1 = v0[42];
      if (v130(v1, 1, v0[46]) != 1) {
        goto LABEL_65;
      }
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v1, &demangling cache variable for type metadata for ScreenContent?);
      os_log_type_t v107 = ContentSelector.getLargestWindows(onScreenContents:)(v72);
      swift_bridgeObjectRelease();
      if (*(void *)(v107 + 16))
      {
        ContentSelector.getDefaultWindow(onScreenContents:)(v107, v0[51]);
        uint64_t v108 = v0[56];
        uint64_t v111 = v0[51];
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v108, type metadata accessor for ScreenContent);
        outlined init with take of ScreenContent(v111, v108, type metadata accessor for ScreenContent);
      }
      ContentSelector.select(from:defaultContent:)(v107, v0[56], v0[41]);
      uint64_t v112 = v0[41];
      if (v130(v112, 1, v0[46]) != 1)
      {
        os_log_type_t v104 = v0[56];
        char v105 = v0[50];
        uint64_t v115 = v0[27];
        swift_bridgeObjectRelease();
        outlined init with take of ScreenContent(v112, v105, type metadata accessor for ScreenContent);
        uint64_t v110 = v115;
        goto LABEL_66;
      }
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v112, &demangling cache variable for type metadata for ScreenContent?);
      uint64_t v113 = ContentSelector.getLeftMostWindows(onScreenContents:)(v107);
      swift_bridgeObjectRelease();
      if (*(void *)(v113 + 16))
      {
        ContentSelector.getDefaultWindow(onScreenContents:)(v113, v0[49]);
        uint64_t v114 = v0[56];
        uint64_t v116 = v0[49];
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v114, type metadata accessor for ScreenContent);
        outlined init with take of ScreenContent(v116, v114, type metadata accessor for ScreenContent);
      }
      ContentSelector.select(from:defaultContent:)(v113, v0[56], v0[40]);
      uint64_t v117 = v0[46];
      unint64_t v118 = v0[40];
      swift_bridgeObjectRelease();
      if (v130(v118, 1, v117) != 1)
      {
        os_log_type_t v104 = v0[56];
        char v105 = v0[48];
        uint64_t v119 = v0[27];
        outlined init with take of ScreenContent(v0[40], v105, type metadata accessor for ScreenContent);
        uint64_t v110 = v119;
        goto LABEL_66;
      }
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v0[40], &demangling cache variable for type metadata for ScreenContent?);
      if (one-time initialization token for contentSelector != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[30], (uint64_t)static Logger.contentSelector);
      uint64_t v78 = Logger.logObject.getter();
      uint64_t v79 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v78, v79))
      {
LABEL_46:

        unint64_t v83 = v0[56];
        ContentSelector.contentWithScreenshot(for:in:)(v83, v0[8], v0[27]);
        swift_bridgeObjectRelease();
        unint64_t v84 = v83;
LABEL_56:
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v84, type metadata accessor for ScreenContent);
LABEL_57:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v42 = (uint64_t (*)(void))v0[1];
        goto LABEL_58;
      }
      unint64_t v80 = swift_slowAlloc();
      unint64_t v81 = swift_slowAlloc();
      v133[0] = v81;
      *(_DWORD *)unint64_t v80 = 136315394;
      v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v80 + 12) = 2080;
      v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x66287463656C6573, 0xED0000293A6D6F72, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v82 = "%s.%s returning default content";
    }
    else
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for contentSelector != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v0[30], (uint64_t)static Logger.contentSelector);
      uint64_t v78 = Logger.logObject.getter();
      uint64_t v79 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v78, v79)) {
        goto LABEL_46;
      }
      unint64_t v80 = swift_slowAlloc();
      unint64_t v81 = swift_slowAlloc();
      v133[0] = v81;
      *(_DWORD *)unint64_t v80 = 136315394;
      v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v80 + 12) = 2080;
      v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x66287463656C6573, 0xED0000293A6D6F72, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v82 = "%s.%s all of the on screen contents are missing ui metadata, returning default content";
    }
    _os_log_impl(&dword_24F9A2000, v78, v79, v82, (uint8_t *)v80, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v81, -1, -1);
    MEMORY[0x25336A180](v80, -1, -1);
    goto LABEL_46;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = (uint64_t (*)(void))v0[1];
LABEL_58:
  return v42();
}

uint64_t ContentSelector.getTamaleImage(onScreenContents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenContent?);
  MEMORY[0x270FA5388](v60);
  uint64_t v58 = (uint64_t)v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v67 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for ImageInfo(0);
  uint64_t v6 = MEMORY[0x270FA5388](v72);
  uint64_t v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v56 - v9;
  uint64_t v73 = type metadata accessor for ScreenContent(0);
  uint64_t v11 = *(void *)(v73 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v73);
  uint64_t v71 = (uint64_t)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v56 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v56 - v17;
  uint64_t v19 = MEMORY[0x263F8EE78];
  v75[0] = MEMORY[0x263F8EE78];
  uint64_t v20 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v66 = v11;
  if (v20)
  {
    uint64_t v63 = v4;
    uint64_t v21 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v22 = *(void *)(v11 + 72);
    uint64_t v59 = a1;
    uint64_t v68 = (v21 + 32) & ~v21;
    uint64_t v23 = a1 + v68;
    uint64_t v24 = MEMORY[0x263F8EE78];
    size_t v69 = "com.apple.Tamale.MasaExtension";
    unint64_t v70 = 0x800000024FA42760;
    char v61 = "IntelligenceCamera";
    unint64_t v64 = 0x800000024FA42740;
    v56[1] = "ls.GenerativeAssistantExtension";
    unint64_t v57 = 0x800000024FA42710;
    while (1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v23, (uint64_t)v18, type metadata accessor for ScreenContent);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v18, (uint64_t)v16, type metadata accessor for ScreenContent);
      if (swift_getEnumCaseMultiPayload() == 1) {
        break;
      }
      outlined init with take of ScreenContent((uint64_t)v16, (uint64_t)v10, type metadata accessor for ImageInfo);
      uint64_t v27 = *((void *)v10 + 4);
      if (!v27)
      {
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v10, (uint64_t)v8, type metadata accessor for ImageInfo);
LABEL_25:
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v10, type metadata accessor for ImageInfo);
        uint64_t v26 = (uint64_t)v8;
        uint64_t v25 = type metadata accessor for ImageInfo;
LABEL_4:
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v26, v25);
        goto LABEL_5;
      }
      uint64_t v28 = *((void *)v10 + 3);
      if (v28 == 0xD000000000000010 && v27 == v70
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v28 == 0xD00000000000001ELL && v27 == v64
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v28 == 0xD000000000000022 && v27 == v57)
      {
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v10, (uint64_t)v8, type metadata accessor for ImageInfo);
      }
      else
      {
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v10, (uint64_t)v8, type metadata accessor for ImageInfo);
        if ((v32 & 1) == 0) {
          goto LABEL_25;
        }
      }
      char v29 = v8[*(int *)(v72 + 32)];
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v10, type metadata accessor for ImageInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v8, type metadata accessor for ImageInfo);
      if (v29)
      {
        outlined init with take of ScreenContent((uint64_t)v18, v71, type metadata accessor for ScreenContent);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
        }
        uint64_t v24 = v75[0];
        unint64_t v31 = *(void *)(v75[0] + 16);
        unint64_t v30 = *(void *)(v75[0] + 24);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
          uint64_t v24 = v75[0];
        }
        *(void *)(v24 + 16) = v31 + 1;
        outlined init with take of ScreenContent(v71, v24 + v68 + v31 * v22, type metadata accessor for ScreenContent);
        goto LABEL_6;
      }
LABEL_5:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v18, type metadata accessor for ScreenContent);
LABEL_6:
      v23 += v22;
      if (!--v20)
      {
        uint64_t v19 = v75[0];
        uint64_t v4 = v63;
        goto LABEL_29;
      }
    }
    uint64_t v25 = type metadata accessor for DocumentInfo;
    uint64_t v26 = (uint64_t)v16;
    goto LABEL_4;
  }
LABEL_29:
  swift_bridgeObjectRelease();
  unint64_t v33 = *(void *)(v19 + 16);
  int v34 = v67;
  if (v33 > 1)
  {
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v35 = __swift_project_value_buffer(v4, (uint64_t)static Logger.contentSelector);
    uint64_t v36 = v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v34, v35, v4);
    swift_retain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v63 = v4;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      v75[0] = v40;
      *(_DWORD *)uint64_t v39 = 136315906;
      uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 12) = 2080;
      uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x800000024FA4A5B0, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 22) = 2048;
      uint64_t v74 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v39 + 32) = 2080;
      uint64_t v41 = *(void *)(v19 + 16);
      uint64_t v72 = v40;
      if (v41)
      {
        uint64_t v42 = v66;
        uint64_t v43 = v58;
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v19 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80)), v58, type metadata accessor for ScreenContent);
        uint64_t v44 = v43;
        uint64_t v45 = v62;
      }
      else
      {
        uint64_t v45 = v62;
        uint64_t v42 = v66;
        uint64_t v44 = v58;
      }
      char v46 = *(void (**)(void))(v42 + 56);
      uint64_t v47 = v44;
      v46();
      uint64_t v48 = Optional.debugDescription.getter();
      unint64_t v50 = v49;
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v47, &demangling cache variable for type metadata for ScreenContent?);
      uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24F9A2000, v37, v38, "%s.%s %ld Tamale images detected. Using %s", (uint8_t *)v39, 0x2Au);
      uint64_t v51 = v72;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v51, -1, -1);
      MEMORY[0x25336A180](v39, -1, -1);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v67, v63);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v4);
    }
    unint64_t v33 = *(void *)(v19 + 16);
  }
  uint64_t v52 = v65;
  if (v33)
  {
    uint64_t v53 = v66;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v19 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80)), v65, type metadata accessor for ScreenContent);
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = 1;
    uint64_t v53 = v66;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, v54, 1, v73);
  return swift_release();
}

uint64_t ContentSelector.contentWithScreenshot(for:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v96 = a2;
  uint64_t v100 = type metadata accessor for IntelligenceProcessInfo();
  uint64_t v103 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v92 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IntelligenceProcessInfo?, IntelligenceProcessInfo?));
  MEMORY[0x270FA5388](v99);
  uint64_t v107 = (uint64_t)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceProcessInfo?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v97 = (uint64_t)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v108 = (uint64_t)&v84 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v106 = (uint64_t)&v84 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  MEMORY[0x270FA5388](v13 - 8);
  os_log_type_t v104 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata.Window?);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v101 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v98 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v84 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v109 = (char *)&v84 - v24;
  uint64_t v112 = type metadata accessor for ImageInfo(0);
  uint64_t v102 = *(void *)(v112 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v112);
  uint64_t v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  char v29 = (char *)&v84 - v28;
  uint64_t v30 = type metadata accessor for ScreenContent(0);
  uint64_t v93 = *(void *)(v30 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v30);
  unint64_t v33 = (char *)&v84 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v84 - v34;
  uint64_t v105 = a1;
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(a1, (uint64_t)&v84 - v34, type metadata accessor for ScreenContent);
  uint64_t v111 = v30;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v35, type metadata accessor for ScreenContent);
  }
  else
  {
    outlined init with take of ScreenContent((uint64_t)v35, (uint64_t)v29, type metadata accessor for ImageInfo);
    char v36 = v29[17];
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v29, type metadata accessor for ImageInfo);
    if (v36) {
      goto LABEL_40;
    }
  }
  uint64_t v37 = v105;
  ScreenContent.window.getter((uint64_t)v17);
  uint64_t v38 = v101;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v17, &demangling cache variable for type metadata for OnScreenContent.UIMetadata.Window?);
    uint64_t v39 = v37;
    goto LABEL_41;
  }
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  uint64_t v41 = v109;
  uint64_t v95 = v38 + 32;
  unint64_t v94 = v40;
  v40(v109, v17, v18);
  uint64_t v42 = v38;
  uint64_t v43 = *(void *)(v96 + 16);
  if (!v43) {
    goto LABEL_39;
  }
  uint64_t v87 = a3;
  uint64_t v44 = v96 + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
  int64_t v90 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  uint64_t v86 = (void (**)(char *, uint64_t, uint64_t))(v103 + 32);
  unint64_t v88 = (void (**)(uint64_t, uint64_t))(v103 + 8);
  uint64_t v91 = (void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v85 = v114;
  uint64_t v45 = *(void *)(v93 + 72);
  swift_bridgeObjectRetain();
  uint64_t v46 = (uint64_t)v104;
  uint64_t v89 = v18;
  uint64_t v110 = v23;
  uint64_t v103 = v45;
  do
  {
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v44, (uint64_t)v33, type metadata accessor for ScreenContent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v47 = type metadata accessor for ScreenContent;
      uint64_t v48 = (uint64_t)v33;
LABEL_9:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v48, v47);
      goto LABEL_10;
    }
    outlined init with take of ScreenContent((uint64_t)v33, (uint64_t)v27, type metadata accessor for ImageInfo);
    if (v27[17] != 1)
    {
      uint64_t v47 = type metadata accessor for ImageInfo;
      uint64_t v48 = (uint64_t)v27;
      goto LABEL_9;
    }
    outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)&v27[*(int *)(v112 + 28)], v46, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v49 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v50 = *(void *)(v49 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v46, 1, v49) == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v46, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v27, type metadata accessor for ImageInfo);
      uint64_t v45 = v103;
      goto LABEL_10;
    }
    uint64_t v51 = v98;
    OnScreenContent.UIMetadata.window.getter();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v46, v49);
    v94(v110, v51, v18);
    uint64_t v52 = v106;
    OnScreenContent.UIMetadata.Window.appProcess.getter();
    uint64_t v53 = v108;
    OnScreenContent.UIMetadata.Window.appProcess.getter();
    uint64_t v54 = v107;
    uint64_t v55 = v107 + *(int *)(v99 + 48);
    outlined init with copy of OnScreenContent.UIMetadata?(v52, v107, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    outlined init with copy of OnScreenContent.UIMetadata?(v53, v55, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    uint64_t v56 = *v90;
    uint64_t v57 = v100;
    if ((*v90)(v54, 1, v100) == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v108, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v52, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
      unsigned int v58 = v56(v55, 1, v57);
      uint64_t v59 = v110;
      if (v58 == 1)
      {
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v107, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
        uint64_t v18 = v89;
LABEL_23:
        int v64 = OnScreenContent.UIMetadata.Window.isActive.getter();
        if ((v64 ^ OnScreenContent.UIMetadata.Window.isActive.getter())) {
          goto LABEL_24;
        }
        double v65 = COERCE_DOUBLE(OnScreenContent.UIMetadata.Window.fractionVisible.getter());
        char v67 = v66;
        double v68 = COERCE_DOUBLE(OnScreenContent.UIMetadata.Window.fractionVisible.getter());
        if (v67)
        {
          uint64_t v45 = v103;
          if ((v69 & 1) == 0)
          {
LABEL_35:
            (*v91)(v59, v18);
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v45 = v103;
          if ((v69 & 1) != 0 || v65 != v68) {
            goto LABEL_35;
          }
        }
        OnScreenContent.UIMetadata.Window.boundingBox.getter();
        CGFloat v70 = *(double *)v115;
        CGFloat v71 = *(double *)&v115[1];
        CGFloat v72 = *(double *)&v115[2];
        CGFloat v73 = *(double *)&v115[3];
        OnScreenContent.UIMetadata.Window.boundingBox.getter();
        CGFloat v74 = *(double *)v116;
        CGFloat v75 = *(double *)&v116[1];
        CGFloat v76 = *(double *)&v116[2];
        CGFloat v77 = *(double *)&v116[3];
        outlined init with take of CGRect?((uint64_t)v115, (uint64_t)v113);
        outlined init with take of CGRect?((uint64_t)v116, (uint64_t)v85);
        outlined init with take of CGRect?((uint64_t)v115, (uint64_t)v118);
        if (v118[32])
        {
          uint64_t v78 = *v91;
          (*v91)(v59, v18);
          if (v114[32]) {
            goto LABEL_37;
          }
          goto LABEL_25;
        }
        outlined init with take of CGRect?((uint64_t)v116, (uint64_t)v117);
        if ((v117[32] & 1) == 0)
        {
          v119.origin.x = v70;
          v119.origin.y = v71;
          v119.size.width = v72;
          v119.size.height = v73;
          v120.origin.x = v74;
          v120.origin.y = v75;
          v120.size.width = v76;
          v120.size.height = v77;
          BOOL v79 = CGRectEqualToRect(v119, v120);
          uint64_t v78 = *v91;
          (*v91)(v59, v18);
          if (v79)
          {
LABEL_37:
            swift_bridgeObjectRelease();
            v78(v109, v18);
            uint64_t v80 = v87;
            _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v105, v87, type metadata accessor for ScreenContent);
            uint64_t v81 = v80 + *(int *)(type metadata accessor for SelectedContent() + 20);
            outlined init with take of ScreenContent((uint64_t)v27, v81, type metadata accessor for ImageInfo);
            return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v102 + 56))(v81, 0, 1, v112);
          }
          goto LABEL_25;
        }
        goto LABEL_35;
      }
      goto LABEL_21;
    }
    uint64_t v60 = v97;
    outlined init with copy of OnScreenContent.UIMetadata?(v54, v97, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    if (v56(v55, 1, v57) == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v108, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v106, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
      (*v88)(v60, v57);
      uint64_t v59 = v110;
LABEL_21:
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v107, &demangling cache variable for type metadata for (IntelligenceProcessInfo?, IntelligenceProcessInfo?));
      uint64_t v18 = v89;
      goto LABEL_24;
    }
    char v61 = v92;
    (*v86)(v92, v55, v57);
    lazy protocol witness table accessor for type IntelligenceProcessInfo and conformance IntelligenceProcessInfo();
    char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v63 = *v88;
    (*v88)((uint64_t)v61, v57);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v108, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v106, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    v63(v97, v57);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v54, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    uint64_t v18 = v89;
    uint64_t v59 = v110;
    if (v62) {
      goto LABEL_23;
    }
LABEL_24:
    (*v91)(v59, v18);
    uint64_t v45 = v103;
LABEL_25:
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v27, type metadata accessor for ImageInfo);
    uint64_t v46 = (uint64_t)v104;
LABEL_10:
    v44 += v45;
    --v43;
  }
  while (v43);
  swift_bridgeObjectRelease();
  a3 = v87;
  uint64_t v41 = v109;
  uint64_t v42 = v101;
LABEL_39:
  (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v18);
LABEL_40:
  uint64_t v39 = v105;
LABEL_41:
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v39, a3, type metadata accessor for ScreenContent);
  uint64_t v83 = a3 + *(int *)(type metadata accessor for SelectedContent() + 20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v102 + 56))(v83, 1, 1, v112);
}

uint64_t ContentSelector.getActiveWindow(onScreenContents:allowSnapshot:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v188 = a2;
  uint64_t v191 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceProcessInfo?);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  unint64_t v186 = (char *)&v177 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v185 = (char *)&v177 - v7;
  uint64_t v212 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v8 = *(void *)(v212 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v212);
  uint64_t v184 = (char *)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v183 = (char *)&v177 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v211 = (void (**)(char *, uint64_t))((char *)&v177 - v13);
  uint64_t v214 = type metadata accessor for DocumentInfo(0);
  uint64_t v14 = MEMORY[0x270FA5388](v214);
  uint64_t v192 = (uint64_t)&v177 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v177 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v204 = (char *)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v189 = (uint64_t)&v177 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v210 = (uint64_t)&v177 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v177 - v25;
  uint64_t v213 = type metadata accessor for ImageInfo(0);
  uint64_t v27 = MEMORY[0x270FA5388](v213);
  uint64_t v193 = (uint64_t)&v177 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v197 = (uint64_t)&v177 - v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v209 = (uint64_t)&v177 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenContent?);
  uint64_t v33 = MEMORY[0x270FA5388](v32 - 8);
  uint64_t v181 = (uint64_t)&v177 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v190 = (uint64_t)&v177 - v35;
  uint64_t v36 = type metadata accessor for ScreenContent(0);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v194 = (uint64_t)&v177 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v195 = (uint64_t)&v177 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v180 = (uint64_t)&v177 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v198 = (uint64_t)&v177 - v45;
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v196 = (uint64_t)&v177 - v47;
  uint64_t v48 = MEMORY[0x270FA5388](v46);
  uint64_t v201 = (uint64_t)&v177 - v49;
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  uint64_t v178 = (uint64_t)&v177 - v51;
  uint64_t v52 = MEMORY[0x270FA5388](v50);
  uint64_t v179 = (uint64_t)&v177 - v53;
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  uint64_t v207 = (char *)&v177 - v55;
  uint64_t v56 = MEMORY[0x270FA5388](v54);
  uint64_t v208 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v177 - v57);
  uint64_t v58 = MEMORY[0x270FA5388](v56);
  uint64_t v60 = (char *)&v177 - v59;
  uint64_t v61 = MEMORY[0x270FA5388](v58);
  uint64_t v187 = (uint64_t)&v177 - v62;
  MEMORY[0x270FA5388](v61);
  int v64 = (char *)&v177 - v63;
  uint64_t v65 = MEMORY[0x263F8EE78];
  uint64_t v217 = MEMORY[0x263F8EE78];
  uint64_t v66 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v215 = v36;
  uint64_t v202 = v8;
  uint64_t v203 = v37;
  if (v66)
  {
    unint64_t v67 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v68 = *(void *)(v37 + 72);
    uint64_t v182 = a1;
    uint64_t v199 = v64;
    unint64_t v200 = v67;
    uint64_t v69 = a1 + v67;
    char v205 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v206 = v17;
    while (1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v69, (uint64_t)v64, type metadata accessor for ScreenContent);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v64, (uint64_t)v60, type metadata accessor for ScreenContent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of ScreenContent((uint64_t)v60, (uint64_t)v17, type metadata accessor for DocumentInfo);
        uint64_t v71 = v210;
        outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)&v17[*(int *)(v214 + 44)], v210, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v72 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v73 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72) == 1)
        {
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v17, type metadata accessor for DocumentInfo);
          uint64_t v70 = v71;
          goto LABEL_4;
        }
        uint64_t v85 = v211;
        OnScreenContent.UIMetadata.window.getter();
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
        char v81 = OnScreenContent.UIMetadata.Window.isActive.getter();
        uint64_t v86 = (char *)v85;
        uint64_t v17 = v206;
        (*v205)(v86, v212);
        uint64_t v83 = type metadata accessor for DocumentInfo;
        uint64_t v84 = (uint64_t)v17;
      }
      else
      {
        uint64_t v74 = v209;
        outlined init with take of ScreenContent((uint64_t)v60, v209, type metadata accessor for ImageInfo);
        outlined init with copy of OnScreenContent.UIMetadata?(v74 + *(int *)(v213 + 28), (uint64_t)v26, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v75 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v26, 1, v75) == 1)
        {
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v74, type metadata accessor for ImageInfo);
          uint64_t v70 = (uint64_t)v26;
LABEL_4:
          outlined destroy of Result<URL, SharingMediaAttachmentError>(v70, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v36 = v215;
          goto LABEL_5;
        }
        CGFloat v77 = v211;
        uint64_t v78 = v60;
        uint64_t v79 = v68;
        uint64_t v80 = v74;
        OnScreenContent.UIMetadata.window.getter();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v26, v75);
        char v81 = OnScreenContent.UIMetadata.Window.isActive.getter();
        uint64_t v82 = (char *)v77;
        uint64_t v17 = v206;
        (*v205)(v82, v212);
        uint64_t v83 = type metadata accessor for ImageInfo;
        uint64_t v84 = v80;
        uint64_t v68 = v79;
        uint64_t v60 = v78;
        int v64 = v199;
      }
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v84, v83);
      uint64_t v36 = v215;
      if (v81)
      {
        outlined init with take of ScreenContent((uint64_t)v64, (uint64_t)v208, type metadata accessor for ScreenContent);
        uint64_t v87 = v217;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v87 + 16) + 1, 1);
          uint64_t v87 = v217;
        }
        unint64_t v89 = *(void *)(v87 + 16);
        unint64_t v88 = *(void *)(v87 + 24);
        if (v89 >= v88 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1);
          uint64_t v87 = v217;
        }
        *(void *)(v87 + 16) = v89 + 1;
        outlined init with take of ScreenContent((uint64_t)v208, v87 + v200 + v89 * v68, type metadata accessor for ScreenContent);
        uint64_t v36 = v215;
        goto LABEL_6;
      }
LABEL_5:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v64, type metadata accessor for ScreenContent);
LABEL_6:
      v69 += v68;
      if (!--v66)
      {
        uint64_t v90 = v217;
        uint64_t v91 = v191;
        uint64_t v37 = v203;
        goto LABEL_21;
      }
    }
  }
  uint64_t v90 = v65;
  uint64_t v91 = v191;
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v92 = v190;
  ContentSelector.getNonSnapshotWindow(onScreenContents:)(v90, v190);
  uint64_t v95 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  uint64_t v94 = v37 + 48;
  uint64_t v93 = v95;
  unsigned int v96 = v95(v92, 1, v36);
  uint64_t v97 = (uint64_t)v204;
  uint64_t v98 = v202;
  if (v96 != 1)
  {
    swift_release();
    uint64_t v94 = v187;
    outlined init with take of ScreenContent(v92, v187, type metadata accessor for ScreenContent);
    if (one-time initialization token for contentSelector != -1) {
      goto LABEL_87;
    }
    goto LABEL_37;
  }
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v92, &demangling cache variable for type metadata for ScreenContent?);
  if ((v188 & 1) == 0)
  {
    swift_release();
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v119 = type metadata accessor for Logger();
    __swift_project_value_buffer(v119, (uint64_t)static Logger.contentSelector);
    CGRect v120 = Logger.logObject.getter();
    os_log_type_t v121 = static os_log_type_t.info.getter();
    BOOL v122 = os_log_type_enabled(v120, v121);
    uint64_t v123 = v203;
    if (v122)
    {
      uint64_t v124 = swift_slowAlloc();
      uint64_t v125 = swift_slowAlloc();
      uint64_t v217 = v125;
      *(_DWORD *)uint64_t v124 = 136315394;
      uint64_t v216 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v124 + 12) = 2080;
      uint64_t v216 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x800000024FA4A690, &v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v120, v121, "%s.%s allowSnapshot is set to false, returning nil", (uint8_t *)v124, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v125, -1, -1);
      MEMORY[0x25336A180](v124, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v123 + 56))(v91, 1, 1, v36);
  }
  uint64_t v208 = v93;
  uint64_t v99 = MEMORY[0x263F8EE78];
  uint64_t v217 = MEMORY[0x263F8EE78];
  uint64_t v100 = *(void *)(v90 + 16);
  if (v100)
  {
    unint64_t v101 = 0;
    while (1)
    {
      if (v101 >= *(void *)(v90 + 16))
      {
        __break(1u);
LABEL_87:
        swift_once();
LABEL_37:
        uint64_t v111 = type metadata accessor for Logger();
        __swift_project_value_buffer(v111, (uint64_t)static Logger.contentSelector);
        uint64_t v112 = Logger.logObject.getter();
        os_log_type_t v113 = static os_log_type_t.info.getter();
        BOOL v114 = os_log_type_enabled(v112, v113);
        uint64_t v115 = v203;
        if (v114)
        {
          uint64_t v116 = swift_slowAlloc();
          uint64_t v117 = swift_slowAlloc();
          uint64_t v217 = v117;
          *(_DWORD *)uint64_t v116 = 136315394;
          uint64_t v216 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v217);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v116 + 12) = 2080;
          uint64_t v216 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x800000024FA4A690, &v217);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_24F9A2000, v112, v113, "%s.%s found an non-snapshot active window, returning it", (uint8_t *)v116, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x25336A180](v117, -1, -1);
          MEMORY[0x25336A180](v116, -1, -1);
        }

        outlined init with take of ScreenContent(v94, v91, type metadata accessor for ScreenContent);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v91, 0, 1, v36);
      }
      unint64_t v102 = (*(unsigned __int8 *)(v203 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v203 + 80);
      uint64_t v103 = *(void *)(v203 + 72);
      os_log_type_t v104 = v207;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v90 + v102 + v103 * v101, (uint64_t)v207, type metadata accessor for ScreenContent);
      uint64_t v105 = v201;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v104, v201, type metadata accessor for ScreenContent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v105, type metadata accessor for ScreenContent);
      }
      else
      {
        uint64_t v106 = v197;
        outlined init with take of ScreenContent(v105, v197, type metadata accessor for ImageInfo);
        char v107 = *(unsigned char *)(v106 + 17);
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v106, type metadata accessor for ImageInfo);
        if (v107)
        {
          outlined init with take of ScreenContent((uint64_t)v207, v196, type metadata accessor for ScreenContent);
          uint64_t v108 = v217;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v108 + 16) + 1, 1);
            uint64_t v108 = v217;
          }
          unint64_t v110 = *(void *)(v108 + 16);
          unint64_t v109 = *(void *)(v108 + 24);
          if (v110 >= v109 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v109 > 1, v110 + 1, 1);
            uint64_t v108 = v217;
          }
          *(void *)(v108 + 16) = v110 + 1;
          outlined init with take of ScreenContent(v196, v108 + v102 + v110 * v103, type metadata accessor for ScreenContent);
          uint64_t v36 = v215;
          goto LABEL_27;
        }
      }
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v207, type metadata accessor for ScreenContent);
LABEL_27:
      ++v101;
      uint64_t v97 = (uint64_t)v204;
      uint64_t v98 = v202;
      if (v100 == v101)
      {
        uint64_t v99 = v217;
        break;
      }
    }
  }
  swift_release();
  uint64_t v126 = *(void *)(v99 + 16);
  uint64_t v209 = v99;
  if (!v126)
  {
LABEL_76:
    uint64_t v168 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v203 + 56);
    uint64_t v169 = v181;
    v168(v181, 1, 1, v36);
    goto LABEL_77;
  }
  uint64_t v206 = (char *)v94;
  uint64_t v127 = v99 + ((*(unsigned __int8 *)(v203 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v203 + 80));
  uint64_t v128 = *(void *)(v203 + 72);
  swift_retain();
  uint64_t v129 = v127;
  uint64_t v130 = v126;
  uint64_t v131 = v198;
  do
  {
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v129, v131, type metadata accessor for ScreenContent);
    if (closure #3 in ContentSelector.getActiveWindow(onScreenContents:allowSnapshot:)(v131))
    {
      swift_release();
      uint64_t v158 = v178;
      outlined init with take of ScreenContent(v198, v178, type metadata accessor for ScreenContent);
      swift_release();
      uint64_t v159 = v179;
      outlined init with take of ScreenContent(v158, v179, type metadata accessor for ScreenContent);
      if (one-time initialization token for contentSelector != -1) {
        swift_once();
      }
      uint64_t v160 = type metadata accessor for Logger();
      __swift_project_value_buffer(v160, (uint64_t)static Logger.contentSelector);
      unint64_t v161 = Logger.logObject.getter();
      os_log_type_t v162 = static os_log_type_t.info.getter();
      BOOL v163 = os_log_type_enabled(v161, v162);
      uint64_t v164 = v191;
      uint64_t v165 = v203;
      if (v163)
      {
        uint64_t v166 = swift_slowAlloc();
        uint64_t v167 = swift_slowAlloc();
        uint64_t v217 = v167;
        *(_DWORD *)uint64_t v166 = 136315394;
        uint64_t v216 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v217);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v166 + 12) = 2080;
        uint64_t v216 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x800000024FA4A690, &v217);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_24F9A2000, v161, v162, "%s.%s found an active appSnapshotActiveWindow, returning it", (uint8_t *)v166, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v167, -1, -1);
        MEMORY[0x25336A180](v166, -1, -1);
      }

      outlined init with take of ScreenContent(v159, v164, type metadata accessor for ScreenContent);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v165 + 56))(v164, 0, 1, v36);
    }
    uint64_t v131 = v198;
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v198, type metadata accessor for ScreenContent);
    v129 += v128;
    --v130;
  }
  while (v130);
  swift_release();
  uint64_t v211 = (void (**)(char *, uint64_t))(v98 + 8);
  swift_retain();
  uint64_t v210 = 0xD000000000000015;
  uint64_t v207 = ":allowSnapshot:)";
  char v205 = (void (**)(char *, uint64_t))0x800000024FA4A6D0;
  uint64_t v132 = v193;
  uint64_t v133 = v195;
  while (1)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v127, v133, type metadata accessor for ScreenContent);
    uint64_t v135 = v133;
    uint64_t v136 = v194;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v135, v194, type metadata accessor for ScreenContent);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ScreenContent(v136, v132, type metadata accessor for ImageInfo);
      uint64_t v141 = v189;
      outlined init with copy of OnScreenContent.UIMetadata?(v132 + *(int *)(v213 + 28), v189, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      uint64_t v142 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v143 = *(void *)(v142 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142) == 1)
      {
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v132, type metadata accessor for ImageInfo);
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v141, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      }
      else
      {
        uint64_t v148 = v183;
        OnScreenContent.UIMetadata.window.getter();
        (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v141, v142);
        uint64_t v149 = v185;
        OnScreenContent.UIMetadata.Window.appProcess.getter();
        (*v211)(v148, v212);
        uint64_t v146 = type metadata accessor for IntelligenceProcessInfo();
        uint64_t v147 = *(void *)(v146 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v149, 1, v146) != 1)
        {
          uint64_t v152 = IntelligenceProcessInfo.bundleIdentifier.getter();
          uint64_t v154 = v157;
          uint64_t v155 = type metadata accessor for ImageInfo;
          uint64_t v156 = &v219;
          goto LABEL_66;
        }
        uint64_t v150 = v193;
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v193, type metadata accessor for ImageInfo);
        uint64_t v151 = (uint64_t)v149;
        uint64_t v132 = v150;
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v151, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
        uint64_t v36 = v215;
      }
      uint64_t v97 = (uint64_t)v204;
      goto LABEL_52;
    }
    uint64_t v137 = v192;
    outlined init with take of ScreenContent(v136, v192, type metadata accessor for DocumentInfo);
    outlined init with copy of OnScreenContent.UIMetadata?(v137 + *(int *)(v214 + 44), v97, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v138 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v139 = v97;
    uint64_t v140 = *(void *)(v138 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48))(v139, 1, v138) == 1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v137, type metadata accessor for DocumentInfo);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v139, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      uint64_t v97 = v139;
LABEL_60:
      uint64_t v132 = v193;
      goto LABEL_52;
    }
    int v144 = v184;
    OnScreenContent.UIMetadata.window.getter();
    (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v139, v138);
    uint64_t v145 = (uint64_t)v186;
    OnScreenContent.UIMetadata.Window.appProcess.getter();
    (*v211)(v144, v212);
    uint64_t v146 = type metadata accessor for IntelligenceProcessInfo();
    uint64_t v147 = *(void *)(v146 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146) == 1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v192, type metadata accessor for DocumentInfo);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v145, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
      uint64_t v36 = v215;
      uint64_t v97 = (uint64_t)v204;
      goto LABEL_60;
    }
    uint64_t v149 = (char *)v145;
    uint64_t v152 = IntelligenceProcessInfo.bundleIdentifier.getter();
    uint64_t v154 = v153;
    uint64_t v155 = type metadata accessor for DocumentInfo;
    uint64_t v156 = &v218;
LABEL_66:
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(*(v156 - 32), v155);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v149, v146);
    uint64_t v36 = v215;
    uint64_t v97 = (uint64_t)v204;
    uint64_t v132 = v193;
    if (v154)
    {
      if (v152 == v210 && v154 == v205)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }
      char v134 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v134) {
        break;
      }
    }
LABEL_52:
    uint64_t v133 = v195;
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v195, type metadata accessor for ScreenContent);
    v127 += v128;
    if (!--v126)
    {
      swift_release();
      goto LABEL_76;
    }
  }
  swift_release();
LABEL_85:
  uint64_t v169 = v181;
  outlined init with take of ScreenContent(v195, v181, type metadata accessor for ScreenContent);
  uint64_t v168 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v203 + 56);
  v168(v169, 0, 1, v36);
LABEL_77:
  uint64_t v170 = v36;
  uint64_t v171 = v191;
  swift_release();
  if (v208(v169, 1, v170) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v169, &demangling cache variable for type metadata for ScreenContent?);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v168)(v171, 1, 1, v170);
  }
  else
  {
    outlined init with take of ScreenContent(v169, v180, type metadata accessor for ScreenContent);
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v172 = type metadata accessor for Logger();
    __swift_project_value_buffer(v172, (uint64_t)static Logger.contentSelector);
    uint64_t v173 = Logger.logObject.getter();
    os_log_type_t v174 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v173, v174))
    {
      uint64_t v175 = swift_slowAlloc();
      uint64_t v176 = swift_slowAlloc();
      uint64_t v217 = v176;
      *(_DWORD *)uint64_t v175 = 136315394;
      uint64_t v216 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v175 + 12) = 2080;
      uint64_t v216 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000030, 0x800000024FA4A690, &v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v173, v174, "%s.%s found an active springboardAppSnapshotActiveWindow, returning it", (uint8_t *)v175, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v176, -1, -1);
      MEMORY[0x25336A180](v175, -1, -1);
    }

    outlined init with take of ScreenContent(v180, v171, type metadata accessor for ScreenContent);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v168)(v171, 0, 1, v215);
  }
}

uint64_t ContentSelector.getDefaultWindow(onScreenContents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v3 - 8);
  uint64_t v55 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v49 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v52 = (char *)&v48 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenContent?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ScreenContent(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v50 = (uint64_t)&v48 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v48 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v48 - v23;
  ContentSelector.getNonSnapshotWindow(onScreenContents:)(a1, (uint64_t)v9);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v51 = v10;
  if (v25(v9, 1, v10) != 1)
  {
    outlined init with take of ScreenContent((uint64_t)v9, (uint64_t)v24, type metadata accessor for ScreenContent);
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v36 = v55;
    uint64_t v37 = __swift_project_value_buffer(v55, (uint64_t)static Logger.contentSelector);
    uint64_t v38 = v54;
    uint64_t v39 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v52, v37, v36);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v24, (uint64_t)v22, type metadata accessor for ScreenContent);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v49 = (char *)swift_slowAlloc();
      uint64_t v57 = v49;
      *(_DWORD *)uint64_t v42 = 136315650;
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x800000024FA4A720, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 22) = 2080;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v22, v50, type metadata accessor for ScreenContent);
      uint64_t v43 = String.init<A>(describing:)();
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v22, type metadata accessor for ScreenContent);
      _os_log_impl(&dword_24F9A2000, v40, v41, "%s.%s defaulting to non-snapshot: %s", (uint8_t *)v42, 0x20u);
      uint64_t v45 = v49;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v45, -1, -1);
      MEMORY[0x25336A180](v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v55);
    }
    else
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v22, type metadata accessor for ScreenContent);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v36);
    }
    return outlined init with take of ScreenContent((uint64_t)v24, v53, type metadata accessor for ScreenContent);
  }
  outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v9, &demangling cache variable for type metadata for ScreenContent?);
  if (*(void *)(a1 + 16))
  {
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), (uint64_t)v17, type metadata accessor for ScreenContent);
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v26 = v55;
    uint64_t v27 = __swift_project_value_buffer(v55, (uint64_t)static Logger.contentSelector);
    uint64_t v28 = v54;
    uint64_t v29 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v49, v27, v26);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v17, (uint64_t)v14, type metadata accessor for ScreenContent);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v57 = (char *)v33;
      *(_DWORD *)uint64_t v32 = 136315650;
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v52 = v17;
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x800000024FA4A720, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 22) = 2080;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v14, v50, type metadata accessor for ScreenContent);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v14, type metadata accessor for ScreenContent);
      _os_log_impl(&dword_24F9A2000, v30, v31, "%s.%s defaulting to snapshot: %s", (uint8_t *)v32, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v33, -1, -1);
      MEMORY[0x25336A180](v32, -1, -1);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v29, v55);
      uint64_t v24 = v52;
    }
    else
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v14, type metadata accessor for ScreenContent);

      (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v26);
      uint64_t v24 = v17;
    }
    return outlined init with take of ScreenContent((uint64_t)v24, v53, type metadata accessor for ScreenContent);
  }
  if (specialized ScreenLockChecker.isScreenLocked()())
  {
    lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
    swift_allocError();
    *uint64_t v46 = 10;
  }
  else
  {
    lazy protocol witness table accessor for type ContentSelector.Error and conformance ContentSelector.Error();
    swift_allocError();
  }
  return swift_willThrow();
}

uint64_t ContentSelector.getMostVisibleWindows(onScreenContents:)(uint64_t a1)
{
  uint64_t v114 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v2 = *(void *)(v114 - 8);
  MEMORY[0x270FA5388](v114);
  os_log_type_t v113 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for DocumentInfo(0);
  uint64_t v4 = MEMORY[0x270FA5388](v112);
  char v107 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v117 = (uint64_t)&v97 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v105 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v104 = (uint64_t)&v97 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v110 = (uint64_t)&v97 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v116 = (uint64_t)&v97 - v14;
  uint64_t v111 = type metadata accessor for ImageInfo(0);
  uint64_t v15 = MEMORY[0x270FA5388](v111);
  uint64_t v103 = (uint64_t)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v109 = (uint64_t)&v97 - v17;
  uint64_t v118 = type metadata accessor for ScreenContent(0);
  uint64_t v18 = *(void *)(v118 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v118);
  uint64_t v102 = (uint64_t)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v97 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v106 = (char *)&v97 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v97 - v27;
  MEMORY[0x270FA5388](v26);
  unint64_t v119 = (unint64_t)&v97 - v29;
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = MEMORY[0x263F8EE78];
  uint64_t v100 = a1;
  if (v30)
  {
    uint64_t v99 = v23;
    uint64_t v32 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v97 = v18;
    uint64_t v115 = *(void *)(v18 + 72);
    uint64_t v98 = v2;
    uint64_t v108 = (void (**)(char *, uint64_t))(v2 + 8);
    swift_bridgeObjectRetain();
    uint64_t v33 = (double *)MEMORY[0x263F8EE78];
    uint64_t v34 = v30;
    unint64_t v101 = v28;
    while (1)
    {
      uint64_t v36 = v119;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v32, v119, type metadata accessor for ScreenContent);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v36, (uint64_t)v28, type metadata accessor for ScreenContent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v37 = v117;
        outlined init with take of ScreenContent((uint64_t)v28, v117, type metadata accessor for DocumentInfo);
        uint64_t v38 = v37 + *(int *)(v112 + 44);
        uint64_t v39 = v110;
        outlined init with copy of OnScreenContent.UIMetadata?(v38, v110, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v40 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v41 = *(void *)(v40 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40) != 1)
        {
          uint64_t v56 = v113;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
          uint64_t v51 = OnScreenContent.UIMetadata.Window.fractionVisible.getter();
          char v53 = v57;
          (*v108)(v56, v114);
          uint64_t v54 = type metadata accessor for DocumentInfo;
          uint64_t v55 = v117;
LABEL_12:
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v55, v54);
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v119, type metadata accessor for ScreenContent);
          if ((v53 & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v33 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, v33);
            }
            unint64_t v59 = *((void *)v33 + 2);
            unint64_t v58 = *((void *)v33 + 3);
            if (v59 >= v58 >> 1) {
              uint64_t v33 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v59 + 1, 1, v33);
            }
            *((void *)v33 + 2) = v59 + 1;
            *(void *)&v33[v59 + 4] = v51;
          }
          goto LABEL_5;
        }
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v117, type metadata accessor for DocumentInfo);
        uint64_t v35 = v39;
      }
      else
      {
        uint64_t v42 = v109;
        outlined init with take of ScreenContent((uint64_t)v28, v109, type metadata accessor for ImageInfo);
        uint64_t v43 = v116;
        outlined init with copy of OnScreenContent.UIMetadata?(v42 + *(int *)(v111 + 28), v116, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v44 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) != 1)
        {
          uint64_t v46 = v113;
          uint64_t v47 = v116;
          uint64_t v48 = v33;
          uint64_t v49 = v30;
          uint64_t v50 = v42;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v44);
          uint64_t v51 = OnScreenContent.UIMetadata.Window.fractionVisible.getter();
          char v53 = v52;
          (*v108)(v46, v114);
          uint64_t v54 = type metadata accessor for ImageInfo;
          uint64_t v55 = v50;
          uint64_t v30 = v49;
          uint64_t v33 = v48;
          uint64_t v28 = v101;
          goto LABEL_12;
        }
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v42, type metadata accessor for ImageInfo);
        uint64_t v35 = v116;
      }
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v35, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v119, type metadata accessor for ScreenContent);
LABEL_5:
      v32 += v115;
      if (!--v34)
      {
        a1 = v100;
        swift_bridgeObjectRelease();
        uint64_t v23 = v99;
        uint64_t v2 = v98;
        uint64_t v18 = v97;
        uint64_t v31 = MEMORY[0x263F8EE78];
        goto LABEL_20;
      }
    }
  }
  uint64_t v33 = (double *)MEMORY[0x263F8EE78];
LABEL_20:
  uint64_t v60 = *((void *)v33 + 2);
  uint64_t v61 = (uint64_t)v106;
  uint64_t v62 = (uint64_t)v107;
  if (v60)
  {
    double v63 = v33[4];
    uint64_t v64 = v60 - 1;
    if (v64)
    {
      uint64_t v65 = v33 + 5;
      do
      {
        double v66 = *v65++;
        double v67 = v66;
        if (v63 < v66) {
          double v63 = v67;
        }
        --v64;
      }
      while (v64);
    }
    swift_bridgeObjectRelease();
    v121[0] = v31;
    swift_bridgeObjectRetain();
    if (v30)
    {
      uint64_t v68 = *(void *)(v18 + 72);
      unint64_t v119 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      uint64_t v69 = a1 + v119;
      uint64_t v70 = (void (**)(char *, uint64_t))(v2 + 8);
      while (1)
      {
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v69, v61, type metadata accessor for ScreenContent);
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v61, (uint64_t)v23, type metadata accessor for ScreenContent);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          outlined init with take of ScreenContent((uint64_t)v23, v62, type metadata accessor for DocumentInfo);
          uint64_t v71 = v105;
          outlined init with copy of OnScreenContent.UIMetadata?(v62 + *(int *)(v112 + 44), v105, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v72 = type metadata accessor for OnScreenContent.UIMetadata();
          uint64_t v73 = *(void *)(v72 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72) == 1)
          {
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v62, type metadata accessor for DocumentInfo);
            goto LABEL_29;
          }
          uint64_t v84 = v113;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
          double v80 = COERCE_DOUBLE(OnScreenContent.UIMetadata.Window.fractionVisible.getter());
          char v86 = v85;
          uint64_t v87 = v84;
          uint64_t v62 = (uint64_t)v107;
          (*v70)(v87, v114);
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v62, type metadata accessor for DocumentInfo);
          if (v86) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v74 = v23;
          uint64_t v75 = (uint64_t)v23;
          uint64_t v76 = v103;
          outlined init with take of ScreenContent(v75, v103, type metadata accessor for ImageInfo);
          uint64_t v71 = v104;
          outlined init with copy of OnScreenContent.UIMetadata?(v76 + *(int *)(v111 + 28), v104, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v77 = type metadata accessor for OnScreenContent.UIMetadata();
          uint64_t v78 = *(void *)(v77 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v71, 1, v77) == 1)
          {
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v76, type metadata accessor for ImageInfo);
            uint64_t v23 = v74;
            uint64_t v61 = (uint64_t)v106;
LABEL_29:
            outlined destroy of Result<URL, SharingMediaAttachmentError>(v71, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
            goto LABEL_30;
          }
          uint64_t v79 = v113;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v71, v77);
          double v80 = COERCE_DOUBLE(OnScreenContent.UIMetadata.Window.fractionVisible.getter());
          char v82 = v81;
          uint64_t v83 = v79;
          uint64_t v62 = (uint64_t)v107;
          (*v70)(v83, v114);
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v76, type metadata accessor for ImageInfo);
          uint64_t v23 = v74;
          uint64_t v61 = (uint64_t)v106;
          if (v82) {
            goto LABEL_30;
          }
        }
        if (v63 == v80)
        {
          outlined init with take of ScreenContent(v61, v102, type metadata accessor for ScreenContent);
          uint64_t v88 = v121[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v88 + 16) + 1, 1);
            uint64_t v88 = v121[0];
          }
          unint64_t v90 = *(void *)(v88 + 16);
          unint64_t v89 = *(void *)(v88 + 24);
          if (v90 >= v89 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
            uint64_t v88 = v121[0];
          }
          *(void *)(v88 + 16) = v90 + 1;
          outlined init with take of ScreenContent(v102, v88 + v119 + v90 * v68, type metadata accessor for ScreenContent);
          goto LABEL_31;
        }
LABEL_30:
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v61, type metadata accessor for ScreenContent);
LABEL_31:
        v69 += v68;
        if (!--v30)
        {
          uint64_t v31 = v121[0];
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v91 = type metadata accessor for Logger();
    __swift_project_value_buffer(v91, (uint64_t)static Logger.contentSelector);
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      v121[0] = v95;
      *(_DWORD *)uint64_t v94 = 136315394;
      uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v94 + 12) = 2080;
      uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x800000024FA4A660, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v92, v93, "%s.%s unable to determine maximum visiblity, returning []", (uint8_t *)v94, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v95, -1, -1);
      MEMORY[0x25336A180](v94, -1, -1);
    }
  }
  return v31;
}

uint64_t ContentSelector.select(from:defaultContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v49 = a2;
  uint64_t v4 = type metadata accessor for ScreenContent(0);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v47 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v47 - v14;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v47 - v21;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23 == 1)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(a1 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80)), (uint64_t)v10, type metadata accessor for ScreenContent);
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v31 = __swift_project_value_buffer(v16, (uint64_t)static Logger.contentSelector);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v31, v16);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v10, (uint64_t)v7, type metadata accessor for ScreenContent);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc();
      LODWORD(v47) = v34;
      uint64_t v36 = v35;
      uint64_t v49 = swift_slowAlloc();
      uint64_t v54 = v49;
      *(_DWORD *)uint64_t v36 = 136315650;
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v54);
      uint64_t v48 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2080;
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000024FA4A640, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 22) = 2080;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v7, (uint64_t)v13, type metadata accessor for ScreenContent);
      uint64_t v37 = String.init<A>(describing:)();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v7, type metadata accessor for ScreenContent);
      _os_log_impl(&dword_24F9A2000, v32, (os_log_type_t)v47, "%s.%s returning selected content: %s", (uint8_t *)v36, 0x20u);
      uint64_t v39 = v49;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v39, -1, -1);
      MEMORY[0x25336A180](v36, -1, -1);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v16);
    }
    else
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v7, type metadata accessor for ScreenContent);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    }
    uint64_t v45 = v50;
    outlined init with take of ScreenContent((uint64_t)v10, v50, type metadata accessor for ScreenContent);
    goto LABEL_20;
  }
  if (!v23)
  {
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v24 = __swift_project_value_buffer(v16, (uint64_t)static Logger.contentSelector);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v22, v24, v16);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v49, (uint64_t)v15, type metadata accessor for ScreenContent);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      uint64_t v54 = v47;
      *(_DWORD *)uint64_t v27 = 136315650;
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v54);
      uint64_t v48 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000024FA4A640, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 22) = 2080;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v15, (uint64_t)v13, type metadata accessor for ScreenContent);
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v15, type metadata accessor for ScreenContent);
      _os_log_impl(&dword_24F9A2000, v25, v26, "%s.%s on screen contents is empty, returning default content: %s", (uint8_t *)v27, 0x20u);
      uint64_t v30 = v47;
      swift_arrayDestroy();
      MEMORY[0x25336A180](v30, -1, -1);
      MEMORY[0x25336A180](v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v22, v16);
    }
    else
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v15, type metadata accessor for ScreenContent);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    }
    uint64_t v45 = v50;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v49, v50, type metadata accessor for ScreenContent);
LABEL_20:
    uint64_t v44 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v45, v44, 1, v52);
  }
  if (one-time initialization token for contentSelector != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v16, (uint64_t)static Logger.contentSelector);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v54 = v43;
    *(_DWORD *)uint64_t v42 = 136315394;
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 12) = 2080;
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000024FA4A640, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v40, v41, "%s.%s unable to select content with multiple contenders, returning nil", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v43, -1, -1);
    MEMORY[0x25336A180](v42, -1, -1);
  }

  uint64_t v44 = 1;
  uint64_t v45 = v50;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v45, v44, 1, v52);
}

uint64_t ContentSelector.getLargestWindows(onScreenContents:)(uint64_t a1)
{
  uint64_t v114 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v2 = *(void *)(v114 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v114);
  uint64_t v95 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v94 = (char *)&v90 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v98 = (char *)&v90 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v97 = (char *)&v90 - v9;
  uint64_t v113 = type metadata accessor for DocumentInfo(0);
  uint64_t v10 = MEMORY[0x270FA5388](v113);
  uint64_t v102 = (uint64_t)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v90 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v100 = (uint64_t)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v99 = (uint64_t)&v90 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v90 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v108 = (uint64_t)&v90 - v22;
  uint64_t v112 = type metadata accessor for ImageInfo(0);
  uint64_t v23 = MEMORY[0x270FA5388](v112);
  uint64_t v103 = (uint64_t)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  unint64_t v111 = (unint64_t)&v90 - v25;
  uint64_t v117 = type metadata accessor for ScreenContent(0);
  uint64_t v26 = *(void *)(v117 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v117);
  uint64_t v96 = (uint64_t)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  unint64_t v101 = (char *)&v90 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v116 = (uint64_t)&v90 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v90 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v110 = (uint64_t)&v90 - v36;
  uint64_t v37 = *(void *)(a1 + 16);
  uint64_t v38 = MEMORY[0x263F8EE78];
  uint64_t v92 = v37;
  uint64_t v93 = a1;
  if (v37)
  {
    uint64_t v106 = v21;
    uint64_t v39 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    uint64_t v90 = v26;
    uint64_t v91 = v2;
    uint64_t v115 = *(void (***)(char *, uint64_t))(v26 + 72);
    uint64_t v104 = (void (**)(char *, uint64_t))(v2 + 8);
    swift_bridgeObjectRetain();
    uint64_t v109 = (void *)MEMORY[0x263F8EE78];
    uint64_t v40 = v37;
    char v107 = v13;
    uint64_t v41 = v110;
    uint64_t v42 = v111;
    uint64_t v105 = v35;
    while (1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v39, v41, type metadata accessor for ScreenContent);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v41, (uint64_t)v35, type metadata accessor for ScreenContent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of ScreenContent((uint64_t)v35, (uint64_t)v13, type metadata accessor for DocumentInfo);
        uint64_t v43 = (uint64_t)v106;
        outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)&v13[*(int *)(v113 + 44)], (uint64_t)v106, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v44 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
        {
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v13, type metadata accessor for DocumentInfo);
          outlined destroy of Result<URL, SharingMediaAttachmentError>(v43, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v42 = v111;
        }
        else
        {
          uint64_t v46 = v98;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
          OnScreenContent.UIMetadata.Window.boundingBox.getter();
          (*v104)(v46, v114);
          outlined init with take of CGRect?((uint64_t)&v120, (uint64_t)v131);
          if ((v134 & 1) == 0)
          {
            double v53 = v132 * v133;
            uint64_t v13 = v107;
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v107, type metadata accessor for DocumentInfo);
            uint64_t v42 = v111;
LABEL_17:
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v41, type metadata accessor for ScreenContent);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v54 = v109;
            }
            else {
              uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109[2] + 1, 1, v109);
            }
            unint64_t v56 = v54[2];
            unint64_t v55 = v54[3];
            if (v56 >= v55 >> 1) {
              uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v54);
            }
            v54[2] = v56 + 1;
            uint64_t v109 = v54;
            *(double *)&v54[v56 + 4] = v53;
            uint64_t v41 = v110;
            goto LABEL_5;
          }
          uint64_t v13 = v107;
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v107, type metadata accessor for DocumentInfo);
          uint64_t v42 = v111;
        }
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v41, type metadata accessor for ScreenContent);
      }
      else
      {
        uint64_t v47 = v13;
        outlined init with take of ScreenContent((uint64_t)v35, v42, type metadata accessor for ImageInfo);
        uint64_t v48 = v108;
        outlined init with copy of OnScreenContent.UIMetadata?(v42 + *(int *)(v112 + 28), v108, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v49 = v42;
        uint64_t v50 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v51 = *(void *)(v50 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v48, 1, v50) == 1)
        {
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v49, type metadata accessor for ImageInfo);
          outlined destroy of Result<URL, SharingMediaAttachmentError>(v48, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v42 = v49;
          uint64_t v13 = v47;
        }
        else
        {
          uint64_t v52 = v97;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v48, v50);
          OnScreenContent.UIMetadata.Window.boundingBox.getter();
          (*v104)(v52, v114);
          outlined init with take of CGRect?((uint64_t)&v119, (uint64_t)v127);
          if ((v130 & 1) == 0)
          {
            double v53 = v128 * v129;
            uint64_t v42 = v111;
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v111, type metadata accessor for ImageInfo);
            uint64_t v13 = v107;
            uint64_t v35 = v105;
            uint64_t v41 = v110;
            goto LABEL_17;
          }
          uint64_t v42 = v111;
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v111, type metadata accessor for ImageInfo);
          uint64_t v13 = v107;
        }
        uint64_t v41 = v110;
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v110, type metadata accessor for ScreenContent);
        uint64_t v35 = v105;
      }
LABEL_5:
      v39 += (uint64_t)v115;
      if (!--v40)
      {
        a1 = v93;
        swift_bridgeObjectRelease();
        uint64_t v26 = v90;
        uint64_t v2 = v91;
        uint64_t v38 = MEMORY[0x263F8EE78];
        char v57 = (double *)v109;
        goto LABEL_25;
      }
    }
  }
  char v57 = (double *)MEMORY[0x263F8EE78];
LABEL_25:
  uint64_t v58 = *((void *)v57 + 2);
  uint64_t v59 = (uint64_t)v101;
  uint64_t v60 = v102;
  uint64_t v61 = v92;
  if (v58)
  {
    double v62 = v57[4];
    uint64_t v63 = v58 - 1;
    if (v63)
    {
      uint64_t v64 = v57 + 5;
      do
      {
        double v65 = *v64++;
        double v66 = v65;
        if (v62 < v65) {
          double v62 = v66;
        }
        --v63;
      }
      while (v63);
    }
    swift_bridgeObjectRelease();
    uint64_t v118 = v38;
    swift_bridgeObjectRetain();
    if (v61)
    {
      uint64_t v67 = *(void *)(v26 + 72);
      unint64_t v111 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      uint64_t v68 = a1 + v111;
      uint64_t v115 = (void (**)(char *, uint64_t))(v2 + 8);
      while (1)
      {
        uint64_t v69 = v116;
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v68, v116, type metadata accessor for ScreenContent);
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v69, v59, type metadata accessor for ScreenContent);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          outlined init with take of ScreenContent(v59, v60, type metadata accessor for DocumentInfo);
          uint64_t v70 = v100;
          outlined init with copy of OnScreenContent.UIMetadata?(v60 + *(int *)(v113 + 44), v100, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v71 = type metadata accessor for OnScreenContent.UIMetadata();
          uint64_t v72 = *(void *)(v71 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71) == 1)
          {
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v60, type metadata accessor for DocumentInfo);
            outlined destroy of Result<URL, SharingMediaAttachmentError>(v70, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
            goto LABEL_34;
          }
          uint64_t v79 = v95;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v71);
          OnScreenContent.UIMetadata.Window.boundingBox.getter();
          (*v115)(v79, v114);
          outlined init with take of CGRect?((uint64_t)&v122, (uint64_t)v125);
          if (v126)
          {
            uint64_t v60 = v102;
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v102, type metadata accessor for DocumentInfo);
            goto LABEL_34;
          }
          double v80 = *(double *)&v125[2] * *(double *)&v125[3];
          uint64_t v60 = v102;
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v102, type metadata accessor for DocumentInfo);
        }
        else
        {
          uint64_t v73 = v59;
          uint64_t v74 = v103;
          outlined init with take of ScreenContent(v73, v103, type metadata accessor for ImageInfo);
          uint64_t v75 = v99;
          outlined init with copy of OnScreenContent.UIMetadata?(v74 + *(int *)(v112 + 28), v99, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v76 = type metadata accessor for OnScreenContent.UIMetadata();
          uint64_t v77 = *(void *)(v76 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76) == 1)
          {
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v74, type metadata accessor for ImageInfo);
            outlined destroy of Result<URL, SharingMediaAttachmentError>(v75, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
            uint64_t v59 = (uint64_t)v101;
            goto LABEL_34;
          }
          uint64_t v78 = v94;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v76);
          OnScreenContent.UIMetadata.Window.boundingBox.getter();
          (*v115)(v78, v114);
          outlined init with take of CGRect?((uint64_t)&v121, (uint64_t)v123);
          if (v124)
          {
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v103, type metadata accessor for ImageInfo);
            uint64_t v59 = (uint64_t)v101;
            uint64_t v60 = v102;
            goto LABEL_34;
          }
          double v80 = *(double *)&v123[2] * *(double *)&v123[3];
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v103, type metadata accessor for ImageInfo);
          uint64_t v59 = (uint64_t)v101;
          uint64_t v60 = v102;
        }
        if (v80 == v62)
        {
          outlined init with take of ScreenContent(v116, v96, type metadata accessor for ScreenContent);
          uint64_t v81 = v118;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v81 + 16) + 1, 1);
            uint64_t v81 = v118;
          }
          unint64_t v83 = *(void *)(v81 + 16);
          unint64_t v82 = *(void *)(v81 + 24);
          if (v83 >= v82 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1, v83 + 1, 1);
            uint64_t v81 = v118;
          }
          *(void *)(v81 + 16) = v83 + 1;
          outlined init with take of ScreenContent(v96, v81 + v111 + v83 * v67, type metadata accessor for ScreenContent);
          goto LABEL_35;
        }
LABEL_34:
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v116, type metadata accessor for ScreenContent);
LABEL_35:
        v68 += v67;
        if (!--v61)
        {
          uint64_t v38 = v118;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    __swift_project_value_buffer(v84, (uint64_t)static Logger.contentSelector);
    char v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v85, v86))
    {
      uint64_t v87 = swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      v125[0] = v88;
      *(_DWORD *)uint64_t v87 = 136315394;
      v123[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v87 + 12) = 2080;
      v123[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x800000024FA4A610, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v85, v86, "%s.%s unable to determine maximum window area, returning []", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v88, -1, -1);
      MEMORY[0x25336A180](v87, -1, -1);
    }
  }
  return v38;
}

uint64_t ContentSelector.getLeftMostWindows(onScreenContents:)(uint64_t a1)
{
  uint64_t v116 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v2 = *(void *)(v116 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v116);
  uint64_t v98 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v97 = (char *)&v93 - v6;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  unint64_t v101 = (char *)&v93 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v100 = (char *)&v93 - v9;
  uint64_t v115 = type metadata accessor for DocumentInfo(0);
  uint64_t v10 = MEMORY[0x270FA5388](v115);
  uint64_t v106 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v93 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v104 = (uint64_t)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v103 = (uint64_t)&v93 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v112 = (uint64_t)&v93 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v111 = (uint64_t)&v93 - v21;
  uint64_t v114 = type metadata accessor for ImageInfo(0);
  uint64_t v22 = MEMORY[0x270FA5388](v114);
  uint64_t v102 = (uint64_t)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v93 - v24;
  uint64_t v120 = type metadata accessor for ScreenContent(0);
  uint64_t v26 = *(void *)(v120 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v120);
  uint64_t v99 = (uint64_t)&v93 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v105 = (char *)&v93 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v118 = (uint64_t)&v93 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v93 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v37 = (char *)&v93 - v36;
  uint64_t v38 = MEMORY[0x263F8EE78];
  uint64_t v119 = *(void *)(a1 + 16);
  uint64_t v96 = a1;
  if (v119)
  {
    uint64_t v109 = v25;
    uint64_t v39 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    uint64_t v94 = v26;
    uint64_t v95 = v2;
    unint64_t v117 = *(void *)(v26 + 72);
    char v107 = (void (**)(char *, uint64_t))(v2 + 8);
    swift_bridgeObjectRetain();
    uint64_t v113 = (void *)MEMORY[0x263F8EE78];
    uint64_t v40 = v119;
    uint64_t v110 = v13;
    uint64_t v108 = v37;
    while (1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v39, (uint64_t)v37, type metadata accessor for ScreenContent);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v37, (uint64_t)v35, type metadata accessor for ScreenContent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of ScreenContent((uint64_t)v35, (uint64_t)v13, type metadata accessor for DocumentInfo);
        uint64_t v41 = v112;
        outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)&v13[*(int *)(v115 + 44)], v112, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v42 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42) == 1)
        {
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v13, type metadata accessor for DocumentInfo);
          outlined destroy of Result<URL, SharingMediaAttachmentError>(v41, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        }
        else
        {
          double v53 = v101;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
          OnScreenContent.UIMetadata.Window.boundingBox.getter();
          uint64_t v54 = v53;
          uint64_t v13 = v110;
          (*v107)(v54, v116);
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v13, type metadata accessor for DocumentInfo);
          uint64_t v52 = v131;
          outlined init with take of CGRect?((uint64_t)&v123, (uint64_t)v131);
          if ((v131[32] & 1) == 0)
          {
LABEL_13:
            uint64_t v55 = *(void *)v52;
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v37, type metadata accessor for ScreenContent);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v56 = v113;
            }
            else {
              unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113[2] + 1, 1, v113);
            }
            unint64_t v58 = v56[2];
            unint64_t v57 = v56[3];
            if (v58 >= v57 >> 1) {
              unint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), v58 + 1, 1, v56);
            }
            void v56[2] = v58 + 1;
            uint64_t v113 = v56;
            v56[v58 + 4] = v55;
            goto LABEL_5;
          }
        }
      }
      else
      {
        uint64_t v44 = v35;
        uint64_t v45 = (uint64_t)v35;
        uint64_t v46 = (uint64_t)v109;
        outlined init with take of ScreenContent(v45, (uint64_t)v109, type metadata accessor for ImageInfo);
        uint64_t v47 = v111;
        outlined init with copy of OnScreenContent.UIMetadata?(v46 + *(int *)(v114 + 28), v111, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        uint64_t v48 = type metadata accessor for OnScreenContent.UIMetadata();
        uint64_t v49 = *(void *)(v48 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) == 1)
        {
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v46, type metadata accessor for ImageInfo);
          outlined destroy of Result<URL, SharingMediaAttachmentError>(v47, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v35 = v44;
          uint64_t v37 = v108;
        }
        else
        {
          uint64_t v50 = v100;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
          OnScreenContent.UIMetadata.Window.boundingBox.getter();
          uint64_t v51 = v50;
          uint64_t v13 = v110;
          (*v107)(v51, v116);
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v46, type metadata accessor for ImageInfo);
          uint64_t v52 = v130;
          outlined init with take of CGRect?((uint64_t)&v122, (uint64_t)v130);
          uint64_t v35 = v44;
          uint64_t v37 = v108;
          if ((v130[32] & 1) == 0) {
            goto LABEL_13;
          }
        }
      }
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v37, type metadata accessor for ScreenContent);
LABEL_5:
      v39 += v117;
      if (!--v40)
      {
        a1 = v96;
        swift_bridgeObjectRelease();
        uint64_t v26 = v94;
        uint64_t v2 = v95;
        uint64_t v38 = MEMORY[0x263F8EE78];
        uint64_t v59 = (double *)v113;
        goto LABEL_21;
      }
    }
  }
  uint64_t v59 = (double *)MEMORY[0x263F8EE78];
LABEL_21:
  uint64_t v60 = *((void *)v59 + 2);
  uint64_t v61 = (uint64_t)v105;
  uint64_t v62 = (uint64_t)v106;
  if (v60)
  {
    double v63 = v59[4];
    uint64_t v64 = v60 - 1;
    if (v64)
    {
      double v65 = v59 + 5;
      do
      {
        double v66 = *v65++;
        double v67 = v66;
        if (v66 < v63) {
          double v63 = v67;
        }
        --v64;
      }
      while (v64);
    }
    swift_bridgeObjectRelease();
    uint64_t v121 = v38;
    swift_bridgeObjectRetain();
    if (v119)
    {
      uint64_t v68 = *(void *)(v26 + 72);
      unint64_t v117 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      uint64_t v69 = a1 + v117;
      uint64_t v70 = (void (**)(char *, uint64_t))(v2 + 8);
      while (1)
      {
        uint64_t v71 = v118;
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v69, v118, type metadata accessor for ScreenContent);
        _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v71, v61, type metadata accessor for ScreenContent);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          outlined init with take of ScreenContent(v61, v62, type metadata accessor for DocumentInfo);
          uint64_t v72 = v104;
          outlined init with copy of OnScreenContent.UIMetadata?(v62 + *(int *)(v115 + 44), v104, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v73 = type metadata accessor for OnScreenContent.UIMetadata();
          uint64_t v74 = *(void *)(v73 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73) == 1)
          {
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v62, type metadata accessor for DocumentInfo);
            goto LABEL_30;
          }
          unint64_t v82 = v98;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
          OnScreenContent.UIMetadata.Window.boundingBox.getter();
          unint64_t v83 = v82;
          uint64_t v62 = (uint64_t)v106;
          (*v70)(v83, v116);
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v62, type metadata accessor for DocumentInfo);
          uint64_t v81 = (double *)v128;
          outlined init with take of CGRect?((uint64_t)&v125, (uint64_t)v128);
          if (v129) {
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v75 = v61;
          uint64_t v76 = v102;
          outlined init with take of ScreenContent(v75, v102, type metadata accessor for ImageInfo);
          uint64_t v72 = v103;
          outlined init with copy of OnScreenContent.UIMetadata?(v76 + *(int *)(v114 + 28), v103, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
          uint64_t v77 = type metadata accessor for OnScreenContent.UIMetadata();
          uint64_t v78 = *(void *)(v77 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v72, 1, v77) == 1)
          {
            _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v76, type metadata accessor for ImageInfo);
            uint64_t v61 = (uint64_t)v105;
LABEL_30:
            outlined destroy of Result<URL, SharingMediaAttachmentError>(v72, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
            goto LABEL_31;
          }
          uint64_t v79 = v97;
          OnScreenContent.UIMetadata.window.getter();
          (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v72, v77);
          OnScreenContent.UIMetadata.Window.boundingBox.getter();
          double v80 = v79;
          uint64_t v62 = (uint64_t)v106;
          (*v70)(v80, v116);
          _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v76, type metadata accessor for ImageInfo);
          uint64_t v81 = (double *)v126;
          outlined init with take of CGRect?((uint64_t)&v124, (uint64_t)v126);
          uint64_t v61 = (uint64_t)v105;
          if (v127) {
            goto LABEL_31;
          }
        }
        if (*v81 == v63)
        {
          outlined init with take of ScreenContent(v118, v99, type metadata accessor for ScreenContent);
          uint64_t v84 = v121;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v84 + 16) + 1, 1);
            uint64_t v84 = v121;
          }
          unint64_t v86 = *(void *)(v84 + 16);
          unint64_t v85 = *(void *)(v84 + 24);
          if (v86 >= v85 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1);
            uint64_t v84 = v121;
          }
          *(void *)(v84 + 16) = v86 + 1;
          outlined init with take of ScreenContent(v99, v84 + v117 + v86 * v68, type metadata accessor for ScreenContent);
          goto LABEL_32;
        }
LABEL_31:
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v118, type metadata accessor for ScreenContent);
LABEL_32:
        v69 += v68;
        if (!--v119)
        {
          uint64_t v38 = v121;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Logger.contentSelector);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      v128[0] = v91;
      *(_DWORD *)uint64_t v90 = 136315394;
      v126[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v90 + 12) = 2080;
      v126[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x800000024FA4A5E0, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v88, v89, "%s.%s unable to determine left most origin point, returning []", (uint8_t *)v90, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v91, -1, -1);
      MEMORY[0x25336A180](v90, -1, -1);

      return MEMORY[0x263F8EE78];
    }
    else
    {
    }
  }
  return v38;
}

uint64_t ContentSelector.getNonSnapshotWindow(onScreenContents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v85 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ScreenContent?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v83 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for DocumentInfo(0);
  MEMORY[0x270FA5388](v82);
  uint64_t v87 = (uint64_t)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ImageInfo(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v88 = (uint64_t)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ScreenContent(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v84 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v89 = (uint64_t)&v78 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v78 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v78 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v78 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v79 = (uint64_t)&v78 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v81 = (uint64_t)&v78 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v78 - v27;
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t v93 = MEMORY[0x263F8EE78];
  uint64_t v30 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v91 = v16;
  uint64_t v86 = v9;
  if (v30)
  {
    uint64_t v31 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v32 = *(void *)(v9 + 72);
    uint64_t v80 = a1;
    uint64_t v90 = (v31 + 32) & ~v31;
    uint64_t v33 = a1 + v90;
    while (1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v33, (uint64_t)v28, type metadata accessor for ScreenContent);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v28, (uint64_t)v22, type metadata accessor for ScreenContent);
      if (swift_getEnumCaseMultiPayload() == 1) {
        break;
      }
      uint64_t v34 = (uint64_t)v22;
      uint64_t v35 = v22;
      uint64_t v36 = v32;
      uint64_t v37 = v19;
      uint64_t v38 = v8;
      uint64_t v39 = v88;
      outlined init with take of ScreenContent(v34, v88, type metadata accessor for ImageInfo);
      char v40 = *(unsigned char *)(v39 + 17);
      uint64_t v41 = v39;
      uint64_t v8 = v38;
      uint64_t v19 = v37;
      uint64_t v32 = v36;
      uint64_t v22 = v35;
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v41, type metadata accessor for ImageInfo);
      if ((v40 & 1) == 0) {
        goto LABEL_8;
      }
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v28, type metadata accessor for ScreenContent);
LABEL_4:
      uint64_t v16 = v91;
      v33 += v32;
      if (!--v30)
      {
        uint64_t v29 = v93;
        goto LABEL_14;
      }
    }
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v22, type metadata accessor for ScreenContent);
LABEL_8:
    uint64_t v42 = v8;
    outlined init with take of ScreenContent((uint64_t)v28, (uint64_t)v19, type metadata accessor for ScreenContent);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
    }
    uint64_t v29 = v93;
    unint64_t v44 = *(void *)(v93 + 16);
    unint64_t v43 = *(void *)(v93 + 24);
    if (v44 >= v43 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
      uint64_t v29 = v93;
    }
    *(void *)(v29 + 16) = v44 + 1;
    outlined init with take of ScreenContent((uint64_t)v19, v29 + v90 + v44 * v32, type metadata accessor for ScreenContent);
    uint64_t v8 = v42;
    goto LABEL_4;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(v29 + 16);
  uint64_t v46 = v86;
  if (v45)
  {
    uint64_t v47 = v29 + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80));
    uint64_t v48 = *(void *)(v86 + 72);
    swift_retain();
    uint64_t v49 = v47;
    uint64_t v50 = v82;
    do
    {
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v49, (uint64_t)v16, type metadata accessor for ScreenContent);
      uint64_t v51 = v89;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1((uint64_t)v16, v89, type metadata accessor for ScreenContent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v52 = v87;
        outlined init with take of ScreenContent(v51, v87, type metadata accessor for DocumentInfo);
        char v53 = *(unsigned char *)(v52 + *(int *)(v50 + 48));
        uint64_t v54 = v52;
        uint64_t v16 = v91;
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v54, type metadata accessor for DocumentInfo);
        if (v53)
        {
          swift_release();
          uint64_t v55 = v79;
          outlined init with take of ScreenContent((uint64_t)v16, v79, type metadata accessor for ScreenContent);
          swift_release();
          outlined init with take of ScreenContent(v55, v81, type metadata accessor for ScreenContent);
          if (one-time initialization token for contentSelector != -1) {
            swift_once();
          }
          uint64_t v56 = type metadata accessor for Logger();
          __swift_project_value_buffer(v56, (uint64_t)static Logger.contentSelector);
          unint64_t v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = swift_slowAlloc();
            uint64_t v60 = swift_slowAlloc();
            uint64_t v93 = v60;
            *(_DWORD *)uint64_t v59 = 136315394;
            uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v93);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v59 + 12) = 2080;
            uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x800000024FA4A6F0, &v93);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_24F9A2000, v57, v58, "%s.%s found an non-snapshot app entity, returning it", (uint8_t *)v59, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x25336A180](v60, -1, -1);
            MEMORY[0x25336A180](v59, -1, -1);
          }

          uint64_t v61 = v85;
          outlined init with take of ScreenContent(v81, v85, type metadata accessor for ScreenContent);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v61, 0, 1, v8);
        }
      }
      else
      {
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v51, type metadata accessor for ScreenContent);
      }
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v16, type metadata accessor for ScreenContent);
      v49 += v48;
      --v45;
    }
    while (v45);
    swift_release();
    if (*(void *)(v29 + 16))
    {
      uint64_t v63 = v47;
      uint64_t v64 = v83;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(v63, v83, type metadata accessor for ScreenContent);
      uint64_t v50 = *(void *)(v46 + 56);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v50)(v64, 0, 1, v8);
      goto LABEL_28;
    }
    __break(1u);
LABEL_40:
    swift_once();
    goto LABEL_30;
  }
  uint64_t v50 = *(void *)(v86 + 56);
  uint64_t v64 = v83;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v50)(v83, 1, 1, v8);
LABEL_28:
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v64, 1, v8) != 1)
  {
    outlined init with take of ScreenContent(v64, v84, type metadata accessor for ScreenContent);
    if (one-time initialization token for contentSelector != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Logger.contentSelector);
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      uint64_t v93 = v76;
      *(_DWORD *)uint64_t v75 = 136315394;
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v75 + 12) = 2080;
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x800000024FA4A6F0, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_24F9A2000, v73, v74, "%s.%s found a non-snapshot, returning it", (uint8_t *)v75, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v76, -1, -1);
      MEMORY[0x25336A180](v75, -1, -1);
    }

    uint64_t v77 = v85;
    outlined init with take of ScreenContent(v84, v85, type metadata accessor for ScreenContent);
    uint64_t v70 = v77;
    uint64_t v71 = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v50)(v70, v71, 1, v8);
  }
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v64, &demangling cache variable for type metadata for ScreenContent?);
  if (one-time initialization token for contentSelector != -1) {
    goto LABEL_40;
  }
LABEL_30:
  uint64_t v65 = type metadata accessor for Logger();
  __swift_project_value_buffer(v65, (uint64_t)static Logger.contentSelector);
  double v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    uint64_t v93 = v69;
    *(_DWORD *)uint64_t v68 = 136315394;
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x53746E65746E6F43, 0xEF726F7463656C65, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v68 + 12) = 2080;
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x800000024FA4A6F0, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v66, v67, "%s.%s unable to find a non-snapshot window, returning nil", (uint8_t *)v68, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v69, -1, -1);
    MEMORY[0x25336A180](v68, -1, -1);
  }

  uint64_t v70 = v85;
  uint64_t v71 = 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v50)(v70, v71, 1, v8);
}

uint64_t closure #3 in ContentSelector.getActiveWindow(onScreenContents:allowSnapshot:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ScreenContent(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = ScreenContent.appBundleId.getter();
  if (v6)
  {
    if (v5 == 0xD000000000000015 && v6 == 0x800000024FA4A6D0)
    {
      swift_bridgeObjectRelease();
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(a1, (uint64_t)v4, type metadata accessor for ScreenContent);
LABEL_7:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v4, type metadata accessor for ScreenContent);
      char v8 = 0;
      return v8 & 1;
    }
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(a1, (uint64_t)v4, type metadata accessor for ScreenContent);
    if (v7) {
      goto LABEL_7;
    }
  }
  else
  {
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(a1, (uint64_t)v4, type metadata accessor for ScreenContent);
  }
  uint64_t v9 = ScreenContent.appBundleId.getter();
  if (v10)
  {
    if (v9 == 0x6C7070612E6D6F63 && v10 == 0xEE00697269732E65) {
      char v12 = 1;
    }
    else {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v4, type metadata accessor for ScreenContent);
    swift_bridgeObjectRelease();
    char v8 = v12 ^ 1;
  }
  else
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v4, type metadata accessor for ScreenContent);
    char v8 = 1;
  }
  return v8 & 1;
}

uint64_t _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of ScreenContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s26GenerativeAssistantActions13ScreenContentOWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type IntelligenceProcessInfo and conformance IntelligenceProcessInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type IntelligenceProcessInfo and conformance IntelligenceProcessInfo;
  if (!lazy protocol witness table cache variable for type IntelligenceProcessInfo and conformance IntelligenceProcessInfo)
  {
    type metadata accessor for IntelligenceProcessInfo();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceProcessInfo and conformance IntelligenceProcessInfo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentSelector.Error and conformance ContentSelector.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentSelector.Error and conformance ContentSelector.Error;
  if (!lazy protocol witness table cache variable for type ContentSelector.Error and conformance ContentSelector.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentSelector.Error and conformance ContentSelector.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentSelector.Error and conformance ContentSelector.Error;
  if (!lazy protocol witness table cache variable for type ContentSelector.Error and conformance ContentSelector.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentSelector.Error and conformance ContentSelector.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentSelector.Error and conformance ContentSelector.Error;
  if (!lazy protocol witness table cache variable for type ContentSelector.Error and conformance ContentSelector.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentSelector.Error and conformance ContentSelector.Error);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContentSelector.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24FA2C700);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentSelector.Error()
{
  return &type metadata for ContentSelector.Error;
}

uint64_t static Prompts.toolUseTamalePrompt.getter()
{
  return 0x1000000000000A1FLL;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))CatId.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))FixedResponse.rawValue.getter);
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if (*(void *)&aFast_0[8 * a1] == *(void *)&aFast_0[8 * a2] && qword_24FA40740[a1] == qword_24FA40740[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  char v3;

  if (*(void *)&aSourceTfileNam_2[8 * a1] == *(void *)&aSourceTfileNam_2[8 * a2]
    && *(void *)&aSourceTfileNam_2[8 * a1 + 32] == *(void *)&aSourceTfileNam_2[8 * a2 + 32])
  {
    char v3 = 1;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  char v3;

  if (*(void *)&aVoiceonlvoicef_2[8 * a1] == *(void *)&aVoiceonlvoicef_2[8 * a2]
    && *(void *)&aVoiceonlvoicef_2[8 * a1 + 32] == *(void *)&aVoiceonlvoicef_2[8 * a2 + 32])
  {
    char v3 = 1;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  char v3;

  if (*(void *)&aCarplay_3[8 * a1] == *(void *)&aCarplay_3[8 * a2] && qword_24FA40830[a1] == qword_24FA40830[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3();
  uint64_t v6 = v5;
  if (v4 == a3() && v6 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

BOOL protocol witness for CarSessionProtocol.isConnectedToCarPlay.getter in conformance CARSessionStatus()
{
  id v1 = *v0;
  objc_msgSend(*v0, sel_waitForSessionInitialization);
  id v2 = objc_msgSend(v1, sel_currentSession);
  id v3 = v2;
  if (v2) {

  }
  return v3 != 0;
}

uint64_t one-time initialization function for shared()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F30E50]), sel_init);
  unint64_t v4 = type metadata accessor for CARSessionStatus();
  uint64_t v5 = &protocol witness table for CARSessionStatus;
  *(void *)&long long v3 = v0;
  type metadata accessor for CarUtils();
  uint64_t v1 = swift_allocObject();
  uint64_t result = outlined init with take of ForegroundAppDetecting(&v3, v1 + 16);
  static CarUtils.shared = v1;
  return result;
}

uint64_t static CarUtils.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t CarUtils.isConnectedToCar(invocationContext:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for InvocationContext();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v6);
  char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  outlined init with copy of InvocationContext(a1, (uint64_t)v5);
  if (v8)
  {
    char v9 = 1;
  }
  else
  {
    char v9 = 1;
    switch(v5[2])
    {
      case 1:
        break;
      default:
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        break;
    }
    swift_bridgeObjectRelease();
  }
  outlined destroy of InvocationContext((uint64_t)v5);
  return v9 & 1;
}

uint64_t outlined init with copy of InvocationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InvocationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of InvocationContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InvocationContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CarUtils.errorDialogIfUnsupportedInCar(invocationContext:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, IntentDialog)?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  CarUtils.errorIntentDialogIfUnsupportedInCar(invocationContext:)(a1, v4);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, IntentDialog));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of (String, IntentDialog)?((uint64_t)v4);
    return 0;
  }
  else
  {
    uint64_t v6 = *v4;
    uint64_t v7 = (char *)v4 + *(int *)(v5 + 48);
    uint64_t v8 = type metadata accessor for IntentDialog();
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  return v6;
}

uint64_t CarUtils.errorIntentDialogIfUnsupportedInCar(invocationContext:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for InvocationContext();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v9 = (char *)&v43 - v8;
  uint64_t v10 = type metadata accessor for GenerativeAssistantUseCase();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CarUtils.isConnectedToCar(invocationContext:)(a1))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + *(int *)(v4 + 28), v10);
    int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
    if (v14 != *MEMORY[0x263F40718] && v14 != *MEMORY[0x263F40700])
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if (one-time initialization token for intent != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.intent);
      outlined init with copy of InvocationContext(a1, (uint64_t)v7);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        uint64_t v44 = v30;
        *(_DWORD *)uint64_t v29 = 136315138;
        uint64_t v31 = GenerativeAssistantUseCase.rawValue.getter();
        uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of InvocationContext((uint64_t)v7);
        _os_log_impl(&dword_24F9A2000, v27, v28, "Intent type %s is not enabled for car use", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x25336A180](v30, -1, -1);
        MEMORY[0x25336A180](v29, -1, -1);
      }
      else
      {
        outlined destroy of InvocationContext((uint64_t)v7);
      }

      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, IntentDialog));
      uint64_t v41 = (char *)a2 + *(int *)(v37 + 48);
      *a2 = 0xD000000000000033;
      a2[1] = 0x800000024FA41290;
      type metadata accessor for IntentDialogUtils();
      LOBYTE(v44) = 21;
      uint64_t v39 = (uint64_t)v41;
      char v40 = 0;
LABEL_26:
      static IntentDialogUtils.getDialog(catID:response:includeContentProviderName:appName:)((char *)&v44, 0, 0xE000000000000000, v40, 0, 0, v39);
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(a2, 0, 1, v37);
    }
    type metadata accessor for GenerativeAssistantSettingsUserDefaults();
    if ((static GenerativeAssistantSettingsUserDefaults.isEnabled()() & 1) == 0)
    {
      if (one-time initialization token for intent != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.intent);
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl(&dword_24F9A2000, v34, v35, "User needs to enable generative assistant tools when not driving.", v36, 2u);
        MEMORY[0x25336A180](v36, -1, -1);
      }

      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, IntentDialog));
      uint64_t v38 = (char *)a2 + *(int *)(v37 + 48);
      *a2 = 0x1000000000000062;
      a2[1] = 0x800000024FA412D0;
      type metadata accessor for IntentDialogUtils();
      LOBYTE(v44) = 22;
      uint64_t v39 = (uint64_t)v38;
      char v40 = 1;
      goto LABEL_26;
    }
    if (one-time initialization token for intent != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.intent);
    outlined init with copy of InvocationContext(a1, (uint64_t)v9);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v44 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v21 = GenerativeAssistantUseCase.rawValue.getter();
      uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of InvocationContext((uint64_t)v9);
      _os_log_impl(&dword_24F9A2000, v17, v18, "Intent type %s is supported in the car.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v20, -1, -1);
      MEMORY[0x25336A180](v19, -1, -1);
    }
    else
    {
      outlined destroy of InvocationContext((uint64_t)v9);
    }

    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, IntentDialog));
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(a2, 1, 1, v42);
  }
  else
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, IntentDialog));
    uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
    return v24(a2, 1, 1, v23);
  }
}

uint64_t outlined destroy of (String, IntentDialog)?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, IntentDialog)?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CarUtils.deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return v0;
}

uint64_t CarUtils.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t dispatch thunk of CarSessionProtocol.isConnectedToCarPlay.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for CarUtils()
{
  return self;
}

uint64_t method lookup function for CarUtils(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CarUtils);
}

uint64_t dispatch thunk of CarUtils.isConnectedToCar(invocationContext:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of CarUtils.errorDialogIfUnsupportedInCar(invocationContext:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of CarUtils.errorIntentDialogIfUnsupportedInCar(invocationContext:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

unint64_t type metadata accessor for CARSessionStatus()
{
  unint64_t result = lazy cache variable for type metadata for CARSessionStatus;
  if (!lazy cache variable for type metadata for CARSessionStatus)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CARSessionStatus);
  }
  return result;
}

uint64_t GenerativeAssistantUseCase.inputDenyList()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GenerativeAssistantUseCase();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v45 - v11, v1, v6);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v12, v6);
  if (v14 == *MEMORY[0x263F406F8])
  {
    static Catalog.Resource.TokenInputDenyList.GenerativeAssistantCompositionInputDenyList()();
    uint64_t v15 = v52;
    uint64_t v16 = v53;
    uint64_t v17 = __swift_project_boxed_opaque_existential_1(v51, v52);
    MEMORY[0x270FA5388](v17);
    uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v19);
    MEMORY[0x253367C80](v19, v15, *(void *)(v16 + 16));
    uint64_t v21 = type metadata accessor for InputDenyListBundle();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a1, 0, 1, v21);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
  }
  uint64_t v49 = a1;
  if (v14 == *MEMORY[0x263F40710]) {
    goto LABEL_4;
  }
  if (v14 == *MEMORY[0x263F40718])
  {
    static Catalog.Resource.TokenInputDenyList.GenerativeAssistantKnowledgeInputDenyList()();
    goto LABEL_9;
  }
  if (v14 == *MEMORY[0x263F40700])
  {
    static Catalog.Resource.TokenInputDenyList.GenerativeAssistantKnowledgeFallbackInputDenyList()();
    goto LABEL_9;
  }
  if (v14 == *MEMORY[0x263F40708])
  {
LABEL_4:
    static Catalog.Resource.TokenInputDenyList.GenerativeAssistantMediaQAInputDenyList()();
LABEL_9:
    uint64_t v22 = v52;
    uint64_t v23 = v53;
    uint64_t v24 = __swift_project_boxed_opaque_existential_1(v51, v52);
    MEMORY[0x270FA5388](v24);
    uint64_t v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v27 + 16))(v26);
    uint64_t v28 = v49;
    MEMORY[0x253367C80](v26, v22, *(void *)(v23 + 16));
    uint64_t v29 = type metadata accessor for InputDenyListBundle();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 0, 1, v29);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
  }
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v31 = __swift_project_value_buffer(v3, (uint64_t)static Logger.modelInteraction);
  uint64_t v32 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v5, v31, v3);
  v13(v10, v1, v6);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  int v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    v51[0] = v48;
    *(_DWORD *)uint64_t v36 = 136315650;
    int v47 = v35;
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA4A790, v51);
    uint64_t v45 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v46 = v33;
    *(_WORD *)(v36 + 12) = 2080;
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6E65447475706E69, 0xEF29287473694C79, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 22) = 2080;
    uint64_t v37 = GenerativeAssistantUseCase.rawValue.getter();
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = *(void (**)(char *, uint64_t))(v7 + 8);
    v39(v10, v6);
    os_log_t v40 = v46;
    _os_log_impl(&dword_24F9A2000, v46, (os_log_type_t)v47, "%s.%s Unable to find a valid input deny list for use case: %s", (uint8_t *)v36, 0x20u);
    uint64_t v41 = v48;
    swift_arrayDestroy();
    MEMORY[0x25336A180](v41, -1, -1);
    MEMORY[0x25336A180](v36, -1, -1);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v45);
  }
  else
  {
    uint64_t v42 = *(void (**)(char *, uint64_t))(v7 + 8);
    v42(v10, v6);

    uint64_t v39 = v42;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v3);
  }
  uint64_t v43 = v49;
  uint64_t v44 = type metadata accessor for InputDenyListBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
  return ((uint64_t (*)(char *, uint64_t))v39)(v12, v6);
}

uint64_t GenerativeAssistantUseCase.inputOverrides()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputDenyListBundle?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for InputDenyListBundle();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v15 - v10;
  GenerativeAssistantUseCase.inputDenyList()((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v4, &demangling cache variable for type metadata for InputDenyListBundle?);
    uint64_t v12 = type metadata accessor for StringRenderedPromptSanitizer.Overrides();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    StringRenderedPromptSanitizer.Overrides.init(denyList:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    uint64_t v14 = type metadata accessor for StringRenderedPromptSanitizer.Overrides();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a1, 0, 1, v14);
  }
}

uint64_t GenerativeAssistantUseCase.outputDenyList()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GenerativeAssistantUseCase();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v30[-v8];
  uint64_t v10 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16);
  v10(&v30[-v8], v1, v3);
  int v11 = (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 88))(v9, v3);
  if (v11 == *MEMORY[0x263F406F8])
  {
    static Catalog.Resource.TokenOutputDenyList.GenerativeAssistantCompositionOutputDenyList()();
LABEL_9:
    uint64_t v12 = v34;
    uint64_t v13 = v35;
    uint64_t v14 = __swift_project_boxed_opaque_existential_1(v33, v34);
    MEMORY[0x270FA5388](v14);
    uint64_t v16 = &v30[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(unsigned char *))(v17 + 16))(v16);
    MEMORY[0x253367CA0](v16, v12, *(void *)(v13 + 16));
    uint64_t v18 = type metadata accessor for OutputDenyListBundle();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 0, 1, v18);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v33);
  }
  if (v11 == *MEMORY[0x263F40710]) {
    goto LABEL_4;
  }
  if (v11 == *MEMORY[0x263F40718])
  {
    static Catalog.Resource.TokenOutputDenyList.GenerativeAssistantKnowledgeOutputDenyList()();
    goto LABEL_9;
  }
  if (v11 == *MEMORY[0x263F40700])
  {
    static Catalog.Resource.TokenOutputDenyList.GenerativeAssistantKnowledgeFallbackOutputDenyList()();
    goto LABEL_9;
  }
  if (v11 == *MEMORY[0x263F40708])
  {
LABEL_4:
    static Catalog.Resource.TokenOutputDenyList.GenerativeAssistantMediaQAOutputDenyList()();
    goto LABEL_9;
  }
  if (one-time initialization token for modelInteraction != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.modelInteraction);
  v10(v7, v1, v3);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v33[0] = v32;
    *(_DWORD *)uint64_t v24 = 136315650;
    int v31 = v23;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x800000024FA4A790, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x800000024FA4A7B0, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 22) = 2080;
    uint64_t v25 = GenerativeAssistantUseCase.rawValue.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
    v27(v7, v3);
    _os_log_impl(&dword_24F9A2000, v21, (os_log_type_t)v31, "%s.%s Unable to find a valid output deny list for use case: %s", (uint8_t *)v24, 0x20u);
    uint64_t v28 = v32;
    swift_arrayDestroy();
    MEMORY[0x25336A180](v28, -1, -1);
    MEMORY[0x25336A180](v24, -1, -1);
  }
  else
  {
    uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
    v27(v7, v3);
  }

  uint64_t v29 = type metadata accessor for OutputDenyListBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(a1, 1, 1, v29);
  return ((uint64_t (*)(unsigned char *, uint64_t))v27)(v9, v3);
}

uint64_t GenerativeAssistantUseCase.outputOverrides()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OutputDenyListBundle?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OutputDenyListBundle();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int v11 = (char *)&v15 - v10;
  GenerativeAssistantUseCase.outputDenyList()((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v4, &demangling cache variable for type metadata for OutputDenyListBundle?);
    uint64_t v12 = type metadata accessor for StringResponseSanitizer.Overrides();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    StringResponseSanitizer.Overrides.init(denyList:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    uint64_t v14 = type metadata accessor for StringResponseSanitizer.Overrides();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a1, 0, 1, v14);
  }
}

float *PreparedImage.init(_:)(void *a1)
{
  void (*v5)(double *__return_ptr, id);
  id v6;
  double v7;
  NSData *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String_optional v16;
  double v18;
  char v19;
  Swift::Int_optional v20;
  Swift::Int_optional v21;

  uint64_t v2 = v1;
  *((void *)v1 + 6) = 0;
  *((void *)v1 + 7) = 0;
  *((void *)v1 + 2) = a1;
  id v3 = a1;
  v20.Swift::Int value = 0;
  v20.Swift::Bool is_nil = 1;
  v21.Swift::Int value = 0;
  v21.Swift::Bool is_nil = 1;
  v4.super.Class isa = UIImage.resizedImage(maxPixelsLong:maxPixelsShort:)(v20, v21).super.isa;
  if (one-time initialization token for _compressionRatio != -1) {
    swift_once();
  }
  if (byte_269A45858 == 1)
  {
    uint64_t v5 = (void (*)(double *__return_ptr, id))*((void *)&xmmword_269A45840 + 1);
    uint64_t v6 = (id)static Overrides._compressionRatio;
    swift_bridgeObjectRetain();
    swift_retain();
    v5(&v18, v6);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v7 = v18;
    if (v19) {
      uint64_t v7 = 0.6;
    }
  }
  else
  {
    uint64_t v7 = 0.6;
  }
  uint64_t v8 = UIImageJPEGRepresentation((UIImage *)v4.super.isa, v7);

  if (v8)
  {
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    int v11 = v10;

    *((void *)v2 + 3) = v9;
    *((void *)v2 + 4) = v11;
    uint64_t v12 = 0;
    switch(v11 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v9), v9))
        {
          __break(1u);
LABEL_19:
          __break(1u);
          JUMPOUT(0x24FA2EBC8);
        }
        uint64_t v12 = HIDWORD(v9) - (int)v9;
LABEL_15:
        outlined copy of Data._Representation(v9, v11);
LABEL_16:
        v2[10] = (float)v12 * 0.00000095367;
        uint64_t v16 = UIImage.getFileExtension()();

        outlined consume of Data._Representation(v9, v11);
        *((Swift::String_optional *)v2 + 3) = v16;
        swift_bridgeObjectRelease();
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(v9 + 16);
        uint64_t v14 = *(void *)(v9 + 24);
        uint64_t v12 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_15;
        }
        goto LABEL_19;
      case 3uLL:
        goto LABEL_16;
      default:
        uint64_t v12 = BYTE6(v11);
        goto LABEL_16;
    }
  }
  else
  {
    lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
    swift_allocError();
    *uint64_t v13 = 7;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
  }
  return v2;
}

uint64_t PreparedImage.__deallocating_deinit()
{
  outlined consume of Data._Representation(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PreparedImage()
{
  return self;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreparedImage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for NSObject();
  UIImage v4 = *(void **)(v3 + 16);
  id v5 = *(id *)(v2 + 16);
  id v6 = v4;
  char v7 = static NSObject.== infix(_:_:)();

  return v7 & 1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t ImageInfo.init(source:isScreenshot:appBundleID:uiMetadata:isAppEntity:)@<X0>(void *a1@<X0>, void *a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  int v98 = a8;
  uint64_t v99 = a6;
  uint64_t v93 = a5;
  uint64_t v87 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v86 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v85 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceProcessInfo?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v88 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v96 = (char *)&v78 - v19;
  uint64_t v20 = type metadata accessor for IntelligenceProcessInfo();
  uint64_t v103 = *(void *)(v20 - 8);
  uint64_t v104 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v108 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v78 - v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v92 = (uint64_t)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v94 = (uint64_t)&v78 - v29;
  MEMORY[0x270FA5388](v28);
  int v31 = (char *)&v78 - v30;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  int v97 = a3;
  LOBYTE(a3) = a3 & 1;
  *(unsigned char *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 17) = a4;
  uint64_t v32 = a7;
  outlined init with copy of OnScreenContent.UIMetadata?(a7, (uint64_t)&v78 - v30, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v33 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v90 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  uint64_t v91 = v34 + 48;
  int v35 = v90(v31, 1, v33);
  outlined copy of ImageSource(a1, a2, a3);
  if (v35 == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v31, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v36 = MEMORY[0x263F8EE78];
    uint64_t v37 = v99;
    uint64_t v38 = v34;
    char v39 = v98;
    uint64_t v40 = v32;
    if (*(void *)(MEMORY[0x263F8EE78] + 16))
    {
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease();
      if (!*(void *)(v36 + 16)) {
        goto LABEL_44;
      }
      char v42 = v39;
      uint64_t v44 = v103;
      uint64_t v43 = v104;
      uint64_t v45 = v96;
      (*(void (**)(char *, unint64_t, uint64_t))(v103 + 16))(v96, v36 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80)), v104);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v45, 1, v43) == 1)
      {
        outlined consume of ImageSource(a1, a2, v97 & 1);
        uint64_t v46 = (uint64_t)v45;
LABEL_6:
        outlined destroy of Result<URL, SharingMediaAttachmentError>(v46, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
        uint64_t v47 = 0;
        uint64_t v37 = 0;
LABEL_31:
        char v39 = v42;
LABEL_39:
        *(void *)(a9 + 24) = v47;
        *(void *)(a9 + 32) = v37;
        uint64_t v74 = type metadata accessor for ImageInfo(0);
        uint64_t result = outlined init with take of URL?(v40, a9 + *(int *)(v74 + 28), &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        *(unsigned char *)(a9 + *(int *)(v74 + 32)) = v39 & 1;
        return result;
      }
      uint64_t v68 = v45;
      uint64_t v47 = IntelligenceProcessInfo.bundleIdentifier.getter();
      uint64_t v70 = v69;
      outlined consume of ImageSource(a1, a2, v97 & 1);
      goto LABEL_30;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v72 = v94;
    outlined init with copy of OnScreenContent.UIMetadata?(v40, v94, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    if (v37)
    {
      outlined consume of ImageSource(a1, a2, v97 & 1);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v72, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      uint64_t v47 = v93;
      goto LABEL_39;
    }
    uint64_t v73 = v92;
    outlined init with copy of OnScreenContent.UIMetadata?(v72, v92, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    if (v90((char *)v73, 1, v33) == 1)
    {
      outlined consume of ImageSource(a1, a2, v97 & 1);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v72, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v73, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      uint64_t v47 = 0;
      uint64_t v37 = 0;
      goto LABEL_39;
    }
    char v42 = v39;
    uint64_t v75 = v33;
    uint64_t v76 = v85;
    OnScreenContent.UIMetadata.window.getter();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v73, v75);
    uint64_t v68 = v88;
    OnScreenContent.UIMetadata.Window.appProcess.getter();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v76, v87);
    uint64_t v44 = v103;
    uint64_t v43 = v104;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v68, 1, v104) == 1)
    {
      outlined consume of ImageSource(a1, a2, v97 & 1);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v94, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      uint64_t v46 = (uint64_t)v68;
      goto LABEL_6;
    }
    uint64_t v47 = IntelligenceProcessInfo.bundleIdentifier.getter();
    uint64_t v70 = v77;
    outlined consume of ImageSource(a1, a2, v97 & 1);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v94, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
LABEL_30:
    uint64_t v71 = v43;
    uint64_t v37 = v70;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v68, v71);
    goto LABEL_31;
  }
  uint64_t v48 = OnScreenContent.UIMetadata.nestedRemoteProcesses.getter();
  uint64_t v49 = v33;
  uint64_t v50 = v48;
  uint64_t v51 = *(uint64_t (**)(char *))(v34 + 8);
  uint64_t v84 = v49;
  uint64_t result = v51(v31);
  uint64_t v36 = MEMORY[0x263F8EE78];
  uint64_t v109 = MEMORY[0x263F8EE78];
  uint64_t v38 = v34;
  uint64_t v106 = *(void *)(v50 + 16);
  if (!v106)
  {
    char v39 = v98;
    uint64_t v40 = v32;
LABEL_34:
    swift_bridgeObjectRelease();
    uint64_t v37 = v99;
    uint64_t v33 = v84;
    if (*(void *)(v36 + 16)) {
      goto LABEL_3;
    }
    goto LABEL_35;
  }
  uint64_t v80 = a1;
  uint64_t v81 = a2;
  uint64_t v82 = v32;
  uint64_t v83 = a9;
  unint64_t v52 = 0;
  uint64_t v53 = v103;
  uint64_t v105 = v103 + 16;
  char v107 = (void (**)(char *, char *, uint64_t))(v103 + 32);
  uint64_t v100 = "com.apple.Tamale.MasaExtension";
  unint64_t v101 = (uint64_t (**)(char *, uint64_t))(v103 + 8);
  unint64_t v102 = 0x800000024FA42760;
  uint64_t v89 = "IntelligenceCamera";
  unint64_t v95 = 0x800000024FA42740;
  uint64_t v78 = "ls.GenerativeAssistantExtension";
  unint64_t v79 = 0x800000024FA42710;
  uint64_t v54 = v104;
  while (v52 < *(void *)(v50 + 16))
  {
    uint64_t v55 = v38;
    unint64_t v56 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    uint64_t v57 = *(void *)(v53 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v24, v50 + v56 + v57 * v52, v54);
    uint64_t v58 = IntelligenceProcessInfo.bundleIdentifier.getter();
    if (v59)
    {
      uint64_t v60 = v58;
      uint64_t v61 = v59;
      if (v58 == 0xD000000000000010 && v59 == v102
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v60 == 0xD00000000000001ELL && v61 == v95
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v60 == 0xD000000000000022 && v61 == v79)
      {
        swift_bridgeObjectRelease();
LABEL_22:
        uint64_t v62 = *v107;
        (*v107)(v108, v24, v54);
        uint64_t v63 = v109;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v63 + 16) + 1, 1);
          uint64_t v63 = v109;
        }
        unint64_t v65 = *(void *)(v63 + 16);
        unint64_t v64 = *(void *)(v63 + 24);
        if (v65 >= v64 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
          uint64_t v63 = v109;
        }
        *(void *)(v63 + 16) = v65 + 1;
        unint64_t v66 = v63 + v56 + v65 * v57;
        uint64_t v54 = v104;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v62)(v66, v108, v104);
        uint64_t v109 = v63;
        uint64_t v53 = v103;
        goto LABEL_10;
      }
      char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v67) {
        goto LABEL_22;
      }
    }
    uint64_t result = (*v101)(v24, v54);
LABEL_10:
    ++v52;
    uint64_t v38 = v55;
    if (v106 == v52)
    {
      uint64_t v36 = v109;
      char v39 = v98;
      a9 = v83;
      uint64_t v40 = v82;
      a2 = v81;
      a1 = v80;
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t ScreenContent.appBundleId.getter()
{
  uint64_t v0 = type metadata accessor for DocumentInfo(0);
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v40 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v39 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  int v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceProcessInfo?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v41 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = type metadata accessor for ImageInfo(0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ScreenContent(0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v44, (uint64_t)v24, type metadata accessor for ScreenContent);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of DocumentInfo((uint64_t)v24, (uint64_t)v2, type metadata accessor for DocumentInfo);
    outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)&v2[*(int *)(v0 + 44)], (uint64_t)v11, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v25 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v11, 1, v25) == 1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v2, type metadata accessor for DocumentInfo);
      uint64_t v27 = &demangling cache variable for type metadata for OnScreenContent.UIMetadata?;
      uint64_t v28 = (uint64_t)v11;
    }
    else
    {
      int v31 = v40;
      OnScreenContent.UIMetadata.window.getter();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v25);
      uint64_t v32 = v41;
      OnScreenContent.UIMetadata.Window.appProcess.getter();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v43);
      uint64_t v33 = type metadata accessor for IntelligenceProcessInfo();
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) != 1)
      {
        uint64_t v37 = IntelligenceProcessInfo.bundleIdentifier.getter();
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v2, type metadata accessor for DocumentInfo);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
        return v37;
      }
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v2, type metadata accessor for DocumentInfo);
      uint64_t v27 = &demangling cache variable for type metadata for IntelligenceProcessInfo?;
      uint64_t v28 = (uint64_t)v32;
    }
  }
  else
  {
    outlined init with take of DocumentInfo((uint64_t)v24, (uint64_t)v21, type metadata accessor for ImageInfo);
    outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)&v21[*(int *)(v19 + 28)], (uint64_t)v13, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v29 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v13, 1, v29) == 1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v21, type metadata accessor for ImageInfo);
      uint64_t v27 = &demangling cache variable for type metadata for OnScreenContent.UIMetadata?;
      uint64_t v28 = (uint64_t)v13;
    }
    else
    {
      OnScreenContent.UIMetadata.window.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v29);
      OnScreenContent.UIMetadata.Window.appProcess.getter();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v43);
      uint64_t v35 = type metadata accessor for IntelligenceProcessInfo();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v18, 1, v35) != 1)
      {
        uint64_t v37 = IntelligenceProcessInfo.bundleIdentifier.getter();
        _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v21, type metadata accessor for ImageInfo);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v35);
        return v37;
      }
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v21, type metadata accessor for ImageInfo);
      uint64_t v27 = &demangling cache variable for type metadata for IntelligenceProcessInfo?;
      uint64_t v28 = (uint64_t)v18;
    }
  }
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v28, v27);
  return 0;
}

uint64_t ScreenContent.window.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DocumentInfo(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = type metadata accessor for ImageInfo(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ScreenContent(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v2, (uint64_t)v18, type metadata accessor for ScreenContent);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of DocumentInfo((uint64_t)v18, (uint64_t)v6, type metadata accessor for DocumentInfo);
    outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)&v6[*(int *)(v4 + 44)], (uint64_t)v10, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v19 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v10, 1, v19) == 1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v6, type metadata accessor for DocumentInfo);
      uint64_t v21 = (uint64_t)v10;
LABEL_6:
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v21, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      uint64_t v24 = type metadata accessor for OnScreenContent.UIMetadata.Window();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a1, 1, 1, v24);
    }
    OnScreenContent.UIMetadata.window.getter();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v6, type metadata accessor for DocumentInfo);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v19);
  }
  else
  {
    outlined init with take of DocumentInfo((uint64_t)v18, (uint64_t)v15, type metadata accessor for ImageInfo);
    outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)&v15[*(int *)(v13 + 28)], (uint64_t)v12, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v22 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v12, 1, v22) == 1)
    {
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v15, type metadata accessor for ImageInfo);
      uint64_t v21 = (uint64_t)v12;
      goto LABEL_6;
    }
    OnScreenContent.UIMetadata.window.getter();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v15, type metadata accessor for ImageInfo);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v22);
  }
  uint64_t v26 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a1, 0, 1, v26);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ImageSource(uint64_t a1, uint64_t a2)
{
  return specialized static ImageSource.== infix(_:_:)(*(void **)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16), *(void **)a2, *(void **)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t static OnScreenContent.UIMetadata.== infix(_:_:)()
{
  uint64_t v0 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v10 - v5;
  OnScreenContent.UIMetadata.window.getter();
  OnScreenContent.UIMetadata.window.getter();
  char v7 = specialized static OnScreenContent.UIMetadata.Window.== infix(_:_:)((uint64_t)v6, (uint64_t)v4);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t specialized static ImageSource.== infix(_:_:)(void *a1, void *a2, char a3, void *a4, void *a5, char a6)
{
  if (a3)
  {
    if (a6)
    {
      type metadata accessor for WFOnScreenContentNode(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      outlined copy of ImageSource(a1, a2, 1);
      outlined copy of ImageSource(a4, a5, 1);
      char v12 = static NSObject.== infix(_:_:)();
      outlined consume of ImageSource(a4, a5, 1);
      outlined consume of ImageSource(a1, a2, 1);
      return v12 & 1;
    }
  }
  else if ((a6 & 1) == 0)
  {
    type metadata accessor for IntelligenceFile();
    swift_retain();
    swift_retain();
    id v10 = a2;
    id v11 = a5;
    if (MEMORY[0x253367F30](a1, a4))
    {
      type metadata accessor for WFOnScreenContentNode(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      char v12 = static NSObject.== infix(_:_:)();

      swift_release();
      swift_release();
      return v12 & 1;
    }

    swift_release();
    swift_release();
  }
  return 0;
}

uint64_t specialized static ImageInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  uint64_t v75 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v71 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v72 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OnScreenContent.UIMetadata?, OnScreenContent.UIMetadata?));
  MEMORY[0x270FA5388](v73);
  uint64_t v76 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ImageInfo(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  unint64_t v79 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v78 = (char *)&v70 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v81 = (uint64_t)&v70 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v77 = (uint64_t)&v70 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v70 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v80 = (char *)&v70 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v70 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v70 - v28;
  uint64_t v30 = *(void **)a1;
  int v31 = *(void **)(a1 + 8);
  uint64_t v32 = a1;
  char v33 = *(unsigned char *)(a1 + 16);
  uint64_t v35 = *(void **)a2;
  uint64_t v34 = *(void **)(a2 + 8);
  uint64_t v36 = a2;
  if (v33)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v70 = v27;
      type metadata accessor for WFOnScreenContentNode(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      outlined copy of ImageSource(v30, v31, 1);
      outlined copy of ImageSource(v35, v34, 1);
      char v37 = static NSObject.== infix(_:_:)();
      outlined consume of ImageSource(v35, v34, 1);
      outlined consume of ImageSource(v30, v31, 1);
      goto LABEL_7;
    }
LABEL_15:
    uint64_t v41 = v32;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v32, (uint64_t)v29, type metadata accessor for ImageInfo);
    uint64_t v40 = a2;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(a2, (uint64_t)v26, type metadata accessor for ImageInfo);
    uint64_t v42 = (uint64_t)v80;
    uint64_t v43 = v81;
    goto LABEL_16;
  }
  if (*(unsigned char *)(a2 + 16)) {
    goto LABEL_15;
  }
  uint64_t v70 = v27;
  type metadata accessor for IntelligenceFile();
  swift_retain();
  swift_retain();
  id v38 = v31;
  id v39 = v34;
  if ((MEMORY[0x253367F30](v30, v35) & 1) == 0)
  {

    swift_release();
    swift_release();
    goto LABEL_15;
  }
  type metadata accessor for WFOnScreenContentNode(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  char v37 = static NSObject.== infix(_:_:)();

  swift_release();
  swift_release();
LABEL_7:
  uint64_t v40 = v36;
  uint64_t v41 = v32;
  uint64_t v42 = (uint64_t)v80;
  uint64_t v43 = v81;
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v32, (uint64_t)v29, type metadata accessor for ImageInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v40, (uint64_t)v26, type metadata accessor for ImageInfo);
  if ((v37 & 1) == 0)
  {
LABEL_16:
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v26, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v29, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v41, v42, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v40, (uint64_t)v21, type metadata accessor for ImageInfo);
    goto LABEL_17;
  }
  int v44 = v29[17];
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v29, type metadata accessor for ImageInfo);
  int v45 = v26[17];
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v26, type metadata accessor for ImageInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v32, v42, type metadata accessor for ImageInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v40, (uint64_t)v21, type metadata accessor for ImageInfo);
  if (v44 != v45)
  {
LABEL_17:
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v21, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v42, type metadata accessor for ImageInfo);
LABEL_18:
    uint64_t v49 = (uint64_t)v78;
    uint64_t v50 = (uint64_t)v79;
    uint64_t v51 = v77;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v41, v77, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v40, v43, type metadata accessor for ImageInfo);
    goto LABEL_19;
  }
  uint64_t v46 = *(void *)(v42 + 32);
  uint64_t v47 = *((void *)v21 + 4);
  if (!v46)
  {
    swift_bridgeObjectRetain();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v21, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v42, type metadata accessor for ImageInfo);
    uint64_t v48 = v76;
    if (!v47) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
  uint64_t v48 = v76;
  if (!v47)
  {
    swift_bridgeObjectRetain();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v21, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v42, type metadata accessor for ImageInfo);
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (*(void *)(v42 + 24) == *((void *)v21 + 3) && v46 == v47)
  {
    swift_bridgeObjectRetain();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v21, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v42, type metadata accessor for ImageInfo);
    swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v51 = v77;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v32, v77, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v40, v43, type metadata accessor for ImageInfo);
    uint64_t v49 = (uint64_t)v78;
    uint64_t v50 = (uint64_t)v79;
    goto LABEL_28;
  }
  char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v21, type metadata accessor for ImageInfo);
  uint64_t v48 = v76;
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v42, type metadata accessor for ImageInfo);
  swift_bridgeObjectRelease();
  uint64_t v51 = v77;
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v32, v77, type metadata accessor for ImageInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v40, v43, type metadata accessor for ImageInfo);
  uint64_t v49 = (uint64_t)v78;
  uint64_t v50 = (uint64_t)v79;
  if ((v54 & 1) == 0)
  {
LABEL_19:
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v43, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v51, type metadata accessor for ImageInfo);
LABEL_20:
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v41, v49, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v40, v50, type metadata accessor for ImageInfo);
    goto LABEL_21;
  }
LABEL_28:
  uint64_t v55 = *(int *)(v70 + 28);
  uint64_t v56 = v43 + v55;
  uint64_t v57 = v48 + *(int *)(v73 + 48);
  outlined init with copy of OnScreenContent.UIMetadata?(v51 + v55, v48, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  outlined init with copy of OnScreenContent.UIMetadata?(v56, v57, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  uint64_t v59 = v74;
  if (v58(v48, 1, v74) == 1)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v81, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v51, type metadata accessor for ImageInfo);
    if (v58(v57, 1, v59) == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v76, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v41, v49, type metadata accessor for ImageInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v40, v50, type metadata accessor for ImageInfo);
LABEL_36:
      uint64_t v67 = v70;
      char v68 = *(unsigned char *)(v49 + *(int *)(v70 + 32));
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v49, type metadata accessor for ImageInfo);
      char v69 = *(unsigned char *)(v50 + *(int *)(v67 + 32));
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v50, type metadata accessor for ImageInfo);
      char v52 = v68 ^ v69 ^ 1;
      return v52 & 1;
    }
    goto LABEL_34;
  }
  uint64_t v60 = (uint64_t)v72;
  outlined init with copy of OnScreenContent.UIMetadata?(v76, (uint64_t)v72, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  unsigned int v61 = v58(v57, 1, v59);
  uint64_t v62 = v60;
  uint64_t v63 = v75;
  if (v61 == 1)
  {
    uint64_t v64 = v75;
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v81, type metadata accessor for ImageInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v51, type metadata accessor for ImageInfo);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v59);
LABEL_34:
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v76, &demangling cache variable for type metadata for (OnScreenContent.UIMetadata?, OnScreenContent.UIMetadata?));
    goto LABEL_20;
  }
  unint64_t v65 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v71, v57, v59);
  lazy protocol witness table accessor for type OnScreenContent.UIMetadata and conformance OnScreenContent.UIMetadata(&lazy protocol witness table cache variable for type OnScreenContent.UIMetadata and conformance OnScreenContent.UIMetadata, MEMORY[0x263F4CF00]);
  LODWORD(v80) = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v66 = *(void (**)(char *, uint64_t))(v63 + 8);
  v66(v65, v59);
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v81, type metadata accessor for ImageInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v51, type metadata accessor for ImageInfo);
  v66(v72, v59);
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v76, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v41, v49, type metadata accessor for ImageInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v40, v50, type metadata accessor for ImageInfo);
  if (v80) {
    goto LABEL_36;
  }
LABEL_21:
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v50, type metadata accessor for ImageInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v49, type metadata accessor for ImageInfo);
  char v52 = 0;
  return v52 & 1;
}

uint64_t specialized static ScreenContent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v3 = type metadata accessor for DocumentInfo(0);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v32 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v32 - v6;
  uint64_t v8 = type metadata accessor for ImageInfo(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = type metadata accessor for ScreenContent(0);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ScreenContent, ScreenContent));
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t)&v23[*(int *)(v21 + 56)];
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(a1, (uint64_t)v23, type metadata accessor for ScreenContent);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v33, v24, type metadata accessor for ScreenContent);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2((uint64_t)v23, (uint64_t)v17, type metadata accessor for ScreenContent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of DocumentInfo((uint64_t)v17, (uint64_t)v7, type metadata accessor for DocumentInfo);
      uint64_t v25 = v32;
      outlined init with take of DocumentInfo(v24, v32, type metadata accessor for DocumentInfo);
      char v26 = specialized static DocumentInfo.== infix(_:_:)((uint64_t)v7, v25);
      uint64_t v27 = type metadata accessor for DocumentInfo;
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v25, type metadata accessor for DocumentInfo);
      uint64_t v28 = (uint64_t)v7;
LABEL_9:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v28, v27);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v23, type metadata accessor for ScreenContent);
      return v26 & 1;
    }
    uint64_t v29 = type metadata accessor for DocumentInfo;
    uint64_t v30 = (uint64_t)v17;
  }
  else
  {
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2((uint64_t)v23, (uint64_t)v19, type metadata accessor for ScreenContent);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of DocumentInfo((uint64_t)v19, (uint64_t)v13, type metadata accessor for ImageInfo);
      outlined init with take of DocumentInfo(v24, (uint64_t)v11, type metadata accessor for ImageInfo);
      char v26 = specialized static ImageInfo.== infix(_:_:)((uint64_t)v13, (uint64_t)v11);
      uint64_t v27 = type metadata accessor for ImageInfo;
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v11, type metadata accessor for ImageInfo);
      uint64_t v28 = (uint64_t)v13;
      goto LABEL_9;
    }
    uint64_t v29 = type metadata accessor for ImageInfo;
    uint64_t v30 = (uint64_t)v19;
  }
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v30, v29);
  outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v23, &demangling cache variable for type metadata for (ScreenContent, ScreenContent));
  char v26 = 0;
  return v26 & 1;
}

uint64_t specialized static DocumentInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v113 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v116 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  uint64_t v111 = &v108[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v112 = &v108[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OnScreenContent.UIMetadata?, OnScreenContent.UIMetadata?));
  MEMORY[0x270FA5388](v114);
  uint64_t v115 = &v108[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v119 = *(void *)(v8 - 8);
  uint64_t v120 = v8;
  MEMORY[0x270FA5388](v8);
  unint64_t v117 = &v108[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v121 = &v108[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, Date?));
  MEMORY[0x270FA5388](v122);
  uint64_t v118 = &v108[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for DocumentInfo(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  char v126 = &v108[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = &v108[-v17];
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  char v130 = &v108[-v20];
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v125 = &v108[-v22];
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  char v134 = &v108[-v24];
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  double v133 = &v108[-v26];
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v132 = (uint64_t)&v108[-v28];
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  char v129 = &v108[-v30];
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  double v128 = &v108[-v32];
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  char v127 = &v108[-v34];
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  char v37 = &v108[-v36];
  uint64_t v38 = MEMORY[0x270FA5388](v35);
  uint64_t v40 = &v108[-v39];
  uint64_t v41 = MEMORY[0x270FA5388](v38);
  uint64_t v43 = &v108[-v42];
  MEMORY[0x270FA5388](v41);
  int v45 = &v108[-v44];
  char v46 = MEMORY[0x2533677D0](a1, a2);
  uint64_t v131 = a1;
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(a1, (uint64_t)v45, type metadata accessor for DocumentInfo);
  uint64_t v124 = a2;
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(a2, (uint64_t)v43, type metadata accessor for DocumentInfo);
  if ((v46 & 1) == 0)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v43, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v45, type metadata accessor for DocumentInfo);
    uint64_t v54 = v124;
    uint64_t v56 = v134;
    uint64_t v50 = (uint64_t)v37;
LABEL_15:
    uint64_t v53 = v131;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v131, (uint64_t)v40, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, v50, type metadata accessor for DocumentInfo);
    uint64_t v55 = (uint64_t)v130;
LABEL_16:
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v50, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v40, type metadata accessor for DocumentInfo);
LABEL_17:
    uint64_t v63 = (uint64_t)v125;
    uint64_t v62 = (uint64_t)v126;
    uint64_t v60 = v127;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v127, type metadata accessor for DocumentInfo);
    unsigned int v61 = v128;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, (uint64_t)v128, type metadata accessor for DocumentInfo);
    goto LABEL_18;
  }
  uint64_t v123 = v18;
  uint64_t v110 = (int *)v13;
  uint64_t v47 = *(int *)(v13 + 20);
  uint64_t v48 = *(void **)&v45[v47];
  uint64_t v49 = *(void **)&v43[v47];
  if (!v48)
  {
    id v57 = v49;
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v43, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v45, type metadata accessor for DocumentInfo);
    uint64_t v50 = (uint64_t)v37;
    if (!v49)
    {
      uint64_t v53 = v131;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v131, (uint64_t)v40, type metadata accessor for DocumentInfo);
      uint64_t v54 = v124;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v124, (uint64_t)v37, type metadata accessor for DocumentInfo);
      uint64_t v18 = v123;
      uint64_t v55 = (uint64_t)v130;
      uint64_t v56 = v134;
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  uint64_t v50 = (uint64_t)v37;
  if (!v49)
  {
    id v57 = v48;
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v43, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v45, type metadata accessor for DocumentInfo);
LABEL_14:

    uint64_t v18 = v123;
    uint64_t v54 = v124;
    uint64_t v56 = v134;
    goto LABEL_15;
  }
  type metadata accessor for WFOnScreenContentNode(0, &lazy cache variable for type metadata for INFile);
  id v51 = v49;
  id v52 = v48;
  int v109 = static NSObject.== infix(_:_:)();
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v43, type metadata accessor for DocumentInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v45, type metadata accessor for DocumentInfo);

  uint64_t v53 = v131;
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v131, (uint64_t)v40, type metadata accessor for DocumentInfo);
  uint64_t v54 = v124;
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v124, (uint64_t)v37, type metadata accessor for DocumentInfo);
  uint64_t v18 = v123;
  uint64_t v55 = (uint64_t)v130;
  uint64_t v56 = v134;
  if ((v109 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_9:
  uint64_t v58 = v110[6];
  uint64_t v59 = *(void *)(v50 + v58);
  if (*(void *)&v40[v58])
  {
    uint64_t v136 = *(void *)&v40[v58];
    if (!v59)
    {
      swift_retain_n();
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v50, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v40, type metadata accessor for DocumentInfo);
      swift_release_n();
      goto LABEL_17;
    }
    uint64_t v135 = v59;
    type metadata accessor for IntelligenceFile();
    lazy protocol witness table accessor for type OnScreenContent.UIMetadata and conformance OnScreenContent.UIMetadata(&lazy protocol witness table cache variable for type IntelligenceFile and conformance IntelligenceFile, MEMORY[0x263F818B0]);
    swift_retain_n();
    LODWORD(v130) = dispatch thunk of static Equatable.== infix(_:_:)();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v50, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v40, type metadata accessor for DocumentInfo);
    swift_release();
    uint64_t v56 = v134;
    uint64_t v18 = v123;
    swift_release();
    uint64_t v60 = v127;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v127, type metadata accessor for DocumentInfo);
    unsigned int v61 = v128;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, (uint64_t)v128, type metadata accessor for DocumentInfo);
    uint64_t v63 = (uint64_t)v125;
    uint64_t v62 = (uint64_t)v126;
    if ((v130 & 1) == 0)
    {
LABEL_18:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v60, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v61, type metadata accessor for DocumentInfo);
      uint64_t v64 = v129;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v129, type metadata accessor for DocumentInfo);
      uint64_t v65 = v132;
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, v132, type metadata accessor for DocumentInfo);
      uint64_t v66 = (uint64_t)v64;
      uint64_t v67 = v133;
LABEL_19:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v66, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v65, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v67, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, (uint64_t)v56, type metadata accessor for DocumentInfo);
LABEL_20:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v56, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v67, type metadata accessor for DocumentInfo);
LABEL_21:
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, v63, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, v55, type metadata accessor for DocumentInfo);
LABEL_22:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v55, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v63, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v18, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, v62, type metadata accessor for DocumentInfo);
LABEL_23:
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v62, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v18, type metadata accessor for DocumentInfo);
      goto LABEL_24;
    }
  }
  else
  {
    swift_retain();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v50, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v40, type metadata accessor for DocumentInfo);
    if (v59)
    {
      swift_release();
      goto LABEL_17;
    }
    uint64_t v60 = v127;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v127, type metadata accessor for DocumentInfo);
    unsigned int v61 = v128;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, (uint64_t)v128, type metadata accessor for DocumentInfo);
    uint64_t v63 = (uint64_t)v125;
    uint64_t v62 = (uint64_t)v126;
  }
  uint64_t v70 = v110[7];
  uint64_t v71 = *(void *)&v60[v70];
  uint64_t v72 = *(void *)&v60[v70 + 8];
  uint64_t v73 = &v61[v70];
  if (v71 == *v73 && v72 == v73[1])
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v60, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v61, type metadata accessor for DocumentInfo);
    uint64_t v74 = v129;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v129, type metadata accessor for DocumentInfo);
    uint64_t v65 = v132;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, v132, type metadata accessor for DocumentInfo);
    uint64_t v66 = (uint64_t)v74;
    uint64_t v67 = v133;
  }
  else
  {
    LODWORD(v130) = _stringCompareWithSmolCheck(_:_:expecting:)();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v60, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v61, type metadata accessor for DocumentInfo);
    uint64_t v75 = v129;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v129, type metadata accessor for DocumentInfo);
    uint64_t v65 = v132;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, v132, type metadata accessor for DocumentInfo);
    uint64_t v66 = (uint64_t)v75;
    uint64_t v67 = v133;
    if ((v130 & 1) == 0) {
      goto LABEL_19;
    }
  }
  uint64_t v76 = v110[8];
  uint64_t v77 = *(void *)(v66 + v76);
  uint64_t v78 = *(void *)(v66 + v76 + 8);
  unint64_t v79 = (void *)(v65 + v76);
  if (v77 == *v79 && v78 == v79[1])
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v66, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v132, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v67, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, (uint64_t)v56, type metadata accessor for DocumentInfo);
    uint64_t v80 = v122;
  }
  else
  {
    uint64_t v81 = v66;
    char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v81, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v132, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v133, type metadata accessor for DocumentInfo);
    uint64_t v67 = v133;
    _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, (uint64_t)v56, type metadata accessor for DocumentInfo);
    uint64_t v80 = v122;
    if ((v82 & 1) == 0) {
      goto LABEL_20;
    }
  }
  uint64_t v83 = v110[9];
  uint64_t v84 = (uint64_t)&v67[v83];
  uint64_t v85 = (uint64_t)&v56[v83];
  uint64_t v86 = v118;
  uint64_t v87 = (uint64_t)&v118[*(int *)(v80 + 48)];
  outlined init with copy of OnScreenContent.UIMetadata?(v84, (uint64_t)v118, &demangling cache variable for type metadata for Date?);
  outlined init with copy of OnScreenContent.UIMetadata?(v85, v87, &demangling cache variable for type metadata for Date?);
  uint64_t v88 = v119;
  uint64_t v89 = v120;
  uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
  if (v90((uint64_t)v86, 1, v120) == 1)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v134, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v133, type metadata accessor for DocumentInfo);
    int v91 = v90(v87, 1, v89);
    uint64_t v18 = v123;
    uint64_t v53 = v131;
    if (v91 == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v86, &demangling cache variable for type metadata for Date?);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, v63, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, v55, type metadata accessor for DocumentInfo);
      goto LABEL_45;
    }
LABEL_43:
    outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v86, &demangling cache variable for type metadata for (Date?, Date?));
    goto LABEL_21;
  }
  outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)v86, (uint64_t)v121, &demangling cache variable for type metadata for Date?);
  if (v90(v87, 1, v89) == 1)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v134, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v133, type metadata accessor for DocumentInfo);
    (*(void (**)(unsigned char *, uint64_t))(v88 + 8))(v121, v89);
    uint64_t v18 = v123;
    uint64_t v53 = v131;
    goto LABEL_43;
  }
  uint64_t v92 = v117;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v88 + 32))(v117, v87, v89);
  lazy protocol witness table accessor for type OnScreenContent.UIMetadata and conformance OnScreenContent.UIMetadata(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  LODWORD(v132) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v93 = *(void (**)(unsigned char *, uint64_t))(v88 + 8);
  v93(v92, v89);
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v134, type metadata accessor for DocumentInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v133, type metadata accessor for DocumentInfo);
  v93(v121, v89);
  outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v86, &demangling cache variable for type metadata for Date?);
  uint64_t v53 = v131;
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v131, v63, type metadata accessor for DocumentInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, v55, type metadata accessor for DocumentInfo);
  uint64_t v18 = v123;
  if ((v132 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_45:
  uint64_t v94 = v110;
  float v95 = *(float *)(v63 + v110[10]);
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v63, type metadata accessor for DocumentInfo);
  float v96 = *(float *)(v55 + v94[10]);
  _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v55, type metadata accessor for DocumentInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v53, (uint64_t)v18, type metadata accessor for DocumentInfo);
  _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(v54, v62, type metadata accessor for DocumentInfo);
  if (v95 != v96) {
    goto LABEL_23;
  }
  uint64_t v97 = v94[11];
  uint64_t v98 = v62 + v97;
  uint64_t v99 = v115;
  uint64_t v100 = (uint64_t)&v115[*(int *)(v114 + 48)];
  uint64_t v101 = (uint64_t)v18;
  outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)&v18[v97], (uint64_t)v115, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  outlined init with copy of OnScreenContent.UIMetadata?(v98, v100, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v102 = v116;
  uint64_t v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  uint64_t v104 = v113;
  if (v103((uint64_t)v99, 1, v113) == 1)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v62, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v101, type metadata accessor for DocumentInfo);
    if (v103(v100, 1, v104) == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v99, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      char v68 = 1;
      return v68 & 1;
    }
  }
  else
  {
    uint64_t v105 = v112;
    outlined init with copy of OnScreenContent.UIMetadata?((uint64_t)v99, (uint64_t)v112, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    if (v103(v100, 1, v104) != 1)
    {
      uint64_t v106 = v111;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v102 + 32))(v111, v100, v104);
      lazy protocol witness table accessor for type OnScreenContent.UIMetadata and conformance OnScreenContent.UIMetadata(&lazy protocol witness table cache variable for type OnScreenContent.UIMetadata and conformance OnScreenContent.UIMetadata, MEMORY[0x263F4CF00]);
      char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v107 = *(void (**)(unsigned char *, uint64_t))(v102 + 8);
      v107(v106, v104);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v62, type metadata accessor for DocumentInfo);
      _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v123, type metadata accessor for DocumentInfo);
      v107(v105, v104);
      outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v99, &demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      return v68 & 1;
    }
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(v62, type metadata accessor for DocumentInfo);
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1((uint64_t)v123, type metadata accessor for DocumentInfo);
    (*(void (**)(unsigned char *, uint64_t))(v102 + 8))(v105, v104);
  }
  outlined destroy of Result<URL, SharingMediaAttachmentError>((uint64_t)v99, &demangling cache variable for type metadata for (OnScreenContent.UIMetadata?, OnScreenContent.UIMetadata?));
LABEL_24:
  char v68 = 0;
  return v68 & 1;
}

uint64_t specialized static OnScreenContent.UIMetadata.Window.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v83 = type metadata accessor for IntelligenceProcessInfo();
  uint64_t v84 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v80 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IntelligenceProcessInfo?, IntelligenceProcessInfo?));
  MEMORY[0x270FA5388](v82);
  uint64_t v85 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntelligenceProcessInfo?);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v81 = (uint64_t)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v86 = (uint64_t)&v79 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v87 = (uint64_t)&v79 - v11;
  uint64_t v12 = type metadata accessor for OnScreenContent.UIMetadata.Window();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v92 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  int v91 = (char *)&v79 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v89 = (char *)&v79 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  *(void *)&double v90 = (char *)&v79 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v79 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v79 - v25;
  char v27 = OnScreenContent.UIMetadata.Window.isActive.getter();
  char v28 = v27 ^ OnScreenContent.UIMetadata.Window.isActive.getter();
  uint64_t v88 = v13;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v93 = a1;
  v29(v26, a1, v12);
  uint64_t v94 = a2;
  v29(v24, a2, v12);
  if (v28) {
    goto LABEL_2;
  }
  OnScreenContent.UIMetadata.Window.boundingBox.getter();
  CGFloat v43 = v98[0];
  CGFloat v44 = v98[1];
  CGFloat v45 = v98[2];
  CGFloat v46 = v98[3];
  OnScreenContent.UIMetadata.Window.boundingBox.getter();
  CGFloat v47 = *(double *)v99;
  CGFloat v48 = *(double *)&v99[1];
  CGFloat v49 = *(double *)&v99[2];
  CGFloat v50 = *(double *)&v99[3];
  outlined init with take of URL?((uint64_t)v98, (uint64_t)v96, &demangling cache variable for type metadata for CGRect?);
  outlined init with take of URL?((uint64_t)v99, (uint64_t)v97, &demangling cache variable for type metadata for CGRect?);
  outlined init with take of URL?((uint64_t)v98, (uint64_t)v101, &demangling cache variable for type metadata for CGRect?);
  if (v101[32])
  {
    id v52 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v51 = v13 + 8;
    v52(v24, v12);
    float v95 = v52;
    v52(v26, v12);
    if ((v97[32] & 1) == 0) {
      goto LABEL_3;
    }
    uint64_t v53 = v51 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    double v54 = v90;
    v29(*(char **)&v90, v93, v12);
    uint64_t v35 = v89;
    v29(v89, v94, v12);
  }
  else
  {
    outlined init with take of URL?((uint64_t)v99, (uint64_t)v100, &demangling cache variable for type metadata for CGRect?);
    if (v100[32])
    {
LABEL_2:
      uint64_t v30 = *(void (**)(char *, uint64_t))(v13 + 8);
      v30(v24, v12);
      float v95 = v30;
      v30(v26, v12);
LABEL_3:
      uint64_t v31 = v91;
      uint64_t v32 = v92;
      uint64_t v33 = v94;
      uint64_t v34 = v93;
      uint64_t v35 = v89;
      double v36 = v90;
      v29(*(char **)&v90, v93, v12);
      v29(v35, v33, v12);
LABEL_4:
      char v37 = v35;
      uint64_t v38 = v95;
      v95(v37, v12);
      v38(*(char **)&v36, v12);
LABEL_5:
      uint64_t v39 = v94;
      v29(v31, v34, v12);
      v29(v32, v39, v12);
LABEL_6:
      uint64_t v40 = v95;
      v95(v32, v12);
      v40(v31, v12);
      goto LABEL_7;
    }
    v102.origin.x = v43;
    v102.origin.y = v44;
    v102.size.width = v45;
    v102.size.height = v46;
    v103.origin.x = v47;
    v103.origin.y = v48;
    v103.size.width = v49;
    v103.size.height = v50;
    BOOL v55 = CGRectEqualToRect(v102, v103);
    id v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v56 = v13 + 8;
    v57(v24, v12);
    float v95 = v57;
    v57(v26, v12);
    double v54 = v90;
    v29(*(char **)&v90, v93, v12);
    uint64_t v35 = v89;
    v29(v89, v94, v12);
    if (!v55)
    {
      double v36 = v54;
      uint64_t v31 = v91;
      uint64_t v32 = v92;
      uint64_t v34 = v93;
      goto LABEL_4;
    }
    uint64_t v53 = v56 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  }
  double v90 = COERCE_DOUBLE(OnScreenContent.UIMetadata.Window.fractionVisible.getter());
  char v59 = v58;
  double v60 = COERCE_DOUBLE(OnScreenContent.UIMetadata.Window.fractionVisible.getter());
  char v62 = v61;
  uint64_t v63 = v95;
  v95(v35, v12);
  uint64_t v89 = (char *)v53;
  v63(*(char **)&v54, v12);
  if (v59)
  {
    if (v62)
    {
      uint64_t v31 = v91;
      v29(v91, v93, v12);
      v29(v92, v94, v12);
      goto LABEL_23;
    }
LABEL_20:
    uint64_t v31 = v91;
    uint64_t v32 = v92;
    uint64_t v34 = v93;
    goto LABEL_5;
  }
  if (v62) {
    goto LABEL_20;
  }
  double v64 = v90;
  uint64_t v31 = v91;
  v29(v91, v93, v12);
  uint64_t v32 = v92;
  v29(v92, v94, v12);
  if (v64 != v60) {
    goto LABEL_6;
  }
LABEL_23:
  uint64_t v65 = v87;
  OnScreenContent.UIMetadata.Window.appProcess.getter();
  uint64_t v66 = v86;
  OnScreenContent.UIMetadata.Window.appProcess.getter();
  uint64_t v67 = v85;
  uint64_t v68 = v85 + *(int *)(v82 + 48);
  outlined init with copy of OnScreenContent.UIMetadata?(v65, v85, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
  outlined init with copy of OnScreenContent.UIMetadata?(v66, v68, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
  uint64_t v69 = v84;
  uint64_t v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  uint64_t v71 = v83;
  if (v70(v67, 1, v83) == 1)
  {
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v66, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v65, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    uint64_t v72 = v31;
    uint64_t v73 = v95;
    v95(v92, v12);
    v73(v72, v12);
    if (v70(v68, 1, v71) == 1)
    {
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v67, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
      char v41 = 1;
      return v41 & 1;
    }
  }
  else
  {
    uint64_t v74 = v81;
    outlined init with copy of OnScreenContent.UIMetadata?(v67, v81, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    if (v70(v68, 1, v71) != 1)
    {
      uint64_t v76 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v80, v68, v71);
      lazy protocol witness table accessor for type OnScreenContent.UIMetadata and conformance OnScreenContent.UIMetadata((unint64_t *)&lazy protocol witness table cache variable for type IntelligenceProcessInfo and conformance IntelligenceProcessInfo, MEMORY[0x263F81B08]);
      char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v77 = *(void (**)(char *, uint64_t))(v69 + 8);
      v77(v76, v71);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v86, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v87, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
      uint64_t v78 = v95;
      v95(v92, v12);
      v78(v91, v12);
      v77((char *)v74, v71);
      outlined destroy of Result<URL, SharingMediaAttachmentError>(v67, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
      return v41 & 1;
    }
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v86, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    outlined destroy of Result<URL, SharingMediaAttachmentError>(v87, &demangling cache variable for type metadata for IntelligenceProcessInfo?);
    uint64_t v75 = v95;
    v95(v92, v12);
    v75(v91, v12);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v74, v71);
  }
  outlined destroy of Result<URL, SharingMediaAttachmentError>(v67, &demangling cache variable for type metadata for (IntelligenceProcessInfo?, IntelligenceProcessInfo?));
LABEL_7:
  char v41 = 0;
  return v41 & 1;
}

char *initializeBufferWithCopyOfBuffer for ScreenContent(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *(void *)a1 = *a2;
    a1 = &v24[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for DocumentInfo(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = *(char **)((char *)a2 + v8);
      *(void *)&a1[v8] = v9;
      *(void *)&a1[v7[6]] = *(char **)((char *)a2 + v7[6]);
      uint64_t v10 = v7[7];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = (char **)((char *)a2 + v10);
      uint64_t v13 = v12[1];
      *(void *)uint64_t v11 = *v12;
      *((void *)v11 + 1) = v13;
      uint64_t v14 = v7[8];
      uint64_t v15 = &a1[v14];
      uint64_t v16 = (char **)((char *)a2 + v14);
      uint64_t v17 = v16[1];
      *(void *)uint64_t v15 = *v16;
      *((void *)v15 + 1) = v17;
      CGFloat v44 = v7;
      uint64_t v18 = v7[9];
      __dst = &a1[v18];
      uint64_t v19 = (char *)a2 + v18;
      uint64_t v20 = type metadata accessor for Date();
      uint64_t v21 = *(void *)(v20 - 8);
      CGFloat v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      id v22 = v9;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v43(v19, 1, v20))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
      }
      *(_DWORD *)&a1[v44[10]] = *(_DWORD *)((char *)a2 + v44[10]);
      uint64_t v36 = v44[11];
      char v37 = &a1[v36];
      uint64_t v38 = (char *)a2 + v36;
      uint64_t v39 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      a1[v44[12]] = *((unsigned char *)a2 + v44[12]);
    }
    else
    {
      uint64_t v25 = *a2;
      uint64_t v26 = a2[1];
      char v27 = *((unsigned char *)a2 + 16);
      outlined copy of ImageSource(*a2, v26, v27);
      *(void *)a1 = v25;
      *((void *)a1 + 1) = v26;
      a1[16] = v27;
      a1[17] = *((unsigned char *)a2 + 17);
      char v28 = a2[4];
      *((void *)a1 + 3) = a2[3];
      *((void *)a1 + 4) = v28;
      uint64_t v29 = type metadata accessor for ImageInfo(0);
      uint64_t v30 = *(int *)(v29 + 28);
      __dsta = &a1[v30];
      uint64_t v31 = (char *)a2 + v30;
      uint64_t v32 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(__dsta, v31, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dsta, v31, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dsta, 0, 1, v32);
      }
      a1[*(int *)(v29 + 32)] = *((unsigned char *)a2 + *(int *)(v29 + 32));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for ImageInfo(uint64_t a1)
{
  return type metadata accessor for CallEmergencyServicesTool(a1, (uint64_t *)&type metadata singleton initialization cache for ImageInfo);
}

uint64_t type metadata accessor for DocumentInfo(uint64_t a1)
{
  return type metadata accessor for CallEmergencyServicesTool(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentInfo);
}

uint64_t destroy for ScreenContent(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined consume of ImageSource(*(void **)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
    uint64_t v7 = a1 + *(int *)(type metadata accessor for ImageInfo(0) + 28);
    uint64_t v8 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v11 = *(void *)(v8 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = (int *)type metadata accessor for DocumentInfo(0);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + v3[9];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + v3[11];
  uint64_t v8 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
LABEL_7:
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

uint64_t initializeWithCopy for ScreenContent(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = (int *)type metadata accessor for DocumentInfo(0);
    uint64_t v6 = v5[5];
    uint64_t v7 = *(void **)(a2 + v6);
    *(void *)(a1 + v6) = v7;
    *(void *)(a1 + v5[6]) = *(void *)(a2 + v5[6]);
    uint64_t v8 = v5[7];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (void *)(a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = v5[8];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (void *)(a2 + v12);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = v5[9];
    CGFloat v43 = v5;
    __dst = (void *)(a1 + v16);
    uint64_t v17 = (const void *)(a2 + v16);
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
    id v20 = v7;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v42(v17, 1, v18))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(__dst, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    *(_DWORD *)(a1 + v43[10]) = *(_DWORD *)(a2 + v43[10]);
    uint64_t v34 = v43[11];
    uint64_t v35 = (void *)(a1 + v34);
    uint64_t v36 = (const void *)(a2 + v34);
    uint64_t v37 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v40 = v43 + 12;
  }
  else
  {
    id v22 = *(void **)a2;
    uint64_t v23 = *(void **)(a2 + 8);
    char v24 = *(unsigned char *)(a2 + 16);
    outlined copy of ImageSource(*(void **)a2, v23, v24);
    *(void *)a1 = v22;
    *(void *)(a1 + 8) = v23;
    *(unsigned char *)(a1 + 16) = v24;
    *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
    uint64_t v25 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v25;
    uint64_t v26 = type metadata accessor for ImageInfo(0);
    uint64_t v27 = *(int *)(v26 + 28);
    char v28 = (void *)(a1 + v27);
    uint64_t v29 = (const void *)(a2 + v27);
    uint64_t v30 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    uint64_t v40 = (int *)(v26 + 32);
  }
  *(unsigned char *)(a1 + *v40) = *(unsigned char *)(a2 + *v40);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ScreenContent(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(a1, type metadata accessor for ScreenContent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = (int *)type metadata accessor for DocumentInfo(0);
      uint64_t v6 = v5[5];
      uint64_t v7 = *(void **)(a2 + v6);
      *(void *)(a1 + v6) = v7;
      *(void *)(a1 + v5[6]) = *(void *)(a2 + v5[6]);
      uint64_t v8 = v5[7];
      uint64_t v9 = (void *)(a1 + v8);
      uint64_t v10 = (void *)(a2 + v8);
      *uint64_t v9 = *v10;
      v9[1] = v10[1];
      uint64_t v11 = v5[8];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (void *)(a2 + v11);
      void *v12 = *v13;
      v12[1] = v13[1];
      uint64_t v14 = v5[9];
      uint64_t v40 = v5;
      __dst = (void *)(a1 + v14);
      uint64_t v15 = (const void *)(a2 + v14);
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
      id v18 = v7;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v39(v15, 1, v16))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(_DWORD *)(a1 + v40[10]) = *(_DWORD *)(a2 + v40[10]);
      uint64_t v31 = v40[11];
      uint64_t v32 = (void *)(a1 + v31);
      uint64_t v33 = (const void *)(a2 + v31);
      uint64_t v34 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      uint64_t v37 = v40 + 12;
    }
    else
    {
      id v20 = *(void **)a2;
      uint64_t v21 = *(void **)(a2 + 8);
      char v22 = *(unsigned char *)(a2 + 16);
      outlined copy of ImageSource(*(void **)a2, v21, v22);
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v21;
      *(unsigned char *)(a1 + 16) = v22;
      *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v23 = type metadata accessor for ImageInfo(0);
      uint64_t v24 = *(int *)(v23 + 28);
      uint64_t v25 = (void *)(a1 + v24);
      uint64_t v26 = (const void *)(a2 + v24);
      uint64_t v27 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_bridgeObjectRetain();
      if (v29(v26, 1, v27))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v37 = (int *)(v23 + 32);
    }
    *(unsigned char *)(a1 + *v37) = *(unsigned char *)(a2 + *v37);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for ScreenContent(uint64_t a1)
{
  return type metadata accessor for CallEmergencyServicesTool(a1, (uint64_t *)&type metadata singleton initialization cache for ScreenContent);
}

uint64_t initializeWithTake for ScreenContent(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    uint64_t v5 = (int *)type metadata accessor for DocumentInfo(0);
    *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
    *(void *)(a1 + v5[6]) = *(void *)(a2 + v5[6]);
    *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
    *(_OWORD *)(a1 + v5[8]) = *(_OWORD *)(a2 + v5[8]);
    uint64_t v6 = v5[9];
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    *(_DWORD *)(a1 + v5[10]) = *(_DWORD *)(a2 + v5[10]);
    uint64_t v19 = v5[11];
    id v20 = (void *)(a1 + v19);
    uint64_t v21 = (const void *)(a2 + v19);
    uint64_t v22 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    uint64_t v25 = v5 + 12;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    uint64_t v12 = type metadata accessor for ImageInfo(0);
    uint64_t v13 = *(int *)(v12 + 28);
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (const void *)(a2 + v13);
    uint64_t v16 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v25 = (int *)(v12 + 32);
  }
  *(unsigned char *)(a1 + *v25) = *(unsigned char *)(a2 + *v25);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for ScreenContent(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s26GenerativeAssistantActions13ScreenContentOWOhTm_1(a1, type metadata accessor for ScreenContent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      uint64_t v5 = (int *)type metadata accessor for DocumentInfo(0);
      *(void *)(a1 + v5[5]) = *(void *)(a2 + v5[5]);
      *(void *)(a1 + v5[6]) = *(void *)(a2 + v5[6]);
      *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
      *(_OWORD *)(a1 + v5[8]) = *(_OWORD *)(a2 + v5[8]);
      uint64_t v6 = v5[9];
      uint64_t v7 = (void *)(a1 + v6);
      uint64_t v8 = (const void *)(a2 + v6);
      uint64_t v9 = type metadata accessor for Date();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      *(_DWORD *)(a1 + v5[10]) = *(_DWORD *)(a2 + v5[10]);
      uint64_t v19 = v5[11];
      id v20 = (void *)(a1 + v19);
      uint64_t v21 = (const void *)(a2 + v19);
      uint64_t v22 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      uint64_t v25 = v5 + 12;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      uint64_t v12 = type metadata accessor for ImageInfo(0);
      uint64_t v13 = *(int *)(v12 + 28);
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (const void *)(a2 + v13);
      uint64_t v16 = type metadata accessor for OnScreenContent.UIMetadata();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      uint64_t v25 = (int *)(v12 + 32);
    }
    *(unsigned char *)(a1 + *v25) = *(unsigned char *)(a2 + *v25);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ScreenContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ScreenContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for ScreenContent()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ScreenContent()
{
  uint64_t result = type metadata accessor for ImageInfo(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DocumentInfo(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for ImageInfo(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    outlined copy of ImageSource(*a2, v8, v9);
    *(void *)a1 = v7;
    *((void *)a1 + 1) = v8;
    a1[16] = v9;
    a1[17] = *((unsigned char *)a2 + 17);
    uint64_t v10 = a2[4];
    *((void *)a1 + 3) = a2[3];
    *((void *)a1 + 4) = v10;
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = &a1[v11];
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    a1[*(int *)(a3 + 32)] = *((unsigned char *)a2 + *(int *)(a3 + 32));
  }
  return a1;
}

uint64_t destroy for ImageInfo(uint64_t a1, uint64_t a2)
{
  outlined consume of ImageSource(*(void **)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for ImageInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of ImageSource(*(void **)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 32)) = *(unsigned char *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithCopy for ImageInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of ImageSource(*(void **)a2, v7, v8);
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void **)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of ImageSource(v9, v10, v11);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  *(unsigned char *)(a1 + *(int *)(a3 + 32)) = *(unsigned char *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t initializeWithTake for ImageInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 32)) = *(unsigned char *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for ImageInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void **)a1;
  char v8 = *(void **)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of ImageSource(v7, v8, v9);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(unsigned char *)(a1 + *(int *)(a3 + 32)) = *(unsigned char *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24FA352CC);
}

uint64_t sub_24FA352CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 28);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ImageInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24FA353A0);
}

uint64_t sub_24FA353A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 32) = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    char v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for ImageInfo()
{
  type metadata accessor for OnScreenContent.UIMetadata?(319, &lazy cache variable for type metadata for OnScreenContent.UIMetadata?, MEMORY[0x263F4CF00]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for DocumentInfo(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(void *)((char *)a1 + v8) = v10;
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    uint64_t v13 = (void *)((char *)a1 + v11);
    uint64_t v14 = (void *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (void *)((char *)a1 + v12);
    int v17 = (void *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[9];
    __dst = (char *)a1 + v19;
    uint64_t v32 = (char *)a2 + v19;
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    id v22 = v10;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33(v32, 1, v20))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, v32, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v32, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    uint64_t v25 = a3[11];
    *(_DWORD *)((char *)a1 + a3[10]) = *(_DWORD *)((char *)a2 + a3[10]);
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for OnScreenContent.UIMetadata();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  }
  return a1;
}

uint64_t destroy for DocumentInfo(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[9];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + a2[11];
  uint64_t v9 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    return v11(v8, v9);
  }
  return result;
}

uint64_t initializeWithCopy for DocumentInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v10);
  uint64_t v13 = (void *)(a2 + v10);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = (void *)(a1 + v11);
  uint64_t v16 = (void *)(a2 + v11);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = a3[9];
  __dst = (void *)(a1 + v18);
  uint64_t v33 = a3;
  uint64_t v19 = (const void *)(a2 + v18);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  id v22 = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31(v19, 1, v20))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(__dst, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
  }
  uint64_t v24 = v33[11];
  *(_DWORD *)(a1 + v33[10]) = *(_DWORD *)(a2 + v33[10]);
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(unsigned char *)(a1 + v33[12]) = *(unsigned char *)(a2 + v33[12]);
  return a1;
}

uint64_t assignWithCopy for DocumentInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  id v10 = v9;

  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  void *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  id v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v18, v19, v20);
LABEL_7:
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 24))(v27, v28, v29);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v27, v28, v29);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
LABEL_13:
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for DocumentInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[9];
  id v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for DocumentInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  uint64_t v9 = a3[7];
  id v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *id v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  int v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_7:
  uint64_t v28 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  uint64_t v31 = type metadata accessor for OnScreenContent.UIMetadata();
  uint64_t v32 = *(void *)(v31 - 8);
  int v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 40))(v29, v30, v31);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    memcpy(v29, v30, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v32 + 32))(v29, v30, v31);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
LABEL_13:
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24FA3663C);
}

uint64_t sub_24FA3663C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[7] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[9];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[11];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24FA367DC);
}

uint64_t sub_24FA367DC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[7] + 8) = (a2 - 1);
    return result;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[9];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OnScreenContent.UIMetadata?);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[11];
  return v16(v18, a2, a2, v17);
}

void type metadata completion function for DocumentInfo()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for OnScreenContent.UIMetadata?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for OnScreenContent.UIMetadata?(319, &lazy cache variable for type metadata for OnScreenContent.UIMetadata?, MEMORY[0x263F4CF00]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for OnScreenContent.UIMetadata?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with take of DocumentInfo(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s26GenerativeAssistantActions13ScreenContentOWOcTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type OnScreenContent.UIMetadata and conformance OnScreenContent.UIMetadata(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void destroy for ImageSource(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ImageSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ImageSource(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ImageSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ImageSource(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ImageSource(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ImageSource(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  unint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ImageSource(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ImageSource()
{
  return &type metadata for ImageSource;
}

uint64_t getEnumTagSinglePayload for ContentRequestErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContentRequestErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24FA36EA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentRequestErrors()
{
  return &type metadata for ContentRequestErrors;
}

unint64_t ContentRequestErrors.NSLocalizedDescriptionKey.getter(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 5:
      unint64_t result = 0xD000000000000047;
      break;
    case 6:
      unint64_t result = 0xD000000000000026;
      break;
    case 7:
      unint64_t result = 0xD000000000000028;
      break;
    case 8:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000027;
      break;
    case 10:
      unint64_t result = 0xD000000000000022;
      break;
    case 11:
      unint64_t result = 0xD000000000000035;
      break;
    case 12:
      unint64_t result = 0xD000000000000020;
      break;
    case 13:
      unint64_t result = 0xD000000000000035;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t ContentRequestErrors.errorUserInfo.getter(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24FA3E1D0;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x800000024FA41EF0;
  unint64_t v3 = ContentRequestErrors.NSLocalizedDescriptionKey.getter(a1);
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v4;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance ContentRequestErrors()
{
  uint64_t v0 = static ContentRequestErrors.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance ContentRequestErrors()
{
  return qword_24FA40BF0[*v0];
}

unint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance ContentRequestErrors()
{
  return ContentRequestErrors.errorUserInfo.getter(*v0);
}

uint64_t protocol witness for Error._domain.getter in conformance ContentRequestErrors(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance ContentRequestErrors(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContentRequestErrors and conformance ContentRequestErrors();
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t dispatch thunk of ContentLoaderProviding.load()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + **(int **)(a3 + 8));
  BOOL v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *BOOL v7 = v3;
  v7[1] = dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  return v9(a1, a2, a3);
}

uint64_t destroy for ContentLoader(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ContentLoader(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ContentLoader(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ContentLoader(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentLoader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentLoader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentLoader()
{
  return &type metadata for ContentLoader;
}

uint64_t ContentLoader.init(featureFlagManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of ModelSessionFactory(a1, (uint64_t)v15);
  outlined init with copy of ModelSessionFactory(a1, (uint64_t)v13);
  type metadata accessor for UIContextClient();
  swift_allocObject();
  uint64_t v4 = UIContextClient.init()();
  *((void *)&v11 + 1) = &type metadata for ScreenLockChecker;
  uint64_t v12 = &protocol witness table for ScreenLockChecker;
  v14[3] = type metadata accessor for ContentLoaderWithContextRetrieval();
  v14[4] = (uint64_t)&protocol witness table for ContentLoaderWithContextRetrieval;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  ContentLoaderWithContextRetrieval.init(featureFlagManager:contextClient:screenLockChecker:)((uint64_t)v13, v4, (uint64_t)&v10, (uint64_t)boxed_opaque_existential_1);
  v13[3] = &type metadata for ContentLoaderWithShortcuts;
  v13[4] = &protocol witness table for ContentLoaderWithShortcuts;
  unsigned int v6 = (void *)swift_allocObject();
  v13[0] = v6;
  outlined init with copy of ModelSessionFactory(a1, (uint64_t)(v6 + 2));
  id v7 = objc_msgSend(self, sel_sharedService);
  v6[11] = &type metadata for ImageLoader;
  v6[12] = &protocol witness table for ImageLoader;
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v8 = specialized ScreenshotLoader.__allocating_init(shortcutsScreenshotProvider:)((uint64_t)&v10);
  v6[16] = type metadata accessor for ScreenshotLoader();
  v6[17] = &protocol witness table for ScreenshotLoader;
  v6[13] = v8;
  v6[7] = v7;
  ContentLoader.init(featureFlagManager:contextRetrievalLoader:shortcutsLoader:)(v15, (uint64_t)v14, (uint64_t)v13, a2);
  return __swift_destroy_boxed_opaque_existential_0(a1);
}

uint64_t ContentLoader.init(featureFlagManager:contextRetrievalLoader:shortcutsLoader:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with copy of ModelSessionFactory((uint64_t)a1, a4);
  if (specialized static ContentLoader.shouldUseContextRetrieval(_:)(a1))
  {
    outlined init with copy of ModelSessionFactory(a2, (uint64_t)v14);
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v10 = v8[2];
    unint64_t v9 = v8[3];
    if (v10 >= v9 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
    }
    long long v8[2] = v10 + 1;
    outlined init with take of ForegroundAppDetecting(v14, (uint64_t)&v8[5 * v10 + 4]);
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  }
  if (specialized static ContentLoader.shouldUseShortcuts(_:)(a1))
  {
    outlined init with copy of ModelSessionFactory(a3, (uint64_t)v14);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    }
    unint64_t v12 = v8[2];
    unint64_t v11 = v8[3];
    if (v12 >= v11 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v8);
    }
    long long v8[2] = v12 + 1;
    outlined init with take of ForegroundAppDetecting(v14, (uint64_t)&v8[5 * v12 + 4]);
  }
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a2);
  uint64_t result = __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  *(void *)(a4 + 40) = v8;
  return result;
}

uint64_t ContentLoader.load()(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation.BufferingPolicy);
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](ContentLoader.load(), 0, 0);
}

uint64_t ContentLoader.load()()
{
  uint64_t v14 = v0;
  if (one-time initialization token for contentLoader != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.contentLoader);
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v13 = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x4C746E65746E6F43, 0xED0000726564616FLL, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2080;
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x292864616F6CLL, 0xE600000000000000, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_24F9A2000, v2, v3, "%s.%s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x25336A180](v5, -1, -1);
    MEMORY[0x25336A180](v4, -1, -1);
  }

  uint64_t v7 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v9 = v0[5];
  uint64_t v8 = v0[6];
  unint64_t v10 = (uint64_t *)v0[4];
  *(void *)(swift_task_alloc() + 16) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ScreenContent]);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, *MEMORY[0x263F8F580], v8);
  v10[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>);
  v10[4] = lazy protocol witness table accessor for type AsyncStream<[ScreenContent]> and conformance AsyncStream<A>();
  __swift_allocate_boxed_opaque_existential_1(v10);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t closure #1 in ContentLoader.load()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  outlined init with copy of ContentLoader(a2, (uint64_t)v16);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v13 = (_OWORD *)(v12 + ((v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  long long v14 = v16[1];
  *uint64_t v13 = v16[0];
  v13[1] = v14;
  v13[2] = v16[2];
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ContentLoader.load(), v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ContentLoader.load()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ContentLoader.load(), 0, 0);
}

uint64_t closure #1 in closure #1 in ContentLoader.load()()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  unint64_t v2 = (void *)swift_task_alloc();
  v0[2].i64[1] = (uint64_t)v2;
  *unint64_t v2 = v0;
  v2[1] = closure #1 in closure #1 in ContentLoader.load();
  return MEMORY[0x270FA22B8]();
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ContentLoader.load(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  AsyncStream.Continuation.finish()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in closure #1 in ContentLoader.load()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a3;
  v4[16] = a4;
  v4[14] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  v4[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[18] = v6;
  v4[19] = *(void *)(v6 + 64);
  v4[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #1 in ContentLoader.load(), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in ContentLoader.load()()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 120) + 40);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    int v26 = (long long *)(v0 + 16);
    uint64_t v3 = v1 + 32;
    uint64_t v25 = *(void *)(v0 + 144);
    uint64_t v4 = type metadata accessor for TaskPriority();
    uint64_t v5 = *(void *)(v4 - 8);
    int v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    uint64_t v23 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v22 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v27 = v2;
      uint64_t v7 = *(void *)(v0 + 176);
      uint64_t v28 = *(void *)(v0 + 168);
      uint64_t v8 = *(void *)(v0 + 160);
      uint64_t v10 = *(void *)(v0 + 128);
      uint64_t v9 = *(void *)(v0 + 136);
      v24(v7, 1, 1, v4);
      outlined init with copy of ModelSessionFactory(v3, (uint64_t)v26);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v8, v10, v9);
      unint64_t v11 = (*(unsigned __int8 *)(v25 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      outlined init with take of ForegroundAppDetecting(v26, v12 + 32);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(v12 + v11, v8, v9);
      outlined init with copy of TaskPriority?(v7, v28);
      int v13 = (*v23)(v28, 1, v4);
      uint64_t v14 = *(void *)(v0 + 168);
      if (v13 == 1)
      {
        outlined destroy of TaskPriority?(*(void *)(v0 + 168));
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v22)(v14, v4);
      }
      if (*(void *)(v12 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v17 = v16;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v17 = 0;
      }
      uint64_t v18 = **(void **)(v0 + 112);
      uint64_t v19 = v17 | v15;
      if (v17 | v15)
      {
        uint64_t v19 = v0 + 56;
        *(void *)(v0 + 56) = 0;
        *(void *)(v0 + 64) = 0;
        *(void *)(v0 + 72) = v15;
        *(void *)(v0 + 80) = v17;
      }
      uint64_t v6 = *(void *)(v0 + 176);
      *(void *)(v0 + 88) = 1;
      *(void *)(v0 + 96) = v19;
      *(void *)(v0 + 104) = v18;
      swift_task_create();
      swift_release();
      outlined destroy of TaskPriority?(v6);
      v3 += 40;
      uint64_t v2 = v27 - 1;
    }
    while (v27 != 1);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[25] = a4;
  v5[26] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation.YieldResult);
  v5[27] = v6;
  v5[28] = *(void *)(v6 - 8);
  v5[29] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v5[30] = v7;
  v5[31] = *(void *)(v7 - 8);
  v5[32] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load(), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load()()
{
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load();
  return v6(v0 + 56, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load();
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load();
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = v0[10];
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = swift_task_alloc();
  (*(void (**)(uint64_t, void *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 7));
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[35] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load();
  return MEMORY[0x270FA1E88](v0 + 22, 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DynamicType;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t type;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  int v34 = v0;
  uint64_t v1 = v0[22];
  uint64_t v2 = (uint64_t)(v0 + 2);
  if (v1)
  {
    if (one-time initialization token for contentLoader != -1) {
      swift_once();
    }
    uint64_t v3 = v0[25];
    uint64_t v5 = v0[31];
    uint64_t v4 = v0[32];
    uint64_t v6 = v0[30];
    uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.contentLoader);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    outlined init with copy of ModelSessionFactory(v3, (uint64_t)(v0 + 12));
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    type = static os_log_type_t.debug.getter();
    uint64_t v9 = os_log_type_enabled(v8, type);
    uint64_t v10 = v0[31];
    unint64_t v11 = v0[32];
    uint64_t v12 = v0[30];
    if (v9)
    {
      uint64_t v31 = v0[30];
      uint64_t v30 = v0[32];
      int v13 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      int v33 = v29;
      *(_DWORD *)int v13 = 136315906;
      v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x4C746E65746E6F43, 0xED0000726564616FLL, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2080;
      v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x292864616F6CLL, 0xE600000000000000, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 22) = 2080;
      __swift_project_boxed_opaque_existential_1(v0 + 12, v0[15]);
      DynamicType = swift_getDynamicType();
      uint64_t v15 = v0[16];
      v0[17] = DynamicType;
      v0[18] = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContentLoaderProviding.Type);
      uint64_t v16 = String.init<A>(describing:)();
      v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
      *(_WORD *)(v13 + 32) = 2080;
      uint64_t v2 = (uint64_t)(v0 + 2);
      uint64_t v18 = type metadata accessor for ScreenContent(0);
      uint64_t v19 = swift_bridgeObjectRetain();
      uint64_t v20 = MEMORY[0x253369370](v19, v18);
      uint64_t v22 = v21;
      swift_bridgeObjectRelease();
      v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24F9A2000, v8, type, "%s.%s contents obtained with %s: %s", (uint8_t *)v13, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x25336A180](v29, -1, -1);
      MEMORY[0x25336A180](v13, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v30, v31);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 12));
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    }
    int v26 = v0[28];
    uint64_t v25 = v0[29];
    uint64_t v27 = v0[27];
    v0[19] = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    __swift_mutable_project_boxed_opaque_existential_1(v2, v0[5]);
    uint64_t v28 = (void *)swift_task_alloc();
    v0[35] = v28;
    *uint64_t v28 = v0;
    v28[1] = closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load();
    return MEMORY[0x270FA1E88](v0 + 22, 0, 0);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)(v0 + 2));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t protocol witness for ContentLoaderProviding.load() in conformance ContentLoader(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return ContentLoader.load()(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t partial apply for closure #1 in ContentLoader.load()(uint64_t a1)
{
  return closure #1 in ContentLoader.load()(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of ContentLoader(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_24FA3941C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + v6);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v6 + 48, v5);
}

uint64_t partial apply for closure #1 in closure #1 in ContentLoader.load()()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation)
                 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  _OWORD v6[2] = v4;
  v6[3] = v5;
  v6[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in ContentLoader.load(), 0, 0);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24FA39688()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ContentLoader.load()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = partial apply for closure #1 in closure #1 in ContentLoaderWithContextRetrieval.load();
  return closure #1 in closure #1 in closure #1 in ContentLoader.load()(a1, a2, v7, v6);
}

uint64_t sub_24FA3982C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v0 + 32);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load()(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<[ScreenContent]>.Continuation)
                 - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + 32;
  uint64_t v8 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = dispatch thunk of ModelSession.registerDocument(_:fileSource:fileName:fileMimeType:websiteURL:uploadProgressCallback:);
  return closure #1 in closure #1 in closure #1 in closure #1 in ContentLoader.load()(a1, v5, v6, v7, v8);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24FA39A6C()
{
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);

  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  __swift_destroy_boxed_opaque_existential_0(v0 + 104);
  return MEMORY[0x270FA0238](v0, 144, 7);
}

uint64_t specialized static ContentLoader.shouldUseContextRetrieval(_:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  char v2 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isEntitySupportWithContextRetrievalEnabled.getter();
  outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v9);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
    outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v8);
LABEL_4:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
    outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v7);
    goto LABEL_5;
  }
  __swift_project_boxed_opaque_existential_1(v9, v9[3]);
  char v3 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v8);
  if (v3) {
    goto LABEL_4;
  }
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  char v6 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isDocumentSupportWithContextRetrievalEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v7);
  if ((v6 & 1) == 0)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    char v4 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isSnapshotSupportWithContextRetrievalEnabled.getter();
    goto LABEL_6;
  }
LABEL_5:
  char v4 = 1;
LABEL_6:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
  return v4 & 1;
}

uint64_t specialized static ContentLoader.shouldUseShortcuts(_:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  char v2 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isEntitySupportWithContextRetrievalEnabled.getter();
  outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v9);
  if ((v2 & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
    outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v8);
    goto LABEL_6;
  }
  __swift_project_boxed_opaque_existential_1(v9, v9[3]);
  char v3 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v8);
  if ((v3 & 1) == 0)
  {
LABEL_6:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
    outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v7);
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  char v4 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isDocumentSupportWithContextRetrievalEnabled.getter();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  outlined init with copy of ModelSessionFactory((uint64_t)a1, (uint64_t)v7);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    char v5 = 1;
    goto LABEL_8;
  }
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  char v5 = dispatch thunk of GenerativeAssistantFeatureFlagManaging.isSnapshotSupportWithContextRetrievalEnabled.getter() ^ 1;
LABEL_8:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
  return v5 & 1;
}

uint64_t static SnippetPluginUtils.createConfirmationContainer(payload:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IntentViewOptions();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = type metadata accessor for AttachmentConfirmationPayload();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for GenerativeResultModels();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  GenerativeMediaConfirmationSnippetModel.init(payload:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F40880], v7);
  lazy protocol witness table accessor for type GenerativeResultModels and conformance GenerativeResultModels();
  SnippetPluginModel.data.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static GenerativeResultModels.bundleName.getter();
  IntentViewOptions.init(canReplacePrintableText:)();
  return SnippetPluginContainer.init(data:bundleIdentifier:intentViewOptions:)();
}

uint64_t static SnippetPluginUtils.createRichTextResultContainer(results:provider:disclaimer:attributions:punchOutURL:criticalDisclaimers:modelDisclaimer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = v14;
  v8[11] = v15;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  void v8[4] = a3;
  v8[5] = a4;
  long long v8[2] = a1;
  v8[3] = a2;
  type metadata accessor for IntentViewOptions();
  v8[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Attribution();
  v8[13] = v9;
  v8[14] = *(void *)(v9 - 8);
  v8[15] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for GenerativeResultModels();
  unsigned char v8[16] = v10;
  v8[17] = *(void *)(v10 - 8);
  v8[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelDisclaimer?);
  v8[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v8[20] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for GenerativeRichTextResultSnippetModel();
  v8[21] = v11;
  v8[22] = *(void *)(v11 - 8);
  v8[23] = swift_task_alloc();
  return MEMORY[0x270FA2498](static SnippetPluginUtils.createRichTextResultContainer(results:provider:disclaimer:attributions:punchOutURL:criticalDisclaimers:modelDisclaimer:), 0, 0);
}

uint64_t static SnippetPluginUtils.createRichTextResultContainer(results:provider:disclaimer:attributions:punchOutURL:criticalDisclaimers:modelDisclaimer:)()
{
  uint64_t v1 = v0[8];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[14];
    uint64_t v19 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v4 = v1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Attribution.init(displayUrl:url:)();
      unint64_t v6 = *(void *)(v19 + 16);
      unint64_t v5 = *(void *)(v19 + 24);
      if (v6 >= v5 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
      }
      uint64_t v7 = v0[15];
      uint64_t v8 = v0[13];
      *(void *)(v19 + 16) = v6 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v19+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v6, v7, v8);
      v4 += 32;
      --v2;
    }
    while (v2);
  }
  uint64_t v16 = v0[22];
  uint64_t v17 = v0[21];
  uint64_t v9 = v0[19];
  uint64_t v14 = v0[23];
  uint64_t v15 = v0[18];
  uint64_t v10 = v0[17];
  uint64_t v18 = v0[16];
  uint64_t v11 = v0[11];
  outlined init with copy of OnScreenContent.UIMetadata?(v0[9], v0[20], &demangling cache variable for type metadata for URL?);
  outlined init with copy of OnScreenContent.UIMetadata?(v11, v9, &demangling cache variable for type metadata for ModelDisclaimer?);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  GenerativeRichTextResultSnippetModel.init(results:contentProviderName:contentDisclaimer:attributions:punchOutURL:criticalDisclaimers:modelDisclaimer:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v15, *MEMORY[0x263F40888], v18);
  lazy protocol witness table accessor for type GenerativeResultModels and conformance GenerativeResultModels();
  SnippetPluginModel.data.getter();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v15, v18);
  static GenerativeResultModels.bundleName.getter();
  IntentViewOptions.init(canReplacePrintableText:)();
  SnippetPluginContainer.init(data:bundleIdentifier:intentViewOptions:)();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t SnippetPluginUtils.deinit()
{
  return v0;
}

uint64_t SnippetPluginUtils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SnippetPluginUtils()
{
  return self;
}

uint64_t method lookup function for SnippetPluginUtils(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SnippetPluginUtils);
}

unint64_t lazy protocol witness table accessor for type GenerativeResultModels and conformance GenerativeResultModels()
{
  unint64_t result = lazy protocol witness table cache variable for type GenerativeResultModels and conformance GenerativeResultModels;
  if (!lazy protocol witness table cache variable for type GenerativeResultModels and conformance GenerativeResultModels)
  {
    type metadata accessor for GenerativeResultModels();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenerativeResultModels and conformance GenerativeResultModels);
  }
  return result;
}

uint64_t static ConfirmationButtonActionUtils.getMediaConfirmationButtonActions()()
{
  return static ConfirmationButtonActionUtils.getMediaConfirmationButtonActions()(&one-time initialization token for mediaConfirmationButtonText, (uint64_t)static ConfirmationText.mediaConfirmationButtonText);
}

uint64_t static ConfirmationButtonActionUtils.getEnablementButtonActions()()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)&v12 - v5;
  if (one-time initialization token for enablementConfirmationButtonText != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_project_value_buffer(v0, (uint64_t)static ConfirmationText.enablementConfirmationButtonText);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v8(v6, v7, v0);
  if (one-time initialization token for userResponseAcceptValues != -1) {
    swift_once();
  }
  if (one-time initialization token for enablementDeclineButtonText != -1) {
    swift_once();
  }
  uint64_t v9 = __swift_project_value_buffer(v0, (uint64_t)static ConfirmationText.enablementDeclineButtonText);
  v8(v4, v9, v0);
  if (one-time initialization token for userResponseDeclineValues != -1) {
    swift_once();
  }
  static ConfirmationActionName.custom(acceptLabel:acceptAlternatives:denyLabel:denyAlternatives:destructive:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  return ((uint64_t (*)(char *, uint64_t))v10)(v6, v0);
}

uint64_t static ConfirmationButtonActionUtils.getTextConfirmationButtonActions()()
{
  return static ConfirmationButtonActionUtils.getMediaConfirmationButtonActions()(&one-time initialization token for textCreationConfirmationButtonText, (uint64_t)static ConfirmationText.textCreationConfirmationButtonText);
}

uint64_t static ConfirmationButtonActionUtils.getMediaConfirmationButtonActions()(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v4, a2);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, v11, v4);
  if (one-time initialization token for userResponseAcceptValues != -1) {
    swift_once();
  }
  if (one-time initialization token for declineButtonText != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v4, (uint64_t)static ConfirmationText.declineButtonText);
  v12(v8, v13, v4);
  if (one-time initialization token for userResponseDeclineValues != -1) {
    swift_once();
  }
  static ConfirmationActionName.custom(acceptLabel:acceptAlternatives:denyLabel:denyAlternatives:destructive:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  return ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
}

ValueMetadata *type metadata accessor for ConfirmationButtonActionUtils()
{
  return &type metadata for ConfirmationButtonActionUtils;
}

uint64_t AutoBugCaptureHelper.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AutoBugCaptureHelper()
{
  return self;
}

uint64_t Overridable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + 40) == 1) {
    return (*(uint64_t (**)(void))(v2 + 24))(*(void *)v2);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
  return v4(a2, 1, 1);
}

uint64_t type metadata instantiation function for Overridable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t destroy for Overridable(id *a1)
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for Overridable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Overridable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Overridable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Overridable(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Overridable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for Overridable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return closure #1 in Overridable<A>.init(key:)(a1, a2, a3, a4);
}

{
  return closure #1 in Overridable<A>.init(key:)(a1, a2, a3, a4);
}

{
  void *v6;
  id v7;
  uint64_t result;
  char v9;
  _OWORD v10[2];
  unsigned char v11[24];
  uint64_t v12;

  id v6 = (void *)MEMORY[0x2533691D0](a2, a3);
  uint64_t v7 = objc_msgSend(a1, sel_valueForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    unint64_t result = swift_dynamicCast();
    if ((result & 1) == 0) {
      *(void *)a4 = 0;
    }
    uint64_t v9 = result ^ 1;
  }
  else
  {
    unint64_t result = outlined destroy of Any?((uint64_t)v11);
    *(void *)a4 = 0;
    uint64_t v9 = 1;
  }
  *(unsigned char *)(a4 + 8) = v9;
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in Overridable<A>.init(key:defaultValue:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v6 = (void *)MEMORY[0x2533691D0](a2, a3);
  id v7 = objc_msgSend(a1, sel_valueForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    uint64_t result = outlined destroy of Any?((uint64_t)v10);
    goto LABEL_8;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_8:
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

uint64_t closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  id v6 = (void *)MEMORY[0x2533691D0](a2, a3);
  id v7 = objc_msgSend(a1, sel_valueForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    uint64_t result = outlined destroy of Any?((uint64_t)v10);
    goto LABEL_8;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
LABEL_8:
  }
    *a4 = 2;
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t AppIntent.systemContext.getter()
{
  return MEMORY[0x270EE0CB8]();
}

uint64_t IntentDialog.init(identifier:templateDirectoryURL:parameters:)()
{
  return MEMORY[0x270EE0E60]();
}

uint64_t IntentDialog.init(full:supporting:)()
{
  return MEMORY[0x270EE0E78]();
}

uint64_t type metadata accessor for IntentDialog()
{
  return MEMORY[0x270EE0E88]();
}

uint64_t static IntentResult.result<>(pluginContainer:dialog:)()
{
  return MEMORY[0x270EE0F58]();
}

uint64_t static IntentResult.result<>(dialog:)()
{
  return MEMORY[0x270EE0FA8]();
}

uint64_t IntentViewOptions.init(canReplacePrintableText:)()
{
  return MEMORY[0x270EE15D0]();
}

uint64_t type metadata accessor for IntentViewOptions()
{
  return MEMORY[0x270EE15D8]();
}

uint64_t type metadata accessor for IntentSystemContext.AssistantContext.InteractionMode()
{
  return MEMORY[0x270EE16C0]();
}

uint64_t IntentSystemContext.AssistantContext.interactionMode.getter()
{
  return MEMORY[0x270EE16C8]();
}

uint64_t IntentSystemContext.AssistantContext.sessionIdentifier.getter()
{
  return MEMORY[0x270EE16D8]();
}

uint64_t type metadata accessor for IntentSystemContext.AssistantContext()
{
  return MEMORY[0x270EE16E8]();
}

uint64_t IntentSystemContext.assistantContext.getter()
{
  return MEMORY[0x270EE16F0]();
}

uint64_t type metadata accessor for IntentSystemContext.InterfaceIdiom()
{
  return MEMORY[0x270EE16F8]();
}

uint64_t type metadata accessor for IntentSystemContext()
{
  return MEMORY[0x270EE1720]();
}

uint64_t static ConfirmationActionName.custom(acceptLabel:acceptAlternatives:denyLabel:denyAlternatives:destructive:)()
{
  return MEMORY[0x270EE19D0]();
}

uint64_t type metadata accessor for ConfirmationActionName()
{
  return MEMORY[0x270EE19E8]();
}

uint64_t SnippetPluginContainer.init(data:bundleIdentifier:intentViewOptions:)()
{
  return MEMORY[0x270EE1AE0]();
}

uint64_t type metadata accessor for SnippetPluginContainer()
{
  return MEMORY[0x270EE1AE8]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x270EEE098]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x270EEE258]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x270EEE618]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x270EEE688]();
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)()
{
  return MEMORY[0x270EEF128]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x270EEF830]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t LocalizedStringResource.init(stringLiteral:)()
{
  return MEMORY[0x270EEF868]();
}

uint64_t LocalizedStringResource.init(stringInterpolation:)()
{
  return MEMORY[0x270EEF888]();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return MEMORY[0x270EEF8C0]();
}

uint64_t URL.pathExtension.getter()
{
  return MEMORY[0x270EEFC48]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x270EEFC58]();
}

uint64_t URL.pathComponents.getter()
{
  return MEMORY[0x270EEFC70]();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return MEMORY[0x270EEFCA0]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x270EEFCB0]();
}

uint64_t URL.debugDescription.getter()
{
  return MEMORY[0x270EEFCB8]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x270EEFCE0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x270EEFD78]();
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x270EEFDF0]();
}

uint64_t URL.withUnsafeFileSystemRepresentation<A>(_:)()
{
  return MEMORY[0x270EEFE00]();
}

Swift::Void __swiftcall URL.stopAccessingSecurityScopedResource()()
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEFE20]();
}

Swift::Bool __swiftcall URL.startAccessingSecurityScopedResource()()
{
  return MEMORY[0x270EEFE38]();
}

uint64_t URL.host.getter()
{
  return MEMORY[0x270EEFE60]();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = MEMORY[0x270EEFE68](percentEncoded);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return MEMORY[0x270EEFE80]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x270EEFF00]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x270EEFFC8]();
}

uint64_t Data.Deallocator._deallocator.getter()
{
  return MEMORY[0x270EEFFE0]();
}

uint64_t type metadata accessor for Data.Deallocator()
{
  return MEMORY[0x270EEFFE8]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x270EF0070]();
}

uint64_t Data.debugDescription.getter()
{
  return MEMORY[0x270EF0118]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0178]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x270EF01C0]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0BA8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t static URLError.fileDoesNotExist.getter()
{
  return MEMORY[0x270EF1620]();
}

uint64_t type metadata accessor for URLError.Code()
{
  return MEMORY[0x270EF16A8]();
}

uint64_t SnippetPluginModel.data.getter()
{
  return MEMORY[0x270F739E0]();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return MEMORY[0x270FA11F8]();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return MEMORY[0x270FA1208]();
}

uint64_t ObservationRegistrar.init()()
{
  return MEMORY[0x270FA1238]();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return MEMORY[0x270FA1250]();
}

uint64_t static FeatureStoreService.insert<A>(interactionId:item:)()
{
  return MEMORY[0x270F286C0]();
}

uint64_t type metadata accessor for FeatureStoreService()
{
  return MEMORY[0x270F286C8]();
}

uint64_t static Catalog.Resource.TokenInputDenyList.GenerativeAssistantKnowledgeInputDenyList()()
{
  return MEMORY[0x270F4B9E0]();
}

uint64_t static Catalog.Resource.TokenInputDenyList.GenerativeAssistantCompositionInputDenyList()()
{
  return MEMORY[0x270F4B9F8]();
}

uint64_t static Catalog.Resource.TokenInputDenyList.GenerativeAssistantMediaQAInputDenyList()()
{
  return MEMORY[0x270F4BA00]();
}

uint64_t static Catalog.Resource.TokenInputDenyList.GenerativeAssistantKnowledgeFallbackInputDenyList()()
{
  return MEMORY[0x270F4BA18]();
}

uint64_t static Catalog.Resource.TokenOutputDenyList.GenerativeAssistantKnowledgeOutputDenyList()()
{
  return MEMORY[0x270F4BA50]();
}

uint64_t static Catalog.Resource.TokenOutputDenyList.GenerativeAssistantCompositionOutputDenyList()()
{
  return MEMORY[0x270F4BA68]();
}

uint64_t static Catalog.Resource.TokenOutputDenyList.GenerativeAssistantMediaQAOutputDenyList()()
{
  return MEMORY[0x270F4BA78]();
}

uint64_t static Catalog.Resource.TokenOutputDenyList.GenerativeAssistantKnowledgeFallbackOutputDenyList()()
{
  return MEMORY[0x270F4BAA8]();
}

uint64_t static Catalog.Resource.LLM.Model.ChatGPT()()
{
  return MEMORY[0x270F4BAE0]();
}

uint64_t TokenStream.events.getter()
{
  return MEMORY[0x270F7EBB0]();
}

uint64_t static CachePolicy.inMemory.getter()
{
  return MEMORY[0x270F7EC48]();
}

uint64_t type metadata accessor for CachePolicy()
{
  return MEMORY[0x270F7EC50]();
}

uint64_t ModelBundle.init(resource:)()
{
  return MEMORY[0x270F2F838]();
}

uint64_t type metadata accessor for ModelBundle()
{
  return MEMORY[0x270F7EC78]();
}

uint64_t type metadata accessor for PromptCompletion.Annotation.Type()
{
  return MEMORY[0x270F7ED40]();
}

uint64_t PromptCompletion.Annotation.type.getter()
{
  return MEMORY[0x270F7ED48]();
}

uint64_t type metadata accessor for PromptCompletion.Annotation()
{
  return MEMORY[0x270F7ED58]();
}

uint64_t PromptCompletion.candidates.getter()
{
  return MEMORY[0x270F7ED60]();
}

uint64_t PromptCompletion.TextContent.annotations.getter()
{
  return MEMORY[0x270F7ED78]();
}

uint64_t PromptCompletion.TextContent.value.getter()
{
  return MEMORY[0x270F7ED88]();
}

uint64_t type metadata accessor for PromptCompletion.TextContent()
{
  return MEMORY[0x270F7ED90]();
}

uint64_t PromptCompletion.URLCitation.url.getter()
{
  return MEMORY[0x270F7ED98]();
}

uint64_t type metadata accessor for PromptCompletion.URLCitation()
{
  return MEMORY[0x270F7EDA8]();
}

uint64_t type metadata accessor for PromptCompletion.ImageContent()
{
  return MEMORY[0x270F7EDC0]();
}

uint64_t type metadata accessor for PromptCompletion.Content()
{
  return MEMORY[0x270F7EDE0]();
}

uint64_t PromptCompletion.Segment.content.getter()
{
  return MEMORY[0x270F7EDE8]();
}

uint64_t type metadata accessor for PromptCompletion.Segment()
{
  return MEMORY[0x270F7EDF8]();
}

uint64_t PromptCompletion.metadata.getter()
{
  return MEMORY[0x270F7EE00]();
}

uint64_t PromptCompletion.Candidate.metadata.getter()
{
  return MEMORY[0x270F7EE10]();
}

uint64_t PromptCompletion.Candidate.segments.getter()
{
  return MEMORY[0x270F7EE20]();
}

uint64_t type metadata accessor for PromptCompletion.Candidate()
{
  return MEMORY[0x270F7EE38]();
}

uint64_t type metadata accessor for PromptCompletion()
{
  return MEMORY[0x270F7EE40]();
}

uint64_t type metadata accessor for SamplingStrategy()
{
  return MEMORY[0x270F7EE70]();
}

uint64_t SamplingParameters.speculativeSampling.setter()
{
  return MEMORY[0x270F7EE90]();
}

uint64_t SamplingParameters.tokenHealing.setter()
{
  return MEMORY[0x270F7EEB0]();
}

uint64_t SamplingParameters.promptLookupDraftSteps.setter()
{
  return MEMORY[0x270F7EEE8]();
}

uint64_t SamplingParameters.init(strategy:temperature:frequencyPenalty:lengthPenalty:maximumTokens:stopSequences:randomSeed:timeout:)()
{
  return MEMORY[0x270F7EF00]();
}

uint64_t type metadata accessor for SamplingParameters()
{
  return MEMORY[0x270F7EF18]();
}

uint64_t SessionConfiguration.init(identifier:useCaseID:preferredModelBundles:handlesSensitiveData:cachePolicy:onBehalfOf:)()
{
  return MEMORY[0x270F7EF90]();
}

uint64_t type metadata accessor for SessionConfiguration()
{
  return MEMORY[0x270F7EFE8]();
}

{
  return MEMORY[0x270F5C818]();
}

uint64_t type metadata accessor for PromptCompletionStream()
{
  return MEMORY[0x270F7F048]();
}

uint64_t InputDenyListBundle.init<A>(resource:)()
{
  return MEMORY[0x270F2FCC0]();
}

uint64_t type metadata accessor for InputDenyListBundle()
{
  return MEMORY[0x270F2FCC8]();
}

uint64_t OutputDenyListBundle.init<A>(resource:)()
{
  return MEMORY[0x270F2FCD0]();
}

uint64_t type metadata accessor for OutputDenyListBundle()
{
  return MEMORY[0x270F2FCD8]();
}

uint64_t type metadata accessor for StringResponseSanitizer.Guardrails()
{
  return MEMORY[0x270F2FCF8]();
}

uint64_t type metadata accessor for StringResponseSanitizer.DefaultableOverrides()
{
  return MEMORY[0x270F2FD08]();
}

uint64_t type metadata accessor for StringResponseSanitizer.DefaultableGuardrails()
{
  return MEMORY[0x270F2FD10]();
}

uint64_t StringResponseSanitizer.Overrides.init(denyList:)()
{
  return MEMORY[0x270F2FD18]();
}

uint64_t type metadata accessor for StringResponseSanitizer.Overrides()
{
  return MEMORY[0x270F2FD20]();
}

uint64_t StringResponseSanitizer.init(overrides:guardrails:)()
{
  return MEMORY[0x270F2FD28]();
}

uint64_t type metadata accessor for StringResponseSanitizer()
{
  return MEMORY[0x270F2FD40]();
}

uint64_t type metadata accessor for StringRenderedPromptSanitizer.Guardrails()
{
  return MEMORY[0x270F2FD98]();
}

uint64_t type metadata accessor for StringRenderedPromptSanitizer.DefaultableOverrides()
{
  return MEMORY[0x270F2FDA8]();
}

uint64_t type metadata accessor for StringRenderedPromptSanitizer.DefaultableGuardrails()
{
  return MEMORY[0x270F2FDB0]();
}

uint64_t StringRenderedPromptSanitizer.Overrides.init(denyList:)()
{
  return MEMORY[0x270F2FDB8]();
}

uint64_t type metadata accessor for StringRenderedPromptSanitizer.Overrides()
{
  return MEMORY[0x270F2FDC0]();
}

uint64_t StringRenderedPromptSanitizer.init(overrides:guardrails:)()
{
  return MEMORY[0x270F2FDC8]();
}

uint64_t type metadata accessor for StringRenderedPromptSanitizer()
{
  return MEMORY[0x270F2FDD8]();
}

uint64_t Regex.init(_regexString:version:)()
{
  return MEMORY[0x270FA2A68]();
}

uint64_t Regex.Match.output.getter()
{
  return MEMORY[0x270FA2AB8]();
}

uint64_t static GenerativeResultModels.bundleName.getter()
{
  return MEMORY[0x270F2ED58]();
}

uint64_t type metadata accessor for GenerativeResultModels()
{
  return MEMORY[0x270F2ED60]();
}

uint64_t GenerativeRichTextResultSnippetModel.init(results:contentProviderName:contentDisclaimer:attributions:punchOutURL:criticalDisclaimers:modelDisclaimer:)()
{
  return MEMORY[0x270F2ED68]();
}

uint64_t type metadata accessor for GenerativeRichTextResultSnippetModel()
{
  return MEMORY[0x270F2ED70]();
}

uint64_t GenerativeMediaConfirmationSnippetModel.init(payload:)()
{
  return MEMORY[0x270F2ED78]();
}

uint64_t Attachment.isScreenshot.getter()
{
  return MEMORY[0x270F2ED80]();
}

uint64_t type metadata accessor for Attachment.LocalizedName()
{
  return MEMORY[0x270F2ED88]();
}

uint64_t Attachment.init(localizedName:thumbnailImage:file:fileSizeInMB:isScreenshot:)()
{
  return MEMORY[0x270F2ED90]();
}

uint64_t type metadata accessor for Attachment()
{
  return MEMORY[0x270F2ED98]();
}

uint64_t Attribution.init(displayUrl:url:)()
{
  return MEMORY[0x270F2EDA0]();
}

uint64_t type metadata accessor for Attribution()
{
  return MEMORY[0x270F2EDA8]();
}

uint64_t ModelDisclaimer.init(message:displayUrl:url:)()
{
  return MEMORY[0x270F2EDB0]();
}

uint64_t type metadata accessor for ModelDisclaimer()
{
  return MEMORY[0x270F2EDB8]();
}

uint64_t type metadata accessor for RichContentResultSegment()
{
  return MEMORY[0x270F2EDC0]();
}

uint64_t AttachmentConfirmationPayload.init(message:condensedMessage:attachmentRemovedMessage:sessionId:contentName:sourceContentType:sourceContentCreationDate:webpageURL:availableAttachments:userQuery:)()
{
  return MEMORY[0x270F2EDC8]();
}

uint64_t type metadata accessor for AttachmentConfirmationPayload()
{
  return MEMORY[0x270F2EDD0]();
}

uint64_t IntelligenceFile.Attributes.contentType.getter()
{
  return MEMORY[0x270F80B88]();
}

uint64_t IntelligenceFile.Attributes.creationDate.getter()
{
  return MEMORY[0x270F80B98]();
}

uint64_t IntelligenceFile.Attributes.fileSize.getter()
{
  return MEMORY[0x270F80BA0]();
}

uint64_t type metadata accessor for IntelligenceFile.Attributes()
{
  return MEMORY[0x270F80BB0]();
}

uint64_t IntelligenceFile.attributes.getter()
{
  return MEMORY[0x270F80BB8]();
}

uint64_t IntelligenceFile.description.getter()
{
  return MEMORY[0x270F80BC0]();
}

uint64_t type metadata accessor for IntelligenceFile.SandboxExtensionType()
{
  return MEMORY[0x270F80BC8]();
}

uint64_t static IntelligenceFile.== infix(_:_:)()
{
  return MEMORY[0x270F80BD0]();
}

uint64_t IntelligenceFile.data.getter()
{
  return MEMORY[0x270F80BD8]();
}

uint64_t IntelligenceFile.name.getter()
{
  return MEMORY[0x270F80BE0]();
}

uint64_t IntelligenceFile.fileURL.getter()
{
  return MEMORY[0x270F80BE8]();
}

uint64_t IntelligenceFile.init(fileURL:name:attributes:automaticallyDelete:sandboxExtensionType:)()
{
  return MEMORY[0x270F80BF0]();
}

uint64_t type metadata accessor for IntelligenceFile()
{
  return MEMORY[0x270F80BF8]();
}

uint64_t IntelligenceImage.Representation.SizeConstraints.maxPixelWidth.setter()
{
  return MEMORY[0x270F80C20]();
}

uint64_t IntelligenceImage.Representation.SizeConstraints.maxPixelHeight.setter()
{
  return MEMORY[0x270F80C28]();
}

uint64_t IntelligenceImage.Representation.SizeConstraints.longestDimensionMaxPixelLength.setter()
{
  return MEMORY[0x270F80C30]();
}

uint64_t IntelligenceImage.Representation.SizeConstraints.shortestDimensionMaxPixelLength.setter()
{
  return MEMORY[0x270F80C38]();
}

uint64_t IntelligenceImage.Representation.sizeConstraints.modify()
{
  return MEMORY[0x270F80C40]();
}

uint64_t IntelligenceImage.Representation.preferredFormats.setter()
{
  return MEMORY[0x270F80C50]();
}

uint64_t IntelligenceImage.Representation.alwaysStripMetadata.setter()
{
  return MEMORY[0x270F80C60]();
}

uint64_t IntelligenceImage.Representation.lossyCompressionQuality.setter()
{
  return MEMORY[0x270F80C68]();
}

uint64_t static IntelligenceImage.Representation.== infix(_:_:)()
{
  return MEMORY[0x270F80C70]();
}

uint64_t IntelligenceImage.Representation.init()()
{
  return MEMORY[0x270F80C78]();
}

uint64_t type metadata accessor for IntelligenceImage.Representation()
{
  return MEMORY[0x270F80C80]();
}

uint64_t IntelligenceImage.image(for:)()
{
  return MEMORY[0x270F80C90]();
}

uint64_t type metadata accessor for IntelligenceImage()
{
  return MEMORY[0x270F80C98]();
}

uint64_t IntelligenceProcessInfo.isSystemApp.getter()
{
  return MEMORY[0x270F810C8]();
}

uint64_t IntelligenceProcessInfo.bundleIdentifier.getter()
{
  return MEMORY[0x270F810D8]();
}

uint64_t type metadata accessor for IntelligenceProcessInfo()
{
  return MEMORY[0x270F810F8]();
}

uint64_t IntelligenceUserActivity.userActivity.getter()
{
  return MEMORY[0x270F81110]();
}

uint64_t type metadata accessor for IntelligenceUserActivity()
{
  return MEMORY[0x270F81128]();
}

uint64_t static IntelligenceLocalizedStrings.image.getter()
{
  return MEMORY[0x270F81198]();
}

uint64_t UTType.init(mimeType:conformingTo:)()
{
  return MEMORY[0x270FA1680]();
}

uint64_t static UTType.cPlusPlusHeader.getter()
{
  return MEMORY[0x270FA1688]();
}

uint64_t static UTType.cPlusPlusSource.getter()
{
  return MEMORY[0x270FA1690]();
}

uint64_t UTType.identifier.getter()
{
  return MEMORY[0x270FA16A8]();
}

uint64_t static UTType.javaScript.getter()
{
  return MEMORY[0x270FA16C0]();
}

uint64_t static UTType.rubyScript.getter()
{
  return MEMORY[0x270FA16D0]();
}

uint64_t static UTType.tarArchive.getter()
{
  return MEMORY[0x270FA16E0]();
}

uint64_t static UTType.shellScript.getter()
{
  return MEMORY[0x270FA1700]();
}

uint64_t static UTType.pythonScript.getter()
{
  return MEMORY[0x270FA1710]();
}

uint64_t UTType.preferredMIMEType.getter()
{
  return MEMORY[0x270FA1768]();
}

uint64_t static UTType.commaSeparatedText.getter()
{
  return MEMORY[0x270FA1770]();
}

uint64_t static UTType.pdf.getter()
{
  return MEMORY[0x270FA17B8]();
}

uint64_t static UTType.rtf.getter()
{
  return MEMORY[0x270FA17C8]();
}

uint64_t static UTType.xml.getter()
{
  return MEMORY[0x270FA17E0]();
}

uint64_t static UTType.zip.getter()
{
  return MEMORY[0x270FA17E8]();
}

uint64_t static UTType.data.getter()
{
  return MEMORY[0x270FA1800]();
}

uint64_t static UTType.html.getter()
{
  return MEMORY[0x270FA1818]();
}

uint64_t static UTType.jpeg.getter()
{
  return MEMORY[0x270FA1828]();
}

uint64_t static UTType.json.getter()
{
  return MEMORY[0x270FA1830]();
}

uint64_t static UTType.vCard.getter()
{
  return MEMORY[0x270FA1878]();
}

uint64_t static UTType.cHeader.getter()
{
  return MEMORY[0x270FA18A8]();
}

uint64_t static UTType.cSource.getter()
{
  return MEMORY[0x270FA18B0]();
}

uint64_t static UTType.phpScript.getter()
{
  return MEMORY[0x270FA1928]();
}

uint64_t static UTType.plainText.getter()
{
  return MEMORY[0x270FA1930]();
}

uint64_t type metadata accessor for UTType()
{
  return MEMORY[0x270FA1938]();
}

uint64_t UTType.init(_:)()
{
  return MEMORY[0x270FA1948]();
}

uint64_t type metadata accessor for OnScreenContent.Content()
{
  return MEMORY[0x270F3F0A8]();
}

uint64_t OnScreenContent.UIMetadata.nestedRemoteProcesses.getter()
{
  return MEMORY[0x270F3F0C0]();
}

uint64_t OnScreenContent.UIMetadata.Window.appProcess.getter()
{
  return MEMORY[0x270F3F0D0]();
}

uint64_t OnScreenContent.UIMetadata.Window.boundingBox.getter()
{
  return MEMORY[0x270F3F0E0]();
}

uint64_t OnScreenContent.UIMetadata.Window.fractionVisible.getter()
{
  return MEMORY[0x270F3F0F0]();
}

uint64_t OnScreenContent.UIMetadata.Window.intelligenceUserActivity.getter()
{
  return MEMORY[0x270F3F100]();
}

uint64_t OnScreenContent.UIMetadata.Window.isActive.getter()
{
  return MEMORY[0x270F3F118]();
}

uint64_t type metadata accessor for OnScreenContent.UIMetadata.Window()
{
  return MEMORY[0x270F3F120]();
}

uint64_t OnScreenContent.UIMetadata.window.getter()
{
  return MEMORY[0x270F3F138]();
}

uint64_t type metadata accessor for OnScreenContent.UIMetadata()
{
  return MEMORY[0x270F3F140]();
}

uint64_t OnScreenContent.uiMetadata.getter()
{
  return MEMORY[0x270F3F148]();
}

uint64_t type metadata accessor for OnScreenContent.EntityFormat()
{
  return MEMORY[0x270F3F150]();
}

uint64_t OnScreenContent.Image.isSnapshot.getter()
{
  return MEMORY[0x270F3F158]();
}

uint64_t OnScreenContent.Image.image.getter()
{
  return MEMORY[0x270F3F168]();
}

uint64_t OnScreenContent.Image.entity.getter()
{
  return MEMORY[0x270F3F170]();
}

uint64_t type metadata accessor for OnScreenContent.Image()
{
  return MEMORY[0x270F3F178]();
}

uint64_t OnScreenContent.content.getter()
{
  return MEMORY[0x270F3F188]();
}

uint64_t OnScreenContent.Document.paginationInfo.getter()
{
  return MEMORY[0x270F3F190]();
}

uint64_t OnScreenContent.Document.file.getter()
{
  return MEMORY[0x270F3F1A0]();
}

uint64_t OnScreenContent.Document.entity.getter()
{
  return MEMORY[0x270F3F1A8]();
}

uint64_t type metadata accessor for OnScreenContent.Document()
{
  return MEMORY[0x270F3F1B0]();
}

uint64_t type metadata accessor for OnScreenContent()
{
  return MEMORY[0x270F3F1B8]();
}

uint64_t UIContextClient.init()()
{
  return MEMORY[0x270F3F1E0]();
}

uint64_t type metadata accessor for UIContextClient()
{
  return MEMORY[0x270F3F1E8]();
}

uint64_t type metadata accessor for OnScreenContentType()
{
  return MEMORY[0x270F3F308]();
}

uint64_t static OnScreenContentSources.uiHierarchyContent.getter()
{
  return MEMORY[0x270F3F348]();
}

uint64_t static OnScreenContentSources.windowContentGeneratedPDFEnabled.getter()
{
  return MEMORY[0x270F3F350]();
}

uint64_t static OnScreenContentSources.windowContentGeneratedPDFDisabled.getter()
{
  return MEMORY[0x270F3F358]();
}

uint64_t static OnScreenContentSources.appEntities.getter()
{
  return MEMORY[0x270F3F360]();
}

uint64_t static OnScreenContentSources.appWindowSnapshots.getter()
{
  return MEMORY[0x270F3F368]();
}

uint64_t type metadata accessor for OnScreenContentSources()
{
  return MEMORY[0x270F3F370]();
}

uint64_t OnScreenContentRequestParameters.AppEntityFiltering.assistantSchemaKinds.setter()
{
  return MEMORY[0x270F3F3D0]();
}

uint64_t OnScreenContentRequestParameters.appEntityFilteringArgs.modify()
{
  return MEMORY[0x270F3F3E0]();
}

uint64_t OnScreenContentRequestParameters.downscaleWindowSnapshots.setter()
{
  return MEMORY[0x270F3F3F8]();
}

uint64_t OnScreenContentRequestParameters.init(sources:contentTypes:)()
{
  return MEMORY[0x270F3F408]();
}

uint64_t type metadata accessor for OnScreenContentRequestParameters()
{
  return MEMORY[0x270F3F438]();
}

uint64_t GenerativeUsecases.staticString.getter()
{
  return MEMORY[0x270F2E968]();
}

uint64_t type metadata accessor for GenerativeUsecases()
{
  return MEMORY[0x270F2E970]();
}

uint64_t dispatch thunk of GenerativeAssistantRestrictions.isUseCaseAvailable(useCase:)()
{
  return MEMORY[0x270F2E978]();
}

uint64_t GenerativeAssistantFeatureFlagManager.isManageSubscriptionEnabled.getter()
{
  return MEMORY[0x270F2E990]();
}

uint64_t static GenerativeAssistantFeatureFlagManager.instance.getter()
{
  return MEMORY[0x270F2E998]();
}

uint64_t GenerativeAssistantFeatureFlagManager.init()()
{
  return MEMORY[0x270F2E9A0]();
}

uint64_t type metadata accessor for GenerativeAssistantFeatureFlagManager()
{
  return MEMORY[0x270F2E9A8]();
}

uint64_t static GenerativeAssistantRestrictionManager.instance.getter()
{
  return MEMORY[0x270F2E9C0]();
}

uint64_t type metadata accessor for GenerativeAssistantRestrictionManager()
{
  return MEMORY[0x270F2E9C8]();
}

uint64_t dispatch thunk of GenerativeAssistantFeatureFlagManaging.isPromptOverrideEnabled.getter()
{
  return MEMORY[0x270F2E9D0]();
}

uint64_t dispatch thunk of GenerativeAssistantFeatureFlagManaging.isMailPDFConversionEnabled.getter()
{
  return MEMORY[0x270F2E9D8]();
}

uint64_t dispatch thunk of GenerativeAssistantFeatureFlagManaging.isBrowserPDFConversionEnabled.getter()
{
  return MEMORY[0x270F2E9E0]();
}

uint64_t dispatch thunk of GenerativeAssistantFeatureFlagManaging.isLowConfidenceKnowledgeSearchEnabled.getter()
{
  return MEMORY[0x270F2E9E8]();
}

uint64_t dispatch thunk of GenerativeAssistantFeatureFlagManaging.isImageSupportWithContextRetrievalEnabled.getter()
{
  return MEMORY[0x270F2E9F0]();
}

uint64_t dispatch thunk of GenerativeAssistantFeatureFlagManaging.isEntitySupportWithContextRetrievalEnabled.getter()
{
  return MEMORY[0x270F2E9F8]();
}

uint64_t dispatch thunk of GenerativeAssistantFeatureFlagManaging.isLowConfidenceKnowledgeConfirmationEnabled.getter()
{
  return MEMORY[0x270F2EA00]();
}

uint64_t dispatch thunk of GenerativeAssistantFeatureFlagManaging.isDocumentSupportWithContextRetrievalEnabled.getter()
{
  return MEMORY[0x270F2EA08]();
}

uint64_t dispatch thunk of GenerativeAssistantFeatureFlagManaging.isSnapshotSupportWithContextRetrievalEnabled.getter()
{
  return MEMORY[0x270F2EA10]();
}

uint64_t GenerativeAssistantUseCase.rawValue.getter()
{
  return MEMORY[0x270F2EA18]();
}

uint64_t type metadata accessor for GenerativeAssistantUseCase()
{
  return MEMORY[0x270F2EA20]();
}

uint64_t dispatch thunk of MetricsUtils.emitSignpostEvent(_:)()
{
  return MEMORY[0x270F2EA28]();
}

uint64_t dispatch thunk of MetricsUtils.recordSignpostEnd(for:signPostID:)()
{
  return MEMORY[0x270F2EA30]();
}

uint64_t dispatch thunk of MetricsUtils.recordSignpostBegin(for:)()
{
  return MEMORY[0x270F2EA38]();
}

uint64_t static MetricsUtils.shared.getter()
{
  return MEMORY[0x270F2EA40]();
}

uint64_t type metadata accessor for MetricsUtils()
{
  return MEMORY[0x270F2EA48]();
}

uint64_t GATAttachedMediaInfo.init(originalMediaType:originalMediaSizeInKBs:mediaQAUseCase:gatUsecase:processedMediaType:processedMediaSizeInKBs:)()
{
  return MEMORY[0x270F2EA50]();
}

uint64_t type metadata accessor for GATAttachedMediaInfo()
{
  return MEMORY[0x270F2EA58]();
}

uint64_t type metadata accessor for SupportedDocumentType()
{
  return MEMORY[0x270F2EA68]();
}

uint64_t static SessionPersistenceUtils.storedValuesForSession(sessionId:)()
{
  return MEMORY[0x270F2EA78]();
}

uint64_t static SessionPersistenceUtils.didConfirmInMediaSession(sessionId:)()
{
  return MEMORY[0x270F2EA80]();
}

uint64_t static SessionPersistenceUtils.clearStoredValuesForSession()()
{
  return MEMORY[0x270F2EA88]();
}

uint64_t static SessionPersistenceUtils.setSession(forCurrentSession:)()
{
  return MEMORY[0x270F2EA90]();
}

uint64_t static SessionPersistenceUtils.isBackToBackRequest(sessionId:)()
{
  return MEMORY[0x270F2EA98]();
}

uint64_t SessionPersistenceUtils.SessionStoredValues.didRemoveAttachment.getter()
{
  return MEMORY[0x270F2EAA0]();
}

uint64_t SessionPersistenceUtils.SessionStoredValues.didSelectAlternateAttachment.getter()
{
  return MEMORY[0x270F2EAA8]();
}

uint64_t type metadata accessor for SessionPersistenceUtils.SessionStoredValues()
{
  return MEMORY[0x270F2EAB0]();
}

uint64_t static SessionPersistenceUtils.setConfirmation(forTextSession:)()
{
  return MEMORY[0x270F2EAB8]();
}

uint64_t static SessionPersistenceUtils.setConfirmation(forMediaSession:)()
{
  return MEMORY[0x270F2EAC0]();
}

uint64_t CustomErrorWithLocalizedDescription.init(domain:code:errorDescription:)()
{
  return MEMORY[0x270F2EAD0]();
}

uint64_t type metadata accessor for CustomErrorWithLocalizedDescription()
{
  return MEMORY[0x270F2EAD8]();
}

uint64_t static GATError.errorDomain.getter()
{
  return MEMORY[0x270F2EAE0]();
}

uint64_t GATError.logError()()
{
  return MEMORY[0x270F2EAE8]();
}

uint64_t GATError.errorCode.getter()
{
  return MEMORY[0x270F2EAF0]();
}

uint64_t type metadata accessor for GATError()
{
  return MEMORY[0x270F2EAF8]();
}

uint64_t static Signpost.textAssistantHandoffError.getter()
{
  return MEMORY[0x270F2EB00]();
}

uint64_t static Signpost.textAssistantHandoffDuration.getter()
{
  return MEMORY[0x270F2EB08]();
}

uint64_t static Signpost.gmsResultError.getter()
{
  return MEMORY[0x270F2EB10]();
}

uint64_t static Signpost.imageResizeProcess.getter()
{
  return MEMORY[0x270F2EB18]();
}

uint64_t static Signpost.createSessionProcess.getter()
{
  return MEMORY[0x270F2EB20]();
}

uint64_t static Signpost.registerImageProcess.getter()
{
  return MEMORY[0x270F2EB28]();
}

uint64_t static Signpost.sessionCreationError.getter()
{
  return MEMORY[0x270F2EB30]();
}

uint64_t static Signpost.registerDocumentError.getter()
{
  return MEMORY[0x270F2EB38]();
}

uint64_t static Signpost.imageContextConversion.getter()
{
  return MEMORY[0x270F2EB40]();
}

uint64_t static Signpost.loadScreenContentError.getter()
{
  return MEMORY[0x270F2EB48]();
}

uint64_t static Signpost.registerDocumentProcess.getter()
{
  return MEMORY[0x270F2EB50]();
}

uint64_t static Signpost.loadScreenContentProcess.getter()
{
  return MEMORY[0x270F2EB58]();
}

uint64_t static Signpost.documentContextConversion.getter()
{
  return MEMORY[0x270F2EB60]();
}

uint64_t static Signpost.responseGenerationDuration.getter()
{
  return MEMORY[0x270F2EB68]();
}

uint64_t static Signpost.imageContextConversionError.getter()
{
  return MEMORY[0x270F2EB70]();
}

uint64_t static Signpost.userCancelDuringConfirmation.getter()
{
  return MEMORY[0x270F2EB78]();
}

uint64_t static Signpost.contextScreenContentRetrieval.getter()
{
  return MEMORY[0x270F2EB80]();
}

uint64_t static Signpost.documentContextConversionError.getter()
{
  return MEMORY[0x270F2EB88]();
}

uint64_t static Signpost.registerDocumentNeverFinishError.getter()
{
  return MEMORY[0x270F2EB90]();
}

uint64_t static Signpost.waitUserConfirmToContinueDuration.getter()
{
  return MEMORY[0x270F2EB98]();
}

uint64_t static Signpost.lowConfidenceKnowledgeSearchDuration.getter()
{
  return MEMORY[0x270F2EBA0]();
}

uint64_t dispatch thunk of SELFUtils.recordGenerativeRequestEnded()()
{
  return MEMORY[0x270F2EBA8]();
}

uint64_t dispatch thunk of SELFUtils.recordGenerativeRequestFailed(code:domain:)()
{
  return MEMORY[0x270F2EBB0]();
}

uint64_t dispatch thunk of SELFUtils.recordGenerativeRequestStarted(usecase:mediaQAUseCase:llmAgentName:)()
{
  return MEMORY[0x270F2EBB8]();
}

uint64_t dispatch thunk of SELFUtils.gatUsecase.setter()
{
  return MEMORY[0x270F2EBC0]();
}

uint64_t dispatch thunk of SELFUtils.gatMediaInfo.setter()
{
  return MEMORY[0x270F2EBC8]();
}

uint64_t dispatch thunk of SELFUtils.recordRequestFailed(code:domain:)()
{
  return MEMORY[0x270F2EBD0]();
}

uint64_t dispatch thunk of SELFUtils.recordRequestHandoff()()
{
  return MEMORY[0x270F2EBD8]();
}

uint64_t dispatch thunk of SELFUtils.recordRequestCanceled()()
{
  return MEMORY[0x270F2EBE0]();
}

uint64_t dispatch thunk of SELFUtils.recordCreateSessionEnded()()
{
  return MEMORY[0x270F2EBE8]();
}

uint64_t dispatch thunk of SELFUtils.recordImageResizingEnded(processedMediaType:processedMediaSizeInKBs:)()
{
  return MEMORY[0x270F2EBF0]();
}

uint64_t dispatch thunk of SELFUtils.recordRegisterMediaEnded()()
{
  return MEMORY[0x270F2EBF8]();
}

uint64_t dispatch thunk of SELFUtils.recordCreateSessionFailed(code:domain:)()
{
  return MEMORY[0x270F2EC00]();
}

uint64_t dispatch thunk of SELFUtils.recordImageResizingFailed(code:domain:)()
{
  return MEMORY[0x270F2EC08]();
}

uint64_t dispatch thunk of SELFUtils.recordRegisterMediaFailed(code:domain:)()
{
  return MEMORY[0x270F2EC10]();
}

uint64_t dispatch thunk of SELFUtils.recordCreateSessionStarted()()
{
  return MEMORY[0x270F2EC18]();
}

uint64_t dispatch thunk of SELFUtils.recordImageResizingStarted()()
{
  return MEMORY[0x270F2EC20]();
}

uint64_t dispatch thunk of SELFUtils.recordRegisterMediaStarted()()
{
  return MEMORY[0x270F2EC28]();
}

uint64_t dispatch thunk of SELFUtils.recordLoadScreenContentEnded(originalMediaType:originalMediaSizeInKBs:)()
{
  return MEMORY[0x270F2EC30]();
}

uint64_t dispatch thunk of SELFUtils.recordLoadScreenContentFailed(code:domain:)()
{
  return MEMORY[0x270F2EC38]();
}

uint64_t dispatch thunk of SELFUtils.recordLoadScreenContentStarted()()
{
  return MEMORY[0x270F2EC40]();
}

uint64_t dispatch thunk of SELFUtils.generativeResultCharactersCount.setter()
{
  return MEMORY[0x270F2EC48]();
}

uint64_t dispatch thunk of SELFUtils.gatID.getter()
{
  return MEMORY[0x270F2EC50]();
}

uint64_t static SELFUtils.shared.getter()
{
  return MEMORY[0x270F2EC58]();
}

uint64_t type metadata accessor for SELFUtils()
{
  return MEMORY[0x270F2EC60]();
}

uint64_t DocumentResource.init(url:)()
{
  return MEMORY[0x270F2FF18]();
}

uint64_t type metadata accessor for DocumentResource()
{
  return MEMORY[0x270F2FF28]();
}

uint64_t type metadata accessor for DocumentRegistration.Status()
{
  return MEMORY[0x270F2FF60]();
}

uint64_t DocumentRegistration.status.getter()
{
  return MEMORY[0x270F2FF68]();
}

uint64_t DocumentRegistration.Progress.progress.getter()
{
  return MEMORY[0x270F2FF88]();
}

uint64_t type metadata accessor for DocumentRegistration.Progress()
{
  return MEMORY[0x270F2FF90]();
}

uint64_t type metadata accessor for DocumentRegistration()
{
  return MEMORY[0x270F2FFA0]();
}

uint64_t type metadata accessor for DocumentResourceIdentifier()
{
  return MEMORY[0x270F2FFE8]();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsDestination.Origin()
{
  return MEMORY[0x270F2ECB8]();
}

uint64_t GenerativeAssistantSettingsDestination.fullURL(origin:)()
{
  return MEMORY[0x270F2ECC8]();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsDestination()
{
  return MEMORY[0x270F2ECD0]();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsIntentHelper.RequestType()
{
  return MEMORY[0x270F2ECE0]();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsIntentHelper.ResponseType()
{
  return MEMORY[0x270F2ECE8]();
}

uint64_t static GenerativeAssistantSettingsIntentHelper.responseType(for:isExplicitRequest:sessionId:withTamale:)()
{
  return MEMORY[0x270F2ECF0]();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.decrementDecline(for:expirationDate:)()
{
  return MEMORY[0x270F2ECF8]();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.incrementDecline(for:)()
{
  return MEMORY[0x270F2ED00]();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.forcedRateLimitState()()
{
  return MEMORY[0x270F2ED08]();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.logConfirmationCount()()
{
  return MEMORY[0x270F2ED10]();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.taperConfirmationDialog()()
{
  return MEMORY[0x270F2ED18]();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.declineMediaQAExpiration()()
{
  return MEMORY[0x270F2ED20]();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.declineComposeViaSiriExpiration()()
{
  return MEMORY[0x270F2ED28]();
}

uint64_t static GenerativeAssistantSettingsUserDefaults.isEnabled()()
{
  return MEMORY[0x270F2ED30]();
}

uint64_t type metadata accessor for GenerativeAssistantSettingsUserDefaults()
{
  return MEMORY[0x270F2ED38]();
}

uint64_t type metadata accessor for RequestType()
{
  return MEMORY[0x270F2ED48]();
}

uint64_t type metadata accessor for GenerativeError.NetworkingError()
{
  return MEMORY[0x270F2EF40]();
}

uint64_t type metadata accessor for GenerativeError.AvailabilityError.ErrorType()
{
  return MEMORY[0x270F2EFA0]();
}

uint64_t GenerativeError.AvailabilityError.type.getter()
{
  return MEMORY[0x270F2EFA8]();
}

uint64_t type metadata accessor for GenerativeError.AvailabilityError()
{
  return MEMORY[0x270F2EFB0]();
}

uint64_t type metadata accessor for GenerativeError.PromptError.ErrorType()
{
  return MEMORY[0x270F2F078]();
}

uint64_t GenerativeError.PromptError.type.getter()
{
  return MEMORY[0x270F2F080]();
}

uint64_t type metadata accessor for GenerativeError.PromptError()
{
  return MEMORY[0x270F2F088]();
}

uint64_t type metadata accessor for GenerativeError.RuntimeError.ErrorType()
{
  return MEMORY[0x270F2F0F0]();
}

uint64_t GenerativeError.RuntimeError.type.getter()
{
  return MEMORY[0x270F2F0F8]();
}

uint64_t type metadata accessor for GenerativeError.RuntimeError()
{
  return MEMORY[0x270F2F100]();
}

uint64_t type metadata accessor for GenerativeError.ErrorType()
{
  return MEMORY[0x270F2F130]();
}

uint64_t GenerativeError.type.getter()
{
  return MEMORY[0x270F2F140]();
}

uint64_t GenerativeError.errorCode.getter()
{
  return MEMORY[0x270F2F148]();
}

uint64_t type metadata accessor for GenerativeError()
{
  return MEMORY[0x270F2F150]();
}

uint64_t static ToolChoice.automatic.getter()
{
  return MEMORY[0x270F2F1A8]();
}

uint64_t type metadata accessor for ToolChoice()
{
  return MEMORY[0x270F2F1B0]();
}

uint64_t GeneratedValues.extract<A>(field:)()
{
  return MEMORY[0x270F2F1F0]();
}

uint64_t type metadata accessor for GeneratedValues()
{
  return MEMORY[0x270F2F200]();
}

uint64_t Schema.Field.init<A>(name:description:type:)()
{
  return MEMORY[0x270F2F430]();
}

uint64_t type metadata accessor for Schema.Field()
{
  return MEMORY[0x270F2F448]();
}

uint64_t Schema.init(fields:)()
{
  return MEMORY[0x270F2F450]();
}

uint64_t type metadata accessor for Schema()
{
  return MEMORY[0x270F2F458]();
}

uint64_t static ToolType.imageGenerator.getter()
{
  return MEMORY[0x270F2F490]();
}

uint64_t static ToolType.browser.getter()
{
  return MEMORY[0x270F2F4A0]();
}

uint64_t static ToolType.tooling(_:)()
{
  return MEMORY[0x270F2F4A8]();
}

uint64_t type metadata accessor for ToolType()
{
  return MEMORY[0x270F2F4D8]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x270FA2D00]();
}

uint64_t OSSignposter.init(subsystem:category:)()
{
  return MEMORY[0x270FA2D68]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x270FA2D88]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t SessionConfiguration.init(tokenGeneratorConfig:identifier:instructions:templateID:)()
{
  return MEMORY[0x270F5C800]();
}

uint64_t static GenerativeExperiencesSession.retrieveSession(with:reattaching:)()
{
  return MEMORY[0x270F5C9A8]();
}

uint64_t GenerativeExperiencesSession.toolChoice.setter()
{
  return MEMORY[0x270F5C9B0]();
}

uint64_t GenerativeExperiencesSession.init(configuration:)()
{
  return MEMORY[0x270F5C9B8]();
}

Swift::String __swiftcall GenerativeExperiencesSession.sessionIdentifier()()
{
  uint64_t v0 = MEMORY[0x270F5C9C0]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t GenerativeExperiencesSession.registeredDocuments()()
{
  return MEMORY[0x270F5C9C8]();
}

uint64_t GenerativeExperiencesSession.tools.setter()
{
  return MEMORY[0x270F5C9D0]();
}

uint64_t GenerativeExperiencesSession.complete<A>(generating:parameters:promptSanitizer:responseSanitizer:clientRequestID:query:)()
{
  return MEMORY[0x270F5C9D8]();
}

uint64_t GenerativeExperiencesSession.register(documents:)()
{
  return MEMORY[0x270F5C9E0]();
}

uint64_t type metadata accessor for GenerativeExperiencesSession()
{
  return MEMORY[0x270F5C9E8]();
}

uint64_t OpenAIAuthenticator.RateLimitBudgets.isRateLimited.getter()
{
  return MEMORY[0x270F0C1C0]();
}

uint64_t type metadata accessor for OpenAIAuthenticator.RateLimitBudgets()
{
  return MEMORY[0x270F0C1C8]();
}

uint64_t static OpenAIAuthenticator.shared.getter()
{
  return MEMORY[0x270F0C1E8]();
}

uint64_t type metadata accessor for OpenAIAuthenticator()
{
  return MEMORY[0x270F0C210]();
}

uint64_t errno.getter()
{
  return MEMORY[0x270FA2C30]();
}

uint64_t ToolInvocation.init(localToolId:parameterValuesByKey:)()
{
  return MEMORY[0x270F7FA10]();
}

uint64_t type metadata accessor for ToolInvocation()
{
  return MEMORY[0x270F7FA30]();
}

uint64_t dispatch thunk of ToolExecutionSession.endSession()()
{
  return MEMORY[0x270F7FBB8]();
}

uint64_t TypedValue.EnumerationValue.case.getter()
{
  return MEMORY[0x270F7FE58]();
}

uint64_t type metadata accessor for TypedValue.EnumerationValue()
{
  return MEMORY[0x270F7FE70]();
}

uint64_t TypedValue.EntityIdentifierValue.type.getter()
{
  return MEMORY[0x270F7FE90]();
}

uint64_t type metadata accessor for TypedValue.EntityIdentifierValue()
{
  return MEMORY[0x270F7FE98]();
}

uint64_t TypedValue.PrimitiveValue.AppValue.init(bundleIdentifier:displayRepresentation:)()
{
  return MEMORY[0x270F7FF40]();
}

uint64_t type metadata accessor for TypedValue.PrimitiveValue()
{
  return MEMORY[0x270F7FFA8]();
}

uint64_t type metadata accessor for TypedValue.ID()
{
  return MEMORY[0x270F7FFE0]();
}

uint64_t type metadata accessor for TypedValue()
{
  return MEMORY[0x270F80000]();
}

uint64_t type metadata accessor for TypeIdentifier()
{
  return MEMORY[0x270F800F0]();
}

uint64_t type metadata accessor for DisplayRepresentation()
{
  return MEMORY[0x270F80460]();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return MEMORY[0x270FA0988]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x270FA0BC8]();
}

uint64_t ChatMessagePrompt.init(role:prompt:)()
{
  return MEMORY[0x270F58090]();
}

uint64_t type metadata accessor for ChatMessagePrompt()
{
  return MEMORY[0x270F580B8]();
}

uint64_t type metadata accessor for ChatMessagesPrompt()
{
  return MEMORY[0x270F580E8]();
}

uint64_t static ChatMessagesPromptBuilder.buildBlock(_:)()
{
  return MEMORY[0x270F58100]();
}

uint64_t static ChatMessagesPromptBuilder.buildExpression<A>(_:)()
{
  return MEMORY[0x270F58108]();
}

uint64_t static CustomPromptBuilder.buildBlock(_:)()
{
  return MEMORY[0x270F58128]();
}

uint64_t static CustomPromptBuilder.buildExpression(_:)()
{
  return MEMORY[0x270F58130]();
}

uint64_t type metadata accessor for Prompt.ImageFormat()
{
  return MEMORY[0x270F581B0]();
}

uint64_t type metadata accessor for Prompt.Component.Value()
{
  return MEMORY[0x270F58280]();
}

uint64_t Prompt.ImageData.init(format:data:)()
{
  return MEMORY[0x270F582B8]();
}

uint64_t type metadata accessor for Prompt.ImageData()
{
  return MEMORY[0x270F582C8]();
}

uint64_t type metadata accessor for Prompt()
{
  return MEMORY[0x270F582E8]();
}

uint64_t type metadata accessor for ChatMessageRole()
{
  return MEMORY[0x270F58340]();
}

uint64_t type metadata accessor for User()
{
  return MEMORY[0x270F58408]();
}

uint64_t User.init(_:)()
{
  return MEMORY[0x270F58410]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

uint64_t Encodable.asJSONString.getter()
{
  return MEMORY[0x270F41EB8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x270F9D478]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

uint64_t String.init(contentsOf:encoding:)()
{
  return MEMORY[0x270EF1870]();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x270EF1928]();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return MEMORY[0x270EF1938]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x270F9D620]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x270F9D648]();
}

uint64_t String.UnicodeScalarView.append(_:)()
{
  return MEMORY[0x270F9D698]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x270F9D6B8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x270F9D740]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x270F9D748]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x270F9D750]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9D758]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x270F9D7C0]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D878](a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D880](a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x270F9D8B0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x270FA1E30]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x270FA1EA0]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x270FA1EA8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x270FA1F48]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x270FA1F90]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x270FA1FE8]();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return MEMORY[0x270FA2080]();
}

uint64_t Float.description.getter()
{
  return MEMORY[0x270F9DDF8]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x270F9DEB0]();
}

uint64_t RangeReplaceableCollection<>.replacing<A, B, C>(_:maxReplacements:with:)()
{
  return MEMORY[0x270FA2BE0]();
}

uint64_t RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)()
{
  return MEMORY[0x270FA2BE8]();
}

uint64_t NLTokenizer.enumerateTokens(in:using:)()
{
  return MEMORY[0x270FA10D8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static GATSchemaGATMediaType.from(fileExtension:)()
{
  return MEMORY[0x270F2EC70]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x270FA0F00]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x270FA0F28]();
}

uint64_t UIImage.getPlatformData()()
{
  return MEMORY[0x270F2EC78]();
}

Swift::String_optional __swiftcall UIImage.getFileExtension()()
{
  uint64_t v0 = MEMORY[0x270F2EC80]();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x270F9E3B0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x270EF2478]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x270F9E730]();
}

uint64_t dispatch thunk of SetAlgebra.intersection(_:)()
{
  return MEMORY[0x270F9E740]();
}

uint64_t dispatch thunk of SetAlgebra.formUnion(_:)()
{
  return MEMORY[0x270F9E798]();
}

uint64_t dispatch thunk of SetAlgebra.init()()
{
  return MEMORY[0x270F9E7E0]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x270F9E988]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x270F9E9A0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t CaseIterable<>.init(from:)()
{
  return MEMORY[0x270F2F550]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x270F9EB30]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return MEMORY[0x270FA21A0]();
}

uint64_t ContinuousClock.init()()
{
  return MEMORY[0x270FA21A8]();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return MEMORY[0x270FA21B0]();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return MEMORY[0x270F9ECD8]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t _assertionFailure(_:_:flags:)()
{
  return MEMORY[0x270F9EFF8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x270F9F090]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2E8]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x270F9F920]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x270F9FA40]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return MEMORY[0x270FA2378]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x270EF2680]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t type metadata accessor for Unicode.NumericType()
{
  return MEMORY[0x270F9FDE0]();
}

uint64_t Unicode.Scalar.Properties.numericType.getter()
{
  return MEMORY[0x270F9FE78]();
}

uint64_t Unicode.Scalar.Properties.isEmojiPresentation.getter()
{
  return MEMORY[0x270F9FED0]();
}

uint64_t Unicode.Scalar.Properties.isVariationSelector.getter()
{
  return MEMORY[0x270F9FEE0]();
}

uint64_t Unicode.Scalar.Properties.isEmoji.getter()
{
  return MEMORY[0x270F9FF20]();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return MEMORY[0x270F9FF30]();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return MEMORY[0x270F9FF38]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x270FA0128]();
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x270F4AE40]();
}

uint64_t MobileGestalt_get_current_device()
{
  return MEMORY[0x270F960E8]();
}

uint64_t MobileGestalt_get_internalBuild()
{
  return MEMORY[0x270F96148]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
}

void UIGraphicsEndImageContext(void)
{
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return (UIImage *)MEMORY[0x270F82D80]();
}

NSData *__cdecl UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality)
{
  return (NSData *)MEMORY[0x270F82DD0](image, compressionQuality);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFHostGetTopLevelDomain()
{
  return MEMORY[0x270EE2A50]();
}

uint64_t _CFURLAttachSecurityScopeToFileURL()
{
  return MEMORY[0x270EE5718]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x270FA0150]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x270EDB2C0]();
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x270EDB460](path, name, value, size, *(void *)&position, *(void *)&options);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x270FA04F8]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x270FA0610]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x270FA0618]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x270FA0620]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}