void sub_23BD29204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::VertexEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  [a3[2] setVertexBytes:a1 length:248 atIndex:a4];
  uint64_t result = [a3[2] setVertexBytes:a1 + 744 length:248 atIndex:a5];
  unint64_t v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v11 = __clz(__rbit64(v10));
        uint64_t v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        uint64_t v13 = *(void *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13) {
          break;
        }
        uint64_t result = [a3 useResource:v13 usage:(v10 >> (v11 & 0x3E)) & 3 stages:1];
        unint64_t v10 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::FragmentEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  [a3[2] setFragmentBytes:a1 length:248 atIndex:a4];
  uint64_t result = [a3[2] setFragmentBytes:a1 + 744 length:248 atIndex:a5];
  unint64_t v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v11 = __clz(__rbit64(v10));
        uint64_t v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        uint64_t v13 = *(void *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13) {
          break;
        }
        uint64_t result = [a3 useResource:v13 usage:(v10 >> (v11 & 0x3E)) & 3 stages:2];
        unint64_t v10 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::TileEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  [a3[2] setTileBytes:a1 length:248 atIndex:a4];
  uint64_t result = [a3[2] setTileBytes:a1 + 744 length:248 atIndex:a5];
  unint64_t v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v11 = __clz(__rbit64(v10));
        uint64_t v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        uint64_t v13 = *(void *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13) {
          break;
        }
        uint64_t result = [a3 useResource:v13 usage:(v10 >> (v11 & 0x3E)) & 3 stages:2];
        unint64_t v10 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::ObjectEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  [a3[2] setObjectBytes:a1 length:248 atIndex:a4];
  uint64_t result = [a3[2] setObjectBytes:a1 + 744 length:248 atIndex:a5];
  unint64_t v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v11 = __clz(__rbit64(v10));
        uint64_t v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        uint64_t v13 = *(void *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13) {
          break;
        }
        uint64_t result = [a3 useResource:v13 usage:(v10 >> (v11 & 0x3E)) & 3 stages:8];
        unint64_t v10 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::MeshEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  [a3[2] setMeshBytes:a1 length:248 atIndex:a4];
  uint64_t result = [a3[2] setMeshBytes:a1 + 744 length:248 atIndex:a5];
  unint64_t v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v11 = __clz(__rbit64(v10));
        uint64_t v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        uint64_t v13 = *(void *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13) {
          break;
        }
        uint64_t result = [a3 useResource:v13 usage:(v10 >> (v11 & 0x3E)) & 3 stages:16];
        unint64_t v10 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::VertexEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v12 = *a2;
  id v13 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::VertexEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  unint64_t v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v9 = __clz(__rbit64(v8));
        uint64_t v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        uint64_t v11 = *(void *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11) {
          break;
        }
        uint64_t result = [v13 useResource:v11 usage:(v8 >> (v9 & 0x3E)) & 3 stages:1];
        unint64_t v8 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::VertexEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = 0;
  uint64_t v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  [*((id *)*a1 + 2) setVertexBuffer:v9 offset:v11 atIndex:0];
  [*((id *)*a1 + 2) setVertexBytes:a2 + 992 length:124 atIndex:a4];
  return [*((id *)*a1 + 2) setVertexBytes:a2 + 744 length:248 atIndex:a5];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::FragmentEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v12 = *a2;
  id v13 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::FragmentEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  unint64_t v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v9 = __clz(__rbit64(v8));
        uint64_t v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        uint64_t v11 = *(void *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11) {
          break;
        }
        uint64_t result = [v13 useResource:v11 usage:(v8 >> (v9 & 0x3E)) & 3 stages:2];
        unint64_t v8 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::FragmentEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = 0;
  uint64_t v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  [*((id *)*a1 + 2) setFragmentBuffer:v9 offset:v11 atIndex:0];
  [*((id *)*a1 + 2) setFragmentBytes:a2 + 992 length:124 atIndex:a4];
  return [*((id *)*a1 + 2) setFragmentBytes:a2 + 744 length:248 atIndex:a5];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::TileEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v12 = *a2;
  id v13 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::TileEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  unint64_t v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v9 = __clz(__rbit64(v8));
        uint64_t v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        uint64_t v11 = *(void *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11) {
          break;
        }
        uint64_t result = [v13 useResource:v11 usage:(v8 >> (v9 & 0x3E)) & 3 stages:2];
        unint64_t v8 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::TileEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = 0;
  uint64_t v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  [*((id *)*a1 + 2) setTileBuffer:v9 offset:v11 atIndex:0];
  [*((id *)*a1 + 2) setTileBytes:a2 + 992 length:124 atIndex:a4];
  return [*((id *)*a1 + 2) setTileBytes:a2 + 744 length:248 atIndex:a5];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::ObjectEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v12 = *a2;
  id v13 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::ObjectEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  unint64_t v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v9 = __clz(__rbit64(v8));
        uint64_t v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        uint64_t v11 = *(void *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11) {
          break;
        }
        uint64_t result = [v13 useResource:v11 usage:(v8 >> (v9 & 0x3E)) & 3 stages:8];
        unint64_t v8 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::ObjectEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = 0;
  uint64_t v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  [*((id *)*a1 + 2) setObjectBuffer:v9 offset:v11 atIndex:0];
  [*((id *)*a1 + 2) setObjectBytes:a2 + 992 length:124 atIndex:a4];
  return [*((id *)*a1 + 2) setObjectBytes:a2 + 744 length:248 atIndex:a5];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::MeshEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v12 = *a2;
  id v13 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::MeshEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  unint64_t v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v9 = __clz(__rbit64(v8));
        uint64_t v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        uint64_t v11 = *(void *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11) {
          break;
        }
        uint64_t result = [v13 useResource:v11 usage:(v8 >> (v9 & 0x3E)) & 3 stages:16];
        unint64_t v8 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::MeshEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = 0;
  uint64_t v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  [*((id *)*a1 + 2) setMeshBuffer:v9 offset:v11 atIndex:0];
  [*((id *)*a1 + 2) setMeshBytes:a2 + 992 length:124 atIndex:a4];
  return [*((id *)*a1 + 2) setMeshBytes:a2 + 744 length:248 atIndex:a5];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::VertexEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v10 = *a2;
  id v11 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::VertexEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  unint64_t v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v7 = __clz(__rbit64(v6));
        uint64_t v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        uint64_t v9 = *(void *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9) {
          break;
        }
        uint64_t result = [v11 useResource:v9 usage:(v6 >> (v7 & 0x3E)) & 3 stages:1];
        unint64_t v6 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::VertexEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  for (unint64_t i = *a3; *a3; unint64_t i = *a3)
  {
    unint64_t v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(void *)a1 + 16), "setVertexBuffer:offset:attributeStride:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(void *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), *(void *)(a2 + 8 * (v7 >> 1) + 744), v7 >> 1);
  }
  uint64_t v8 = *(void **)(*(void *)a1 + 16);

  return [v8 setVertexBytes:a2 + 1120 length:496 atIndex:31];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::FragmentEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v10 = *a2;
  id v11 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::FragmentEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  unint64_t v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v7 = __clz(__rbit64(v6));
        uint64_t v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        uint64_t v9 = *(void *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9) {
          break;
        }
        uint64_t result = [v11 useResource:v9 usage:(v6 >> (v7 & 0x3E)) & 3 stages:2];
        unint64_t v6 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::FragmentEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  for (unint64_t i = *a3; *a3; unint64_t i = *a3)
  {
    unint64_t v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(void *)a1 + 16), "setFragmentBuffer:offset:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(void *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), v7 >> 1);
  }
  uint64_t v8 = *(void **)(*(void *)a1 + 16);

  return [v8 setFragmentBytes:a2 + 1120 length:496 atIndex:31];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::TileEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v10 = *a2;
  id v11 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::TileEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  unint64_t v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v7 = __clz(__rbit64(v6));
        uint64_t v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        uint64_t v9 = *(void *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9) {
          break;
        }
        uint64_t result = [v11 useResource:v9 usage:(v6 >> (v7 & 0x3E)) & 3 stages:2];
        unint64_t v6 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::TileEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  for (unint64_t i = *a3; *a3; unint64_t i = *a3)
  {
    unint64_t v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(void *)a1 + 16), "setTileBuffer:offset:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(void *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), v7 >> 1);
  }
  uint64_t v8 = *(void **)(*(void *)a1 + 16);

  return [v8 setTileBytes:a2 + 1120 length:496 atIndex:31];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::ObjectEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v10 = *a2;
  id v11 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::ObjectEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  unint64_t v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v7 = __clz(__rbit64(v6));
        uint64_t v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        uint64_t v9 = *(void *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9) {
          break;
        }
        uint64_t result = [v11 useResource:v9 usage:(v6 >> (v7 & 0x3E)) & 3 stages:8];
        unint64_t v6 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::ObjectEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  for (unint64_t i = *a3; *a3; unint64_t i = *a3)
  {
    unint64_t v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(void *)a1 + 16), "setObjectBuffer:offset:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(void *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), v7 >> 1);
  }
  uint64_t v8 = *(void **)(*(void *)a1 + 16);

  return [v8 setObjectBytes:a2 + 1120 length:496 atIndex:31];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::MeshEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v10 = *a2;
  id v11 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::MeshEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  unint64_t v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v7 = __clz(__rbit64(v6));
        uint64_t v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        uint64_t v9 = *(void *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9) {
          break;
        }
        uint64_t result = [v11 useResource:v9 usage:(v6 >> (v7 & 0x3E)) & 3 stages:16];
        unint64_t v6 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::MeshEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  for (unint64_t i = *a3; *a3; unint64_t i = *a3)
  {
    unint64_t v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(void *)a1 + 16), "setMeshBuffer:offset:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(void *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), v7 >> 1);
  }
  uint64_t v8 = *(void **)(*(void *)a1 + 16);

  return [v8 setMeshBytes:a2 + 1120 length:496 atIndex:31];
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD2D2C0(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<unsigned long>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264E12B18, MEMORY[0x263F8C060]);
}

void sub_23BD2D3B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void sub_23BD2D92C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t newFunctionLogLocationFromDebugLocation(uint64_t a1)
{
  id v2 = objc_alloc(MEMORY[0x263F12A90]);

  return [v2 initWithDebugLocation:a1];
}

void *newNonToolchainInlinedStackTraceFromDebugLocation(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  id v2 = objc_opt_new();
  do
  {
    v3 = (void *)[objc_alloc(MEMORY[0x263F12A90]) initWithDebugLocation:v1];
    uint64_t v4 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v3, "URL"), "standardizedURL"), "path");
    if (([v4 containsString:@".xctoolchain/"] & 1) == 0
      && ([v4 containsString:@"GPUCompiler.framework/"] & 1) == 0
      && (![v2 count]
       || (objc_msgSend((id)objc_msgSend(v3, "description"), "isEqual:", objc_msgSend((id)objc_msgSend(v2, "lastObject"), "description")) & 1) == 0))
    {
      [v2 addObject:v3];
    }

    uint64_t v1 = (void *)[v1 inlinedAt];
  }
  while (v1);
  return v2;
}

void *newRuntimeStackTrace(id **a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a1[1] == *a1) {
    return 0;
  }
  id v2 = objc_opt_new();
  v3 = *a1;
  uint64_t v4 = a1[1];
  if ((char *)v4 - (char *)*a1 == 8)
  {
    char v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*v3, "scope"), "name"), "containsString:", @"air.vertexFetchFunction");
    v3 = *a1;
    if (v5)
    {
      unint64_t v6 = (void *)[objc_alloc(MEMORY[0x263F12A90]) initWithDebugLocation:*v3];
      [v2 addObject:v6];

      return v2;
    }
    uint64_t v4 = a1[1];
  }
  for (; v3 != v4; ++v3)
  {
    unint64_t v7 = newNonToolchainInlinedStackTraceFromDebugLocation(*v3);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          unint64_t v12 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          if ((objc_msgSend((id)objc_msgSend(v12, "functionName"), "containsString:", @"air.") & 1) == 0
            && (![v2 count]
             || (objc_msgSend((id)objc_msgSend(v12, "description"), "isEqual:", objc_msgSend((id)objc_msgSend(v2, "lastObject"), "description")) & 1) == 0))
          {
            [v2 addObject:v12];
          }
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }
  }
  return v2;
}

uint64_t MTLGPUDebugReadReportBuffer(void *a1, unsigned int *a2, uint64_t a3)
{
  v43[1] = *MEMORY[0x263EF8340];
  v31 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithArray:", objc_msgSend((id)objc_msgSend(a1, "baseObject"), "logs"));
  v32 = a1;
  uint64_t v4 = [a1 device];
  uint64_t v5 = 0;
  uint64_t v6 = v4 + 264;
  v43[0] = 0x100000000;
  uint64_t v29 = v4 + 88;
  do
  {
    uint64_t v7 = *((unsigned int *)v43 + v5);
    if ((*a2 >> v7))
    {
      uint64_t v8 = objc_alloc_init(MTLGPUDebugBufferErrorLog);
      uint64_t v9 = (int *)&a2[32 * v7];
      resolvedSharedPacketData<GPUDebugBadAccessPacket>::resolvedSharedPacketData(v38, (uint64_t)(v9 + 2), a3, v32, v8);
      uint64_t v10 = *((unsigned __int16 *)v9 + 24);
      unint64_t v11 = *((void *)v9 + 3);
      [(MTLGPUDebugBufferErrorLog *)v8 setOperation:*((unsigned __int16 *)v9 + 25)];
      unint64_t v12 = *(void *)(v6 + 20);
      if ((v12 & 0x800000) != 0)
      {
        if (v7) {
          LODWORD(v13) = 0;
        }
        else {
          uint64_t v13 = (v12 >> 27) & 1;
        }
      }
      else
      {
        LODWORD(v13) = 1;
      }
      if (v7) {
        uint64_t v14 = 3;
      }
      else {
        uint64_t v14 = 1;
      }
      [(MTLGPUDebugBufferErrorLog *)v8 setAddressSpace:v14];
      if (!v7 && (*(unsigned char *)(v6 + 22) & 0x80) != 0)
      {
        uint64_t v15 = *(void *)(*(void *)(v29 + 296) + ((v11 >> 41) & 0x7FFFF8));
        v11 &= 0xFFFFFFFFFFFuLL;
      }
      else
      {
        uint64_t v15 = 0;
      }
      [(MTLGPUDebugBufferErrorLog *)v8 setBuffer:v15];
      [(MTLGPUDebugBufferErrorLog *)v8 setOffset:v11];
      if ([(MTLGPUDebugBufferErrorLog *)v8 buffer] && v41 && (*(void *)(v6 + 20) & 0x200000001) != 0)
      {
        uint64_t v16 = [(MTLGPUDebugBufferErrorLog *)v8 buffer];
        -[MTLGPUDebugBufferErrorLog setSpecifiedUsage:](v8, "setSpecifiedUsage:", [v32 resourceUsageForBuffer:v16 stage:v41]);
      }
      if (v13
        && (uint64_t v17 = v7 != 0,
            long long v36 = 0u,
            long long v37 = 0u,
            long long v34 = 0u,
            long long v35 = 0u,
            id v18 = v40,
            (uint64_t v19 = [v40 countByEnumeratingWithState:&v34 objects:v42 count:16]) != 0))
      {
        uint64_t v20 = *(void *)v35;
LABEL_21:
        uint64_t v21 = 0;
        while (1)
        {
          if (*(void *)v35 != v20) {
            objc_enumerationMutation(v18);
          }
          v22 = *(void **)(*((void *)&v34 + 1) + 8 * v21);
          if ([v22 type] == v17 && objc_msgSend(v22, "index") == v10) {
            break;
          }
          if (v19 == ++v21)
          {
            uint64_t v19 = [v18 countByEnumeratingWithState:&v34 objects:v42 count:16];
            v22 = 0;
            if (v19) {
              goto LABEL_21;
            }
            break;
          }
        }
      }
      else
      {
        v22 = 0;
      }
      [(MTLGPUDebugBufferErrorLog *)v8 setArgument:v22];
      [v31 addObject:v8];

      resolvedSharedPacketData<GPUDebugBadAccessPacket>::~resolvedSharedPacketData((uint64_t)v38);
    }
    ++v5;
  }
  while (v5 != 2);
  unsigned int v23 = *a2;
  if ((*a2 & 4) != 0)
  {
    v24 = objc_alloc_init(MTLGPUDebugTextureErrorLog);
    resolvedSharedPacketData<GPUDebugBadTexturePacket>::resolvedSharedPacketData(v38, (uint64_t)(a2 + 66), a3, v32, v24);
    [(MTLGPUDebugTextureErrorLog *)v24 setErrorReason:*((unsigned __int8 *)a2 + 300)];
    [(MTLGPUDebugTextureErrorLog *)v24 setExpectedTextureType:*((unsigned __int8 *)a2 + 292)];
    [(MTLGPUDebugTextureErrorLog *)v24 setActualTextureType:*((unsigned __int8 *)a2 + 293)];
    [v31 addObject:v24];

    resolvedSharedPacketData<GPUDebugBadTexturePacket>::~resolvedSharedPacketData((uint64_t)v38);
    unsigned int v23 = *a2;
  }
  if ((v23 & 0x10) != 0)
  {
    v25 = objc_alloc_init(MTLGPUDebugStackOverflowErrorLog);
    resolvedSharedPacketData<GPUDebugStackPacket>::resolvedSharedPacketData(v38, (uint64_t)(a2 + 124), a3, v32, v25);
    -[MTLGPUDebugStackOverflowErrorLog setFunctionName:](v25, "setFunctionName:", [v39 stringForID:a2[131]]);
    [v31 addObject:v25];

    resolvedSharedPacketData<GPUDebugStackPacket>::~resolvedSharedPacketData((uint64_t)v38);
    unsigned int v23 = *a2;
  }
  if ((v23 & 8) != 0)
  {
    v26 = objc_alloc_init(MTLGPUDebugTrapErrorLog);
    resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::resolvedSharedPacketData(v38, (uint64_t)(a2 + 96), a3, v32, v26);
    -[MTLGPUDebugTrapErrorLog setFunctionName:](v26, "setFunctionName:", [v39 stringForID:a2[103]]);
    [v31 addObject:v26];

    resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::~resolvedSharedPacketData((uint64_t)v38);
    unsigned int v23 = *a2;
  }
  if ((v23 & 0x20) != 0)
  {
    v27 = objc_alloc_init(MTLGPUDebugAccelerationStructureErrorLog);
    resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::resolvedSharedPacketData(v38, (uint64_t)(a2 + 152), a3, v32, v27);
    -[MTLGPUDebugAccelerationStructureErrorLog setFunctionName:](v27, "setFunctionName:", [v39 stringForID:a2[159]]);
    [(MTLGPUDebugAccelerationStructureErrorLog *)v27 setExpectedAccelerationStructureType:*((void *)a2 + 80)];
    [(MTLGPUDebugAccelerationStructureErrorLog *)v27 setActualAccelerationStructureType:*((void *)a2 + 81)];
    [v31 addObject:v27];

    resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::~resolvedSharedPacketData((uint64_t)v38);
  }
  return objc_msgSend((id)objc_msgSend(v32, "baseObject"), "setLogs:", v31);
}

void sub_23BD2E4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::~resolvedSharedPacketData((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *GPUDebugFunctionInfo::GPUDebugFunctionInfo(uint64_t *a1, void *a2)
{
  *a1 = @"<unnamed>";
  a1[1] = @"<unknown>";
  a1[2] = @"<unknown>";
  if ([a2 label])
  {
    uint64_t v4 = [a2 label];
  }
  else
  {
    if (![a2 name]) {
      goto LABEL_6;
    }
    uint64_t v4 = [a2 name];
  }
  *a1 = v4;
LABEL_6:
  switch([a2 functionType])
  {
    case 1:
      uint64_t v5 = @"vertex";
      goto LABEL_9;
    case 2:
      uint64_t v5 = @"fragment";
LABEL_9:
      uint64_t v6 = @"draw";
      goto LABEL_11;
    case 3:
      uint64_t v5 = @"kernel";
      uint64_t v6 = @"dispatch";
LABEL_11:
      a1[1] = (uint64_t)v5;
      a1[2] = (uint64_t)v6;
      return a1;
    case 5:
      uint64_t v7 = @"visible";
      goto LABEL_16;
    case 6:
      uint64_t v7 = @"intersection";
      goto LABEL_16;
    case 7:
      uint64_t v7 = @"mesh";
      goto LABEL_16;
    case 8:
      uint64_t v7 = @"object";
LABEL_16:
      a1[1] = (uint64_t)v7;
      break;
    default:
      return a1;
  }
  return a1;
}

void *resolvedSharedPacketData<GPUDebugBadAccessPacket>::resolvedSharedPacketData(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 24);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 28));
  unint64_t v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v14, "label"), objc_msgSend(v14, "UID")];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = *(id *)a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v12, "label"), objc_msgSend(v12, "UID")];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = *(id *)a2;
        if ([*(id *)a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v18, "label"), objc_msgSend(v18, "UID")];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v20;
      if (v20)
      {
        unint64_t v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v21 - (void)*v58;
          uint64_t v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            uint64_t v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          uint64_t v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *uint64_t v29 = v20;
          unsigned int v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              uint64_t v33 = (uint64_t)*--v31;
              *--uint64_t v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          uint64_t *v22 = v20;
          unsigned int v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_54;
      }
      uint64_t v34 = 0;
      break;
    case 7:
      id v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v16, "label"), objc_msgSend(v16, "UID")];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v17, "label"), objc_msgSend(v17, "UID")];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v35 = *(_DWORD *)(a2 + 4 * v34 + 44);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v37 = v36;
      id v39 = (uint64_t *)a1[9];
      unint64_t v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        uint64_t v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v38 - (void)*v58;
        uint64_t v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
          uint64_t v43 = v41 + 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44) {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        }
        else {
          v45 = 0;
        }
        v46 = (uint64_t *)&v45[8 * v41];
        uint64_t *v46 = v37;
        id v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            uint64_t v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *id v39 = v36;
        id v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  id v50 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  uint64_t v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    uint64_t v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(unsigned char *)(v55 + 285) & 2) == 0) {
      v54 = v51;
    }
  }
  [a5 setErrorStackTrace:v54];
  if (v51) {
    uint64_t v56 = [v51 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v56 = 0;
  }
  [a5 setDebugLocation:v56];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BD2F7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t resolvedSharedPacketData<GPUDebugBadAccessPacket>::~resolvedSharedPacketData(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

void *resolvedSharedPacketData<GPUDebugBadTexturePacket>::resolvedSharedPacketData(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 16);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 20));
  unint64_t v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v14, "label"), objc_msgSend(v14, "UID")];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = *(id *)a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v12, "label"), objc_msgSend(v12, "UID")];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = *(id *)a2;
        if ([*(id *)a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v18, "label"), objc_msgSend(v18, "UID")];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v20;
      if (v20)
      {
        unint64_t v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v21 - (void)*v58;
          uint64_t v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            uint64_t v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          uint64_t v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *uint64_t v29 = v20;
          unsigned int v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              uint64_t v33 = (uint64_t)*--v31;
              *--uint64_t v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          uint64_t *v22 = v20;
          unsigned int v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_54;
      }
      uint64_t v34 = 0;
      break;
    case 7:
      id v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v16, "label"), objc_msgSend(v16, "UID")];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v17, "label"), objc_msgSend(v17, "UID")];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v35 = *(_DWORD *)(a2 + 4 * v34 + 40);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v37 = v36;
      id v39 = (uint64_t *)a1[9];
      unint64_t v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        uint64_t v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v38 - (void)*v58;
        uint64_t v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
          uint64_t v43 = v41 + 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44) {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        }
        else {
          v45 = 0;
        }
        v46 = (uint64_t *)&v45[8 * v41];
        uint64_t *v46 = v37;
        id v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            uint64_t v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *id v39 = v36;
        id v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  id v50 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  uint64_t v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    uint64_t v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(unsigned char *)(v55 + 285) & 2) == 0) {
      v54 = v51;
    }
  }
  [a5 setErrorStackTrace:v54];
  if (v51) {
    uint64_t v56 = [v51 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v56 = 0;
  }
  [a5 setDebugLocation:v56];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BD2FE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t resolvedSharedPacketData<GPUDebugBadTexturePacket>::~resolvedSharedPacketData(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

void *resolvedSharedPacketData<GPUDebugStackPacket>::resolvedSharedPacketData(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 16);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 20));
  unint64_t v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v14, "label"), objc_msgSend(v14, "UID")];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = *(id *)a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v12, "label"), objc_msgSend(v12, "UID")];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = *(id *)a2;
        if ([*(id *)a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v18, "label"), objc_msgSend(v18, "UID")];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v20;
      if (v20)
      {
        unint64_t v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v21 - (void)*v58;
          uint64_t v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            uint64_t v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          uint64_t v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *uint64_t v29 = v20;
          unsigned int v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              uint64_t v33 = (uint64_t)*--v31;
              *--uint64_t v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          uint64_t *v22 = v20;
          unsigned int v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_54;
      }
      uint64_t v34 = 0;
      break;
    case 7:
      id v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v16, "label"), objc_msgSend(v16, "UID")];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v17, "label"), objc_msgSend(v17, "UID")];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v35 = *(_DWORD *)(a2 + 4 * v34 + 32);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v37 = v36;
      id v39 = (uint64_t *)a1[9];
      unint64_t v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        uint64_t v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v38 - (void)*v58;
        uint64_t v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
          uint64_t v43 = v41 + 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44) {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        }
        else {
          v45 = 0;
        }
        v46 = (uint64_t *)&v45[8 * v41];
        uint64_t *v46 = v37;
        id v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            uint64_t v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *id v39 = v36;
        id v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  id v50 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  uint64_t v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    uint64_t v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(unsigned char *)(v55 + 285) & 2) == 0) {
      v54 = v51;
    }
  }
  [a5 setErrorStackTrace:v54];
  if (v51) {
    uint64_t v56 = [v51 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v56 = 0;
  }
  [a5 setDebugLocation:v56];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BD304C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t resolvedSharedPacketData<GPUDebugStackPacket>::~resolvedSharedPacketData(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

void *resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::resolvedSharedPacketData(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 16);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 20));
  unint64_t v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v14, "label"), objc_msgSend(v14, "UID")];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = *(id *)a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v12, "label"), objc_msgSend(v12, "UID")];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = *(id *)a2;
        if ([*(id *)a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v18, "label"), objc_msgSend(v18, "UID")];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v20;
      if (v20)
      {
        unint64_t v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v21 - (void)*v58;
          uint64_t v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            uint64_t v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          uint64_t v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *uint64_t v29 = v20;
          unsigned int v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              uint64_t v33 = (uint64_t)*--v31;
              *--uint64_t v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          uint64_t *v22 = v20;
          unsigned int v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_54;
      }
      uint64_t v34 = 0;
      break;
    case 7:
      id v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v16, "label"), objc_msgSend(v16, "UID")];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v17, "label"), objc_msgSend(v17, "UID")];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v35 = *(_DWORD *)(a2 + 4 * v34 + 32);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v37 = v36;
      id v39 = (uint64_t *)a1[9];
      unint64_t v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        uint64_t v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v38 - (void)*v58;
        uint64_t v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
          uint64_t v43 = v41 + 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44) {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        }
        else {
          v45 = 0;
        }
        v46 = (uint64_t *)&v45[8 * v41];
        uint64_t *v46 = v37;
        id v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            uint64_t v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *id v39 = v36;
        id v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  id v50 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  uint64_t v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    uint64_t v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(unsigned char *)(v55 + 285) & 2) == 0) {
      v54 = v51;
    }
  }
  [a5 setErrorStackTrace:v54];
  if (v51) {
    uint64_t v56 = [v51 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v56 = 0;
  }
  [a5 setDebugLocation:v56];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BD30B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::~resolvedSharedPacketData(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

void *resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::resolvedSharedPacketData(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 16);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 20));
  unint64_t v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v14, "label"), objc_msgSend(v14, "UID")];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = *(id *)a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v12, "label"), objc_msgSend(v12, "UID")];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = *(id *)a2;
        if ([*(id *)a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v18, "label"), objc_msgSend(v18, "UID")];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v20;
      if (v20)
      {
        unint64_t v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v21 - (void)*v58;
          uint64_t v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            uint64_t v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          uint64_t v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *uint64_t v29 = v20;
          unsigned int v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              uint64_t v33 = (uint64_t)*--v31;
              *--uint64_t v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          uint64_t *v22 = v20;
          unsigned int v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_54;
      }
      uint64_t v34 = 0;
      break;
    case 7:
      id v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v16, "label"), objc_msgSend(v16, "UID")];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [NSString stringWithFormat:@"pipeline: \"%@\", UID: \"%@\"", objc_msgSend(v17, "label"), objc_msgSend(v17, "UID")];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v35 = *(_DWORD *)(a2 + 4 * v34 + 48);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v37 = v36;
      id v39 = (uint64_t *)a1[9];
      unint64_t v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        uint64_t v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v38 - (void)*v58;
        uint64_t v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
          uint64_t v43 = v41 + 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44) {
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        }
        else {
          v45 = 0;
        }
        v46 = (uint64_t *)&v45[8 * v41];
        uint64_t *v46 = v37;
        id v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            uint64_t v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *id v39 = v36;
        id v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  id v50 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  uint64_t v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    uint64_t v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(unsigned char *)(v55 + 285) & 2) == 0) {
      v54 = v51;
    }
  }
  [a5 setErrorStackTrace:v54];
  if (v51) {
    uint64_t v56 = [v51 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v56 = 0;
  }
  [a5 setDebugLocation:v56];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BD311B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::~resolvedSharedPacketData(uint64_t a1)
{
  id v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_23BD38AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void emitKernelTelemetry(MTLTelemetryDevice *a1)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  if (*MEMORY[0x263F12D18])
  {
    if (*MEMORY[0x263F12D18] != 1) {
      return;
    }
    kernelDistribution = a1->kernelDistribution;
    int var3 = kernelDistribution->var0.var3;
    uint64_t var2 = kernelDistribution->var0.var2;
    double v5 = 0.0;
    double v6 = 0.0;
    if (var3) {
      double v6 = (float)((float)var2 / (float)var3);
    }
    int v7 = kernelDistribution->var1.var3;
    uint64_t v8 = kernelDistribution->var1.var2;
    if (v7) {
      double v5 = (float)((float)v8 / (float)v7);
    }
    int v9 = kernelDistribution->var2.var3;
    uint64_t v10 = kernelDistribution->var2.var2;
    double v11 = 0.0;
    double v12 = 0.0;
    if (v9) {
      double v12 = (float)((float)v10 / (float)v9);
    }
    int var0 = kernelDistribution->var0.var0;
    int var1 = kernelDistribution->var0.var1;
    int v16 = kernelDistribution->var1.var0;
    int v15 = kernelDistribution->var1.var1;
    int v17 = kernelDistribution->var2.var0;
    int v18 = kernelDistribution->var2.var1;
    int v19 = kernelDistribution->var3.var0;
    int v20 = kernelDistribution->var3.var1;
    int v21 = kernelDistribution->var3.var3;
    uint64_t v22 = kernelDistribution->var3.var2;
    if (v21) {
      double v11 = (float)((float)v22 / (float)v21);
    }
    printf("\n\nKernel, minPBAllocation=%d, maxPBAllocation=%d, avgPBAllocation=%f, totalPBAllocation=%lld, countPBAllocation=%d, minSPMRenderCount=%d, maxSPMRenderCount=%d, avgSPMRenderCount=%f, totalSPMRenderCount=%lld, countSPMRenderCount=%d, minTiledSceneBytes=%d, maxTiledSceneBytes=%d, avgTiledSceneBytes=%f, totalTiledSceneBytes=%lld, countTiledSceneBytes=%d, minRenderCount=%d, maxRenderCount=%d, avgRenderCount=%f, totalRenderCount=%lld, countRenderCount=%d", var0, var1, v6, var2, var3, v16, v15, v5, v8, v7, v17, v18, v12,
      v10,
      v9,
      v19,
      v20,
      v11,
      v22,
      v21);
  }
  unsigned int v23 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = a1->kernelDistribution;
    int v25 = v24->var0.var3;
    uint64_t v26 = v24->var0.var2;
    double v27 = 0.0;
    double v28 = 0.0;
    if (v25) {
      double v28 = (float)((float)v26 / (float)v25);
    }
    int v29 = v24->var1.var3;
    uint64_t v30 = v24->var1.var2;
    if (v29) {
      double v27 = (float)((float)v30 / (float)v29);
    }
    int v31 = v24->var2.var3;
    uint64_t v32 = v24->var2.var2;
    double v33 = 0.0;
    double v34 = 0.0;
    if (v31) {
      double v34 = (float)((float)v32 / (float)v31);
    }
    int v36 = v24->var0.var0;
    int v35 = v24->var0.var1;
    int v38 = v24->var1.var0;
    int v37 = v24->var1.var1;
    int v40 = v24->var2.var0;
    int v39 = v24->var2.var1;
    int v41 = v24->var3.var0;
    int v42 = v24->var3.var1;
    int v43 = v24->var3.var3;
    uint64_t v44 = v24->var3.var2;
    if (v43) {
      double v33 = (float)((float)v44 / (float)v43);
    }
    *(_DWORD *)buf = 67113984;
    int v46 = v36;
    __int16 v47 = 1024;
    int v48 = v35;
    __int16 v49 = 2048;
    double v50 = v28;
    __int16 v51 = 2048;
    uint64_t v52 = v26;
    __int16 v53 = 1024;
    int v54 = v25;
    __int16 v55 = 1024;
    int v56 = v38;
    __int16 v57 = 1024;
    int v58 = v37;
    __int16 v59 = 2048;
    double v60 = v27;
    __int16 v61 = 2048;
    uint64_t v62 = v30;
    __int16 v63 = 1024;
    int v64 = v29;
    __int16 v65 = 1024;
    int v66 = v40;
    __int16 v67 = 1024;
    int v68 = v39;
    __int16 v69 = 2048;
    double v70 = v34;
    __int16 v71 = 2048;
    uint64_t v72 = v32;
    __int16 v73 = 1024;
    int v74 = v31;
    __int16 v75 = 1024;
    int v76 = v41;
    __int16 v77 = 1024;
    int v78 = v42;
    __int16 v79 = 2048;
    double v80 = v33;
    __int16 v81 = 2048;
    uint64_t v82 = v44;
    __int16 v83 = 1024;
    int v84 = v43;
    _os_log_impl(&dword_23BD25000, (os_log_t)v23, OS_LOG_TYPE_DEFAULT, "Kernel, minPBAllocation=%d, maxPBAllocation=%d, avgPBAllocation=%f, totalPBAllocation=%lld, countPBAllocation=%d, minSPMRenderCount=%d, maxSPMRenderCount=%d, avgSPMRenderCount=%f, totalSPMRenderCount=%lld, countSPMRenderCount=%d, minTiledSceneBytes=%d, maxTiledSceneBytes=%d, avgTiledSceneBytes=%f, totalTiledSceneBytes=%lld, countTiledSceneBytes=%d, minRenderCount=%d, maxRenderCount=%d, avgRenderCount=%f, totalRenderCount=%lld, countRenderCount=%d", buf, 0x9Au);
  }
}

uint64_t getKernelTelemetryState(MTLTelemetryKernelStateRec *a1)
{
  mach_port_t v2 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v3 = IOServiceMatching("AGXAccelerator");
  uint64_t result = IOServiceGetMatchingService(v2, v3);
  if (result)
  {
    io_registry_entry_t v5 = result;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDictionaryRef CFProperty = (const __CFDictionary *)IORegistryEntryCreateCFProperty(result, @"InternalStatistics", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    if (CFProperty)
    {
      CFDictionaryRef v8 = CFProperty;
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(CFProperty, @"Allocated PB Size");
      if (Value) {
        CFNumberGetValue(Value, kCFNumberSInt32Type, a1);
      }
      CFRelease(v8);
    }
    CFDictionaryRef v10 = (const __CFDictionary *)IORegistryEntryCreateCFProperty(v5, @"PerformanceStatistics", v6, 0);
    if (v10)
    {
      CFDictionaryRef v11 = v10;
      CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(v10, @"SplitSceneCount");
      if (v12) {
        CFNumberGetValue(v12, kCFNumberSInt32Type, &a1->spmRenderCount);
      }
      CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(v11, @"CommandBufferRenderCount");
      if (v13) {
        CFNumberGetValue(v13, kCFNumberSInt32Type, &a1->renderCount);
      }
      CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(v11, @"TiledSceneBytes");
      if (v14) {
        CFNumberGetValue(v14, kCFNumberSInt32Type, &a1->tiledSceneBytes);
      }
      CFRelease(v11);
    }
    return IOObjectRelease(v5);
  }
  return result;
}

void MTLGPUDebugStageBufferHandles::clear(MTLGPUDebugStageBufferHandles *this)
{
  uint64_t v2 = 0;
  this->handles[30] = 0;
  *(_OWORD *)&this->handles[26] = 0u;
  *(_OWORD *)&this->handles[28] = 0u;
  *(_OWORD *)&this->handles[22] = 0u;
  *(_OWORD *)&this->handles[24] = 0u;
  *(_OWORD *)&this->handles[18] = 0u;
  *(_OWORD *)&this->handles[20] = 0u;
  *(_OWORD *)&this->handles[14] = 0u;
  *(_OWORD *)&this->handles[16] = 0u;
  *(_OWORD *)&this->handles[10] = 0u;
  *(_OWORD *)&this->handles[12] = 0u;
  *(_OWORD *)&this->handles[6] = 0u;
  *(_OWORD *)&this->handles[8] = 0u;
  *(_OWORD *)&this->handles[2] = 0u;
  *(_OWORD *)&this->handles[4] = 0u;
  *(_OWORD *)this->handles = 0u;
  *(_OWORD *)this->offsets = 0u;
  *(_OWORD *)&this->offsets[2] = 0u;
  *(_OWORD *)&this->offsets[4] = 0u;
  *(_OWORD *)&this->offsets[6] = 0u;
  *(_OWORD *)&this->offsets[8] = 0u;
  *(_OWORD *)&this->offsets[10] = 0u;
  *(_OWORD *)&this->offsets[12] = 0u;
  *(_OWORD *)&this->offsets[14] = 0u;
  *(_OWORD *)&this->offsets[16] = 0u;
  *(_OWORD *)&this->offsets[18] = 0u;
  *(_OWORD *)&this->offsets[20] = 0u;
  *(_OWORD *)&this->offsets[22] = 0u;
  *(_OWORD *)&this->offsets[24] = 0u;
  *(_OWORD *)&this->offsets[26] = 0u;
  *(_OWORD *)&this->offsets[28] = 0u;
  this->strides[30] = -1;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *(_OWORD *)&this->strides[26] = v3;
  *(_OWORD *)&this->strides[28] = v3;
  *(_OWORD *)&this->strides[22] = v3;
  *(_OWORD *)&this->strides[24] = v3;
  *(_OWORD *)&this->strides[18] = v3;
  *(_OWORD *)&this->strides[20] = v3;
  *(_OWORD *)&this->strides[14] = v3;
  *(_OWORD *)&this->strides[16] = v3;
  *(_OWORD *)&this->strides[10] = v3;
  *(_OWORD *)&this->strides[12] = v3;
  *(_OWORD *)&this->strides[6] = v3;
  *(_OWORD *)&this->strides[8] = v3;
  *(_OWORD *)&this->strides[2] = v3;
  *(_OWORD *)&this->strides[4] = v3;
  *(_OWORD *)this->strides = v3;
  resources = this->resources;
  this->offsets[30] = 0;
  do
  {

    resources[v2++] = 0;
  }
  while (v2 != 31);
  this->needsFlush = 1;
}

unint64_t MTLGPUDebugStageBufferHandles::setBuffer(MTLGPUDebugStageBufferHandles *this, MTLGPUDebugBuffer *a2, char *a3, uint64_t a4)
{
  return MTLGPUDebugStageBufferHandles::setBuffer(this, a2, a3, (void *)0xFFFFFFFFFFFFFFFFLL, a4);
}

unint64_t MTLGPUDebugStageBufferHandles::setBuffer(MTLGPUDebugStageBufferHandles *this, MTLGPUDebugBuffer *a2, char *a3, void *a4, uint64_t a5)
{
  this->needsFlush = 1;
  CFDictionaryRef v10 = (id *)&this->handles[a5];

  v10[31] = a2;
  v10[62] = a3;
  v10[93] = a4;
  *CFDictionaryRef v10 = (id)[(MTLGPUDebugBuffer *)a2 handleForOffset:a3];
  CFDictionaryRef v11 = (char *)this + 4 * a5;
  *((_DWORD *)v11 + 248) = [(MTLGPUDebugBuffer *)a2 length] - a3;
  unint64_t result = [(MTLGPUDebugBuffer *)a2 underlyingGPUAddress];
  CFNumberRef v13 = (char *)this + 16 * a5;
  *((void *)v13 + 140) = &a3[result];
  *((void *)v13 + 141) = &a3[result + *((unsigned int *)v11 + 248)];
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::setBufferOffset(MTLGPUDebugStageBufferHandles *this, unint64_t a2, uint64_t a3)
{
  return MTLGPUDebugStageBufferHandles::setBufferOffset(this, a2, 0xFFFFFFFFFFFFFFFFLL, a3);
}

uint64_t MTLGPUDebugStageBufferHandles::setBufferOffset(MTLGPUDebugStageBufferHandles *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  this->needsFlush = 1;
  int v7 = &this->handles[a4];
  v7[62] = a2;
  v7[93] = a3;
  *int v7 = [(id)v7[31] handleForOffset:a2];
  CFDictionaryRef v8 = (char *)this + 4 * a4;
  *((_DWORD *)v8 + 248) = [(id)v7[31] length] - a2;
  uint64_t result = [(id)v7[31] underlyingGPUAddress];
  CFDictionaryRef v10 = (char *)this + 16 * a4;
  *((void *)v10 + 140) = result + a2;
  *((void *)v10 + 141) = result + a2 + *((unsigned int *)v8 + 248);
  return result;
}

id MTLGPUDebugStageBufferHandles::setResource(uint64_t a1, void *a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 1616) = 1;
  uint64_t v6 = a1 + 8 * a3;
  *(void *)(v6 + 496) = 0;
  *(void *)uint64_t v6 = [a2 handleForOffset:0];

  id result = a2;
  *(void *)(v6 + 248) = result;
  *(_DWORD *)(a1 + 4 * a3 + 992) = 0;
  uint64_t v8 = a1 + 16 * a3;
  *(void *)(v8 + 1128) = 0;
  *(void *)(v8 + 1120) = 0;
  return result;
}

MTLGPUDebugThreadgroupLengths *MTLGPUDebugThreadgroupLengths::setThreadgroupMemoryLength(MTLGPUDebugThreadgroupLengths *this, unsigned int a2, uint64_t a3)
{
  this->needsFlush = 1;
  this->threadgroupSizes[a3] = a2;
  return this;
}

unint64_t MTLGPUDebugThreadgroupLengths::setupTableEntries(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v3 = *a2;
  if (a3)
  {
    if (!v3)
    {
LABEL_6:
      *(_DWORD *)(a1 + 372) = 0;
      *(_DWORD *)(a1 + 376) = a3;
      return (a3 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    do
    {
LABEL_5:
      unsigned int v4 = __clz(__rbit32(v3));
      v3 &= ~(1 << v4);
      *a2 = v3;
      uint64_t v5 = *(unsigned int *)(a1 + 4 * v4);
      uint64_t v6 = a1 + 8 * v4;
      *(_DWORD *)(v6 + 124) = a3;
      *(_DWORD *)(v6 + 128) = v5;
      a3 += v5;
    }
    while (v3);
    goto LABEL_6;
  }
  if (v3) {
    goto LABEL_5;
  }
  return 0;
}

MTLGPUDebugTileThreadgroup *MTLGPUDebugTileThreadgroup::setThreadgroupMemoryLength(MTLGPUDebugTileThreadgroup *this, unsigned int a2, unsigned int a3, uint64_t a4)
{
  this->needsFlush = 1;
  unsigned int v4 = &this->entries[a4];
  v4->offset = a3;
  v4->length = a2;
  return this;
}

uint64_t MTLGPUDebugTileThreadgroup::setupTableEntries(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unsigned int v3 = 0;
  do
  {
    unsigned int v4 = __clz(__rbit32(v2));
    v2 &= ~(1 << v4);
    unsigned int v5 = *(_DWORD *)(a1 + 8 * v4 + 4) + *(_DWORD *)(a1 + 8 * v4);
    if (v3 <= v5) {
      unsigned int v3 = v5;
    }
  }
  while (v2);
  *a2 = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 252) = v3;
  return (v3 + 15) & 0xFFFFFFF0;
}

void emitSamplerDistribution(MTLTelemetryDevice *a1, MTLTelemetrySamplerDistributionRec *a2)
{
  unsigned int v2 = a1;
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v175 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v5 = 0;
    uint64_t v91 = (int)v4;
    uint64_t v6 = -1280;
    uint64_t v98 = v4;
    do
    {
      samplerDistribution = v2->samplerDistribution;
      if (!*(unsigned int *)((char *)&samplerDistribution->var1[v3 / 0x500 + 1][0].var0 + v6)) {
        goto LABEL_47;
      }
      if (*MEMORY[0x263F12D18])
      {
        if (*MEMORY[0x263F12D18] != 1) {
          goto LABEL_47;
        }
        uint64_t v8 = "unknown";
        if (v4 <= 6) {
          uint64_t v8 = off_264E12CA0[v91];
        }
        v95 = v8;
        int v9 = "unknown";
        if ((v5 & 0xFFFFFFF8) == 0) {
          int v9 = off_264E12CD8[v5];
        }
        v93 = v9;
        CFDictionaryRef v10 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        unsigned int v11 = v10[328];
        unint64_t v12 = *((void *)v10 + 163);
        float v13 = 0.0;
        float v14 = 0.0;
        if (v11) {
          float v14 = (float)v12 / (float)v11;
        }
        unsigned int v15 = v10[334];
        unint64_t v16 = *((void *)v10 + 166);
        if (v15) {
          float v13 = (float)v16 / (float)v15;
        }
        int v17 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        unsigned int v18 = v17[340];
        unint64_t v19 = *((void *)v17 + 169);
        float v20 = 0.0;
        float v21 = 0.0;
        if (v18) {
          float v21 = (float)v19 / (float)v18;
        }
        unsigned int v22 = v17[346];
        unint64_t v23 = *((void *)v17 + 172);
        if (v22) {
          float v20 = (float)v23 / (float)v22;
        }
        uint64_t v24 = (float *)((char *)&samplerDistribution->var0 + v3 + v6);
        unsigned int v25 = *((_DWORD *)v24 + 351);
        float v26 = v24[350];
        float v27 = 0.0;
        float v28 = 0.0;
        if (v25) {
          float v28 = v26 / (float)v25;
        }
        unsigned int v29 = *((_DWORD *)v24 + 355);
        float v30 = v24[354];
        if (v29) {
          float v27 = v30 / (float)v29;
        }
        int v31 = v10[324];
        int v32 = v10[325];
        int v33 = v10[330];
        int v34 = v10[331];
        int v35 = v17[336];
        int v36 = v17[337];
        int v37 = v17[342];
        int v38 = v17[343];
        float v39 = v24[348];
        float v40 = v24[349];
        float v41 = v24[352];
        float v42 = v24[353];
        int v43 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        int v44 = v43[356];
        int v45 = v43[357];
        unsigned int v46 = v43[360];
        unint64_t v47 = *((void *)v43 + 179);
        if (v46) {
          float v48 = (float)v47 / (float)v46;
        }
        else {
          float v48 = 0.0;
        }
        printf("\n\nSampler, wrapMode=%s, compareFunc=%s, total=%u, minMipFilter=%u, maxMipFilter=%u, avgMipFilter=%f, totalMipFilter=%llu, countMipFilter=%u, minTriLinearFilter=%u, maxTriLinearFilter=%u, avgTriLinearFilter=%f, totalTriLinearFilter=%llu, countTriLinearFilter=%u, minNormalizedCoords=%u, maxNormalizedCoords=%u, avgNormalizedCoords=%f, totalNormalizedCoords=%llu, countNormalizedCoords=%u, minMaxAniso=%u, maxMaxAniso=%u, avgMaxAniso=%f, totalMaxAniso=%llu, countMaxAniso=%u, minLodMinClamp=%.2f, maxLodMinClamp=%.2f, avgLodMinClamp=%f, totalLodMinClamp=%.2f, countLodMinClamp=%u, minLodMaxClamp=%.2f, maxLodMaxClamp=%.2f, avgLodMaxClamp=%f, totalLodMaxClamp=%.2f, countLodMaxClamp=%u, minLodAvg=%u, maxLodAvg=%u, avgLodAvg=%f, totalLodAvg=%llu, countLodAvg=%u", v95, v93, samplerDistribution->var0, v31, v32, v14, v12, v11, v33, v34,
          v13,
          v16,
          v15,
          v35,
          v36,
          v21,
          v19,
          v18,
          v37,
          v38,
          v20,
          v23,
          v22,
          v39,
          v40,
          v28,
          v26,
          v25,
          v41,
          v42,
          v27,
          v30,
          v29,
          v44,
          v45,
          v48,
          v47,
          v46);
        unsigned int v2 = a1;
        uint64_t v4 = v98;
      }
      __int16 v49 = [(MTLTelemetryDevice *)v2 telemetryLog];
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        double v50 = "unknown";
        if (v4 <= 6) {
          double v50 = off_264E12CA0[v91];
        }
        v96 = v50;
        __int16 v51 = "unknown";
        if ((v5 & 0xFFFFFFF8) == 0) {
          __int16 v51 = off_264E12CD8[v5];
        }
        v94 = v51;
        uint64_t v52 = (unint64_t *)((char *)&samplerDistribution->var0 + v3 + v6);
        unsigned int v53 = *((_DWORD *)v52 + 328);
        float v54 = 0.0;
        float v55 = 0.0;
        if (v53) {
          float v55 = (float)v52[163] / (float)v53;
        }
        unint64_t v92 = v52[163];
        unsigned int v56 = *((_DWORD *)v52 + 334);
        unint64_t v57 = v52[166];
        if (v56) {
          float v54 = (float)v57 / (float)v56;
        }
        int v58 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        unsigned int v59 = v58[340];
        unint64_t v60 = *((void *)v58 + 169);
        float v61 = 0.0;
        float v62 = 0.0;
        if (v59) {
          float v62 = (float)v60 / (float)v59;
        }
        unsigned int v63 = v58[346];
        unint64_t v64 = *((void *)v58 + 172);
        if (v63) {
          float v61 = (float)v64 / (float)v63;
        }
        __int16 v65 = (float *)((char *)&samplerDistribution->var0 + v3 + v6);
        unsigned int v66 = *((_DWORD *)v65 + 351);
        float v67 = v65[350];
        float v68 = 0.0;
        float v69 = 0.0;
        if (v66) {
          float v69 = v67 / (float)v66;
        }
        unsigned int v70 = *((_DWORD *)v65 + 355);
        float v71 = v65[354];
        if (v70) {
          float v68 = v71 / (float)v70;
        }
        unsigned int var0 = v2->samplerDistribution->var0;
        uint64_t v73 = *((unsigned int *)v52 + 324);
        int v74 = *((_DWORD *)v52 + 325);
        int v75 = *((_DWORD *)v52 + 330);
        int v76 = *((_DWORD *)v52 + 331);
        int v77 = v58[336];
        int v78 = v58[337];
        int v79 = v58[342];
        int v80 = v58[343];
        float v81 = v65[348];
        float v82 = v65[349];
        float v83 = v65[352];
        float v84 = v65[353];
        uint64_t v85 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        int v86 = v85[356];
        int v87 = v85[357];
        unsigned int v88 = v85[360];
        unint64_t v89 = *((void *)v85 + 179);
        if (v88) {
          float v90 = (float)v89 / (float)v88;
        }
        else {
          float v90 = 0.0;
        }
        *(_DWORD *)buf = 136324610;
        uint64_t v176 = v73;
        v100 = v96;
        __int16 v101 = 2080;
        v102 = v94;
        __int16 v103 = 1024;
        unsigned int v104 = var0;
        __int16 v105 = 1024;
        int v106 = v73;
        __int16 v107 = 1024;
        int v108 = v74;
        __int16 v109 = 2048;
        double v110 = v55;
        __int16 v111 = 2048;
        unint64_t v112 = v92;
        __int16 v113 = 1024;
        unsigned int v114 = v53;
        __int16 v115 = 1024;
        int v116 = v75;
        __int16 v117 = 1024;
        int v118 = v76;
        __int16 v119 = 2048;
        double v120 = v54;
        __int16 v121 = 2048;
        unint64_t v122 = v57;
        __int16 v123 = 1024;
        unsigned int v124 = v56;
        __int16 v125 = 1024;
        int v126 = v77;
        __int16 v127 = 1024;
        int v128 = v78;
        __int16 v129 = 2048;
        double v130 = v62;
        __int16 v131 = 2048;
        unint64_t v132 = v60;
        __int16 v133 = 1024;
        unsigned int v134 = v59;
        __int16 v135 = 1024;
        int v136 = v79;
        __int16 v137 = 1024;
        int v138 = v80;
        __int16 v139 = 2048;
        double v140 = v61;
        __int16 v141 = 2048;
        unint64_t v142 = v64;
        __int16 v143 = 1024;
        unsigned int v144 = v63;
        __int16 v145 = 2048;
        double v146 = v81;
        __int16 v147 = 2048;
        double v148 = v82;
        __int16 v149 = 2048;
        double v150 = v69;
        __int16 v151 = 2048;
        double v152 = v67;
        __int16 v153 = 1024;
        unsigned int v154 = v66;
        __int16 v155 = 2048;
        double v156 = v83;
        __int16 v157 = 2048;
        double v158 = v84;
        __int16 v159 = 2048;
        double v160 = v68;
        __int16 v161 = 2048;
        double v162 = v71;
        __int16 v163 = 1024;
        unsigned int v164 = v70;
        __int16 v165 = 1024;
        int v166 = v86;
        __int16 v167 = 1024;
        int v168 = v87;
        __int16 v169 = 2048;
        double v170 = v90;
        __int16 v171 = 2048;
        unint64_t v172 = v89;
        __int16 v173 = 1024;
        unsigned int v174 = v88;
        _os_log_impl(&dword_23BD25000, v49, OS_LOG_TYPE_DEFAULT, "Sampler, wrapMode=%s, compareFunc=%s, total=%u, minMipFilter=%u, maxMipFilter=%u, avgMipFilter=%f, totalMipFilter=%llu, countMipFilter=%u, minTriLinearFilter=%u, maxTriLinearFilter=%u, avgTriLinearFilter=%f, totalTriLinearFilter=%llu, countTriLinearFilter=%u, minNormalizedCoords=%u, maxNormalizedCoords=%u, avgNormalizedCoords=%f, totalNormalizedCoords=%llu, countNormalizedCoords=%u, minMaxAniso=%u, maxMaxAniso=%u, avgMaxAniso=%f, totalMaxAniso=%llu, countMaxAniso=%u, minLodMinClamp=%.2f, maxLodMinClamp=%.2f, avgLodMinClamp=%f, totalLodMinClamp=%.2f, countLodMinClamp=%u, minLodMaxClamp=%.2f, maxLodMaxClamp=%.2f, avgLodMaxClamp=%f, totalLodMaxClamp=%.2f, countLodMaxClamp=%u, minLodAvg=%u, maxLodAvg=%u, avgLodAvg=%f, totalLodAvg=%llu, countLodAvg=%u", buf, 0x136u);
        unsigned int v2 = a1;
        uint64_t v4 = v98;
      }
LABEL_47:
      ++v5;
      v6 += 160;
    }
    while (v6);
    ++v4;
    v3 += 1280;
  }
  while (v4 != 7);
}

void sub_23BD3E3D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD3E484(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD408A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD409B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto15MTLResidencySet}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD40AFC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void addBufferForUsageValidation(MTLLegacySVHeap *a1, MTLLegacySVBuffer *a2)
{
  if (*((unsigned char *)&a1->super.super._externalReferences + 4))
  {
    p_enableResourceUsageValidation = &a1->_enableResourceUsageValidation;
    os_unfair_lock_lock((os_unfair_lock_t)&a1->_enableResourceUsageValidation);
    unsigned int v5 = [(MTLLegacySVBuffer *)a2 bufferIndex];
    unsigned int v6 = v5;
    p_bufferIndices = &a1->_bufferIndices;
    end = p_bufferIndices->__end_;
    value = p_bufferIndices->__end_cap_.__value_;
    if (end >= value)
    {
      begin = p_bufferIndices->__begin_;
      uint64_t v12 = end - p_bufferIndices->__begin_;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&p_bufferIndices->__end_cap_, v15);
        begin = p_bufferIndices->__begin_;
        end = p_bufferIndices->__end_;
      }
      else
      {
        unint64_t v16 = 0;
      }
      int v17 = (unsigned int *)&v16[4 * v12];
      unsigned int v18 = (unsigned int *)&v16[4 * v15];
      *int v17 = v6;
      CFDictionaryRef v10 = v17 + 1;
      while (end != begin)
      {
        unsigned int v19 = *--end;
        *--int v17 = v19;
      }
      p_bufferIndices->__begin_ = v17;
      p_bufferIndices->__end_ = v10;
      p_bufferIndices->__end_cap_.__value_ = v18;
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      unsigned int *end = v5;
      CFDictionaryRef v10 = end + 1;
    }
    p_bufferIndices->__end_ = v10;
    os_unfair_lock_unlock((os_unfair_lock_t)p_enableResourceUsageValidation);
  }
}

void sub_23BD40FEC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void addTextureForUsageValidation(MTLLegacySVHeap *a1, MTLLegacySVTexture *a2)
{
  if (*((unsigned char *)&a1->super.super._externalReferences + 4))
  {
    p_textureLock = &a1->_textureLock;
    os_unfair_lock_lock(&a1->_textureLock);
    unsigned int v5 = [(MTLLegacySVTexture *)a2 gpuIdentifier];
    unsigned int v6 = v5;
    p_textureIndices = &a1->_textureIndices;
    end = p_textureIndices->__end_;
    value = p_textureIndices->__end_cap_.__value_;
    if (end >= value)
    {
      begin = p_textureIndices->__begin_;
      uint64_t v12 = end - p_textureIndices->__begin_;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&p_textureIndices->__end_cap_, v15);
        begin = p_textureIndices->__begin_;
        end = p_textureIndices->__end_;
      }
      else
      {
        unint64_t v16 = 0;
      }
      int v17 = (unsigned int *)&v16[4 * v12];
      unsigned int v18 = (unsigned int *)&v16[4 * v15];
      *int v17 = v6;
      CFDictionaryRef v10 = v17 + 1;
      while (end != begin)
      {
        unsigned int v19 = *--end;
        *--int v17 = v19;
      }
      p_textureIndices->__begin_ = v17;
      p_textureIndices->__end_ = v10;
      p_textureIndices->__end_cap_.__value_ = v18;
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      unsigned int *end = v5;
      CFDictionaryRef v10 = end + 1;
    }
    p_textureIndices->__end_ = v10;
    os_unfair_lock_unlock(p_textureLock);
  }
}

void sub_23BD4125C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD41464(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

__int32 *std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(__int32 *a1, __int32 *a2, __int32 *a3)
{
  id result = wmemchr(a1, *a3, a2 - a1);
  if (!result) {
    id result = a2;
  }
  unsigned int v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      if (*v6 != *a3) {
        *result++ = *v6;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void sub_23BD41568(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD415F8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD41688(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD417FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void sub_23BD428E8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD429C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_23BD42A78(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD42B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_23BD42C18(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD42CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_23BD42DA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD42E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<NSData *,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void sub_23BD456A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD457B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD459A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD45B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD45C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD461F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto11MTLResource}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD4626C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto7MTLHeap}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD462E4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto23MTLVisibleFunctionTable}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD4635C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto28MTLIntersectionFunctionTable}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD463D4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD468EC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

id unwrapAccelerationStructureDescriptor(void *a1)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)[a1 copy];
  unsigned int v2 = objc_opt_class();
  id v39 = v1;
  if ([v2 isSubclassOfClass:objc_opt_class()])
  {
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    unint64_t v3 = (void *)[v1 geometryDescriptors];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v56 objects:v64 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v57;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v57 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v56 + 1) + 8 * i);
          objc_msgSend(v8, "setPrimitiveDataBuffer:", objc_msgSend((id)objc_msgSend(v8, "primitiveDataBuffer"), "baseObject"));
          int v9 = objc_opt_class();
          if ([v9 isSubclassOfClass:objc_opt_class()])
          {
            objc_msgSend(v8, "setVertexBuffer:", objc_msgSend((id)objc_msgSend(v8, "vertexBuffer"), "baseObject"));
            objc_msgSend(v8, "setIndexBuffer:", objc_msgSend((id)objc_msgSend(v8, "indexBuffer"), "baseObject"));
            objc_msgSend(v8, "setTransformationMatrixBuffer:", objc_msgSend((id)objc_msgSend(v8, "transformationMatrixBuffer"), "baseObject"));
          }
          else
          {
            CFDictionaryRef v10 = objc_opt_class();
            if ([v10 isSubclassOfClass:objc_opt_class()])
            {
              long long v54 = 0u;
              long long v55 = 0u;
              long long v52 = 0u;
              long long v53 = 0u;
              unsigned int v11 = (void *)[v8 vertexBuffers];
              uint64_t v12 = [v11 countByEnumeratingWithState:&v52 objects:v63 count:16];
              if (v12)
              {
                uint64_t v13 = v12;
                uint64_t v14 = *(void *)v53;
                do
                {
                  for (uint64_t j = 0; j != v13; ++j)
                  {
                    if (*(void *)v53 != v14) {
                      objc_enumerationMutation(v11);
                    }
                    objc_msgSend(*(id *)(*((void *)&v52 + 1) + 8 * j), "setBuffer:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v52 + 1) + 8 * j), "buffer"), "baseObject"));
                  }
                  uint64_t v13 = [v11 countByEnumeratingWithState:&v52 objects:v63 count:16];
                }
                while (v13);
              }
              objc_msgSend(v8, "setIndexBuffer:", objc_msgSend((id)objc_msgSend(v8, "indexBuffer"), "baseObject"));
              objc_msgSend(v8, "setTransformationMatrixBuffer:", objc_msgSend((id)objc_msgSend(v8, "transformationMatrixBuffer"), "baseObject"));
            }
            else
            {
              unint64_t v16 = objc_opt_class();
              if ([v16 isSubclassOfClass:objc_opt_class()])
              {
                long long v50 = 0u;
                long long v51 = 0u;
                long long v48 = 0u;
                long long v49 = 0u;
                int v17 = (void *)[v8 boundingBoxBuffers];
                uint64_t v18 = [v17 countByEnumeratingWithState:&v48 objects:v62 count:16];
                if (v18)
                {
                  uint64_t v19 = v18;
                  uint64_t v20 = *(void *)v49;
                  do
                  {
                    for (uint64_t k = 0; k != v19; ++k)
                    {
                      if (*(void *)v49 != v20) {
                        objc_enumerationMutation(v17);
                      }
                      objc_msgSend(*(id *)(*((void *)&v48 + 1) + 8 * k), "setBuffer:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v48 + 1) + 8 * k), "buffer"), "baseObject"));
                    }
                    uint64_t v19 = [v17 countByEnumeratingWithState:&v48 objects:v62 count:16];
                  }
                  while (v19);
                }
              }
              else
              {
                unsigned int v22 = objc_opt_class();
                if ([v22 isSubclassOfClass:objc_opt_class()])
                {
                  objc_msgSend(v8, "setBoundingBoxBuffer:", objc_msgSend((id)objc_msgSend(v8, "boundingBoxBuffer"), "baseObject"));
                }
                else
                {
                  unint64_t v23 = objc_opt_class();
                  if ([v23 isSubclassOfClass:objc_opt_class()])
                  {
                    objc_msgSend(v8, "setControlPointBuffer:", objc_msgSend((id)objc_msgSend(v8, "controlPointBuffer"), "baseObject"));
                    objc_msgSend(v8, "setRadiusBuffer:", objc_msgSend((id)objc_msgSend(v8, "radiusBuffer"), "baseObject"));
                    objc_msgSend(v8, "setIndexBuffer:", objc_msgSend((id)objc_msgSend(v8, "indexBuffer"), "baseObject"));
                  }
                  else
                  {
                    uint64_t v24 = objc_opt_class();
                    if ([v24 isSubclassOfClass:objc_opt_class()])
                    {
                      long long v46 = 0u;
                      long long v47 = 0u;
                      long long v44 = 0u;
                      long long v45 = 0u;
                      unsigned int v25 = (void *)[v8 controlPointBuffers];
                      uint64_t v26 = [v25 countByEnumeratingWithState:&v44 objects:v61 count:16];
                      if (v26)
                      {
                        uint64_t v27 = v26;
                        uint64_t v28 = *(void *)v45;
                        do
                        {
                          for (uint64_t m = 0; m != v27; ++m)
                          {
                            if (*(void *)v45 != v28) {
                              objc_enumerationMutation(v25);
                            }
                            objc_msgSend(*(id *)(*((void *)&v44 + 1) + 8 * m), "setBuffer:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v44 + 1) + 8 * m), "buffer"), "baseObject"));
                          }
                          uint64_t v27 = [v25 countByEnumeratingWithState:&v44 objects:v61 count:16];
                        }
                        while (v27);
                      }
                      long long v42 = 0u;
                      long long v43 = 0u;
                      long long v40 = 0u;
                      long long v41 = 0u;
                      float v30 = (void *)[v8 radiusBuffers];
                      uint64_t v31 = [v30 countByEnumeratingWithState:&v40 objects:v60 count:16];
                      if (v31)
                      {
                        uint64_t v32 = v31;
                        uint64_t v33 = *(void *)v41;
                        do
                        {
                          for (uint64_t n = 0; n != v32; ++n)
                          {
                            if (*(void *)v41 != v33) {
                              objc_enumerationMutation(v30);
                            }
                            objc_msgSend(*(id *)(*((void *)&v40 + 1) + 8 * n), "setBuffer:", objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v40 + 1) + 8 * n), "buffer"), "baseObject"));
                          }
                          uint64_t v32 = [v30 countByEnumeratingWithState:&v40 objects:v60 count:16];
                        }
                        while (v32);
                      }
                      objc_msgSend(v8, "setIndexBuffer:", objc_msgSend((id)objc_msgSend(v8, "indexBuffer"), "baseObject"));
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v56 objects:v64 count:16];
      }
      while (v5);
    }
  }
  else
  {
    int v35 = objc_opt_class();
    if ([v35 isSubclassOfClass:objc_opt_class()])
    {
      objc_msgSend(v1, "setInstanceDescriptorBuffer:", objc_msgSend((id)objc_msgSend(v1, "instanceDescriptorBuffer"), "baseObject"));
      if (objc_msgSend((id)objc_msgSend(v1, "instancedAccelerationStructures"), "count"))
      {
        unint64_t v36 = 0;
        do
        {
          objc_msgSend((id)objc_msgSend(v1, "instancedAccelerationStructures"), "setObject:atIndexedSubscript:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "instancedAccelerationStructures"), "objectAtIndexedSubscript:", v36), "baseObject"), v36);
          ++v36;
        }
        while (v36 < objc_msgSend((id)objc_msgSend(v1, "instancedAccelerationStructures"), "count"));
      }
      objc_msgSend(v1, "setMotionTransformBuffer:", objc_msgSend((id)objc_msgSend(v1, "motionTransformBuffer"), "baseObject"));
    }
    else
    {
      int v37 = objc_opt_class();
      if ([v37 isSubclassOfClass:objc_opt_class()])
      {
        objc_msgSend(v1, "setInstanceDescriptorBuffer:", objc_msgSend((id)objc_msgSend(v1, "instanceDescriptorBuffer"), "baseObject"));
        objc_msgSend(v1, "setInstanceCountBuffer:", objc_msgSend((id)objc_msgSend(v1, "instanceCountBuffer"), "baseObject"));
        objc_msgSend(v1, "setMotionTransformBuffer:", objc_msgSend((id)objc_msgSend(v1, "motionTransformBuffer"), "baseObject"));
        objc_msgSend(v1, "setMotionTransformCountBuffer:", objc_msgSend((id)objc_msgSend(v1, "motionTransformCountBuffer"), "baseObject"));
      }
    }
  }
  return v39;
}

void sub_23BD483DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD484E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLAccelerationStructureTypeFromDescriptor(MTLAccelerationStructureDescriptor *a1)
{
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 2;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 2;
  }
  else {
    return 0;
  }
}

__CFString *MTLAccelerationStructureStringFromType(uint64_t a1)
{
  uint64_t v1 = @"Unknown";
  if (a1 == 2) {
    uint64_t v1 = @"MTLInstanceAccelerationStructure";
  }
  if (a1 == 1) {
    return @"MTLPrimitiveAccelerationStructure";
  }
  else {
    return v1;
  }
}

uint64_t MTLGPUDebugBufferHandleToOffset(uint64_t a1)
{
  return a1 << 44;
}

void MTLGPUDebugSetBufferForResourceHandle(MTLGPUDebugDevice *a1, uint64_t a2, MTLGPUDebugBuffer *a3)
{
  uint64_t v6 = (id *)((char *)a1 + 296);
  std::mutex::lock((std::mutex *)((char *)a1 + 296));
  objc_msgSend(v6[15], "setArgumentBuffer:offset:", v6[16], objc_msgSend(v6[15], "encodedLength") * a2);
  id v7 = v6[15];
  objc_msgSend(v7, "setBuffer:offset:atIndex:", -[MTLToolsObject baseObject](a3, "baseObject"), -[MTLGPUDebugBuffer offset](a3, "offset"), 0);
  if ((*((unsigned char *)a1 + 285) & 4) != 0)
  {
    uint64_t v8 = (void *)[v7 constantDataAtIndex:1];
    *uint64_t v8 = [(MTLGPUDebugBuffer *)a3 bufferEndAddress];
  }

  std::mutex::unlock((std::mutex *)v6);
}

void sub_23BD48FF8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

MTLGPUDebugTexture *CreateTexture(void *a1, uint64_t a2)
{
  unint64_t v3 = [[MTLGPUDebugTexture alloc] initWithTextureView:a1 parentBuffer:a2 heap:0 device:*(void *)(a2 + 24)];

  return v3;
}

uint64_t MTLGPUDebugLog(void)
{
  if (MTLGPUDebugLog(void)::onceToken != -1) {
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  }
  return MTLGPUDebugLog(void)::logObject;
}

os_log_t ___Z14MTLGPUDebugLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.Metal", "GPUDebug");
  MTLGPUDebugLog(void)::logObject = (uint64_t)result;
  return result;
}

void MetalBuffer::MetalBuffer(MetalBuffer *this, MetalBufferHeap *a2, unsigned int a3)
{
  this->heap = a2;
  this->index = a3;
}

{
  this->heap = a2;
  this->index = a3;
}

void MetalBuffer::free(MetalBuffer *this)
{
}

void MetalBufferHeap::freeBuffer(uint64_t a1, uint64_t a2)
{
  std::mutex::lock((std::mutex *)a1);
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(int *)(a1 + 112) + 1;
  *(_DWORD *)(a1 + 112) = v5;
  *(_DWORD *)(*(void *)(a1 + 88) + 4 * v5) = v4;
  *(void *)(a1 + 128) -= *(void *)(a1 + 136);
  *(void *)a2 = 0;

  std::mutex::unlock((std::mutex *)a1);
}

uint64_t MetalBuffer::getMTLBuffer(MetalBuffer *this)
{
  return *(void *)(*((void *)this->heap + 8) + 8 * this->index);
}

uint64_t MetalBufferHeap::init(uint64_t this, MTLGPUDebugDevice *a2, uint64_t a3)
{
  *(void *)(this + 136) = a3;
  *(void *)(this + 144) = a2;
  return this;
}

void MetalBufferHeap::grow(MetalBufferHeap *this, unsigned int a2)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 8);
  uint64_t v5 = *((void *)this + 9);
  unint64_t v3 = (char *)this + 64;
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 != a2)
  {
    std::vector<unsigned int>::size_type v7 = a2;
    std::vector<objc_object  {objcproto9MTLBuffer}*>::resize((uint64_t)v3, a2);
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 88), v7);
    for (; v6 < (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3; ++v6)
    {
      *(void *)(*((void *)this + 8) + 8 * v6) = [*((id *)this + 18) newInternalBufferWithLength:*((void *)this + 17) options:256];
      *((void *)this + 15) += *((void *)this + 17);
      if (MTLGPUDebugLog(void)::onceToken != -1) {
        dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
      }
      uint64_t v8 = MTLGPUDebugLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
        MetalBufferHeap::grow(v10, (unint64_t *)this + 15, (double *)v11, v8);
      }
      uint64_t v9 = *((int *)this + 28) + 1;
      *((_DWORD *)this + 28) = v9;
      *(_DWORD *)(*((void *)this + 11) + 4 * v9) = v6;
    }
  }
}

void std::vector<objc_object  {objcproto9MTLBuffer}*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<objc_object  {objcproto9MTLBuffer}*>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

std::mutex *MetalBufferHeap::allocBuffer(std::mutex *this)
{
  std::mutex::lock(this);
  if ((*(_DWORD *)&this[1].__m_.__opaque[40] & 0x80000000) != 0) {
    MetalBufferHeap::grow((MetalBufferHeap *)this, ((unint64_t)(*(void *)this[1].__m_.__opaque - this[1].__m_.__sig) >> 3) + 1);
  }
  this[2].__m_.__sig += *(void *)this[2].__m_.__opaque;
  if (MTLGPUDebugLog(void)::onceToken != -1) {
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  }
  std::vector<unsigned int>::size_type v2 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    MetalBufferHeap::allocBuffer((unint64_t *)&this[2], (uint64_t)this, v2);
  }
  --*(_DWORD *)&this[1].__m_.__opaque[40];
  std::mutex::unlock(this);
  return this;
}

void sub_23BD4A020(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void MetalBufferHeap::~MetalBufferHeap(std::mutex *this)
{
  sig = (id *)this[1].__m_.__sig;
  unint64_t v3 = *(id **)this[1].__m_.__opaque;
  while (sig != v3)

  uint64_t v4 = *(void **)&this[1].__m_.__opaque[16];
  if (v4)
  {
    *(void *)&this[1].__m_.__opaque[24] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)this[1].__m_.__sig;
  if (v5)
  {
    *(void *)this[1].__m_.__opaque = v5;
    operator delete(v5);
  }

  std::mutex::~mutex(this);
}

void GPUDebugBufferDescriptorHeap::init(GPUDebugBufferDescriptorHeap *this, MTLGPUDebugDevice *a2, unsigned int a3)
{
  id v6 = objc_alloc_init(MEMORY[0x263F127B8]);
  id v7 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v8 = (void *)MEMORY[0x23ECD5710]();
  [v6 setIndex:0];
  [v6 setAccess:1];
  [v6 setArrayLength:1];
  [v6 setDataType:60];
  objc_msgSend(v7, "addObject:", (id)objc_msgSend(v6, "copy"));
  [v6 setIndex:1];
  [v6 setAccess:0];
  [v6 setArrayLength:1];
  [v6 setDataType:33];
  objc_msgSend(v7, "addObject:", (id)objc_msgSend(v6, "copy"));
  uint64_t v9 = (void *)MEMORY[0x23ECD5710]();
  *((void *)this + 15) = objc_msgSend(-[MTLToolsObject baseObject](a2, "baseObject"), "newArgumentEncoderWithArguments:", v7);

  *((void *)this + 16) = -[MTLGPUDebugDevice newInternalBufferWithLength:options:](a2, "newInternalBufferWithLength:options:", [*((id *)this + 15) encodedLength] * a3, 256);
  if (MTLGPUDebugLog(void)::onceToken != -1) {
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  }
  CFDictionaryRef v10 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    GPUDebugBufferDescriptorHeap::init((id *)this + 16, v10);
  }
  *((void *)this + 14) = 0;
  [*((id *)this + 15) setArgumentBuffer:*((void *)this + 16) offset:0];
  [[MTLGPUDebugBuffer alloc] initWithBuffer:*((void *)a2 + 81) device:a2];
  std::mutex::lock((std::mutex *)this);
  unsigned int v11 = (void *)*((void *)this + 15);
  uint64_t v12 = *((void *)this + 16);
  [v11 encodedLength];
  [v11 setArgumentBuffer:v12 offset:0];
  uint64_t v13 = (void *)*((void *)this + 15);
  [v13 setBuffer:*((void *)a2 + 81) offset:0 atIndex:0];
  *(void *)[v13 constantDataAtIndex:1] = -1;
  std::mutex::unlock((std::mutex *)this);
}

void sub_23BD4A2D8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t GPUDebugBufferDescriptorHeap::createHandle(std::mutex *this, MTLGPUDebugBuffer *a2)
{
  std::mutex::lock(this);
  uint64_t v4 = *(void *)this[1].__m_.__opaque;
  if (this[1].__m_.__sig == v4)
  {
    unint64_t v5 = *(void *)&this[1].__m_.__opaque[40];
    *(void *)&this[1].__m_.__opaque[40] = v5 + 1;
    if (MTLGPUDebugLog(void)::onceToken != -1) {
      dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
    }
    id v6 = MTLGPUDebugLog(void)::logObject;
    if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
      GPUDebugBufferDescriptorHeap::createHandle(v5, v6, v7);
    }
    uint64_t v8 = *(void *)&this[1].__m_.__opaque[16];
    if (v5 >= (*(void *)&this[1].__m_.__opaque[24] - v8) >> 3)
    {
      std::vector<objc_object  {objcproto9MTLBuffer}*>::resize((uint64_t)&this[1].__m_.__opaque[16], v5 + 1);
      uint64_t v8 = *(void *)&this[1].__m_.__opaque[16];
    }
    *(void *)(v8 + 8 * v5) = a2;
  }
  else
  {
    unint64_t v5 = *(unsigned int *)(v4 - 4);
    *(void *)(*(void *)&this[1].__m_.__opaque[16] + 8 * v5) = a2;
    *(void *)this[1].__m_.__opaque -= 4;
  }
  std::mutex::unlock(this);
  return v5;
}

void sub_23BD4A3DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GPUDebugBufferDescriptorHeap::freeBufferHandle(std::mutex *this, uint64_t a2)
{
  std::mutex::lock(this);
  *(void *)(*(void *)&this[1].__m_.__opaque[16] + 8 * a2) = 0;
  unint64_t v4 = *(void *)&this[1].__m_.__opaque[8];
  unint64_t v5 = *(char **)this[1].__m_.__opaque;
  if ((unint64_t)v5 >= v4)
  {
    sig = (char *)this[1].__m_.__sig;
    uint64_t v8 = (v5 - sig) >> 2;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v4 - (void)sig;
    unint64_t v10 = (uint64_t)(v4 - (void)sig) >> 1;
    if (v10 <= v8 + 1) {
      unint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this[1].__m_.__opaque[8], v11);
      sig = (char *)this[1].__m_.__sig;
      unint64_t v5 = *(char **)this[1].__m_.__opaque;
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    *(_DWORD *)uint64_t v13 = a2;
    id v6 = v13 + 4;
    while (v5 != sig)
    {
      int v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    this[1].__m_.__sig = (uint64_t)v13;
    *(void *)this[1].__m_.__opaque = v6;
    *(void *)&this[1].__m_.__opaque[8] = v14;
    if (sig) {
      operator delete(sig);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v5 = a2;
    id v6 = v5 + 4;
  }
  *(void *)this[1].__m_.__opaque = v6;

  std::mutex::unlock(this);
}

void sub_23BD4A4F8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t GPUDebugConstantBufferCache::init(uint64_t this, MTLGPUDebugDevice *a2)
{
  *(void *)(this + 112) = a2;
  return this;
}

void GPUDebugConstantBufferCache::getOrCreateBuffer(GPUDebugConstantBufferCache *this@<X0>, NSData *a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *(void *)this += [(NSData *)a2 length];
  if (MTLGPUDebugLog(void)::onceToken != -1) {
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  }
  uint64_t v7 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    GPUDebugConstantBufferCache::getOrCreateBuffer((uint64_t *)this, v7, v8);
  }
  unint64_t v9 = (unsigned char *)*((void *)this + 14);
  if ((v9[286] & 0x80) != 0) {
    uint64_t v10 = objc_msgSend(v9, "newBufferWithLength:options:", -[NSData length](a2, "length"), 0);
  }
  else {
    uint64_t v10 = objc_msgSend(v9, "newInternalBufferWithLength:options:", -[NSData length](a2, "length"), 0);
  }
  uint64_t v11 = v10;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = ___ZN27GPUDebugConstantBufferCache17getOrCreateBufferEP6NSData_block_invoke;
  v12[3] = &unk_264E12DB0;
  v12[4] = v10;
  [(NSData *)a2 enumerateByteRangesUsingBlock:v12];
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = v11;
  std::mutex::unlock(v6);
}

void sub_23BD4A674(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *___ZN27GPUDebugConstantBufferCache17getOrCreateBufferEP6NSData_block_invoke(uint64_t a1, const void *a2, uint64_t a3, size_t a4)
{
  id v6 = (void *)([*(id *)(a1 + 32) contents] + a3);

  return memcpy(v6, a2, a4);
}

void GPUDebugConstantBufferCache::releaseBuffer(GPUDebugConstantBufferCache *this, KeyBufferPair *a2)
{
  if (a2->buffer)
  {
    unint64_t v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    *(void *)this -= [(MTLBuffer *)a2->buffer length];

    a2->buffer = 0;
    std::mutex::unlock(v4);
  }
}

void sub_23BD4A764(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GlobalResidentBufferList::useBuffers(GlobalResidentBufferList *this, MTLGPUDebugRenderCommandEncoder *a2)
{
  if (*(_DWORD *)&a2->_tileStageActive != *(_DWORD *)this)
  {
    unint64_t v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    for (uint64_t i = *((void *)this + 10);
          (GlobalResidentBufferList *)i != (GlobalResidentBufferList *)((char *)this + 72);
          uint64_t i = *(void *)(i + 8))
    {
      uint64_t v6 = *(void *)(i + 16);
      [(MTLGPUDebugRenderCommandEncoder *)a2 useResource:v6 usage:1];
      [(MTLToolsCommandEncoder *)a2 addRetainedObject:v6];
    }
    *(_DWORD *)&a2->_tileStageActive = *(_DWORD *)this;
    std::mutex::unlock(v4);
  }
}

void sub_23BD4A84C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GlobalResidentBufferList::useBuffers(GlobalResidentBufferList *this, MTLGPUDebugComputeCommandEncoder *a2)
{
  if (*(_DWORD *)&a2->_enableUseResourceValidation != *(_DWORD *)this)
  {
    unint64_t v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    for (uint64_t i = *((void *)this + 10);
          (GlobalResidentBufferList *)i != (GlobalResidentBufferList *)((char *)this + 72);
          uint64_t i = *(void *)(i + 8))
    {
      uint64_t v6 = *(void *)(i + 16);
      [(MTLGPUDebugComputeCommandEncoder *)a2 useResource:v6 usage:1];
      [(MTLToolsCommandEncoder *)a2 addRetainedObject:v6];
    }
    *(_DWORD *)&a2->_enableUseResourceValidatiouint64_t n = *(_DWORD *)this;
    std::mutex::unlock(v4);
  }
}

void sub_23BD4A934(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GlobalResidentBufferList::addBuffer(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  ++*(_DWORD *)a1;
  unint64_t v5 = operator new(0x18uLL);
  uint64_t v6 = *(void **)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  *unint64_t v5 = a1 + 72;
  v5[1] = v6;
  v5[2] = a2;
  *uint64_t v6 = v5;
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v7 + 1;

  std::mutex::unlock(v4);
}

void sub_23BD4A9C4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GlobalResidentBufferList::removeBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unint64_t v3 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  std::list<objc_object  {objcproto9MTLBuffer}*>::remove(a1 + 72, &v4);
  std::mutex::unlock(v3);
}

void sub_23BD4AA24(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *std::list<objc_object  {objcproto9MTLBuffer}*>::remove(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  std::vector<unsigned int>::size_type v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      uint64_t v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          uint64_t v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            uint64_t v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<objc_object  {objcproto9MTLBuffer}*>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          uint64_t v6 = (void *)v6[1];
        }
      }
      std::vector<unsigned int>::size_type v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return std::__list_imp<objc_object  {objcproto9MTLBuffer}*>::clear(v10);
}

void sub_23BD4AAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<objc_object  {objcproto9MTLBuffer}*>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23BD4B644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void instrumentationHeapInit(MTLGPUDebugDevice *a1)
{
  std::vector<unsigned int>::size_type v2 = (std::once_flag::_State_type *)((char *)a1 + 688);
  unint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v5 = &v3;
    uint64_t v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<instrumentationHeapInit(MTLGPUDebugDevice *)::$_0 &&>>);
  }
}

void indirectCommandBufferPipelineInit(MTLGPUDebugDevice *a1)
{
  unint64_t v3 = a1;
  uint64_t v1 = (std::once_flag::_State_type *)((char *)a1 + 696);
  std::vector<unsigned int>::size_type v2 = &v3;
  if (atomic_load_explicit((atomic_ullong *volatile)v1, memory_order_acquire) != -1)
  {
    uint64_t v5 = &v2;
    uint64_t v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<indirectCommandBufferPipelineInit(MTLGPUDebugDevice *)::$_0 &&>>);
  }
}

void LogInstrumentationFailures(MTLGPUDebugImageData *a1, MTLDebugInstrumentationData *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    [(MTLGPUDebugImageData *)a1 functionType];
    uint64_t v4 = [(id)MTLFunctionTypeString() UTF8String];
    if ([(MTLDebugInstrumentationData *)a2 hasArgumentLimitsInstrumentationFailures])
    {
      if (MTLGPUDebugLog(void)::onceToken != -1) {
        dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
      }
      uint64_t v5 = MTLGPUDebugLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_INFO))
      {
        int v14 = 136315394;
        uint64_t v15 = v4;
        __int16 v16 = 2080;
        int v17 = [(NSString *)[(MTLGPUDebugImageData *)a1 loadedImageName] UTF8String];
        uint64_t v6 = "Fatal failure when instrumenting %s \"%s\":\n"
             "\tFunction is not instrumented and faults will not be detected.";
        uint64_t v7 = v5;
        uint32_t v8 = 22;
LABEL_19:
        _os_log_impl(&dword_23BD25000, v7, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v14, v8);
      }
    }
    else if (([(MTLDebugInstrumentationData *)a2 hasArgumentBufferInstrumentationFailures] & 1) != 0|| [(MTLDebugInstrumentationData *)a2 hasGlobalConstantsInstrumentationFailures])
    {
      if (MTLGPUDebugLog(void)::onceToken != -1) {
        dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
      }
      uint64_t v9 = MTLGPUDebugLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = [(NSString *)[(MTLGPUDebugImageData *)a1 loadedImageName] UTF8String];
        if ([(MTLDebugInstrumentationData *)a2 hasArgumentBufferInstrumentationFailures])uint64_t v11 = "\n\tFaults from argument buffers will not be detected."; {
        else
        }
          uint64_t v11 = "";
        int v12 = [(MTLDebugInstrumentationData *)a2 hasGlobalConstantsInstrumentationFailures];
        int v14 = 136315906;
        uint64_t v13 = "\n\tFaults from reading global constant variables will not be detected.";
        uint64_t v15 = v4;
        if (!v12) {
          uint64_t v13 = "";
        }
        __int16 v16 = 2080;
        int v17 = v10;
        __int16 v18 = 2080;
        uint64_t v19 = v11;
        __int16 v20 = 2080;
        float v21 = v13;
        uint64_t v6 = "Partial failure when instrumenting %s \"%s\":%s%s";
        uint64_t v7 = v9;
        uint32_t v8 = 42;
        goto LABEL_19;
      }
    }
  }
}

uint64_t MTLGPUDebugSetValidationChecksOptions(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v39 = 1;
  int v12 = operator new(0x20uLL);
  *(void *)__p.hash = v12 + 4;
  *(void *)&__p.hash[2] = v12 + 4;
  *int v12 = "all";
  v12[1] = 1;
  v12[2] = "none";
  v12[3] = 2;
  *(void *)__p.count = v12;
  unsigned __int8 v13 = MTLGetEnvCase<MTLShaderValidationState>("MTL_SHADER_VALIDATION_DEFAULT_STATE", &v39, (const char ***)&__p);
  if (*(void *)__p.count)
  {
    *(void *)__p.hash = *(void *)__p.count;
    operator delete(*(void **)__p.count);
  }
  if ((v13 & 1) == 0) {
    uint64_t v39 = 1;
  }
  id v14 = (id)objc_opt_new();
  [v14 appendString:@"[METAL SHADER VALIDATION] Processing new pipeline"];
  CC_SHA256_Init(&__p);
  uint64_t v15 = (void *)[a2 baseObject];
  __int16 v16 = (const void *)[v15 bitCodeHash];
  char data = [v15 bitcodeType];
  CC_SHA256_Update(&__p, v16, 8u);
  CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v15, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v15, "name"), "length"));
  CC_SHA256_Update(&__p, &data, 1u);
  if (a3)
  {
    int v17 = (void *)[a3 baseObject];
    __int16 v18 = (const void *)[v17 bitCodeHash];
    md[0] = 0;
    md[0] = [v17 bitcodeType];
    CC_SHA256_Update(&__p, v18, 8u);
    CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v17, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v17, "name"), "length"));
    CC_SHA256_Update(&__p, md, 1u);
  }
  if (a4)
  {
    uint64_t v19 = (void *)[a4 baseObject];
    __int16 v20 = (const void *)[v19 bitCodeHash];
    md[0] = 0;
    md[0] = [v19 bitcodeType];
    CC_SHA256_Update(&__p, v20, 8u);
    CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v19, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v19, "name"), "length"));
    CC_SHA256_Update(&__p, md, 1u);
  }
  if (a5) {
    CC_SHA256_Update(&__p, (const void *)[a5 UTF8String], objc_msgSend(a5, "length"));
  }
  CC_SHA256_Final(md, &__p);
  long long v40 = *(_OWORD *)md;
  long long v41 = v43;
  uint64_t v21 = _MTLRequestHashToString();
  if (MTLGetEnvDefault())
  {
    if (a5) {
      [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\npipeline label: \"%@\"", a5)];
    }
    [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\n\t{ function1: \"%@\" - label: \"%@\" }", objc_msgSend(a2, "name"), objc_msgSend(a2, "label"))];
    if (a3) {
      [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\n\t{ function2: \"%@\" - label: \"%@\" }", objc_msgSend(a3, "name"), objc_msgSend(a3, "label"))];
    }
    if (a4) {
      [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\n\t{ function3: \"%@\" - label: \"%@\" }", objc_msgSend(a4, "name"), objc_msgSend(a4, "label"))];
    }
    [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\n\t{ Shader Validation UID: \"%@\" }", v21)];
  }
  id v32 = v14;
  v33[0] = MEMORY[0x263EF8330];
  v33[1] = 3221225472;
  int v34 = ___ZL37MTLGPUDebugSetValidationChecksOptionsP17MTLGPUDebugDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_2;
  int v35 = &unk_264E12F18;
  id v36 = v14;
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 3221225472;
  float v30 = ___ZL37MTLGPUDebugSetValidationChecksOptionsP17MTLGPUDebugDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_3;
  uint64_t v31 = &unk_264E12F18;
  uint64_t v22 = *(void **)(a1 + 656);
  if (!v22)
  {
LABEL_27:
    unint64_t v23 = *(void **)(a1 + 664);
    if (!v23) {
      goto LABEL_38;
    }
    if (!a5) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  if (!a5 || ([*(id *)(a1 + 656) containsObject:a5] & 1) == 0)
  {
    if (v21) {
      LODWORD(v22) = [v22 containsObject:v21];
    }
    else {
      LODWORD(v22) = 0;
    }
    goto LABEL_27;
  }
  unint64_t v23 = *(void **)(a1 + 664);
  if (!v23) {
    goto LABEL_41;
  }
  LODWORD(v22) = 1;
LABEL_29:
  if ([v23 containsObject:a5])
  {
    int v24 = 1;
    goto LABEL_33;
  }
LABEL_31:
  if (!v21)
  {
LABEL_38:
    if (v22) {
      goto LABEL_41;
    }
    goto LABEL_52;
  }
  int v24 = [v23 containsObject:v21];
LABEL_33:
  if (v22 && v24)
  {
    [v14 appendString:@"\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."];
    if (v39 != 2)
    {
      if (v39 == 1) {
        goto LABEL_62;
      }
LABEL_63:
      *a7 |= 0x800000000uLL;
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (v22)
  {
LABEL_41:
    if (a6 == 2) {
      [v14 appendString:@"\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."];
    }
    if (v39 == 1) {
    goto LABEL_62;
    }
  }
  if (v24)
  {
    if (a6 == 1) {
      [v14 appendString:@"\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."];
    }
    if (v39 == 2) {
    goto LABEL_64;
    }
  }
LABEL_52:
  if (a6 == 2)
  {
    if (v39 == 2) {
  }
    }
  else
  {
    if (a6 == 1)
    {
      if (v39 == 1) {
      goto LABEL_62;
      }
    }
    if (v39 != 2)
    {
      if (v39 == 1)
      {
LABEL_62:
        v34((uint64_t)v33, a7);
        goto LABEL_65;
      }
      goto LABEL_63;
    }
  }
LABEL_64:
  v30((uint64_t)v29, a7);
LABEL_65:
  if (MTLGPUDebugLog(void)::onceToken != -1) {
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  }
  unsigned int v25 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    MTLGPUDebugSetValidationChecksOptions(v14, v25);
  }
  return v21;
}

void sub_23BD4D408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *DebugCompileOptions(MTLGPUDebugDevice *a1, MTLCompileOptions *a2)
{
  if (a2) {
    id v2 = [(MTLToolsDevice *)a1 unwrapMTLCompileOptions:a2];
  }
  else {
    id v2 = objc_alloc_init(MEMORY[0x263F12838]);
  }
  unint64_t v3 = v2;
  if ([v2 additionalCompilerArguments]) {
    uint64_t v4 = (__CFString *)[NSString stringWithFormat:@"%@ -debug-info-kind=line-tables-only", objc_msgSend(v3, "additionalCompilerArguments")];
  }
  else {
    uint64_t v4 = @"-debug-info-kind=line-tables-only";
  }
  [v3 setAdditionalCompilerArguments:v4];
  return v3;
}

char *MTLGetEnvCase<MTLBoundsCheck::FailMode>(const char *a1, _DWORD *a2, const char ***a3)
{
  os_log_t result = getenv(a1);
  if (result)
  {
    uint64_t v7 = *a3;
    uint32_t v8 = a3[1];
    if (*a3 == v8)
    {
LABEL_6:
      uint64_t v10 = (FILE **)MEMORY[0x263EF8348];
      fprintf((FILE *)*MEMORY[0x263EF8348], "Invalid option for %s, valid options are:\n", a1);
      uint64_t v11 = *a3;
      int v12 = a3[1];
      if (*a3 != v12)
      {
        do
        {
          unsigned __int8 v13 = *v11;
          v11 += 2;
          fprintf(*v10, "\t%s\n", v13);
        }
        while (v11 != v12);
      }
      return 0;
    }
    else
    {
      uint64_t v9 = result;
      while (strcmp(v9, *v7))
      {
        v7 += 2;
        if (v7 == v8) {
          goto LABEL_6;
        }
      }
      *a2 = *((_DWORD *)v7 + 2);
      return (char *)1;
    }
  }
  return result;
}

uint64_t MTLGPUDebugParsePerPSOList(const std::string *a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v2 = objc_alloc_init(MEMORY[0x263EFF9C0]);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v3 = (uint64_t *)a1;
  }
  else {
    unint64_t v3 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  }
  uint64_t v4 = [NSString stringWithUTF8String:v3];
  if (MTLGPUDebugLog(void)::onceToken != -1) {
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  }
  uint64_t v5 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    MTLGPUDebugParsePerPSOList(v4, v5, v6);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v18, a1, 24);
  if (!*(_DWORD *)((char *)&v18[4] + *(void *)(v18[0] - 24)))
  {
    *(void *)&long long v7 = 138412290;
    long long v14 = v7;
    while (1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, (uint64_t)&v15, 0x2Cu);
      if (SHIBYTE(v17) < 0) {
        break;
      }
      if (HIBYTE(v17))
      {
        uint64_t v11 = &v15;
LABEL_18:
        uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", v11, v14);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v14;
          uint64_t v22 = v12;
          _os_log_debug_impl(&dword_23BD25000, v5, OS_LOG_TYPE_DEBUG, "[METAL SHADER VALIDATION] Storing PSO: \"%@\"", buf, 0xCu);
        }
        if (v17 >= 0) {
          unsigned __int8 v13 = &v15;
        }
        else {
          unsigned __int8 v13 = v15;
        }
        objc_msgSend(v2, "addObject:", objc_msgSend(NSString, "stringWithUTF8String:", v13));
        if ((SHIBYTE(v17) & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
LABEL_25:
      if (*(_DWORD *)((char *)&v18[4] + *(void *)(v18[0] - 24))) {
        goto LABEL_9;
      }
    }
    if (v16)
    {
      uint64_t v11 = v15;
      goto LABEL_18;
    }
LABEL_24:
    operator delete(v15);
    goto LABEL_25;
  }
LABEL_9:
  uint64_t v8 = objc_msgSend(v2, "copy", v14);
  v18[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v18[2] = v9;
  v18[3] = MEMORY[0x263F8C318] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23ECD53C0](&v20);
  return v8;
}

void sub_23BD516E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C328] + 104;
  a1[16] = MEMORY[0x263F8C328] + 104;
  long long v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  a1[2] = MEMORY[0x263F8C328] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  uint64_t v10 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 24)) = v11;
  a1[1] = 0;
  unsigned __int8 v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x263F8C328] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  std::stringbuf::basic_stringbuf[abi:ne180100](v9, a2, a3);
  return a1;
}

void sub_23BD519B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x23ECD52F0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    long long v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_23BD51B3C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x23BD51AFCLL);
  }
  __cxa_rethrow();
}

void sub_23BD51BB8(_Unwind_Exception *a1)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23ECD53C0](a1 + 128);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_23BD51D80(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<instrumentationHeapInit(MTLGPUDebugDevice *)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 112;
  *(void *)(v3 + 136) = 0x200000;
  *(void *)(v3 + 144) = v2;
  if ((*(unsigned char *)(v2 + 286) & 0x80) != 0)
  {
    GPUDebugBufferDescriptorHeap::init((GPUDebugBufferDescriptorHeap *)(v2 + 296), (MTLGPUDebugDevice *)v2, 0xFFFFFu);
    uint64_t v2 = *v1;
  }
  *(void *)(v2 + 544) = v2;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<indirectCommandBufferPipelineInit(MTLGPUDebugDevice *)::$_0 &&>>(id ****a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = (void *)[**v1 baseObject];
  uint64_t v3 = objc_msgSend(v2, "newLibraryWithURL:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x263F086E0], "bundleWithIdentifier:", @"com.apple.gpusw.MetalTools"), "URLForResource:withExtension:", @"MTLGPUDebugICBSupport", @"metallib"), 0);
  id v12 = (id)[v3 newFunctionWithName:@"ICB_Inherit_PSO_Vertex"];
  char v11 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_None_Vertex"];
  size_t v4 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_Buffers_Vertex"];
  id v5 = objc_alloc_init(MEMORY[0x263F129C0]);
  [v5 setRasterizationEnabled:0];
  [v5 setSupportIndirectCommandBuffers:1];
  [v5 setVertexFunction:v12];
  *((void *)**v1 + 88) = [v2 newRenderPipelineStateWithDescriptor:v5 error:0];
  [v5 setVertexFunction:v11];
  *((void *)**v1 + 89) = [v2 newRenderPipelineStateWithDescriptor:v5 error:0];
  [v5 setVertexFunction:v4];
  *((void *)**v1 + 90) = [v2 newRenderPipelineStateWithDescriptor:v5 error:0];
  int v6 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_PSO_Kernel"];
  uint64_t v7 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_None_Kernel"];
  uint64_t v8 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_Buffers_Kernel"];
  uint64_t v9 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_Both_Kernel"];
  id v10 = objc_alloc_init(MEMORY[0x263F12850]);
  [v10 setSupportIndirectCommandBuffers:1];
  [v10 setComputeFunction:v6];
  *((void *)**v1 + 92) = [v2 newComputePipelineStateWithDescriptor:v10 options:0 reflection:0 error:0];
  [v10 setComputeFunction:v7];
  *((void *)**v1 + 93) = [v2 newComputePipelineStateWithDescriptor:v10 options:0 reflection:0 error:0];
  [v10 setComputeFunction:v8];
  *((void *)**v1 + 94) = [v2 newComputePipelineStateWithDescriptor:v10 options:0 reflection:0 error:0];
  [v10 setComputeFunction:v9];
  *((void *)**v1 + 95) = [v2 newComputePipelineStateWithDescriptor:v10 options:0 reflection:0 error:0];

  id v13 = objc_alloc_init(MEMORY[0x263F128A0]);
  [v13 setDepthWriteEnabled:0];
  [v13 setDepthCompareFunction:7];
  objc_msgSend((id)objc_msgSend(v13, "frontFaceStencil"), "setReadMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "frontFaceStencil"), "setWriteMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "backFaceStencil"), "setReadMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "backFaceStencil"), "setWriteMask:", 0);
  *((void *)**v1 + 91) = [v2 newDepthStencilStateWithDescriptor:v13];
}

char *MTLGetEnvCase<MTLShaderValidationState>(const char *a1, void *a2, const char ***a3)
{
  os_log_t result = getenv(a1);
  if (result)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    if (*a3 == v8)
    {
LABEL_6:
      id v10 = (FILE **)MEMORY[0x263EF8348];
      fprintf((FILE *)*MEMORY[0x263EF8348], "Invalid option for %s, valid options are:\n", a1);
      char v11 = *a3;
      id v12 = a3[1];
      if (*a3 != v12)
      {
        do
        {
          id v13 = *v11;
          v11 += 2;
          fprintf(*v10, "\t%s\n", v13);
        }
        while (v11 != v12);
      }
      return 0;
    }
    else
    {
      uint64_t v9 = result;
      while (strcmp(v9, *v7))
      {
        v7 += 2;
        if (v7 == v8) {
          goto LABEL_6;
        }
      }
      *a2 = v7[1];
      return (char *)1;
    }
  }
  return result;
}

uint64_t ___ZL37MTLGPUDebugSetValidationChecksOptionsP17MTLGPUDebugDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_2(uint64_t a1, void *a2)
{
  *a2 |= 0x800000000uLL;
  return [*(id *)(a1 + 32) appendString:@"\nEnabling checks."];
}

uint64_t ___ZL37MTLGPUDebugSetValidationChecksOptionsP17MTLGPUDebugDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_3(uint64_t a1, void *a2)
{
  *a2 |= 0x1000000000uLL;
  return [*(id *)(a1 + 32) appendString:@"\nDisabling checks."];
}

void *std::__list_imp<objc_object  {objcproto9MTLBuffer}*>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    os_log_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        size_t v4 = (void *)result[1];
        operator delete(result);
        os_log_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  size_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<objc_object  {objcproto9MTLBuffer}*>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  id v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      id v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      id v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    __int16 v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  id v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begiuint64_t n = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v13);
      begiuint64_t n = this->__begin_;
      end = this->__end_;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t std::list<objc_object  {objcproto9MTLBuffer}*>::splice(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    id v5 = (void *)*a5;
    if (result != a3)
    {
      uint64_t v6 = 1;
      if (v5 != a4)
      {
        uint64_t v7 = a4;
        do
        {
          uint64_t v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(void *)(a3 + 16) -= v6;
      *(void *)(result + 16) += v6;
    }
    uint64_t v8 = *a4;
    *(void *)(v8 + 8) = v5[1];
    *(void *)v5[1] = v8;
    uint64_t v9 = *a2;
    *(void *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t ___ZZL18WrapDynamicLibraryIZ60__MTLGPUDebugDevice_newDynamicLibraryWithURL_options_error__E4__14EP25MTLGPUDebugDynamicLibraryP17MTLGPUDebugDeviceT_ENKUlS5_E_clIPU28objcproto17MTLDynamicLibrary11objc_objectEEDaS5__block_invoke(uint64_t a1)
{
  uint64_t v2 = [MTLGPUDebugDynamicLibrary alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = **(void **)(a1 + 40);

  return (uint64_t)[(MTLGPUDebugDynamicLibrary *)v2 initWithDynamicLibrary:v3 device:v4];
}

uint64_t ___ZZL18WrapDynamicLibraryIZ45__MTLGPUDebugDevice_newDynamicLibrary_error__E4__15EP25MTLGPUDebugDynamicLibraryP17MTLGPUDebugDeviceT_ENKUlS5_E_clIPU28objcproto17MTLDynamicLibrary11objc_objectEEDaS5__block_invoke(uint64_t a1)
{
  uint64_t v2 = [MTLGPUDebugDynamicLibrary alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = **(void **)(a1 + 40);

  return (uint64_t)[(MTLGPUDebugDynamicLibrary *)v2 initWithDynamicLibrary:v3 device:v4];
}

uint64_t ___ZZL18WrapDynamicLibraryIZ63__MTLGPUDebugDevice_newDynamicLibrary_computeDescriptor_error__E4__16EP25MTLGPUDebugDynamicLibraryP17MTLGPUDebugDeviceT_ENKUlS5_E_clIPU28objcproto17MTLDynamicLibrary11objc_objectEEDaS5__block_invoke(uint64_t a1)
{
  uint64_t v2 = [MTLGPUDebugDynamicLibrary alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = **(void **)(a1 + 40);

  return (uint64_t)[(MTLGPUDebugDynamicLibrary *)v2 initWithDynamicLibrary:v3 device:v4];
}

uint64_t ___ZZL18WrapDynamicLibraryIZ83__MTLGPUDebugDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error__E4__17EP25MTLGPUDebugDynamicLibraryP17MTLGPUDebugDeviceT_ENKUlS5_E_clIPU28objcproto17MTLDynamicLibrary11objc_objectEEDaS5__block_invoke(uint64_t a1)
{
  uint64_t v2 = [MTLGPUDebugDynamicLibrary alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = **(void **)(a1 + 40);

  return (uint64_t)[(MTLGPUDebugDynamicLibrary *)v2 initWithDynamicLibrary:v3 device:v4];
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void *unwrapLinkedFunctions(MTLLinkedFunctions *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (void *)[MEMORY[0x263F12940] linkedFunctions];
  objc_msgSend(v2, "setFunctions:", unwrapArray(-[MTLLinkedFunctions functions](a1, "functions")));
  objc_msgSend(v2, "setBinaryFunctions:", unwrapArray(-[MTLLinkedFunctions binaryFunctions](a1, "binaryFunctions")));
  objc_msgSend(v2, "setPrivateFunctions:", unwrapArray(-[MTLLinkedFunctions privateFunctions](a1, "privateFunctions")));
  if ([(MTLLinkedFunctions *)a1 groups])
  {
    uint64_t v3 = (void *)[MEMORY[0x263EFF9A0] dictionary];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v4 = [(MTLLinkedFunctions *)a1 groups];
    uint64_t v5 = [(NSDictionary *)v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v11;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v4);
          }
          objc_msgSend(v3, "setValue:forKey:", unwrapArray((NSArray *)-[NSDictionary objectForKeyedSubscript:](-[MTLLinkedFunctions groups](a1, "groups"), "objectForKeyedSubscript:", *(void *)(*((void *)&v10 + 1) + 8 * v8))), *(void *)(*((void *)&v10 + 1) + 8 * v8));
          ++v8;
        }
        while (v6 != v8);
        uint64_t v6 = [(NSDictionary *)v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v6);
    }
    [v2 setGroups:v3];
  }
  return v2;
}

void *unwrapArray(NSArray *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  uint64_t v2 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", -[NSArray count](a1, "count"));
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v3 = [(NSArray *)a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(a1);
        }
        objc_msgSend(v2, "addObject:", objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * i), "baseObject"));
      }
      uint64_t v4 = [(NSArray *)a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
  return v2;
}

void sub_23BD5D904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD5DA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD5DBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto17MTLFunctionHandle}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD5DC80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto9MTLBuffer}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD5DCF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLLegacySVBufferHandleToOffset(uint64_t a1)
{
  return a1 << 40;
}

void MTLLegacySVSetBufferForResourceHandle(MTLLegacySVDevice *a1, uint64_t a2, MTLLegacySVBuffer *a3)
{
  uint64_t v5 = (id *)((char *)a1 + 296);
  std::mutex::lock((std::mutex *)((char *)a1 + 296));
  objc_msgSend(v5[15], "setArgumentBuffer:offset:", v5[16], objc_msgSend(v5[15], "encodedLength") * a2);
  id v6 = v5[15];
  objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLToolsObject baseObject](a3, "baseObject"), -[MTLLegacySVBuffer offset](a3, "offset"), 0);
  uint64_t v7 = (_DWORD *)[v6 constantDataAtIndex:1];
  *uint64_t v7 = [(MTLLegacySVBuffer *)a3 length];

  std::mutex::unlock((std::mutex *)v5);
}

void sub_23BD62818(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

MTLLegacySVTexture *CreateTexture(void *a1, uint64_t a2)
{
  uint64_t v3 = [[MTLLegacySVTexture alloc] initWithTextureView:a1 parentBuffer:a2 heap:0 device:*(void *)(a2 + 24)];

  return v3;
}

uint64_t MTLToolsGetAssociatedObject()
{
  return 0;
}

void emitDepthStencilDistribution(MTLTelemetryDevice *a1, MTLTelemetryDepthStateDistributionRec *a2, MTLTelemetryStencilStateDistributionRec *a3, MTLTelemetryStencilStateDistributionRec *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unsigned int var0 = a2->var0;
  if (a2->var0)
  {
    uint64_t v6 = 0;
    int var1 = a3->var1;
    long long v8 = a4->var1;
    long long v9 = (_DWORD *)MEMORY[0x263F12D18];
    while (1)
    {
      long long v10 = "unknown";
      if ((v6 & 0xFFFFFFF8) == 0) {
        long long v10 = off_264E13140[(int)v6];
      }
      uint64_t v38 = v6;
      long long v11 = &a2->var0 + v6;
      unsigned int v14 = v11[1];
      uint64_t v13 = (int *)(v11 + 1);
      unsigned int v12 = v14;
      if (!v14) {
        goto LABEL_11;
      }
      if (!*v9) {
        goto LABEL_9;
      }
      if (*v9 == 1) {
        break;
      }
LABEL_11:
      uint64_t v17 = 0;
      id v36 = v8;
      int v37 = var1;
      do
      {
        int v18 = "unknown";
        if ((v17 & 0xFFFFFFF8) == 0) {
          int v18 = off_264E13180[v17];
        }
        unsigned int v19 = (*var1)[-64];
        if (v19)
        {
          if (*v9)
          {
            if (*v9 != 1) {
              goto LABEL_20;
            }
            printf("\n\nFrontFaceStencilFail, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, v19);
          }
          uint64_t v20 = [(MTLTelemetryDevice *)a1 telemetryLog];
          if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v21 = (*var1)[-64];
            *(_DWORD *)buf = 136315906;
            long long v40 = v10;
            __int16 v41 = 2080;
            *(void *)long long v42 = v18;
            *(_WORD *)&v42[8] = 1024;
            unsigned int v43 = var0;
            __int16 v44 = 1024;
            unsigned int v45 = v21;
            _os_log_impl(&dword_23BD25000, (os_log_t)v20, OS_LOG_TYPE_DEFAULT, "FrontFaceStencilFail, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
          }
        }
LABEL_20:
        if (!*(_DWORD *)var1) {
          goto LABEL_26;
        }
        if (*v9)
        {
          if (*v9 != 1) {
            goto LABEL_26;
          }
          printf("\n\nFrontFaceDepthFail, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, *(_DWORD *)var1);
        }
        uint64_t v22 = [(MTLTelemetryDevice *)a1 telemetryLog];
        if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v23 = *(_DWORD *)var1;
          *(_DWORD *)buf = 136315906;
          long long v40 = v10;
          __int16 v41 = 2080;
          *(void *)long long v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          unsigned int v43 = var0;
          __int16 v44 = 1024;
          unsigned int v45 = v23;
          _os_log_impl(&dword_23BD25000, (os_log_t)v22, OS_LOG_TYPE_DEFAULT, "FrontFaceDepthFail, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_26:
        unsigned int v24 = (*var1)[64];
        if (!v24) {
          goto LABEL_32;
        }
        if (*v9)
        {
          if (*v9 != 1) {
            goto LABEL_32;
          }
          printf("\n\nFrontFaceDepthStencilPass, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, v24);
        }
        unsigned int v25 = [(MTLTelemetryDevice *)a1 telemetryLog];
        if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v26 = (*var1)[64];
          *(_DWORD *)buf = 136315906;
          long long v40 = v10;
          __int16 v41 = 2080;
          *(void *)long long v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          unsigned int v43 = var0;
          __int16 v44 = 1024;
          unsigned int v45 = v26;
          _os_log_impl(&dword_23BD25000, (os_log_t)v25, OS_LOG_TYPE_DEFAULT, "FrontFaceDepthStencilPass, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_32:
        unsigned int v27 = (*v8)[-64];
        if (!v27) {
          goto LABEL_38;
        }
        if (*v9)
        {
          if (*v9 != 1) {
            goto LABEL_38;
          }
          printf("\n\nBackFaceStencilFail, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, v27);
        }
        uint64_t v28 = [(MTLTelemetryDevice *)a1 telemetryLog];
        if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v29 = (*v8)[-64];
          *(_DWORD *)buf = 136315906;
          long long v40 = v10;
          __int16 v41 = 2080;
          *(void *)long long v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          unsigned int v43 = var0;
          __int16 v44 = 1024;
          unsigned int v45 = v29;
          _os_log_impl(&dword_23BD25000, (os_log_t)v28, OS_LOG_TYPE_DEFAULT, "BackFaceStencilFail, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_38:
        if (!*(_DWORD *)v8) {
          goto LABEL_44;
        }
        if (*v9)
        {
          if (*v9 != 1) {
            goto LABEL_44;
          }
          printf("\n\nBackFaceDepthFail, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, *(_DWORD *)v8);
        }
        float v30 = [(MTLTelemetryDevice *)a1 telemetryLog];
        if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v31 = *(_DWORD *)v8;
          *(_DWORD *)buf = 136315906;
          long long v40 = v10;
          __int16 v41 = 2080;
          *(void *)long long v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          unsigned int v43 = var0;
          __int16 v44 = 1024;
          unsigned int v45 = v31;
          _os_log_impl(&dword_23BD25000, (os_log_t)v30, OS_LOG_TYPE_DEFAULT, "BackFaceDepthFail, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_44:
        unsigned int v32 = (*v8)[64];
        if (!v32) {
          goto LABEL_50;
        }
        if (*v9)
        {
          if (*v9 != 1) {
            goto LABEL_50;
          }
          printf("\n\nBackFaceDepthStencilPass, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, v32);
        }
        uint64_t v33 = [(MTLTelemetryDevice *)a1 telemetryLog];
        if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v34 = (*v8)[64];
          *(_DWORD *)buf = 136315906;
          long long v40 = v10;
          __int16 v41 = 2080;
          *(void *)long long v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          unsigned int v43 = var0;
          __int16 v44 = 1024;
          unsigned int v45 = v34;
          _os_log_impl(&dword_23BD25000, (os_log_t)v33, OS_LOG_TYPE_DEFAULT, "BackFaceDepthStencilPass, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_50:
        ++v17;
        int var1 = (unsigned int (*)[8])((char *)var1 + 4);
        long long v8 = (unsigned int (*)[8])((char *)v8 + 4);
      }
      while (v17 != 8);
      uint64_t v6 = v38 + 1;
      int var1 = v37 + 1;
      long long v8 = v36 + 1;
      if (v38 == 7) {
        return;
      }
    }
    printf("\n\nDepthState, compareMode=%s, total=%u, count=%u", v10, var0, v12);
LABEL_9:
    uint64_t v15 = [(MTLTelemetryDevice *)a1 telemetryLog];
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *v13;
      *(_DWORD *)buf = 136315650;
      long long v40 = v10;
      __int16 v41 = 1024;
      *(_DWORD *)long long v42 = var0;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v16;
      _os_log_impl(&dword_23BD25000, (os_log_t)v15, OS_LOG_TYPE_DEFAULT, "DepthState, compareMode=%s, total=%u, count=%u", buf, 0x18u);
    }
    goto LABEL_11;
  }
}

void sub_23BD6574C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD65860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD65AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6881C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD688E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD689B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD68AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD68BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD69A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD69B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD69C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD69DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD69EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD69FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6A0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *buildBaseVector@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, void *a3@<X8>)
{
  os_log_t result = std::vector<objc_object  {objcproto28MTLIntersectionFunctionTable}*>::vector(a3, a2);
  if (a2)
  {
    uint64_t v7 = 0;
    do
    {
      os_log_t result = (void *)[*(id *)(a1 + 8 * v7) baseObject];
      *(void *)(*a3 + 8 * v7++) = result;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_23BD6A140(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6A228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6A310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6A500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6A640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6A790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6A980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto22MTLRenderPipelineState}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD6A9FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6AC5C(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + v2), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void sub_23BD6ACF8(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6AD90(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6AE28(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6AF40(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6B050(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6B12C(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6B1F8(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6B290(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6B328(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + v2), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void sub_23BD6B3D4(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + v2), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void sub_23BD6B470(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + v2), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void sub_23BD6B50C(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + v2), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void sub_23BD6B5B8(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + v2), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void sub_23BD6B654(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + v2), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void sub_23BD6B700(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6B798(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + v2), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void sub_23BD6B844(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + v2), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void sub_23BD6C360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6C430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto13MTLAllocation}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BD6C6DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6CDD4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD6CEAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD6D058(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::anonymous namespace'::BufferUsageTable::addResource(id *a1, void *a2, void *a3, char a4)
{
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    unsigned int v9 = [i bufferIndex];
    if ([*a1 length] > v9 >> 2) {
      break;
    }
  }
  uint64_t result = [a3 bufferIndex];
  unsigned int v11 = result;
  if (result)
  {
    if ((a4 & 4) != 0) {
      a4 = a4 & 2 | 1;
    }
    uint64_t result = [*a1 contents];
    *(unsigned char *)(result + (v11 >> 2)) |= a4 << (2 * (v11 & 3));
  }
  return result;
}

void sub_23BD6D204(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::anonymous namespace'::BufferUsageTable::addResource(id *a1, void *a2, char a3)
{
  uint64_t result = [a2 accelerationStructureHandle];
  unsigned int v6 = result;
  if (result)
  {
    if ((a3 & 4) != 0) {
      a3 = a3 & 2 | 1;
    }
    uint64_t result = [*a1 contents];
    *(unsigned char *)(result + (v6 >> 2)) |= a3 << (2 * (v6 & 3));
  }
  return result;
}

void sub_23BD6D3D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::anonymous namespace'::TextureUsageTable::addResource(id *a1, void *a2, void *a3, char a4)
{
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    unsigned int v9 = [i gpuIdentifier];
    if ([*a1 length] > v9 >> 2) {
      break;
    }
  }
  uint64_t result = [a3 gpuIdentifier];
  unsigned int v11 = result;
  if (result)
  {
    if ((a4 & 4) != 0) {
      a4 = a4 & 2 | 1;
    }
    uint64_t result = [*a1 contents];
    *(unsigned char *)(result + (v11 >> 2)) |= a4 << (2 * (v11 & 3));
  }
  return result;
}

void sub_23BD6D980(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD6DAD4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD6DBB0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD6DD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12)
{
}

void sub_23BD6EF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_23BD6F9CC(_Unwind_Exception *a1)
{
}

void anonymous namespace'::anonymous namespace'::ResourceUsageTable::realloc(id *a1, void *a2, unint64_t a3)
{
  if ([*a1 length] <= a3)
  {
    unsigned int v6 = (void *)[a2 newInternalBufferWithLength:a3 options:0];
    memcpy((void *)[v6 contents], (const void *)objc_msgSend(*a1, "contents"), objc_msgSend(*a1, "length"));

    *a1 = v6;
  }
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_2(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_3(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_4(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_5(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_6(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_7(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_8(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_9(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_10(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_11(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_12(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LOBYTE(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        uint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

id *anonymous namespace'::anonymous namespace'::ResourceUsageTable::~ResourceUsageTable(id *a1)
{
  *a1 = 0;
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,anonymous namespace'::EncoderResourceUsage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,anonymous namespace'::EncoderResourceUsage>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  int v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264E12B20, MEMORY[0x263F8C068]);
}

void sub_23BD706FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__emplace_unique_impl<unsigned long,MTLLegacySVResidencySet *&>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  uint64_t v7 = *a2;
  uint64_t v8 = *a3;
  v6[2] = *a2;
  v6[3] = v8;
  *uint64_t v6 = 0;
  v6[1] = v7;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique(a1, v6);
  if ((v10 & 1) == 0) {
    operator delete(v6);
  }
  return inserted;
}

void sub_23BD7086C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique(void *a1, void *a2)
{
  int8x8_t v2 = a2;
  unint64_t v5 = a2 + 2;
  unint64_t v4 = a2[2];
  *(v5 - 1) = v4;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v4, v5);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL) {
      uint64_t v5 = v3 <= a2 ? a2 % v3 : a2;
    }
    else {
      uint64_t v5 = (v3 - 1) & a2;
    }
    uint64_t v6 = *(void **)(*(void *)a1 + 8 * v5);
    if (v6)
    {
      for (uint64_t i = (void *)*v6; i; uint64_t i = (void *)*i)
      {
        unint64_t v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == *a3) {
            return i;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3) {
              v8 %= v3;
            }
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5) {
            break;
          }
        }
      }
    }
  }
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    uint64_t v11 = 2 * v3;
    BOOL v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    size_t v13 = v12 | v11;
    unint64_t v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v13;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v15);
  }
  return 0;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *uint64_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    uint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    float v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>>>::__emplace_unique_key_args<unsigned long,unsigned long,MTLLegacySVResidencySet *>(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BD70F0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>>>::__emplace_unique_key_args<unsigned long,unsigned long,MTLLegacySVResidencySet *&>(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BD71138(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<_MTLResource *,std::hash<_MTLResource *>,std::equal_to<_MTLResource *>,std::allocator<_MTLResource *>>::__emplace_unique_key_args<_MTLResource *,_MTLResource *>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BD7138C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<_MTLHeap *,std::hash<_MTLHeap *>,std::equal_to<_MTLHeap *>,std::allocator<_MTLHeap *>>::__emplace_unique_key_args<_MTLHeap *,_MTLHeap *>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BD715E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void emitTextureDistribution(void *a1, uint64_t a2)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  int8x8_t v2 = *(void **)(a2 + 16);
  if (v2)
  {
    unint64_t v3 = "unknown";
    do
    {
      uint64_t v4 = 0;
      unint64_t v5 = v2 + 13;
      int v77 = v2;
      do
      {
        uint64_t v6 = 0;
        uint64_t v64 = (int)v4;
        unsigned int v63 = v5;
        uint64_t v78 = v4;
        do
        {
          uint64_t Name = MTLPixelFormatGetName();
          int v8 = *((_DWORD *)v5 - 20);
          if (!v8) {
            goto LABEL_49;
          }
          unint64_t v9 = (const char *)Name;
          if (*MEMORY[0x263F12D18])
          {
            if (*MEMORY[0x263F12D18] != 1) {
              goto LABEL_49;
            }
            uint8x8_t v10 = "unknown";
            if (v4 <= 3) {
              uint8x8_t v10 = off_264E13230[v64];
            }
            if ((v6 & 0xFFFFFFF8) == 0) {
              unint64_t v3 = off_264E13250[v6];
            }
            unsigned int v11 = *((_DWORD *)v5 - 10);
            unint64_t v12 = *(v5 - 6);
            float v13 = 0.0;
            float v14 = 0.0;
            if (v11) {
              float v14 = (float)v12 / (float)v11;
            }
            unsigned int v15 = *((_DWORD *)v5 - 4);
            unint64_t v16 = *(v5 - 3);
            if (v15) {
              float v13 = (float)v16 / (float)v15;
            }
            unsigned int v17 = *((_DWORD *)v5 + 2);
            unint64_t v18 = *v5;
            float v19 = 0.0;
            float v20 = 0.0;
            if (v17) {
              float v20 = (float)v18 / (float)v17;
            }
            unsigned int v21 = *((_DWORD *)v5 + 8);
            unint64_t v22 = v5[3];
            if (v21) {
              float v19 = (float)v22 / (float)v21;
            }
            unsigned int v23 = *((_DWORD *)v5 + 14);
            unint64_t v24 = v5[6];
            float v25 = 0.0;
            float v26 = 0.0;
            if (v23) {
              float v26 = (float)v24 / (float)v23;
            }
            unsigned int v27 = *((_DWORD *)v5 + 20);
            unint64_t v28 = v5[9];
            if (v27) {
              float v25 = (float)v28 / (float)v27;
            }
            unsigned int v29 = *((_DWORD *)v5 + 26);
            unint64_t v30 = v5[12];
            if (v29) {
              float v31 = (float)v30 / (float)v29;
            }
            else {
              float v31 = 0.0;
            }
            printf("\n\nTexture, category=%s, format=%s, type=%s, total=%u, minWidth=%u, maxWidth=%u, avgWidth=%f, totalWidth=%llu, countWidth=%u, minHeight=%u, maxHeight=%u, avgHeight=%f, totalHeight=%llu, countHeight=%u, minDepth=%u, maxDepth=%u, avgDepth=%f, totalDepth=%llu, countDepth=%u, minMipLevels=%u, maxMipLevels=%u, avgMipLevels=%f, totalMipLevels=%llu, countMipLevels=%u, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minArrayLength=%u, maxArrayLength=%u, avgArrayLength=%f, totalArrayLength=%llu, countArrayLength=%u, minBytesPerRow=%u, maxBytesPerRow=%u, avgBytesPerRow=%f, totalBytesPerRow=%llu, countBytesPerRow=%u, frameBufferCount=%u, renderTargetCount=%u, shaderWriteCount=%u, linearAlignLess64Count=%u", v10, v9, v3, v8, *((_DWORD *)v5 - 14), *((_DWORD *)v5 - 13), v14, v12, v11, *((_DWORD *)v5 - 8),
              *((_DWORD *)v5 - 7),
              v13,
              v16,
              v15,
              *((_DWORD *)v5 - 2),
              *((_DWORD *)v5 - 1),
              v20,
              v18,
              v17,
              *((_DWORD *)v5 + 4),
              *((_DWORD *)v5 + 5),
              v19,
              v22,
              v21,
              *((_DWORD *)v5 + 10),
              *((_DWORD *)v5 + 11),
              v26,
              v24,
              v23,
              *((_DWORD *)v5 + 16),
              *((_DWORD *)v5 + 17),
              v25,
              v28,
              v27,
              *((_DWORD *)v5 + 22),
              *((_DWORD *)v5 + 23),
              v31,
              v30,
              v29,
              *((_DWORD *)v5 - 19),
              *((_DWORD *)v5 - 17),
              *((_DWORD *)v5 - 18),
              *((_DWORD *)v5 - 16));
            int8x8_t v2 = v77;
            uint64_t v4 = v78;
            unint64_t v3 = "unknown";
          }
          unsigned int v32 = [a1 telemetryLog];
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v33 = "unknown";
            if (v4 <= 3) {
              uint64_t v33 = off_264E13230[v64];
            }
            if ((v6 & 0xFFFFFFF8) == 0) {
              unint64_t v3 = off_264E13250[v6];
            }
            unsigned int v34 = *((_DWORD *)v5 - 10);
            unint64_t v35 = *(v5 - 6);
            float v36 = 0.0;
            float v37 = 0.0;
            if (v34) {
              float v37 = (float)v35 / (float)v34;
            }
            unsigned int v38 = *((_DWORD *)v5 - 4);
            unint64_t v39 = *(v5 - 3);
            if (v38) {
              float v36 = (float)v39 / (float)v38;
            }
            unsigned int v40 = *((_DWORD *)v5 + 2);
            float v41 = 0.0;
            float v42 = 0.0;
            if (v40) {
              float v42 = (float)(unint64_t)*v5 / (float)v40;
            }
            unsigned int v43 = *((_DWORD *)v5 + 8);
            if (v43) {
              float v41 = (float)(unint64_t)v5[3] / (float)v43;
            }
            unsigned int v44 = *((_DWORD *)v5 + 14);
            float v45 = 0.0;
            float v46 = 0.0;
            if (v44) {
              float v46 = (float)(unint64_t)v5[6] / (float)v44;
            }
            unsigned int v47 = *((_DWORD *)v5 + 20);
            if (v47) {
              float v45 = (float)(unint64_t)v5[9] / (float)v47;
            }
            unsigned int v48 = *((_DWORD *)v5 + 26);
            unint64_t v75 = *v5;
            uint64_t v73 = v5[6];
            uint64_t v74 = v5[3];
            uint64_t v71 = v5[12];
            uint64_t v72 = v5[9];
            if (v48) {
              float v49 = (float)(unint64_t)v5[12] / (float)v48;
            }
            else {
              float v49 = 0.0;
            }
            int v51 = *((_DWORD *)v5 - 14);
            int v50 = *((_DWORD *)v5 - 13);
            int v52 = *((_DWORD *)v5 - 8);
            int v53 = *((_DWORD *)v5 - 7);
            int v54 = *((_DWORD *)v5 - 2);
            int v55 = *((_DWORD *)v5 - 1);
            int v57 = *((_DWORD *)v5 + 4);
            int v56 = *((_DWORD *)v5 + 5);
            int v58 = *((_DWORD *)v5 + 10);
            int v59 = *((_DWORD *)v5 + 11);
            int v61 = *((_DWORD *)v5 + 16);
            int v60 = *((_DWORD *)v5 + 17);
            int v65 = *((_DWORD *)v5 + 22);
            int v66 = *((_DWORD *)v5 + 23);
            int v62 = *((_DWORD *)v5 - 20);
            int v67 = *((_DWORD *)v5 - 19);
            int v68 = *((_DWORD *)v5 - 17);
            int v69 = *((_DWORD *)v5 - 18);
            int v70 = *((_DWORD *)v5 - 16);
            int v80 = v33;
            float v82 = v9;
            float v84 = v3;
            int v86 = v62;
            int v88 = v51;
            int v90 = v50;
            unint64_t v94 = v35;
            unsigned int v96 = v34;
            int v98 = v52;
            int v100 = v53;
            unint64_t v104 = v39;
            unsigned int v106 = v38;
            int v108 = v54;
            int v110 = v55;
            unint64_t v114 = v75;
            unsigned int v116 = v40;
            int v118 = v57;
            int v120 = v56;
            uint64_t v124 = v74;
            unsigned int v126 = v43;
            int v128 = v58;
            int v130 = v59;
            uint64_t v134 = v73;
            unsigned int v136 = v44;
            int v138 = v61;
            int v140 = v60;
            uint64_t v144 = v72;
            unsigned int v146 = v47;
            int v148 = v65;
            int v150 = v66;
            uint64_t v154 = v71;
            unsigned int v156 = v48;
            int v158 = v67;
            int v160 = v68;
            int v162 = v69;
            int v164 = v70;
            *(_DWORD *)buf = 136325890;
            __int16 v81 = 2080;
            __int16 v83 = 2080;
            __int16 v85 = 1024;
            __int16 v87 = 1024;
            __int16 v89 = 1024;
            __int16 v91 = 2048;
            double v92 = v37;
            __int16 v93 = 2048;
            __int16 v95 = 1024;
            __int16 v97 = 1024;
            __int16 v99 = 1024;
            __int16 v101 = 2048;
            double v102 = v36;
            __int16 v103 = 2048;
            __int16 v105 = 1024;
            __int16 v107 = 1024;
            __int16 v109 = 1024;
            __int16 v111 = 2048;
            double v112 = v42;
            __int16 v113 = 2048;
            __int16 v115 = 1024;
            __int16 v117 = 1024;
            __int16 v119 = 1024;
            __int16 v121 = 2048;
            double v122 = v41;
            __int16 v123 = 2048;
            __int16 v125 = 1024;
            __int16 v127 = 1024;
            __int16 v129 = 1024;
            __int16 v131 = 2048;
            double v132 = v46;
            __int16 v133 = 2048;
            __int16 v135 = 1024;
            __int16 v137 = 1024;
            __int16 v139 = 1024;
            __int16 v141 = 2048;
            double v142 = v45;
            __int16 v143 = 2048;
            __int16 v145 = 1024;
            __int16 v147 = 1024;
            __int16 v149 = 1024;
            __int16 v151 = 2048;
            double v152 = v49;
            __int16 v153 = 2048;
            __int16 v155 = 1024;
            __int16 v157 = 1024;
            __int16 v159 = 1024;
            __int16 v161 = 1024;
            __int16 v163 = 1024;
            _os_log_impl(&dword_23BD25000, v32, OS_LOG_TYPE_DEFAULT, "Texture, category=%s, format=%s, type=%s, total=%u, minWidth=%u, maxWidth=%u, avgWidth=%f, totalWidth=%llu, countWidth=%u, minHeight=%u, maxHeight=%u, avgHeight=%f, totalHeight=%llu, countHeight=%u, minDepth=%u, maxDepth=%u, avgDepth=%f, totalDepth=%llu, countDepth=%u, minMipLevels=%u, maxMipLevels=%u, avgMipLevels=%f, totalMipLevels=%llu, countMipLevels=%u, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minArrayLength=%u, maxArrayLength=%u, avgArrayLength=%f, totalArrayLength=%llu, countArrayLength=%u, minBytesPerRow=%u, maxBytesPerRow=%u, avgBytesPerRow=%f, totalBytesPerRow=%llu, countBytesPerRow=%u, frameBufferCount=%u, renderTargetCount=%u, shaderWriteCount=%u, linearAlignLess64Count=%u", buf, 0x148u);
            int8x8_t v2 = v77;
            uint64_t v4 = v78;
            unint64_t v3 = "unknown";
          }
LABEL_49:
          ++v6;
          v5 += 24;
        }
        while (v6 != 8);
        ++v4;
        unint64_t v5 = v63 + 192;
      }
      while (v4 != 4);
      int8x8_t v2 = (void *)*v2;
    }
    while (v2);
  }
}

void *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::piecewise_construct_t const&,std::tuple<MTLPixelFormat const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint8x8_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x1818uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  bzero(i + 3, 0x1800uLL);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  float v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    *float v20 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    float v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BD72FB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *BinaryBuffer::Append<NSString *>(AppendBuffer *a1, char a2, id *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  char v23 = a2;
  unsigned int v29 = (void **)&v28;
  v26[0] = 1;
  v26[1] = a2;
  unint64_t v28 = v27;
  id v5 = *a3;
  uint64_t v6 = [*a3 lengthOfBytesUsingEncoding:4];
  size_t v7 = v6;
  unint64_t v8 = v28;
  uint8x8_t v9 = (uint64_t *)(v28 + 1);
  uint8x8_t v10 = v29;
  if (v28 + 1 <= (char *)v29)
  {
    char *v28 = 116;
    uint8x8_t v10 = v29;
  }
  unsigned int v11 = v8 + 9;
  if (v11 <= (char *)v10) {
    *uint8x8_t v9 = v6;
  }
  unint64_t v28 = v11;
  unint64_t v12 = (const void *)[v5 UTF8String];
  float v13 = &v28[v7];
  unint64_t v14 = (unint64_t)v29;
  if (&v28[v7] <= (char *)v29)
  {
    memcpy(v28, v12, v7);
    unint64_t v14 = (unint64_t)v29;
  }
  BOOL v15 = v13 + 1;
  if ((unint64_t)(v13 + 1) <= v14)
  {
    *float v13 = 16;
    unint64_t v14 = (unint64_t)v29;
  }
  unint64_t v28 = v13 + 1;
  if ((unint64_t)v15 <= v14)
  {
    size_t v21 = v15 - v26;
    p_src = (size_t *)v26;
    uint64_t v19 = a1;
    p_streauint64_t m = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v23, 1uLL);
    id v16 = *a3;
    uint64_t __src = [v16 lengthOfBytesUsingEncoding:4];
    char v25 = 116;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v25, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    unint64_t v17 = (const void *)[v16 UTF8String];
    AppendBuffer::WriteBytes(a1, &a1->stream, v17, __src);
    LOBYTE(__src) = 16;
    p_src = (size_t *)&__src;
    uint64_t v19 = a1;
    p_streauint64_t m = &a1->stream;
    size_t v21 = 1;
  }
  return AppendBuffer::WriteBytes(v19, p_stream, p_src, v21);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  v50[2] = *MEMORY[0x263EF8340];
  v50[1] = v50;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v11 = *a3;
  __src[2] = 109;
  uint64_t v23 = v11;
  uint64_t v12 = *a4;
  char v24 = 100;
  uint64_t v25 = v12;
  uint64_t v13 = *a5;
  char v26 = 100;
  uint64_t v27 = v13;
  uint64_t v14 = *a6;
  char v28 = 100;
  uint64_t v29 = v14;
  __int16 v30 = 25664;
  uint64_t v15 = a7[1];
  uint64_t v31 = *a7;
  char v32 = 100;
  uint64_t v33 = v15;
  uint64_t v16 = a7[2];
  char v34 = 100;
  uint64_t v35 = v16;
  __int16 v36 = 27984;
  uint64_t v37 = *a8;
  uint64_t v17 = *a9;
  char v38 = 100;
  uint64_t v39 = v17;
  uint64_t v18 = *a10;
  char v40 = 100;
  uint64_t v41 = v18;
  __int16 v42 = 25664;
  uint64_t v19 = a11[1];
  uint64_t v43 = *a11;
  char v44 = 100;
  uint64_t v45 = v19;
  uint64_t v20 = a11[2];
  char v46 = 100;
  uint64_t v47 = v20;
  __int16 v48 = 4176;
  v50[0] = &v49;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x7CuLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  char v30 = a2;
  uint64_t v43 = &v42;
  v33[0] = 1;
  v33[1] = a2;
  uint64_t v17 = *a3;
  void v33[2] = 109;
  uint64_t v34 = v17;
  uint64_t v18 = *a4;
  char v35 = 100;
  uint64_t v36 = v18;
  uint64_t v19 = *a5;
  char v37 = 100;
  uint64_t v38 = v19;
  uint64_t v20 = *a6;
  char v39 = 100;
  uint64_t v40 = v20;
  __int16 v42 = &v41;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>((uint64_t)a1, (uint64_t)v33, a7, a8, a9, a10, a11, a12);
  size_t v21 = (__int16 *)((char *)v42 + 1);
  unint64_t v22 = (__int16 *)v43;
  if ((char *)v42 + 1 <= (char *)v43)
  {
    *(unsigned char *)__int16 v42 = 16;
    unint64_t v22 = (__int16 *)v43;
  }
  __int16 v42 = v21;
  if (v21 <= v22)
  {
    size_t v26 = (char *)v21 - v33;
    p_src = (uint64_t *)v33;
    char v24 = a1;
    p_streauint64_t m = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v30, 1uLL);
    uint64_t __src = *a3;
    char v32 = 109;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v32, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    uint64_t __src = *a4;
    char v32 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v32, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    uint64_t __src = *a5;
    char v32 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v32, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    uint64_t __src = *a6;
    char v32 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v32, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(a1, &a1->stream, a7, a8, a9, a10, a11, a12);
    LOBYTE(__src) = 16;
    p_src = &__src;
    char v24 = a1;
    p_streauint64_t m = &a1->stream;
    size_t v26 = 1;
  }
  return AppendBuffer::WriteBytes(v24, p_stream, p_src, v26);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,MTLSize,objc_object  {objcproto10MTLTexture},unsigned long,unsigned long,objc_object  {objcproto10MTLTexture}*>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  v55[2] = *MEMORY[0x263EF8340];
  v55[1] = v55;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v11 = *a3;
  __src[2] = 109;
  uint64_t v24 = v11;
  uint64_t v12 = *a4;
  char v25 = 100;
  uint64_t v26 = v12;
  uint64_t v13 = *a5;
  char v27 = 100;
  uint64_t v28 = v13;
  __int16 v29 = 25664;
  uint64_t v14 = a6[1];
  uint64_t v30 = *a6;
  char v31 = 100;
  uint64_t v32 = v14;
  uint64_t v15 = a6[2];
  char v33 = 100;
  uint64_t v34 = v15;
  qmemcpy(v35, "P@d", sizeof(v35));
  uint64_t v16 = a7[1];
  uint64_t v36 = *a7;
  char v37 = 100;
  uint64_t v38 = v16;
  uint64_t v17 = a7[2];
  char v39 = 100;
  uint64_t v40 = v17;
  __int16 v41 = 27984;
  uint64_t v42 = *a8;
  uint64_t v18 = *a9;
  char v43 = 100;
  uint64_t v44 = v18;
  uint64_t v19 = *a10;
  char v45 = 100;
  uint64_t v46 = v19;
  __int16 v47 = 25664;
  uint64_t v20 = a11[1];
  uint64_t v48 = *a11;
  char v49 = 100;
  uint64_t v50 = v20;
  uint64_t v21 = a11[2];
  char v51 = 100;
  uint64_t v52 = v21;
  __int16 v53 = 4176;
  v55[0] = &v54;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x90uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,MTLSize,objc_object  {objcproto10MTLTexture},unsigned long,unsigned long,objc_object  {objcproto10MTLTexture}*,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  char v29 = a2;
  __int16 v47 = &v46;
  v32[0] = 1;
  v32[1] = a2;
  uint64_t v17 = *a3;
  v32[2] = 109;
  uint64_t v33 = v17;
  uint64_t v35 = *a4;
  uint64_t v37 = *a5;
  __int16 v38 = 25664;
  uint64_t v18 = a6[1];
  uint64_t v39 = *a6;
  char v34 = 100;
  char v36 = 100;
  char v40 = 100;
  uint64_t v41 = v18;
  uint64_t v19 = a6[2];
  char v42 = 100;
  uint64_t v43 = v19;
  char v44 = 80;
  uint64_t v46 = v45;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>((uint64_t)a1, (uint64_t)v32, a7, a8, a9, a10, a11, a12);
  uint64_t v20 = v46 + 1;
  uint64_t v21 = v47;
  if (v46 + 1 <= (unsigned char *)v47)
  {
    unsigned char *v46 = 16;
    uint64_t v21 = v47;
  }
  uint64_t v46 = v20;
  if (v20 <= (unsigned char *)v21)
  {
    size_t v25 = v20 - v32;
    p_src = (uint64_t *)v32;
    uint64_t v23 = a1;
    p_streauint64_t m = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v29, 1uLL);
    uint64_t __src = *a3;
    char v31 = 109;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v31, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    uint64_t __src = *a4;
    char v31 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v31, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    uint64_t __src = *a5;
    char v31 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v31, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(a1, &a1->stream, a6, a7, a8, a9, a10, a11, a12);
    LOBYTE(__src) = 16;
    p_src = &__src;
    uint64_t v23 = a1;
    p_streauint64_t m = &a1->stream;
    size_t v25 = 1;
  }
  return AppendBuffer::WriteBytes(v23, p_stream, p_src, v25);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  char v28 = a2;
  uint64_t v39 = &v38;
  v31[0] = 1;
  v31[1] = a2;
  uint64_t v17 = *a3;
  v31[2] = 109;
  uint64_t v32 = v17;
  uint64_t v18 = *a4;
  char v33 = 100;
  uint64_t v34 = v18;
  uint64_t v19 = *a5;
  char v35 = 100;
  uint64_t v36 = v19;
  __int16 v38 = v37;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>((uint64_t)a1, (uint64_t)v31, a6, a7, a8, a9, a10, a11);
  uint64_t v20 = v38 + 1;
  uint64_t v21 = v39;
  if (v38 + 1 <= (unsigned char *)v39)
  {
    *__int16 v38 = 16;
    uint64_t v21 = v39;
  }
  __int16 v38 = v20;
  if (v20 <= (unsigned char *)v21)
  {
    size_t v25 = v20 - v31;
    p_src = (uint64_t *)v31;
    uint64_t v23 = a1;
    p_streauint64_t m = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v28, 1uLL);
    uint64_t __src = *a3;
    char v30 = 109;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v30, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    uint64_t __src = *a4;
    char v30 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v30, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    uint64_t __src = *a5;
    char v30 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v30, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(a1, &a1->stream, a6, a7, a8, a9, a10, a11);
    LOBYTE(__src) = 16;
    p_src = &__src;
    uint64_t v23 = a1;
    p_streauint64_t m = &a1->stream;
    size_t v25 = 1;
  }
  return AppendBuffer::WriteBytes(v23, p_stream, p_src, v25);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  v54[2] = *MEMORY[0x263EF8340];
  v54[1] = v54;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v12 = *a3;
  __src[2] = 109;
  uint64_t v25 = v12;
  uint64_t v13 = *a4;
  char v26 = 100;
  uint64_t v27 = v13;
  uint64_t v14 = *a5;
  char v28 = 100;
  uint64_t v29 = v14;
  __int16 v30 = 25664;
  uint64_t v15 = a6[1];
  uint64_t v31 = *a6;
  char v32 = 100;
  uint64_t v33 = v15;
  uint64_t v16 = a6[2];
  char v34 = 100;
  uint64_t v35 = v16;
  qmemcpy(v36, "P@d", sizeof(v36));
  uint64_t v17 = a7[1];
  uint64_t v37 = *a7;
  char v38 = 100;
  uint64_t v39 = v17;
  uint64_t v18 = a7[2];
  char v40 = 100;
  uint64_t v41 = v18;
  __int16 v42 = 27984;
  uint64_t v43 = *a8;
  uint64_t v19 = *a9;
  char v44 = 100;
  uint64_t v45 = v19;
  uint64_t v20 = *a10;
  char v46 = 100;
  uint64_t v47 = v20;
  uint64_t v21 = *a11;
  char v48 = 100;
  uint64_t v49 = v21;
  uint64_t v22 = *a12;
  char v50 = 100;
  uint64_t v51 = v22;
  char v52 = 16;
  v54[0] = v53;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x85uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,_NSRange,unsigned char>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, char *a5)
{
  v18[2] = *MEMORY[0x263EF8340];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v5 = *a3;
  __src[2] = 109;
  uint64_t v9 = v5;
  __int16 v10 = 25664;
  uint64_t v6 = a4[1];
  uint64_t v11 = *a4;
  char v12 = 100;
  uint64_t v13 = v6;
  __int16 v14 = 24912;
  char v15 = *a5;
  char v16 = 16;
  v18[0] = v17;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x22uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,_NSRange,unsigned int>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  v18[2] = *MEMORY[0x263EF8340];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v5 = *a3;
  __src[2] = 109;
  uint64_t v9 = v5;
  __int16 v10 = 25664;
  uint64_t v6 = a4[1];
  uint64_t v11 = *a4;
  char v12 = 100;
  uint64_t v13 = v6;
  __int16 v14 = 25424;
  int v15 = *a5;
  char v16 = 16;
  v18[0] = v17;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x25uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,void const*,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  v40[2] = *MEMORY[0x263EF8340];
  v40[1] = v40;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v8 = *a3;
  __src[2] = 109;
  uint64_t v17 = v8;
  uint64_t v9 = *a4;
  char v18 = 100;
  uint64_t v19 = v9;
  uint64_t v10 = *a5;
  char v20 = 100;
  uint64_t v21 = v10;
  qmemcpy(v22, "@@d", sizeof(v22));
  uint64_t v11 = a6[1];
  uint64_t v23 = *a6;
  char v24 = 100;
  uint64_t v25 = v11;
  char v26 = 100;
  uint64_t v12 = a6[3];
  uint64_t v27 = a6[2];
  qmemcpy(v28, "P@d", sizeof(v28));
  uint64_t v29 = v12;
  char v30 = 100;
  uint64_t v13 = a6[5];
  uint64_t v31 = a6[4];
  char v32 = 100;
  uint64_t v33 = v13;
  qmemcpy(v34, "PPm", sizeof(v34));
  uint64_t v35 = *a7;
  uint64_t v14 = *a8;
  char v36 = 100;
  uint64_t v37 = v14;
  char v38 = 16;
  v40[0] = &v39;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x6CuLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  char v20 = a2;
  char v26 = &v25;
  v23[0] = 1;
  v23[1] = a2;
  uint64_t v25 = v24;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor>((uint64_t)a1, (uint64_t)v23, a3, a4, a5, a6, a7);
  uint64_t v13 = v25 + 1;
  uint64_t v14 = v26;
  if (v25 + 1 <= (unsigned char *)v26)
  {
    unsigned char *v25 = 16;
    uint64_t v14 = v26;
  }
  uint64_t v25 = v13;
  if (v13 <= (unsigned char *)v14)
  {
    size_t v18 = v13 - v23;
    p_src = (uint64_t *)v23;
    char v16 = a1;
    p_streauint64_t m = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v20, 1uLL);
    uint64_t __src = *a3;
    char v22 = 109;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v22, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    uint64_t __src = *a4;
    char v22 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v22, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    uint64_t __src = *a5;
    char v22 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v22, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(a1, &a1->stream, a6);
    BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(a1, &a1->stream, a7);
    LOBYTE(__src) = 16;
    p_src = &__src;
    char v16 = a1;
    p_streauint64_t m = &a1->stream;
    size_t v18 = 1;
  }
  return AppendBuffer::WriteBytes(v16, p_stream, p_src, v18);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  char v23 = a2;
  uint64_t v29 = &v28;
  v25[0] = 1;
  v25[1] = a2;
  uint64_t v15 = *a3;
  v25[2] = 109;
  uint64_t v26 = v15;
  char v28 = v27;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>((uint64_t)a1, (uint64_t)v25, a4, a5, a6, a7, a8);
  char v16 = v28 + 1;
  uint64_t v17 = v29;
  if (v28 + 1 <= (unsigned char *)v29)
  {
    unsigned char *v28 = 16;
    uint64_t v17 = v29;
  }
  char v28 = v16;
  if (v16 <= (unsigned char *)v17)
  {
    size_t v21 = v16 - v25;
    p_src = v25;
    uint64_t v19 = a1;
    p_streauint64_t m = &a1->stream;
  }
  else
  {
    char __src = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v23, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>(a1, &a1->stream, a3, a4, a5, a6, a7, a8);
    char __src = 16;
    p_src = &__src;
    uint64_t v19 = a1;
    p_streauint64_t m = &a1->stream;
    size_t v21 = 1;
  }
  return AppendBuffer::WriteBytes(v19, p_stream, p_src, v21);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,objc_object  {objcproto10MTLTexture},unsigned long,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  v37[2] = *MEMORY[0x263EF8340];
  v37[1] = v37;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v10 = *a3;
  __src[2] = 109;
  uint64_t v20 = v10;
  uint64_t v11 = *a4;
  char v21 = 100;
  uint64_t v22 = v11;
  uint64_t v12 = *a5;
  char v23 = 100;
  uint64_t v24 = v12;
  uint64_t v13 = *a6;
  char v25 = 109;
  uint64_t v26 = v13;
  uint64_t v14 = *a7;
  char v27 = 100;
  uint64_t v28 = v14;
  uint64_t v15 = *a8;
  char v29 = 100;
  uint64_t v30 = v15;
  uint64_t v16 = *a9;
  char v31 = 100;
  uint64_t v32 = v16;
  uint64_t v17 = *a10;
  char v33 = 100;
  uint64_t v34 = v17;
  char v35 = 16;
  v37[0] = v36;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x4BuLL);
}

void *BinaryBuffer::Append<MTLRegion,unsigned long,unsigned long,BOOL,objc_object  {objcproto9MTLBuffer}*,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned char *a6, uint64_t *a7, uint64_t *a8)
{
  v40[2] = *MEMORY[0x263EF8340];
  v40[1] = v40;
  __src[0] = 1;
  __src[1] = a2;
  qmemcpy(v16, "@@d", sizeof(v16));
  uint64_t v8 = a3[1];
  uint64_t v17 = *a3;
  uint64_t v19 = v8;
  uint64_t v9 = a3[3];
  uint64_t v21 = a3[2];
  qmemcpy(v22, "P@d", sizeof(v22));
  char v18 = 100;
  char v20 = 100;
  uint64_t v23 = v9;
  char v24 = 100;
  uint64_t v10 = a3[5];
  uint64_t v25 = a3[4];
  char v26 = 100;
  uint64_t v27 = v10;
  qmemcpy(v28, "PPd", sizeof(v28));
  uint64_t v29 = *a4;
  uint64_t v11 = *a5;
  char v30 = 100;
  uint64_t v31 = v11;
  LOBYTE(v11) = *a6;
  char v32 = 97;
  char v33 = v11;
  uint64_t v12 = *a7;
  char v34 = 109;
  uint64_t v35 = v12;
  uint64_t v13 = *a8;
  char v36 = 100;
  uint64_t v37 = v13;
  char v38 = 16;
  v40[0] = v39;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x65uLL);
}

void *BinaryBuffer::Append<MTLSize,MTLSize>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  v27[2] = *MEMORY[0x263EF8340];
  v27[1] = v27;
  __src[0] = 1;
  __src[1] = a2;
  __int16 v11 = 25664;
  uint64_t v5 = a4[1];
  uint64_t v12 = *a4;
  char v13 = 100;
  uint64_t v14 = v5;
  uint64_t v6 = a4[2];
  char v15 = 100;
  uint64_t v16 = v6;
  qmemcpy(v17, "P@d", sizeof(v17));
  uint64_t v7 = a5[1];
  uint64_t v18 = *a5;
  char v19 = 100;
  uint64_t v20 = v7;
  uint64_t v8 = a5[2];
  char v21 = 100;
  uint64_t v22 = v8;
  __int16 v23 = -27568;
  unint64_t v24 = (unint64_t)*(unsigned int *)(a1 + 32) * a3 / *(unsigned int *)(a1 + 36);
  char v25 = 16;
  v27[0] = &v26;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x46uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,MTLSize>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v28[2] = *MEMORY[0x263EF8340];
  v28[1] = v28;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v6 = *a4;
  unsigned char __src[2] = 109;
  uint64_t v14 = v6;
  uint64_t v7 = *a5;
  char v15 = 100;
  uint64_t v16 = v7;
  __int16 v17 = 25664;
  uint64_t v8 = a6[1];
  uint64_t v18 = *a6;
  char v19 = 100;
  uint64_t v20 = v8;
  uint64_t v9 = a6[2];
  char v21 = 100;
  uint64_t v22 = v9;
  char v23 = 80;
  uint64_t v10 = *(unsigned int *)(a1 + 32);
  unint64_t v11 = *(unsigned int *)(a1 + 36);
  char v24 = -108;
  unint64_t v25 = v10 * a3 / v11;
  char v26 = 16;
  v28[0] = v27;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x3BuLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  v18[2] = *MEMORY[0x263EF8340];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v5 = *a4;
  unsigned char __src[2] = 109;
  uint64_t v11 = v5;
  uint64_t v6 = *a5;
  char v12 = 100;
  uint64_t v13 = v6;
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  unint64_t v8 = *(unsigned int *)(a1 + 36);
  char v14 = -108;
  unint64_t v15 = v7 * a3 / v8;
  char v16 = 16;
  v18[0] = &v17;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x1EuLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v22[2] = *MEMORY[0x263EF8340];
  v22[1] = v22;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v6 = *a4;
  unsigned char __src[2] = 109;
  uint64_t v13 = v6;
  uint64_t v7 = *a5;
  char v14 = 100;
  uint64_t v15 = v7;
  uint64_t v8 = *a6;
  char v16 = 100;
  uint64_t v17 = v8;
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  unint64_t v10 = *(unsigned int *)(a1 + 36);
  char v18 = -108;
  unint64_t v19 = v9 * a3 / v10;
  char v20 = 16;
  v22[0] = &v21;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x27uLL);
}

void *BinaryBuffer::Append<unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  v18[2] = *MEMORY[0x263EF8340];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v5 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v11 = v5;
  uint64_t v6 = *a5;
  char v12 = 100;
  uint64_t v13 = v6;
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  unint64_t v8 = *(unsigned int *)(a1 + 36);
  char v14 = -108;
  unint64_t v15 = v7 * a3 / v8;
  char v16 = 16;
  v18[0] = &v17;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x1EuLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto9MTLBuffer}* const>,BinaryBuffer::Array<unsigned long const>,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6)
{
  unint64_t v10 = this;
  uint64_t v49 = *MEMORY[0x263EF8340];
  char v41 = a2;
  uint64_t v11 = &v47;
  char v48 = (int *)&v47;
  v44[0] = 1;
  v44[1] = a2;
  char v12 = v45;
  v44[2] = 32;
  uint64_t v47 = (int *)v45;
  uint64_t v13 = *(void *)(a4 + 8);
  if (v13)
  {
    char v14 = *(uint64_t **)a4;
    unint64_t v15 = &v46;
    do
    {
      uint64_t v16 = *v14;
      __int16 v17 = v48;
      if (v15 - 2 <= v48)
      {
        *((unsigned char *)v15 - 9) = 109;
        __int16 v17 = v48;
      }
      if (v15 <= v17) {
        *((void *)v15 - 1) = v16;
      }
      uint64_t v47 = v15;
      unint64_t v15 = (int *)((char *)v15 + 9);
      ++v14;
      --v13;
    }
    while (v13);
    uint64_t v11 = v48;
    char v12 = (char *)v15 - 9;
  }
  if (v12 + 1 <= (unsigned char *)v11)
  {
    *char v12 = 48;
    uint64_t v11 = v48;
  }
  uint64_t v47 = (int *)(v12 + 1);
  char v18 = v12 + 2;
  if (v12 + 2 <= (unsigned char *)v11) {
    v12[1] = 32;
  }
  if (a5[1])
  {
    unint64_t v19 = 0;
    char v20 = (int *)(v12 + 11);
    do
    {
      uint64_t v21 = *(void *)(*a5 + 8 * v19);
      uint64_t v22 = v48;
      if (v20 - 2 <= v48)
      {
        *((unsigned char *)v20 - 9) = 100;
        uint64_t v22 = v48;
      }
      if (v20 <= v22) {
        *((void *)v20 - 1) = v21;
      }
      ++v19;
      char v20 = (int *)((char *)v20 + 9);
    }
    while (a5[1] > v19);
    char v18 = (char *)v20 - 9;
  }
  unint64_t v23 = (unint64_t)v48;
  if (v18 + 1 <= (unsigned char *)v48)
  {
    *char v18 = 48;
    unint64_t v23 = (unint64_t)v48;
  }
  if ((unint64_t)(v18 + 2) <= v23)
  {
    v18[1] = 64;
    unint64_t v23 = (unint64_t)v48;
  }
  uint64_t v24 = *a6;
  if ((unint64_t)(v18 + 3) <= v23)
  {
    v18[2] = 100;
    unint64_t v23 = (unint64_t)v48;
  }
  if ((unint64_t)(v18 + 11) <= v23)
  {
    *(void *)(v18 + 3) = v24;
    unint64_t v23 = (unint64_t)v48;
  }
  uint64_t v25 = a6[1];
  if ((unint64_t)(v18 + 12) <= v23)
  {
    v18[11] = 100;
    unint64_t v23 = (unint64_t)v48;
  }
  if ((unint64_t)(v18 + 20) <= v23)
  {
    *(void *)(v18 + 12) = v25;
    unint64_t v23 = (unint64_t)v48;
  }
  if ((unint64_t)(v18 + 21) <= v23)
  {
    v18[20] = 80;
    unint64_t v23 = (unint64_t)v48;
  }
  uint64_t v27 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v26 = HIDWORD(this[1]._vptr$AppendBuffer);
  if ((unint64_t)(v18 + 22) <= v23)
  {
    v18[21] = -108;
    unint64_t v23 = (unint64_t)v48;
  }
  uint64_t v28 = v18 + 30;
  if ((unint64_t)(v18 + 30) <= v23)
  {
    *(void *)(v18 + 22) = v27 * a3 / v26;
    unint64_t v23 = (unint64_t)v48;
  }
  uint64_t v29 = (int *)(v18 + 31);
  if ((unint64_t)v29 <= v23)
  {
    unsigned char *v28 = 16;
    unint64_t v23 = (unint64_t)v48;
  }
  uint64_t v47 = v29;
  if ((unint64_t)v29 <= v23)
  {
    size_t v39 = (char *)v29 - v44;
    p_src = (uint64_t *)v44;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v10, &v10->stream, &v41, 1uLL);
    LOBYTE(__src) = 32;
    AppendBuffer::WriteBytes(v10, &v10->stream, &__src, 1uLL);
    if (*(void *)(a4 + 8))
    {
      unint64_t v30 = 0;
      do
      {
        uint64_t __src = *(void *)(*(void *)a4 + 8 * v30);
        char v43 = 109;
        AppendBuffer::WriteBytes(v10, &v10->stream, &v43, 1uLL);
        AppendBuffer::WriteBytes(v10, &v10->stream, &__src, 8uLL);
        ++v30;
      }
      while (*(void *)(a4 + 8) > v30);
    }
    LOBYTE(__src) = 48;
    AppendBuffer::WriteBytes(v10, &v10->stream, &__src, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<unsigned long const>,_NSRange>(v10, &v10->stream, a5, a6);
    uint64_t v32 = LODWORD(v10[1]._vptr$AppendBuffer);
    unint64_t v31 = HIDWORD(v10[1]._vptr$AppendBuffer);
    char v33 = v47;
    char v34 = (unint64_t *)((char *)v47 + 1);
    uint64_t v35 = v48;
    if ((int *)((char *)v47 + 1) <= v48)
    {
      *(unsigned char *)uint64_t v47 = -108;
      uint64_t v35 = v48;
    }
    char v36 = (int *)((char *)v33 + 9);
    if (v36 <= v35) {
      *char v34 = v32 * a3 / v31;
    }
    uint64_t v47 = v36;
    LOBYTE(__src) = 16;
    p_src = &__src;
    this = v10;
    p_streauint64_t m = &v10->stream;
    size_t v39 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v39);
}

void *BinaryBuffer::Append<objc_object  {objcproto15MTLSamplerState}*,float,float,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, int *a5, int *a6, uint64_t *a7)
{
  unsigned char v26[2] = *MEMORY[0x263EF8340];
  v26[1] = v26;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v7 = *a4;
  unsigned char __src[2] = 109;
  uint64_t v15 = v7;
  int v8 = *a5;
  char v16 = 106;
  int v17 = v8;
  int v9 = *a6;
  char v18 = 106;
  int v19 = v9;
  uint64_t v10 = *a7;
  char v20 = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *(unsigned int *)(a1 + 32);
  unint64_t v12 = *(unsigned int *)(a1 + 36);
  char v22 = -108;
  unint64_t v23 = v11 * a3 / v12;
  char v24 = 16;
  v26[0] = &v25;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x28uLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, uint64_t *a5)
{
  int v8 = this;
  uint64_t v39 = *MEMORY[0x263EF8340];
  char v32 = a2;
  int v9 = (int *)&v37;
  char v38 = (int *)&v37;
  v34[0] = 1;
  v34[1] = a2;
  uint64_t v10 = v35;
  v34[2] = 32;
  uint64_t v37 = (int *)v35;
  uint64_t v11 = a4[1];
  if (v11)
  {
    unint64_t v12 = *a4;
    uint64_t v13 = &v36;
    do
    {
      uint64_t v14 = *v12;
      uint64_t v15 = v38;
      if (v13 - 2 <= v38)
      {
        *((unsigned char *)v13 - 9) = 109;
        uint64_t v15 = v38;
      }
      if (v13 <= v15) {
        *((void *)v13 - 1) = v14;
      }
      uint64_t v37 = v13;
      uint64_t v13 = (int *)((char *)v13 + 9);
      ++v12;
      uint64_t v11 = (uint64_t *)((char *)v11 - 1);
    }
    while (v11);
    int v9 = v38;
    uint64_t v10 = (char *)v13 - 9;
  }
  if (v10 + 1 <= (unsigned char *)v9)
  {
    *uint64_t v10 = 48;
    int v9 = v38;
  }
  if (v10 + 2 <= (unsigned char *)v9)
  {
    v10[1] = 64;
    int v9 = v38;
  }
  uint64_t v16 = *a5;
  if (v10 + 3 <= (unsigned char *)v9)
  {
    v10[2] = 100;
    int v9 = v38;
  }
  if (v10 + 11 <= (unsigned char *)v9)
  {
    *(void *)(v10 + 3) = v16;
    int v9 = v38;
  }
  uint64_t v17 = a5[1];
  if (v10 + 12 <= (unsigned char *)v9)
  {
    v10[11] = 100;
    int v9 = v38;
  }
  if (v10 + 20 <= (unsigned char *)v9)
  {
    *(void *)(v10 + 12) = v17;
    int v9 = v38;
  }
  if (v10 + 21 <= (unsigned char *)v9)
  {
    v10[20] = 80;
    int v9 = v38;
  }
  uint64_t v19 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v18 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v10 + 22 <= (unsigned char *)v9)
  {
    v10[21] = -108;
    int v9 = v38;
  }
  char v20 = v10 + 30;
  if (v10 + 30 <= (unsigned char *)v9)
  {
    *(void *)(v10 + 22) = v19 * a3 / v18;
    int v9 = v38;
  }
  uint64_t v21 = (int *)(v10 + 31);
  if (v21 <= v9)
  {
    *char v20 = 16;
    int v9 = v38;
  }
  uint64_t v37 = v21;
  if (v21 <= v9)
  {
    size_t v30 = (char *)v21 - v34;
    p_src = v34;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    char __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &v32, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,_NSRange>(v8, &v8->stream, a4, a5);
    uint64_t v23 = LODWORD(v8[1]._vptr$AppendBuffer);
    unint64_t v22 = HIDWORD(v8[1]._vptr$AppendBuffer);
    char v24 = v37;
    uint64_t v25 = (unint64_t *)((char *)v37 + 1);
    unint64_t v26 = v38;
    if ((int *)((char *)v37 + 1) <= v38)
    {
      *(unsigned char *)uint64_t v37 = -108;
      unint64_t v26 = v38;
    }
    uint64_t v27 = (int *)((char *)v24 + 9);
    if (v27 <= v26) {
      unint64_t *v25 = v23 * a3 / v22;
    }
    uint64_t v37 = v27;
    char __src = 16;
    p_src = &__src;
    this = v8;
    p_streauint64_t m = &v8->stream;
    size_t v30 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v30);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,float const*,float const,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t v12 = this;
  uint64_t v47 = *MEMORY[0x263EF8340];
  char v39 = a2;
  uint64_t v13 = (int *)&v45;
  int v46 = (int *)&v45;
  v42[0] = 1;
  v42[1] = a2;
  uint64_t v14 = v43;
  v42[2] = 32;
  uint64_t v45 = (int *)v43;
  uint64_t v15 = *(void *)(a4 + 8);
  if (v15)
  {
    uint64_t v16 = *(uint64_t **)a4;
    uint64_t v17 = &v44;
    do
    {
      uint64_t v18 = *v16;
      uint64_t v19 = v46;
      if (v17 - 2 <= v46)
      {
        *((unsigned char *)v17 - 9) = 109;
        uint64_t v19 = v46;
      }
      if (v17 <= v19) {
        *((void *)v17 - 1) = v18;
      }
      uint64_t v45 = v17;
      uint64_t v17 = (int *)((char *)v17 + 9);
      ++v16;
      --v15;
    }
    while (v15);
    uint64_t v13 = v46;
    uint64_t v14 = (char *)v17 - 9;
  }
  if (v14 + 1 <= (unsigned char *)v13)
  {
    *uint64_t v14 = 48;
    uint64_t v13 = v46;
  }
  uint64_t v20 = *a5;
  if (v14 + 2 <= (unsigned char *)v13)
  {
    v14[1] = 109;
    uint64_t v13 = v46;
  }
  if (v14 + 10 <= (unsigned char *)v13)
  {
    *(void *)(v14 + 2) = v20;
    uint64_t v13 = v46;
  }
  uint64_t v45 = (int *)(v14 + 10);
  uint64_t v21 = *a6;
  if (v14 + 11 <= (unsigned char *)v13)
  {
    v14[10] = 109;
    uint64_t v13 = v46;
  }
  if (v14 + 19 <= (unsigned char *)v13)
  {
    *(void *)(v14 + 11) = v21;
    uint64_t v13 = v46;
  }
  if (v14 + 20 <= (unsigned char *)v13)
  {
    v14[19] = 64;
    uint64_t v13 = v46;
  }
  uint64_t v22 = *a7;
  if (v14 + 21 <= (unsigned char *)v13)
  {
    v14[20] = 100;
    uint64_t v13 = v46;
  }
  if (v14 + 29 <= (unsigned char *)v13)
  {
    *(void *)(v14 + 21) = v22;
    uint64_t v13 = v46;
  }
  uint64_t v23 = a7[1];
  if (v14 + 30 <= (unsigned char *)v13)
  {
    v14[29] = 100;
    uint64_t v13 = v46;
  }
  if (v14 + 38 <= (unsigned char *)v13)
  {
    *(void *)(v14 + 30) = v23;
    uint64_t v13 = v46;
  }
  if (v14 + 39 <= (unsigned char *)v13)
  {
    v14[38] = 80;
    uint64_t v13 = v46;
  }
  uint64_t v25 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v24 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v14 + 40 <= (unsigned char *)v13)
  {
    v14[39] = -108;
    uint64_t v13 = v46;
  }
  unint64_t v26 = v14 + 48;
  if (v14 + 48 <= (unsigned char *)v13)
  {
    *((void *)v14 + 5) = v25 * a3 / v24;
    uint64_t v13 = v46;
  }
  uint64_t v27 = (int *)(v14 + 49);
  if (v27 <= v13)
  {
    unsigned char *v26 = 16;
    uint64_t v13 = v46;
  }
  uint64_t v45 = v27;
  if (v27 <= v13)
  {
    size_t v37 = (char *)v27 - v42;
    p_src = (uint64_t *)v42;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v12, &v12->stream, &v39, 1uLL);
    LOBYTE(__src) = 32;
    AppendBuffer::WriteBytes(v12, &v12->stream, &__src, 1uLL);
    if (*(void *)(a4 + 8))
    {
      unint64_t v28 = 0;
      do
      {
        uint64_t __src = *(void *)(*(void *)a4 + 8 * v28);
        char v41 = 109;
        AppendBuffer::WriteBytes(v12, &v12->stream, &v41, 1uLL);
        AppendBuffer::WriteBytes(v12, &v12->stream, &__src, 8uLL);
        ++v28;
      }
      while (*(void *)(a4 + 8) > v28);
    }
    LOBYTE(__src) = 48;
    AppendBuffer::WriteBytes(v12, &v12->stream, &__src, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,float const*,float const*,_NSRange>(v12, &v12->stream, a5, a6, a7);
    uint64_t v30 = LODWORD(v12[1]._vptr$AppendBuffer);
    unint64_t v29 = HIDWORD(v12[1]._vptr$AppendBuffer);
    unint64_t v31 = v45;
    char v32 = (unint64_t *)((char *)v45 + 1);
    char v33 = v46;
    if ((int *)((char *)v45 + 1) <= v46)
    {
      *(unsigned char *)uint64_t v45 = -108;
      char v33 = v46;
    }
    char v34 = (int *)((char *)v31 + 9);
    if (v34 <= v33) {
      unint64_t *v32 = v30 * a3 / v29;
    }
    uint64_t v45 = v34;
    LOBYTE(__src) = 16;
    p_src = &__src;
    this = v12;
    p_streauint64_t m = &v12->stream;
    size_t v37 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v37);
}

void *BinaryBuffer::Append<MTLRegion>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  v28[2] = *MEMORY[0x263EF8340];
  v28[1] = v28;
  __src[0] = 1;
  __src[1] = a2;
  qmemcpy(v11, "@@d", sizeof(v11));
  uint64_t v4 = a4[1];
  uint64_t v12 = *a4;
  uint64_t v14 = v4;
  uint64_t v5 = a4[3];
  uint64_t v16 = a4[2];
  qmemcpy(v17, "P@d", sizeof(v17));
  char v13 = 100;
  char v15 = 100;
  uint64_t v18 = v5;
  char v19 = 100;
  uint64_t v6 = a4[5];
  uint64_t v20 = a4[4];
  char v21 = 100;
  uint64_t v22 = v6;
  __int16 v23 = 20560;
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  unint64_t v8 = *(unsigned int *)(a1 + 36);
  char v24 = -108;
  unint64_t v25 = v7 * a3 / v8;
  char v26 = 16;
  v28[0] = &v27;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x48uLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto7MTLHeap}* const>,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, uint64_t *a5)
{
  unint64_t v8 = this;
  uint64_t v38 = *MEMORY[0x263EF8340];
  char v31 = a2;
  int v9 = (int *)&v36;
  size_t v37 = (int *)&v36;
  v33[0] = 1;
  v33[1] = a2;
  uint64_t v10 = v34;
  void v33[2] = 32;
  int v36 = (int *)v34;
  uint64_t v11 = a4[1];
  if (v11)
  {
    uint64_t v12 = *a4;
    char v13 = &v35;
    do
    {
      uint64_t v14 = *v12;
      char v15 = v37;
      if (v13 - 2 <= v37)
      {
        *((unsigned char *)v13 - 9) = 109;
        char v15 = v37;
      }
      if (v13 <= v15) {
        *((void *)v13 - 1) = v14;
      }
      int v36 = v13;
      char v13 = (int *)((char *)v13 + 9);
      ++v12;
      uint64_t v11 = (uint64_t *)((char *)v11 - 1);
    }
    while (v11);
    int v9 = v37;
    uint64_t v10 = (char *)v13 - 9;
  }
  if (v10 + 1 <= (unsigned char *)v9)
  {
    *uint64_t v10 = 48;
    int v9 = v37;
  }
  uint64_t v16 = *a5;
  if (v10 + 2 <= (unsigned char *)v9)
  {
    v10[1] = 100;
    int v9 = v37;
  }
  if (v10 + 10 <= (unsigned char *)v9)
  {
    *(void *)(v10 + 2) = v16;
    int v9 = v37;
  }
  uint64_t v18 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v17 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v10 + 11 <= (unsigned char *)v9)
  {
    v10[10] = -108;
    int v9 = v37;
  }
  char v19 = v10 + 19;
  if (v10 + 19 <= (unsigned char *)v9)
  {
    *(void *)(v10 + 11) = v18 * a3 / v17;
    int v9 = v37;
  }
  uint64_t v20 = (int *)(v10 + 20);
  if (v20 <= v9)
  {
    *char v19 = 16;
    int v9 = v37;
  }
  int v36 = v20;
  if (v20 <= v9)
  {
    size_t v29 = (char *)v20 - v33;
    p_src = v33;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    char __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &v31, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto7MTLHeap}* const>,unsigned long>(v8, &v8->stream, a4, a5);
    uint64_t v22 = LODWORD(v8[1]._vptr$AppendBuffer);
    unint64_t v21 = HIDWORD(v8[1]._vptr$AppendBuffer);
    __int16 v23 = v36;
    char v24 = (unint64_t *)((char *)v36 + 1);
    unint64_t v25 = v37;
    if ((int *)((char *)v36 + 1) <= v37)
    {
      *(unsigned char *)int v36 = -108;
      unint64_t v25 = v37;
    }
    char v26 = (int *)((char *)v23 + 9);
    if (v26 <= v25) {
      unint64_t *v24 = v22 * a3 / v21;
    }
    int v36 = v26;
    char __src = 16;
    p_src = &__src;
    this = v8;
    p_streauint64_t m = &v8->stream;
    size_t v29 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v29);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v10 = this;
  uint64_t v41 = *MEMORY[0x263EF8340];
  char v34 = a2;
  uint64_t v11 = (int *)&v39;
  char v40 = (int *)&v39;
  v36[0] = 1;
  v36[1] = a2;
  uint64_t v12 = v37;
  v36[2] = 32;
  char v39 = (int *)v37;
  char v13 = a4[1];
  if (v13)
  {
    uint64_t v14 = *a4;
    char v15 = &v38;
    do
    {
      uint64_t v16 = *v14;
      unint64_t v17 = v40;
      if (v15 - 2 <= v40)
      {
        *((unsigned char *)v15 - 9) = 109;
        unint64_t v17 = v40;
      }
      if (v15 <= v17) {
        *((void *)v15 - 1) = v16;
      }
      char v39 = v15;
      char v15 = (int *)((char *)v15 + 9);
      ++v14;
      char v13 = (uint64_t *)((char *)v13 - 1);
    }
    while (v13);
    uint64_t v11 = v40;
    uint64_t v12 = (char *)v15 - 9;
  }
  if (v12 + 1 <= (unsigned char *)v11)
  {
    *uint64_t v12 = 48;
    uint64_t v11 = v40;
  }
  uint64_t v18 = *a5;
  if (v12 + 2 <= (unsigned char *)v11)
  {
    v12[1] = 100;
    uint64_t v11 = v40;
  }
  if (v12 + 10 <= (unsigned char *)v11)
  {
    *(void *)(v12 + 2) = v18;
    uint64_t v11 = v40;
  }
  uint64_t v19 = *a6;
  if (v12 + 11 <= (unsigned char *)v11)
  {
    v12[10] = 100;
    uint64_t v11 = v40;
  }
  if (v12 + 19 <= (unsigned char *)v11)
  {
    *(void *)(v12 + 11) = v19;
    uint64_t v11 = v40;
  }
  uint64_t v21 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v20 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v12 + 20 <= (unsigned char *)v11)
  {
    v12[19] = -108;
    uint64_t v11 = v40;
  }
  uint64_t v22 = v12 + 28;
  if (v12 + 28 <= (unsigned char *)v11)
  {
    *(void *)(v12 + 20) = v21 * a3 / v20;
    uint64_t v11 = v40;
  }
  __int16 v23 = (int *)(v12 + 29);
  if (v23 <= v11)
  {
    unsigned char *v22 = 16;
    uint64_t v11 = v40;
  }
  char v39 = v23;
  if (v23 <= v11)
  {
    size_t v32 = (char *)v23 - v36;
    p_src = v36;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    char __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v10, &v10->stream, &v34, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long>(v10, &v10->stream, a4, a5, a6);
    uint64_t v25 = LODWORD(v10[1]._vptr$AppendBuffer);
    unint64_t v24 = HIDWORD(v10[1]._vptr$AppendBuffer);
    char v26 = v39;
    uint64_t v27 = (unint64_t *)((char *)v39 + 1);
    unint64_t v28 = v40;
    if ((int *)((char *)v39 + 1) <= v40)
    {
      *(unsigned char *)char v39 = -108;
      unint64_t v28 = v40;
    }
    size_t v29 = (int *)((char *)v26 + 9);
    if (v29 <= v28) {
      unint64_t *v27 = v25 * a3 / v24;
    }
    char v39 = v29;
    char __src = 16;
    p_src = &__src;
    this = v10;
    p_streauint64_t m = &v10->stream;
    size_t v32 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v32);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v22[2] = *MEMORY[0x263EF8340];
  v22[1] = v22;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v6 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v13 = v6;
  uint64_t v7 = *a5;
  char v14 = 100;
  uint64_t v15 = v7;
  uint64_t v8 = *a6;
  char v16 = 100;
  uint64_t v17 = v8;
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  unint64_t v10 = *(unsigned int *)(a1 + 36);
  char v18 = -108;
  unint64_t v19 = v9 * a3 / v10;
  char v20 = 16;
  v22[0] = &v21;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x27uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  unsigned char v26[2] = *MEMORY[0x263EF8340];
  v26[1] = v26;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v7 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v15 = v7;
  uint64_t v8 = *a5;
  char v16 = 100;
  uint64_t v17 = v8;
  uint64_t v9 = *a6;
  char v18 = 100;
  uint64_t v19 = v9;
  uint64_t v10 = *a7;
  char v20 = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *(unsigned int *)(a1 + 32);
  unint64_t v12 = *(unsigned int *)(a1 + 36);
  char v22 = -108;
  unint64_t v23 = v11 * a3 / v12;
  char v24 = 16;
  v26[0] = &v25;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x30uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  v30[2] = *MEMORY[0x263EF8340];
  v30[1] = v30;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v8 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v17 = v8;
  uint64_t v9 = *a5;
  char v18 = 100;
  uint64_t v19 = v9;
  uint64_t v10 = *a6;
  char v20 = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *a7;
  char v22 = 100;
  uint64_t v23 = v11;
  uint64_t v12 = *a8;
  char v24 = 100;
  uint64_t v25 = v12;
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  unint64_t v14 = *(unsigned int *)(a1 + 36);
  char v26 = -108;
  unint64_t v27 = v13 * a3 / v14;
  char v28 = 16;
  v30[0] = v29;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x39uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,objc_object  {objcproto9MTLBuffer}*,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v22[2] = *MEMORY[0x263EF8340];
  v22[1] = v22;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v6 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v13 = v6;
  uint64_t v7 = *a5;
  char v14 = 109;
  uint64_t v15 = v7;
  uint64_t v8 = *a6;
  char v16 = 100;
  uint64_t v17 = v8;
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  unint64_t v10 = *(unsigned int *)(a1 + 36);
  char v18 = -108;
  unint64_t v19 = v9 * a3 / v10;
  char v20 = 16;
  v22[0] = &v21;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x27uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,MTLIndexType,objc_object  {objcproto9MTLBuffer}*,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  v30[2] = *MEMORY[0x263EF8340];
  v30[1] = v30;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v8 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v17 = v8;
  uint64_t v9 = *a5;
  char v18 = 100;
  uint64_t v19 = v9;
  uint64_t v10 = *a6;
  char v20 = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *a7;
  char v22 = 109;
  uint64_t v23 = v11;
  uint64_t v12 = *a8;
  char v24 = 100;
  uint64_t v25 = v12;
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  unint64_t v14 = *(unsigned int *)(a1 + 36);
  char v26 = -108;
  unint64_t v27 = v13 * a3 / v14;
  char v28 = 16;
  v30[0] = v29;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x39uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,MTLIndexType,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  v34[2] = *MEMORY[0x263EF8340];
  v34[1] = v34;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v9 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v19 = v9;
  uint64_t v10 = *a5;
  char v20 = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *a6;
  char v22 = 100;
  uint64_t v23 = v11;
  uint64_t v12 = *a7;
  char v24 = 109;
  uint64_t v25 = v12;
  uint64_t v13 = *a8;
  char v26 = 100;
  uint64_t v27 = v13;
  uint64_t v14 = *a9;
  char v28 = 100;
  uint64_t v29 = v14;
  uint64_t v15 = *(unsigned int *)(a1 + 32);
  unint64_t v16 = *(unsigned int *)(a1 + 36);
  char v30 = -108;
  unint64_t v31 = v15 * a3 / v16;
  char v32 = 16;
  v34[0] = v33;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x42uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,MTLIndexType,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  v42[2] = *MEMORY[0x263EF8340];
  v42[1] = v42;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v11 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v23 = v11;
  uint64_t v12 = *a5;
  char v24 = 100;
  uint64_t v25 = v12;
  uint64_t v13 = *a6;
  char v26 = 100;
  uint64_t v27 = v13;
  uint64_t v14 = *a7;
  char v28 = 109;
  uint64_t v29 = v14;
  uint64_t v15 = *a8;
  char v30 = 100;
  uint64_t v31 = v15;
  uint64_t v16 = *a9;
  char v32 = 100;
  uint64_t v33 = v16;
  uint64_t v17 = *a10;
  char v34 = 100;
  uint64_t v35 = v17;
  uint64_t v18 = *a11;
  char v36 = 100;
  uint64_t v37 = v18;
  uint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = *(unsigned int *)(a1 + 36);
  char v38 = -108;
  unint64_t v39 = v19 * a3 / v20;
  char v40 = 16;
  v42[0] = &v41;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x54uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,MTLIndexType,objc_object  {objcproto9MTLBuffer}*,unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  v34[2] = *MEMORY[0x263EF8340];
  v34[1] = v34;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v9 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v19 = v9;
  uint64_t v10 = *a5;
  char v20 = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *a6;
  char v22 = 109;
  uint64_t v23 = v11;
  uint64_t v12 = *a7;
  char v24 = 100;
  uint64_t v25 = v12;
  uint64_t v13 = *a8;
  char v26 = 109;
  uint64_t v27 = v13;
  uint64_t v14 = *a9;
  char v28 = 100;
  uint64_t v29 = v14;
  uint64_t v15 = *(unsigned int *)(a1 + 32);
  unint64_t v16 = *(unsigned int *)(a1 + 36);
  char v30 = -108;
  unint64_t v31 = v15 * a3 / v16;
  char v32 = 16;
  v34[0] = v33;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x42uLL);
}

void *BinaryBuffer::Append<unsigned long,unsigned long,unsigned long,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  void v38[2] = *MEMORY[0x263EF8340];
  v38[1] = v38;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v10 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *a5;
  char v22 = 100;
  uint64_t v23 = v11;
  uint64_t v12 = *a6;
  char v24 = 100;
  uint64_t v25 = v12;
  uint64_t v13 = *a7;
  char v26 = 109;
  uint64_t v27 = v13;
  uint64_t v14 = *a8;
  char v28 = 100;
  uint64_t v29 = v14;
  uint64_t v15 = *a9;
  char v30 = 100;
  uint64_t v31 = v15;
  uint64_t v16 = *a10;
  char v32 = 100;
  uint64_t v33 = v16;
  uint64_t v17 = *(unsigned int *)(a1 + 32);
  unint64_t v18 = *(unsigned int *)(a1 + 36);
  char v34 = -108;
  unint64_t v35 = v17 * a3 / v18;
  char v36 = 16;
  v38[0] = v37;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x4BuLL);
}

void *BinaryBuffer::Append<unsigned long,unsigned long,unsigned long,objc_object  {objcproto9MTLBuffer}*,unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  v46[2] = *MEMORY[0x263EF8340];
  v46[1] = v46;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v12 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v25 = v12;
  uint64_t v13 = *a5;
  char v26 = 100;
  uint64_t v27 = v13;
  uint64_t v14 = *a6;
  char v28 = 100;
  uint64_t v29 = v14;
  uint64_t v15 = *a7;
  char v30 = 109;
  uint64_t v31 = v15;
  uint64_t v16 = *a8;
  char v32 = 100;
  uint64_t v33 = v16;
  uint64_t v17 = *a9;
  char v34 = 109;
  uint64_t v35 = v17;
  uint64_t v18 = *a10;
  char v36 = 100;
  uint64_t v37 = v18;
  uint64_t v19 = *a11;
  char v38 = 100;
  uint64_t v39 = v19;
  uint64_t v20 = *a12;
  char v40 = 100;
  uint64_t v41 = v20;
  uint64_t v21 = *(unsigned int *)(a1 + 32);
  unint64_t v22 = *(unsigned int *)(a1 + 36);
  char v42 = -108;
  unint64_t v43 = v21 * a3 / v22;
  char v44 = 16;
  v46[0] = v45;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x5DuLL);
}

void *BinaryBuffer::Append<unsigned long,objc_object  {objcproto9MTLBuffer}*,unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  v30[2] = *MEMORY[0x263EF8340];
  v30[1] = v30;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v8 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v17 = v8;
  uint64_t v9 = *a5;
  char v18 = 109;
  uint64_t v19 = v9;
  uint64_t v10 = *a6;
  char v20 = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *a7;
  char v22 = 109;
  uint64_t v23 = v11;
  uint64_t v12 = *a8;
  char v24 = 100;
  uint64_t v25 = v12;
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  unint64_t v14 = *(unsigned int *)(a1 + 36);
  char v26 = -108;
  unint64_t v27 = v13 * a3 / v14;
  char v28 = 16;
  v30[0] = v29;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x39uLL);
}

void *BinaryBuffer::Append<unsigned long,objc_object  {objcproto9MTLBuffer}*,unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  void v38[2] = *MEMORY[0x263EF8340];
  v38[1] = v38;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v10 = *a4;
  unsigned char __src[2] = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *a5;
  char v22 = 109;
  uint64_t v23 = v11;
  uint64_t v12 = *a6;
  char v24 = 100;
  uint64_t v25 = v12;
  uint64_t v13 = *a7;
  char v26 = 109;
  uint64_t v27 = v13;
  uint64_t v14 = *a8;
  char v28 = 100;
  uint64_t v29 = v14;
  uint64_t v15 = *a9;
  char v30 = 109;
  uint64_t v31 = v15;
  uint64_t v16 = *a10;
  char v32 = 100;
  uint64_t v33 = v16;
  uint64_t v17 = *(unsigned int *)(a1 + 32);
  unint64_t v18 = *(unsigned int *)(a1 + 36);
  char v34 = -108;
  unint64_t v35 = v17 * a3 / v18;
  char v36 = 16;
  v38[0] = v37;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x4BuLL);
}

void *BinaryBuffer::Append<float,float,float,float>(uint64_t a1, char a2, uint64_t a3, int *a4, int *a5, int *a6, int *a7)
{
  unsigned char v26[2] = *MEMORY[0x263EF8340];
  v26[1] = v26;
  __src[0] = 1;
  __src[1] = a2;
  int v7 = *a4;
  unsigned char __src[2] = 106;
  int v15 = v7;
  int v8 = *a5;
  char v16 = 106;
  int v17 = v8;
  int v9 = *a6;
  char v18 = 106;
  int v19 = v9;
  int v10 = *a7;
  char v20 = 106;
  int v21 = v10;
  uint64_t v11 = *(unsigned int *)(a1 + 32);
  unint64_t v12 = *(unsigned int *)(a1 + 36);
  char v22 = -108;
  unint64_t v23 = v11 * a3 / v12;
  char v24 = 16;
  v26[0] = &v25;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x20uLL);
}

void *BinaryBuffer::Append<float,float,float>(uint64_t a1, char a2, uint64_t a3, int *a4, int *a5, int *a6)
{
  v22[2] = *MEMORY[0x263EF8340];
  v22[1] = v22;
  __src[0] = 1;
  __src[1] = a2;
  int v6 = *a4;
  unsigned char __src[2] = 106;
  int v13 = v6;
  int v7 = *a5;
  char v14 = 106;
  int v15 = v7;
  int v8 = *a6;
  char v16 = 106;
  int v17 = v8;
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  unint64_t v10 = *(unsigned int *)(a1 + 36);
  char v18 = -108;
  unint64_t v19 = v9 * a3 / v10;
  char v20 = 16;
  v22[0] = v21;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x1BuLL);
}

void *BinaryBuffer::Append<MTLScissorRect>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  unsigned char v23[2] = *MEMORY[0x263EF8340];
  v23[1] = v23;
  __src[0] = 1;
  __src[1] = a2;
  __int16 v10 = 25664;
  uint64_t v4 = a4[1];
  uint64_t v11 = *a4;
  char v12 = 100;
  uint64_t v13 = v4;
  char v14 = 100;
  uint64_t v5 = a4[3];
  uint64_t v15 = a4[2];
  char v16 = 100;
  uint64_t v17 = v5;
  char v18 = 80;
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  unint64_t v7 = *(unsigned int *)(a1 + 36);
  char v19 = -108;
  unint64_t v20 = v6 * a3 / v7;
  char v21 = 16;
  v23[0] = v22;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x32uLL);
}

void *BinaryBuffer::Append<unsigned int,unsigned int>(uint64_t a1, char a2, uint64_t a3, int *a4, int *a5)
{
  v18[2] = *MEMORY[0x263EF8340];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  int v5 = *a4;
  unsigned char __src[2] = 99;
  int v11 = v5;
  int v6 = *a5;
  char v12 = 99;
  int v13 = v6;
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  unint64_t v8 = *(unsigned int *)(a1 + 36);
  char v14 = -108;
  unint64_t v15 = v7 * a3 / v8;
  char v16 = 16;
  v18[0] = &v17;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x16uLL);
}

void *BinaryBuffer::Append<MTLViewport>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  v25[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = a4[1];
  uint64_t v10 = *a4;
  uint64_t v12 = v4;
  uint64_t v5 = a4[3];
  uint64_t v14 = a4[2];
  uint64_t v16 = v5;
  uint64_t v6 = a4[5];
  uint64_t v18 = a4[4];
  v25[1] = v25;
  __src[0] = 1;
  __src[1] = a2;
  __int16 v9 = 27456;
  char v11 = 107;
  char v13 = 107;
  char v15 = 107;
  char v17 = 107;
  char v19 = 107;
  uint64_t v20 = v6;
  __int16 v21 = -27568;
  unint64_t v22 = (unint64_t)*(unsigned int *)(a1 + 32) * a3 / *(unsigned int *)(a1 + 36);
  char v23 = 16;
  v25[0] = &v24;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x44uLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<MTLViewport const>,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, void *a4, uint64_t *a5)
{
  unint64_t v8 = this;
  uint64_t v47 = *MEMORY[0x263EF8340];
  char v38 = a2;
  __int16 v9 = &v45;
  int v46 = &v45;
  v41[0] = 1;
  v41[1] = a2;
  uint64_t v45 = &v42;
  char v42 = 32;
  uint64_t v10 = a4[1];
  if (v10)
  {
    char v11 = v44;
    uint64_t v12 = (uint64_t *)(*a4 + 24);
    do
    {
      unint64_t v13 = (unint64_t)v46;
      if (v11 - 55 <= (char *)v46)
      {
        *(v11 - 56) = 64;
        unint64_t v13 = (unint64_t)v46;
      }
      uint64_t v14 = *(v12 - 3);
      if ((unint64_t)(v11 - 54) <= v13)
      {
        *(v11 - 55) = 107;
        unint64_t v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 46) <= v13)
      {
        *(void *)(v11 - 54) = v14;
        unint64_t v13 = (unint64_t)v46;
      }
      uint64_t v15 = *(v12 - 2);
      if ((unint64_t)(v11 - 45) <= v13)
      {
        *(v11 - 46) = 107;
        unint64_t v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 37) <= v13)
      {
        *(void *)(v11 - 45) = v15;
        unint64_t v13 = (unint64_t)v46;
      }
      uint64_t v16 = *(v12 - 1);
      if ((unint64_t)(v11 - 36) <= v13)
      {
        *(v11 - 37) = 107;
        unint64_t v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 28) <= v13)
      {
        *(void *)(v11 - 36) = v16;
        unint64_t v13 = (unint64_t)v46;
      }
      uint64_t v45 = v11 - 28;
      uint64_t v17 = *v12;
      if ((unint64_t)(v11 - 27) <= v13)
      {
        *(v11 - 28) = 107;
        unint64_t v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 19) <= v13)
      {
        *(void *)(v11 - 27) = v17;
        unint64_t v13 = (unint64_t)v46;
      }
      uint64_t v18 = v12[1];
      if ((unint64_t)(v11 - 18) <= v13)
      {
        *(v11 - 19) = 107;
        unint64_t v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 10) <= v13)
      {
        *(void *)(v11 - 18) = v18;
        unint64_t v13 = (unint64_t)v46;
      }
      uint64_t v19 = v12[2];
      if ((unint64_t)(v11 - 9) <= v13)
      {
        *(v11 - 10) = 107;
        unint64_t v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 1) <= v13)
      {
        *(void *)(v11 - 9) = v19;
        unint64_t v13 = (unint64_t)v46;
      }
      if ((unint64_t)v11 <= v13) {
        *(v11 - 1) = 80;
      }
      uint64_t v45 = v11;
      v11 += 56;
      v12 += 6;
      --v10;
    }
    while (v10);
    __int16 v9 = v46;
    uint64_t v20 = v11 - 56;
  }
  else
  {
    uint64_t v20 = v43;
  }
  if (v20 + 1 <= (char *)v9)
  {
    *uint64_t v20 = 48;
    __int16 v9 = v46;
  }
  uint64_t v21 = *a5;
  if (v20 + 2 <= (char *)v9)
  {
    v20[1] = 100;
    __int16 v9 = v46;
  }
  if (v20 + 10 <= (char *)v9)
  {
    *(void *)(v20 + 2) = v21;
    __int16 v9 = v46;
  }
  uint64_t v23 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v22 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v20 + 11 <= (char *)v9)
  {
    v20[10] = -108;
    __int16 v9 = v46;
  }
  int v24 = v20 + 19;
  if (v20 + 19 <= (char *)v9)
  {
    *(void *)(v20 + 11) = v23 * a3 / v22;
    __int16 v9 = v46;
  }
  uint64_t v25 = v20 + 20;
  if (v25 <= (char *)v9)
  {
    unsigned char *v24 = 16;
    __int16 v9 = v46;
  }
  uint64_t v45 = v25;
  if (v25 <= (char *)v9)
  {
    size_t v36 = v25 - v41;
    p_src = (uint64_t *)v41;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &v38, 1uLL);
    LOBYTE(__src) = 32;
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 1uLL);
    if (a4[1])
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(v8, &v8->stream, (uint64_t *)(*a4 + v26));
        ++v27;
        v26 += 48;
      }
      while (a4[1] > v27);
    }
    LOBYTE(__src) = 48;
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 1uLL);
    uint64_t __src = *a5;
    char v40 = 100;
    AppendBuffer::WriteBytes(v8, &v8->stream, &v40, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 8uLL);
    uint64_t v29 = LODWORD(v8[1]._vptr$AppendBuffer);
    unint64_t v28 = HIDWORD(v8[1]._vptr$AppendBuffer);
    char v30 = v45;
    uint64_t v31 = (unint64_t *)(v45 + 1);
    char v32 = v46;
    if (v45 + 1 <= (char *)v46)
    {
      char *v45 = -108;
      char v32 = v46;
    }
    uint64_t v33 = v30 + 9;
    if (v33 <= (char *)v32) {
      unint64_t *v31 = v29 * a3 / v28;
    }
    uint64_t v45 = v33;
    LOBYTE(__src) = 16;
    p_src = &__src;
    this = v8;
    p_streauint64_t m = &v8->stream;
    size_t v36 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v36);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<MTLScissorRect const>,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, void *a4, uint64_t *a5)
{
  unint64_t v8 = this;
  uint64_t v44 = *MEMORY[0x263EF8340];
  char v36 = a2;
  __int16 v9 = &v42;
  unint64_t v43 = &v42;
  v39[0] = 1;
  v39[1] = a2;
  v39[2] = 32;
  uint64_t v10 = a4[1];
  if (v10)
  {
    char v11 = v41;
    uint64_t v12 = (uint64_t *)(*a4 + 16);
    do
    {
      unint64_t v13 = (unint64_t)v43;
      if (v11 - 37 <= (unsigned char *)v43)
      {
        *(v11 - 38) = 64;
        unint64_t v13 = (unint64_t)v43;
      }
      uint64_t v14 = *(v12 - 2);
      if ((unint64_t)(v11 - 36) <= v13)
      {
        *(v11 - 37) = 100;
        unint64_t v13 = (unint64_t)v43;
      }
      if ((unint64_t)(v11 - 28) <= v13)
      {
        *(void *)(v11 - 36) = v14;
        unint64_t v13 = (unint64_t)v43;
      }
      char v42 = v11 - 28;
      uint64_t v15 = *(v12 - 1);
      if ((unint64_t)(v11 - 27) <= v13)
      {
        *(v11 - 28) = 100;
        unint64_t v13 = (unint64_t)v43;
      }
      if ((unint64_t)(v11 - 19) <= v13)
      {
        *(void *)(v11 - 27) = v15;
        unint64_t v13 = (unint64_t)v43;
      }
      uint64_t v16 = *v12;
      if ((unint64_t)(v11 - 18) <= v13)
      {
        *(v11 - 19) = 100;
        unint64_t v13 = (unint64_t)v43;
      }
      if ((unint64_t)(v11 - 10) <= v13)
      {
        *(void *)(v11 - 18) = v16;
        unint64_t v13 = (unint64_t)v43;
      }
      uint64_t v17 = v12[1];
      if ((unint64_t)(v11 - 9) <= v13)
      {
        *(v11 - 10) = 100;
        unint64_t v13 = (unint64_t)v43;
      }
      if ((unint64_t)(v11 - 1) <= v13)
      {
        *(void *)(v11 - 9) = v17;
        unint64_t v13 = (unint64_t)v43;
      }
      if ((unint64_t)v11 <= v13) {
        *(v11 - 1) = 80;
      }
      char v42 = v11;
      v11 += 38;
      v12 += 4;
      --v10;
    }
    while (v10);
    __int16 v9 = v43;
    uint64_t v18 = v11 - 38;
  }
  else
  {
    uint64_t v18 = v40;
  }
  if (v18 + 1 <= (unsigned char *)v9)
  {
    *uint64_t v18 = 48;
    __int16 v9 = v43;
  }
  uint64_t v19 = *a5;
  if (v18 + 2 <= (unsigned char *)v9)
  {
    v18[1] = 100;
    __int16 v9 = v43;
  }
  if (v18 + 10 <= (unsigned char *)v9)
  {
    *(void *)(v18 + 2) = v19;
    __int16 v9 = v43;
  }
  uint64_t v21 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v20 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v18 + 11 <= (unsigned char *)v9)
  {
    v18[10] = -108;
    __int16 v9 = v43;
  }
  unint64_t v22 = v18 + 19;
  if (v18 + 19 <= (unsigned char *)v9)
  {
    *(void *)(v18 + 11) = v21 * a3 / v20;
    __int16 v9 = v43;
  }
  uint64_t v23 = v18 + 20;
  if (v23 <= (unsigned char *)v9)
  {
    unsigned char *v22 = 16;
    __int16 v9 = v43;
  }
  char v42 = v23;
  if (v23 <= (unsigned char *)v9)
  {
    size_t v34 = v23 - v39;
    p_src = (uint64_t *)v39;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &v36, 1uLL);
    LOBYTE(__src) = 32;
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 1uLL);
    if (a4[1])
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(v8, &v8->stream, (uint64_t *)(*a4 + v24));
        ++v25;
        v24 += 32;
      }
      while (a4[1] > v25);
    }
    LOBYTE(__src) = 48;
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 1uLL);
    uint64_t __src = *a5;
    char v38 = 100;
    AppendBuffer::WriteBytes(v8, &v8->stream, &v38, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 8uLL);
    uint64_t v27 = LODWORD(v8[1]._vptr$AppendBuffer);
    unint64_t v26 = HIDWORD(v8[1]._vptr$AppendBuffer);
    unint64_t v28 = v42;
    uint64_t v29 = (unint64_t *)(v42 + 1);
    char v30 = v43;
    if (v42 + 1 <= (unsigned char *)v43)
    {
      *char v42 = -108;
      char v30 = v43;
    }
    uint64_t v31 = v28 + 9;
    if (v31 <= (unsigned char *)v30) {
      *uint64_t v29 = v27 * a3 / v26;
    }
    char v42 = v31;
    LOBYTE(__src) = 16;
    p_src = &__src;
    this = v8;
    p_streauint64_t m = &v8->stream;
    size_t v34 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v34);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v12 = this;
  uint64_t v44 = *MEMORY[0x263EF8340];
  char v37 = a2;
  unint64_t v13 = (int *)&v42;
  unint64_t v43 = (int *)&v42;
  v39[0] = 1;
  v39[1] = a2;
  uint64_t v14 = v40;
  v39[2] = 32;
  char v42 = (int *)v40;
  uint64_t v15 = a4[1];
  if (v15)
  {
    uint64_t v16 = *a4;
    uint64_t v17 = &v41;
    do
    {
      uint64_t v18 = *v16;
      uint64_t v19 = v43;
      if (v17 - 2 <= v43)
      {
        *((unsigned char *)v17 - 9) = 109;
        uint64_t v19 = v43;
      }
      if (v17 <= v19) {
        *((void *)v17 - 1) = v18;
      }
      char v42 = v17;
      uint64_t v17 = (int *)((char *)v17 + 9);
      ++v16;
      uint64_t v15 = (uint64_t *)((char *)v15 - 1);
    }
    while (v15);
    unint64_t v13 = v43;
    uint64_t v14 = (char *)v17 - 9;
  }
  if (v14 + 1 <= (unsigned char *)v13)
  {
    *uint64_t v14 = 48;
    unint64_t v13 = v43;
  }
  uint64_t v20 = *a5;
  if (v14 + 2 <= (unsigned char *)v13)
  {
    v14[1] = 100;
    unint64_t v13 = v43;
  }
  if (v14 + 10 <= (unsigned char *)v13)
  {
    *(void *)(v14 + 2) = v20;
    unint64_t v13 = v43;
  }
  uint64_t v21 = *a6;
  if (v14 + 11 <= (unsigned char *)v13)
  {
    v14[10] = 100;
    unint64_t v13 = v43;
  }
  if (v14 + 19 <= (unsigned char *)v13)
  {
    *(void *)(v14 + 11) = v21;
    unint64_t v13 = v43;
  }
  uint64_t v22 = *a7;
  if (v14 + 20 <= (unsigned char *)v13)
  {
    v14[19] = 100;
    unint64_t v13 = v43;
  }
  if (v14 + 28 <= (unsigned char *)v13)
  {
    *(void *)(v14 + 20) = v22;
    unint64_t v13 = v43;
  }
  uint64_t v24 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v23 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v14 + 29 <= (unsigned char *)v13)
  {
    v14[28] = -108;
    unint64_t v13 = v43;
  }
  unint64_t v25 = v14 + 37;
  if (v14 + 37 <= (unsigned char *)v13)
  {
    *(void *)(v14 + 29) = v24 * a3 / v23;
    unint64_t v13 = v43;
  }
  unint64_t v26 = (int *)(v14 + 38);
  if (v26 <= v13)
  {
    unsigned char *v25 = 16;
    unint64_t v13 = v43;
  }
  char v42 = v26;
  if (v26 <= v13)
  {
    size_t v35 = (char *)v26 - v39;
    p_src = v39;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    char __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v12, &v12->stream, &v37, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long,unsigned long>(v12, &v12->stream, a4, a5, a6, a7);
    uint64_t v28 = LODWORD(v12[1]._vptr$AppendBuffer);
    unint64_t v27 = HIDWORD(v12[1]._vptr$AppendBuffer);
    uint64_t v29 = v42;
    char v30 = (unint64_t *)((char *)v42 + 1);
    uint64_t v31 = v43;
    if ((int *)((char *)v42 + 1) <= v43)
    {
      *(unsigned char *)char v42 = -108;
      uint64_t v31 = v43;
    }
    char v32 = (int *)((char *)v29 + 9);
    if (v32 <= v31) {
      unint64_t *v30 = v28 * a3 / v27;
    }
    char v42 = v32;
    char __src = 16;
    p_src = &__src;
    this = v12;
    p_streauint64_t m = &v12->stream;
    size_t v35 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v35);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  unsigned char v26[2] = *MEMORY[0x263EF8340];
  v26[1] = v26;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v7 = *a4;
  unsigned char __src[2] = 109;
  uint64_t v15 = v7;
  uint64_t v8 = *a5;
  char v16 = 100;
  uint64_t v17 = v8;
  uint64_t v9 = *a6;
  char v18 = 100;
  uint64_t v19 = v9;
  uint64_t v10 = *a7;
  char v20 = 100;
  uint64_t v21 = v10;
  uint64_t v11 = *(unsigned int *)(a1 + 32);
  unint64_t v12 = *(unsigned int *)(a1 + 36);
  char v22 = -108;
  unint64_t v23 = v11 * a3 / v12;
  char v24 = 16;
  v26[0] = &v25;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x30uLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto9MTLBuffer}* const>,BinaryBuffer::Array<unsigned long const>,unsigned long const,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, void *a5, void *a6, uint64_t *a7)
{
  unint64_t v12 = this;
  uint64_t v55 = *MEMORY[0x263EF8340];
  char v48 = a2;
  unint64_t v13 = &v53;
  uint64_t v54 = (int *)&v53;
  v50[0] = 1;
  v50[1] = a2;
  uint64_t v14 = v51;
  v50[2] = 32;
  __int16 v53 = (int *)v51;
  uint64_t v15 = a4[1];
  if (v15)
  {
    char v16 = *a4;
    uint64_t v17 = &v52;
    do
    {
      uint64_t v18 = *v16;
      uint64_t v19 = v54;
      if (v17 - 2 <= v54)
      {
        *((unsigned char *)v17 - 9) = 109;
        uint64_t v19 = v54;
      }
      if (v17 <= v19) {
        *((void *)v17 - 1) = v18;
      }
      __int16 v53 = v17;
      uint64_t v17 = (int *)((char *)v17 + 9);
      ++v16;
      uint64_t v15 = (uint64_t *)((char *)v15 - 1);
    }
    while (v15);
    unint64_t v13 = v54;
    uint64_t v14 = (char *)v17 - 9;
  }
  if (v14 + 1 <= (unsigned char *)v13)
  {
    *uint64_t v14 = 48;
    unint64_t v13 = v54;
  }
  char v20 = v14 + 2;
  if (v14 + 2 <= (unsigned char *)v13) {
    v14[1] = 32;
  }
  if (a5[1])
  {
    unint64_t v21 = 0;
    char v22 = (int *)(v14 + 11);
    do
    {
      uint64_t v23 = *(void *)(*a5 + 8 * v21);
      char v24 = v54;
      if (v22 - 2 <= v54)
      {
        *((unsigned char *)v22 - 9) = 100;
        char v24 = v54;
      }
      if (v22 <= v24) {
        *((void *)v22 - 1) = v23;
      }
      ++v21;
      char v22 = (int *)((char *)v22 + 9);
    }
    while (a5[1] > v21);
    char v20 = (char *)v22 - 9;
  }
  unint64_t v25 = (unint64_t)v54;
  if (v20 + 1 <= (unsigned char *)v54)
  {
    *char v20 = 48;
    unint64_t v25 = (unint64_t)v54;
  }
  __int16 v53 = (int *)(v20 + 1);
  unint64_t v26 = v20 + 2;
  if ((unint64_t)(v20 + 2) <= v25) {
    v20[1] = 32;
  }
  if (a6[1])
  {
    unint64_t v27 = 0;
    uint64_t v28 = (int *)(v20 + 11);
    do
    {
      uint64_t v29 = *(void *)(*a6 + 8 * v27);
      char v30 = v54;
      if (v28 - 2 <= v54)
      {
        *((unsigned char *)v28 - 9) = 100;
        char v30 = v54;
      }
      if (v28 <= v30) {
        *((void *)v28 - 1) = v29;
      }
      ++v27;
      uint64_t v28 = (int *)((char *)v28 + 9);
    }
    while (a6[1] > v27);
    unint64_t v26 = (char *)v28 - 9;
  }
  unint64_t v31 = (unint64_t)v54;
  if (v26 + 1 <= (unsigned char *)v54)
  {
    unsigned char *v26 = 48;
    unint64_t v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 2) <= v31)
  {
    v26[1] = 64;
    unint64_t v31 = (unint64_t)v54;
  }
  uint64_t v32 = *a7;
  if ((unint64_t)(v26 + 3) <= v31)
  {
    unsigned char v26[2] = 100;
    unint64_t v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 11) <= v31)
  {
    *(void *)(v26 + 3) = v32;
    unint64_t v31 = (unint64_t)v54;
  }
  uint64_t v33 = a7[1];
  if ((unint64_t)(v26 + 12) <= v31)
  {
    v26[11] = 100;
    unint64_t v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 20) <= v31)
  {
    *(void *)(v26 + 12) = v33;
    unint64_t v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 21) <= v31)
  {
    v26[20] = 80;
    unint64_t v31 = (unint64_t)v54;
  }
  uint64_t v35 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v34 = HIDWORD(this[1]._vptr$AppendBuffer);
  if ((unint64_t)(v26 + 22) <= v31)
  {
    v26[21] = -108;
    unint64_t v31 = (unint64_t)v54;
  }
  char v36 = v26 + 30;
  if ((unint64_t)(v26 + 30) <= v31)
  {
    *(void *)(v26 + 22) = v35 * a3 / v34;
    unint64_t v31 = (unint64_t)v54;
  }
  char v37 = (int *)(v26 + 31);
  if ((unint64_t)v37 <= v31)
  {
    *char v36 = 16;
    unint64_t v31 = (unint64_t)v54;
  }
  __int16 v53 = v37;
  if ((unint64_t)v37 <= v31)
  {
    size_t v46 = (char *)v37 - v50;
    p_src = v50;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    char __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v12, &v12->stream, &v48, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto9MTLBuffer}* const>,BinaryBuffer::Array<unsigned long const>,unsigned long const,_NSRange>(v12, &v12->stream, a4, a5, a6, a7);
    uint64_t v39 = LODWORD(v12[1]._vptr$AppendBuffer);
    unint64_t v38 = HIDWORD(v12[1]._vptr$AppendBuffer);
    char v40 = v53;
    int v41 = (unint64_t *)((char *)v53 + 1);
    char v42 = v54;
    if ((int *)((char *)v53 + 1) <= v54)
    {
      *(unsigned char *)__int16 v53 = -108;
      char v42 = v54;
    }
    unint64_t v43 = (int *)((char *)v40 + 9);
    if (v43 <= v42) {
      *int v41 = v39 * a3 / v38;
    }
    __int16 v53 = v43;
    char __src = 16;
    p_src = &__src;
    this = v12;
    p_streauint64_t m = &v12->stream;
    size_t v46 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v46);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,BinaryBuffer::Array<float const>,float const,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, void *a5, void *a6, uint64_t *a7)
{
  unint64_t v12 = this;
  uint64_t v55 = *MEMORY[0x263EF8340];
  char v48 = a2;
  unint64_t v13 = &v53;
  uint64_t v54 = (int *)&v53;
  v50[0] = 1;
  v50[1] = a2;
  uint64_t v14 = v51;
  v50[2] = 32;
  __int16 v53 = (int *)v51;
  uint64_t v15 = a4[1];
  if (v15)
  {
    char v16 = *a4;
    uint64_t v17 = &v52;
    do
    {
      uint64_t v18 = *v16;
      uint64_t v19 = v54;
      if (v17 - 2 <= v54)
      {
        *((unsigned char *)v17 - 9) = 109;
        uint64_t v19 = v54;
      }
      if (v17 <= v19) {
        *((void *)v17 - 1) = v18;
      }
      __int16 v53 = v17;
      uint64_t v17 = (int *)((char *)v17 + 9);
      ++v16;
      uint64_t v15 = (uint64_t *)((char *)v15 - 1);
    }
    while (v15);
    unint64_t v13 = v54;
    uint64_t v14 = (char *)v17 - 9;
  }
  if (v14 + 1 <= (unsigned char *)v13)
  {
    *uint64_t v14 = 48;
    unint64_t v13 = v54;
  }
  char v20 = v14 + 2;
  if (v14 + 2 <= (unsigned char *)v13) {
    v14[1] = 32;
  }
  if (a5[1])
  {
    unint64_t v21 = 0;
    char v22 = (int *)(v14 + 3);
    do
    {
      int v23 = *(_DWORD *)(*a5 + 4 * v21);
      unint64_t v24 = (unint64_t)v54;
      if (v22 <= v54)
      {
        *((unsigned char *)v22 - 1) = 106;
        unint64_t v24 = (unint64_t)v54;
      }
      if ((unint64_t)(v22 + 1) <= v24) {
        int *v22 = v23;
      }
      ++v21;
      char v22 = (int *)((char *)v22 + 5);
    }
    while (a5[1] > v21);
    char v20 = (char *)v22 - 1;
  }
  unint64_t v25 = (unint64_t)v54;
  if (v20 + 1 <= (unsigned char *)v54)
  {
    *char v20 = 48;
    unint64_t v25 = (unint64_t)v54;
  }
  __int16 v53 = (int *)(v20 + 1);
  unint64_t v26 = v20 + 2;
  if ((unint64_t)(v20 + 2) <= v25) {
    v20[1] = 32;
  }
  if (a6[1])
  {
    unint64_t v27 = 0;
    uint64_t v28 = (int *)(v20 + 3);
    do
    {
      int v29 = *(_DWORD *)(*a6 + 4 * v27);
      unint64_t v30 = (unint64_t)v54;
      if (v28 <= v54)
      {
        *((unsigned char *)v28 - 1) = 106;
        unint64_t v30 = (unint64_t)v54;
      }
      if ((unint64_t)(v28 + 1) <= v30) {
        int *v28 = v29;
      }
      ++v27;
      uint64_t v28 = (int *)((char *)v28 + 5);
    }
    while (a6[1] > v27);
    unint64_t v26 = (char *)v28 - 1;
  }
  unint64_t v31 = (unint64_t)v54;
  if (v26 + 1 <= (unsigned char *)v54)
  {
    unsigned char *v26 = 48;
    unint64_t v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 2) <= v31)
  {
    v26[1] = 64;
    unint64_t v31 = (unint64_t)v54;
  }
  uint64_t v32 = *a7;
  if ((unint64_t)(v26 + 3) <= v31)
  {
    unsigned char v26[2] = 100;
    unint64_t v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 11) <= v31)
  {
    *(void *)(v26 + 3) = v32;
    unint64_t v31 = (unint64_t)v54;
  }
  uint64_t v33 = a7[1];
  if ((unint64_t)(v26 + 12) <= v31)
  {
    v26[11] = 100;
    unint64_t v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 20) <= v31)
  {
    *(void *)(v26 + 12) = v33;
    unint64_t v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 21) <= v31)
  {
    v26[20] = 80;
    unint64_t v31 = (unint64_t)v54;
  }
  uint64_t v35 = LODWORD(this[1]._vptr$AppendBuffer);
  unint64_t v34 = HIDWORD(this[1]._vptr$AppendBuffer);
  if ((unint64_t)(v26 + 22) <= v31)
  {
    v26[21] = -108;
    unint64_t v31 = (unint64_t)v54;
  }
  char v36 = v26 + 30;
  if ((unint64_t)(v26 + 30) <= v31)
  {
    *(void *)(v26 + 22) = v35 * a3 / v34;
    unint64_t v31 = (unint64_t)v54;
  }
  char v37 = (int *)(v26 + 31);
  if ((unint64_t)v37 <= v31)
  {
    *char v36 = 16;
    unint64_t v31 = (unint64_t)v54;
  }
  __int16 v53 = v37;
  if ((unint64_t)v37 <= v31)
  {
    size_t v46 = (char *)v37 - v50;
    p_src = v50;
    p_streauint64_t m = &this->stream;
  }
  else
  {
    char __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v12, &v12->stream, &v48, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,BinaryBuffer::Array<float const>,float const,_NSRange>(v12, &v12->stream, a4, a5, a6, a7);
    uint64_t v39 = LODWORD(v12[1]._vptr$AppendBuffer);
    unint64_t v38 = HIDWORD(v12[1]._vptr$AppendBuffer);
    char v40 = v53;
    int v41 = (unint64_t *)((char *)v53 + 1);
    char v42 = v54;
    if ((int *)((char *)v53 + 1) <= v54)
    {
      *(unsigned char *)__int16 v53 = -108;
      char v42 = v54;
    }
    unint64_t v43 = (int *)((char *)v40 + 9);
    if (v43 <= v42) {
      *int v41 = v39 * a3 / v38;
    }
    __int16 v53 = v43;
    char __src = 16;
    p_src = &__src;
    this = v12;
    p_streauint64_t m = &v12->stream;
    size_t v46 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v46);
}

void *BinaryBuffer::Append<MTLSparseTextureMappingMode,MTLRegion,unsigned long,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v32[2] = *MEMORY[0x263EF8340];
  v32[1] = v32;
  __src[0] = 1;
  __src[1] = a2;
  uint64_t v6 = *a3;
  unsigned char __src[2] = 100;
  uint64_t v13 = v6;
  qmemcpy(v14, "@@d", sizeof(v14));
  uint64_t v7 = a4[1];
  uint64_t v15 = *a4;
  char v16 = 100;
  uint64_t v17 = v7;
  char v18 = 100;
  uint64_t v8 = a4[3];
  uint64_t v19 = a4[2];
  qmemcpy(v20, "P@d", sizeof(v20));
  uint64_t v21 = v8;
  char v22 = 100;
  uint64_t v9 = a4[5];
  uint64_t v23 = a4[4];
  char v24 = 100;
  uint64_t v25 = v9;
  qmemcpy(v26, "PPd", sizeof(v26));
  uint64_t v27 = *a5;
  uint64_t v10 = *a6;
  char v28 = 100;
  uint64_t v29 = v10;
  char v30 = 16;
  v32[0] = v31;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x5AuLL);
}

void *StringBuffer::Append<char [12],char [6],char [2]>(AppendBuffer *a1, char *__s, const char *a3, const char *a4)
{
  p_streauint64_t m = &a1->stream;
  size_t v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  size_t v10 = strlen(a3);
  AppendBuffer::WriteBytes(a1, p_stream, a3, v10);
  size_t v11 = strlen(a4);

  return AppendBuffer::WriteBytes(a1, p_stream, a4, v11);
}

void *StringBuffer::Append<char [12],void const*,char [2]>(AppendBuffer *a1, char *__s, const void **a3, const char *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  p_streauint64_t m = &a1->stream;
  size_t v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  int v10 = snprintf(__str, 0x20uLL, "%p", *a3);
  AppendBuffer::WriteBytes(a1, p_stream, __str, v10);
  size_t v11 = strlen(a4);
  return AppendBuffer::WriteBytes(a1, p_stream, a4, v11);
}

void *StringBuffer::Append<char [10],NSString *,char [2]>(AppendBuffer *a1, char *__s, id *a3, const char *a4)
{
  p_streauint64_t m = &a1->stream;
  size_t v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  AppendBuffer::WriteBytes(a1, p_stream, (const void *)[*a3 UTF8String], objc_msgSend(*a3, "lengthOfBytesUsingEncoding:", 4));
  size_t v10 = strlen(a4);

  return AppendBuffer::WriteBytes(a1, p_stream, a4, v10);
}

void *StringBuffer::Append<char [2],NSString const*,char [3],unsigned long>(AppendBuffer *a1, char *__s, id *a3, const char *a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  p_streauint64_t m = &a1->stream;
  size_t v11 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v11);
  AppendBuffer::WriteBytes(a1, p_stream, (const void *)[*a3 UTF8String], objc_msgSend(*a3, "lengthOfBytesUsingEncoding:", 4));
  size_t v12 = strlen(a4);
  AppendBuffer::WriteBytes(a1, p_stream, a4, v12);
  int v13 = snprintf(__str, 0x20uLL, "%llu", *a5);
  return AppendBuffer::WriteBytes(a1, p_stream, __str, v13);
}

void *StringBuffer::Append<char const*,char [14],char const*,char [2]>(AppendBuffer *a1, const char **a2, const char *a3, const char **a4, const char *a5)
{
  p_streauint64_t m = &a1->stream;
  size_t v10 = *a2;
  size_t v11 = strlen(*a2);
  AppendBuffer::WriteBytes(a1, p_stream, v10, v11);
  size_t v12 = strlen(a3);
  AppendBuffer::WriteBytes(a1, p_stream, a3, v12);
  int v13 = *a4;
  size_t v14 = strlen(v13);
  AppendBuffer::WriteBytes(a1, p_stream, v13, v14);
  size_t v15 = strlen(a5);

  return AppendBuffer::WriteBytes(a1, p_stream, a5, v15);
}

void *StringBuffer::Append<char [10],unsigned long long>(AppendBuffer *a1, char *__s, void *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  p_streauint64_t m = &a1->stream;
  size_t v7 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v7);
  int v8 = snprintf(__str, 0x20uLL, "%llu", *a3);
  return AppendBuffer::WriteBytes(a1, p_stream, __str, v8);
}

void *StringBuffer::Append<char [14],NSData *,char [2]>(AppendBuffer *a1, char *__s, id *a3, const char *a4)
{
  p_streauint64_t m = &a1->stream;
  size_t v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  AppendBuffer::WriteBytes(a1, p_stream, (const void *)[*a3 bytes], objc_msgSend(*a3, "length"));
  size_t v10 = strlen(a4);

  return AppendBuffer::WriteBytes(a1, p_stream, a4, v10);
}

void *StringBuffer::Append<char [24],unsigned long,char [11],unsigned long,char [2]>(AppendBuffer *a1, char *__s, void *a3, const char *a4, void *a5, const char *a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  p_streauint64_t m = &a1->stream;
  size_t v13 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v13);
  int v14 = snprintf(__str, 0x20uLL, "%llu", *a3);
  AppendBuffer::WriteBytes(a1, p_stream, __str, v14);
  size_t v15 = strlen(a4);
  AppendBuffer::WriteBytes(a1, p_stream, a4, v15);
  int v16 = snprintf(__str, 0x20uLL, "%llu", *a5);
  AppendBuffer::WriteBytes(a1, p_stream, __str, v16);
  size_t v17 = strlen(a6);
  return AppendBuffer::WriteBytes(a1, p_stream, a6, v17);
}

void *StringBuffer::Append<char [24],unsigned long long,char [14]>(AppendBuffer *a1, char *__s, void *a3, const char *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  p_streauint64_t m = &a1->stream;
  size_t v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  int v10 = snprintf(__str, 0x20uLL, "%llu", *a3);
  AppendBuffer::WriteBytes(a1, p_stream, __str, v10);
  size_t v11 = strlen(a4);
  return AppendBuffer::WriteBytes(a1, p_stream, a4, v11);
}

void *StringBuffer::Append<char const*,char [10],NSString *,char [3]>(AppendBuffer *a1, const char **a2, const char *a3, id *a4, const char *a5)
{
  p_streauint64_t m = &a1->stream;
  int v10 = *a2;
  size_t v11 = strlen(*a2);
  AppendBuffer::WriteBytes(a1, p_stream, v10, v11);
  size_t v12 = strlen(a3);
  AppendBuffer::WriteBytes(a1, p_stream, a3, v12);
  AppendBuffer::WriteBytes(a1, p_stream, (const void *)[*a4 UTF8String], objc_msgSend(*a4, "lengthOfBytesUsingEncoding:", 4));
  size_t v13 = strlen(a5);

  return AppendBuffer::WriteBytes(a1, p_stream, a5, v13);
}

uint64_t AppendBuffer::Flush(AppendBuffer *this)
{
  uint64_t result = [MEMORY[0x263EFF8F8] dataWithBytesNoCopy:this->stream.bytes length:this->stream.pWrite - this->stream.bytes freeWhenDone:1];
  this->stream.pWrite = 0;
  this->stream.pEnd = 0;
  this->stream.bytes = 0;
  return result;
}

uint64_t AppendBuffer::GetCurrentOffset(AppendBuffer *this)
{
  return this->stream.pWrite - this->stream.bytes;
}

void *AppendBuffer::WriteBytes(AppendBuffer *this, const void *__src, size_t __n)
{
  return AppendBuffer::WriteBytes(this, &this->stream, __src, __n);
}

uint64_t AppendBuffer::FlushToBase64(AppendBuffer *this, BOOL *a2, unint64_t *a3)
{
  uint64_t v5 = (void *)(*((uint64_t (**)(AppendBuffer *))this->_vptr$AppendBuffer + 2))(this);
  uint64_t v6 = objc_msgSend(MEMORY[0x263EFF990], "dataWithLength:", objc_msgSend(v5, "length"));
  size_t v7 = compression_encode_buffer((uint8_t *)[v6 bytes], objc_msgSend(v6, "length"), (const uint8_t *)objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"), 0, COMPRESSION_LZ4_RAW);
  [v6 setLength:v7];
  BOOL v8 = v7 == 0;
  BOOL v9 = v7 != 0;
  if (v8) {
    int v10 = v5;
  }
  else {
    int v10 = v6;
  }
  uint64_t v11 = [v10 base64EncodedDataWithOptions:0];
  *a2 = v9;
  *a3 = [v5 length];
  return v11;
}

void *AppendBuffer::WriteBytes(AppendBuffer *this, StreamBuffer *a2, const void *__src, size_t __n)
{
  pWrite = a2->pWrite;
  pEnd = a2->pEnd;
  bytes = a2->bytes;
  if (a2->bytes) {
    BOOL v10 = &pWrite[__n] > pEnd;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    int64_t v11 = pWrite - bytes;
    size_t v12 = pEnd - bytes;
    if (v12 <= __n) {
      size_t v12 = __n;
    }
    size_t v13 = (*MEMORY[0x263EF8AF8] + 2 * v12 - 1) & -*MEMORY[0x263EF8AF8];
    uint64_t v14 = (char *)malloc_type_realloc(bytes, v13, 0xA3CEF07CuLL);
    a2->bytes = v14;
    pWrite = &v14[v11];
    a2->pEnd = &v14[v13];
  }
  uint64_t result = memcpy(pWrite, __src, __n);
  a2->pWrite = &pWrite[__n];
  return result;
}

void BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 1024);
  BOOL v9 = (unsigned char *)(v8 + 1);
  unint64_t v10 = *(void *)(a2 + 1032);
  if (v8 + 1 <= v10)
  {
    *(unsigned char *)uint64_t v8 = 64;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v9;
  uint64_t v11 = *a3;
  if (v8 + 2 <= v10)
  {
    *BOOL v9 = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 10 <= v10)
  {
    *(void *)(v8 + 2) = v11;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v12 = a3[1];
  if (v8 + 11 <= v10)
  {
    *(unsigned char *)(v8 + 10) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 19 <= v10)
  {
    *(void *)(v8 + 11) = v12;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v13 = a3[2];
  if (v8 + 20 <= v10)
  {
    *(unsigned char *)(v8 + 19) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 28 <= v10)
  {
    *(void *)(v8 + 20) = v13;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v14 = (unsigned char *)(v8 + 29);
  if (v8 + 29 <= v10)
  {
    *(unsigned char *)(v8 + 28) = 80;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v14;
  uint64_t v15 = *a4;
  if (v8 + 30 <= v10)
  {
    *uint64_t v14 = 109;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 38 <= v10)
  {
    *(void *)(v8 + 30) = v15;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v16 = *a5;
  if (v8 + 39 <= v10)
  {
    *(unsigned char *)(v8 + 38) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 47 <= v10)
  {
    *(void *)(v8 + 39) = v16;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v17 = *a6;
  if (v8 + 48 <= v10)
  {
    *(unsigned char *)(v8 + 47) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 56 <= v10)
  {
    *(void *)(v8 + 48) = v17;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  char v18 = (unsigned char *)(v8 + 57);
  if (v8 + 57 <= v10)
  {
    *(unsigned char *)(v8 + 56) = 64;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v18;
  uint64_t v19 = *a7;
  if (v8 + 58 <= v10)
  {
    *char v18 = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 66 <= v10)
  {
    *(void *)(v8 + 58) = v19;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v20 = a7[1];
  if (v8 + 67 <= v10)
  {
    *(unsigned char *)(v8 + 66) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 75 <= v10)
  {
    *(void *)(v8 + 67) = v20;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v21 = a7[2];
  if (v8 + 76 <= v10)
  {
    *(unsigned char *)(v8 + 75) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 84 <= v10)
  {
    *(void *)(v8 + 76) = v21;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 85 <= v10)
  {
    *(unsigned char *)(v8 + 84) = 80;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v22 = *a8;
  uint64_t v23 = (void *)(v8 + 86);
  if (v8 + 86 <= v10)
  {
    *(unsigned char *)(v8 + 85) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  unint64_t v24 = v8 + 94;
  if (v24 <= v10) {
    *uint64_t v23 = v22;
  }
  *(void *)(a2 + 1024) = v24;
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  LOBYTE(v17) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v17, 1uLL);
  uint64_t v17 = *a3;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  uint64_t v17 = a3[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  uint64_t v17 = a3[2];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  LOBYTE(v17) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v17, 1uLL);
  uint64_t v17 = *a4;
  char __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  uint64_t v17 = *a5;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  uint64_t v17 = *a6;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,unsigned long>(a1, a2, a7, a8);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4)
{
  LOBYTE(v9) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v9, 1uLL);
  uint64_t v9 = *a3;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v9, 8uLL);
  uint64_t v9 = a3[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v9, 8uLL);
  uint64_t v9 = a3[2];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v9, 8uLL);
  LOBYTE(v9) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v9, 1uLL);
  uint64_t v9 = *a4;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v9, 8uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  LOBYTE(v18) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v18, 1uLL);
  uint64_t v18 = *a3;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v18, 8uLL);
  uint64_t v18 = a3[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v18, 8uLL);
  uint64_t v18 = a3[2];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v18, 8uLL);
  LOBYTE(v18) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v18, 1uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(a1, a2, a4, a5, a6, a7, a8, a9);
}

void BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 1024);
  uint64_t v9 = (unsigned char *)(v8 + 1);
  unint64_t v10 = *(void *)(a2 + 1032);
  if (v8 + 1 <= v10)
  {
    *(unsigned char *)uint64_t v8 = 64;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v9;
  uint64_t v11 = *a3;
  if (v8 + 2 <= v10)
  {
    *uint64_t v9 = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 10 <= v10)
  {
    *(void *)(v8 + 2) = v11;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v12 = a3[1];
  if (v8 + 11 <= v10)
  {
    *(unsigned char *)(v8 + 10) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 19 <= v10)
  {
    *(void *)(v8 + 11) = v12;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v13 = a3[2];
  if (v8 + 20 <= v10)
  {
    *(unsigned char *)(v8 + 19) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 28 <= v10)
  {
    *(void *)(v8 + 20) = v13;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 29 <= v10)
  {
    *(unsigned char *)(v8 + 28) = 80;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v14 = (unsigned char *)(v8 + 30);
  if (v8 + 30 <= v10)
  {
    *(unsigned char *)(v8 + 29) = 64;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v14;
  uint64_t v15 = *a4;
  if (v8 + 31 <= v10)
  {
    *uint64_t v14 = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 39 <= v10)
  {
    *(void *)(v8 + 31) = v15;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v16 = a4[1];
  if (v8 + 40 <= v10)
  {
    *(unsigned char *)(v8 + 39) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 48 <= v10)
  {
    *(void *)(v8 + 40) = v16;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v17 = a4[2];
  if (v8 + 49 <= v10)
  {
    *(unsigned char *)(v8 + 48) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 57 <= v10)
  {
    *(void *)(v8 + 49) = v17;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v18 = (unsigned char *)(v8 + 58);
  if (v8 + 58 <= v10)
  {
    *(unsigned char *)(v8 + 57) = 80;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v18;
  uint64_t v19 = *a5;
  if (v8 + 59 <= v10)
  {
    *uint64_t v18 = 109;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 67 <= v10)
  {
    *(void *)(v8 + 59) = v19;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v20 = *a6;
  if (v8 + 68 <= v10)
  {
    *(unsigned char *)(v8 + 67) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 76 <= v10)
  {
    *(void *)(v8 + 68) = v20;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v21 = *a7;
  if (v8 + 77 <= v10)
  {
    *(unsigned char *)(v8 + 76) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  if (v8 + 85 <= v10)
  {
    *(void *)(v8 + 77) = v21;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  uint64_t v22 = *a8;
  uint64_t v23 = (void *)(v8 + 86);
  if (v8 + 86 <= v10)
  {
    *(unsigned char *)(v8 + 85) = 100;
    unint64_t v10 = *(void *)(a2 + 1032);
  }
  unint64_t v24 = v8 + 94;
  if (v24 <= v10) {
    *uint64_t v23 = v22;
  }
  *(void *)(a2 + 1024) = v24;
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  LOBYTE(v17) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v17, 1uLL);
  uint64_t v17 = *a3;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  uint64_t v17 = a3[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  uint64_t v17 = a3[2];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  LOBYTE(v17) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v17, 1uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(a1, a2, a4, a5, a6, a7, a8);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  LOBYTE(v15) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  uint64_t v15 = *a3;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  uint64_t v15 = a3[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  uint64_t v15 = a3[2];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  LOBYTE(v15) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  uint64_t v15 = *a4;
  char __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  uint64_t v15 = *a5;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  uint64_t v15 = *a6;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  uint64_t v15 = *a7;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
}

void BinaryBuffer::WriteValue<BinaryBuffer::ScratchBuffer>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a2 + 1024);
  unint64_t v4 = *(void *)(a2 + 1032);
  if (v3 + 1 <= v4)
  {
    *(unsigned char *)uint64_t v3 = 64;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  uint64_t v5 = (unsigned char *)(v3 + 2);
  if (v3 + 2 <= v4)
  {
    *(unsigned char *)(v3 + 1) = 64;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v5;
  uint64_t v6 = *a3;
  if (v3 + 3 <= v4)
  {
    *uint64_t v5 = 100;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  if (v3 + 11 <= v4)
  {
    *(void *)(v3 + 3) = v6;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  uint64_t v7 = a3[1];
  if (v3 + 12 <= v4)
  {
    *(unsigned char *)(v3 + 11) = 100;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  if (v3 + 20 <= v4)
  {
    *(void *)(v3 + 12) = v7;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  uint64_t v8 = a3[2];
  if (v3 + 21 <= v4)
  {
    *(unsigned char *)(v3 + 20) = 100;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  if (v3 + 29 <= v4)
  {
    *(void *)(v3 + 21) = v8;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  if (v3 + 30 <= v4)
  {
    *(unsigned char *)(v3 + 29) = 80;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  uint64_t v9 = (unsigned char *)(v3 + 31);
  if (v3 + 31 <= v4)
  {
    *(unsigned char *)(v3 + 30) = 64;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v9;
  uint64_t v10 = a3[3];
  if (v3 + 32 <= v4)
  {
    *uint64_t v9 = 100;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  if (v3 + 40 <= v4)
  {
    *(void *)(v3 + 32) = v10;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  uint64_t v11 = a3[4];
  if (v3 + 41 <= v4)
  {
    *(unsigned char *)(v3 + 40) = 100;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  if (v3 + 49 <= v4)
  {
    *(void *)(v3 + 41) = v11;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  uint64_t v12 = a3[5];
  if (v3 + 50 <= v4)
  {
    *(unsigned char *)(v3 + 49) = 100;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  if (v3 + 58 <= v4)
  {
    *(void *)(v3 + 50) = v12;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  uint64_t v13 = (unsigned char *)(v3 + 59);
  if (v3 + 59 <= v4)
  {
    *(unsigned char *)(v3 + 58) = 80;
    unint64_t v4 = *(void *)(a2 + 1032);
  }
  unint64_t v14 = v3 + 60;
  if (v14 <= v4) {
    *uint64_t v13 = 80;
  }
  *(void *)(a2 + 1024) = v14;
}

void *BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3)
{
  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  uint64_t v7 = *a3;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[2];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  uint64_t v7 = a3[3];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[4];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[5];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  LOBYTE(v7) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
}

{
  uint64_t v7;
  char __src;

  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  uint64_t v7 = *a3;
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[1];
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[2];
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[3];
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
}

{
  uint64_t v7;
  char __src;

  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  uint64_t v7 = *a3;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[2];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[3];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
}

{
  uint64_t v7;
  char __src;

  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  uint64_t v7 = *a3;
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[1];
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[2];
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[3];
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[4];
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  uint64_t v7 = a3[5];
  char __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
}

void BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v9 = *a3;
  uint64_t v10 = *(void *)(a2 + 1024);
  unint64_t v11 = *(void *)(a2 + 1032);
  if (v10 + 1 <= v11)
  {
    *(unsigned char *)uint64_t v10 = 109;
    unint64_t v11 = *(void *)(a2 + 1032);
  }
  if (v10 + 9 <= v11)
  {
    *(void *)(v10 + 1) = v9;
    unint64_t v11 = *(void *)(a2 + 1032);
  }
  uint64_t v12 = *a4;
  if (v10 + 10 <= v11)
  {
    *(unsigned char *)(v10 + 9) = 100;
    unint64_t v11 = *(void *)(a2 + 1032);
  }
  if (v10 + 18 <= v11)
  {
    *(void *)(v10 + 10) = v12;
    unint64_t v11 = *(void *)(a2 + 1032);
  }
  uint64_t v13 = *a5;
  unint64_t v14 = (void *)(v10 + 19);
  if (v10 + 19 <= v11)
  {
    *(unsigned char *)(v10 + 18) = 100;
    unint64_t v11 = *(void *)(a2 + 1032);
  }
  unint64_t v15 = v10 + 27;
  if (v15 <= v11) {
    *unint64_t v14 = v13;
  }
  *(void *)(a2 + 1024) = v15;
  BinaryBuffer::WriteValue<BinaryBuffer::ScratchBuffer>(a1, a2, a6);
  uint64_t v16 = *(void *)(a2 + 1024);
  unint64_t v17 = *(void *)(a2 + 1032);
  if (v16 + 1 <= v17)
  {
    *(unsigned char *)uint64_t v16 = 64;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v18 = *a7;
  if (v16 + 2 <= v17)
  {
    *(unsigned char *)(v16 + 1) = 107;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v19 = (unsigned char *)(v16 + 10);
  if (v16 + 10 <= v17)
  {
    *(void *)(v16 + 2) = v18;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v19;
  uint64_t v20 = a7[1];
  if (v16 + 11 <= v17)
  {
    *uint64_t v19 = 107;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  if (v16 + 19 <= v17)
  {
    *(void *)(v16 + 11) = v20;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v21 = a7[2];
  if (v16 + 20 <= v17)
  {
    *(unsigned char *)(v16 + 19) = 107;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  if (v16 + 28 <= v17)
  {
    *(void *)(v16 + 20) = v21;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v22 = a7[3];
  if (v16 + 29 <= v17)
  {
    *(unsigned char *)(v16 + 28) = 107;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v23 = (unsigned char *)(v16 + 37);
  if (v16 + 37 <= v17)
  {
    *(void *)(v16 + 29) = v22;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  unint64_t v24 = v16 + 38;
  if (v24 <= v17) {
    *uint64_t v23 = 80;
  }
  *(void *)(a2 + 1024) = v24;
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v16 = *a3;
  char __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v16, 8uLL);
  uint64_t v16 = *a4;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v16, 8uLL);
  uint64_t v16 = *a5;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v16, 8uLL);
  BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(a1, a2, a6);
  BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(a1, a2, a7);
  uint64_t v16 = *a8;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v16, 8uLL);
}

void BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v10 = *a3;
  uint64_t v11 = *(void *)(a2 + 1024);
  unint64_t v12 = *(void *)(a2 + 1032);
  if (v11 + 1 <= v12)
  {
    *(unsigned char *)uint64_t v11 = 100;
    unint64_t v12 = *(void *)(a2 + 1032);
  }
  if (v11 + 9 <= v12)
  {
    *(void *)(v11 + 1) = v10;
    unint64_t v12 = *(void *)(a2 + 1032);
  }
  uint64_t v13 = *a4;
  unint64_t v14 = (void *)(v11 + 10);
  if (v11 + 10 <= v12)
  {
    *(unsigned char *)(v11 + 9) = 100;
    unint64_t v12 = *(void *)(a2 + 1032);
  }
  unint64_t v15 = v11 + 18;
  if (v15 <= v12) {
    *unint64_t v14 = v13;
  }
  *(void *)(a2 + 1024) = v15;
  BinaryBuffer::WriteValue<BinaryBuffer::ScratchBuffer>(a1, a2, a5);
  uint64_t v16 = *(void *)(a2 + 1024);
  unint64_t v17 = *(void *)(a2 + 1032);
  if (v16 + 1 <= v17)
  {
    *(unsigned char *)uint64_t v16 = 64;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v18 = *a6;
  if (v16 + 2 <= v17)
  {
    *(unsigned char *)(v16 + 1) = 107;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v19 = (unsigned char *)(v16 + 10);
  if (v16 + 10 <= v17)
  {
    *(void *)(v16 + 2) = v18;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  *(void *)(a2 + 1024) = v19;
  uint64_t v20 = a6[1];
  if (v16 + 11 <= v17)
  {
    *uint64_t v19 = 107;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  if (v16 + 19 <= v17)
  {
    *(void *)(v16 + 11) = v20;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v21 = a6[2];
  if (v16 + 20 <= v17)
  {
    *(unsigned char *)(v16 + 19) = 107;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  if (v16 + 28 <= v17)
  {
    *(void *)(v16 + 20) = v21;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v22 = a6[3];
  if (v16 + 29 <= v17)
  {
    *(unsigned char *)(v16 + 28) = 107;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  if (v16 + 37 <= v17)
  {
    *(void *)(v16 + 29) = v22;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  if (v16 + 38 <= v17)
  {
    *(unsigned char *)(v16 + 37) = 80;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  uint64_t v23 = *a7;
  unint64_t v24 = (void *)(v16 + 39);
  if (v16 + 39 <= v17)
  {
    *(unsigned char *)(v16 + 38) = 100;
    unint64_t v17 = *(void *)(a2 + 1032);
  }
  unint64_t v25 = v16 + 47;
  if (v25 <= v17) {
    void *v24 = v23;
  }
  *(void *)(a2 + 1024) = v25;
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<unsigned long const>,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, void *a3, uint64_t *a4)
{
  LOBYTE(v10) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  if (a3[1])
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v10 = *(void *)(*a3 + 8 * v8);
      char __src = 100;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
      ++v8;
    }
    while (a3[1] > v8);
  }
  LOBYTE(v10) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  LOBYTE(v10) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  uint64_t v10 = *a4;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  uint64_t v10 = a4[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, void *a3, uint64_t *a4)
{
  LOBYTE(v10) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  if (a3[1])
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v10 = *(void *)(*a3 + 8 * v8);
      char __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
      ++v8;
    }
    while (a3[1] > v8);
  }
  LOBYTE(v10) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  LOBYTE(v10) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  uint64_t v10 = *a4;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  uint64_t v10 = a4[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,float const*,float const*,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = *a3;
  char __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  uint64_t v10 = *a4;
  char __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  uint64_t v10 = *a5;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  uint64_t v10 = a5[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto7MTLHeap}* const>,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, void *a3, uint64_t *a4)
{
  LOBYTE(v10) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  if (a3[1])
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v10 = *(void *)(*a3 + 8 * v8);
      char __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
      ++v8;
    }
    while (a3[1] > v8);
  }
  LOBYTE(v10) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  uint64_t v10 = *a4;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  LOBYTE(v12) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v12, 1uLL);
  if (a3[1])
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v12 = *(void *)(*a3 + 8 * v10);
      char __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v12, 8uLL);
      ++v10;
    }
    while (a3[1] > v10);
  }
  LOBYTE(v12) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v12, 1uLL);
  uint64_t v12 = *a4;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v12, 8uLL);
  uint64_t v12 = *a5;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v12, 8uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  LOBYTE(v14) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v14, 1uLL);
  if (a3[1])
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t v14 = *(void *)(*a3 + 8 * v12);
      char __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v14, 8uLL);
      ++v12;
    }
    while (a3[1] > v12);
  }
  LOBYTE(v14) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v14, 1uLL);
  uint64_t v14 = *a4;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v14, 8uLL);
  uint64_t v14 = *a5;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v14, 8uLL);
  uint64_t v14 = *a6;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v14, 8uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto9MTLBuffer}* const>,BinaryBuffer::Array<unsigned long const>,unsigned long const,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, void *a3, void *a4, void *a5, uint64_t *a6)
{
  LOBYTE(v15) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  if (a3[1])
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t v15 = *(void *)(*a3 + 8 * v12);
      char __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
      ++v12;
    }
    while (a3[1] > v12);
  }
  LOBYTE(v15) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  LOBYTE(v15) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  if (a4[1])
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v15 = *(void *)(*a4 + 8 * v13);
      char __src = 100;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
      ++v13;
    }
    while (a4[1] > v13);
  }
  LOBYTE(v15) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<unsigned long const>,_NSRange>(a1, a2, a5, a6);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,BinaryBuffer::Array<float const>,float const,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, void *a3, void *a4, void *a5, uint64_t *a6)
{
  LOBYTE(v15) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  if (a3[1])
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t v15 = *(void *)(*a3 + 8 * v12);
      char __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
      ++v12;
    }
    while (a3[1] > v12);
  }
  LOBYTE(v15) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  LOBYTE(v15) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  if (a4[1])
  {
    unint64_t v13 = 0;
    do
    {
      LODWORD(v15) = *(_DWORD *)(*a4 + 4 * v13);
      char __src = 106;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v15, 4uLL);
      ++v13;
    }
    while (a4[1] > v13);
  }
  LOBYTE(v15) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<float const>,_NSRange>(a1, a2, a5, a6);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<float const>,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, void *a3, uint64_t *a4)
{
  LOBYTE(v10) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  if (a3[1])
  {
    unint64_t v8 = 0;
    do
    {
      LODWORD(v10) = *(_DWORD *)(*a3 + 4 * v8);
      char __src = 106;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v10, 4uLL);
      ++v8;
    }
    while (a3[1] > v8);
  }
  LOBYTE(v10) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  LOBYTE(v10) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  uint64_t v10 = *a4;
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  uint64_t v10 = a4[1];
  char __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
}

void sub_23BD83A08(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD83AE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BD83C8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::BufferUsageTable::addResource(id *this, MTLGPUDebugDevice *a2, MTLGPUDebugBuffer *a3, char a4)
{
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    unsigned int v9 = [(MTLGPUDebugBuffer *)i bufferIndex];
    if ([*this length] > v9 >> 2) {
      break;
    }
  }
  unsigned int v10 = [(MTLGPUDebugBuffer *)a3 bufferIndex];
  if ((a4 & 4) != 0) {
    a4 = a4 & 2 | 1;
  }
  uint64_t result = [*this contents];
  *(unsigned char *)(result + (v10 >> 2)) |= a4 << (2 * (v10 & 3));
  return result;
}

void sub_23BD83F0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    os_unfair_lock_unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t anonymous namespace'::TextureTypeTable::addResource(id *this, MTLGPUDebugDevice *a2, MTLGPUDebugTexture *a3)
{
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    unsigned int v7 = [(MTLGPUDebugTexture *)i gpuIdentifier];
    if ([*this length] > v7 >> 1) {
      break;
    }
  }
  unsigned int v8 = [(MTLGPUDebugTexture *)a3 gpuIdentifier];
  unint64_t result = [(MTLToolsTexture *)a3 textureType];
  if (v8)
  {
    char v10 = result;
    unint64_t result = [*this contents];
    *(unsigned char *)(result + (v8 >> 1)) |= v10 << (4 * (v8 & 1));
  }
  return result;
}

void sub_23BD844AC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD84600(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD846DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD8488C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12)
{
}

void sub_23BD85AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_23BD8654C(_Unwind_Exception *a1)
{
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unsigned int v7 = *a2++;
      unint64_t v6 = v7;
      char v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(v5 + 40) + 16);
      if ((v9 & 4) != 0) {
        LODWORD(v10) = v9 & 2 | 1;
      }
      else {
        uint64_t v10 = *(void *)(*(void *)(v5 + 40) + 16);
      }
      unint64_t result = [**(id **)(v5 + 32) contents];
      *(unsigned char *)(result + (v6 >> 2)) |= v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_2(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unsigned int v7 = *a2++;
      unint64_t v6 = v7;
      char v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(v5 + 40) + 16);
      if ((v9 & 4) != 0) {
        LODWORD(v10) = v9 & 2 | 1;
      }
      else {
        uint64_t v10 = *(void *)(*(void *)(v5 + 40) + 16);
      }
      unint64_t result = [**(id **)(v5 + 32) contents];
      *(unsigned char *)(result + (v6 >> 2)) |= v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_3(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LODWORD(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        unint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= v8 << (2 * (v6 & 3));
        unint64_t v9 = *a2;
        if (v9)
        {
          unsigned int v10 = a2[2];
          unint64_t result = [**(id **)(v5 + 48) contents];
          *(unsigned char *)(result + (v9 >> 1)) |= (_BYTE)v10 << (4 * (v9 & 1));
        }
      }
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_4(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unsigned int v7 = *a2++;
      unint64_t v6 = v7;
      char v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(v5 + 40) + 16);
      if ((v9 & 4) != 0) {
        LODWORD(v10) = v9 & 2 | 1;
      }
      else {
        uint64_t v10 = *(void *)(*(void *)(v5 + 40) + 16);
      }
      unint64_t result = [**(id **)(v5 + 32) contents];
      *(unsigned char *)(result + (v6 >> 2)) |= v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_5(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unsigned int v7 = *a2++;
      unint64_t v6 = v7;
      char v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(v5 + 40) + 16);
      if ((v9 & 4) != 0) {
        LODWORD(v10) = v9 & 2 | 1;
      }
      else {
        uint64_t v10 = *(void *)(*(void *)(v5 + 40) + 16);
      }
      unint64_t result = [**(id **)(v5 + 32) contents];
      *(unsigned char *)(result + (v6 >> 2)) |= v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_6(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LODWORD(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        unint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= v8 << (2 * (v6 & 3));
        unint64_t v9 = *a2;
        if (v9)
        {
          unsigned int v10 = a2[2];
          unint64_t result = [**(id **)(v5 + 48) contents];
          *(unsigned char *)(result + (v9 >> 1)) |= (_BYTE)v10 << (4 * (v9 & 1));
        }
      }
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_7(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unsigned int v7 = *a2++;
      unint64_t v6 = v7;
      char v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(v5 + 40) + 16);
      if ((v9 & 4) != 0) {
        LODWORD(v10) = v9 & 2 | 1;
      }
      else {
        uint64_t v10 = *(void *)(*(void *)(v5 + 40) + 16);
      }
      unint64_t result = [**(id **)(v5 + 32) contents];
      *(unsigned char *)(result + (v6 >> 2)) |= v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_8(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unsigned int v7 = *a2++;
      unint64_t v6 = v7;
      char v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(v5 + 40) + 16);
      if ((v9 & 4) != 0) {
        LODWORD(v10) = v9 & 2 | 1;
      }
      else {
        uint64_t v10 = *(void *)(*(void *)(v5 + 40) + 16);
      }
      unint64_t result = [**(id **)(v5 + 32) contents];
      *(unsigned char *)(result + (v6 >> 2)) |= v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_9(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LODWORD(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        unint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= v8 << (2 * (v6 & 3));
        unint64_t v9 = *a2;
        if (v9)
        {
          unsigned int v10 = a2[2];
          unint64_t result = [**(id **)(v5 + 48) contents];
          *(unsigned char *)(result + (v9 >> 1)) |= (_BYTE)v10 << (4 * (v9 & 1));
        }
      }
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_10(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unsigned int v7 = *a2++;
      unint64_t v6 = v7;
      char v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(v5 + 40) + 16);
      if ((v9 & 4) != 0) {
        LODWORD(v10) = v9 & 2 | 1;
      }
      else {
        uint64_t v10 = *(void *)(*(void *)(v5 + 40) + 16);
      }
      unint64_t result = [**(id **)(v5 + 32) contents];
      *(unsigned char *)(result + (v6 >> 2)) |= v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_11(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unsigned int v7 = *a2++;
      unint64_t v6 = v7;
      char v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(v5 + 40) + 16);
      if ((v9 & 4) != 0) {
        LODWORD(v10) = v9 & 2 | 1;
      }
      else {
        uint64_t v10 = *(void *)(*(void *)(v5 + 40) + 16);
      }
      unint64_t result = [**(id **)(v5 + 32) contents];
      *(unsigned char *)(result + (v6 >> 2)) |= v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_12(uint64_t result, unsigned int *a2, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unint64_t v6 = *a2;
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v5 + 40) + 16);
        if ((v7 & 4) != 0) {
          LODWORD(v8) = v7 & 2 | 1;
        }
        else {
          uint64_t v8 = *(void *)(*(void *)(v5 + 40) + 16);
        }
        unint64_t result = [**(id **)(v5 + 32) contents];
        *(unsigned char *)(result + (v6 >> 2)) |= v8 << (2 * (v6 & 3));
        unint64_t v9 = *a2;
        if (v9)
        {
          unsigned int v10 = a2[2];
          unint64_t result = [**(id **)(v5 + 48) contents];
          *(unsigned char *)(result + (v9 >> 1)) |= (_BYTE)v10 << (4 * (v9 & 1));
        }
      }
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

void anonymous namespace'::ResourceUsageTable::~ResourceUsageTable(id *this)
{
  *this = 0;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,MTLGPUDebugResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLGPUDebugResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLGPUDebugResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLGPUDebugResidencySet *>>>::__emplace_unique_impl<unsigned long,MTLGPUDebugResidencySet *&>(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = operator new(0x20uLL);
  uint64_t v7 = *a2;
  uint64_t v8 = *a3;
  v6[2] = *a2;
  v6[3] = v8;
  *unint64_t v6 = 0;
  v6[1] = v7;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique(a1, v6);
  if ((v10 & 1) == 0) {
    operator delete(v6);
  }
  return inserted;
}

void sub_23BD87218(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>>>::__emplace_unique_key_args<unsigned long,unsigned long,MTLGPUDebugResidencySet *>(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BD87444(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>>>::__emplace_unique_key_args<unsigned long,unsigned long,MTLGPUDebugResidencySet *&>(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BD87670(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLegacySVLog(void)
{
  if (MTLLegacySVLog(void)::onceToken != -1) {
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  }
  return MTLLegacySVLog(void)::logObject;
}

os_log_t ___Z14MTLLegacySVLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.Metal", "GPUDebug");
  MTLLegacySVLog(void)::logObject = (uint64_t)result;
  return result;
}

void LegacySVMetalBuffer::LegacySVMetalBuffer(LegacySVMetalBuffer *this, LegacySVMetalBufferHeap *a2, unsigned int a3)
{
  this->heap = a2;
  this->index = a3;
}

{
  this->heap = a2;
  this->index = a3;
}

void LegacySVMetalBuffer::free(LegacySVMetalBuffer *this)
{
}

void LegacySVMetalBufferHeap::freeBuffer(uint64_t a1, uint64_t a2)
{
  std::mutex::lock((std::mutex *)a1);
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(int *)(a1 + 112) + 1;
  *(_DWORD *)(a1 + 112) = v5;
  *(_DWORD *)(*(void *)(a1 + 88) + 4 * v5) = v4;
  *(void *)(a1 + 128) -= *(void *)(a1 + 136);
  *(void *)a2 = 0;

  std::mutex::unlock((std::mutex *)a1);
}

uint64_t LegacySVMetalBuffer::getMTLBuffer(LegacySVMetalBuffer *this)
{
  return *(void *)(*((void *)this->heap + 8) + 8 * this->index);
}

uint64_t LegacySVMetalBufferHeap::init(uint64_t this, MTLLegacySVDevice *a2, uint64_t a3)
{
  *(void *)(this + 136) = a3;
  *(void *)(this + 144) = a2;
  return this;
}

void LegacySVMetalBufferHeap::grow(LegacySVMetalBufferHeap *this, unsigned int a2)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 8);
  uint64_t v5 = *((void *)this + 9);
  int v3 = (char *)this + 64;
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 != a2)
  {
    std::vector<unsigned int>::size_type v7 = a2;
    std::vector<objc_object  {objcproto9MTLBuffer}*>::resize((uint64_t)v3, a2);
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 88), v7);
    for (; v6 < (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3; ++v6)
    {
      *(void *)(*((void *)this + 8) + 8 * v6) = [*((id *)this + 18) newInternalBufferWithLength:*((void *)this + 17) options:256];
      *((void *)this + 15) += *((void *)this + 17);
      if (MTLLegacySVLog(void)::onceToken != -1) {
        dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
      }
      unint64_t v8 = MTLLegacySVLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
        MetalBufferHeap::grow(v10, (unint64_t *)this + 15, (double *)v11, v8);
      }
      uint64_t v9 = *((int *)this + 28) + 1;
      *((_DWORD *)this + 28) = v9;
      *(_DWORD *)(*((void *)this + 11) + 4 * v9) = v6;
    }
  }
}

std::mutex *LegacySVMetalBufferHeap::allocBuffer(std::mutex *this)
{
  std::mutex::lock(this);
  if ((*(_DWORD *)&this[1].__m_.__opaque[40] & 0x80000000) != 0) {
    LegacySVMetalBufferHeap::grow((LegacySVMetalBufferHeap *)this, ((unint64_t)(*(void *)this[1].__m_.__opaque - this[1].__m_.__sig) >> 3) + 1);
  }
  this[2].__m_.__sig += *(void *)this[2].__m_.__opaque;
  if (MTLLegacySVLog(void)::onceToken != -1) {
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  }
  int8x8_t v2 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    MetalBufferHeap::allocBuffer((unint64_t *)&this[2], (uint64_t)this, v2);
  }
  --*(_DWORD *)&this[1].__m_.__opaque[40];
  std::mutex::unlock(this);
  return this;
}

void sub_23BD879DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVMetalBufferHeap::~LegacySVMetalBufferHeap(std::mutex *this)
{
  sig = (id *)this[1].__m_.__sig;
  int v3 = *(id **)this[1].__m_.__opaque;
  while (sig != v3)

  uint64_t v4 = *(void **)&this[1].__m_.__opaque[16];
  if (v4)
  {
    *(void *)&this[1].__m_.__opaque[24] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)this[1].__m_.__sig;
  if (v5)
  {
    *(void *)this[1].__m_.__opaque = v5;
    operator delete(v5);
  }

  std::mutex::~mutex(this);
}

void LegacySVBufferDescriptorHeap::init(LegacySVBufferDescriptorHeap *this, MTLLegacySVBuffer **a2, unsigned int a3)
{
  id v6 = objc_alloc_init(MEMORY[0x263F127B8]);
  id v7 = objc_alloc_init(MEMORY[0x263EFF980]);
  unint64_t v8 = (void *)MEMORY[0x23ECD5710]();
  [v6 setIndex:0];
  [v6 setAccess:1];
  [v6 setArrayLength:1];
  [v6 setDataType:60];
  objc_msgSend(v7, "addObject:", (id)objc_msgSend(v6, "copy"));
  [v6 setIndex:1];
  [v6 setAccess:0];
  [v6 setArrayLength:1];
  [v6 setDataType:33];
  objc_msgSend(v7, "addObject:", (id)objc_msgSend(v6, "copy"));
  uint64_t v9 = (void *)MEMORY[0x23ECD5710]();
  *((void *)this + 15) = objc_msgSend((id)objc_msgSend(a2, "baseObject"), "newArgumentEncoderWithArguments:", v7);

  *((void *)this + 16) = objc_msgSend(a2, "newInternalBufferWithLength:options:", objc_msgSend(*((id *)this + 15), "encodedLength") * a3, 256);
  if (MTLLegacySVLog(void)::onceToken != -1) {
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  }
  uint8x8_t v10 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    GPUDebugBufferDescriptorHeap::init((id *)this + 16, v10);
  }
  *((void *)this + 14) = 1;
  [*((id *)this + 15) setArgumentBuffer:*((void *)this + 16) offset:0];
  unint64_t Handle = LegacySVBufferDescriptorHeap::createHandle((std::mutex *)this, a2[81]);
  std::mutex::lock((std::mutex *)this);
  objc_msgSend(*((id *)this + 15), "setArgumentBuffer:offset:", *((void *)this + 16), objc_msgSend(*((id *)this + 15), "encodedLength") * Handle);
  unint64_t v12 = (void *)*((void *)this + 15);
  [v12 setBuffer:a2[81] offset:0 atIndex:0];
  *(_DWORD *)[v12 constantDataAtIndex:1] = -1;
  std::mutex::unlock((std::mutex *)this);
}

void sub_23BD87C90(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t LegacySVBufferDescriptorHeap::createHandle(std::mutex *this, MTLLegacySVBuffer *a2)
{
  std::mutex::lock(this);
  uint64_t v4 = *(void *)this[1].__m_.__opaque;
  if (this[1].__m_.__sig == v4)
  {
    unint64_t v5 = *(void *)&this[1].__m_.__opaque[40];
    *(void *)&this[1].__m_.__opaque[40] = v5 + 1;
    if (MTLLegacySVLog(void)::onceToken != -1) {
      dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
    }
    id v6 = MTLLegacySVLog(void)::logObject;
    if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
      GPUDebugBufferDescriptorHeap::createHandle(v5, v6, v7);
    }
    uint64_t v8 = *(void *)&this[1].__m_.__opaque[16];
    if (v5 >= (*(void *)&this[1].__m_.__opaque[24] - v8) >> 3)
    {
      std::vector<objc_object  {objcproto9MTLBuffer}*>::resize((uint64_t)&this[1].__m_.__opaque[16], v5 + 1);
      uint64_t v8 = *(void *)&this[1].__m_.__opaque[16];
    }
    *(void *)(v8 + 8 * v5) = a2;
  }
  else
  {
    unint64_t v5 = *(unsigned int *)(v4 - 4);
    *(void *)(*(void *)&this[1].__m_.__opaque[16] + 8 * v5) = a2;
    *(void *)this[1].__m_.__opaque -= 4;
  }
  std::mutex::unlock(this);
  return v5;
}

void sub_23BD87D94(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVBufferDescriptorHeap::freeBufferHandle(std::mutex *this, uint64_t a2)
{
  std::mutex::lock(this);
  *(void *)(*(void *)&this[1].__m_.__opaque[16] + 8 * a2) = 0;
  unint64_t v4 = *(void *)&this[1].__m_.__opaque[8];
  unint64_t v5 = *(char **)this[1].__m_.__opaque;
  if ((unint64_t)v5 >= v4)
  {
    sig = (char *)this[1].__m_.__sig;
    uint64_t v8 = (v5 - sig) >> 2;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v4 - (void)sig;
    unint64_t v10 = (uint64_t)(v4 - (void)sig) >> 1;
    if (v10 <= v8 + 1) {
      unint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this[1].__m_.__opaque[8], v11);
      sig = (char *)this[1].__m_.__sig;
      unint64_t v5 = *(char **)this[1].__m_.__opaque;
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v13 = &v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    *(_DWORD *)unint64_t v13 = a2;
    id v6 = v13 + 4;
    while (v5 != sig)
    {
      int v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    this[1].__m_.__sig = (uint64_t)v13;
    *(void *)this[1].__m_.__opaque = v6;
    *(void *)&this[1].__m_.__opaque[8] = v14;
    if (sig) {
      operator delete(sig);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v5 = a2;
    id v6 = v5 + 4;
  }
  *(void *)this[1].__m_.__opaque = v6;

  std::mutex::unlock(this);
}

void sub_23BD87EB0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t LegacySVConstantBufferCache::init(uint64_t this, MTLLegacySVDevice *a2)
{
  *(void *)(this + 112) = a2;
  return this;
}

void LegacySVConstantBufferCache::getOrCreateBuffer(LegacySVConstantBufferCache *this@<X0>, NSData *a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *(void *)this += [(NSData *)a2 length];
  if (MTLLegacySVLog(void)::onceToken != -1) {
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  }
  uint64_t v7 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    GPUDebugConstantBufferCache::getOrCreateBuffer((uint64_t *)this, v7, v8);
  }
  unint64_t v9 = (unsigned char *)*((void *)this + 14);
  if ((v9[286] & 0x80) != 0) {
    uint64_t v10 = objc_msgSend(v9, "newBufferWithLength:options:", -[NSData length](a2, "length"), 0);
  }
  else {
    uint64_t v10 = objc_msgSend(v9, "newInternalBufferWithLength:options:", -[NSData length](a2, "length"), 0);
  }
  uint64_t v11 = v10;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = ___ZN27LegacySVConstantBufferCache17getOrCreateBufferEP6NSData_block_invoke;
  v12[3] = &unk_264E12DB0;
  v12[4] = v10;
  [(NSData *)a2 enumerateByteRangesUsingBlock:v12];
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = v11;
  std::mutex::unlock(v6);
}

void sub_23BD8802C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *___ZN27LegacySVConstantBufferCache17getOrCreateBufferEP6NSData_block_invoke(uint64_t a1, const void *a2, uint64_t a3, size_t a4)
{
  id v6 = (void *)([*(id *)(a1 + 32) contents] + a3);

  return memcpy(v6, a2, a4);
}

void LegacySVConstantBufferCache::releaseBuffer(LegacySVConstantBufferCache *this, KeyBufferPair *a2)
{
  if (a2->buffer)
  {
    unint64_t v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    *(void *)this -= [(MTLBuffer *)a2->buffer length];

    a2->buffer = 0;
    std::mutex::unlock(v4);
  }
}

void sub_23BD8811C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVGlobalResidentBufferList::useBuffers(LegacySVGlobalResidentBufferList *this, MTLLegacySVRenderCommandEncoder *a2)
{
  if (*(_DWORD *)&a2->_tileStageActive != *(_DWORD *)this)
  {
    unint64_t v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    for (uint64_t i = *((void *)this + 10);
          (LegacySVGlobalResidentBufferList *)i != (LegacySVGlobalResidentBufferList *)((char *)this + 72);
          uint64_t i = *(void *)(i + 8))
    {
      uint64_t v6 = *(void *)(i + 16);
      [(MTLLegacySVRenderCommandEncoder *)a2 useResource:v6 usage:1];
      [(MTLToolsCommandEncoder *)a2 addRetainedObject:v6];
    }
    *(_DWORD *)&a2->_tileStageActive = *(_DWORD *)this;
    std::mutex::unlock(v4);
  }
}

void sub_23BD88204(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVGlobalResidentBufferList::useBuffers(LegacySVGlobalResidentBufferList *this, MTLLegacySVComputeCommandEncoder *a2)
{
  if (*(_DWORD *)&a2->_enableUseResourceValidation != *(_DWORD *)this)
  {
    unint64_t v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    for (uint64_t i = *((void *)this + 10);
          (LegacySVGlobalResidentBufferList *)i != (LegacySVGlobalResidentBufferList *)((char *)this + 72);
          uint64_t i = *(void *)(i + 8))
    {
      uint64_t v6 = *(void *)(i + 16);
      [(MTLLegacySVComputeCommandEncoder *)a2 useResource:v6 usage:1];
      [(MTLToolsCommandEncoder *)a2 addRetainedObject:v6];
    }
    *(_DWORD *)&a2->_enableUseResourceValidatiouint64_t n = *(_DWORD *)this;
    std::mutex::unlock(v4);
  }
}

void sub_23BD882EC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVGlobalResidentBufferList::addBuffer(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  ++*(_DWORD *)a1;
  unint64_t v5 = operator new(0x18uLL);
  uint64_t v6 = *(void **)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  *unint64_t v5 = a1 + 72;
  v5[1] = v6;
  v5[2] = a2;
  *uint64_t v6 = v5;
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v7 + 1;

  std::mutex::unlock(v4);
}

void sub_23BD8837C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVGlobalResidentBufferList::removeBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  int v3 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  std::list<objc_object  {objcproto9MTLBuffer}*>::remove(a1 + 72, &v4);
  std::mutex::unlock(v3);
}

void sub_23BD883DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BD88F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void instrumentationHeapInit(MTLLegacySVDevice *a1)
{
  int8x8_t v2 = (std::once_flag::_State_type *)((char *)a1 + 688);
  int v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    unint64_t v5 = &v3;
    uint64_t v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<instrumentationHeapInit(MTLLegacySVDevice *)::$_0 &&>>);
  }
}

void indirectCommandBufferPipelineInit(MTLLegacySVDevice *a1)
{
  int v3 = a1;
  uint64_t v1 = (std::once_flag::_State_type *)((char *)a1 + 696);
  int8x8_t v2 = &v3;
  if (atomic_load_explicit((atomic_ullong *volatile)v1, memory_order_acquire) != -1)
  {
    unint64_t v5 = &v2;
    uint64_t v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<indirectCommandBufferPipelineInit(MTLLegacySVDevice *)::$_0 &&>>);
  }
}

void LogInstrumentationFailures(MTLLegacySVImageData *a1, MTLDebugInstrumentationData *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    [(MTLLegacySVImageData *)a1 functionType];
    uint64_t v4 = [(id)MTLFunctionTypeString() UTF8String];
    if ([(MTLDebugInstrumentationData *)a2 hasArgumentLimitsInstrumentationFailures])
    {
      if (MTLLegacySVLog(void)::onceToken != -1) {
        dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
      }
      uint64_t v5 = MTLLegacySVLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_INFO))
      {
        int v14 = 136315394;
        uint64_t v15 = v4;
        __int16 v16 = 2080;
        BOOL v17 = [(NSString *)[(MTLLegacySVImageData *)a1 loadedImageName] UTF8String];
        uint64_t v6 = "Fatal failure when instrumenting %s \"%s\":\n"
             "\tFunction is not instrumented and faults will not be detected.";
        uint64_t v7 = v5;
        uint32_t v8 = 22;
LABEL_19:
        _os_log_impl(&dword_23BD25000, v7, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v14, v8);
      }
    }
    else if (([(MTLDebugInstrumentationData *)a2 hasArgumentBufferInstrumentationFailures] & 1) != 0|| [(MTLDebugInstrumentationData *)a2 hasGlobalConstantsInstrumentationFailures])
    {
      if (MTLLegacySVLog(void)::onceToken != -1) {
        dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
      }
      uint64_t v9 = MTLLegacySVLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = [(NSString *)[(MTLLegacySVImageData *)a1 loadedImageName] UTF8String];
        if ([(MTLDebugInstrumentationData *)a2 hasArgumentBufferInstrumentationFailures])uint64_t v11 = "\n\tFaults from argument buffers will not be detected."; {
        else
        }
          uint64_t v11 = "";
        int v12 = [(MTLDebugInstrumentationData *)a2 hasGlobalConstantsInstrumentationFailures];
        int v14 = 136315906;
        unint64_t v13 = "\n\tFaults from reading global constant variables will not be detected.";
        uint64_t v15 = v4;
        if (!v12) {
          unint64_t v13 = "";
        }
        __int16 v16 = 2080;
        BOOL v17 = v10;
        __int16 v18 = 2080;
        unint64_t v19 = v11;
        __int16 v20 = 2080;
        uint64_t v21 = v13;
        uint64_t v6 = "Partial failure when instrumenting %s \"%s\":%s%s";
        uint64_t v7 = v9;
        uint32_t v8 = 42;
        goto LABEL_19;
      }
    }
  }
}

void MTLLegacySVSetValidationChecksOptions(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v38 = 1;
  int v12 = operator new(0x20uLL);
  *(void *)__p.hash = v12 + 4;
  *(void *)&__p.hash[2] = v12 + 4;
  *int v12 = "all";
  v12[1] = 1;
  v12[2] = "none";
  v12[3] = 2;
  *(void *)__p.count = v12;
  unsigned __int8 v13 = MTLGetEnvCase<MTLShaderValidationState>("MTL_SHADER_VALIDATION_DEFAULT_STATE", &v38, (const char ***)&__p);
  if (*(void *)__p.count)
  {
    *(void *)__p.hash = *(void *)__p.count;
    operator delete(*(void **)__p.count);
  }
  if ((v13 & 1) == 0) {
    uint64_t v38 = 1;
  }
  id v14 = (id)objc_opt_new();
  [v14 appendString:@"[METAL SHADER VALIDATION] Processing new pipeline"];
  if (MTLGetEnvDefault())
  {
    uint64_t v15 = (void *)[a2 baseObject];
    __int16 v16 = (const void *)[v15 bitCodeHash];
    char data = [v15 bitcodeType];
    CC_SHA256_Init(&__p);
    CC_SHA256_Update(&__p, v16, 8u);
    CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v15, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v15, "name"), "length"));
    CC_SHA256_Update(&__p, &data, 1u);
    if (a3)
    {
      BOOL v17 = (void *)[a3 baseObject];
      __int16 v18 = (const void *)[v17 bitCodeHash];
      md[0] = 0;
      md[0] = [v17 bitcodeType];
      CC_SHA256_Update(&__p, v18, 8u);
      CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v17, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v17, "name"), "length"));
      CC_SHA256_Update(&__p, md, 1u);
    }
    if (a4)
    {
      unint64_t v19 = (void *)[a4 baseObject];
      __int16 v20 = (const void *)[v19 bitCodeHash];
      md[0] = 0;
      md[0] = [v19 bitcodeType];
      CC_SHA256_Update(&__p, v20, 8u);
      CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v19, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v19, "name"), "length"));
      CC_SHA256_Update(&__p, md, 1u);
    }
    CC_SHA256_Final(md, &__p);
    long long v39 = *(_OWORD *)md;
    long long v40 = v42;
    uint64_t v21 = _MTLRequestHashToString();
    if (a5) {
      [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\npipeline label: \"%@\"", a5)];
    }
    [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\n\t{ function1: \"%@\" - label: \"%@\" }", objc_msgSend(a2, "name"), objc_msgSend(a2, "label"))];
    if (a3) {
      [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\n\t{ function2: \"%@\" - label: \"%@\" }", objc_msgSend(a3, "name"), objc_msgSend(a3, "label"))];
    }
    if (a4) {
      [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\n\t{ function3: \"%@\" - label: \"%@\" }", objc_msgSend(a4, "name"), objc_msgSend(a4, "label"))];
    }
    [v14 appendString:objc_msgSend(NSString, "stringWithFormat:", @"\n\t{ Shader Validation UID: \"%@\" }", v21)];
  }
  else
  {
    uint64_t v21 = 0;
  }
  id v31 = v14;
  v32[0] = MEMORY[0x263EF8330];
  v32[1] = 3221225472;
  uint64_t v33 = ___ZL37MTLLegacySVSetValidationChecksOptionsP17MTLLegacySVDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_2;
  unint64_t v34 = &unk_264E12F18;
  id v35 = v14;
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 3221225472;
  uint64_t v29 = ___ZL37MTLLegacySVSetValidationChecksOptionsP17MTLLegacySVDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_3;
  char v30 = &unk_264E12F18;
  uint64_t v22 = *(void **)(a1 + 656);
  if (v22)
  {
    if (a5 && ([*(id *)(a1 + 656) containsObject:a5] & 1) != 0)
    {
      LODWORD(v22) = 1;
    }
    else if (v21)
    {
      LODWORD(v22) = [v22 containsObject:v21];
    }
    else
    {
      LODWORD(v22) = 0;
    }
  }
  unint64_t v23 = *(void **)(a1 + 664);
  if (!v23) {
    goto LABEL_35;
  }
  if (!a5 || ([*(id *)(a1 + 664) containsObject:a5] & 1) == 0)
  {
    if (v21)
    {
      int v24 = [v23 containsObject:v21];
      goto LABEL_31;
    }
LABEL_35:
    if (v22) {
      goto LABEL_42;
    }
    goto LABEL_36;
  }
  int v24 = 1;
LABEL_31:
  if ((v22 & v24) == 1)
  {
    [v14 appendString:@"\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."];
    if (v38 != 2)
    {
      if (v38 == 1) {
        goto LABEL_58;
      }
LABEL_59:
      *a7 |= 0x800000000uLL;
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v22)
  {
LABEL_42:
    if (a6 == 2) {
      [v14 appendString:@"\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."];
    }
    if (v38 == 1) {
    goto LABEL_58;
    }
  }
  if (v24)
  {
    if (a6 == 1) {
      [v14 appendString:@"\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."];
    }
    if (v38 == 2) {
    goto LABEL_60;
    }
  }
LABEL_36:
  if (a6 == 2)
  {
    if (v38 == 2) {
  }
    }
  else
  {
    if (a6 == 1)
    {
      if (v38 == 1) {
      goto LABEL_58;
      }
    }
    if (v38 != 2)
    {
      if (v38 == 1)
      {
LABEL_58:
        v33((uint64_t)v32, a7);
        goto LABEL_61;
      }
      goto LABEL_59;
    }
  }
LABEL_60:
  v29((uint64_t)v28, a7);
LABEL_61:
  if (MTLLegacySVLog(void)::onceToken != -1) {
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  }
  unint64_t v25 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    MTLLegacySVSetValidationChecksOptions(v14, v25);
  }
}

void sub_23BD8AB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLLegacySVParsePerPSOList(const std::string *a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v2 = objc_alloc_init(MEMORY[0x263EFF9C0]);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v3 = (uint64_t *)a1;
  }
  else {
    int v3 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  }
  uint64_t v4 = [NSString stringWithUTF8String:v3];
  if (MTLLegacySVLog(void)::onceToken != -1) {
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  }
  uint64_t v5 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG)) {
    MTLGPUDebugParsePerPSOList(v4, v5, v6);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v18, a1, 24);
  if (!*(_DWORD *)((char *)&v18[4] + *(void *)(v18[0] - 24)))
  {
    *(void *)&long long v7 = 138412290;
    long long v14 = v7;
    while (1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, (uint64_t)&v15, 0x2Cu);
      if (SHIBYTE(v17) < 0) {
        break;
      }
      if (HIBYTE(v17))
      {
        uint64_t v11 = &v15;
LABEL_18:
        uint64_t v12 = objc_msgSend(NSString, "stringWithUTF8String:", v11, v14);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v14;
          uint64_t v22 = v12;
          _os_log_debug_impl(&dword_23BD25000, v5, OS_LOG_TYPE_DEBUG, "[METAL SHADER VALIDATION] Storing PSO: \"%@\"", buf, 0xCu);
        }
        if (v17 >= 0) {
          unsigned __int8 v13 = &v15;
        }
        else {
          unsigned __int8 v13 = v15;
        }
        objc_msgSend(v2, "addObject:", objc_msgSend(NSString, "stringWithUTF8String:", v13));
        if ((SHIBYTE(v17) & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
LABEL_25:
      if (*(_DWORD *)((char *)&v18[4] + *(void *)(v18[0] - 24))) {
        goto LABEL_9;
      }
    }
    if (v16)
    {
      uint64_t v11 = v15;
      goto LABEL_18;
    }
LABEL_24:
    operator delete(v15);
    goto LABEL_25;
  }
LABEL_9:
  uint64_t v8 = objc_msgSend(v2, "copy", v14);
  v18[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v18[2] = v9;
  void v18[3] = MEMORY[0x263F8C318] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23ECD53C0](&v20);
  return v8;
}

void sub_23BD8EAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<instrumentationHeapInit(MTLLegacySVDevice *)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 112;
  *(void *)(v3 + 136) = 0x200000;
  *(void *)(v3 + 144) = v2;
  if ((*(unsigned char *)(v2 + 286) & 0x80) != 0)
  {
    LegacySVBufferDescriptorHeap::init((LegacySVBufferDescriptorHeap *)(v2 + 296), (MTLLegacySVBuffer **)v2, 0xFFFFFu);
    uint64_t v2 = *v1;
  }
  *(void *)(v2 + 544) = v2;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<indirectCommandBufferPipelineInit(MTLLegacySVDevice *)::$_0 &&>>(id ****a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = (void *)[**v1 baseObject];
  uint64_t v3 = objc_msgSend(v2, "newLibraryWithURL:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x263F086E0], "bundleWithIdentifier:", @"com.apple.gpusw.MetalTools"), "URLForResource:withExtension:", @"MTLLegacySVICBSupport", @"metallib"), 0);
  id v12 = (id)[v3 newFunctionWithName:@"ICB_Inherit_PSO_Vertex"];
  uint64_t v11 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_None_Vertex"];
  uint64_t v4 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_Buffers_Vertex"];
  id v5 = objc_alloc_init(MEMORY[0x263F129C0]);
  [v5 setRasterizationEnabled:0];
  [v5 setSupportIndirectCommandBuffers:1];
  [v5 setVertexFunction:v12];
  *((void *)**v1 + 88) = [v2 newRenderPipelineStateWithDescriptor:v5 error:0];
  [v5 setVertexFunction:v11];
  *((void *)**v1 + 89) = [v2 newRenderPipelineStateWithDescriptor:v5 error:0];
  [v5 setVertexFunction:v4];
  *((void *)**v1 + 90) = [v2 newRenderPipelineStateWithDescriptor:v5 error:0];
  uint64_t v6 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_PSO_Kernel"];
  long long v7 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_None_Kernel"];
  uint64_t v8 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_Buffers_Kernel"];
  uint64_t v9 = (void *)[v3 newFunctionWithName:@"ICB_Inherit_Both_Kernel"];
  id v10 = objc_alloc_init(MEMORY[0x263F12850]);
  [v10 setSupportIndirectCommandBuffers:1];
  [v10 setComputeFunction:v6];
  *((void *)**v1 + 92) = [v2 newComputePipelineStateWithDescriptor:v10 options:0 reflection:0 error:0];
  [v10 setComputeFunction:v7];
  *((void *)**v1 + 93) = [v2 newComputePipelineStateWithDescriptor:v10 options:0 reflection:0 error:0];
  [v10 setComputeFunction:v8];
  *((void *)**v1 + 94) = [v2 newComputePipelineStateWithDescriptor:v10 options:0 reflection:0 error:0];
  [v10 setComputeFunction:v9];
  *((void *)**v1 + 95) = [v2 newComputePipelineStateWithDescriptor:v10 options:0 reflection:0 error:0];

  id v13 = objc_alloc_init(MEMORY[0x263F128A0]);
  [v13 setDepthWriteEnabled:0];
  [v13 setDepthCompareFunction:7];
  objc_msgSend((id)objc_msgSend(v13, "frontFaceStencil"), "setReadMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "frontFaceStencil"), "setWriteMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "backFaceStencil"), "setReadMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "backFaceStencil"), "setWriteMask:", 0);
  *((void *)**v1 + 91) = [v2 newDepthStencilStateWithDescriptor:v13];
}

uint64_t ___ZL37MTLLegacySVSetValidationChecksOptionsP17MTLLegacySVDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_2(uint64_t a1, void *a2)
{
  *a2 |= 0x800000000uLL;
  return [*(id *)(a1 + 32) appendString:@"\nEnabling checks."];
}

uint64_t ___ZL37MTLLegacySVSetValidationChecksOptionsP17MTLLegacySVDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_3(uint64_t a1, void *a2)
{
  *a2 |= 0x1000000000uLL;
  return [*(id *)(a1 + 32) appendString:@"\nDisabling checks."];
}

uint64_t ___ZZL18WrapDynamicLibraryIZ60__MTLLegacySVDevice_newDynamicLibraryWithURL_options_error__E4__13EP25MTLLegacySVDynamicLibraryP17MTLLegacySVDeviceT_ENKUlS5_E_clIPU28objcproto17MTLDynamicLibrary11objc_objectEEDaS5__block_invoke(uint64_t a1)
{
  uint64_t v2 = [MTLLegacySVDynamicLibrary alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = **(void **)(a1 + 40);

  return (uint64_t)[(MTLLegacySVDynamicLibrary *)v2 initWithDynamicLibrary:v3 device:v4];
}

uint64_t ___ZZL18WrapDynamicLibraryIZ45__MTLLegacySVDevice_newDynamicLibrary_error__E4__14EP25MTLLegacySVDynamicLibraryP17MTLLegacySVDeviceT_ENKUlS5_E_clIPU28objcproto17MTLDynamicLibrary11objc_objectEEDaS5__block_invoke(uint64_t a1)
{
  uint64_t v2 = [MTLLegacySVDynamicLibrary alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = **(void **)(a1 + 40);

  return (uint64_t)[(MTLLegacySVDynamicLibrary *)v2 initWithDynamicLibrary:v3 device:v4];
}

uint64_t ___ZZL18WrapDynamicLibraryIZ63__MTLLegacySVDevice_newDynamicLibrary_computeDescriptor_error__E4__15EP25MTLLegacySVDynamicLibraryP17MTLLegacySVDeviceT_ENKUlS5_E_clIPU28objcproto17MTLDynamicLibrary11objc_objectEEDaS5__block_invoke(uint64_t a1)
{
  uint64_t v2 = [MTLLegacySVDynamicLibrary alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = **(void **)(a1 + 40);

  return (uint64_t)[(MTLLegacySVDynamicLibrary *)v2 initWithDynamicLibrary:v3 device:v4];
}

uint64_t ___ZZL18WrapDynamicLibraryIZ83__MTLLegacySVDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error__E4__16EP25MTLLegacySVDynamicLibraryP17MTLLegacySVDeviceT_ENKUlS5_E_clIPU28objcproto17MTLDynamicLibrary11objc_objectEEDaS5__block_invoke(uint64_t a1)
{
  uint64_t v2 = [MTLLegacySVDynamicLibrary alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = **(void **)(a1 + 40);

  return (uint64_t)[(MTLLegacySVDynamicLibrary *)v2 initWithDynamicLibrary:v3 device:v4];
}

void emitParallellRenderEncoderDistribution(MTLTelemetryDevice *a1, MTLTelemetryStatisticUIRec *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*MEMORY[0x263F12D18])
  {
    if (*MEMORY[0x263F12D18] != 1) {
      return;
    }
    unsigned int count = a2->count;
    if (count) {
      double v5 = (float)((float)a2->total / (float)count);
    }
    else {
      double v5 = 0.0;
    }
    printf("\n\nParallellRenderEncoder, minEncodersPerParallellRender=%u, maxEncodersPerParallellRender=%u, avgEncodersPerParallellRender=%f, totalEncodersPerParallellRender=%llu, countEncodersPerParallellRender=%u", a2->min, a2->max, v5, a2->total, count);
  }
  uint64_t v6 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
  {
    miuint64_t n = a2->min;
    unsigned int max = a2->max;
    unsigned int v9 = a2->count;
    unint64_t total = a2->total;
    if (v9) {
      double v11 = (float)((float)total / (float)v9);
    }
    else {
      double v11 = 0.0;
    }
    *(_DWORD *)buf = 67110144;
    unsigned int v13 = min;
    __int16 v14 = 1024;
    unsigned int v15 = max;
    __int16 v16 = 2048;
    double v17 = v11;
    __int16 v18 = 2048;
    unint64_t v19 = total;
    __int16 v20 = 1024;
    unsigned int v21 = v9;
    _os_log_impl(&dword_23BD25000, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, "ParallellRenderEncoder, minEncodersPerParallellRender=%u, maxEncodersPerParallellRender=%u, avgEncodersPerParallellRender=%f, totalEncodersPerParallellRender=%llu, countEncodersPerParallellRender=%u", buf, 0x28u);
  }
}

unint64_t validateMTLBlitOption(unint64_t result, _MTLMessageContext *a2)
{
  if ((result > 4 || result == 3) && result != 0x20000000) {
    return _MTLMessageContextPush_();
  }
  return result;
}

id validateResourceAliasing(uint64_t a1, uint64_t a2, int a3)
{
  id result = (id)[*(id *)a1 heap];
  if (result)
  {
    id v7 = result;
    id result = (id)[*(id *)a2 heap];
    if (v7 == result)
    {
      id result = *(id *)a1;
      if (*(void *)a1 != *(void *)a2)
      {
        id result = (id)objc_msgSend(result, "doesAliasResource:");
        if (result)
        {
          if ([v7 type] != 1) {
            return (id)MTLReportFailure();
          }
          if (!a3) {
            return (id)MTLReportFailure();
          }
          if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
            return (id)MTLReportFailure();
          }
          if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
            return (id)MTLReportFailure();
          }
          if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
            return (id)MTLReportFailure();
          }
          if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
            return (id)MTLReportFailure();
          }
          id v8 = *(id *)a1;
          id v9 = *(id *)a2;
          uint64_t v10 = [v8 width];
          if (v10 != [v9 width]) {
            return (id)MTLReportFailure();
          }
          uint64_t v11 = [v8 height];
          if (v11 != [v9 height]) {
            return (id)MTLReportFailure();
          }
          uint64_t v12 = [v8 depth];
          id result = (id)[v9 depth];
          if ((id)v12 != result) {
            return (id)MTLReportFailure();
          }
        }
      }
    }
  }
  return result;
}

__CFString *MTLBlitOptionString(uint64_t a1)
{
  if (!a1) {
    return @"MTLBlitOptionNone";
  }
  char v1 = a1;
  uint64_t v2 = (void *)[MEMORY[0x263F089D8] string];
  uint64_t v3 = v2;
  if (v1)
  {
    [v2 appendString:@"MTLBlitOptionDepthFromDepthStencil"];
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0) {
        return (__CFString *)v3;
      }
      goto LABEL_9;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  [v3 appendString:@"MTLBlitOptionStencilFromDepthStencil"];
  if ((v1 & 4) != 0) {
LABEL_9:
  }
    [v3 appendString:@"MTLBlitOptionRowLinearPVRTC"];
  return (__CFString *)v3;
}

void std::deque<objc_object *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<objc_object *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_23BD9527C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t validateTextureRegion@<X0>(void *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  _MTLMessageContextBegin_();
  if (!a2) {
    _MTLMessageContextPush_();
  }
  if (([a2 conformsToProtocol:&unk_26EF9C6F8] & 1) == 0) {
    _MTLMessageContextPush_();
  }
  if ((void *)[a2 device] != a1) {
    _MTLMessageContextPush_();
  }
  if ([a2 mipmapLevelCount] <= a3)
  {
    unint64_t v14 = a3;
    uint64_t v15 = [a2 mipmapLevelCount];
    _MTLMessageContextPush_();
  }
  uint64_t v12 = objc_msgSend(a2, "numFaces", v14, v15);
  if ([a2 arrayLength] * v12 <= a4)
  {
    [a2 numFaces];
    [a2 arrayLength];
    _MTLMessageContextPush_();
  }
  if (!(a5[4] * a5[3] * a5[5])) {
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  *(void *)(a6 + 48) = 0;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)a6 = 0u;
  [a1 baseObject];
  [a2 pixelFormat];
  MTLPixelFormatGetInfoForDevice();
  [a2 pixelFormat];
  [a2 width];
  [a2 height];
  [a2 depth];
  [a2 sampleCount];
  MTLGetTextureLevelInfoForDeviceWithOptions();
  _MTLAdjustMTLSize();
  _MTLMessageContextBegin_();
  if (*a5) {
    _MTLMessageContextPush_();
  }
  if (a5[1]) {
    _MTLMessageContextPush_();
  }
  if (a5[2]) {
    _MTLMessageContextPush_();
  }
  if ((*(unsigned char *)(a6 + 9) & 4) != 0)
  {
    if (*a5 % *(void *)(a6 + 32)) {
      _MTLMessageContextPush_();
    }
    if (a5[1] % *(void *)(a6 + 40)) {
      _MTLMessageContextPush_();
    }
    if (a5[2] % *(void *)(a6 + 48)) {
      _MTLMessageContextPush_();
    }
    if (0uLL % *(void *)(a6 + 32)) {
      _MTLMessageContextPush_();
    }
    if (0uLL % *(void *)(a6 + 40)) {
      _MTLMessageContextPush_();
    }
    if (0uLL % *(void *)(a6 + 48)) {
      _MTLMessageContextPush_();
    }
  }
  return _MTLMessageContextEnd();
}

uint64_t validateBlitProtectionOptions(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (([a2 protectionOptions] & ~a1) != 0)
  {
    uint64_t v10 = [a2 protectionOptions];
    uint64_t v11 = a1;
    uint64_t v9 = a4;
    _MTLMessageContextPush_();
  }
  uint64_t result = objc_msgSend(a3, "protectionOptions", v9, v10, v11);
  if ((a1 & ~result) != 0)
  {
    [a3 protectionOptions];
    return _MTLMessageContextPush_();
  }
  return result;
}

void *ResourceIdentity::UnwindTexture(void *a1, MTLTextureType a2, int a3, char a4, int a5, _DWORD *a6, int *a7)
{
  unsigned int v13 = a1;
  unint64_t v14 = (ResourceIdentity *)[a1 textureType];
  uint64_t v15 = [v13 parentTexture];
  if (v15)
  {
    do
    {
      __int16 v16 = (void *)v15;
      a4 += [v13 parentRelativeLevel];
      a2 += [v13 parentRelativeSlice];
      uint64_t v15 = [v16 parentTexture];
      unsigned int v13 = v16;
    }
    while (v15);
  }
  else
  {
    __int16 v16 = v13;
  }
  *a6 = ResourceIdentity::PackViewInformation(v14, a2, a3, a4, a5, 0);
  unint64_t v17 = [v16 textureType];
  int v18 = [v16 arrayLength];
  char v19 = [v16 mipmapLevelCount];
  if (v17 <= 6 && ((1 << v17) & 0x4A) != 0) {
    int v20 = 0x80000000;
  }
  else {
    int v20 = (v17 == 8) << 31;
  }
  if (v17 - 5 >= 2) {
    int v21 = 1;
  }
  else {
    int v21 = 6;
  }
  *a7 = (v19 - 1) & 0xF | ((v17 - 5 < 2) << 30) | v20 | (((v18 * v21) << 8) + 524032) & 0x7FF00;
  return v16;
}

unint64_t ResourceIdentity::PackViewInformation(ResourceIdentity *this, MTLTextureType a2, int a3, char a4, int a5, int a6)
{
  if ((unint64_t)this <= 6 && ((1 << (char)this) & 0x4A) != 0) {
    int v6 = 0x80000000;
  }
  else {
    int v6 = (this == (ResourceIdentity *)8) << 31;
  }
  int v7 = (unint64_t)this - 5 < 2;
  int v8 = v7 << 30;
  if ((v7 & a6) != 0) {
    int v9 = 6;
  }
  else {
    int v9 = 1;
  }
  return v8 & 0xC007FF00 | ((a2 & 0x7FF) << 19) | (16 * (a4 & 0xFu)) | (a5 - 1) & 0xF | v6 | (((a3 * v9) << 8) + 524032) & 0x7FF00;
}

void std::deque<objc_object *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      id v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<objc_object **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<objc_object **>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      id v35 = &v34[8 * (v46 >> 2)];
      char v37 = &v34[8 * v47];
      char v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  std::__split_buffer<objc_object **>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<objc_object **>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_23BD97C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<objc_object **>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  int v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    int v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      char v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      int v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        int v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        int v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        int v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      int v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)int v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    int v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      char v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      int v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<objc_object **>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    int v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    int v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<objc_object *>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<objc_object **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<objc_object **>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t validateNewTexture(MTLDebugBuffer *a1, MTLTextureDescriptor *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v12 = [(MTLToolsObject *)a1 device];
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      MTLReportFailure();
    }
    if (![(MTLTextureDescriptor *)a2 usage]
      && +[MTLDebugDevice complainAboutSloppyTextureUsage])
    {
      MTLReportFailure();
    }
    if ([(MTLTextureDescriptor *)a2 storageMode] == MTLStorageModeMemoryless) {
      MTLReportFailure();
    }
    if ([(MTLTextureDescriptor *)a2 storageMode] == MTLStorageModeShared)
    {
      [(MTLDevice *)v12 originalObject];
      MTLValidateFeatureSupport();
    }
  }
  else
  {
    MTLReportFailure();
  }
  [(MTLTextureDescriptor *)a2 pixelFormat];
  MTLPixelFormatGetInfoForDevice();
  [(MTLTextureDescriptor *)a2 width];
  if (!a4) {
    MTLReportFailure();
  }
  if ([(MTLTextureDescriptor *)a2 textureType] != MTLTextureType2D
    && [(MTLTextureDescriptor *)a2 textureType] != MTLTextureType2DArray
    && [(MTLTextureDescriptor *)a2 textureType] != MTLTextureTypeTextureBuffer)
  {
    [(MTLTextureDescriptor *)a2 textureType];
    uint64_t v18 = MTLTextureTypeString();
    MTLReportFailure();
  }
  NSUInteger v13 = [(MTLTextureDescriptor *)a2 height] * a4;
  NSUInteger v14 = a3 - a4 + v13 * [(MTLTextureDescriptor *)a2 arrayLength];
  if (v14 > [(MTLDebugBuffer *)a1 length])
  {
    NSUInteger v16 = [(MTLTextureDescriptor *)a2 height] * a4;
    NSUInteger v19 = a3 - a4 + v16 * [(MTLTextureDescriptor *)a2 arrayLength];
    unint64_t v21 = [(MTLDebugBuffer *)a1 length];
    MTLReportFailure();
  }
  if (((a5 - 1) & a3) != 0)
  {
    unint64_t v21 = a5;
    uint64_t v22 = a3;
    NSUInteger v19 = 0;
    MTLReportFailure();
  }
  if (((a6 - 1) & a4) != 0
    && [(MTLTextureDescriptor *)a2 textureType] != MTLTextureTypeTextureBuffer)
  {
    unint64_t v21 = a6;
    uint64_t v22 = a4;
    NSUInteger v19 = 0;
    MTLReportFailure();
  }
  uint64_t result = [(MTLTextureDescriptor *)a2 usage];
  if ((result & 0x20) != 0)
  {
    if (([(MTLTextureDescriptor *)a2 usage] & 3) == 0) {
      MTLReportFailure();
    }
    uint64_t result = [(MTLTextureDescriptor *)a2 pixelFormat];
    if (result != 53)
    {
      uint64_t result = [(MTLTextureDescriptor *)a2 pixelFormat];
      if (result != 54)
      {
        uint64_t result = [(MTLTextureDescriptor *)a2 pixelFormat];
        if (result != 103) {
          return MTLReportFailure();
        }
      }
    }
  }
  return result;
}

void emitBufferDistribution(MTLTelemetryDevice *a1, MTLTelemetryBufferDistributionRec *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int count = a2->var0.var0.count;
  if (count)
  {
    if (*MEMORY[0x263F12D18])
    {
      if (*MEMORY[0x263F12D18] != 1) {
        return;
      }
      printf("\n\nBuffer, minLength=%u, maxLength=%u, avgLength=%f, totalLength=%llu, countLength=%u", a2->var0.var0.min, a2->var0.var0.max, (float)((float)a2->var0.var0.total / (float)count), a2->var0.var0.total, count);
    }
    unint64_t v5 = [(MTLTelemetryDevice *)a1 telemetryLog];
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEFAULT))
    {
      miuint64_t n = a2->var0.var0.min;
      unsigned int max = a2->var0.var0.max;
      unsigned int v8 = a2->var0.var0.count;
      unint64_t total = a2->var0.var0.total;
      if (v8) {
        double v10 = (float)((float)total / (float)v8);
      }
      else {
        double v10 = 0.0;
      }
      *(_DWORD *)buf = 67110144;
      unsigned int v12 = min;
      __int16 v13 = 1024;
      unsigned int v14 = max;
      __int16 v15 = 2048;
      double v16 = v10;
      __int16 v17 = 2048;
      unint64_t v18 = total;
      __int16 v19 = 1024;
      unsigned int v20 = v8;
      _os_log_impl(&dword_23BD25000, (os_log_t)v5, OS_LOG_TYPE_DEFAULT, "Buffer, minLength=%u, maxLength=%u, avgLength=%f, totalLength=%llu, countLength=%u", buf, 0x28u);
    }
  }
}

uint64_t _MTLValidateResolveTexture(void *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9, char a10)
{
  if (a3 >= 0xA) {
    MTLReportFailure();
  }
  if ((void *)[a2 device] != a1) {
    MTLReportFailure();
  }
  if (![a2 textureType]) {
    MTLReportFailure();
  }
  if ([a2 textureType] == 1) {
    MTLReportFailure();
  }
  if ([a2 textureType] == 4) {
    MTLReportFailure();
  }
  if ([a2 textureType] == 9) {
    MTLReportFailure();
  }
  if ([a2 storageMode] == 3) {
    MTLReportFailure();
  }
  _MTLGetAttachmentSize();
  if (a4 || a5) {
    MTLReportFailure();
  }
  uint64_t v16 = [a2 pixelFormat];
  uint64_t v17 = [a9 pixelFormat];
  unint64_t v18 = a2 + 9;
  if ((a2[10] & 0x80) != 0 || v16 == 253)
  {
    if (a10) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v22 = *v18;
    MTLReportFailure();
    if (a10) {
      goto LABEL_22;
    }
  }
  if (v17 != v16)
  {
    uint64_t v22 = a9[9];
    uint64_t v26 = *v18;
    MTLReportFailure();
  }
LABEL_22:
  uint64_t v19 = objc_msgSend(a2, "numFaces", v22, v26);
  uint64_t v20 = [a2 arrayLength];
  if (v20 * v19 <= a6)
  {
    unint64_t v23 = a6;
    uint64_t v27 = v20 * v19;
    MTLReportFailure();
  }
  if (objc_msgSend(a2, "mipmapLevelCount", v23, v27) <= a8)
  {
    unint64_t v24 = a8;
    uint64_t v28 = [a2 mipmapLevelCount];
    MTLReportFailure();
  }
  objc_msgSend(a2, "pixelFormat", v24, v28);
  [a2 width];
  [a2 height];
  [a2 depth];
  [a2 sampleCount];
  MTLGetTextureLevelInfoForDeviceWithOptions();
  MTLReportFailure();
  if (objc_msgSend(a2, "sampleCount", a7, 0, a8) != 1)
  {
    uint64_t v25 = [a2 sampleCount];
    MTLReportFailure();
  }
  uint64_t result = objc_msgSend(a1, "supportsRenderToLinearTextures", v25);
  if ((result & 1) == 0)
  {
    uint64_t result = [a2 buffer];
    if (result) {
      return MTLReportFailure();
    }
  }
  return result;
}

uint64_t _MTLValidateResolveTextureWithContext(void *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9, char a10)
{
  if (a3 >= 0xA) {
    _MTLMessageContextPush_();
  }
  if ((void *)[a2 device] != a1) {
    _MTLMessageContextPush_();
  }
  if (![a2 textureType]) {
    _MTLMessageContextPush_();
  }
  if ([a2 textureType] == 1) {
    _MTLMessageContextPush_();
  }
  if ([a2 textureType] == 4) {
    _MTLMessageContextPush_();
  }
  if ([a2 textureType] == 9) {
    _MTLMessageContextPush_();
  }
  if ([a2 storageMode] == 3) {
    _MTLMessageContextPush_();
  }
  _MTLGetAttachmentSize();
  if (a4 || a5) {
    _MTLMessageContextPush_();
  }
  uint64_t v16 = [a2 pixelFormat];
  uint64_t v17 = [a9 pixelFormat];
  unint64_t v18 = a2 + 9;
  if ((a2[10] & 0x80) != 0 || v16 == 253)
  {
    if (a10) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v22 = *v18;
    _MTLMessageContextPush_();
    if (a10) {
      goto LABEL_22;
    }
  }
  if (v17 != v16)
  {
    uint64_t v22 = a9[9];
    uint64_t v26 = *v18;
    _MTLMessageContextPush_();
  }
LABEL_22:
  uint64_t v19 = objc_msgSend(a2, "numFaces", v22, v26);
  uint64_t v20 = [a2 arrayLength];
  if (v20 * v19 <= a6)
  {
    unint64_t v23 = a6;
    uint64_t v27 = v20 * v19;
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a2, "mipmapLevelCount", v23, v27) <= a8)
  {
    unint64_t v24 = a8;
    uint64_t v28 = [a2 mipmapLevelCount];
    _MTLMessageContextPush_();
  }
  objc_msgSend(a2, "pixelFormat", v24, v28);
  [a2 width];
  [a2 height];
  [a2 depth];
  [a2 sampleCount];
  MTLGetTextureLevelInfoForDeviceWithOptions();
  _MTLMessageContextPush_();
  if (objc_msgSend(a2, "sampleCount", a7, 0, a8) != 1)
  {
    uint64_t v25 = [a2 sampleCount];
    _MTLMessageContextPush_();
  }
  uint64_t result = objc_msgSend(a1, "supportsRenderToLinearTextures", v25);
  if ((result & 1) == 0)
  {
    uint64_t result = [a2 buffer];
    if (result) {
      return _MTLMessageContextPush_();
    }
  }
  return result;
}

uint64_t _MTLValidateDepthStencilStoreState(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result;
  if (!a4 || result != 4 && a2 != 4)
  {
    if (result && a2)
    {
      unint64_t v6 = 0;
      char v7 = 0;
      unsigned int v8 = &qword_23BE4AC10;
      do
      {
        if (*(v8 - 1) == result && *v8 == a2) {
          char v7 = 1;
        }
        if (v6 > 3) {
          break;
        }
        v8 += 2;
        ++v6;
      }
      while ((v7 & 1) == 0);
      if ((v7 & 1) == 0) {
        uint64_t result = MTLReportFailure();
      }
    }
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 2 && a3 == 1) {
      return MTLReportFailure();
    }
  }
  return result;
}

uint64_t _MTLValidateDepthStencilStoreStateWithContext(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result;
  if (!a4 || result != 4 && a2 != 4)
  {
    if (result && a2)
    {
      unint64_t v6 = 0;
      char v7 = 0;
      unsigned int v8 = &qword_23BE4AC10;
      do
      {
        if (*(v8 - 1) == result && *v8 == a2) {
          char v7 = 1;
        }
        if (v6 > 3) {
          break;
        }
        v8 += 2;
        ++v6;
      }
      while ((v7 & 1) == 0);
      if ((v7 & 1) == 0) {
        uint64_t result = _MTLMessageContextPush_();
      }
    }
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 2 && a3 == 1) {
      return _MTLMessageContextPush_();
    }
  }
  return result;
}

uint64_t _MTLIsInsideCompletionHandler()
{
  return *(unsigned __int8 *)gInsideCompletionHandler();
}

uint64_t validateRenderPassDescriptor(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v132[65] = *(NSRange **)MEMORY[0x263EF8340];
  uint64_t v131 = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v128 = 0u;
  _MTLMessageContextBegin_();
  unint64_t v126 = 0;
  unint64_t v127 = 0;
  unint64_t v7 = [a1 renderTargetArrayLength];
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  __int16 v125 = 0;
  char v124 = 1;
  unint64_t v118 = -1;
  uint64_t v120 = 0;
  memset(v122, 0, sizeof(v122));
  int v123 = 1065353216;
  unint64_t v10 = -1;
  do
  {
    uint64_t v11 = objc_msgSend(*(id *)objc_msgSend(a1, "_descriptorPrivate"), "_descriptorAtIndex:", v8);
    if (v11)
    {
      uint64_t v12 = [v11 _descriptorPrivate];
      if (*(void *)v12)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          _MTLMessageContextPush_();
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          __int16 v13 = *(char **)v12;
          if (([*(id *)v12 requireUsage:4] & 1) == 0)
          {
            int v100 = (long long *)[v13 usage];
            uint64_t v108 = 4;
            uint64_t v87 = v8;
            _MTLMessageContextPush_();
          }
          if (!*(void *)(objc_msgSend(a1, "_descriptorPrivate", v87, v100, v108) + 128)
            && (*(unsigned char *)(v12 + 48) & 1) != 0)
          {
            unint64_t v88 = v8;
            _MTLMessageContextPush_();
          }
          int v100 = &v128;
          validateAttachmentOnDevice(a2, (id *)v12, v8, (uint64_t *)&v127, v7, (unsigned char *)&v125 + 1, &v125, *(unsigned char *)(objc_msgSend(a1, "_descriptorPrivate", v88) + 43), &v124);
          if (MTLReportFailureTypeEnabled()) {
            validateStoreLoadTransition(v8, a3, (MTLRenderPassAttachmentDescriptorPrivate *)v12, a4, a5, v7);
          }
          AttachmentDescriptorSimple::AttachmentDescriptorSimple(&v121, (const MTLRenderPassAttachmentDescriptorPrivate *)v12, *(void *)(v12 + 40), v7);
          unsigned int v14 = std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::find<AttachmentDescriptorSimple>(v122, (NSRange *)&v121);
          if (v14)
          {
            uint64_t length_low = LODWORD(v14[4].length);
            int v100 = (long long *)v8;
            _MTLMessageContextPush_();
          }
          v132[0] = (NSRange *)&v121;
          LODWORD(std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::__emplace_unique_key_args<AttachmentDescriptorSimple,std::piecewise_construct_t const&,std::tuple<AttachmentDescriptorSimple const&>,std::tuple<>>((uint64_t)v122, (NSRange *)&v121, (uint64_t)&std::piecewise_construct, v132)[4].length) = v8;
          v132[v9 + 1] = (NSRange *)[*(id *)v12 pixelFormat];
          __int16 v15 = &v132[7 * v9 + 9];
          long long v16 = *(_OWORD *)(v13 + 72);
          long long v17 = *(_OWORD *)(v13 + 88);
          long long v18 = *(_OWORD *)(v13 + 104);
          v15[6] = (NSRange *)*((void *)v13 + 15);
          *((_OWORD *)v15 + 1) = v17;
          *((_OWORD *)v15 + 2) = v18;
          *(_OWORD *)__int16 v15 = v16;
          [*(id *)v12 sampleCount];
          if (v10 >= (unint64_t)[v13 width] >> *(void *)(v12 + 8)) {
            unint64_t v10 = (unint64_t)[v13 width] >> *(void *)(v12 + 8);
          }
          ++v120;
          ++v9;
          if (v118 >= (unint64_t)objc_msgSend(v13, "height", length_low) >> *(void *)(v12 + 8)) {
            unint64_t v118 = (unint64_t)[v13 height] >> *(void *)(v12 + 8);
          }
        }
      }
    }
    ++v8;
  }
  while (v8 != 8);
  if (!v124) {
    _MTLMessageContextPush_();
  }
  if (HIBYTE(v125) && (_BYTE)v125) {
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  unint64_t v19 = [a2 maxFramebufferStorageBits];
  uint64_t v20 = MTLPixelFormatComputeTotalSizeUsed();
  char v21 = [a2 isLargeMRTSupported];
  if (v19 >= 8 * v20) {
    char v22 = 1;
  }
  else {
    char v22 = v21;
  }
  if ((v22 & 1) == 0)
  {
    uint64_t v87 = v20 & 0x1FFFFFFFFFFFFFFFLL;
    int v100 = (long long *)(v19 >> 3);
    MTLReportFailure();
  }
  if ((objc_msgSend(a2, "supportsSeparateVisibilityAndShadingRate", v87, v100) & 1) == 0) {
    unint64_t v126 = v127;
  }
  uint64_t v131 = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v128 = 0u;
  _MTLMessageContextBegin_();
  uint64_t v113 = v20;
  unint64_t v23 = objc_msgSend(*(id *)objc_msgSend(a1, "_descriptorPrivate"), "_descriptorAtIndex:", 8);
  unint64_t v24 = v23;
  if (v23)
  {
    uint64_t v25 = [v23 _descriptorPrivate];
    uint64_t v26 = *(_DWORD **)v25;
    if (*(void *)v25)
    {
      int v117 = v26[20];
      if (([v26 requireUsage:4] & 1) == 0)
      {
        uint64_t v90 = [v26 usage];
        uint64_t v101 = 4;
        _MTLMessageContextPush_();
      }
      if (!*(void *)(objc_msgSend(a1, "_descriptorPrivate", v90, v101) + 128) && (*(unsigned char *)(v25 + 48) & 1) != 0) {
        _MTLMessageContextPush_();
      }
      uint64_t v101 = (uint64_t)&v128;
      validateAttachmentOnDevice(a2, (id *)v25, 8uLL, (uint64_t *)&v126, v7, (unsigned char *)&v125 + 1, &v125, *(unsigned char *)([a1 _descriptorPrivate] + 43), &v124);
      if (v10 >= (unint64_t)[v26 width] >> *(void *)(v25 + 8)) {
        unint64_t v10 = (unint64_t)[v26 width] >> *(void *)(v25 + 8);
      }
      ++v120;
      if (v118 >= (unint64_t)[v26 height] >> *(void *)(v25 + 8)) {
        unint64_t v118 = (unint64_t)[v26 height] >> *(void *)(v25 + 8);
      }
    }
    else
    {
      LOBYTE(v117) = 0;
    }
    [v24 clearDepth];
    if (v27 < 0.0 || ([v24 clearDepth], v28 > 1.0))
    {
      [v24 clearDepth];
      uint64_t v90 = v86;
      _MTLMessageContextPush_();
    }
  }
  else
  {
    LOBYTE(v117) = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  uint64_t v29 = objc_msgSend(*(id *)objc_msgSend(a1, "_descriptorPrivate", v90, v101), "_descriptorAtIndex:", 9);
  if (v29)
  {
    uint64_t v30 = [v29 _descriptorPrivate];
    long long v31 = *(_DWORD **)v30;
    if (*(void *)v30)
    {
      int v115 = v31[20];
      if (([v31 requireUsage:4] & 1) == 0)
      {
        uint64_t v91 = [v31 usage];
        uint64_t texture = 4;
        _MTLMessageContextPush_();
      }
      uint64_t v32 = objc_msgSend(a1, "_descriptorPrivate", v91, texture);
      uint64_t texture = (uint64_t)&v128;
      validateAttachmentOnDevice(a2, (id *)v30, 9uLL, (uint64_t *)&v126, v7, (unsigned char *)&v125 + 1, &v125, *(unsigned char *)(v32 + 43), &v124);
      if (v10 >= (unint64_t)[v31 width] >> *(void *)(v30 + 8)) {
        unint64_t v10 = (unint64_t)[v31 width] >> *(void *)(v30 + 8);
      }
      ++v120;
      if (v118 >= (unint64_t)[v31 height] >> *(void *)(v30 + 8)) {
        unint64_t v118 = (unint64_t)[v31 height] >> *(void *)(v30 + 8);
      }
    }
    else
    {
      LOBYTE(v115) = 0;
    }
  }
  else
  {
    LOBYTE(v115) = 0;
    uint64_t v30 = 0;
    long long v31 = 0;
  }
  if (!v124) {
    _MTLMessageContextPush_();
  }
  if (HIBYTE(v125) && (_BYTE)v125) {
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  if (v10 <= 1) {
    uint64_t v33 = 1;
  }
  else {
    uint64_t v33 = v10;
  }
  unint64_t v111 = v33;
  uint64_t v34 = v118;
  if (v118 <= 1) {
    uint64_t v34 = 1;
  }
  unint64_t v119 = v34;
  id v35 = *(void **)([a1 _descriptorPrivate] + 16);
  unint64_t v36 = *(void *)([a1 _descriptorPrivate] + 24);
  long long v128 = 0u;
  uint64_t v131 = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  _MTLMessageContextBegin_();
  char v37 = (void *)[a1 rasterizationRateMap];
  if (v37)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      _MTLMessageContextPush_();
    }
    if (!(void)v128)
    {
      if ((void *)[v37 device] != a2) {
        _MTLMessageContextPush_();
      }
      [v37 screenSize];
      if (v35 > v121.texture)
      {
        [v37 screenSize];
        uint64_t v91 = (uint64_t)v35;
        uint64_t texture = (uint64_t)v121.texture;
        _MTLMessageContextPush_();
      }
      objc_msgSend(v37, "screenSize", v91, texture);
      if (v36 > v121.level)
      {
        [v37 screenSize];
        unint64_t v92 = v36;
        unint64_t level = v121.level;
        _MTLMessageContextPush_();
      }
      if (v7 > objc_msgSend(v37, "layerCount", v92, level))
      {
        uint64_t v91 = v7;
        uint64_t texture = [v37 layerCount];
        _MTLMessageContextPush_();
      }
      if (!(void)v128)
      {
        memset(&v121, 0, 24);
        [v37 screenSize];
        uint64_t v38 = v35 ? v35 : v121.texture;
        unint64_t v39 = v36 ? v36 : v121.level;
        unint64_t v110 = v39;
        if (objc_msgSend(v37, "mutability", v91, texture) != 1)
        {
          unint64_t v40 = (unint64_t)v38;
          unint64_t v41 = 0;
          float v42 = (float)v40;
          float v43 = 0.0;
          float v44 = 0.0;
          while (v41 < [v37 layerCount])
          {
            *(float *)&double v45 = v42;
            *(float *)&double v46 = (float)v110;
            objc_msgSend(v37, "mapScreenToPhysicalCoordinates:forLayer:", v41, v45, v46);
            if (v43 <= v47) {
              float v43 = v47;
            }
            if (v44 <= v48) {
              float v44 = v48;
            }
            ++v41;
          }
          if (v120)
          {
            unint64_t v84 = vcvtas_u32_f32(v43);
            if (v111 < v84)
            {
              uint64_t v91 = v84;
              uint64_t texture = v111;
              _MTLMessageContextPush_();
            }
          }
          if (v120)
          {
            unint64_t v85 = vcvtas_u32_f32(v44);
            if (v119 < v85)
            {
              uint64_t v91 = v85;
              uint64_t texture = v119;
              _MTLMessageContextPush_();
            }
          }
        }
      }
    }
  }
  else
  {
    if ((unint64_t)v35 > v111)
    {
      uint64_t v91 = (uint64_t)v35;
      uint64_t texture = v111;
      _MTLMessageContextPush_();
    }
    if (v36 > v119)
    {
      uint64_t v91 = v36;
      uint64_t texture = v119;
      _MTLMessageContextPush_();
    }
  }
  int v49 = objc_msgSend(a2, "supportsRenderPassWithoutRenderTarget", v91, texture);
  if ((v49 & 1) == 0)
  {
    if (v120) {
      goto LABEL_105;
    }
    goto LABEL_258;
  }
  if (!v120 && (!v36 || !v35)) {
LABEL_258:
  }
    _MTLMessageContextPush_();
LABEL_105:
  if (([a2 supportsSparseDepthAttachments] & 1) == 0)
  {
    if (v26 && [v26 isSparse]) {
      _MTLMessageContextPush_();
    }
    if (!v31)
    {
      int v50 = 0;
      if (!v25) {
        goto LABEL_121;
      }
      goto LABEL_119;
    }
    if ([v31 isSparse]) {
      _MTLMessageContextPush_();
    }
  }
  int v50 = 0;
  if (v26 && v31)
  {
    if (([a2 supportsSeparateDepthStencil] & 1) == 0 && ((v117 & 0x40) == 0 || (v115 & 0x20) == 0)) {
      _MTLMessageContextPush_();
    }
    int v50 = 1;
  }
  if (v25)
  {
LABEL_119:
    if (v30) {
      _MTLValidateDepthStencilStoreStateWithContext(*(void *)(v25 + 40), *(void *)(v30 + 40), *(void *)(v30 + 104), 1);
    }
  }
LABEL_121:
  if (v117 & 0x40 | v115 & 0x20)
  {
    if (v50)
    {
      if (v26 != v31) {
        _MTLMessageContextPush_();
      }
      if (*(void *)(v25 + 8) != *(void *)(v30 + 8) || *(void *)(v25 + 16) != *(void *)(v30 + 16)) {
        _MTLMessageContextPush_();
      }
      uint64_t v60 = *(void *)(v25 + 112);
      if (v60)
      {
        uint64_t v61 = *(void *)(v30 + 112);
        if (v61)
        {
          if (v60 != v61) {
            _MTLMessageContextPush_();
          }
        }
      }
    }
  }
  else if (v50)
  {
    uint64_t v51 = *(void *)(v25 + 8);
    uint64_t v52 = *(void *)(v30 + 8);
    unint64_t v53 = [v26 width];
    if (v53 >> v51 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = v53 >> v51;
    }
    unint64_t v55 = [v26 height];
    if (v55 >> v51 <= 1) {
      uint64_t v56 = 1;
    }
    else {
      uint64_t v56 = v55 >> v51;
    }
    unint64_t v57 = [v31 width];
    if (v57 >> v52 <= 1) {
      uint64_t v58 = 1;
    }
    else {
      uint64_t v58 = v57 >> v52;
    }
    unint64_t v59 = (unint64_t)[v31 height] >> v52;
    if (v59 <= 1) {
      unint64_t v59 = 1;
    }
    if (v54 != v58 || v56 != v59)
    {
      uint64_t v108 = v58;
      unint64_t v109 = v59;
      uint64_t v93 = v54;
      uint64_t v104 = v56;
      _MTLMessageContextPush_();
    }
  }
  unint64_t v62 = v127;
  if (v126) {
    unint64_t v63 = v126;
  }
  else {
    unint64_t v63 = v127;
  }
  if (objc_msgSend(a2, "supportsSeparateVisibilityAndShadingRate", v93, v104, v108, v109))
  {
    unint64_t v64 = *(void *)([a1 _descriptorPrivate] + 32);
    unint64_t v65 = *(void *)([a1 _descriptorPrivate] + 72);
    uint64_t v66 = v128;
    if (v64 && ([a2 supportsTextureSampleCount:v64] & 1) == 0)
    {
      unint64_t v94 = v64;
      _MTLMessageContextPush_();
    }
    if (v65 && ([a2 supportsTextureSampleCount:v65] & 1) == 0)
    {
      unint64_t v94 = v65;
      _MTLMessageContextPush_();
    }
    if (v66 == (void)v128)
    {
      if (v64) {
        unint64_t v67 = v64;
      }
      else {
        unint64_t v67 = v65;
      }
      if (!v62) {
        unint64_t v62 = v67;
      }
      if (!v63) {
        unint64_t v63 = v65;
      }
      if (v62 | v63)
      {
        if (v62 && v63 && v63 < v62) {
          _MTLMessageContextPush_();
        }
        goto LABEL_179;
      }
LABEL_260:
      _MTLMessageContextPush_();
      unint64_t v62 = 0;
      unint64_t v63 = 0;
    }
  }
  else
  {
    if (*(void *)([a1 _descriptorPrivate] + 32)) {
      _MTLMessageContextPush_();
    }
    if (v120) {
      int v68 = 0;
    }
    else {
      int v68 = v49;
    }
    if (v68 == 1)
    {
      unint64_t v62 = *(void *)([a1 _descriptorPrivate] + 72);
      if (!v62) {
        goto LABEL_260;
      }
      if (([a2 supportsTextureSampleCount:v62] & 1) == 0)
      {
        unint64_t v94 = v62;
        _MTLMessageContextPush_();
      }
      unint64_t v63 = v62;
    }
  }
LABEL_179:
  if ((v49 & 1) == 0 && *(void *)([a1 _descriptorPrivate] + 72)) {
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  uint64_t v131 = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v128 = 0u;
  _MTLMessageContextBegin_();
  uint64_t v69 = v113 & 0x1FFFFFFFFFFFFFFFLL;
  if ((v113 & 0x1FFFFFFFFFFFFFFFuLL) <= [a1 imageblockSampleLength]) {
    uint64_t v69 = [a1 imageblockSampleLength];
  }
  uint64_t v70 = objc_msgSend(a1, "tileWidth", v94);
  uint64_t v71 = [a1 tileHeight];
  uint64_t v72 = v71;
  if (v70)
  {
    if (v70 == 32)
    {
      if (v71 != 16 && v71 != 32)
      {
        uint64_t v95 = 32;
        uint64_t v105 = v71;
        MTLReportFailure();
      }
      uint64_t v73 = 32 * v72;
    }
    else if (v70 == 16)
    {
      if (v71 != 16)
      {
        uint64_t v95 = 16;
        uint64_t v105 = v71;
        MTLReportFailure();
      }
      uint64_t v73 = 16 * v72;
    }
    else
    {
      uint64_t v95 = v70;
      uint64_t v105 = v71;
      MTLReportFailure();
      uint64_t v73 = 0;
    }
  }
  else
  {
    if (v71)
    {
      uint64_t v95 = 0;
      uint64_t v105 = v71;
      MTLReportFailure();
    }
    uint64_t v73 = objc_msgSend(a2, "minTilePixels", v95, v105);
  }
  uint64_t v74 = objc_msgSend(a1, "threadgroupMemoryLength", v95, v105);
  if (![a2 isLargeMRTSupported]
    || [a1 imageblockSampleLength]
    || [a1 threadgroupMemoryLength])
  {
    unint64_t v75 = (v69 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v75 >= 0x41) {
      _MTLMessageContextPush_();
    }
    unint64_t v76 = v75 * v62;
    if (v76 >= 0x101) {
      _MTLMessageContextPush_();
    }
    unint64_t v77 = v74 + v76 * v73;
    if (v77 > [a2 maxThreadgroupMemoryLength])
    {
      unint64_t v96 = v77;
      uint64_t v106 = [a2 maxThreadgroupMemoryLength];
      _MTLMessageContextPush_();
    }
  }
  if (v62 == 4 && [a1 tileWidth] == 32 && objc_msgSend(a1, "tileHeight") == 32) {
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "tileWidth", v96, v106) && objc_msgSend(a1, "tileWidth") != 16)
  {
    BOOL v79 = 0;
  }
  else
  {
    uint64_t v78 = [a1 tileWidth];
    BOOL v79 = v78 == [a1 tileHeight];
  }
  if (v62 == 8 && !v79) {
    _MTLMessageContextPush_();
  }
  if ([a1 visibilityResultBuffer]
    && objc_msgSend((id)objc_msgSend(a1, "visibilityResultBuffer"), "device") != a2)
  {
    _MTLMessageContextPush_();
  }
  if (*(void *)([a1 _descriptorPrivate] + 128)
    && *(void *)([a1 _descriptorPrivate] + 128) != v63)
  {
    uint64_t v97 = *(void *)([a1 _descriptorPrivate] + 128);
    unint64_t v107 = v63;
    _MTLMessageContextPush_();
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    __int16 v81 = objc_msgSend((id)objc_msgSend(a1, "sampleBufferAttachments", v97, v107), "objectAtIndexedSubscript:", i);
    if ([v81 sampleBuffer])
    {
      if ([a2 supportsCounterSampling:0])
      {
        uint64_t v82 = objc_msgSend((id)objc_msgSend(v81, "sampleBuffer"), "sampleCount");
        if ([v81 startOfVertexSampleIndex] != -1
          && [v81 startOfVertexSampleIndex] >= (unint64_t)v82)
        {
          uint64_t v97 = [v81 startOfVertexSampleIndex];
          unint64_t v107 = v82;
          _MTLMessageContextPush_();
        }
        if (objc_msgSend(v81, "endOfVertexSampleIndex", v97) != -1
          && [v81 endOfVertexSampleIndex] >= (unint64_t)v82)
        {
          uint64_t v98 = [v81 endOfVertexSampleIndex];
          unint64_t v107 = v82;
          _MTLMessageContextPush_();
        }
        if (objc_msgSend(v81, "startOfFragmentSampleIndex", v98) != -1
          && [v81 startOfFragmentSampleIndex] >= (unint64_t)v82)
        {
          uint64_t v99 = [v81 startOfFragmentSampleIndex];
          unint64_t v107 = v82;
          _MTLMessageContextPush_();
        }
        if (objc_msgSend(v81, "endOfFragmentSampleIndex", v99) != -1
          && [v81 endOfFragmentSampleIndex] >= (unint64_t)v82)
        {
          uint64_t v97 = [v81 endOfFragmentSampleIndex];
          unint64_t v107 = v82;
          _MTLMessageContextPush_();
        }
      }
      else
      {
        if ([v81 startOfVertexSampleIndex] != -1) {
          _MTLMessageContextPush_();
        }
        if ([v81 endOfVertexSampleIndex] != -1) {
          _MTLMessageContextPush_();
        }
        if ([v81 startOfFragmentSampleIndex] != -1) {
          _MTLMessageContextPush_();
        }
        if ([v81 endOfFragmentSampleIndex] != -1) {
          _MTLMessageContextPush_();
        }
      }
    }
  }
  _MTLMessageContextEnd();
  return std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)v122);
}

void sub_23BDA0510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

unint64_t validateComputePassDescriptor(void *a1, void *a2)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v5 = objc_msgSend((id)objc_msgSend(a1, "sampleBufferAttachments", v8, v9), "objectAtIndexedSubscript:", i);
    unint64_t result = [v5 sampleBuffer];
    if (!result) {
      continue;
    }
    if ([a2 supportsCounterSampling:0])
    {
      uint64_t v7 = objc_msgSend((id)objc_msgSend(v5, "sampleBuffer"), "sampleCount");
      if ([v5 startOfEncoderSampleIndex] != -1
        && [v5 startOfEncoderSampleIndex] >= (unint64_t)v7)
      {
        uint64_t v8 = [v5 startOfEncoderSampleIndex];
        uint64_t v9 = v7;
        _MTLMessageContextPush_();
      }
      unint64_t result = objc_msgSend(v5, "endOfEncoderSampleIndex", v8, v9);
      if (result != -1)
      {
        unint64_t result = [v5 endOfEncoderSampleIndex];
        if (result >= v7)
        {
          uint64_t v8 = [v5 endOfEncoderSampleIndex];
          uint64_t v9 = v7;
LABEL_15:
          unint64_t result = _MTLMessageContextPush_();
          continue;
        }
      }
    }
    else
    {
      if ([v5 startOfEncoderSampleIndex] != -1) {
        _MTLMessageContextPush_();
      }
      unint64_t result = [v5 endOfEncoderSampleIndex];
      if (result != -1) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

double validateStoreLoadTransition(int a1, void *a2, MTLRenderPassAttachmentDescriptorPrivate *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  AttachmentDescriptorSimple::AttachmentDescriptorSimple(&v22, a3, a3->var5, a6);
  uint64_t v11 = std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__equal_range_multi<AttachmentDescriptorSimple>(a2, (NSRange *)&v22);
  if (v11 != v12)
  {
    __int16 v13 = v11;
    unsigned int v14 = v12;
    do
    {
      if (v13[4].location) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = a3->var4 == 1;
      }
      if (v15)
      {
        if (![a3->var0 label]) {
          [MEMORY[0x263EFF9D0] null];
        }
        MTLReportFailure();
      }
      __int16 v13 = (NSRange *)v13->location;
    }
    while (v13 != v14);
  }
  std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__emplace_multi<AttachmentDescriptorSimple const&>(a2, (uint64_t)&v22);
  for (uint64_t i = 0; i != 448; i += 56)
  {
    if (AttachmentDescriptorSimple::equal_t::operator()((uint64_t)&v21, (NSRange *)(a4 + i), (NSRange *)&v22)
      && *(void *)(a4 + i + 48) == 1
      && a3->var4 == 0)
    {
      if (![a3->var0 label]) {
        [MEMORY[0x263EFF9D0] null];
      }
      MTLReportFailure();
    }
  }
  uint64_t v18 = a5 + 56 * a1;
  _NSRange sliceRange = v22.sliceRange;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)&v22.texture;
  *(_NSRange *)(v18 + 16) = sliceRange;
  double result = *(double *)&v22.depthPlaneRange.location;
  *(_NSRange *)(v18 + 32) = v22.depthPlaneRange;
  *(void *)(v18 + 48) = v22.storeAction;
  return result;
}

void validateAttachmentOnDevice(void *a1, id *a2, unint64_t a3, uint64_t *a4, uint64_t a5, unsigned char *a6, unsigned char *a7, char a8, unsigned char *a9)
{
  if ((void *)[*a2 device] != a1) {
    _MTLMessageContextPush_();
  }
  [*a2 pixelFormat];
  MTLPixelFormatGetInfoForDevice();
  if ([*a2 storageMode] == 3)
  {
    if ([*a2 textureType] != 2
      && [*a2 textureType] != 4
      && [*a2 textureType] != 3
      && [*a2 textureType] != 8)
    {
      _MTLMessageContextPush_();
    }
    if (((unint64_t)a2[4] | 2) != 2) {
      _MTLMessageContextPush_();
    }
    unint64_t v13 = (unint64_t)a2[5];
    if (v13 > 4 || ((1 << v13) & 0x15) == 0) {
      _MTLMessageContextPush_();
    }
  }
  if (a3 <= 7) {
    unint64_t v32 = a3;
  }
  _MTLMessageContextPush_();
  if (!objc_msgSend(*a2, "textureType", 0, v32)) {
    _MTLMessageContextPush_();
  }
  if ([*a2 textureType] == 1) {
    _MTLMessageContextPush_();
  }
  if ([*a2 textureType] == 9) {
    _MTLMessageContextPush_();
  }
  uint64_t v14 = [*a2 numFaces];
  uint64_t v15 = [*a2 arrayLength];
  unint64_t v16 = v15 * v14;
  if ((unint64_t)a2[2] >= v15 * v14)
  {
    unint64_t v33 = a3;
    uint64_t v36 = v15 * v14;
    double v28 = a2[2];
    _MTLMessageContextPush_();
  }
  unint64_t v17 = (unint64_t)a2[1];
  if (v17 >= objc_msgSend(*a2, "mipmapLevelCount", v28, v33, v36))
  {
    uint64_t v25 = a2[1];
    unint64_t v34 = a3;
    uint64_t v37 = [*a2 mipmapLevelCount];
    uint64_t v29 = v25;
    _MTLMessageContextPush_();
  }
  objc_msgSend(*a2, "pixelFormat", v29, v34, v37);
  [*a2 width];
  [*a2 height];
  [*a2 depth];
  [*a2 sampleCount];
  MTLGetTextureLevelInfoForDeviceWithOptions();
  unint64_t v35 = 0;
  uint64_t v38 = a2[1];
  uint64_t v30 = (uint64_t)a2[3];
  _MTLMessageContextPush_();
  if (a5)
  {
    if (objc_msgSend(*a2, "textureType", v30, 0, v38) == 7)
    {
      if ((char *)a2[3] + a5)
      {
        unint64_t v35 = 0;
        uint64_t v38 = a2[1];
        uint64_t v30 = (uint64_t)a2[3] + a5;
        _MTLMessageContextPush_();
      }
      uint64_t v18 = a6;
    }
    else
    {
      if ((unint64_t)a2[2] + a5 > v16)
      {
        uint64_t v30 = (uint64_t)a2[2] + a5;
        unint64_t v35 = v16;
        _MTLMessageContextPush_();
      }
      uint64_t v18 = a7;
    }
    *uint64_t v18 = 1;
  }
  if (((unint64_t)a2[5] & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    if (a3 == 9)
    {
      if ([a1 supportsMSAAStencilResolve]) {
        goto LABEL_43;
      }
      unint64_t v19 = (unint64_t)a2[5];
      if (v19 <= 4)
      {
LABEL_41:
        uint64_t v20 = off_264E13BB8[v19];
LABEL_89:
        uint64_t v30 = [(__CFString *)v20 UTF8String];
        _MTLMessageContextPush_();
        goto LABEL_43;
      }
    }
    else
    {
      if (a3 != 8 || ([a1 supportsMSAADepthResolve] & 1) != 0)
      {
LABEL_43:
        if (!a2[14])
        {
          unint64_t v26 = (unint64_t)a2[5];
          if (v26 > 4) {
            double v27 = @"Unknown";
          }
          else {
            double v27 = off_264E13BB8[v26];
          }
          uint64_t v30 = [(__CFString *)v27 UTF8String];
          unint64_t v35 = a3;
          _MTLMessageContextPush_();
        }
        goto LABEL_44;
      }
      unint64_t v19 = (unint64_t)a2[5];
      if (v19 < 5) {
        goto LABEL_41;
      }
    }
    uint64_t v20 = @"Unknown";
    goto LABEL_89;
  }
LABEL_44:
  if (a3 == 8)
  {
    if (a2[18] && ([a1 supportsMSAADepthResolveFilter] & 1) == 0)
    {
      unint64_t v21 = (unint64_t)a2[18];
      if (v21 > 2) {
        AttachmentDescriptorSimple v22 = @"Unknown";
      }
      else {
        AttachmentDescriptorSimple v22 = off_264E13BE0[v21];
      }
      uint64_t v30 = [(__CFString *)v22 UTF8String];
      goto LABEL_92;
    }
  }
  else if (a3 == 9 && a2[13] == (id)1 && ([a1 supportsMSAAStencilResolveFilter] & 1) == 0)
  {
LABEL_92:
    _MTLMessageContextPush_();
  }
  _MTLGetAttachmentSize();
  uint64_t v23 = [*a2 sampleCount];
  if (!*a4 || v23 == *a4) {
    *a4 = v23;
  }
  else {
    *a9 = 0;
  }
  if ((objc_msgSend(a1, "supportsRenderToLinearTextures", v30) & 1) == 0 && objc_msgSend(*a2, "buffer"))
  {
    unint64_t v31 = a3;
    _MTLMessageContextPush_();
  }
  if (a2[14])
  {
    if ((char *)a2[5] - 2 >= (char *)3) {
      _MTLMessageContextPush_();
    }
    if (objc_msgSend(*a2, "textureType", v31) != 4 && objc_msgSend(*a2, "textureType") != 8) {
      _MTLMessageContextPush_();
    }
    if ((unint64_t)[*a2 sampleCount] <= 1)
    {
      [*a2 sampleCount];
      _MTLMessageContextPush_();
    }
    _MTLValidateResolveTextureWithContext(a1, (uint64_t *)a2[14], a3, 0, 0, (unint64_t)a2[16], (uint64_t)a2[17], (unint64_t)a2[15], *a2, a8);
  }
  if ((_BYTE)a2[6])
  {
    if (a3 == 8) {
      unint64_t v24 = @"the depth attachment";
    }
    else {
      unint64_t v24 = @"the stencil attachment";
    }
    if ((a3 & 0xFFFFFFFFFFFFFFFELL) != 8) {
      unint64_t v24 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"color attachment %lu", a3);
    }
    if ((objc_msgSend(a1, "areProgrammableSamplePositionsSupported", v31) & 1) == 0) {
      _MTLMessageContextPush_();
    }
    switch((unint64_t)a2[5])
    {
      case 1uLL:
      case 3uLL:
      case 4uLL:
        break;
      default:
        _MTLMessageContextPush_();
        break;
    }
  }
}

void AttachmentDescriptorSimple::AttachmentDescriptorSimple(AttachmentDescriptorSimple *this, const MTLRenderPassAttachmentDescriptorPrivate *a2, unint64_t a3, unint64_t a4)
{
  unint64_t var1 = a2->var1;
  NSUInteger var2 = a2->var2;
  id var0 = a2->var0;
  uint64_t v11 = [a2->var0 parentTexture];
  if (v11)
  {
    do
    {
      uint64_t v12 = (void *)v11;
      var1 += [var0 parentRelativeLevel];
      var2 += [var0 parentRelativeSlice];
      uint64_t v11 = [v12 parentTexture];
      id var0 = v12;
    }
    while (v11);
  }
  else
  {
    uint64_t v12 = var0;
  }
  this->storeActiouint64_t n = a3;
  this->uint64_t texture = v12;
  this->unint64_t level = var1;
  if (a4 <= 1) {
    NSUInteger v13 = 1;
  }
  else {
    NSUInteger v13 = a4;
  }
  this->sliceRange.locatiouint64_t n = var2;
  this->sliceRange.length = v13;
  this->depthPlaneRange.locatiouint64_t n = a2->var3;
  this->depthPlaneRange.length = v13;
}

NSRange *std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::find<AttachmentDescriptorSimple>(void *a1, NSRange *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  NSUInteger v4 = a2->length ^ a2->location;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    NSUInteger v7 = a2->length ^ a2->location;
    if (v4 >= *(void *)&v2) {
      NSUInteger v7 = v4 % *(void *)&v2;
    }
  }
  else
  {
    NSUInteger v7 = (*(void *)&v2 - 1) & v4;
  }
  uint64_t v8 = *(NSRange ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *v8;
  if (*v8)
  {
    uint64_t v10 = (uint64_t)(a1 + 4);
    do
    {
      NSUInteger length = v9->length;
      if (length == v4)
      {
        if (AttachmentDescriptorSimple::equal_t::operator()(v10, v9 + 1, a2)) {
          return v9;
        }
      }
      else
      {
        if (v6 > 1)
        {
          if (length >= *(void *)&v2) {
            length %= *(void *)&v2;
          }
        }
        else
        {
          length &= *(void *)&v2 - 1;
        }
        if (length != v7) {
          return 0;
        }
      }
      uint64_t v9 = (NSRange *)v9->location;
    }
    while (v9);
  }
  return v9;
}

BOOL AttachmentDescriptorSimple::equal_t::operator()(uint64_t a1, NSRange *a2, NSRange *a3)
{
  if (a2->location != a3->location || a2->length != a3->length) {
    return 0;
  }
  v9.locatiouint64_t n = a3[1].location;
  v9.NSUInteger length = a3[1].length;
  NSUInteger length = NSIntersectionRange(a2[16], v9).length;
  NSRange v6 = NSIntersectionRange(a2[2], a3[2]);
  if (length) {
    BOOL v7 = v6.length == 0;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7;
}

NSRange *std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::__emplace_unique_key_args<AttachmentDescriptorSimple,std::piecewise_construct_t const&,std::tuple<AttachmentDescriptorSimple const&>,std::tuple<>>(uint64_t a1, NSRange *a2, uint64_t a3, NSRange **a4)
{
  NSUInteger v7 = a2->length ^ a2->location;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      NSUInteger v4 = a2->length ^ a2->location;
      if (v7 >= v8) {
        NSUInteger v4 = v7 % v8;
      }
    }
    else
    {
      NSUInteger v4 = (v8 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      NSUInteger v13 = (NSRange *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t length = v13->length;
          if (length == v7)
          {
            if (AttachmentDescriptorSimple::equal_t::operator()(a1 + 32, v13 + 1, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (length >= v8) {
                length %= v8;
              }
            }
            else
            {
              length &= v8 - 1;
            }
            if (length != v4) {
              break;
            }
          }
          NSUInteger v13 = (NSRange *)v13->location;
        }
        while (v13);
      }
    }
  }
  NSUInteger v13 = (NSRange *)operator new(0x50uLL);
  v13->locatiouint64_t n = 0;
  v13->unint64_t length = v7;
  NSRange v16 = (*a4)[1];
  NSRange v15 = (*a4)[2];
  NSRange v17 = **a4;
  v13[4].locatiouint64_t n = (*a4)[3].location;
  v13[2] = v16;
  v13[3] = v15;
  v13[1] = v17;
  LODWORD(v13[4].length) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v23);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        NSUInteger v4 = v7 % v8;
      }
      else {
        NSUInteger v4 = v7;
      }
    }
    else
    {
      NSUInteger v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(NSRange ***)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    v13->locatiouint64_t n = (NSUInteger)*v25;
LABEL_38:
    void *v25 = v13;
    goto LABEL_39;
  }
  v13->locatiouint64_t n = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (v13->location)
  {
    unint64_t v26 = *(void *)(v13->location + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8) {
        v26 %= v8;
      }
    }
    else
    {
      v26 &= v8 - 1;
    }
    uint64_t v25 = (NSRange **)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_23BDA42E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

NSRange *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__equal_range_multi<AttachmentDescriptorSimple>(void *a1, NSRange *a2)
{
  NSUInteger v4 = std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::find<AttachmentDescriptorSimple>(a1, a2);
  uint8x8_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = (uint64_t)(a1 + 4);
    NSUInteger v7 = v4;
    do
      NSUInteger v7 = (NSRange *)v7->location;
    while (v7 && AttachmentDescriptorSimple::equal_t::operator()(v6, v7 + 1, a2));
  }
  return v5;
}

void *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__emplace_multi<AttachmentDescriptorSimple const&>(void *a1, uint64_t a2)
{
  NSUInteger v4 = operator new(0x48uLL);
  long long v5 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v4 + 2) = v5;
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 32);
  v4[8] = *(void *)(a2 + 48);
  unint64_t v6 = v4[3] ^ v4[2];
  void *v4 = 0;
  v4[1] = v6;
  inserted = std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__node_insert_multi_prepare((uint64_t)a1, v6, (NSRange *)v4 + 1);
  std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_23BDA43E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

NSRange *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, NSRange *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__rehash<false>(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  NSRange v17 = *(NSRange **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    locatiouint64_t n = (NSRange *)v17->location;
    if (v17->location)
    {
      int v19 = 0;
      do
      {
        NSUInteger length = location->length;
        if (v15 > 1)
        {
          NSUInteger v21 = location->length;
          if (length >= v8) {
            NSUInteger v21 = length % v8;
          }
        }
        else
        {
          NSUInteger v21 = length & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        BOOL v22 = length == a2 && AttachmentDescriptorSimple::equal_t::operator()(v6, location + 1, a3);
        if (v19 & !v22) {
          break;
        }
        v19 |= v22;
        NSRange v17 = (NSRange *)v17->location;
        locatiouint64_t n = (NSRange *)v17->location;
      }
      while (v17->location);
    }
  }
  return v17;
}

void *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    NSUInteger prime = 2;
  }
  else
  {
    NSUInteger prime = __n;
    if ((__n & (__n - 1)) != 0) {
      NSUInteger prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      NSUInteger prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__do_rehash<false>(uint64_t a1, NSUInteger a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(NSRange **)(a1 + 16);
    if (v7)
    {
      NSUInteger length = v7->length;
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (length >= a2) {
          length %= a2;
        }
      }
      else
      {
        length &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * length) = a1 + 16;
      locatiouint64_t n = (NSRange *)v7->location;
      if (v7->location)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          NSUInteger v13 = location->length;
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == length)
          {
            uint64_t v7 = location;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = (NSRange *)location->location;
            if (location->location)
            {
              unint64_t v15 = location;
              while (1)
              {
                BOOL v16 = AttachmentDescriptorSimple::equal_t::operator()(a1 + 32, location + 1, v14 + 1);
                NSRange v17 = (NSRange *)v15->location;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = (NSRange *)v17->location;
                unint64_t v15 = (NSRange *)v15->location;
                if (!v17->location) {
                  goto LABEL_32;
                }
              }
              uint8x8_t v14 = (NSRange *)v15->location;
              NSRange v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              NSRange v17 = location;
            }
            v7->locatiouint64_t n = (NSUInteger)v14;
            v17->locatiouint64_t n = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = location;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = location;
            NSUInteger length = v13;
          }
          locatiouint64_t n = (NSRange *)v7->location;
        }
        while (v7->location);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

const char *initLifetimeOptions(void)::$_0::__invoke()
{
  double result = getenv("MTL_DEBUG_LAYER_VALIDATE_UNRETAINED_RESOURCES");
  if (result)
  {
    double result = (const char *)atoi(result);
    checkLifetimeOfExternallyReferencedObjects = result & 1;
    checkLifetimeOfInternallyReferencedObjects = (result & 2) != 0;
    checkLifetimeBeforeCommit = (result & 4) != 0;
  }
  return result;
}

void *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::clear(void *result)
{
  if (result[3])
  {
    char v1 = result;
    double result = (void *)result[2];
    if (result)
    {
      do
      {
        int8x8_t v2 = (void *)*result;
        operator delete(result);
        double result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__hash_table<objc_object  {objcproto25MTLDebugResourcePurgeable}*,std::hash<objc_object  {objcproto25MTLDebugResourcePurgeable}>,std::equal_to<objc_object  {objcproto25MTLDebugResourcePurgeable}>,std::allocator<objc_object  {objcproto25MTLDebugResourcePurgeable}>>::__emplace_unique_key_args<objc_object  {objcproto25MTLDebugResourcePurgeable},objc_object  {objcproto25MTLDebugResourcePurgeable}>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  NSUInteger v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *NSUInteger v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    NSUInteger v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BDA4C08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::__emplace_unique_key_args<MTLToolsObject *,MTLToolsObject * const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  NSUInteger v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *NSUInteger v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    NSUInteger v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BDA4E5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::swap(uint64_t a1, uint64_t a2)
{
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  unint64_t v5 = *(void **)a2;
  *(void *)a2 = 0;
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  unint64_t v7 = *(void **)a2;
  *(void *)a2 = v4;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v12;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v11;
  int v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(void *)(a1 + 24))
  {
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v15 = *(void *)(*(void *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14) {
        v15 %= v14;
      }
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    unint64_t v16 = *(void *)(a2 + 8);
    unint64_t v17 = *(void *)(*(void *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16) {
        v17 %= v16;
      }
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(void *)(*(void *)a2 + 8 * v17) = a2 + 16;
  }
}

uint64_t *std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::__erase_unique<MTLToolsObject *>(void *a1, void *a2)
{
  double result = std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::find<MTLToolsObject *>(a1, a2);
  if (result)
  {
    std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::find<MTLToolsObject *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  double result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  CC_SHA256_CTX __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint8x8_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint8x8_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void emitComputePipelineUsage(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint8x8_t v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    uint8x8_t v6 = (_DWORD *)MEMORY[0x263F12D18];
    while (1)
    {
      int v7 = *((_DWORD *)v5 + 6);
      if (v7)
      {
        if (!*v6) {
          goto LABEL_7;
        }
        if (*v6 == 1) {
          break;
        }
      }
LABEL_9:
      uint8x8_t v5 = (uint64_t *)*v5;
      if (!v5) {
        goto LABEL_10;
      }
    }
    printf("\n\nComputePipelineUsage, pipelineID=%u, kernelID=%u, usageCount=%u", *((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), v7);
LABEL_7:
    unint64_t v8 = [a1 telemetryLog];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((_DWORD *)v5 + 4);
      int v10 = *((_DWORD *)v5 + 5);
      int v11 = *((_DWORD *)v5 + 6);
      *(_DWORD *)buf = 67109632;
      int v30 = v9;
      __int16 v31 = 1024;
      int v32 = v10;
      __int16 v33 = 1024;
      LODWORD(v34) = v11;
      _os_log_impl(&dword_23BD25000, v8, OS_LOG_TYPE_DEFAULT, "ComputePipelineUsage, pipelineID=%u, kernelID=%u, usageCount=%u", buf, 0x14u);
    }
    goto LABEL_9;
  }
LABEL_10:
  context = (void *)MEMORY[0x23ECD5710]();
  uint64_t v12 = *(uint64_t **)(a3 + 16);
  if (v12)
  {
    while (1)
    {
      int v13 = (void *)[MEMORY[0x263F089D8] string];
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      unint64_t v14 = (void *)v12[4];
      uint64_t v15 = [v14 countByEnumeratingWithState:&v25 objects:v35 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v26;
        do
        {
          for (uint64_t i = 0; i != v16; ++i)
          {
            if (*(void *)v26 != v17) {
              objc_enumerationMutation(v14);
            }
            [v13 appendFormat:@"%s=%u, ", objc_msgSend(*(id *)(*((void *)&v25 + 1) + 8 * i), "UTF8String"), objc_msgSend((id)objc_msgSend((id)v12[4], "objectForKey:", *(void *)(*((void *)&v25 + 1) + 8 * i)), "unsignedIntegerValue")];
          }
          uint64_t v16 = [v14 countByEnumeratingWithState:&v25 objects:v35 count:16];
        }
        while (v16);
      }
      if ((unint64_t)[v13 length] >= 2) {
        objc_msgSend(v13, "deleteCharactersInRange:", objc_msgSend(v13, "length") - 2, 2);
      }
      int v19 = *((_DWORD *)v12 + 6);
      if (!v19) {
        goto LABEL_26;
      }
      if (!*MEMORY[0x263F12D18]) {
        goto LABEL_24;
      }
      if (*MEMORY[0x263F12D18] == 1) {
        break;
      }
LABEL_26:
      uint64_t v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_27;
      }
    }
    printf("\n\nKernelUsage, kernelID=%u, usageCount=%u%s", *((_DWORD *)v12 + 4), v19, (const char *)[v13 UTF8String]);
LABEL_24:
    uint64_t v20 = [a1 telemetryLog];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *((_DWORD *)v12 + 4);
      int v22 = *((_DWORD *)v12 + 6);
      uint64_t v23 = [v13 UTF8String];
      *(_DWORD *)buf = 67109634;
      int v30 = v21;
      __int16 v31 = 1024;
      int v32 = v22;
      __int16 v33 = 2080;
      uint64_t v34 = v23;
      _os_log_impl(&dword_23BD25000, v20, OS_LOG_TYPE_DEFAULT, "KernelUsage, kernelID=%u, usageCount=%u%s", buf, 0x18u);
    }
    goto LABEL_26;
  }
LABEL_27:
}

void emitComputePipelineStats(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint8x8_t v6 = (void *)[MEMORY[0x263F089D8] stringWithString:@"ComputeFunctionStats, "];
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v8 = i + 2;
    if (*((char *)i + 39) < 0) {
      unint64_t v8 = (void *)*v8;
    }
    [v6 appendFormat:@"min%s=%u, max%s=%u, avg%s=%f, total%s=%llu, count%s=%u, ", v8, *((unsigned int *)i + 10), v8, *((unsigned int *)i + 11), v8, (float)((float)(unint64_t)i[6] / (float)*((unsigned int *)i + 14)), v8, i[6], v8, *((unsigned int *)i + 14)];
  }
  objc_msgSend(v6, "deleteCharactersInRange:", objc_msgSend(v6, "length") - 2, 2);
  int v9 = (_DWORD *)MEMORY[0x263F12D18];
  if (*MEMORY[0x263F12D18])
  {
    if (*MEMORY[0x263F12D18] != 1) {
      goto LABEL_10;
    }
    printf("\n\n%s", (const char *)[v6 UTF8String]);
  }
  int v10 = [a1 telemetryLog];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)unint64_t v18 = [v6 UTF8String];
    _os_log_impl(&dword_23BD25000, v10, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
LABEL_10:
  if (!*a3) {
    return;
  }
  if (*v9)
  {
    if (*v9 != 1) {
      return;
    }
    printf("\n\nComputePipeline, total=%u, kernelRegisterSpill=%u, threadgroupBarrier=%u, deviceMemoryAtomics=%u, threadgroupMemoryAtomics=%u", *a3, a3[1], a3[2], a3[3], a3[4]);
  }
  int v11 = [a1 telemetryLog];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *a3;
    int v13 = a3[1];
    int v14 = a3[2];
    int v15 = a3[3];
    int v16 = a3[4];
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)unint64_t v18 = v12;
    *(_WORD *)&v18[4] = 1024;
    *(_DWORD *)&v18[6] = v13;
    __int16 v19 = 1024;
    int v20 = v14;
    __int16 v21 = 1024;
    int v22 = v15;
    __int16 v23 = 1024;
    int v24 = v16;
    _os_log_impl(&dword_23BD25000, v11, OS_LOG_TYPE_DEFAULT, "ComputePipeline, total=%u, kernelRegisterSpill=%u, threadgroupBarrier=%u, deviceMemoryAtomics=%u, threadgroupMemoryAtomics=%u", buf, 0x20u);
  }
}

void sub_23BDAA36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v11 = operator new(0x20uLL);
  *int v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(void *)((char *)v11 + 20) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *int v11 = *v20;
LABEL_38:
    *int v20 = v11;
    goto LABEL_39;
  }
  *int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_23BDAA5A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v11 = operator new(0x28uLL);
  *int v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  unsigned char v11[3] = 0;
  v11[4] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *int v11 = *v20;
LABEL_38:
    *int v20 = v11;
    goto LABEL_39;
  }
  *int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_23BDAA7D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  __int16 v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *__int16 v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_23BDAAA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_23BDAAB10(_Unwind_Exception *a1)
{
  *char v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t validateArg(MTLArgumentType a1, unint64_t a2, MTLDebugFunctionArgument *a3)
{
  uint64_t result = MTLReportFailureTypeEnabled();
  if (result && a3->isValid && !a3->hasBeenUsed)
  {
    argumentTypeToString(a1);
    return MTLReportFailure();
  }
  return result;
}

void sub_23BDACAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t validateBuiltinArguments(MTLDebugComputePipelineState *a1, MTLSize *a2, MTLSize *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  obuint64_t j = (id)[(MTLComputePipelineReflection *)[(MTLDebugComputePipelineState *)a1 reflection] builtInArguments];
  uint64_t result = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v25;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v25 != v5) {
          objc_enumerationMutation(obj);
        }
        std::string::size_type v7 = *(void **)(*((void *)&v24 + 1) + 8 * v6);
        long long v28 = xmmword_23BE4ACB0;
        NSUInteger depth = 1;
        switch(objc_msgSend(v7, "builtInType", v15, v16, v17, v18, v19))
        {
          case 5:
            NSUInteger v8 = a3->height * a2->height;
            maxThreadPositionInGrid = a1->_maxThreadPositionInGrid;
            *(void *)&long long v28 = a3->width * a2->width;
            *((void *)&v28 + 1) = v8;
            NSUInteger depth = a3->depth * a2->depth;
            int v10 = @"thread_position_in_grid";
            goto LABEL_16;
          case 6:
            NSUInteger v11 = a3->height * a2->height;
            maxThreadPositionInGrid = a1->_maxThreadsPerGrid;
            *(void *)&long long v28 = a3->width * a2->width;
            *((void *)&v28 + 1) = v11;
            NSUInteger depth = a3->depth * a2->depth;
            int v10 = @"threads_per_grid";
            goto LABEL_16;
          case 7:
            maxThreadPositionInGrid = a1->_maxThreadPositionInThreadgroup;
            long long v28 = *(_OWORD *)&a2->width;
            NSUInteger depth = a2->depth;
            int v10 = @"thread_position_in_threadgroup";
            goto LABEL_16;
          case 8:
            maxThreadPositionInGrid = a1->_maxThreadIndexInThreadgroup;
            long long v28 = a2->height * a2->width * a3->depth;
            NSUInteger depth = 0;
            int v10 = @"thread_index_in_threadgroup";
            goto LABEL_16;
          case 9:
            maxThreadPositionInGrid = a1->_maxThreadsPerThreadgroup;
            long long v28 = *(_OWORD *)&a2->width;
            NSUInteger depth = a2->depth;
            int v10 = @"threads_per_threadgroup";
            goto LABEL_16;
          case 10:
            maxThreadPositionInGrid = a1->_maxThreadgroupPositionInGrid;
            long long v28 = *(_OWORD *)&a3->width;
            NSUInteger depth = a3->depth;
            int v10 = @"threadgroup_position_in_grid";
            goto LABEL_16;
          case 11:
            maxThreadPositionInGrid = a1->_maxThreadgroupsPerGrid;
            long long v28 = *(_OWORD *)&a3->width;
            NSUInteger depth = a3->depth;
            int v10 = @"threadgroups_per_grid";
LABEL_16:
            for (uint64_t i = 0; i != 3; ++i)
            {
              unint64_t v13 = *((void *)&v28 + i);
              unint64_t v14 = maxThreadPositionInGrid[i];
              if (v13 > v14)
              {
                uint64_t v18 = [v7 name];
                uint64_t v19 = v10;
                unint64_t v16 = v13;
                unint64_t v17 = v14;
                uint64_t v15 = i;
                MTLReportFailure();
              }
            }
            break;
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
            break;
          default:
            uint64_t v15 = [v7 name];
            MTLReportFailure();
            break;
        }
        ++v6;
      }
      while (v6 != v4);
      uint64_t result = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

unint64_t validateComputeFunctionArguments(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  int v14 = [a1 requiresRaytracingEmulation];
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  obuint64_t j = a3;
  uint64_t v107 = [a3 countByEnumeratingWithState:&v127 objects:v131 count:16];
  __int16 v103 = a1;
  if (v107)
  {
    *(_DWORD *)&v116[8] = 0;
    *(void *)unsigned int v116 = a11;
    uint64_t v15 = 5;
    if (v14) {
      uint64_t v15 = 6;
    }
    uint64_t v108 = a7;
    uint64_t v109 = v15;
    unint64_t v105 = ~(unint64_t)a7;
    uint64_t v106 = *(void *)v128;
    char v110 = v14;
    do
    {
      uint64_t v16 = 0;
      do
      {
        unint64_t v17 = a7;
        if (*(void *)v128 != v106) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void **)(*((void *)&v127 + 1) + 8 * v16);
        uint64_t v115 = v16;
        if (objc_msgSend(v18, "isActive", v66, v75, v84, v93, v94, v95, v96, v97))
        {
          MTLArgumentType v19 = [v18 type];
          uint64_t v20 = [v18 name];
          uint64_t v21 = [v18 arrayLength];
          uint64_t v22 = [v18 index];
          if (v21)
          {
            double v102 = (char *)v20;
            BOOL v23 = v19 > MTLArgumentTypeIntersectionFunctionTable || ((1 << v19) & 0xF03000F) == 0;
            if (!v23)
            {
              uint64_t v24 = v22;
              uint64_t v25 = v21;
              long long v26 = 0;
              uint64_t v27 = a6;
              uint64_t v28 = a8;
              uint64_t v30 = a4;
              uint64_t v29 = a5;
              uint64_t v125 = 88 * v22;
              unint64_t v126 = v18;
              a7 = v17;
              uint64_t v31 = 88 * v22;
              uint64_t v121 = v22;
              uint64_t v122 = v25;
              while (2)
              {
                uint64_t v32 = (uint64_t)&v26[v24];
                switch(v19)
                {
                  case MTLArgumentTypeBuffer:
                    uint64_t v33 = (unsigned char *)(v30 + v31);
                    if (a11) {
                      goto LABEL_17;
                    }
                    if (!*v33)
                    {
                      unint64_t v94 = v102;
                      uint64_t v95 = (uint64_t)v26;
                      unint64_t v84 = "buffer";
                      uint64_t v93 = &v26[v24];
                      uint64_t v66 = @"Compute";
                      uint64_t v75 = a2;
                      MTLReportFailure();
                      uint64_t v25 = v122;
                      uint64_t v33 = (unsigned char *)(v30 + v31);
LABEL_17:
                      if (!*v33) {
                        goto LABEL_113;
                      }
                    }
                    int v123 = v33;
                    uint64_t v52 = v30 + v31;
                    uint64_t v53 = *(void *)(v30 + v31 + 8);
                    if (v53 == 4) {
                      char v54 = v110;
                    }
                    else {
                      char v54 = 0;
                    }
                    if (v53 && (v54 & 1) == 0)
                    {
                      unint64_t v94 = v102;
                      uint64_t v95 = (uint64_t)v26;
                      unint64_t v84 = "buffer";
                      uint64_t v93 = (const char *)v32;
                      uint64_t v66 = @"Compute";
                      uint64_t v75 = a2;
                      MTLReportFailure();
                    }
                    uint64_t v120 = (const char *)v32;
                    unint64_t v55 = *(void *)(v52 + 40);
                    unint64_t v56 = objc_msgSend(v126, "bufferAlignment", v66, v75, v84);
                    if (v56 <= 1) {
                      unint64_t v57 = 1;
                    }
                    else {
                      unint64_t v57 = v56;
                    }
                    if (v55 % v57)
                    {
                      uint64_t v95 = [v126 bufferAlignment];
                      unint64_t v96 = *(__CFString **)(v52 + 40);
                      uint64_t v93 = "buffer";
                      unint64_t v94 = v120;
                      uint64_t v82 = a2;
                      uint64_t v91 = v102;
                      uint64_t v73 = @"Compute";
                      MTLReportFailure();
                    }
                    unint64_t v58 = *(void *)(v30 + v125 + 32) - *(void *)(v52 + 40);
                    if (v58 < objc_msgSend(v126, "bufferDataSize", v73, v82, v91)
                      && [v126 bufferDataSize] != -1)
                    {
                      unint64_t v63 = *(__CFString **)(v52 + 40);
                      unint64_t v64 = *(const char **)(v30 + v125 + 32);
                      [v126 bufferDataSize];
                      unint64_t v96 = v63;
                      uint64_t v97 = v64;
                      unint64_t v94 = "buffer";
                      uint64_t v95 = (uint64_t)v120;
                      unint64_t v92 = v102;
                      uint64_t v93 = v26;
                      uint64_t v74 = @"Compute";
                      uint64_t v83 = a2;
                      MTLReportFailure();
                    }
                    uint64_t v31 = v125;
                    if (objc_msgSend(v126, "access", v74, v83, v92) && !*(void *)(v30 + v125 + 16))
                    {
                      uint64_t v75 = a2;
                      unint64_t v84 = v120;
                      uint64_t v66 = @"Compute";
                      MTLReportFailure();
                    }
                    unint64_t v59 = *(void **)(v30 + v125 + 16);
                    a7 = v108;
                    if (!v59) {
                      goto LABEL_111;
                    }
                    if ([v126 access] != 2 && (objc_msgSend(v59, "protectionOptions") & v105) != 0)
                    {
                      uint64_t v93 = (const char *)[v59 protectionOptions];
                      unint64_t v94 = v108;
                      uint64_t v75 = a2;
                      unint64_t v84 = v120;
                      uint64_t v66 = @"Compute";
                      MTLReportFailure();
                    }
                    if (!objc_msgSend(v126, "access", v66, v75, v84))
                    {
LABEL_111:
                      uint64_t v24 = v121;
                      uint64_t v25 = v122;
                      goto LABEL_112;
                    }
                    uint64_t v60 = *(void **)(v30 + v125 + 16);
                    if (((unint64_t)v108 & ~[v60 protectionOptions]) != 0)
                    {
                      uint64_t v93 = (const char *)[v60 protectionOptions];
                      unint64_t v94 = v108;
                      uint64_t v75 = a2;
                      unint64_t v84 = v120;
                      uint64_t v66 = @"Compute";
                      MTLReportFailure();
                    }
                    goto LABEL_110;
                  case MTLArgumentTypeThreadgroupMemory:
                    if (!*(unsigned char *)(v28 + v31))
                    {
                      unint64_t v94 = v102;
                      uint64_t v95 = (uint64_t)v26;
                      unint64_t v84 = "threadgroupMemory";
                      uint64_t v93 = &v26[v24];
                      uint64_t v66 = @"Compute";
                      uint64_t v75 = a2;
                      MTLReportFailure();
                    }
                    uint64_t v42 = v28 + v31;
                    if (*(void *)(v28 + v31 + 8) != 3)
                    {
                      unint64_t v94 = v102;
                      uint64_t v95 = (uint64_t)v26;
                      unint64_t v84 = "threadgroupMemory";
                      uint64_t v93 = (const char *)v32;
                      uint64_t v66 = @"Compute";
                      uint64_t v75 = a2;
                      MTLReportFailure();
                    }
                    unint64_t v43 = *(void *)(v42 + 56);
                    if (v43 < objc_msgSend(v126, "threadgroupMemoryDataSize", v66, v75, v84))
                    {
                      unint64_t v96 = (__CFString *)v102;
                      uint64_t v97 = v26;
                      unint64_t v94 = "threadgroupMemory";
                      uint64_t v95 = v32;
                      unint64_t v84 = *(const char **)(v42 + 56);
                      uint64_t v93 = (const char *)[v126 threadgroupMemoryDataSize];
                      uint64_t v66 = @"Compute";
                      uint64_t v75 = a2;
                      MTLReportFailure();
                    }
                    uint64_t v33 = (unsigned char *)(a8 + 88 * v32);
                    *(void *)&v116[4] += *(void *)(v42 + 56);
                    uint64_t v24 = v121;
                    uint64_t v25 = v122;
                    uint64_t v31 = v125;
                    goto LABEL_113;
                  case MTLArgumentTypeTexture:
                    unint64_t v118 = &v26[v24];
                    uint64_t v33 = (unsigned char *)(a5 + 88 * v32);
                    if (*(void *)(v29 + v31 + 16))
                    {
                      uint64_t v117 = v29 + v31;
                      int v123 = (unsigned char *)(a5 + 88 * v32);
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0) {
                        MTLReportFailure();
                      }
                      uint64_t v34 = v29 + v31;
                      uint64_t v35 = *(_DWORD **)(v117 + 16);
                      if (!*(unsigned char *)v117)
                      {
                        unint64_t v94 = v102;
                        uint64_t v95 = (uint64_t)v26;
                        unint64_t v84 = "texture";
                        uint64_t v93 = &v26[v24];
                        uint64_t v66 = @"Compute";
                        uint64_t v75 = a2;
                        MTLReportFailure();
                        uint64_t v34 = v29 + v31;
                      }
                      if (*(void *)(v29 + v125 + 8) != 1)
                      {
                        unint64_t v94 = v102;
                        uint64_t v95 = (uint64_t)v26;
                        unint64_t v84 = "texture";
                        uint64_t v93 = &v26[v24];
                        uint64_t v66 = @"Compute";
                        uint64_t v75 = a2;
                        MTLReportFailure();
                        uint64_t v34 = v29 + v31;
                      }
                      uint64_t v36 = objc_msgSend(*(id *)(v34 + 16), "textureType", v66, v75, v84);
                      if (v36 != [v126 textureType])
                      {
                        [*(id *)(v117 + 16) textureType];
                        uint64_t v61 = MTLTextureTypeString();
                        [v126 textureType];
                        unint64_t v96 = (__CFString *)v102;
                        uint64_t v97 = v26;
                        unint64_t v94 = v118;
                        uint64_t v95 = MTLTextureTypeString();
                        uint64_t v85 = v61;
                        uint64_t v93 = "texture";
                        unint64_t v67 = @"Compute";
                        uint64_t v76 = a2;
                        MTLReportFailure();
                      }
                      int v37 = objc_msgSend(v35, "usage", v67, v76, v85);
                      if ([v126 access])
                      {
                        int v38 = (*(void *)&v37 & 0x10000) != 0 ? 16 : 2;
                        if ((v35[20] & v38) == 0)
                        {
                          [*(id *)(v117 + 16) pixelFormat];
                          uint64_t Name = MTLPixelFormatGetName();
                          uint64_t v93 = v118;
                          int v68 = @"Compute";
                          uint64_t v77 = a2;
                          MTLReportFailure();
                        }
                      }
                      unint64_t v39 = v126;
                      if (objc_msgSend(v126, "access", v68, v77, Name) && objc_msgSend(v35, "isSparse"))
                      {
                        uint64_t v78 = a2;
                        uint64_t v87 = v118;
                        uint64_t v69 = @"Compute";
                        MTLReportFailure();
                      }
                      objc_msgSend(v126, "textureDataType", v69, v78, v87);
                      uint64_t v31 = v125;
                      if ((_MTLCompatibleTextureDataTypeAndPixelFormatInfo() & 1) == 0)
                      {
                        [*(id *)(v117 + 16) pixelFormat];
                        uint64_t v100 = MTLPixelFormatGetName();
                        uint64_t v62 = [*(id *)(v117 + 16) label];
                        if (!v62) {
                          uint64_t v62 = [MEMORY[0x263EFF9D0] null];
                        }
                        uint64_t v99 = (const char *)v62;
                        [v126 textureDataType];
                        uint64_t v98 = MTLDataTypeString();
                        [*(id *)(v117 + 16) pixelFormat];
                        MTLPixelFormatGetName();
                        [*(id *)(v117 + 16) pixelFormat];
                        MTLPixelFormatCompatibilityString();
                        unint64_t v39 = v126;
                        uint64_t v97 = "texture";
                        uint64_t v95 = (uint64_t)v118;
                        unint64_t v96 = (__CFString *)v98;
                        uint64_t v93 = "texture";
                        unint64_t v94 = v99;
                        uint64_t v79 = a2;
                        uint64_t v88 = v100;
                        uint64_t v70 = @"Compute";
                        MTLReportFailure();
                      }
                      if ((unint64_t)objc_msgSend(v39, "access", v70, v79, v88) <= 1
                        && ([v35 requireUsage:1] & 1) == 0)
                      {
                        unint64_t v94 = (const char *)[v35 usage];
                        uint64_t v95 = 1;
                        __int16 v89 = v102;
                        uint64_t v93 = v118;
                        uint64_t v71 = @"Compute";
                        uint64_t v80 = a2;
                        MTLReportFailure();
                      }
                      if ((unint64_t)(objc_msgSend(v39, "access", v71, v80, v89) - 1) <= 1
                        && ([v35 requireUsage:2] & 1) == 0)
                      {
                        unint64_t v94 = (const char *)[v35 usage];
                        uint64_t v95 = 2;
                        uint64_t v90 = v102;
                        uint64_t v93 = v118;
                        uint64_t v72 = @"Compute";
                        uint64_t v81 = a2;
                        MTLReportFailure();
                      }
                      if (objc_msgSend(v39, "access", v72, v81, v90) == 1)
                      {
                        [v35 pixelFormat];
                        if ((MTLReadWriteTextureIsSupported() & 1) == 0)
                        {
                          unint64_t v84 = v102;
                          uint64_t v93 = v118;
                          uint64_t v66 = @"Compute";
                          uint64_t v75 = a2;
                          MTLReportFailure();
                        }
                      }
                      unint64_t v40 = *(void **)(v117 + 16);
                      if (!v40) {
                        goto LABEL_110;
                      }
                      if ([v39 access] != 2 && (objc_msgSend(v40, "protectionOptions") & v105) != 0)
                      {
                        uint64_t v93 = (const char *)[v40 protectionOptions];
                        unint64_t v94 = a7;
                        uint64_t v75 = a2;
                        unint64_t v84 = v118;
                        uint64_t v66 = @"Compute";
                        MTLReportFailure();
                      }
                      if (objc_msgSend(v39, "access", v66, v75, v84))
                      {
                        unint64_t v41 = *(void **)(v117 + 16);
                        uint64_t v24 = v121;
                        if (((unint64_t)a7 & ~[v41 protectionOptions]) != 0)
                        {
                          uint64_t v93 = (const char *)[v41 protectionOptions];
                          unint64_t v94 = a7;
                          uint64_t v75 = a2;
                          unint64_t v84 = v118;
                          uint64_t v66 = @"Compute";
                          MTLReportFailure();
                        }
                        uint64_t v25 = v122;
                      }
                      else
                      {
LABEL_110:
                        uint64_t v24 = v121;
                        uint64_t v25 = v122;
                      }
LABEL_112:
                      uint64_t v33 = v123;
                    }
                    goto LABEL_113;
                  case MTLArgumentTypeSampler:
                    if (!*(unsigned char *)(v27 + v31))
                    {
                      unint64_t v94 = v102;
                      uint64_t v95 = (uint64_t)v26;
                      unint64_t v84 = "sampler";
                      uint64_t v93 = &v26[v24];
                      uint64_t v66 = @"Compute";
                      uint64_t v75 = a2;
                      MTLReportFailure();
                      uint64_t v25 = v122;
                    }
                    uint64_t v33 = (unsigned char *)(a6 + 88 * v32);
                    if (*(void *)(v27 + v31 + 8) == 2) {
                      goto LABEL_113;
                    }
                    unint64_t v94 = v102;
                    uint64_t v95 = (uint64_t)v26;
                    unint64_t v84 = "sampler";
                    uint64_t v93 = &v26[v24];
                    uint64_t v66 = @"Compute";
                    uint64_t v75 = a2;
                    MTLReportFailure();
                    uint64_t v33 = (unsigned char *)(a6 + 88 * v32);
                    goto LABEL_84;
                  default:
                    if (v19 - 16 < 2) {
                      goto LABEL_114;
                    }
                    uint64_t v33 = (unsigned char *)(a4 + 88 * v32);
                    if (a11) {
                      goto LABEL_21;
                    }
                    if (*(unsigned char *)(v30 + v31)) {
                      goto LABEL_71;
                    }
                    unint64_t v94 = v102;
                    uint64_t v95 = (uint64_t)v26;
                    unint64_t v84 = argumentTypeToString(v19);
                    uint64_t v93 = &v26[v24];
                    uint64_t v66 = @"Compute";
                    uint64_t v75 = a2;
                    MTLReportFailure();
                    uint64_t v25 = v122;
                    uint64_t v33 = (unsigned char *)(a4 + 88 * v32);
LABEL_21:
                    if (*(unsigned char *)(v30 + v31))
                    {
LABEL_71:
                      unint64_t v119 = &v26[v24];
                      unint64_t v44 = v19 - 25;
                      uint64_t v45 = 5;
                      if (v19 == MTLArgumentTypeIntersectionFunctionTable) {
                        uint64_t v45 = 6;
                      }
                      BOOL v46 = v44 >= 2;
                      BOOL v47 = v44 >= 2 && v19 != MTLArgumentTypeIntersectionFunctionTable;
                      uint64_t v48 = 4;
                      if (v46) {
                        uint64_t v48 = v45;
                      }
                      uint64_t v49 = *(void *)(v30 + v31 + 8);
                      BOOL v23 = !v47 || v49 != 6;
                      uint64_t v50 = v109;
                      if (v23) {
                        uint64_t v50 = v48;
                      }
                      if (v49 != v50)
                      {
                        char v124 = v33;
                        uint64_t v51 = argumentTypeToString(v19);
                        uint64_t v95 = (uint64_t)v26;
                        unint64_t v96 = MTLDebugFunctionArgumentTypeToString(*(void *)(v30 + v31 + 8));
                        uint64_t v93 = v119;
                        unint64_t v94 = v102;
                        unint64_t v84 = v51;
                        uint64_t v24 = v121;
                        uint64_t v66 = @"Compute";
                        uint64_t v75 = a2;
                        MTLReportFailure();
                        uint64_t v33 = v124;
LABEL_84:
                        uint64_t v25 = v122;
                      }
                    }
LABEL_113:
                    v33[1] = 1;
LABEL_114:
                    ++v26;
                    v30 += 88;
                    v27 += 88;
                    v29 += 88;
                    v28 += 88;
                    if ((const char *)v25 == v26) {
                      goto LABEL_122;
                    }
                    continue;
                }
              }
            }
            abort();
          }
        }
        a7 = v17;
LABEL_122:
        uint64_t v16 = v115 + 1;
      }
      while (v115 + 1 != v107);
      uint64_t v107 = [obj countByEnumeratingWithState:&v127 objects:v131 count:16];
    }
    while (v107);
  }
  else
  {
    *(void *)&v116[4] = 0;
  }
  unint64_t result = objc_msgSend(v103, "maxThreadgroupMemoryLength", v66, v75, v84);
  if (a10 + a9 + *(void *)&v116[4] > result)
  {
    [v103 maxThreadgroupMemoryLength];
    return MTLReportFailure();
  }
  return result;
}

uint64_t enumerateFunctionArgumentWithArray(uint64_t result, unint64_t a2, uint64_t a3)
{
  char v8 = 0;
  if (a2)
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    do
    {
      while (!*(unsigned char *)(v5 + 88 * v6))
      {
        if (++v6 >= a2) {
          return result;
        }
      }
      unint64_t result = (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
      ++v6;
      if (v8) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v6 >= a2;
      }
    }
    while (!v7);
  }
  return result;
}

void sub_23BDB12FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BDB149C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BDB16D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *argumentTypeToString(MTLArgumentType a1)
{
  if (!v2 & v1)
  {
    switch(a1)
    {
      case MTLArgumentTypeVisibleFunctionTable:
        unint64_t result = "visibleFunctionTable";
        break;
      case MTLArgumentTypePrimitiveAccelerationStructure:
        unint64_t result = "primitiveAccelerationStructure";
        break;
      case MTLArgumentTypeInstanceAccelerationStructure:
        unint64_t result = "instanceAccelerationStructure";
        break;
      case MTLArgumentTypeIntersectionFunctionTable:
        unint64_t result = "intersectionFunctionTable";
        break;
      default:
        abort();
    }
  }
  else
  {
    unint64_t result = "buffer";
    switch(a1)
    {
      case MTLArgumentTypeBuffer:
        return result;
      case MTLArgumentTypeThreadgroupMemory:
        unint64_t result = "threadgroupMemory";
        break;
      case MTLArgumentTypeTexture:
        unint64_t result = "texture";
        break;
      case MTLArgumentTypeSampler:
        unint64_t result = "sampler";
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

{
  char v1;
  char v2;
  const char *result;

  if (!v2 & v1)
  {
    switch(a1)
    {
      case MTLArgumentTypeVisibleFunctionTable:
        unint64_t result = "visibleFunctionTable";
        break;
      case MTLArgumentTypePrimitiveAccelerationStructure:
        unint64_t result = "primitiveAccelerationStructure";
        break;
      case MTLArgumentTypeInstanceAccelerationStructure:
        unint64_t result = "instanceAccelerationStructure";
        break;
      case MTLArgumentTypeIntersectionFunctionTable:
        unint64_t result = "intersectionFunctionTable";
        break;
      default:
        abort();
    }
  }
  else
  {
    unint64_t result = "buffer";
    switch(a1)
    {
      case MTLArgumentTypeBuffer:
        return result;
      case MTLArgumentTypeThreadgroupMemory:
        unint64_t result = "local memory";
        break;
      case MTLArgumentTypeTexture:
        unint64_t result = "texture";
        break;
      case MTLArgumentTypeSampler:
        unint64_t result = "sampler";
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

void std::__tree<unsigned int>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<unsigned int>::destroy(a1, *a2);
    std::__tree<unsigned int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        char v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<unsigned int>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  unint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      char v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unsigned int v9 = (uint64_t **)a2[2];
          }
          else
          {
            unsigned int v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unsigned int v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            char v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *char v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        char v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *char v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_23BDB41A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void sub_23BDB45E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

NSObject *createTimerWithInterval(dispatch_queue_t queue, void *a2, double a3)
{
  uint64_t v5 = dispatch_source_create(MEMORY[0x263EF8400], 0, 0, queue);
  if (v5)
  {
    double v6 = a3 * 1000000000.0;
    dispatch_time_t v7 = dispatch_time(0, (uint64_t)v6);
    dispatch_source_set_timer(v5, v7, (unint64_t)v6, 0x5F5E100uLL);
    dispatch_source_set_event_handler(v5, a2);
    dispatch_resume(v5);
  }
  return v5;
}

void sub_23BDB5834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  char v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    char v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      char v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<MTLPixelFormat,MTLTelemetryTextureDistribution>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryTextureDistribution> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_23BDB5BB8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryTextureDistribution> const&>(uint64_t a1, unint64_t *a2, const void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x1818uLL);
  *uint64_t i = 0;
  i[1] = v6;
  memcpy(i + 2, a3, 0x1808uLL);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  MTLArgumentType v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *MTLArgumentType v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    MTLArgumentType v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BDB5DDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryRenderTargetDistribution> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_23BDB5E50(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryRenderTargetDistribution> const&>(uint64_t a1, unint64_t *a2, const void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x44118uLL);
  *uint64_t i = 0;
  i[1] = v6;
  memcpy(i + 2, a3, 0x44108uLL);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  MTLArgumentType v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *MTLArgumentType v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    MTLArgumentType v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BDB607C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<MTLPixelFormat,MTLTelemetryBlitDistribution>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryBlitDistribution> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_23BDB60F0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryBlitDistribution> const&>(uint64_t a1, unint64_t *a2, const void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x1608uLL);
  *uint64_t i = 0;
  i[1] = v6;
  memcpy(i + 2, a3, 0x15F8uLL);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  MTLArgumentType v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *MTLArgumentType v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    MTLArgumentType v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BDB6314(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,MTLTelemetryRenderPipelineUsageRec>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryRenderPipelineUsageRec> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_23BDB6388(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryRenderPipelineUsageRec> const&>(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x20uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  MTLArgumentType v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *MTLArgumentType v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    MTLArgumentType v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_23BDB65AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,MTLTelemetryRenderFuncUsageRec>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryRenderFuncUsageRec> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_23BDB6620(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryRenderFuncUsageRec> const&>(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x30uLL);
  *int v10 = 0;
  v10[1] = v6;
  long long v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *int v10 = *v20;
LABEL_38:
    *unint64_t v20 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_23BDB6844(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,MTLTelemetryComputePipelineUsageRec>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryComputePipelineUsageRec> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_23BDB68B8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryComputePipelineUsageRec> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x20uLL);
  *int v10 = 0;
  v10[1] = v6;
  v10[2] = *(void *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_23BDB6AE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,MTLTelemetryKernelUsageRec>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryKernelUsageRec> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_23BDB6B58(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryKernelUsageRec> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x28uLL);
  *int v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  uint8_t v10[4] = *(void *)(a3 + 16);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *int v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_23BDB6D84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint8x8_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    BOOL v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  size_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((_DWORD *)i + 10) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    void *v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *size_t v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_23BDB7008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t checkBuffer(unint64_t result, void *a2, unint64_t a3, char a4, uint64_t a5)
{
  if (a2)
  {
    unint64_t v8 = result;
    if (([a2 conformsToProtocol:&unk_26EF82558] & 1) == 0)
    {
      uint64_t v9 = a5;
      MTLReportFailure();
    }
    if (objc_msgSend(a2, "device", v9) != v8)
    {
      uint64_t v10 = a5;
      MTLReportFailure();
    }
    unint64_t result = objc_msgSend(a2, "length", v10);
    if (result <= a3)
    {
      [a2 length];
      return MTLReportFailure();
    }
  }
  else if ((a4 & 1) == 0 || a3)
  {
    return MTLReportFailure();
  }
  return result;
}

uint64_t checkAccelerationStructure(uint64_t result, void *a2, char a3, uint64_t a4)
{
  if (!a2)
  {
    if (a3) {
      return result;
    }
    return MTLReportFailure();
  }
  uint64_t v6 = result;
  if (([a2 conformsToProtocol:&unk_26EF88D20] & 1) == 0)
  {
    uint64_t v7 = a4;
    MTLReportFailure();
  }
  unint64_t result = objc_msgSend(a2, "device", v7);
  if (result != v6) {
    return MTLReportFailure();
  }
  return result;
}

uint64_t checkMotionParameter(void *a1, void *a2)
{
  if (([a1 supportsPrimitiveMotionBlur] & 1) == 0) {
    MTLReportFailure();
  }
  [a2 motionEndTime];
  float v4 = v3;
  uint64_t result = [a2 motionStartTime];
  if (v4 < v6)
  {
    [a2 motionStartTime];
    [a2 motionEndTime];
    return MTLReportFailure();
  }
  return result;
}

unint64_t MTLTransformTypeStride(uint64_t a1)
{
  if (a1) {
    return (unint64_t)(a1 == 1) << 6;
  }
  else {
    return 48;
  }
}

uint64_t checkPrimitiveData(unint64_t a1, void *a2, uint64_t a3)
{
  checkBuffer(a1, (void *)[a2 primitiveDataBuffer], objc_msgSend(a2, "primitiveDataBufferOffset"), 1, @"primitiveDataBuffer");
  uint64_t result = [a2 primitiveDataBuffer];
  if (result)
  {
    if (![a2 primitiveDataElementSize]) {
      MTLReportFailure();
    }
    unint64_t v6 = [a2 primitiveDataElementSize];
    if (v6 > [a2 primitiveDataStride])
    {
      uint64_t v13 = [a2 primitiveDataElementSize];
      uint64_t v17 = [a2 primitiveDataStride];
      MTLReportFailure();
    }
    unint64_t v7 = objc_msgSend(a2, "primitiveDataBufferOffset", v13, v17);
    if (v7 > objc_msgSend((id)objc_msgSend(a2, "primitiveDataBuffer"), "length"))
    {
      uint64_t v14 = [a2 primitiveDataBufferOffset];
      uint64_t v18 = objc_msgSend((id)objc_msgSend(a2, "primitiveDataBuffer"), "length");
      MTLReportFailure();
    }
    unint64_t v8 = objc_msgSend((id)objc_msgSend(a2, "primitiveDataBuffer", v14, v18), "length");
    uint64_t v9 = [a2 primitiveDataBufferOffset];
    uint64_t v10 = v9 + [a2 primitiveDataStride] * (a3 - 1);
    if (v8 < v10 + [a2 primitiveDataElementSize])
    {
      uint64_t v11 = objc_msgSend((id)objc_msgSend(a2, "primitiveDataBuffer"), "length");
      uint64_t v12 = [a2 primitiveDataBufferOffset];
      uint64_t v21 = [a2 primitiveDataStride];
      uint64_t v22 = [a2 primitiveDataElementSize];
      uint64_t v19 = a3;
      uint64_t v20 = v12;
      uint64_t v15 = v11;
      MTLReportFailure();
    }
    if ((objc_msgSend(a2, "primitiveDataBufferOffset", v15, v19, v20, v21, v22) & 3) != 0)
    {
      uint64_t v16 = [a2 primitiveDataBufferOffset];
      MTLReportFailure();
    }
    uint64_t result = objc_msgSend(a2, "primitiveDataStride", v16);
    if ((result & 3) != 0)
    {
      [a2 primitiveDataStride];
      return MTLReportFailure();
    }
  }
  return result;
}

uint64_t checkAccelerationStructureDescriptor(void *a1, void *a2, int a3)
{
  return checkAccelerationStructureDescriptorWithRefitOptions(a1, a2, a3, 3);
}

uint64_t checkAccelerationStructureDescriptorWithRefitOptions(void *a1, void *a2, int a3, int a4)
{
  uint64_t v272 = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_8;
  }
  uint64_t v5 = a2;
  unint64_t v7 = objc_opt_class();
  if (![v7 isSubclassOfClass:objc_opt_class()])
  {
    uint64_t v11 = objc_opt_class();
    if ([v11 isSubclassOfClass:objc_opt_class()])
    {
      char v12 = [v5 usage];
      unint64_t v13 = [v5 instanceCount];
      if ((v12 & 4) != 0)
      {
        if (!(v13 >> 30)) {
          goto LABEL_261;
        }
      }
      else if (!(v13 >> 24))
      {
        goto LABEL_261;
      }
      uint64_t v165 = [v5 instanceCount];
      MTLReportFailure();
LABEL_261:
      if ((isValidMTLAccelerationStructureInstanceDescriptorType((MTLAccelerationStructureInstanceDescriptorType)objc_msgSend(v5, "instanceDescriptorType", v165)) & 1) == 0)
      {
        uint64_t v189 = [v5 instanceDescriptorType];
        MTLReportFailure();
      }
      unint64_t v136 = MTLAccelerationStructureInstanceDescriptorSize((MTLAccelerationStructureInstanceDescriptorType)objc_msgSend(v5, "instanceDescriptorType", v189));
      if ([v5 instanceDescriptorStride] < v136)
      {
        uint64_t v190 = [v5 instanceDescriptorStride];
        uint64_t v207 = v136;
        MTLReportFailure();
      }
      if ((objc_msgSend(v5, "instanceDescriptorStride", v190, v207) & 3) != 0)
      {
        uint64_t v191 = [v5 instanceDescriptorStride];
        uint64_t v208 = 4;
        MTLReportFailure();
      }
      uint64_t result = objc_msgSend(v5, "instanceTransformationMatrixLayout", v191, v208);
      if (result == 1)
      {
        uint64_t result = [a1 supportsRayTracingMatrixLayout];
        if ((result & 1) == 0) {
          uint64_t result = MTLReportFailure();
        }
      }
      if (!a3) {
        return result;
      }
      checkBuffer((unint64_t)a1, (void *)[v5 instanceDescriptorBuffer], objc_msgSend(v5, "instanceDescriptorBufferOffset"), 0, @"instance descriptor buffer");
      if (([v5 instanceDescriptorBufferOffset] & 3) != 0)
      {
        uint64_t v192 = [v5 instanceDescriptorBufferOffset];
        uint64_t v209 = 4;
        MTLReportFailure();
      }
      unint64_t v137 = objc_msgSend((id)objc_msgSend(v5, "instanceDescriptorBuffer", v192, v209), "length");
      uint64_t v138 = [v5 instanceDescriptorBufferOffset];
      uint64_t v139 = [v5 instanceDescriptorStride];
      if (v137 < v138 + [v5 instanceCount] * v139)
      {
        uint64_t v159 = objc_msgSend((id)objc_msgSend(v5, "instanceDescriptorBuffer"), "length");
        uint64_t v160 = [v5 instanceDescriptorBufferOffset];
        uint64_t v222 = [v5 instanceDescriptorStride];
        uint64_t v224 = [v5 instanceCount];
        uint64_t v193 = v159;
        uint64_t v210 = v160;
        MTLReportFailure();
      }
      long long v239 = 0u;
      long long v240 = 0u;
      long long v237 = 0u;
      long long v238 = 0u;
      int v140 = objc_msgSend(v5, "instancedAccelerationStructures", v193, v210, v222, v224);
      uint64_t v141 = [v140 countByEnumeratingWithState:&v237 objects:v265 count:16];
      if (v141)
      {
        uint64_t v142 = v141;
        uint64_t v143 = *(void *)v238;
        do
        {
          for (uint64_t i = 0; i != v142; ++i)
          {
            if (*(void *)v238 != v143) {
              objc_enumerationMutation(v140);
            }
            checkAccelerationStructure((uint64_t)a1, *(void **)(*((void *)&v237 + 1) + 8 * i), 0, @"Instanced acceleration structure");
          }
          uint64_t v142 = [v140 countByEnumeratingWithState:&v237 objects:v265 count:16];
        }
        while (v142);
      }
      if (![v5 instanceCount]) {
        goto LABEL_331;
      }
      if ([v5 instanceDescriptorType] == 3 || objc_msgSend(v5, "instanceDescriptorType") == 4)
      {
        if (![v5 instancedAccelerationStructures]) {
          goto LABEL_331;
        }
      }
      else if (objc_msgSend((id)objc_msgSend(v5, "instancedAccelerationStructures"), "count"))
      {
        goto LABEL_331;
      }
      MTLReportFailure();
LABEL_331:
      if ([v5 instanceDescriptorType] == 2
        || (uint64_t result = [v5 instanceDescriptorType], result == 4))
      {
        if ([v5 motionTransformType] == 1
          && ([a1 supportsRayTracingPerComponentMotionInterpolation] & 1) == 0)
        {
          MTLReportFailure();
        }
        uint64_t v155 = [v5 motionTransformType];
        if (v155) {
          unint64_t v156 = (unint64_t)(v155 == 1) << 6;
        }
        else {
          unint64_t v156 = 48;
        }
        if ([v5 motionTransformStride])
        {
          if (([v5 motionTransformStride] & 3) != 0)
          {
            uint64_t v194 = [v5 motionTransformStride];
            uint64_t v211 = 4;
            MTLReportFailure();
          }
          if (objc_msgSend(v5, "motionTransformStride", v194, v211) < v156)
          {
            uint64_t v206 = [v5 motionTransformStride];
            unint64_t v221 = v156;
            MTLReportFailure();
          }
          unint64_t v156 = objc_msgSend(v5, "motionTransformStride", v206, v221);
        }
        checkBuffer((unint64_t)a1, (void *)[v5 motionTransformBuffer], objc_msgSend(v5, "motionTransformBufferOffset"), 0, @"motion transform buffer");
        if (([v5 motionTransformBufferOffset] & 3) != 0)
        {
          uint64_t v194 = [v5 motionTransformBufferOffset];
          uint64_t v211 = 4;
          MTLReportFailure();
        }
        unint64_t v157 = objc_msgSend((id)objc_msgSend(v5, "motionTransformBuffer", v194, v211), "length");
        uint64_t v158 = [v5 motionTransformBufferOffset];
        uint64_t result = [v5 motionTransformCount];
        if (v157 < v158 + result * v156)
        {
          objc_msgSend((id)objc_msgSend(v5, "motionTransformBuffer"), "length");
          [v5 motionTransformBufferOffset];
          [v5 motionTransformCount];
          return MTLReportFailure();
        }
      }
      return result;
    }
    __int16 v133 = objc_opt_class();
    if ([v133 isSubclassOfClass:objc_opt_class()])
    {
      char v134 = [v5 usage];
      unint64_t v135 = [v5 maxInstanceCount];
      if ((v134 & 4) != 0)
      {
        if (v135 >> 30)
        {
LABEL_353:
          uint64_t v165 = [v5 maxInstanceCount];
          MTLReportFailure();
        }
      }
      else if (v135 >> 24)
      {
        goto LABEL_353;
      }
      if (objc_msgSend(v5, "instanceDescriptorType", v165) != 3 && objc_msgSend(v5, "instanceDescriptorType") != 4)
      {
        uint64_t v195 = [v5 instanceDescriptorType];
        MTLReportFailure();
      }
      unint64_t v145 = MTLAccelerationStructureInstanceDescriptorSize((MTLAccelerationStructureInstanceDescriptorType)objc_msgSend(v5, "instanceDescriptorType", v195));
      if ([v5 instanceDescriptorStride] < v145)
      {
        uint64_t v196 = [v5 instanceDescriptorStride];
        uint64_t v207 = v145;
        MTLReportFailure();
      }
      if ((objc_msgSend(v5, "instanceDescriptorStride", v196, v207) & 3) != 0)
      {
        uint64_t v197 = [v5 instanceDescriptorStride];
        uint64_t v212 = 4;
        MTLReportFailure();
      }
      uint64_t result = objc_msgSend(v5, "instanceTransformationMatrixLayout", v197, v212);
      if (result == 1)
      {
        uint64_t result = [a1 supportsRayTracingMatrixLayout];
        if ((result & 1) == 0) {
          uint64_t result = MTLReportFailure();
        }
      }
      if (a3)
      {
        checkBuffer((unint64_t)a1, (void *)[v5 instanceDescriptorBuffer], objc_msgSend(v5, "instanceDescriptorBufferOffset"), 0, @"instance descriptor buffer");
        if (([v5 instanceDescriptorBufferOffset] & 0x3F) != 0)
        {
          uint64_t v198 = [v5 instanceDescriptorBufferOffset];
          uint64_t v213 = 64;
          MTLReportFailure();
        }
        unint64_t v146 = objc_msgSend((id)objc_msgSend(v5, "instanceDescriptorBuffer", v198, v213), "length");
        uint64_t v147 = [v5 instanceDescriptorBufferOffset];
        uint64_t v148 = [v5 instanceDescriptorStride];
        if (v146 < v147 + [v5 maxInstanceCount] * v148)
        {
          uint64_t v161 = objc_msgSend((id)objc_msgSend(v5, "instanceDescriptorBuffer"), "length");
          uint64_t v162 = [v5 instanceDescriptorBufferOffset];
          uint64_t v222 = [v5 instanceDescriptorStride];
          uint64_t v224 = [v5 maxInstanceCount];
          uint64_t v199 = v161;
          uint64_t v214 = v162;
          MTLReportFailure();
        }
        checkBuffer((unint64_t)a1, objc_msgSend(v5, "instanceCountBuffer", v199, v214, v222, v224), objc_msgSend(v5, "instanceCountBufferOffset"), 0, @"instance count buffer");
        if (([v5 instanceCountBufferOffset] & 3) != 0)
        {
          uint64_t v200 = [v5 instanceCountBufferOffset];
          uint64_t v215 = 4;
          MTLReportFailure();
        }
        unint64_t v149 = objc_msgSend((id)objc_msgSend(v5, "instanceCountBuffer", v200, v215), "length");
        if (v149 < [v5 instanceCountBufferOffset] + 4)
        {
          uint64_t v201 = objc_msgSend((id)objc_msgSend(v5, "instanceCountBuffer"), "length");
          uint64_t v216 = [v5 instanceCountBufferOffset];
          MTLReportFailure();
        }
        if (objc_msgSend(v5, "instanceDescriptorType", v201, v216) == 2
          || (uint64_t result = [v5 instanceDescriptorType], result == 4))
        {
          if ([v5 motionTransformType] == 1
            && ([a1 supportsRayTracingPerComponentMotionInterpolation] & 1) == 0)
          {
            MTLReportFailure();
          }
          uint64_t v150 = [v5 motionTransformType];
          if (v150) {
            unint64_t v151 = (unint64_t)(v150 == 1) << 6;
          }
          else {
            unint64_t v151 = 48;
          }
          if ([v5 motionTransformStride])
          {
            if (([v5 motionTransformStride] & 3) != 0)
            {
              uint64_t v202 = [v5 motionTransformStride];
              uint64_t v217 = 4;
              MTLReportFailure();
            }
            if (objc_msgSend(v5, "motionTransformStride", v202, v217) < v151)
            {
              uint64_t v203 = [v5 motionTransformStride];
              unint64_t v218 = v151;
              MTLReportFailure();
            }
            unint64_t v151 = objc_msgSend(v5, "motionTransformStride", v203, v218);
          }
          checkBuffer((unint64_t)a1, (void *)[v5 motionTransformBuffer], objc_msgSend(v5, "motionTransformBufferOffset"), 0, @"motion transform buffer");
          if (([v5 motionTransformBufferOffset] & 3) != 0)
          {
            uint64_t v202 = [v5 motionTransformBufferOffset];
            uint64_t v217 = 4;
            MTLReportFailure();
          }
          unint64_t v152 = objc_msgSend((id)objc_msgSend(v5, "motionTransformBuffer", v202, v217), "length");
          uint64_t v153 = [v5 motionTransformBufferOffset];
          if (v152 < v153 + [v5 maxMotionTransformCount] * v151)
          {
            uint64_t v163 = objc_msgSend((id)objc_msgSend(v5, "motionTransformBuffer"), "length");
            uint64_t v164 = [v5 motionTransformBufferOffset];
            unint64_t v223 = v151;
            uint64_t v225 = [v5 maxMotionTransformCount];
            uint64_t v204 = v163;
            uint64_t v219 = v164;
            MTLReportFailure();
          }
          checkBuffer((unint64_t)a1, objc_msgSend(v5, "motionTransformCountBuffer", v204, v219, v223, v225), objc_msgSend(v5, "motionTransformCountBufferOffset"), 0, @"motion transform count buffer");
          if (([v5 motionTransformCountBufferOffset] & 3) != 0)
          {
            uint64_t v205 = [v5 motionTransformCountBufferOffset];
            uint64_t v220 = 4;
            MTLReportFailure();
          }
          unint64_t v154 = objc_msgSend((id)objc_msgSend(v5, "motionTransformCountBuffer", v205, v220), "length");
          uint64_t result = [v5 motionTransformCountBufferOffset];
          if (v154 < result + 4)
          {
            objc_msgSend((id)objc_msgSend(v5, "motionTransformCountBuffer"), "length");
            [v5 motionTransformCountBufferOffset];
            return MTLReportFailure();
          }
        }
      }
      return result;
    }
LABEL_8:
    return MTLReportFailure();
  }
  if (!objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "count"))
  {
    uint64_t v165 = objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "count");
    MTLReportFailure();
  }
  char v8 = objc_msgSend(v5, "usage", v165);
  unint64_t v9 = objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "count");
  if ((v8 & 4) != 0)
  {
    if (v9 >> 30)
    {
LABEL_349:
      uint64_t v166 = objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "count");
      MTLReportFailure();
    }
  }
  else if (v9 >> 24)
  {
    goto LABEL_349;
  }
  long long v263 = 0u;
  long long v264 = 0u;
  long long v261 = 0u;
  long long v262 = 0u;
  obuint64_t j = (id)objc_msgSend(v5, "geometryDescriptors", v166);
  uint64_t v233 = [obj countByEnumeratingWithState:&v261 objects:v271 count:16];
  unint64_t v14 = 0;
  if (!v233) {
    goto LABEL_251;
  }
  int v230 = a4 & a3;
  uint64_t v232 = *(void *)v262;
  char v228 = a4;
  v229 = v5;
  do
  {
    uint64_t v15 = 0;
    do
    {
      if (*(void *)v262 != v232) {
        objc_enumerationMutation(obj);
      }
      uint64_t v234 = v15;
      unint64_t v235 = v14;
      uint64_t v16 = *(void **)(*((void *)&v261 + 1) + 8 * v15);
      objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        MTLReportFailure();
      }
      uint64_t v17 = objc_opt_class();
      if ([v17 isSubclassOfClass:objc_opt_class()])
      {
        if ((unint64_t)[v16 intersectionFunctionTableOffset] >> 24)
        {
          uint64_t v167 = [v16 intersectionFunctionTableOffset];
          MTLReportFailure();
        }
        MTLAttributeFormat v18 = objc_msgSend(v16, "vertexFormat", v167);
        unint64_t v19 = [v16 vertexStride];
        if ((unint64_t)MTLAttributeFormatComponentCount(v18) <= 1) {
          MTLReportFailure();
        }
        unint64_t v20 = MTLAttributeFormatSize(v18);
        if (v19 && v20 > v19)
        {
          unint64_t v168 = v19;
          uint64_t v207 = v20;
          MTLReportFailure();
        }
        unint64_t v21 = MTLAttributeFormatAlignment(v18);
        if (v19 % v21)
        {
          unint64_t v168 = v19;
          uint64_t v207 = v21;
          MTLReportFailure();
        }
        uint64_t v22 = objc_msgSend(v16, "transformationMatrixBuffer", v168);
        unint64_t v23 = [v16 transformationMatrixBufferOffset];
        checkBuffer((unint64_t)a1, v22, v23, 1, @"Transformation buffer");
        if (v22)
        {
          if (v23 + 48 > [v22 length])
          {
            unint64_t v169 = v23;
            uint64_t v207 = [v22 length];
            MTLReportFailure();
          }
          if ((v23 & 3) != 0)
          {
            unint64_t v169 = v23;
            MTLReportFailure();
          }
        }
        if (objc_msgSend(v16, "transformationMatrixLayout", v169) == 1
          && ([a1 supportsRayTracingMatrixLayout] & 1) == 0)
        {
          MTLReportFailure();
        }
        if (v230)
        {
          checkBuffer((unint64_t)a1, (void *)[v16 vertexBuffer], objc_msgSend(v16, "vertexBufferOffset"), 0, @"vertex buffer");
          if (([v16 vertexBufferOffset] & 3) != 0)
          {
            uint64_t v170 = [v16 vertexBufferOffset];
            uint64_t v207 = 4;
            MTLReportFailure();
          }
          if (objc_msgSend(v16, "indexBuffer", v170))
          {
            checkBuffer((unint64_t)a1, (void *)[v16 indexBuffer], objc_msgSend(v16, "indexBufferOffset"), 1, @"index buffer");
            uint64_t v24 = [v16 indexType];
            if (v24) {
              uint64_t v25 = 4;
            }
            else {
              uint64_t v25 = 2;
            }
            if (((v25 - 1) & [v16 indexBufferOffset]) != 0)
            {
              uint64_t v171 = [v16 indexBufferOffset];
              uint64_t v207 = v25;
              MTLReportFailure();
            }
            uint64_t v26 = 3 * objc_msgSend(v16, "triangleCount", v171);
            char v27 = 1;
            if (v24) {
              char v27 = 2;
            }
            unint64_t v28 = (v26 << v27) + [v16 indexBufferOffset];
            if (v28 > objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length"))
            {
              uint64_t v29 = 3 * [v16 triangleCount];
              uint64_t v222 = [v16 indexBufferOffset];
              uint64_t v224 = objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length");
              uint64_t v170 = v29;
              uint64_t v207 = v25;
              goto LABEL_248;
            }
          }
          else
          {
            unint64_t v72 = [v16 vertexBufferOffset];
            if (v72 > objc_msgSend((id)objc_msgSend(v16, "vertexBuffer"), "length"))
            {
              uint64_t v171 = [v16 vertexBufferOffset];
              uint64_t v207 = objc_msgSend((id)objc_msgSend(v16, "vertexBuffer"), "length");
              MTLReportFailure();
            }
            uint64_t v73 = objc_msgSend(v16, "vertexStride", v171);
            MTLAttributeFormat v74 = [v16 vertexFormat];
            if (!v73) {
              uint64_t v73 = MTLAttributeFormatSize(v74);
            }
            unint64_t v75 = 3 * v73 * [v16 triangleCount];
            uint64_t v76 = objc_msgSend((id)objc_msgSend(v16, "vertexBuffer"), "length");
            if (v76 - [v16 vertexBufferOffset] < v75)
            {
              uint64_t v128 = 3 * [v16 triangleCount];
              uint64_t v222 = [v16 vertexBufferOffset];
              uint64_t v224 = objc_msgSend((id)objc_msgSend(v16, "vertexBuffer"), "length");
              uint64_t v170 = v128;
              uint64_t v207 = v73;
LABEL_248:
              MTLReportFailure();
            }
          }
        }
        uint64_t v58 = objc_msgSend(v16, "triangleCount", v170, v207, v222, v224);
        goto LABEL_133;
      }
      uint64_t v30 = objc_opt_class();
      if ([v30 isSubclassOfClass:objc_opt_class()])
      {
        if ((unint64_t)[v16 intersectionFunctionTableOffset] >> 24)
        {
          uint64_t v167 = [v16 intersectionFunctionTableOffset];
          MTLReportFailure();
        }
        checkMotionParameter(a1, v5);
        uint64_t v31 = [v5 motionKeyframeCount];
        if (v31 != objc_msgSend((id)objc_msgSend(v16, "vertexBuffers"), "count"))
        {
          uint64_t v167 = [v5 motionKeyframeCount];
          uint64_t v207 = objc_msgSend((id)objc_msgSend(v16, "vertexBuffers"), "count");
          MTLReportFailure();
        }
        MTLAttributeFormat v32 = objc_msgSend(v16, "vertexFormat", v167);
        unint64_t v33 = [v16 vertexStride];
        if ((unint64_t)MTLAttributeFormatComponentCount(v32) <= 1) {
          MTLReportFailure();
        }
        unint64_t v34 = MTLAttributeFormatSize(v32);
        if (v33 && v34 > v33)
        {
          unint64_t v172 = v33;
          uint64_t v207 = v34;
          MTLReportFailure();
        }
        unint64_t v35 = MTLAttributeFormatAlignment(v32);
        if (v33 % v35)
        {
          unint64_t v172 = v33;
          uint64_t v207 = v35;
          MTLReportFailure();
        }
        uint64_t v36 = objc_msgSend(v16, "transformationMatrixBuffer", v172);
        unint64_t v37 = [v16 transformationMatrixBufferOffset];
        checkBuffer((unint64_t)a1, v36, v37, 1, @"Transformation buffer");
        if (v36)
        {
          if (v37 + 48 > [v36 length])
          {
            unint64_t v173 = v37;
            uint64_t v207 = [v36 length];
            MTLReportFailure();
          }
          if ((v37 & 3) != 0)
          {
            unint64_t v173 = v37;
            MTLReportFailure();
          }
        }
        if (objc_msgSend(v16, "transformationMatrixLayout", v173) == 1
          && ([a1 supportsRayTracingMatrixLayout] & 1) == 0)
        {
          MTLReportFailure();
        }
        uint64_t v38 = [v16 vertexStride];
        MTLAttributeFormat v39 = [v16 vertexFormat];
        if (!v38) {
          uint64_t v38 = MTLAttributeFormatSize(v39);
        }
        uint64_t v40 = [v16 triangleCount];
        if (a3)
        {
          uint64_t v226 = v40;
          long long v259 = 0u;
          long long v260 = 0u;
          long long v257 = 0u;
          long long v258 = 0u;
          unint64_t v41 = (void *)[v16 vertexBuffers];
          uint64_t v42 = [v41 countByEnumeratingWithState:&v257 objects:v270 count:16];
          if (v42)
          {
            uint64_t v43 = v42;
            uint64_t v44 = *(void *)v258;
            do
            {
              for (uint64_t j = 0; j != v43; ++j)
              {
                if (*(void *)v258 != v44) {
                  objc_enumerationMutation(v41);
                }
                BOOL v46 = *(void **)(*((void *)&v257 + 1) + 8 * j);
                checkBuffer((unint64_t)a1, objc_msgSend(v46, "buffer", v174), objc_msgSend(v46, "offset"), 0, @"vertex buffer");
                if (([v46 offset] & 3) != 0)
                {
                  uint64_t v174 = [v46 offset];
                  uint64_t v207 = 4;
                  MTLReportFailure();
                }
              }
              uint64_t v43 = [v41 countByEnumeratingWithState:&v257 objects:v270 count:16];
            }
            while (v43);
          }
          if (objc_msgSend(v16, "indexBuffer", v174))
          {
            checkBuffer((unint64_t)a1, (void *)[v16 indexBuffer], objc_msgSend(v16, "indexBufferOffset"), 1, @"index buffer");
            uint64_t v47 = [v16 indexType];
            if (v47) {
              uint64_t v48 = 4;
            }
            else {
              uint64_t v48 = 2;
            }
            if (((v48 - 1) & [v16 indexBufferOffset]) != 0)
            {
              uint64_t v174 = [v16 indexBufferOffset];
              uint64_t v207 = v48;
              MTLReportFailure();
            }
            uint64_t v49 = 3 * objc_msgSend(v16, "triangleCount", v174);
            char v50 = 1;
            if (v47) {
              char v50 = 2;
            }
            unint64_t v51 = (v49 << v50) + [v16 indexBufferOffset];
            if (v51 > objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length"))
            {
              uint64_t v52 = 3 * [v16 triangleCount];
              uint64_t v222 = [v16 indexBufferOffset];
              uint64_t v224 = objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length");
              uint64_t v207 = v48;
              MTLReportFailure();
              uint64_t v53 = objc_msgSend(v16, "triangleCount", v52);
              goto LABEL_185;
            }
          }
          else
          {
            long long v255 = 0u;
            long long v256 = 0u;
            long long v253 = 0u;
            long long v254 = 0u;
            unint64_t v92 = (void *)[v16 vertexBuffers];
            uint64_t v93 = [v92 countByEnumeratingWithState:&v253 objects:v269 count:16];
            if (v93)
            {
              uint64_t v94 = v93;
              unint64_t v95 = 3 * v38 * v226;
              uint64_t v96 = *(void *)v254;
              do
              {
                for (uint64_t k = 0; k != v94; ++k)
                {
                  if (*(void *)v254 != v96) {
                    objc_enumerationMutation(v92);
                  }
                  uint64_t v98 = *(void **)(*((void *)&v253 + 1) + 8 * k);
                  unint64_t v99 = objc_msgSend(v98, "offset", v174);
                  if (v99 > objc_msgSend((id)objc_msgSend(v98, "buffer"), "length"))
                  {
                    uint64_t v183 = [v98 offset];
                    uint64_t v207 = objc_msgSend((id)objc_msgSend(v98, "buffer"), "length");
                    MTLReportFailure();
                  }
                  uint64_t v100 = objc_msgSend((id)objc_msgSend(v98, "buffer", v183), "length");
                  if (v100 - [v98 offset] < v95)
                  {
                    uint64_t v227 = 3 * [v16 triangleCount];
                    uint64_t v222 = [v98 offset];
                    uint64_t v224 = objc_msgSend((id)objc_msgSend(v98, "buffer"), "length");
                    uint64_t v174 = v227;
                    uint64_t v207 = v38;
                    MTLReportFailure();
                  }
                }
                uint64_t v94 = [v92 countByEnumeratingWithState:&v253 objects:v269 count:16];
              }
              while (v94);
            }
          }
        }
        uint64_t v53 = objc_msgSend(v16, "triangleCount", v174);
LABEL_185:
        uint64_t v77 = v53;
        LOBYTE(a4) = v228;
        uint64_t v5 = v229;
        if ((v228 & 2) == 0) {
          goto LABEL_187;
        }
        goto LABEL_186;
      }
      char v54 = objc_opt_class();
      if ([v54 isSubclassOfClass:objc_opt_class()])
      {
        if ((unint64_t)[v16 boundingBoxStride] <= 0x17)
        {
          uint64_t v167 = [v16 boundingBoxStride];
          uint64_t v207 = 24;
          MTLReportFailure();
        }
        if ((objc_msgSend(v16, "boundingBoxStride", v167) & 3) != 0)
        {
          uint64_t v175 = [v16 boundingBoxStride];
          uint64_t v207 = 4;
          MTLReportFailure();
        }
        if (a3)
        {
          checkBuffer((unint64_t)a1, (void *)[v16 boundingBoxBuffer], objc_msgSend(v16, "boundingBoxBufferOffset"), 0, @"bounding box buffer");
          if (([v16 boundingBoxBufferOffset] & 3) != 0)
          {
            uint64_t v175 = [v16 boundingBoxBufferOffset];
            uint64_t v207 = 4;
            MTLReportFailure();
          }
          unint64_t v55 = objc_msgSend((id)objc_msgSend(v16, "boundingBoxBuffer", v175), "length");
          uint64_t v56 = [v16 boundingBoxBufferOffset];
          uint64_t v57 = [v16 boundingBoxStride];
          if (v55 < v56 + [v16 boundingBoxCount] * v57)
          {
            uint64_t v129 = objc_msgSend((id)objc_msgSend(v16, "boundingBoxBuffer"), "length");
            uint64_t v130 = [v16 boundingBoxBufferOffset];
            uint64_t v222 = [v16 boundingBoxStride];
            uint64_t v224 = [v16 boundingBoxCount];
            uint64_t v175 = v129;
            uint64_t v207 = v130;
            MTLReportFailure();
          }
        }
        uint64_t v58 = objc_msgSend(v16, "boundingBoxCount", v175);
        goto LABEL_133;
      }
      unint64_t v59 = objc_opt_class();
      if ([v59 isSubclassOfClass:objc_opt_class()])
      {
        checkMotionParameter(a1, v5);
        uint64_t v60 = [v5 motionKeyframeCount];
        if (v60 != objc_msgSend((id)objc_msgSend(v16, "boundingBoxBuffers"), "count"))
        {
          uint64_t v167 = [v5 motionKeyframeCount];
          uint64_t v207 = objc_msgSend((id)objc_msgSend(v16, "boundingBoxBuffers"), "count");
          MTLReportFailure();
        }
        if ((unint64_t)objc_msgSend(v16, "boundingBoxStride", v167) <= 0x17)
        {
          uint64_t v176 = [v16 boundingBoxStride];
          uint64_t v207 = 24;
          MTLReportFailure();
        }
        if ((objc_msgSend(v16, "boundingBoxStride", v176) & 3) != 0)
        {
          uint64_t v177 = [v16 boundingBoxStride];
          uint64_t v207 = 4;
          MTLReportFailure();
        }
        long long v251 = 0u;
        long long v252 = 0u;
        long long v249 = 0u;
        long long v250 = 0u;
        uint64_t v61 = objc_msgSend(v16, "boundingBoxBuffers", v177);
        uint64_t v62 = [v61 countByEnumeratingWithState:&v249 objects:v268 count:16];
        if (v62)
        {
          uint64_t v63 = v62;
          uint64_t v64 = *(void *)v250;
          do
          {
            for (uint64_t m = 0; m != v63; ++m)
            {
              if (*(void *)v250 != v64) {
                objc_enumerationMutation(v61);
              }
              if (a3)
              {
                uint64_t v66 = *(void **)(*((void *)&v249 + 1) + 8 * m);
                checkBuffer((unint64_t)a1, (void *)[v66 buffer], objc_msgSend(v66, "offset"), 0, @"bounding box buffer");
                if (([v66 offset] & 3) != 0)
                {
                  uint64_t v178 = [v16 boundingBoxStride];
                  uint64_t v207 = 4;
                  MTLReportFailure();
                }
                unint64_t v67 = objc_msgSend((id)objc_msgSend(v66, "buffer", v178), "length");
                uint64_t v68 = [v66 offset];
                uint64_t v69 = [v16 boundingBoxStride];
                if (v67 < v68 + [v16 boundingBoxCount] * v69)
                {
                  uint64_t v70 = objc_msgSend((id)objc_msgSend(v66, "buffer"), "length");
                  uint64_t v71 = [v66 offset];
                  uint64_t v222 = [v16 boundingBoxStride];
                  uint64_t v224 = [v16 boundingBoxCount];
                  uint64_t v178 = v70;
                  uint64_t v207 = v71;
                  MTLReportFailure();
                }
              }
            }
            uint64_t v63 = [v61 countByEnumeratingWithState:&v249 objects:v268 count:16];
          }
          while (v63);
        }
        uint64_t v53 = objc_msgSend(v16, "boundingBoxCount", v178);
        goto LABEL_185;
      }
      uint64_t v78 = objc_opt_class();
      if ([v78 isSubclassOfClass:objc_opt_class()])
      {
        if ((unint64_t)[v16 intersectionFunctionTableOffset] >> 24)
        {
          uint64_t v167 = [v16 intersectionFunctionTableOffset];
          MTLReportFailure();
        }
        checkCurveBasis(objc_msgSend(v16, "curveBasis", v167), objc_msgSend(v16, "segmentControlPointCount"));
        if ([v16 curveType] && objc_msgSend(v16, "curveType") != 1) {
          MTLReportFailure();
        }
        if ([v16 endCaps] && objc_msgSend(v16, "endCaps") != 1 && objc_msgSend(v16, "endCaps") != 2) {
          MTLReportFailure();
        }
        MTLAttributeFormat v79 = [v16 controlPointFormat];
        unint64_t v80 = [v16 controlPointStride];
        if ((unint64_t)MTLAttributeFormatComponentCount(v79) <= 1) {
          MTLReportFailure();
        }
        unint64_t v81 = MTLAttributeFormatSize(v79);
        if (v80 && v81 > v80)
        {
          unint64_t v179 = v80;
          uint64_t v207 = v81;
          MTLReportFailure();
        }
        unint64_t v82 = MTLAttributeFormatAlignment(v79);
        if (v80 % v82)
        {
          unint64_t v179 = v80;
          uint64_t v207 = v82;
          MTLReportFailure();
        }
        MTLAttributeFormat v83 = objc_msgSend(v16, "radiusFormat", v179);
        unint64_t v84 = [v16 radiusStride];
        if (MTLAttributeFormatComponentCount(v83) != 1) {
          MTLReportFailure();
        }
        unint64_t v85 = MTLAttributeFormatSize(v83);
        if (v84 && v85 > v84)
        {
          uint64_t v180 = v84;
          uint64_t v207 = v85;
          MTLReportFailure();
        }
        unint64_t v86 = MTLAttributeFormatAlignment(v83);
        if (v84 % v86)
        {
          uint64_t v180 = v84;
          uint64_t v207 = v86;
          MTLReportFailure();
        }
        if (v230)
        {
          checkBuffer((unint64_t)a1, (void *)[v16 controlPointBuffer], objc_msgSend(v16, "controlPointBufferOffset"), 0, @"control point buffer");
          checkBuffer((unint64_t)a1, (void *)[v16 radiusBuffer], objc_msgSend(v16, "radiusBufferOffset"), 0, @"radius buffer");
          checkBuffer((unint64_t)a1, (void *)[v16 indexBuffer], objc_msgSend(v16, "indexBufferOffset"), 0, @"index buffer");
          if (([v16 controlPointBufferOffset] & 3) != 0)
          {
            uint64_t v180 = [v16 controlPointBufferOffset];
            uint64_t v207 = 4;
            MTLReportFailure();
          }
          if ((objc_msgSend(v16, "radiusBufferOffset", v180) & 3) != 0)
          {
            uint64_t v181 = [v16 radiusBufferOffset];
            uint64_t v207 = 4;
            MTLReportFailure();
          }
          uint64_t v87 = objc_msgSend(v16, "indexType", v181);
          if (v87) {
            uint64_t v88 = 4;
          }
          else {
            uint64_t v88 = 2;
          }
          if (((v88 - 1) & [v16 indexBufferOffset]) != 0)
          {
            uint64_t v182 = [v16 indexBufferOffset];
            uint64_t v207 = v88;
            MTLReportFailure();
          }
          uint64_t v89 = objc_msgSend(v16, "segmentCount", v182);
          char v90 = 1;
          if (v87) {
            char v90 = 2;
          }
          unint64_t v91 = (v89 << v90) + [v16 indexBufferOffset];
          if (v91 > objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length")) {
            goto LABEL_249;
          }
        }
        goto LABEL_244;
      }
      uint64_t v101 = objc_opt_class();
      if ([v101 isSubclassOfClass:objc_opt_class()])
      {
        if ((unint64_t)[v16 intersectionFunctionTableOffset] >> 24)
        {
          uint64_t v167 = [v16 intersectionFunctionTableOffset];
          MTLReportFailure();
        }
        checkCurveBasis(objc_msgSend(v16, "curveBasis", v167), objc_msgSend(v16, "segmentControlPointCount"));
        if ([v16 curveType] && objc_msgSend(v16, "curveType") != 1) {
          MTLReportFailure();
        }
        if ([v16 endCaps] && objc_msgSend(v16, "endCaps") != 1 && objc_msgSend(v16, "endCaps") != 2) {
          MTLReportFailure();
        }
        checkMotionParameter(a1, v5);
        uint64_t v102 = [v5 motionKeyframeCount];
        if (v102 != objc_msgSend((id)objc_msgSend(v16, "controlPointBuffers"), "count"))
        {
          uint64_t v184 = [v5 motionKeyframeCount];
          uint64_t v207 = objc_msgSend((id)objc_msgSend(v16, "controlPointBuffers"), "count");
          MTLReportFailure();
        }
        MTLAttributeFormat v103 = objc_msgSend(v16, "controlPointFormat", v184);
        unint64_t v104 = [v16 controlPointStride];
        if ((unint64_t)MTLAttributeFormatComponentCount(v103) <= 1) {
          MTLReportFailure();
        }
        unint64_t v105 = MTLAttributeFormatSize(v103);
        if (v104 && v105 > v104)
        {
          unint64_t v185 = v104;
          uint64_t v207 = v105;
          MTLReportFailure();
        }
        unint64_t v106 = MTLAttributeFormatAlignment(v103);
        if (v104 % v106)
        {
          unint64_t v185 = v104;
          uint64_t v207 = v106;
          MTLReportFailure();
        }
        MTLAttributeFormat v107 = objc_msgSend(v16, "radiusFormat", v185);
        unint64_t v108 = [v16 radiusStride];
        if (MTLAttributeFormatComponentCount(v107) != 1) {
          MTLReportFailure();
        }
        unint64_t v109 = MTLAttributeFormatSize(v107);
        if (v108 && v109 > v108)
        {
          uint64_t v180 = v108;
          uint64_t v207 = v109;
          MTLReportFailure();
        }
        unint64_t v110 = MTLAttributeFormatAlignment(v107);
        if (v108 % v110)
        {
          uint64_t v180 = v108;
          uint64_t v207 = v110;
          MTLReportFailure();
        }
        if (a3)
        {
          uint64_t v111 = objc_msgSend((id)objc_msgSend(v16, "controlPointBuffers"), "count");
          if (v111 != objc_msgSend((id)objc_msgSend(v16, "radiusBuffers"), "count"))
          {
            uint64_t v180 = objc_msgSend((id)objc_msgSend(v16, "controlPointBuffers"), "count");
            uint64_t v207 = objc_msgSend((id)objc_msgSend(v16, "radiusBuffers"), "count");
            MTLReportFailure();
          }
          long long v247 = 0u;
          long long v248 = 0u;
          long long v245 = 0u;
          long long v246 = 0u;
          double v112 = objc_msgSend(v16, "controlPointBuffers", v180);
          uint64_t v113 = [v112 countByEnumeratingWithState:&v245 objects:v267 count:16];
          if (v113)
          {
            uint64_t v114 = v113;
            uint64_t v115 = *(void *)v246;
            do
            {
              for (uint64_t n = 0; n != v114; ++n)
              {
                if (*(void *)v246 != v115) {
                  objc_enumerationMutation(v112);
                }
                uint64_t v117 = *(void **)(*((void *)&v245 + 1) + 8 * n);
                checkBuffer((unint64_t)a1, objc_msgSend(v117, "buffer", v186), objc_msgSend(v117, "offset"), 0, @"control point buffer");
                if (([v117 offset] & 3) != 0)
                {
                  uint64_t v186 = [v117 offset];
                  uint64_t v207 = 4;
                  MTLReportFailure();
                }
              }
              uint64_t v114 = [v112 countByEnumeratingWithState:&v245 objects:v267 count:16];
            }
            while (v114);
          }
          long long v243 = 0u;
          long long v244 = 0u;
          long long v241 = 0u;
          long long v242 = 0u;
          unint64_t v118 = objc_msgSend(v16, "radiusBuffers", v186);
          uint64_t v119 = [v118 countByEnumeratingWithState:&v241 objects:v266 count:16];
          if (v119)
          {
            uint64_t v120 = v119;
            uint64_t v121 = *(void *)v242;
            do
            {
              for (iuint64_t i = 0; ii != v120; ++ii)
              {
                if (*(void *)v242 != v121) {
                  objc_enumerationMutation(v118);
                }
                int v123 = *(void **)(*((void *)&v241 + 1) + 8 * ii);
                checkBuffer((unint64_t)a1, objc_msgSend(v123, "buffer", v187), objc_msgSend(v123, "offset"), 0, @"radius buffer");
                if (([v123 offset] & 3) != 0)
                {
                  uint64_t v187 = [v123 offset];
                  uint64_t v207 = 4;
                  MTLReportFailure();
                }
              }
              uint64_t v120 = [v118 countByEnumeratingWithState:&v241 objects:v266 count:16];
            }
            while (v120);
          }
          checkBuffer((unint64_t)a1, objc_msgSend(v16, "indexBuffer", v187), objc_msgSend(v16, "indexBufferOffset"), 1, @"index buffer");
          uint64_t v124 = [v16 indexType];
          if (v124) {
            uint64_t v88 = 4;
          }
          else {
            uint64_t v88 = 2;
          }
          if (((v88 - 1) & [v16 indexBufferOffset]) != 0)
          {
            uint64_t v188 = [v16 indexBufferOffset];
            uint64_t v207 = v88;
            MTLReportFailure();
          }
          uint64_t v125 = objc_msgSend(v16, "segmentCount", v188);
          char v126 = 1;
          if (v124) {
            char v126 = 2;
          }
          unint64_t v127 = (v125 << v126) + [v16 indexBufferOffset];
          if (v127 > objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length"))
          {
LABEL_249:
            uint64_t v131 = [v16 segmentCount];
            uint64_t v222 = [v16 indexBufferOffset];
            uint64_t v224 = objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length");
            uint64_t v180 = v131;
            uint64_t v207 = v88;
            MTLReportFailure();
          }
        }
LABEL_244:
        uint64_t v58 = objc_msgSend(v16, "segmentCount", v180);
LABEL_133:
        uint64_t v77 = v58;
        if ((a4 & 2) == 0) {
          goto LABEL_187;
        }
LABEL_186:
        checkPrimitiveData((unint64_t)a1, v16, v77);
        goto LABEL_187;
      }
      MTLReportFailure();
      uint64_t v77 = 0;
      if ((a4 & 2) != 0) {
        goto LABEL_186;
      }
LABEL_187:
      unint64_t v14 = v77 + v235;
      uint64_t v15 = v234 + 1;
    }
    while (v234 + 1 != v233);
    uint64_t v132 = [obj countByEnumeratingWithState:&v261 objects:v271 count:16];
    uint64_t v233 = v132;
  }
  while (v132);
LABEL_251:
  uint64_t result = [v5 usage];
  if ((result & 4) != 0)
  {
    if (v14 >> 30) {
      return MTLReportFailure();
    }
  }
  else if (v14 >> 28)
  {
    return MTLReportFailure();
  }
  return result;
}

uint64_t checkCurveBasis(uint64_t result, uint64_t a2)
{
  switch(result)
  {
    case 0:
      if ((unint64_t)(a2 - 5) <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_13;
      }
      break;
    case 1:
      if (a2 != 4) {
        goto LABEL_13;
      }
      break;
    case 2:
      if (a2 != 2) {
        goto LABEL_13;
      }
      break;
    case 3:
      if ((unint64_t)(a2 - 5) <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_13;
      }
      break;
    default:
LABEL_13:
      uint64_t result = MTLReportFailure();
      break;
  }
  return result;
}

__CFString *MTLDebugStageToString(unint64_t a1)
{
  if (a1 > 6) {
    return @"Unknown";
  }
  else {
    return off_264E13D80[a1];
  }
}

uint64_t MTLRenderStagesToDebugStage(uint64_t a1)
{
  *((void *)&v2 + 1) = a1;
  *(void *)&long long v2 = a1 - 2;
  unint64_t v1 = v2 >> 1;
  if (v1 > 7) {
    return 2;
  }
  else {
    return qword_23BE4ACD0[v1];
  }
}

BOOL MTLDebugStageIsRenderStage(uint64_t a1, unint64_t a2)
{
  switch(a1)
  {
    case 2:
      return a2 < 2;
    case 3:
      BOOL v3 = (a2 & 0xFFFFFFFFFFFFFFFDLL) == 0;
      goto LABEL_8;
    case 4:
      BOOL v3 = (a2 & 0xFFFFFFFFFFFFFFFBLL) == 0;
      goto LABEL_8;
    case 5:
      BOOL v3 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0;
      goto LABEL_8;
    case 6:
      BOOL v3 = (a2 & 0xFFFFFFFFFFFFFFEFLL) == 0;
LABEL_8:
      BOOL result = v3;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void emitRenderPipelineUsage(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    unint64_t v6 = (_DWORD *)MEMORY[0x263F12D18];
    while (1)
    {
      int v7 = *((_DWORD *)v5 + 7);
      if (v7)
      {
        if (!*v6) {
          goto LABEL_7;
        }
        if (*v6 == 1) {
          break;
        }
      }
LABEL_9:
      uint64_t v5 = (uint64_t *)*v5;
      if (!v5) {
        goto LABEL_10;
      }
    }
    printf("\n\nRenderPipelineUsage, pipelineID=%u, vertexShaderID=%u, fragmentShaderID=%u, usageCount=%u", *((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), *((_DWORD *)v5 + 6), v7);
LABEL_7:
    char v8 = [a1 telemetryLog];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((_DWORD *)v5 + 4);
      int v10 = *((_DWORD *)v5 + 5);
      int v11 = *((_DWORD *)v5 + 6);
      int v12 = *((_DWORD *)v5 + 7);
      *(_DWORD *)buf = 67109888;
      int v33 = v9;
      __int16 v34 = 1024;
      *(_DWORD *)unint64_t v35 = v10;
      *(_WORD *)&v35[4] = 1024;
      *(_DWORD *)&v35[6] = v11;
      *(_WORD *)uint64_t v36 = 1024;
      *(_DWORD *)&v36[2] = v12;
      _os_log_impl(&dword_23BD25000, v8, OS_LOG_TYPE_DEFAULT, "RenderPipelineUsage, pipelineID=%u, vertexShaderID=%u, fragmentShaderID=%u, usageCount=%u", buf, 0x1Au);
    }
    goto LABEL_9;
  }
LABEL_10:
  context = (void *)MEMORY[0x23ECD5710]();
  unint64_t v13 = *(uint64_t **)(a3 + 16);
  if (v13)
  {
    while (1)
    {
      unint64_t v14 = (void *)[MEMORY[0x263F089D8] string];
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      uint64_t v15 = (void *)v13[5];
      uint64_t v16 = [v15 countByEnumeratingWithState:&v28 objects:v38 count:16];
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = *(void *)v29;
        do
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            if (*(void *)v29 != v18) {
              objc_enumerationMutation(v15);
            }
            [v14 appendFormat:@"%s=%u, ", objc_msgSend(*(id *)(*((void *)&v28 + 1) + 8 * i), "UTF8String"), objc_msgSend((id)objc_msgSend((id)v13[5], "objectForKey:", *(void *)(*((void *)&v28 + 1) + 8 * i)), "unsignedIntegerValue")];
          }
          uint64_t v17 = [v15 countByEnumeratingWithState:&v28 objects:v38 count:16];
        }
        while (v17);
      }
      if ((unint64_t)[v14 length] >= 2) {
        objc_msgSend(v14, "deleteCharactersInRange:", objc_msgSend(v14, "length") - 2, 2);
      }
      int v20 = *((_DWORD *)v13 + 8);
      if (!v20) {
        goto LABEL_32;
      }
      if (!*MEMORY[0x263F12D18]) {
        goto LABEL_27;
      }
      if (*MEMORY[0x263F12D18] == 1) {
        break;
      }
LABEL_32:
      unint64_t v13 = (uint64_t *)*v13;
      if (!v13) {
        goto LABEL_33;
      }
    }
    if (v13[3] == 1) {
      unint64_t v21 = "vertex";
    }
    else {
      unint64_t v21 = "fragment";
    }
    printf("\n\nFunctionUsage, functionID=%u, type=%s, usageCount=%u, %s", *((_DWORD *)v13 + 4), v21, v20, (const char *)[v14 UTF8String]);
LABEL_27:
    uint64_t v22 = [a1 telemetryLog];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *((_DWORD *)v13 + 4);
      if (v13[3] == 1) {
        uint64_t v24 = "vertex";
      }
      else {
        uint64_t v24 = "fragment";
      }
      int v25 = *((_DWORD *)v13 + 8);
      uint64_t v26 = [v14 UTF8String];
      *(_DWORD *)buf = 67109890;
      int v33 = v23;
      __int16 v34 = 2080;
      *(void *)unint64_t v35 = v24;
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)uint64_t v36 = v25;
      *(_WORD *)&v36[4] = 2080;
      uint64_t v37 = v26;
      _os_log_impl(&dword_23BD25000, v22, OS_LOG_TYPE_DEFAULT, "FunctionUsage, functionID=%u, type=%s, usageCount=%u, %s", buf, 0x22u);
    }
    goto LABEL_32;
  }
LABEL_33:
}

void emitRenderPipelineStats(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  char v8 = (void *)MEMORY[0x23ECD5710]();
  int v9 = (void *)[MEMORY[0x263F089D8] stringWithString:@"VertexFunctionStats, "];
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    int v11 = i + 2;
    if (*((char *)i + 39) < 0) {
      int v11 = (void *)*v11;
    }
    [v9 appendFormat:@"min%s=%u, max%s=%u, avg%s=%f, total%s=%llu, count%s=%u, ", v11, *((unsigned int *)i + 10), v11, *((unsigned int *)i + 11), v11, (float)((float)(unint64_t)i[6] / (float)*((unsigned int *)i + 14)), v11, i[6], v11, *((unsigned int *)i + 14)];
  }
  if ((unint64_t)[v9 length] > 1) {
    objc_msgSend(v9, "deleteCharactersInRange:", objc_msgSend(v9, "length") - 2, 2);
  }
  int v12 = (_DWORD *)MEMORY[0x263F12D18];
  if (*MEMORY[0x263F12D18])
  {
    if (*MEMORY[0x263F12D18] != 1) {
      goto LABEL_12;
    }
    printf("\n\n%s", (const char *)[v9 UTF8String]);
  }
  unint64_t v13 = [a1 telemetryLog];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)unint64_t v55 = [v9 UTF8String];
    _os_log_impl(&dword_23BD25000, v13, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
LABEL_12:
  unint64_t v14 = (void *)[MEMORY[0x263F089D8] stringWithString:@"FragmentFunctionStats, "];
  for (uint64_t j = *(uint64_t **)(a3 + 16); j; uint64_t j = (uint64_t *)*j)
  {
    uint64_t v16 = j + 2;
    if (*((char *)j + 39) < 0) {
      uint64_t v16 = (void *)*v16;
    }
    [v14 appendFormat:@"min%s=%u, max%s=%u, avg%s=%f, total%s=%llu, count%s=%u, ", v16, *((unsigned int *)j + 10), v16, *((unsigned int *)j + 11), v16, (float)((float)(unint64_t)j[6] / (float)*((unsigned int *)j + 14)), v16, j[6], v16, *((unsigned int *)j + 14)];
  }
  if ((unint64_t)[v14 length] > 1) {
    objc_msgSend(v14, "deleteCharactersInRange:", objc_msgSend(v14, "length") - 2, 2);
  }
  if (*v12)
  {
    if (*v12 != 1) {
      goto LABEL_23;
    }
    printf("\n\n%s", (const char *)[v14 UTF8String]);
  }
  uint64_t v17 = [a1 telemetryLog];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = [v14 UTF8String];
    *(_DWORD *)buf = 136315138;
    *(void *)unint64_t v55 = v18;
    _os_log_impl(&dword_23BD25000, v17, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
LABEL_23:
  int v19 = a4[30];
  if (!v19) {
    return;
  }
  if (*v12)
  {
    if (*v12 != 1) {
      return;
    }
    unsigned int v20 = a4[22];
    unint64_t v21 = *((void *)a4 + 10);
    double v22 = 0.0;
    double v23 = 0.0;
    if (v20) {
      double v23 = (float)((float)v21 / (float)v20);
    }
    unsigned int v24 = a4[16];
    if (v24) {
      double v22 = (float)((float)*((unint64_t *)a4 + 7) / (float)v24);
    }
    printf("\n\nRenderPipeline, total=%u, color0Blend=%u, color1Blend=%u, color2Blend=%u, color3Blend=%u, color4Blend=%u, color5Blend=%u, color6Blend=%u, color7Blend=%u, alphaTest=%u, alphaToOne=%u, alphaToCoverage=%u, fragmentUsesDiscard=%u, fragmentWritesSampleMask=%u, fragmentWritesDepth=%u, vertexRegisterSpill=%u, fragmentRegisterSpill=%u, fragmentReadsFramebufferValues=%u, minRasterSampleCount=%u, maxRasterSampleCount=%u, avgRasterSampleCount=%f, totalRasterSampleCount=%llu, countRasterSampleCount=%u, minColorSampleCount=%u, maxColorSampleCount=%u, avgColorSampleCount=%f, totalColorSampleCount=%llu, countColorSampleCount=%u", v19, *a4, a4[1], a4[2], a4[3], a4[4], a4[5], a4[6], a4[7], a4[8], a4[9],
      a4[10],
      a4[24],
      a4[25],
      a4[26],
      a4[27],
      a4[28],
      a4[29],
      a4[18],
      a4[19],
      v23,
      v21,
      v20,
      a4[12],
      a4[13],
      v22,
      *((void *)a4 + 7),
      v24);
  }
  int v25 = [a1 telemetryLog];
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v26 = a4[22];
    unint64_t v27 = *((void *)a4 + 10);
    double v28 = 0.0;
    double v29 = 0.0;
    if (v26) {
      double v29 = (float)((float)v27 / (float)v26);
    }
    int v30 = a4[29];
    int v31 = a4[30];
    int v33 = *a4;
    int v32 = a4[1];
    int v35 = a4[2];
    int v34 = a4[3];
    int v37 = a4[4];
    int v36 = a4[5];
    int v39 = a4[6];
    int v38 = a4[7];
    int v41 = a4[8];
    int v40 = a4[9];
    int v42 = a4[10];
    int v44 = a4[24];
    int v43 = a4[25];
    int v46 = a4[26];
    int v45 = a4[27];
    int v47 = a4[28];
    int v49 = a4[18];
    int v48 = a4[19];
    int v51 = a4[12];
    int v50 = a4[13];
    unsigned int v52 = a4[16];
    unint64_t v53 = *((void *)a4 + 7);
    if (v52) {
      double v28 = (float)((float)v53 / (float)v52);
    }
    *(_DWORD *)buf = 67116032;
    *(_DWORD *)unint64_t v55 = v31;
    *(_WORD *)&v55[4] = 1024;
    *(_DWORD *)&v55[6] = v33;
    __int16 v56 = 1024;
    int v57 = v32;
    __int16 v58 = 1024;
    int v59 = v35;
    __int16 v60 = 1024;
    int v61 = v34;
    __int16 v62 = 1024;
    int v63 = v37;
    __int16 v64 = 1024;
    int v65 = v36;
    __int16 v66 = 1024;
    int v67 = v39;
    __int16 v68 = 1024;
    int v69 = v38;
    __int16 v70 = 1024;
    int v71 = v41;
    __int16 v72 = 1024;
    int v73 = v40;
    __int16 v74 = 1024;
    int v75 = v42;
    __int16 v76 = 1024;
    int v77 = v44;
    __int16 v78 = 1024;
    int v79 = v43;
    __int16 v80 = 1024;
    int v81 = v46;
    __int16 v82 = 1024;
    int v83 = v45;
    __int16 v84 = 1024;
    int v85 = v47;
    __int16 v86 = 1024;
    int v87 = v30;
    __int16 v88 = 1024;
    int v89 = v49;
    __int16 v90 = 1024;
    int v91 = v48;
    __int16 v92 = 2048;
    double v93 = v29;
    __int16 v94 = 2048;
    unint64_t v95 = v27;
    __int16 v96 = 1024;
    unsigned int v97 = v26;
    __int16 v98 = 1024;
    int v99 = v51;
    __int16 v100 = 1024;
    int v101 = v50;
    __int16 v102 = 2048;
    double v103 = v28;
    __int16 v104 = 2048;
    unint64_t v105 = v53;
    __int16 v106 = 1024;
    unsigned int v107 = v52;
    _os_log_impl(&dword_23BD25000, v25, OS_LOG_TYPE_DEFAULT, "RenderPipeline, total=%u, color0Blend=%u, color1Blend=%u, color2Blend=%u, color3Blend=%u, color4Blend=%u, color5Blend=%u, color6Blend=%u, color7Blend=%u, alphaTest=%u, alphaToOne=%u, alphaToCoverage=%u, fragmentUsesDiscard=%u, fragmentWritesSampleMask=%u, fragmentWritesDepth=%u, vertexRegisterSpill=%u, fragmentRegisterSpill=%u, fragmentReadsFramebufferValues=%u, minRasterSampleCount=%u, maxRasterSampleCount=%u, avgRasterSampleCount=%f, totalRasterSampleCount=%llu, countRasterSampleCount=%u, minColorSampleCount=%u, maxColorSampleCount=%u, avgColorSampleCount=%f, totalColorSampleCount=%llu, countColorSampleCount=%u", buf, 0xBAu);
  }
}

void sub_23BDBEF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v11 = operator new(0x20uLL);
  *int v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 7) = 0;
  *(void *)((char *)v11 + 20) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *int v11 = *v20;
LABEL_38:
    *unsigned int v20 = v11;
    goto LABEL_39;
  }
  *int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_23BDBF234(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v11 = operator new(0x30uLL);
  *int v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  unsigned char v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *int v11 = *v20;
LABEL_38:
    *unsigned int v20 = v11;
    goto LABEL_39;
  }
  *int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_23BDBF460(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23BDC072C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BDC07E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BDC08A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto10MTLTexture}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BDC0EA4(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<objc_object  {objcproto15MTLSamplerState}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23BDC0F1C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void addBufferForUsageValidation(MTLGPUDebugHeap *a1, MTLGPUDebugBuffer *a2)
{
  if (*((unsigned char *)&a1->super.super._externalReferences + 4))
  {
    p_enableResourceUsageValidatiouint64_t n = &a1->_enableResourceUsageValidation;
    os_unfair_lock_lock((os_unfair_lock_t)&a1->_enableResourceUsageValidation);
    unsigned int v5 = [(MTLGPUDebugBuffer *)a2 bufferIndex];
    unsigned int v6 = v5;
    p_bufferIndices = &a1->_bufferIndices;
    end = p_bufferIndices->__end_;
    value = p_bufferIndices->__end_cap_.__value_;
    if (end >= value)
    {
      begiuint64_t n = p_bufferIndices->__begin_;
      uint64_t v12 = end - p_bufferIndices->__begin_;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&p_bufferIndices->__end_cap_, v15);
        begiuint64_t n = p_bufferIndices->__begin_;
        end = p_bufferIndices->__end_;
      }
      else
      {
        unint64_t v16 = 0;
      }
      unint64_t v17 = (unsigned int *)&v16[4 * v12];
      size_t v18 = (unsigned int *)&v16[4 * v15];
      *unint64_t v17 = v6;
      int v10 = v17 + 1;
      while (end != begin)
      {
        unsigned int v19 = *--end;
        *--unint64_t v17 = v19;
      }
      p_bufferIndices->__begin_ = v17;
      p_bufferIndices->__end_ = v10;
      p_bufferIndices->__end_cap_.__value_ = v18;
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      unsigned int *end = v5;
      int v10 = end + 1;
    }
    p_bufferIndices->__end_ = v10;
    os_unfair_lock_unlock((os_unfair_lock_t)p_enableResourceUsageValidation);
  }
}

void sub_23BDC119C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void addTextureForUsageValidation(MTLGPUDebugHeap *a1, MTLGPUDebugTexture *a2)
{
  if (*((unsigned char *)&a1->super.super._externalReferences + 4))
  {
    p_textureLocuint64_t k = &a1->_textureLock;
    os_unfair_lock_lock(&a1->_textureLock);
    unsigned int v5 = [(MTLGPUDebugTexture *)a2 gpuIdentifier];
    unint64_t v6 = [(MTLToolsTexture *)a2 textureType];
    p_textureIndicesAndTypes = &a1->_textureIndicesAndTypes;
    value = (char *)p_textureIndicesAndTypes->__end_cap_.__value_;
    end = (char *)p_textureIndicesAndTypes->__end_;
    if (end >= value)
    {
      uint64_t v11 = (end - (char *)p_textureIndicesAndTypes->__begin_) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = value - (char *)p_textureIndicesAndTypes->__begin_;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<NSData *,unsigned long>>>((uint64_t)&p_textureIndicesAndTypes->__end_cap_, v14);
      }
      else {
        unint64_t v15 = 0;
      }
      unint64_t v16 = &v15[16 * v11];
      unint64_t v17 = &v15[16 * v14];
      *(void *)unint64_t v16 = v5;
      *((void *)v16 + 1) = v6;
      int v10 = v16 + 16;
      begiuint64_t n = (char *)p_textureIndicesAndTypes->__begin_;
      size_t v18 = (char *)p_textureIndicesAndTypes->__end_;
      if (v18 != p_textureIndicesAndTypes->__begin_)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
          v16 -= 16;
          v18 -= 16;
        }
        while (v18 != begin);
        size_t v18 = (char *)p_textureIndicesAndTypes->__begin_;
      }
      p_textureIndicesAndTypes->__begin_ = v16;
      p_textureIndicesAndTypes->__end_ = v10;
      p_textureIndicesAndTypes->__end_cap_.__value_ = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(void *)end = v5;
      *((void *)end + 1) = v6;
      int v10 = end + 16;
    }
    p_textureIndicesAndTypes->__end_ = v10;
    os_unfair_lock_unlock(p_textureLock);
  }
}

void sub_23BDC1434(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BDC16BC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BDC1758(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BDC17E8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BDC1878(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BDC19EC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MemberRef::~MemberRef(MemberRef *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    BOOL v3 = (void **)*((void *)this + 2);
    std::vector<MemberRef>::__destroy_vector::operator()[abi:ne180100](&v3);
    MEMORY[0x23ECD5400](v2, 0x20C40960023A9);
  }
}

NSUInteger initMemberWithArrayType(MemberRef *a1, MTLArrayType *a2)
{
  MTLDataType v4 = [(MTLArrayType *)a2 elementType];
  if ((uint64_t)v4 > (uint64_t)MTLDataTypeRenderPipeline)
  {
    switch(v4)
    {
      case MTLDataTypeVisibleFunctionTable:
        int v5 = 8;
        goto LABEL_24;
      case MTLDataTypeIntersectionFunctionTable:
        int v5 = 9;
        goto LABEL_24;
      case MTLDataTypePrimitiveAccelerationStructure:
        int v5 = 10;
        goto LABEL_24;
      case MTLDataTypeInstanceAccelerationStructure:
        int v5 = 11;
        goto LABEL_24;
      default:
        if (v4 == MTLDataTypeComputePipeline)
        {
          int v5 = 6;
        }
        else
        {
          if (v4 != MTLDataTypeIndirectCommandBuffer) {
            goto LABEL_26;
          }
          int v5 = 7;
        }
        break;
    }
    goto LABEL_24;
  }
  if ((uint64_t)v4 > (uint64_t)MTLDataTypeTexture)
  {
    switch(v4)
    {
      case MTLDataTypeSampler:
        int v5 = 2;
        goto LABEL_24;
      case MTLDataTypePointer:
        int v5 = 3;
        goto LABEL_24;
      case MTLDataTypeRenderPipeline:
        int v5 = 5;
        goto LABEL_24;
    }
LABEL_26:
    *(_DWORD *)a1 = 0;
    goto LABEL_25;
  }
  if (v4 == MTLDataTypeStruct)
  {
    *(_DWORD *)a1 = 4;
    operator new();
  }
  if (v4 != MTLDataTypeArray)
  {
    if (v4 == MTLDataTypeTexture)
    {
      int v5 = 1;
LABEL_24:
      *(_DWORD *)a1 = v5;
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  initMemberWithArrayType(a1, [(MTLArrayType *)a2 elementArrayType]);
LABEL_25:
  NSUInteger result = [(MTLArrayType *)a2 arrayLength];
  *((_DWORD *)a1 + 3) *= result;
  return result;
}

uint64_t StructType::initWithStructType(StructType *this, MTLStructType *a2)
{
  unint64_t v4 = [(NSArray *)[(MTLStructType *)a2 members] count];
  std::vector<MemberRef>::resize((uint64_t)this, v4);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      id v7 = [(NSArray *)[(MTLStructType *)a2 members] objectAtIndexedSubscript:v6];
      uint64_t v8 = *(void *)this;
      uint8x8_t v9 = (int *)(*(void *)this + v5);
      v9[1] = [v7 indirectArgumentIndex];
      v9[2] = 1;
      uint64_t v10 = [v7 dataType];
      if (v10 > 78) {
        break;
      }
      if (v10 > 58)
      {
        switch(v10)
        {
          case ';':
            int v11 = 2;
            break;
          case '<':
            *uint8x8_t v9 = 3;
            if (objc_msgSend((id)objc_msgSend(v7, "pointerType"), "elementIsArgumentBuffer")) {
              *(void *)(v8 + v5 + 24) = (id)objc_msgSend((id)objc_msgSend(v7, "pointerType"), "elementStructType");
            }
            goto LABEL_28;
          case 'N':
            int v11 = 5;
            break;
          default:
LABEL_30:
            *uint8x8_t v9 = 0;
            goto LABEL_28;
        }
        goto LABEL_27;
      }
      switch(v10)
      {
        case 1:
          *(_DWORD *)(v8 + v5) = 4;
          operator new();
        case 2:
          initMemberWithArrayType((MemberRef *)v9, (MTLArrayType *)[v7 arrayType]);
          break;
        case 58:
          *uint8x8_t v9 = 1;
          break;
        default:
          goto LABEL_30;
      }
LABEL_28:
      ++v6;
      v5 += 32;
      if (v4 == v6) {
        return (*(_DWORD *)(*(void *)this + 32 * v4 - 28)
      }
                            + *(_DWORD *)(*(void *)this + 32 * v4 - 20) * *(_DWORD *)(*(void *)this + 32 * v4 - 24));
    }
    switch(v10)
    {
      case 's':
        int v11 = 8;
        break;
      case 't':
        int v11 = 9;
        break;
      case 'u':
        int v11 = 10;
        break;
      case 'v':
        int v11 = 11;
        break;
      default:
        if (v10 == 79)
        {
          int v11 = 6;
        }
        else
        {
          if (v10 != 80) {
            goto LABEL_30;
          }
          int v11 = 7;
        }
        break;
    }
LABEL_27:
    *uint8x8_t v9 = v11;
    goto LABEL_28;
  }
  return (*(_DWORD *)(*(void *)this + 32 * v4 - 28)
                      + *(_DWORD *)(*(void *)this + 32 * v4 - 20) * *(_DWORD *)(*(void *)this + 32 * v4 - 24));
}

void std::vector<MemberRef>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = (v3 - *(void *)a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 32 * a2;
      while (v3 != v6)
        MemberRef::~MemberRef((MemberRef *)(v3 - 32));
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<MemberRef>::__append((char **)a1, v5);
  }
}

uint64_t StructType::findMemberContainingIndex(StructType *this, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, _MTLMessageContext *a6)
{
  uint64_t v6 = *(void *)this;
  if (a3 != a4)
  {
    uint64_t v7 = a4;
    while (1)
    {
      uint64_t v8 = (a3 + v7) >> 1;
      uint8x8_t v9 = (_DWORD *)(v6 + 32 * v8);
      unsigned int v10 = v9[1];
      if (v10 <= a2)
      {
        if (v10 + v9[2] * v9[3] - 1 >= a2) {
          return (a3 + v7) >> 1;
        }
        LODWORD(a3) = v8 + 1;
      }
      else
      {
        uint64_t v7 = (v8 - 1);
      }
      if (a3 == v7) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v7 = a3;
LABEL_9:
  int v11 = (_DWORD *)(v6 + 32 * v7);
  unsigned int v12 = v11[1];
  if (v12 > a2 || v12 + v11[3] * v11[2] - 1 < a2) {
    _MTLMessageContextPush_();
  }
  return v7;
}

_DWORD *StructType::findMemberAtIndex(StructType *this, unsigned int a2, unsigned int a3, _MTLMessageContext *a4)
{
  unsigned int v6 = a2;
  uint64_t v7 = this;
  int64_t var0 = a4->var0;
  uint64_t v9 = ((*((void *)this + 1) - *(void *)this) >> 5) - 1;
  while (1)
  {
    unsigned int MemberContainingIndex = StructType::findMemberContainingIndex(this, a2, 0, v9, a3, a4);
    if (a4->var0 != var0) {
      break;
    }
    uint64_t v11 = MemberContainingIndex;
    NSUInteger result = (_DWORD *)(*(void *)v7 + 32 * MemberContainingIndex);
    unsigned int v13 = result[2];
    unsigned int v14 = result[3];
    if (v14) {
      unsigned int v14 = (v6 - result[1]) / v13;
    }
    if (*result != 4) {
      return result;
    }
    uint64_t v15 = *(void *)v7 + 32 * v11;
    uint64_t v7 = *(StructType **)(v15 + 16);
    LODWORD(v15) = *(_DWORD *)(v15 + 4) + v14 * v13;
    v6 -= v15;
    a3 += v15;
    uint64_t v9 = ((*((void *)v7 + 1) - *(void *)v7) >> 5) - 1;
    this = v7;
    a2 = v6;
  }
  return 0;
}

uint64_t StructType::indexRangeIsValueType(StructType *a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, _MTLMessageContext *a6)
{
  unsigned int v8 = a2;
  uint64_t v9 = a1;
  LODWORD(v10) = 0;
  int64_t var0 = a6->var0;
  int v12 = ((*((void *)a1 + 1) - *(void *)a1) >> 5) - 1;
  LODWORD(v13) = v12;
  do
  {
    uint64_t v14 = (v13 + v10 + 1) >> 1;
    uint64_t v15 = (_DWORD *)(*(void *)a1 + 32 * v14);
    unsigned int v16 = v15[1];
    unsigned int v17 = v16 + v15[3] * v15[2] - 1;
    if (v17 >= a3) {
      unsigned int v18 = (v13 + v10 + 1) >> 1;
    }
    else {
      unsigned int v18 = v13;
    }
    if (v16 <= a3) {
      uint64_t v13 = v18;
    }
    else {
      uint64_t v13 = (v14 - 1);
    }
    if (v16 <= a2) {
      unsigned int v19 = v14;
    }
    else {
      unsigned int v19 = v10;
    }
    if (v17 < a2) {
      uint64_t v10 = (v14 + 1);
    }
    else {
      uint64_t v10 = v19;
    }
    BOOL v43 = v12 == v13 - v10;
    int v12 = v13 - v10;
  }
  while (!v43);
  if (v13 >= v10 || (uint64_t result = _MTLMessageContextPush_(), a6->var0 == var0))
  {
    int v49 = v9;
    uint64_t MemberContainingIndex = StructType::findMemberContainingIndex(v9, v8, v10, v13, a4, a6);
    LODWORD(v21) = MemberContainingIndex;
    uint64_t result = StructType::findMemberContainingIndex(v9, a3, MemberContainingIndex, v13, a4, a6);
    if (a6->var0 == var0)
    {
      unsigned int v23 = result;
      if (v21 <= result)
      {
        unsigned int v47 = v8;
        unsigned int v45 = result;
        do
        {
          uint64_t v51 = *(void *)v9;
          unsigned int v24 = (unsigned int *)(*(void *)v9 + 32 * v21);
          if (*v24 == 4)
          {
            unsigned int v27 = v24[2];
            unsigned int v26 = v24 + 2;
            unsigned int v25 = v27;
            unsigned int v28 = *(v26 - 1);
            int v29 = v28 + a4;
            if (v8 >= v28) {
              unsigned int v30 = v8 - v28;
            }
            else {
              unsigned int v30 = 0;
            }
            unsigned int v31 = v28 + v26[1] * v25 - 1;
            if (v31 >= a3) {
              unsigned int v31 = a3;
            }
            int v32 = v31 - v28;
            int v33 = v30 / v25;
            unsigned int v34 = (v31 - v28) / v25;
            unsigned int v35 = v30 / v25 + 1;
            uint64_t v36 = *((void *)v26 + 1);
            if (v35 >= v34)
            {
              uint64_t v37 = a5;
              int v38 = v33 * v25;
              uint64_t v39 = v30 % v25;
              unsigned int v40 = v32 - v33 * v25;
              unsigned int v41 = v25 - 1;
              if (v41 >= v40) {
                uint64_t v42 = v40;
              }
              else {
                uint64_t v42 = v41;
              }
              int v46 = v29;
              uint64_t result = StructType::indexRangeIsValueType(v36, v39, v42, (v38 + v29), v37, a6);
              BOOL v43 = v33 == v34 || v30 == v38;
              a5 = v37;
              unsigned int v23 = v45;
              unsigned int v8 = v47;
              uint64_t v9 = v49;
              if (!v43) {
                uint64_t result = StructType::indexRangeIsValueType(*((void *)v26 + 1), 0, v32 - *v26 * v34, *v26 * v34 + v46, a5, a6);
              }
            }
            else
            {
              uint64_t result = StructType::indexRangeIsValueType(v36, 0, v25 - 1, v29 + v35 * v25, a5, a6);
              unsigned int v8 = v47;
              uint64_t v9 = v49;
            }
          }
          else if (*v24 != a5)
          {
            MemberRef::typeToString(a5);
            MemberRef::typeToString(*v24);
            uint64_t result = _MTLMessageContextPush_();
          }
          if (v21 == v23)
          {
            LODWORD(v21) = v21 + 1;
          }
          else
          {
            int v44 = *(_DWORD *)(v51 + 32 * v21 + 4)
                + *(_DWORD *)(v51 + 32 * v21 + 12) * *(_DWORD *)(v51 + 32 * v21 + 8);
            uint64_t v21 = (v21 + 1);
            if (v44 != *(_DWORD *)(*(void *)v9 + 32 * v21 + 4)) {
              uint64_t result = _MTLMessageContextPush_();
            }
          }
        }
        while (v21 <= v23);
      }
    }
  }
  return result;
}

__CFString *MemberRef::typeToString(unsigned int a1)
{
  if (a1 >= 0xC) {
    abort();
  }
  return off_264E13DE0[a1];
}

StructType *StructType::indexRangeIsValueType(StructType *result, unint64_t *a2, uint64_t a3, _MTLMessageContext *a4)
{
  unint64_t v4 = a2[1];
  if (v4)
  {
    unsigned int v6 = (_DWORD *)(*(void *)result + 32 * (((*((void *)result + 1) - *(void *)result) >> 5) - 1));
    unint64_t v7 = (v6[1] + v6[3] * v6[2] - 1);
    unint64_t v8 = *a2;
    unint64_t v9 = v4 + v8 - 1;
    if (v8 < *(unsigned int *)(*(void *)result + 4) || v9 > v7)
    {
      return (StructType *)_MTLMessageContextPush_();
    }
    else
    {
      return (StructType *)StructType::indexRangeIsValueType(result, v8, v9, 0, a3, a4);
    }
  }
  return result;
}

uint64_t StructType::indexIsValueType(StructType *a1, unint64_t a2, uint64_t a3, _MTLMessageContext *a4)
{
  unint64_t v4 = (_DWORD *)(*(void *)a1 + 32 * (((*((void *)a1 + 1) - *(void *)a1) >> 5) - 1));
  unint64_t v5 = (v4[1] + v4[3] * v4[2] - 1);
  if (*(unsigned int *)(*(void *)a1 + 4) > a2 || v5 < a2) {
    return _MTLMessageContextPush_();
  }

  return StructType::indexRangeIsValueType(a1, a2, a2, 0, a3, a4);
}

void sub_23BDC5898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BDC5AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BDC5D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MemberRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        MemberRef::~MemberRef((MemberRef *)(v4 - 32));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<MemberRef>::__append(char **a1, unint64_t a2)
{
  unsigned int v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (uint64_t)&v6[-v7] >> 5)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 12) = 1;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    uint64_t v8 = v7 - (void)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v26 = result;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MemberRef>>(result, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = &v13[32 * v10];
    unsigned int v16 = &v15[32 * a2];
    unsigned int v17 = v15;
    do
    {
      *(void *)unsigned int v17 = 0;
      *((void *)v17 + 1) = 0;
      *((_DWORD *)v17 + 3) = 1;
      *((void *)v17 + 2) = 0;
      *((void *)v17 + 3) = 0;
      v17 += 32;
    }
    while (v17 != v16);
    unsigned int v19 = *a1;
    unint64_t v18 = (unint64_t)a1[1];
    if ((char *)v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64(v18);
    }
    else
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 16);
        *((_OWORD *)v15 - 2) = *(_OWORD *)(v18 - 32);
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while ((char *)v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
    }
    *a1 = v15;
    a1[1] = v16;
    int64x2_t v24 = v21;
    double v22 = a1[2];
    a1[2] = &v13[32 * v12];
    unsigned int v25 = v22;
    uint64_t v23 = v21.i64[0];
    return std::__split_buffer<MemberRef>::~__split_buffer((uint64_t)&v23);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MemberRef>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<MemberRef>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    MemberRef::~MemberRef((MemberRef *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void CheckerboardRenderTargetPipelineCache::init(CheckerboardRenderTargetPipelineCache *this, MTLDebugDevice *a2)
{
  unint64_t v4 = (void *)MEMORY[0x23ECD5710]();
  unint64_t v5 = (MTLLibrary *)objc_msgSend(-[MTLToolsObject baseObject](a2, "baseObject"), "newLibraryWithURL:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x263F086E0], "bundleWithIdentifier:", @"com.apple.gpusw.MetalTools"), "URLForResource:withExtension:", @"MTLDebugShaders", @"metallib"), 0);
  this->_library = v5;
  this->_vertexFunctiouint64_t n = (MTLFunction *)[(MTLLibrary *)v5 newFunctionWithName:@"simple_vertex"];
  this->_fConstants = (MTLFunctionConstantValues *)objc_alloc_init(MEMORY[0x263F128B0]);
  id v6 = objc_alloc_init(MEMORY[0x263F128A0]);
  [v6 setDepthCompareFunction:7];
  [v6 setDepthWriteEnabled:0];
  this->_depthStencilState[0] = (MTLDepthStencilState *)objc_msgSend((id)-[MTLLibrary device](this->_library, "device"), "newDepthStencilStateWithDescriptor:", v6);
  [v6 setDepthWriteEnabled:1];
  this->_depthStencilState[1] = (MTLDepthStencilState *)objc_msgSend((id)-[MTLLibrary device](this->_library, "device"), "newDepthStencilStateWithDescriptor:", v6);
}

unint64_t _validateTextureBufferDescriptor(void *a1, void *a2)
{
  unint64_t v4 = [a1 width];
  if (v4 > [a2 maxTextureBufferWidth])
  {
    uint64_t v8 = [a1 width];
    uint64_t v14 = [a2 maxTextureBufferWidth];
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "height", v8, v14) != 1)
  {
    uint64_t v9 = [a1 height];
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "depth", v9) != 1)
  {
    uint64_t v10 = [a1 depth];
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "mipmapLevelCount", v10) != 1)
  {
    uint64_t v11 = [a1 mipmapLevelCount];
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "sampleCount", v11) != 1)
  {
    uint64_t v12 = [a1 sampleCount];
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "arrayLength", v12) != 1)
  {
    uint64_t v13 = [a1 arrayLength];
    _MTLMessageContextPush_();
  }
  if (!objc_msgSend(a1, "usage", v13)) {
    _MTLMessageContextPush_();
  }
  if (([a1 usage] & 4) != 0) {
    _MTLMessageContextPush_();
  }
  char v5 = [a1 usage];
  if (!([a1 usage] & 2 | v5 & 1)) {
    _MTLMessageContextPush_();
  }
  [a1 pixelFormat];
  MTLPixelFormatGetInfoForDevice();
  unint64_t result = [a1 pixelFormat];
  char v7 = result - 62;
  if (result - 62 > 0x3F) {
    goto LABEL_29;
  }
  if (((1 << v7) & 0xE03D0E0000001D0FLL) != 0) {
    return result;
  }
  if (((1 << v7) & 0x70000000) != 0)
  {
    unint64_t result = [a1 usage];
    if ((result & 2) != 0)
    {
      unint64_t result = [a2 supportsPacked32TextureBufferWrites];
      if ((result & 1) == 0) {
        return _MTLMessageContextPush_();
      }
    }
    return result;
  }
  if (result != 80)
  {
LABEL_29:
    if (result > 0x3C || ((1 << result) & 0x10E0000743D07402) == 0) {
      return _MTLMessageContextPush_();
    }
    return result;
  }
  unint64_t result = [a1 usage];
  if ((result & 2) != 0) {
    return _MTLMessageContextPush_();
  }
  return result;
}

BOOL validateSharedTextureHandleWithDevice(void *a1, void *a2)
{
  if (!a1) {
    MTLReportFailure();
  }
  unint64_t v4 = (__IOSurface *)[a1 ioSurface];
  if (!v4) {
    MTLReportFailure();
  }
  char v5 = (void *)IOSurfaceCopyValue(v4, (CFStringRef)*MEMORY[0x263F0EDA8]);
  if (!v5) {
    MTLReportFailure();
  }
  id v6 = (void *)MEMORY[0x263F12CA8];
  uint64_t v7 = [v5 objectForKeyedSubscript:*MEMORY[0x263F12CA8]];
  if (v7)
  {
    uint64_t v8 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *v6), "unsignedLongLongValue");
    if ([a2 registryID] != v8) {
      MTLReportFailure();
    }
  }
  else
  {
  }
  return v7 != 0;
}

void sub_23BDCA560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23BDCB698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CheckerboardRenderTargetPipelineCache::getColorPipelineState(uint64_t a1, void *a2, unint64_t *a3)
{
  char v5 = 0;
  uint64_t v6 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v23 = *a3;
  do
  {
    uint64_t v7 = objc_msgSend((id)objc_msgSend(a2, "colorAttachments"), "objectAtIndexedSubscript:", v6);
    uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "texture"), "pixelFormat");
    uint64_t v9 = [v7 storeAction];
    v26[v6] = v8;
    if (v8 && !v9)
    {
      uint64_t v22 = 0;
      memset(v21, 0, sizeof(v21));
      [*(id *)(a1 + 8) device];
      MTLPixelFormatGetInfoForDevice();
      v24 &= ~(3 << v5);
    }
    ++v6;
    v5 += 2;
  }
  while (v6 != 8);
  uint64_t v25 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "depthAttachment"), "texture"), "pixelFormat");
  if (v25)
  {
    if (objc_msgSend((id)objc_msgSend(a2, "depthAttachment"), "storeAction"))
    {
      if (!v24) {
        return 0;
      }
    }
    else
    {
      v24 |= 0x10000uLL;
    }
  }
  else if (!v24)
  {
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v11 = std::__hash_table<std::__hash_value_type<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*>,std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,MTLDebugCheckerboardFillHashKey::Hash,std::equal_to<MTLDebugCheckerboardFillHashKey>,true>,std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}*>>::find<MTLDebugCheckerboardFillHashKey>((void *)(a1 + 48), &v23);
  if (v11)
  {
    uint64_t v10 = v11[13];
  }
  else
  {
    *(void *)&v21[0] = v24;
    [*(id *)(a1 + 40) setConstantValue:v21 type:33 atIndex:0];
    [*(id *)(a1 + 40) setConstantValue:(char *)v21 + 4 type:33 atIndex:1];
    uint64_t v12 = (void *)[*(id *)(a1 + 8) newFunctionWithName:@"fill_checkboard_fragment" constantValues:*(void *)(a1 + 40) error:0];
    id v13 = objc_alloc_init(MEMORY[0x263F129C0]);
    [v13 setVertexFunction:*(void *)(a1 + 16)];
    [v13 setFragmentFunction:v12];
    char v14 = 0;
    char v15 = 0;
    for (uint64_t i = 0; i != 8; ++i)
    {
      unsigned int v17 = objc_msgSend((id)objc_msgSend(v13, "colorAttachments"), "objectAtIndexedSubscript:", i);
      [v17 setPixelFormat:v26[i]];
      if (((v24 >> v15) & 3) != 0) {
        uint64_t v18 = (v23 >> v14) & 0xF;
      }
      else {
        uint64_t v18 = 0;
      }
      [v17 setWriteMask:v18];
      v15 += 2;
      v14 += 4;
    }
    [v13 setDepthAttachmentPixelFormat:v25];
    uint64_t v20 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "device"), "newRenderPipelineStateWithDescriptor:error:", v13, 0);
    std::__hash_table<std::__hash_value_type<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*>,std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,MTLDebugCheckerboardFillHashKey::Hash,std::equal_to<MTLDebugCheckerboardFillHashKey>,true>,std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}*>>::__emplace_unique_key_args<MTLDebugCheckerboardFillHashKey,MTLDebugCheckerboardFillHashKey&,objc_object  {objcproto22MTLRenderPipelineState}&>(a1 + 48, &v23, (uint64_t)&v23, &v20);

    uint64_t v10 = v20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v10;
}

void sub_23BDCF9D4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*>,std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,MTLDebugCheckerboardFillHashKey::Hash,std::equal_to<MTLDebugCheckerboardFillHashKey>,true>,std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}*>>::find<MTLDebugCheckerboardFillHashKey>(void *a1, void *a2)
{
  unsigned int v4 = _MTLHashState();
  unint64_t v5 = a1[1];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v5 <= v4) {
      unint64_t v9 = v4 % v5;
    }
  }
  else
  {
    unint64_t v9 = (v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (MTLDebugCheckerboardFillHashKey::operator==(v11 + 2, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= v5) {
            v12 %= v5;
          }
        }
        else
        {
          v12 &= v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL MTLDebugCheckerboardFillHashKey::operator==(void *a1, void *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 3;
  do
  {
    uint64_t v4 = v3[v2];
    uint64_t v5 = a2[v2 + 3];
    BOOL result = v4 == v5;
    if (v4 != v5) {
      break;
    }
  }
  while (v2++ != 7);
  return result;
}

void *std::__hash_table<std::__hash_value_type<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*>,std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,MTLDebugCheckerboardFillHashKey::Hash,std::equal_to<MTLDebugCheckerboardFillHashKey>,true>,std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}*>>::__emplace_unique_key_args<MTLDebugCheckerboardFillHashKey,MTLDebugCheckerboardFillHashKey&,objc_object  {objcproto22MTLRenderPipelineState}&>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v9 = _MTLHashState();
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v11 <= v9) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      char v15 = *v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (MTLDebugCheckerboardFillHashKey::operator==(v15 + 2, a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          char v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  char v15 = operator new(0x70uLL);
  *char v15 = 0;
  v15[1] = v10;
  long long v17 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v15 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v15 + 4) = v17;
  *((_OWORD *)v15 + 5) = *(_OWORD *)(a3 + 64);
  uint64_t v18 = *(void *)(a3 + 80);
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v19;
  uint64_t v20 = *a4;
  v15[12] = v18;
  v15[13] = v20;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v26);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v27 = *(void *)a1;
  unsigned int v28 = *(void **)(*(void *)a1 + 8 * v4);
  if (v28)
  {
    *char v15 = *v28;
LABEL_38:
    void *v28 = v15;
    goto LABEL_39;
  }
  *char v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v27 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v29 = *(void *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11) {
        v29 %= v11;
      }
    }
    else
    {
      v29 &= v11 - 1;
    }
    unsigned int v28 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_23BDD0AD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void CheckerboardRenderTargetPipelineCache::~CheckerboardRenderTargetPipelineCache(CheckerboardRenderTargetPipelineCache *this)
{
  for (uint64_t i = &this->_cache.__table_.__p1_; ; i[13].__value_.__next_)
  {
    uint64_t i = (__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>>> *)i->__value_.__next_;
    if (!i) {
      break;
    }
  }

  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)&this->_cache);
}

void *std::__hash_table<MTLDebugCommandBuffer *,std::hash<MTLDebugCommandBuffer *>,std::equal_to<MTLDebugCommandBuffer *>,std::allocator<MTLDebugCommandBuffer *>>::__emplace_unique_key_args<MTLDebugCommandBuffer *,MTLDebugCommandBuffer * const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  float v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *float v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    float v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BDD0DA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__CFString *MTLDebugFunctionArgumentTypeToString(unint64_t a1)
{
  if (a1 > 6) {
    return &stru_26EF29A78;
  }
  else {
    return off_264E13F30[a1];
  }
}

__CFString *argumentFormattedDescription(uint64_t a1, uint64_t a2)
{
  v31[8] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 4;
  uint64_t v4 = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  if (!*(unsigned char *)a2) {
    return @"<null>";
  }
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = v4;
  switch(v6)
  {
    case 0:
      unint64_t v8 = NSString;
      v31[0] = v4;
      v31[1] = @"buffer =";
      size_t v19 = *(void **)(a2 + 16);
      if (v19) {
        uint64_t v20 = (__CFString *)[v19 formattedDescription:v3];
      }
      else {
        uint64_t v20 = @"<null>";
      }
      v31[2] = v20;
      unsigned char v31[3] = v7;
      v31[4] = @"bufferOffset =";
      v31[5] = [NSNumber numberWithUnsignedInteger:*(void *)(a2 + 40)];
      unsigned char v31[6] = @"bufferAttributeStride =";
      v31[7] = [NSNumber numberWithUnsignedInteger:*(void *)(a2 + 48)];
      float v14 = (void *)MEMORY[0x263EFF8C0];
      float v15 = v31;
      uint64_t v16 = 8;
      goto LABEL_31;
    case 1:
      unint64_t v8 = NSString;
      v30[0] = v4;
      v30[1] = @"texture =";
      float v21 = *(void **)(a2 + 16);
      if (v21) {
        unint64_t v22 = (__CFString *)[v21 formattedDescription:v3];
      }
      else {
        unint64_t v22 = @"<null>";
      }
      v30[2] = v22;
      void v30[3] = v7;
      v30[4] = @"baseLevel =";
      v30[5] = [NSNumber numberWithUnsignedInteger:*(void *)(a2 + 24)];
      float v14 = (void *)MEMORY[0x263EFF8C0];
      float v15 = v30;
      uint64_t v16 = 6;
      goto LABEL_31;
    case 2:
      unint64_t v8 = NSString;
      if (*(unsigned char *)(a2 + 72))
      {
        v29[0] = v4;
        v29[1] = @"sampler =";
        unint64_t v17 = *(void **)(a2 + 16);
        if (v17) {
          unint64_t v18 = (__CFString *)[v17 formattedDescription:v3];
        }
        else {
          unint64_t v18 = @"<null>";
        }
        void v29[2] = v18;
        v29[3] = v7;
        v29[4] = @"lodMinClamp =";
        LODWORD(v5) = *(_DWORD *)(a2 + 76);
        v29[5] = [NSNumber numberWithFloat:v5];
        v29[6] = v7;
        unsigned char v29[7] = @"lodMaxClamp =";
        LODWORD(v25) = *(_DWORD *)(a2 + 80);
        v29[8] = [NSNumber numberWithFloat:v25];
        float v14 = (void *)MEMORY[0x263EFF8C0];
        float v15 = v29;
        uint64_t v16 = 9;
      }
      else
      {
        v28[0] = v4;
        v28[1] = @"sampler =";
        BOOL v23 = *(void **)(a2 + 16);
        if (v23) {
          unint64_t v24 = (__CFString *)[v23 formattedDescription:v3];
        }
        else {
          unint64_t v24 = @"<null>";
        }
        void v28[2] = v24;
        float v14 = (void *)MEMORY[0x263EFF8C0];
        float v15 = v28;
LABEL_30:
        uint64_t v16 = 3;
      }
LABEL_31:
      BOOL result = (__CFString *)[v8 stringWithFormat:@"%@", objc_msgSend((id)objc_msgSend(v14, "arrayWithObjects:count:", v15, v16), "componentsJoinedByString:", @" "];
      break;
    case 3:
      unint64_t v8 = NSString;
      v27[0] = v4;
      v27[1] = @"threadgroupMemoryLength =";
      v27[2] = [NSNumber numberWithUnsignedInteger:*(void *)(a2 + 56)];
      float v14 = (void *)MEMORY[0x263EFF8C0];
      float v15 = v27;
      goto LABEL_30;
    case 4:
    case 5:
    case 6:
      unint64_t v8 = NSString;
      v26[0] = v4;
      unint64_t v9 = v6 - 4;
      if (v9 > 2) {
        uint8x8_t v10 = &stru_26EF29A78;
      }
      else {
        uint8x8_t v10 = off_264E13F68[v9];
      }
      v26[1] = v10;
      unsigned char v26[2] = @"=";
      uint8x8_t v12 = *(void **)(a2 + 16);
      if (v12) {
        unint64_t v13 = (__CFString *)[v12 formattedDescription:v3];
      }
      else {
        unint64_t v13 = @"<null>";
      }
      void v26[3] = v13;
      float v14 = (void *)MEMORY[0x263EFF8C0];
      float v15 = v26;
      uint64_t v16 = 4;
      goto LABEL_31;
    default:
      return &stru_26EF29A78;
  }
  return result;
}

void emitDispatchDistribution(MTLTelemetryDevice *a1, MTLTelemetryDispatchDistributionRec *a2)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)MEMORY[0x263F12D18];
  int v5 = *MEMORY[0x263F12D18];
  if (*MEMORY[0x263F12D18])
  {
    if (v5 != 1) {
      goto LABEL_13;
    }
    computeEncoderDispatchDistributiouint64_t n = a1->computeEncoderDispatchDistribution;
    miuint64_t n = computeEncoderDispatchDistribution->min;
    unsigned int max = computeEncoderDispatchDistribution->max;
    unsigned int count = computeEncoderDispatchDistribution->count;
    unint64_t total = computeEncoderDispatchDistribution->total;
    if (count) {
      float v11 = (float)total / (float)count;
    }
    else {
      float v11 = 0.0;
    }
    printf("\n\nDispatchesPerComputeEncoder, minDispatches=%u, maxDispatches=%u, avgDispatches=%f, totalDispatches=%llu, countDispatches=%u", min, max, v11, total, count);
  }
  uint8x8_t v12 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v13 = a1->computeEncoderDispatchDistribution;
    unsigned int v15 = v13->min;
    unsigned int v14 = v13->max;
    unsigned int v16 = v13->count;
    unint64_t v17 = v13->total;
    if (v16) {
      float v18 = (float)v17 / (float)v16;
    }
    else {
      float v18 = 0.0;
    }
    *(_DWORD *)buf = 67110144;
    unsigned int v118 = v15;
    __int16 v119 = 1024;
    unsigned int v120 = v14;
    __int16 v121 = 2048;
    double v122 = v18;
    __int16 v123 = 2048;
    unint64_t v124 = v17;
    __int16 v125 = 1024;
    unsigned int v126 = v16;
    _os_log_impl(&dword_23BD25000, (os_log_t)v12, OS_LOG_TYPE_DEFAULT, "DispatchesPerComputeEncoder, minDispatches=%u, maxDispatches=%u, avgDispatches=%f, totalDispatches=%llu, countDispatches=%u", buf, 0x28u);
  }
  int v5 = *v4;
LABEL_13:
  if (v5)
  {
    if (v5 != 1) {
      goto LABEL_24;
    }
    commandBufferDispatchDistributiouint64_t n = a1->commandBufferDispatchDistribution;
    unsigned int v20 = commandBufferDispatchDistribution->min;
    unsigned int v21 = commandBufferDispatchDistribution->max;
    unsigned int v22 = commandBufferDispatchDistribution->count;
    unint64_t v23 = commandBufferDispatchDistribution->total;
    if (v22) {
      float v24 = (float)v23 / (float)v22;
    }
    else {
      float v24 = 0.0;
    }
    printf("\n\nComputeDispatchesPerCommandBuffer, minDispatches=%u, maxDispatches=%u, avgDispatches=%f, totalDispatches=%llu, countDispatches=%u", v20, v21, v24, v23, v22);
  }
  double v25 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_DEFAULT))
  {
    size_t v26 = a1->commandBufferDispatchDistribution;
    unsigned int v28 = v26->min;
    unsigned int v27 = v26->max;
    unsigned int v29 = v26->count;
    unint64_t v30 = v26->total;
    if (v29) {
      float v31 = (float)v30 / (float)v29;
    }
    else {
      float v31 = 0.0;
    }
    *(_DWORD *)buf = 67110144;
    unsigned int v118 = v28;
    __int16 v119 = 1024;
    unsigned int v120 = v27;
    __int16 v121 = 2048;
    double v122 = v31;
    __int16 v123 = 2048;
    unint64_t v124 = v30;
    __int16 v125 = 1024;
    unsigned int v126 = v29;
    _os_log_impl(&dword_23BD25000, (os_log_t)v25, OS_LOG_TYPE_DEFAULT, "ComputeDispatchesPerCommandBuffer, minDispatches=%u, maxDispatches=%u, avgDispatches=%f, totalDispatches=%llu, countDispatches=%u", buf, 0x28u);
  }
LABEL_24:
  if (!a2->var0) {
    return;
  }
  if (*v4)
  {
    if (*v4 != 1) {
      return;
    }
    unsigned int v32 = a2->var1.count;
    float v33 = 0.0;
    float v34 = 0.0;
    if (v32) {
      float v34 = (float)a2->var1.total / (float)v32;
    }
    unsigned int v35 = a2->var2.count;
    if (v35) {
      float v33 = (float)a2->var2.total / (float)v35;
    }
    unsigned int v36 = a2->var3.count;
    unint64_t v37 = a2->var3.total;
    float v38 = 0.0;
    float v39 = 0.0;
    if (v36) {
      float v39 = (float)v37 / (float)v36;
    }
    unsigned int v40 = a2->var4.count;
    unint64_t v41 = a2->var4.total;
    if (v40) {
      float v38 = (float)v41 / (float)v40;
    }
    unsigned int v42 = a2->var5.count;
    unint64_t v43 = a2->var5.total;
    float v44 = 0.0;
    float v45 = 0.0;
    if (v42) {
      float v45 = (float)v43 / (float)v42;
    }
    unsigned int v46 = a2->var6.count;
    unint64_t v47 = a2->var6.total;
    if (v46) {
      float v44 = (float)v47 / (float)v46;
    }
    unsigned int v48 = a2->var7.count;
    unint64_t v49 = a2->var7.total;
    double v50 = 0.0;
    double v51 = 0.0;
    if (v48) {
      double v51 = (float)((float)v49 / (float)v48);
    }
    unsigned int v52 = a2->var8.count;
    unint64_t v53 = a2->var8.total;
    if (v52) {
      double v50 = (float)((float)v53 / (float)v52);
    }
    unsigned int v54 = a2->var9.count;
    unint64_t v55 = a2->var9.total;
    double v56 = 0.0;
    double v57 = 0.0;
    if (v54) {
      double v57 = (float)((float)v55 / (float)v54);
    }
    double v58 = v34;
    double v59 = v33;
    double v60 = v39;
    double v61 = v38;
    double v62 = v45;
    double v63 = v44;
    unsigned int v64 = a2->var10.count;
    if (v64) {
      double v56 = (float)((float)a2->var10.total / (float)v64);
    }
    printf("\n\nDispatch, minThreadGroupsPerGridWidth=%u, maxThreadGroupsPerGridWidth=%u, avgThreadGroupsPerGridWidth=%f, totalThreadGroupsPerGridWidth=%llu, countThreadGroupsPerGridWidth=%u, minThreadGroupsPerGridHeight=%u, maxThreadGroupsPerGridHeight=%u, avgThreadGroupsPerGridHeight=%f, totalThreadGroupsPerGridHeight=%llu, countThreadGroupsPerGridHeight=%u, minThreadGroupsPerGridDepth=%u, maxThreadGroupsPerGridDepth=%u, avgThreadGroupsPerGridDepth=%f, totalThreadGroupsPerGridDepth=%llu, countThreadGroupsPerGridDepth=%u, minThreadsPerGridWidth=%u, maxThreadsPerGridWidth=%u, avgThreadsPerGridWidth=%f, totalThreadsPerGridWidth=%llu, countThreadsPerGridWidth=%u, minThreadsPerGridHeight=%u, maxThreadsPerGridHeight=%u, avgThreadsPerGridHeight=%f, totalThreadsPerGridHeight=%llu, countThreadsPerGridHeight=%u, minThreadsPerGridDepth=%u, maxThreadsPerGridDepth=%u, avgThreadsPerGridDepth=%f, totalThreadsPerGridDepth=%llu, countThreadsPerGridDepth=%u, minThreadsPerGroupWidth=%u, maxThreadsPerGroupWidth=%u, avgThreadsPerGroupWidth=%f, totalThreadsPerGroupWidth=%llu, countThreadsPerGroupWidth=%u, minThreadsPerGroupHeight=%u, maxThreadsPerGroupHeight=%u, avgThreadsPerGroupHeight=%f, totalThreadsPerGroupHeight=%llu, countThreadsPerGroupHeight=%u, minThreadsPerGroupDepth=%u, maxThreadsPerGroupDepth=%u, avgThreadsPerGroupDepth=%f, totalThreadsPerGroupDepth=%llu, countThreadsPerGroupDepth=%u, minThreadGroupMemoryLength=%u, maxThreadGroupMemoryLength=%u, avgThreadGroupMemoryLength=%f, totalThreadGroupMemoryLength=%llu, countThreadGroupMemoryLength=%u", a2->var1.min, a2->var1.max, v58,
      a2->var1.total,
      v32,
      a2->var2.min,
      a2->var2.max,
      v59,
      a2->var2.total,
      v35,
      a2->var3.min,
      a2->var3.max,
      v60,
      v37,
      v36,
      a2->var4.min,
      a2->var4.max,
      v61,
      v41,
      v40,
      a2->var5.min,
      a2->var5.max,
      v62,
      v43,
      v42,
      a2->var6.min,
      a2->var6.max,
      v63,
      v47,
      v46,
      a2->var7.min,
      a2->var7.max,
      v51,
      v49,
      v48,
      a2->var8.min,
      a2->var8.max,
      v50,
      v53,
      v52,
      a2->var9.min,
      a2->var9.max,
      v57,
      v55,
      v54,
      a2->var10.min,
      a2->var10.max,
      v56,
      a2->var10.total,
      v64);
  }
  int v65 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v65, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v66 = a2->var1.count;
    double v67 = 0.0;
    double v68 = 0.0;
    if (v66) {
      double v68 = (float)((float)a2->var1.total / (float)v66);
    }
    unsigned int v69 = a2->var2.count;
    if (v69) {
      double v67 = (float)((float)a2->var2.total / (float)v69);
    }
    unint64_t v109 = a2->var2.total;
    unint64_t v113 = a2->var1.total;
    unsigned int v70 = a2->var3.count;
    double v71 = 0.0;
    double v72 = 0.0;
    if (v70) {
      double v72 = (float)((float)a2->var3.total / (float)v70);
    }
    unint64_t v107 = a2->var3.total;
    unsigned int v73 = a2->var4.count;
    if (v73) {
      double v71 = (float)((float)a2->var4.total / (float)v73);
    }
    unsigned int v74 = a2->var5.count;
    double v75 = 0.0;
    double v76 = 0.0;
    if (v74) {
      double v76 = (float)((float)a2->var5.total / (float)v74);
    }
    unsigned int v77 = a2->var6.count;
    if (v77) {
      double v75 = (float)((float)a2->var6.total / (float)v77);
    }
    unsigned int v78 = a2->var7.count;
    double v79 = 0.0;
    double v80 = 0.0;
    if (v78) {
      double v80 = (float)((float)a2->var7.total / (float)v78);
    }
    unsigned int v81 = a2->var8.count;
    if (v81) {
      double v79 = (float)((float)a2->var8.total / (float)v81);
    }
    unint64_t v110 = a2->var8.total;
    unint64_t v111 = a2->var7.total;
    unint64_t v112 = a2->var6.total;
    unint64_t v114 = a2->var5.total;
    unint64_t v115 = a2->var4.total;
    log = v65;
    unsigned int v82 = a2->var9.count;
    double v83 = 0.0;
    double v84 = 0.0;
    if (v82) {
      double v84 = (float)((float)a2->var9.total / (float)v82);
    }
    unint64_t v108 = a2->var9.total;
    unsigned int v85 = a2->var1.min;
    unsigned int v86 = a2->var1.max;
    unsigned int v87 = a2->var2.min;
    unsigned int v88 = a2->var2.max;
    unsigned int v90 = a2->var3.min;
    unsigned int v89 = a2->var3.max;
    unsigned int v92 = a2->var4.min;
    unsigned int v91 = a2->var4.max;
    unsigned int v93 = a2->var5.min;
    unsigned int v94 = a2->var5.max;
    unsigned int v96 = a2->var6.min;
    unsigned int v95 = a2->var6.max;
    unsigned int v98 = a2->var7.min;
    unsigned int v97 = a2->var7.max;
    unsigned int v100 = a2->var8.min;
    unsigned int v99 = a2->var8.max;
    unsigned int v103 = a2->var9.min;
    unsigned int v104 = a2->var9.max;
    unsigned int v105 = a2->var10.min;
    unsigned int v106 = a2->var10.max;
    unsigned int v101 = a2->var10.count;
    unint64_t v102 = a2->var10.total;
    if (v101) {
      double v83 = (float)((float)v102 / (float)v101);
    }
    unsigned int v118 = v85;
    unsigned int v120 = v86;
    unint64_t v124 = v113;
    unsigned int v126 = v66;
    unsigned int v128 = v87;
    unsigned int v130 = v88;
    unint64_t v134 = v109;
    unsigned int v136 = v69;
    unsigned int v138 = v90;
    unsigned int v140 = v89;
    unint64_t v144 = v107;
    *(_DWORD *)buf = 67121664;
    unsigned int v146 = v70;
    __int16 v119 = 1024;
    unsigned int v148 = v92;
    __int16 v121 = 2048;
    double v122 = v68;
    __int16 v123 = 2048;
    __int16 v125 = 1024;
    __int16 v127 = 1024;
    __int16 v129 = 1024;
    __int16 v131 = 2048;
    double v132 = v67;
    __int16 v133 = 2048;
    __int16 v135 = 1024;
    __int16 v137 = 1024;
    __int16 v139 = 1024;
    __int16 v141 = 2048;
    double v142 = v72;
    __int16 v143 = 2048;
    __int16 v145 = 1024;
    __int16 v147 = 1024;
    __int16 v149 = 1024;
    unsigned int v150 = v91;
    __int16 v151 = 2048;
    double v152 = v71;
    __int16 v153 = 2048;
    unint64_t v154 = v115;
    __int16 v155 = 1024;
    unsigned int v156 = v73;
    __int16 v157 = 1024;
    unsigned int v158 = v93;
    __int16 v159 = 1024;
    unsigned int v160 = v94;
    __int16 v161 = 2048;
    double v162 = v76;
    __int16 v163 = 2048;
    unint64_t v164 = v114;
    __int16 v165 = 1024;
    unsigned int v166 = v74;
    __int16 v167 = 1024;
    unsigned int v168 = v96;
    __int16 v169 = 1024;
    unsigned int v170 = v95;
    __int16 v171 = 2048;
    double v172 = v75;
    __int16 v173 = 2048;
    unint64_t v174 = v112;
    __int16 v175 = 1024;
    unsigned int v176 = v77;
    __int16 v177 = 1024;
    unsigned int v178 = v98;
    __int16 v179 = 1024;
    unsigned int v180 = v97;
    __int16 v181 = 2048;
    double v182 = v80;
    __int16 v183 = 2048;
    unint64_t v184 = v111;
    __int16 v185 = 1024;
    unsigned int v186 = v78;
    __int16 v187 = 1024;
    unsigned int v188 = v100;
    __int16 v189 = 1024;
    unsigned int v190 = v99;
    __int16 v191 = 2048;
    double v192 = v79;
    __int16 v193 = 2048;
    unint64_t v194 = v110;
    __int16 v195 = 1024;
    unsigned int v196 = v81;
    __int16 v197 = 1024;
    unsigned int v198 = v103;
    __int16 v199 = 1024;
    unsigned int v200 = v104;
    __int16 v201 = 2048;
    double v202 = v84;
    __int16 v203 = 2048;
    unint64_t v204 = v108;
    __int16 v205 = 1024;
    unsigned int v206 = v82;
    __int16 v207 = 1024;
    unsigned int v208 = v105;
    __int16 v209 = 1024;
    unsigned int v210 = v106;
    __int16 v211 = 2048;
    double v212 = v83;
    __int16 v213 = 2048;
    unint64_t v214 = v102;
    __int16 v215 = 1024;
    unsigned int v216 = v101;
    _os_log_impl(&dword_23BD25000, log, OS_LOG_TYPE_DEFAULT, "Dispatch, minThreadGroupsPerGridWidth=%u, maxThreadGroupsPerGridWidth=%u, avgThreadGroupsPerGridWidth=%f, totalThreadGroupsPerGridWidth=%llu, countThreadGroupsPerGridWidth=%u, minThreadGroupsPerGridHeight=%u, maxThreadGroupsPerGridHeight=%u, avgThreadGroupsPerGridHeight=%f, totalThreadGroupsPerGridHeight=%llu, countThreadGroupsPerGridHeight=%u, minThreadGroupsPerGridDepth=%u, maxThreadGroupsPerGridDepth=%u, avgThreadGroupsPerGridDepth=%f, totalThreadGroupsPerGridDepth=%llu, countThreadGroupsPerGridDepth=%u, minThreadsPerGridWidth=%u, maxThreadsPerGridWidth=%u, avgThreadsPerGridWidth=%f, totalThreadsPerGridWidth=%llu, countThreadsPerGridWidth=%u, minThreadsPerGridHeight=%u, maxThreadsPerGridHeight=%u, avgThreadsPerGridHeight=%f, totalThreadsPerGridHeight=%llu, countThreadsPerGridHeight=%u, minThreadsPerGridDepth=%u, maxThreadsPerGridDepth=%u, avgThreadsPerGridDepth=%f, totalThreadsPerGridDepth=%llu, countThreadsPerGridDepth=%u, minThreadsPerGroupWidth=%u, maxThreadsPerGroupWidth=%u, avgThreadsPerGroupWidth=%f, totalThreadsPerGroupWidth=%llu, countThreadsPerGroupWidth=%u, minThreadsPerGroupHeight=%u, maxThreadsPerGroupHeight=%u, avgThreadsPerGroupHeight=%f, totalThreadsPerGroupHeight=%llu, countThreadsPerGroupHeight=%u, minThreadsPerGroupDepth=%u, maxThreadsPerGroupDepth=%u, avgThreadsPerGroupDepth=%f, totalThreadsPerGroupDepth=%llu, countThreadsPerGroupDepth=%u, minThreadGroupMemoryLength=%u, maxThreadGroupMemoryLength=%u, avgThreadGroupMemoryLength=%f, totalThreadGroupMemoryLength=%llu, countThreadGroupMemoryLength=%u", buf, 0x17Eu);
  }
}

void sub_23BDD445C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BDD44F4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BDD45B4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t newArgumentEncoder(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (a5)
  {
    uint8x8_t v10 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(a5, "count"));
    if (v10 && [a5 count])
    {
      unint64_t v11 = 0;
      do
      {
        objc_msgSend(v10, "setObject:atIndexedSubscript:", objc_msgSend((id)objc_msgSend(a5, "objectAtIndexedSubscript:", v11), "baseObject"), v11);
        ++v11;
      }
      while (v11 < [a5 count]);
    }
  }
  else
  {
    uint8x8_t v10 = 0;
  }
  uint8x8_t v12 = (void *)[a1 baseObject];
  if (a4) {
    unint64_t v13 = objc_msgSend(v12, "reflectionWithOptions:pipelineLibrary:", 3, objc_msgSend(a4, "baseObject"));
  }
  else {
    unint64_t v13 = (void *)[v12 reflectionWithOptions:3 binaryArchives:v10];
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  unsigned int v14 = (void *)[v13 arguments];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v35;
LABEL_13:
    uint64_t v18 = 0;
    while (1)
    {
      if (*(void *)v35 != v17) {
        objc_enumerationMutation(v14);
      }
      size_t v19 = *(void **)(*((void *)&v34 + 1) + 8 * v18);
      if (![v19 type] && objc_msgSend(v19, "index") == a2) {
        break;
      }
      if (v16 == ++v18)
      {
        uint64_t v16 = [v14 countByEnumeratingWithState:&v34 objects:v38 count:16];
        if (v16) {
          goto LABEL_13;
        }
        goto LABEL_20;
      }
    }
    if (!v19) {
      goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    uint64_t v27 = [a1 name];
    uint64_t v29 = a2;
    MTLReportFailure();
    size_t v19 = 0;
  }
  if ((objc_msgSend((id)objc_msgSend(v19, "dataTypeDescription", v27, v29), "elementIsIndirectArgumentBuffer") & 1) == 0)
  {
    uint64_t v26 = [v19 name];
    uint64_t v31 = [a1 name];
    uint64_t v32 = [v19 name];
    uint64_t v28 = v26;
    uint64_t v30 = a2;
    MTLReportFailure();
  }
  id v33 = 0;
  unsigned int v20 = objc_msgSend(a1, "baseObject", v28, v30, v31, v32);
  if (a4) {
    uint64_t v21 = [v20 newArgumentEncoderWithBufferIndex:a2 reflection:&v33 pipelineLibrary:a4];
  }
  else {
    uint64_t v21 = [v20 newArgumentEncoderWithBufferIndex:a2 reflection:&v33 binaryArchives:v10];
  }
  unsigned int v22 = (void *)v21;
  if (a3) {
    *a3 = v33;
  }
  unint64_t v23 = [MTLDebugArgumentEncoder alloc];
  uint64_t v24 = -[MTLDebugArgumentEncoder initWithBaseObject:structType:parent:](v23, "initWithBaseObject:structType:parent:", v22, [v33 bufferStructType], a1);

  return v24;
}

uint64_t validateNewFunctionWithConstantArguments(NSString *a1, MTLFunctionConstantValues *a2)
{
  if (!a1) {
    MTLReportFailure();
  }
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    if (a2) {
      return result;
    }
  }
  else
  {
    uint64_t result = MTLReportFailure();
    if (a2) {
      return result;
    }
  }

  return MTLReportFailure();
}

uint64_t _validateUniqueNames(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v23 = a4;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t result = [a3 countByEnumeratingWithState:&v19 objects:v24 count:16];
  uint64_t v8 = result;
  if (result)
  {
    uint64_t v9 = *(void *)v20;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(a3);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v19 + 1) + 8 * v10), "name", v14, v15, v16), "UTF8String"));
        unint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
        if (a1)
        {
          if (v11)
          {
            if (v18 >= 0) {
              uint8x8_t v12 = __p;
            }
            else {
              uint8x8_t v12 = (void **)__p[0];
            }
            uint64_t v15 = v23;
            uint64_t v16 = *((void *)v11 + 5);
            unsigned int v14 = v12;
            _MTLMessageContextPush_();
            goto LABEL_14;
          }
        }
        else if (v11)
        {
          if (v18 >= 0) {
            unint64_t v13 = __p;
          }
          else {
            unint64_t v13 = (void **)__p[0];
          }
          uint64_t v15 = v23;
          uint64_t v16 = *((void *)v11 + 5);
          unsigned int v14 = v13;
          MTLReportFailure();
          goto LABEL_14;
        }
        std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::__emplace_unique_key_args<std::string,std::string&,char const*&>((uint64_t)a2, (unsigned __int8 *)__p, (uint64_t)__p, &v23);
LABEL_14:
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        ++v10;
      }
      while (v8 != v10);
      uint64_t result = [a3 countByEnumeratingWithState:&v19 objects:v24 count:16];
      uint64_t v8 = result;
    }
    while (result);
  }
  return result;
}

void sub_23BDD528C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t validateLinkedFunctionsHaveUniqueNames(MTLFunctionDescriptor *a1)
{
  LODWORD(v3) = 1065353216;
  _validateUniqueNames(0, &v2, (void *)[(MTLFunctionDescriptor *)a1 privateFunctions], (uint64_t)"privateFunctions");
  return std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v2);
}

void sub_23BDD53FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::__emplace_unique_key_args<std::string,std::string&,char const*&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::__construct_node_hash<std::string&,char const*&>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    void *v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_23BDD5CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::__construct_node_hash<std::string&,char const*&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)(a5 + 8) = v9;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  unint64_t v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    uint8_t v10[4] = *(void *)(a3 + 16);
  }
  v10[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
}

void sub_23BDD5DB4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void InitResourceIdentifier(MTLLegacySVTexture *a1)
{
  v6[1] = *MEMORY[0x263EF8340];
  id v2 = [(MTLToolsObject *)a1->super.super.super._device baseObject];
  if ((objc_msgSend((id)objc_msgSend(v2, "vendorName"), "containsString:", @"IG") & 1) != 0
    || objc_msgSend((id)objc_msgSend(v2, "vendorName"), "containsString:", @"Intel"))
  {
    uint64_t v3 = (void *)[v2 newBufferWithLength:8 options:0];
    id v4 = objc_alloc_init(MEMORY[0x263F127B8]);
    [v4 setIndex:0];
    [v4 setDataType:58];
    [v4 setAccess:1];
    v6[0] = v4;
    int8x8_t v5 = objc_msgSend(v2, "newArgumentEncoderWithArguments:", objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:count:", v6, 1));

    [v5 setArgumentBuffer:v3 offset:0];
    objc_msgSend(v5, "setTexture:atIndex:", -[MTLLegacySVTexture baseObject](a1, "baseObject"), 0);

    a1->_identifier = *(void *)[v3 contents];
  }
  else
  {
    a1->_identifier = [(MTLToolsTexture *)a1 uniqueIdentifier];
  }
}

uint64_t _MTLDebugValidateBuffer(uint64_t a1, void *a2)
{
  if (!a2) {
    return _MTLMessageContextPush_();
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    _MTLMessageContextPush_();
  }
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    uint64_t result = [a2 device];
    if (result != a1) {
      return _MTLMessageContextPush_();
    }
  }
  return result;
}

uint64_t _MTLDebugValidateIndexBuffer(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  _MTLMessageContextBegin_();
  _MTLDebugValidateBuffer(a1, a3);
  if (a2)
  {
    if (a2 == 1)
    {
      char v13 = 0;
      uint64_t v14 = 4;
      if (!a6) {
        goto LABEL_10;
      }
    }
    else
    {
      _MTLMessageContextPush_();
      uint64_t v14 = 0;
      char v13 = 1;
      if (!a6) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v13 = 0;
    uint64_t v14 = 2;
    if (!a6)
    {
LABEL_10:
      if (v13) {
        return _MTLMessageContextEnd();
      }
      goto LABEL_11;
    }
  }
  if (a5 + v14 * a7 > (unint64_t)[a3 length])
  {
    [a3 length];
    _MTLMessageContextPush_();
    if (a7) {
      goto LABEL_10;
    }
  }
  else if (a7)
  {
    goto LABEL_10;
  }
  _MTLMessageContextPush_();
  if (v13) {
    return _MTLMessageContextEnd();
  }
LABEL_11:
  if (((v14 - 1) & a5) != 0) {
    _MTLMessageContextPush_();
  }
  return _MTLMessageContextEnd();
}

unint64_t _MTLDebugValidateIndexBufferWithContext(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14 = *a8;
  unint64_t result = _MTLDebugValidateBuffer(a1, a3);
  if (a2)
  {
    if (a2 == 1)
    {
      char v16 = 0;
      uint64_t v17 = 4;
      if (!a6) {
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t result = _MTLMessageContextPush_();
      uint64_t v17 = 0;
      char v16 = 1;
      if (!a6) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    char v16 = 0;
    uint64_t v17 = 2;
    if (!a6)
    {
LABEL_11:
      if (v16) {
        return result;
      }
      goto LABEL_12;
    }
  }
  if (*a8 == v14 && (unint64_t result = [a3 length], a5 + v17 * a7 > result))
  {
    [a3 length];
    unint64_t result = _MTLMessageContextPush_();
    if (a7) {
      goto LABEL_11;
    }
  }
  else if (a7)
  {
    goto LABEL_11;
  }
  unint64_t result = _MTLMessageContextPush_();
  if (v16) {
    return result;
  }
LABEL_12:
  if (((v17 - 1) & a5) != 0) {
    return _MTLMessageContextPush_();
  }
  return result;
}

uint64_t _MTLDebugValidatePatchIndexBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    _MTLDebugValidateBuffer(a1, a2);
    if (!a5) {
      goto LABEL_7;
    }
    if (a4 + 4 * (a7 + a6) > (unint64_t)[a2 length])
    {
      [a2 length];
      _MTLMessageContextPush_();
    }
    if (a7)
    {
      if (a9) {
        goto LABEL_7;
      }
    }
    else
    {
      _MTLMessageContextPush_();
      if (a9) {
        goto LABEL_7;
      }
    }
    _MTLMessageContextPush_();
LABEL_7:
    if ((a4 & 3) != 0) {
      goto LABEL_11;
    }
    return _MTLMessageContextEnd();
  }
  if (a4) {
LABEL_11:
  }
    _MTLMessageContextPush_();
  return _MTLMessageContextEnd();
}

unint64_t _MTLDebugValidatePatchIndexBufferWithContext(unint64_t result, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  if (a2)
  {
    uint64_t v15 = *a10;
    unint64_t result = _MTLDebugValidateBuffer(result, a2);
    if (!a5) {
      goto LABEL_8;
    }
    if (*a10 == v15)
    {
      unint64_t result = [a2 length];
      if (a4 + 4 * (a7 + a6) > result)
      {
        [a2 length];
        unint64_t result = _MTLMessageContextPush_();
      }
    }
    if (a7)
    {
      if (a9) {
        goto LABEL_8;
      }
    }
    else
    {
      unint64_t result = _MTLMessageContextPush_();
      if (a9) {
        goto LABEL_8;
      }
    }
    unint64_t result = _MTLMessageContextPush_();
LABEL_8:
    if ((a4 & 3) != 0) {
      return _MTLMessageContextPush_();
    }
    return result;
  }
  if (a4) {
    return _MTLMessageContextPush_();
  }
  return result;
}

char *std::vector<MTLViewport>::assign(char **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  unint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 4) >= a2)
  {
    unint64_t v16 = (a1[1] - result) / 48;
    if (v16 >= a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = (a1[1] - result) / 48;
    }
    for (; v17; --v17)
    {
      long long v18 = *a3;
      long long v19 = a3[2];
      *((_OWORD *)result + 1) = a3[1];
      *((_OWORD *)result + 2) = v19;
      *(_OWORD *)unint64_t result = v18;
      result += 48;
    }
    if (a2 <= v16)
    {
      a1[1] = &(*a1)[48 * a2];
    }
    else
    {
      BOOL v20 = a1[1];
      unint64_t v21 = &v20[48 * (a2 - v16)];
      uint64_t v22 = -48 * v16 + 48 * a2;
      do
      {
        long long v23 = *a3;
        long long v24 = a3[2];
        *((_OWORD *)v20 + 1) = a3[1];
        *((_OWORD *)v20 + 2) = v24;
        *(_OWORD *)BOOL v20 = v23;
        v20 += 48;
        v22 -= 48;
      }
      while (v22);
      a1[1] = v21;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0x555555555555555) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v9;
    }
    unint64_t result = std::vector<MTLViewport>::__vallocate[abi:ne180100](a1, v10);
    unint64_t v11 = a1[1];
    unint64_t v12 = &v11[48 * a2];
    uint64_t v13 = 48 * a2;
    do
    {
      long long v14 = *a3;
      long long v15 = a3[2];
      *((_OWORD *)v11 + 1) = a3[1];
      *((_OWORD *)v11 + 2) = v15;
      *(_OWORD *)unint64_t v11 = v14;
      v11 += 48;
      v13 -= 48;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

char *std::vector<MTLScissorRect>::assign(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  unint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 5)
  {
    unint64_t v14 = (a1[1] - result) >> 5;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (a1[1] - result) >> 5;
    }
    for (; v15; --v15)
    {
      long long v16 = a3[1];
      *(_OWORD *)unint64_t result = *a3;
      *((_OWORD *)result + 1) = v16;
      result += 32;
    }
    if (a2 <= v14)
    {
      a1[1] = &(*a1)[32 * a2];
    }
    else
    {
      uint64_t v17 = a1[1];
      long long v18 = &v17[32 * (a2 - v14)];
      uint64_t v19 = 32 * a2 - 32 * v14;
      do
      {
        long long v20 = a3[1];
        *(_OWORD *)uint64_t v17 = *a3;
        *((_OWORD *)v17 + 1) = v20;
        v17 += 32;
        v19 -= 32;
      }
      while (v19);
      a1[1] = v18;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 59) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 4;
    if (v6 >> 4 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    unint64_t result = std::vector<MTLScissorRect>::__vallocate[abi:ne180100](a1, v9);
    unint64_t v10 = a1[1];
    unint64_t v11 = &v10[32 * a2];
    uint64_t v12 = 32 * a2;
    do
    {
      long long v13 = a3[1];
      *(_OWORD *)unint64_t v10 = *a3;
      *((_OWORD *)v10 + 1) = v13;
      v10 += 32;
      v12 -= 32;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64_t hasMemorylessAttachments(MTLRenderPassDescriptor *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = objc_msgSend(*(id *)-[MTLRenderPassDescriptor _descriptorPrivate](a1, "_descriptorPrivate"), "_descriptorAtIndex:", v2);
    if (v3)
    {
      id v4 = *(void **)[v3 _descriptorPrivate];
      if (v4)
      {
        if ([v4 storageMode] == 3) {
          break;
        }
      }
    }
    if (++v2 == 8)
    {
      uint64_t v5 = 0;
      goto LABEL_8;
    }
  }
  uint64_t v5 = 1;
LABEL_8:
  uint64_t v6 = objc_msgSend(*(id *)-[MTLRenderPassDescriptor _descriptorPrivate](a1, "_descriptorPrivate"), "_descriptorAtIndex:", 8);
  if (v6)
  {
    uint8x8_t v7 = *(void **)[v6 _descriptorPrivate];
    if (v7)
    {
      if ([v7 storageMode] == 3) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = v5;
      }
    }
  }
  uint64_t v8 = objc_msgSend(*(id *)-[MTLRenderPassDescriptor _descriptorPrivate](a1, "_descriptorPrivate"), "_descriptorAtIndex:", 9);
  if (v8)
  {
    unint64_t v9 = *(void **)[v8 _descriptorPrivate];
    if (v9)
    {
      if ([v9 storageMode] == 3) {
        return 1;
      }
      else {
        return v5;
      }
    }
  }
  return v5;
}

uint64_t validateArg(MTLArgumentType a1, unint64_t a2, MTLDebugFunctionArgument *a3, _MTLMessageContext *a4)
{
  uint64_t result = MTLReportFailureTypeEnabled();
  if (result && a3->isValid && !a3->hasBeenUsed)
  {
    argumentTypeToString(a1);
    return _MTLMessageContextPush_();
  }
  return result;
}

void sub_23BDDA7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t validateFunctionArguments(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void *a11, void *a12, const char *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v181 = *MEMORY[0x263EF8340];
  long long v170 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  uint64_t result = [a4 countByEnumeratingWithState:&v170 objects:v179 count:16];
  uint64_t v151 = result;
  if (!result)
  {
    uint64_t v159 = 0;
    goto LABEL_176;
  }
  uint64_t v152 = a7;
  uint64_t v159 = 0;
  unint64_t v148 = ~(unint64_t)a13;
  long long v24 = a12;
  uint64_t v150 = *(void *)v171;
  uint64_t v164 = a5;
  do
  {
    uint64_t v25 = 0;
    do
    {
      if (*(void *)v171 != v150) {
        objc_enumerationMutation(a4);
      }
      uint64_t v26 = *(void **)(*((void *)&v170 + 1) + 8 * v25);
      uint64_t v157 = v25;
      if (objc_msgSend(v26, "isActive", v109, v118, v127, v136, v137, v138, v139, v140))
      {
        MTLArgumentType v27 = [v26 type];
        uint64_t v28 = [v26 name];
        unint64_t v29 = [v26 arrayLength];
        uint64_t v30 = [v26 index];
        if (v29)
        {
          __int16 v165 = v26;
          uint64_t v31 = (1 << v27) & 0x40F03000FLL;
          if (v27 <= 0x22)
          {
            BOOL v32 = v31 == 0;
            BOOL v33 = v31 != 0;
          }
          else
          {
            BOOL v32 = 1;
            BOOL v33 = 0;
          }
          if (v32) {
LABEL_194:
          }
            abort();
          long long v34 = 0;
          unint64_t v35 = v27 - 25;
          MTLArgumentType v155 = v27;
          unint64_t v162 = v27 - 25;
          unint64_t v163 = v29;
          uint64_t v161 = v30;
          while (2)
          {
            uint64_t v36 = (uint64_t)&v34[v30];
            if (v33)
            {
              if (v27 <= 0x22 && ((1 << v27) & 0x400030000) != 0)
              {
LABEL_93:
                BOOL v33 = (unint64_t)++v34 > v29;
                if (v34 == (const char *)v29) {
                  goto LABEL_172;
                }
                continue;
              }
              long long v37 = (unsigned char *)(a5 + 88 * v36);
              if (*v37) {
                goto LABEL_18;
              }
              __int16 v137 = (const char *)v28;
              uint64_t v138 = (uint64_t)v34;
              __int16 v127 = argumentTypeToString(v27);
              unsigned int v136 = (const char *)v36;
              uint64_t v109 = a2;
              uint64_t v118 = a3;
              _MTLMessageContextPush_();
              long long v37 = (unsigned char *)(a5 + 88 * v36);
              long long v24 = a12;
              uint64_t v30 = v161;
              unint64_t v35 = v162;
              unint64_t v29 = v163;
              if (*v37)
              {
LABEL_18:
                if (v35 > 2)
                {
                  uint64_t v72 = a5 + 88 * v36;
                  uint64_t v73 = *(void *)(v72 + 8);
                  uint64_t v39 = (unint64_t *)(v72 + 8);
                  if (v73 == 6)
                  {
                    unsigned int v74 = v37;
                    int v75 = [a1 requiresRaytracingEmulation];
                    long long v37 = v74;
                    long long v24 = a12;
                    BOOL v32 = v75 == 0;
                    uint64_t v30 = v161;
                    unint64_t v35 = v162;
                    unint64_t v29 = v163;
                    uint64_t v38 = 5;
                    if (!v32) {
                      uint64_t v38 = 6;
                    }
                  }
                  else
                  {
                    uint64_t v38 = 5;
                  }
                }
                else
                {
                  uint64_t v38 = qword_23BE4AD80[v35];
                  uint64_t v39 = (unint64_t *)(a5 + 88 * v36 + 8);
                }
                if (*v39 != v38)
                {
                  unsigned int v92 = v37;
                  unsigned int v93 = argumentTypeToString(v27);
                  uint64_t v138 = (uint64_t)v34;
                  __int16 v139 = MTLDebugFunctionArgumentTypeToString(*v39);
                  unsigned int v136 = (const char *)v36;
                  __int16 v137 = (const char *)v28;
                  uint64_t v118 = a3;
                  __int16 v127 = v93;
                  uint64_t v109 = a2;
                  _MTLMessageContextPush_();
                  long long v37 = v92;
                  long long v24 = a12;
                  uint64_t v30 = v161;
                  unint64_t v35 = v162;
                  unint64_t v29 = v163;
                }
                a5 = v164;
              }
LABEL_92:
              v37[1] = 1;
              goto LABEL_93;
            }
            break;
          }
          switch(v27)
          {
            case MTLArgumentTypeBuffer:
              long long v37 = (unsigned char *)(a5 + 88 * v36);
              if (a19) {
                goto LABEL_22;
              }
              if (!*v37)
              {
                __int16 v137 = (const char *)v28;
                uint64_t v138 = (uint64_t)v34;
                __int16 v127 = "buffer";
                unsigned int v136 = &v34[v30];
                uint64_t v109 = a2;
                uint64_t v118 = a3;
                _MTLMessageContextPush_();
                long long v37 = (unsigned char *)(a5 + 88 * v36);
                long long v24 = a12;
                uint64_t v30 = v161;
                unint64_t v35 = v162;
                unint64_t v29 = v163;
LABEL_22:
                if (!*v37) {
                  goto LABEL_92;
                }
              }
              unsigned int v160 = v37;
              if (*(void *)(a5 + 88 * v36 + 8))
              {
                __int16 v137 = (const char *)v28;
                uint64_t v138 = (uint64_t)v34;
                __int16 v127 = "buffer";
                unsigned int v136 = (const char *)v36;
                uint64_t v109 = a2;
                uint64_t v118 = a3;
                _MTLMessageContextPush_();
              }
              int v56 = objc_msgSend(a1, "supportsUnalignedVertexFetch", v109, v118, v127);
              if (!a17 || !v56 || !*(unsigned char *)(a17 + v36))
              {
                uint64_t v57 = v164 + 88 * v36;
                unint64_t v60 = *(void *)(v57 + 40);
                double v58 = (__CFString **)(v57 + 40);
                unint64_t v59 = v60;
                unint64_t v61 = [v165 bufferAlignment];
                unint64_t v62 = v61 <= 1 ? 1 : v61;
                if (v59 % v62)
                {
                  uint64_t v138 = [v165 bufferAlignment];
                  __int16 v139 = *v58;
                  unsigned int v136 = "buffer";
                  __int16 v137 = (const char *)v36;
                  uint64_t v119 = a3;
                  uint64_t v128 = v28;
                  uint64_t v110 = a2;
                  _MTLMessageContextPush_();
                }
              }
              uint64_t v63 = v164 + 88 * v36;
              uint64_t v65 = *(void *)(v63 + 32);
              unsigned int v64 = (const char **)(v63 + 32);
              unint64_t v66 = v65 - (void)v64[1];
              if (v66 < objc_msgSend(v165, "bufferDataSize", v110, v119, v128)
                && [v165 bufferDataSize] != -1)
              {
                unsigned int v94 = (__CFString *)v64[1];
                unsigned int v95 = *v64;
                [v165 bufferDataSize];
                __int16 v139 = v94;
                unsigned int v140 = v95;
                __int16 v137 = "buffer";
                uint64_t v138 = v36;
                uint64_t v129 = v28;
                unsigned int v136 = v34;
                uint64_t v111 = a2;
                uint64_t v120 = a3;
                _MTLMessageContextPush_();
              }
              a5 = v164;
              if (objc_msgSend(v165, "access", v111, v120, v129) && !*(void *)(v164 + 88 * v36 + 16))
              {
                uint64_t v118 = a3;
                __int16 v127 = (const char *)v36;
                uint64_t v109 = a2;
                _MTLMessageContextPush_();
              }
              uint64_t v67 = v164 + 88 * v36;
              unsigned int v70 = *(void **)(v67 + 16);
              unsigned int v69 = (id *)(v67 + 16);
              double v68 = v70;
              MTLArgumentType v27 = v155;
              if (v70)
              {
                if ([v165 access] != 2 && (objc_msgSend(v68, "protectionOptions") & v148) != 0)
                {
                  unsigned int v136 = (const char *)[v68 protectionOptions];
                  __int16 v137 = a13;
                  uint64_t v118 = a3;
                  __int16 v127 = (const char *)v36;
                  uint64_t v109 = a2;
                  _MTLMessageContextPush_();
                }
                if (objc_msgSend(v165, "access", v109, v118, v127))
                {
                  id v71 = *v69;
                  if (((unint64_t)a13 & ~[*v69 protectionOptions]) != 0) {
                    goto LABEL_76;
                  }
                }
              }
              goto LABEL_88;
            case MTLArgumentTypeThreadgroupMemory:
              uint64_t v51 = a14;
              long long v37 = (unsigned char *)(a14 + 88 * v36);
              if (*v37) {
                goto LABEL_48;
              }
              __int16 v137 = (const char *)v28;
              uint64_t v138 = (uint64_t)v34;
              __int16 v127 = "local memory";
              unsigned int v136 = &v34[v30];
              uint64_t v109 = a2;
              uint64_t v118 = a3;
              _MTLMessageContextPush_();
              uint64_t v51 = a14;
              long long v37 = (unsigned char *)(a14 + 88 * v36);
              unint64_t v35 = v162;
              unint64_t v29 = v163;
              if (*v37)
              {
LABEL_48:
                unsigned int v52 = v37;
                if (*(void *)(v51 + 88 * v36 + 8) != 3)
                {
                  __int16 v137 = (const char *)v28;
                  uint64_t v138 = (uint64_t)v34;
                  __int16 v127 = "local memory";
                  unsigned int v136 = (const char *)v36;
                  uint64_t v109 = a2;
                  uint64_t v118 = a3;
                  _MTLMessageContextPush_();
                  uint64_t v51 = a14;
                }
                uint64_t v53 = v51 + 88 * v36;
                unint64_t v55 = *(void *)(v53 + 56);
                unsigned int v54 = (const char **)(v53 + 56);
                if (v55 < objc_msgSend(v165, "threadgroupMemoryDataSize", v109, v118, v127))
                {
                  __int16 v139 = (__CFString *)v28;
                  unsigned int v140 = v34;
                  __int16 v137 = "local memory";
                  uint64_t v138 = v36;
                  __int16 v127 = *v54;
                  unsigned int v136 = (const char *)[v165 threadgroupMemoryDataSize];
                  uint64_t v109 = a2;
                  uint64_t v118 = a3;
                  _MTLMessageContextPush_();
                }
                ++v159;
                unint64_t v29 = v163;
                a5 = v164;
                uint64_t v30 = v161;
                unint64_t v35 = v162;
                long long v37 = v52;
              }
              else
              {
                uint64_t v30 = v161;
              }
              goto LABEL_85;
            case MTLArgumentTypeTexture:
              long long v37 = (unsigned char *)(a6 + 88 * v36);
              if (!*((void *)v37 + 2)) {
                goto LABEL_92;
              }
              unsigned int v156 = (id *)(v37 + 16);
              unsigned int v160 = (unsigned char *)(a6 + 88 * v36);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                unsigned int v40 = *v156;
                if ([*v156 usage] & 4) != 0 && (objc_msgSend(v40, "usage"))
                {
                  if (a8)
                  {
                    unint64_t v41 = 0;
                    do
                    {
                      unsigned int v42 = objc_msgSend(a8, "_descriptorAtIndex:", v41, v109, v118, v127);
                      if (v42)
                      {
                        unint64_t v43 = v42;
                        if ([v42 texture])
                        {
                          if ([v43 storeAction] == 1
                            && objc_msgSend((id)objc_msgSend(a9, "objectAtIndexedSubscript:", v41), "writeMask"))
                          {
                            float v44 = -[MTLDebugRenderTargetAttachmentInfo initWithDesc:renderTargetArrayLength:]([MTLDebugRenderTargetAttachmentInfo alloc], "initWithDesc:renderTargetArrayLength:", [v43 _descriptorPrivate], a10);
                            uint64_t v45 = [(MTLDebugRenderTargetAttachmentInfo *)v44 intersectsTexture:v40];
                            if (v45)
                            {
                              unsigned int v46 = "resolve";
                              if (v45 != 2)
                              {
                                if (v45 != 1) {
                                  goto LABEL_194;
                                }
                                unsigned int v46 = "color";
                              }
                              unsigned int v140 = v41;
                              uint64_t v138 = (uint64_t)v34;
                              __int16 v139 = (__CFString *)v46;
                              unsigned int v136 = (const char *)v36;
                              __int16 v137 = (const char *)v28;
                              uint64_t v118 = a3;
                              __int16 v127 = "texture";
                              uint64_t v109 = a2;
                              MTLReportFailure();
                            }
                          }
                        }
                      }
                      ++v41;
                    }
                    while (v41 != (const char *)8);
                    unint64_t v47 = (void *)[a8 _descriptorAtIndex:8];
                    unsigned int v48 = (void *)[a8 _descriptorAtIndex:9];
                    uint64_t v49 = [v40 pixelFormat];
                    if (a11)
                    {
                      uint64_t v145 = v49;
                      int v142 = [a11 isDepthWriteEnabled];
                      if (writesStencilTexture((MTLStencilDescriptor *)[a11 backFaceStencil])) {
                        LOBYTE(v50) = 0;
                      }
                      else {
                        LODWORD(v50) = !writesStencilTexture((MTLStencilDescriptor *)[a11 frontFaceStencil]);
                      }
                      uint64_t v49 = v145;
                    }
                    else
                    {
                      int v142 = 0;
                      LOBYTE(v50) = 1;
                    }
                    unint64_t v146 = (v49 - 253) & 0xFFFFFFFFFFFFFFF7;
                    if (v47
                      && [v47 texture]
                      && [v47 storeAction] == 1
                      && ((v142 ^ 1) & 1) == 0
                      && v146)
                    {
                      char v143 = (char)v50;
                      double v50 = v48;
                      double v76 = -[MTLDebugRenderTargetAttachmentInfo initWithDesc:renderTargetArrayLength:]([MTLDebugRenderTargetAttachmentInfo alloc], "initWithDesc:renderTargetArrayLength:", [v47 _descriptorPrivate], a10);
                      uint64_t v77 = [(MTLDebugRenderTargetAttachmentInfo *)v76 intersectsTexture:v40];
                      if (v77)
                      {
                        unsigned int v78 = "resolve";
                        if (v77 != 2)
                        {
                          if (v77 != 1) {
                            goto LABEL_194;
                          }
                          unsigned int v78 = "depth";
                        }
                        __int16 v139 = (__CFString *)v78;
                        unsigned int v140 = v78;
                        __int16 v137 = (const char *)v28;
                        uint64_t v138 = (uint64_t)v34;
                        __int16 v127 = "texture";
                        unsigned int v136 = (const char *)v36;
                        uint64_t v109 = a2;
                        uint64_t v118 = a3;
                        MTLReportFailure();
                      }

                      unsigned int v48 = v50;
                      LOBYTE(v50) = v143;
                    }
                    if (v48 && [v48 texture])
                    {
                      char v79 = [v48 storeAction] == 1 ? (char)v50 : 1;
                      if ((v79 & 1) == 0 && !v146)
                      {
                        double v80 = -[MTLDebugRenderTargetAttachmentInfo initWithDesc:renderTargetArrayLength:]([MTLDebugRenderTargetAttachmentInfo alloc], "initWithDesc:renderTargetArrayLength:", [v48 _descriptorPrivate], a10);
                        uint64_t v81 = [(MTLDebugRenderTargetAttachmentInfo *)v80 intersectsTexture:v40];
                        if (v81)
                        {
                          unsigned int v82 = "resolve";
                          if (v81 != 2)
                          {
                            if (v81 != 1) {
                              goto LABEL_194;
                            }
                            unsigned int v82 = "stencil";
                          }
                          __int16 v139 = (__CFString *)v82;
                          unsigned int v140 = v82;
                          __int16 v137 = (const char *)v28;
                          uint64_t v138 = (uint64_t)v34;
                          __int16 v127 = "texture";
                          unsigned int v136 = (const char *)v36;
                          uint64_t v109 = a2;
                          uint64_t v118 = a3;
                          MTLReportFailure();
                        }
                      }
                    }
                  }
                  long long v176 = 0u;
                  long long v177 = 0u;
                  long long v174 = 0u;
                  long long v175 = 0u;
                  uint64_t v83 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v174, v180, 16, v109, v118, v127);
                  if (v83)
                  {
                    uint64_t v84 = v83;
                    uint64_t v85 = *(void *)v175;
                    do
                    {
                      for (uint64_t i = 0; i != v84; ++i)
                      {
                        if (*(void *)v175 != v85) {
                          objc_enumerationMutation(v24);
                        }
                        if (objc_msgSend(*(id *)(*((void *)&v174 + 1) + 8 * i), "intersectsTexture:", v40, v109, v118, v127))
                        {
                          __int16 v137 = (const char *)v28;
                          uint64_t v138 = (uint64_t)v34;
                          __int16 v127 = "texture";
                          unsigned int v136 = (const char *)v36;
                          uint64_t v109 = a2;
                          uint64_t v118 = a3;
                          MTLReportFailure();
                        }
                      }
                      uint64_t v84 = [v24 countByEnumeratingWithState:&v174 objects:v180 count:16];
                    }
                    while (v84);
                  }
                  a5 = v164;
                  MTLArgumentType v27 = v155;
                }
                if (!*v160)
                {
                  __int16 v137 = (const char *)v28;
                  uint64_t v138 = (uint64_t)v34;
                  __int16 v127 = "texture";
                  unsigned int v136 = (const char *)v36;
                  uint64_t v109 = a2;
                  uint64_t v118 = a3;
                  _MTLMessageContextPush_();
                  goto LABEL_88;
                }
                if (*(void *)(a6 + 88 * v36 + 8) != 1)
                {
                  __int16 v137 = (const char *)v28;
                  uint64_t v138 = (uint64_t)v34;
                  __int16 v127 = "texture";
                  unsigned int v136 = (const char *)v36;
                  uint64_t v109 = a2;
                  uint64_t v118 = a3;
                  _MTLMessageContextPush_();
                }
                uint64_t v87 = objc_msgSend(*v156, "textureType", v109, v118, v127);
                if (v87 != [v165 textureType])
                {
                  [*v156 textureType];
                  uint64_t v96 = MTLTextureTypeString();
                  [v165 textureType];
                  __int16 v139 = (__CFString *)v28;
                  unsigned int v140 = v34;
                  __int16 v137 = (const char *)v36;
                  uint64_t v138 = MTLTextureTypeString();
                  uint64_t v130 = v96;
                  unsigned int v136 = "texture";
                  uint64_t v112 = a2;
                  uint64_t v121 = a3;
                  _MTLMessageContextPush_();
                }
                int v88 = objc_msgSend(v40, "usage", v112, v121, v130);
                if ([v165 access])
                {
                  int v89 = (*(void *)&v88 & 0x10000) != 0 ? 16 : 2;
                  if ((v40[20] & v89) == 0)
                  {
                    [*v156 pixelFormat];
                    uint64_t Name = MTLPixelFormatGetName();
                    unsigned int v136 = (const char *)v36;
                    uint64_t v113 = a2;
                    uint64_t v122 = a3;
                    _MTLMessageContextPush_();
                  }
                }
                unsigned int v90 = v165;
                objc_msgSend(v165, "textureDataType", v113, v122, Name);
                if ((_MTLCompatibleTextureDataTypeAndPixelFormatInfo() & 1) == 0)
                {
                  [*v156 pixelFormat];
                  uint64_t v147 = MTLPixelFormatGetName();
                  uint64_t v97 = [*v156 label];
                  if (!v97) {
                    uint64_t v97 = [MEMORY[0x263EFF9D0] null];
                  }
                  unint64_t v144 = (const char *)v97;
                  unsigned int v90 = v165;
                  [v165 textureDataType];
                  uint64_t v141 = MTLDataTypeString();
                  [*v156 pixelFormat];
                  MTLPixelFormatGetName();
                  [*v156 pixelFormat];
                  MTLPixelFormatCompatibilityString();
                  unsigned int v140 = "texture";
                  uint64_t v138 = v36;
                  __int16 v139 = (__CFString *)v141;
                  unsigned int v136 = "texture";
                  __int16 v137 = v144;
                  uint64_t v123 = a3;
                  uint64_t v132 = v147;
                  uint64_t v114 = a2;
                  _MTLMessageContextPush_();
                }
                if ((unint64_t)objc_msgSend(v90, "access", v114, v123, v132) <= 1
                  && ([v40 requireUsage:1] & 1) == 0)
                {
                  __int16 v137 = (const char *)[v40 usage];
                  uint64_t v138 = 1;
                  uint64_t v133 = v28;
                  unsigned int v136 = (const char *)v36;
                  uint64_t v115 = a2;
                  uint64_t v124 = a3;
                  _MTLMessageContextPush_();
                }
                if ((unint64_t)(objc_msgSend(v165, "access", v115, v124, v133) - 1) <= 1
                  && ([v40 requireUsage:2] & 1) == 0)
                {
                  __int16 v137 = (const char *)[v40 usage];
                  uint64_t v138 = 2;
                  uint64_t v134 = v28;
                  unsigned int v136 = (const char *)v36;
                  uint64_t v116 = a2;
                  uint64_t v125 = a3;
                  _MTLMessageContextPush_();
                }
                MTLArgumentType v27 = v155;
                if (objc_msgSend(v165, "access", v116, v125, v134) && objc_msgSend(v40, "isSparse"))
                {
                  uint64_t v126 = a3;
                  uint64_t v135 = v36;
                  uint64_t v117 = a2;
                  _MTLMessageContextPush_();
                }
                if (objc_msgSend(v165, "access", v117, v126, v135) == 1)
                {
                  [v40 pixelFormat];
                  if ((MTLReadWriteTextureIsSupported() & 1) == 0)
                  {
                    __int16 v127 = (const char *)v28;
                    unsigned int v136 = (const char *)v36;
                    uint64_t v109 = a2;
                    uint64_t v118 = a3;
                    _MTLMessageContextPush_();
                  }
                }
                id v91 = *v156;
                if (!*v156) {
                  goto LABEL_88;
                }
                if ([v165 access] != 2 && (objc_msgSend(v91, "protectionOptions") & v148) != 0)
                {
                  unsigned int v136 = (const char *)[v91 protectionOptions];
                  __int16 v137 = a13;
                  uint64_t v118 = a3;
                  __int16 v127 = (const char *)v36;
                  uint64_t v109 = a2;
                  _MTLMessageContextPush_();
                }
                if (!objc_msgSend(v165, "access", v109, v118, v127)) {
                  goto LABEL_88;
                }
                id v71 = *v156;
                if (((unint64_t)a13 & ~[*v156 protectionOptions]) == 0) {
                  goto LABEL_88;
                }
LABEL_76:
                unsigned int v136 = (const char *)[v71 protectionOptions];
                __int16 v137 = a13;
                uint64_t v118 = a3;
                __int16 v127 = (const char *)v36;
                uint64_t v109 = a2;
              }
              else
              {
                uint64_t v118 = a3;
                __int16 v127 = (const char *)v36;
                uint64_t v109 = a2;
              }
              _MTLMessageContextPush_();
LABEL_88:
              unint64_t v35 = v162;
              unint64_t v29 = v163;
              long long v37 = v160;
              uint64_t v30 = v161;
              goto LABEL_92;
            case MTLArgumentTypeSampler:
              long long v37 = (unsigned char *)(v152 + 88 * v36);
              if (!*v37 || *(void *)(v152 + 88 * v36 + 8) != 2)
              {
                __int16 v137 = (const char *)v28;
                uint64_t v138 = (uint64_t)v34;
                __int16 v127 = "sampler";
                unsigned int v136 = &v34[v30];
                uint64_t v109 = a2;
                uint64_t v118 = a3;
                _MTLMessageContextPush_();
                long long v37 = (unsigned char *)(v152 + 88 * v36);
                uint64_t v30 = v161;
              }
              unint64_t v35 = v162;
              unint64_t v29 = v163;
LABEL_85:
              long long v24 = a12;
              goto LABEL_92;
            default:
              JUMPOUT(0);
          }
        }
      }
LABEL_172:
      uint64_t v25 = v157 + 1;
    }
    while (v157 + 1 != v151);
    uint64_t result = [a4 countByEnumeratingWithState:&v170 objects:v179 count:16];
    uint64_t v151 = result;
  }
  while (result);
LABEL_176:
  if (a16)
  {
    uint64_t v98 = a15;
    unsigned int v99 = (void *)[MEMORY[0x263EFF980] arrayWithCapacity:v159];
    if (a15)
    {
      unsigned int v100 = (void *)(a14 + 64);
      do
      {
        if (*((unsigned char *)v100 - 64)) {
          objc_msgSend(v99, "addObject:", objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", *v100, *(v100 - 1)));
        }
        v100 += 11;
        --v98;
      }
      while (v98);
    }
    unsigned int v101 = objc_msgSend(v99, "sortedArrayUsingComparator:", &__block_literal_global_1648, v109, v118, v127);
    long long v166 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    uint64_t result = [v101 countByEnumeratingWithState:&v166 objects:v178 count:16];
    if (result)
    {
      uint64_t v102 = result;
      unsigned int v103 = 0;
      uint64_t v104 = *(void *)v167;
      do
      {
        uint64_t v105 = 0;
        do
        {
          if (*(void *)v167 != v104) {
            objc_enumerationMutation(v101);
          }
          unsigned int v106 = *(void **)(*((void *)&v166 + 1) + 8 * v105);
          if (v103)
          {
            uint64_t v107 = [v103 rangeValue];
            if (v107 + v108 > (unint64_t)[v106 rangeValue]) {
              _MTLMessageContextPush_();
            }
          }
          else
          {
            unsigned int v103 = *(void **)(*((void *)&v166 + 1) + 8 * v105);
          }
          ++v105;
        }
        while (v102 != v105);
        uint64_t result = [v101 countByEnumeratingWithState:&v166 objects:v178 count:16];
        uint64_t v102 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_23BDE2054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BDE2294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BDE2594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BDE2734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *validateMTLViewport(double *result, MTLViewport *a2, _MTLMessageContext *a3)
{
  uint64_t v3 = result;
  if (*result != 0.0 && (*(void *)result & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    uint64_t result = (double *)_MTLMessageContextPush_();
  }
  if (v3[1] != 0.0 && ((void)v3[1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    uint64_t result = (double *)_MTLMessageContextPush_();
  }
  if (v3[2] != 0.0 && ((void)v3[2] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    uint64_t result = (double *)_MTLMessageContextPush_();
  }
  if (v3[3] != 0.0 && ((void)v3[3] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    uint64_t result = (double *)_MTLMessageContextPush_();
  }
  if (v3[4] != 0.0 && ((void)v3[4] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    uint64_t result = (double *)_MTLMessageContextPush_();
  }
  if (v3[5] != 0.0 && ((void)v3[5] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    return (double *)_MTLMessageContextPush_();
  }
  return result;
}

unint64_t validateMTLScissorRect(MTLDebugRenderCommandEncoder *a1, const MTLScissorRect *a2, _MTLMessageContext *a3)
{
  NSUInteger v5 = [(MTLDebugRenderCommandEncoder *)a1 width];
  unint64_t result = [(MTLDebugRenderCommandEncoder *)a1 height];
  NSUInteger v7 = result;
  if (a2->width + a2->x > v5) {
    unint64_t result = _MTLMessageContextPush_();
  }
  if (a2->height + a2->y > v7) {
    return _MTLMessageContextPush_();
  }
  return result;
}

uint64_t _MTLDebugValidateDeferredStoreActionOnDevice(void *a1, unint64_t a2, void *a3, unint64_t a4, unsigned int a5)
{
  _MTLMessageContextBegin_();
  uint64_t v10 = [a3 _descriptorPrivate];
  if (a2 == 4) {
    _MTLMessageContextPush_();
  }
  if (((a5 >> a4) & 1) == 0) {
    _MTLMessageContextPush_();
  }
  if (a2 > 4 || ((1 << a2) & 0x1A) == 0) && (*(unsigned char *)(v10 + 48))
  {
    if (a4 == 8)
    {
      uint64_t v15 = @"the depth attachment";
    }
    else if (a4 == 9)
    {
      uint64_t v15 = @"the stencil attachment";
    }
    else
    {
      uint64_t v15 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"color attachment %lu", a4);
    }
    if (a2 > 2) {
      uint64_t v17 = @"Unknown";
    }
    else {
      uint64_t v17 = off_264E14058[a2];
    }
    uint64_t v20 = (uint64_t)v15;
    unint64_t v21 = v17;
    _MTLMessageContextPush_();
  }
  if (!*(void *)v10) {
    return _MTLMessageContextEnd();
  }
  uint64_t v11 = [*(id *)v10 storageMode];
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0 && v11 == 3) {
    _MTLMessageContextPush_();
  }
  unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 == 2)
  {
    if (a4 == 9)
    {
      if ([a1 supportsMSAAStencilResolve]) {
        goto LABEL_22;
      }
      unint64_t v13 = *(void *)(v10 + 40);
      if (v13 <= 4)
      {
LABEL_16:
        unint64_t v14 = off_264E14070[v13];
LABEL_45:
        uint64_t v20 = [(__CFString *)v14 UTF8String];
        _MTLMessageContextPush_();
        goto LABEL_22;
      }
    }
    else
    {
      if (a4 != 8 || ([a1 supportsMSAADepthResolve] & 1) != 0)
      {
LABEL_22:
        if (!*(void *)(v10 + 112))
        {
          unint64_t v18 = *(void *)(v10 + 40);
          if (v18 > 4) {
            uint64_t v19 = @"Unknown";
          }
          else {
            uint64_t v19 = off_264E14070[v18];
          }
          [(__CFString *)v19 UTF8String];
          _MTLMessageContextPush_();
        }
        goto LABEL_23;
      }
      unint64_t v13 = *(void *)(v10 + 40);
      if (v13 < 5) {
        goto LABEL_16;
      }
    }
    unint64_t v14 = @"Unknown";
    goto LABEL_45;
  }
LABEL_23:
  if (*(void *)(v10 + 112))
  {
    if (a4 > 7)
    {
      if (a4 == 9)
      {
        if (v12 != 2) {
LABEL_46:
        }
          _MTLMessageContextPush_();
      }
      else if (a4 == 8 && v12 != 2)
      {
        goto LABEL_46;
      }
    }
    else if (v12 != 2)
    {
      goto LABEL_46;
    }
  }
  return _MTLMessageContextEnd();
}

uint64_t _MTLDebugValidateDeferredStoreActionOptionsOnDevice(void *a1, char a2, void *a3, uint64_t a4, unsigned int a5)
{
  _MTLMessageContextBegin_();
  if (((a5 >> a4) & 1) == 0) {
    _MTLMessageContextPush_();
  }
  uint64_t v10 = [a3 _descriptorPrivate];
  if (a2)
  {
    uint64_t v11 = v10;
    if (a4 == 8)
    {
      unint64_t v12 = @"the depth attachment";
    }
    else if (a4 == 9)
    {
      unint64_t v12 = @"the stencil attachment";
    }
    else
    {
      unint64_t v12 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"color attachment %lu", a4);
    }
    if (([a1 areProgrammableSamplePositionsSupported] & 1) == 0) {
      _MTLMessageContextPush_();
    }
    switch(*(void *)(v11 + 40))
    {
      case 1:
      case 3:
      case 4:
        break;
      default:
        _MTLMessageContextPush_();
        break;
    }
  }
  return _MTLMessageContextEnd();
}

unint64_t _MTLDebugValidateMTLPrimitiveType(unint64_t result, char a2)
{
  if (result >= 5 && (result - 5 > 4 || (a2 & 1) == 0)) {
    return MTLReportFailure();
  }
  return result;
}

unint64_t _MTLDebugValidateMTLPrimitiveTypeWithContext(unint64_t result, char a2)
{
  if (result >= 5 && (result - 5 > 4 || (a2 & 1) == 0)) {
    return _MTLMessageContextPush_();
  }
  return result;
}

BOOL writesStencilTexture(MTLStencilDescriptor *a1)
{
  MTLCompareFunction v2 = [(MTLStencilDescriptor *)a1 stencilCompareFunction];
  uint32_t v3 = [(MTLStencilDescriptor *)a1 writeMask];
  if (v2 == MTLCompareFunctionAlways)
  {
    if (!v3) {
      return 0;
    }
    return [(MTLStencilDescriptor *)a1 depthStencilPassOperation]
        || [(MTLStencilDescriptor *)a1 depthFailureOperation];
  }
  if (v3)
  {
    if ([(MTLStencilDescriptor *)a1 stencilFailureOperation]) {
      return 1;
    }
    return [(MTLStencilDescriptor *)a1 depthStencilPassOperation]
        || [(MTLStencilDescriptor *)a1 depthFailureOperation];
  }
  return 0;
}

unint64_t validateIndirectBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = *a6;
  unint64_t result = _MTLDebugValidateBuffer(a1, a2);
  if (*a6 == v10)
  {
    unint64_t result = [a2 length];
    if (a4 + a3 > result)
    {
      [a2 length];
      unint64_t result = _MTLMessageContextPush_();
    }
  }
  if ((a3 & 3) != 0) {
    return _MTLMessageContextPush_();
  }
  return result;
}

uint64_t validateSupportsTessellation(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [a1 originalObject];
  }

  return MTLValidateFeatureSupport();
}

uint64_t validateCommonTessellationErrors(void *a1, void *a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  validateSupportsTessellation(a1);
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  _MTLMessageContextBegin_();
  if (!*(unsigned char *)a3) {
    _MTLMessageContextPush_();
  }
  if (!objc_msgSend((id)objc_msgSend(a2, "vertexFunction"), "patchType"))
  {
    uint64_t v33 = a8;
    _MTLMessageContextPush_();
  }
  uint64_t v20 = objc_msgSend((id)objc_msgSend(a2, "vertexFunction", v33), "patchControlPointCount");
  if (v20 == -1)
  {
    if (a5 >= 0x21)
    {
      unint64_t v34 = a5;
      goto LABEL_42;
    }
  }
  else if (v20 != a5)
  {
    unint64_t v34 = a5;
    uint64_t v37 = v20;
    _MTLMessageContextPush_();
  }
  if (!a5 && a7)
  {
    unint64_t v34 = 0;
LABEL_42:
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  _MTLMessageContextBegin_();
  uint64_t v21 = [a2 tessellationFactorFormat];
  if (v21 == 1)
  {
    uint64_t v24 = objc_msgSend((id)objc_msgSend(a2, "vertexFunction"), "patchType");
    if (v24 == 1)
    {
      unint64_t v23 = 16;
    }
    else
    {
      if (v24 != 2) {
        goto LABEL_55;
      }
      unint64_t v23 = 24;
    }
  }
  else
  {
    if (v21) {
      goto LABEL_55;
    }
    uint64_t v22 = objc_msgSend((id)objc_msgSend(a2, "vertexFunction"), "patchType");
    if (v22 == 1)
    {
      unint64_t v23 = 8;
    }
    else
    {
      if (v22 != 2) {
        goto LABEL_55;
      }
      unint64_t v23 = 12;
    }
  }
  unint64_t v25 = objc_msgSend(a2, "tessellationFactorStepFunction", v34, v37);
  if (v25 - 2 >= 2)
  {
    if (v25 > 1) {
      goto LABEL_55;
    }
    if (!a4) {
      goto LABEL_28;
    }
    unint64_t v35 = a4;
    goto LABEL_40;
  }
  if (!a4)
  {
    unint64_t v35 = 0;
    _MTLMessageContextPush_();
  }
  if (a4 % v23)
  {
    unint64_t v35 = a4;
    unint64_t v38 = v23;
LABEL_40:
    _MTLMessageContextPush_();
  }
LABEL_28:
  uint64_t v26 = objc_msgSend(a2, "tessellationControlPointIndexType", v35, v38);
  if (v26 != 2)
  {
    if (v26 == 1)
    {
      if ((a7 & 1) == 0) {
        goto LABEL_43;
      }
      goto LABEL_36;
    }
    if (!v26)
    {
      if (a7) {
        goto LABEL_43;
      }
LABEL_36:
      if (!a6) {
        goto LABEL_44;
      }
LABEL_37:
      MTLArgumentType v27 = *(void **)(a3 + 16);
      uint64_t v28 = *(void *)(a3 + 40);
      uint64_t v29 = (uint64_t)a1;
      int v30 = 0;
      uint64_t v31 = 0;
      goto LABEL_52;
    }
LABEL_55:
    abort();
  }
  if (a7) {
    goto LABEL_36;
  }
LABEL_43:
  uint64_t v36 = a8;
  _MTLMessageContextPush_();
  if (a6) {
    goto LABEL_37;
  }
LABEL_44:
  switch(objc_msgSend(a2, "tessellationFactorStepFunction", v36))
  {
    case 0:
      goto LABEL_49;
    case 1:
      v23 *= a10 + a9;
      goto LABEL_49;
    case 2:
      goto LABEL_48;
    case 3:
      if (v23 * (a10 + a9) > a4) {
        _MTLMessageContextPush_();
      }
LABEL_48:
      unint64_t v23 = (a12 + a11) * a4;
LABEL_49:
      if (a10)
      {
        if (a12) {
          goto LABEL_51;
        }
      }
      else
      {
        _MTLMessageContextPush_();
        if (a12) {
          goto LABEL_51;
        }
      }
      _MTLMessageContextPush_();
LABEL_51:
      MTLArgumentType v27 = *(void **)(a3 + 16);
      uint64_t v28 = *(void *)(a3 + 40);
      uint64_t v29 = (uint64_t)a1;
      int v30 = 1;
      uint64_t v31 = v23;
      break;
    default:
      goto LABEL_55;
  }
LABEL_52:
  validateTessellationFactorBuffer(v29, v27, v28, v30, v31, (uint64_t *)&v39);
  return _MTLMessageContextEnd();
}

uint64_t _MTLTessellationControlPointIndexTypeToMTLIndexType(MTLTessellationControlPointIndexType a1)
{
  if (a1 == MTLTessellationControlPointIndexTypeUInt16) {
    return 0;
  }
  if (a1 != MTLTessellationControlPointIndexTypeUInt32) {
    abort();
  }
  return 1;
}

uint64_t validateCommonBarrier(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  NSUInteger v7 = (void *)result;
  if (a3 >= 4)
  {
    unint64_t v8 = a3;
    unint64_t result = _MTLMessageContextPush_();
    if ((a4 & 4) == 0) {
      goto LABEL_4;
    }
  }
  else if ((a4 & 4) == 0)
  {
    goto LABEL_4;
  }
  unint64_t result = objc_msgSend(v7, "supportsTileShaders", v8);
  if (!result)
  {
LABEL_7:
    unint64_t result = _MTLMessageContextPush_();
    goto LABEL_8;
  }
LABEL_4:
  if ((a4 & 0x18) != 0)
  {
    unint64_t result = [v7 supportsMeshShaders];
    if (!result) {
      goto LABEL_7;
    }
  }
  if (a4 >= 0x20) {
    goto LABEL_7;
  }
LABEL_8:
  if ((a5 & 4) != 0)
  {
    unint64_t result = [v7 supportsTileShaders];
    if (!result) {
      return _MTLMessageContextPush_();
    }
  }
  if ((a5 & 0x18) != 0)
  {
    unint64_t result = [v7 supportsMeshShaders];
    if (!result) {
      return _MTLMessageContextPush_();
    }
  }
  if (a5 >= 0x20) {
    return _MTLMessageContextPush_();
  }
  return result;
}

void sub_23BDEDAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL25validateFunctionArgumentsPU19objcproto9MTLDevice11objc_objectP8NSStringS2_P7NSArrayP24MTLDebugFunctionArgumentmS6_mS6_mP43MTLRenderPassColorAttachmentDescriptorArrayP47MTLRenderPipelineColorAttachmentDescriptorArraymP25MTLDepthStencilDescriptorP12NSMutableSetIP34MTLDebugRenderTargetAttachmentInfoEyS6_mbPKbP18_MTLMessageContextb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = [a2 rangeValue];
  unint64_t v5 = [a3 rangeValue];
  if (v4 >= v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = -1;
  }
  if (v4 > v5) {
    return 1;
  }
  else {
    return v6;
  }
}

BOOL usesStencilTexture(MTLStencilDescriptor *a1)
{
  if ([(MTLStencilDescriptor *)a1 stencilCompareFunction] == MTLCompareFunctionAlways)
  {
    if ([(MTLStencilDescriptor *)a1 writeMask]) {
      return [(MTLStencilDescriptor *)a1 depthStencilPassOperation]
    }
          || [(MTLStencilDescriptor *)a1 depthFailureOperation];
  }
  else
  {
    if ([(MTLStencilDescriptor *)a1 readMask]) {
      return 1;
    }
    if ([(MTLStencilDescriptor *)a1 writeMask])
    {
      if ([(MTLStencilDescriptor *)a1 stencilFailureOperation]) {
        return 1;
      }
      return [(MTLStencilDescriptor *)a1 depthStencilPassOperation]
          || [(MTLStencilDescriptor *)a1 depthFailureOperation];
    }
  }
  return 0;
}

unint64_t validateTessellationFactorBuffer(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11 = *a6;
  unint64_t result = _MTLDebugValidateBuffer(a1, a2);
  if (a4)
  {
    if (*a6 == v11)
    {
      unint64_t result = [a2 length];
      if (a5 + a3 > result)
      {
        [a2 length];
        unint64_t result = _MTLMessageContextPush_();
      }
    }
  }
  if ((a3 & 3) != 0) {
    return _MTLMessageContextPush_();
  }
  return result;
}

void std::vector<MTLViewport>::__throw_out_of_range[abi:ne180100]()
{
}

char *std::vector<MTLViewport>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLViewport>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLViewport>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

char *std::vector<MTLScissorRect>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MemberRef>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *std::vector<MTLViewport>::__assign_with_size[abi:ne180100]<MTLViewport const*,MTLViewport const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  NSUInteger v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *NSUInteger v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t result = std::vector<MTLViewport>::__vallocate[abi:ne180100](v7, v12);
    unint64_t v14 = (char *)v7[1];
    unint64_t v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    unint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    unint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v13 = &v9[v17];
  return result;
}

char *std::vector<MTLScissorRect>::__assign_with_size[abi:ne180100]<MTLScissorRect const*,MTLScissorRect const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  NSUInteger v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *NSUInteger v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t result = std::vector<MTLScissorRect>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    unint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    unint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  NSUInteger v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    NSUInteger v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          size_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      size_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_23BDF3B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PrepareExecuteIndirect(MTLGPUDebugComputeCommandEncoder *a1, void *a2, uint64_t a3)
{
  id v6 = [(MTLToolsObject *)a1 baseObject];
  uint64_t v7 = [(MTLToolsObject *)a1 device];
  int v8 = [a2 inheritsBuffers];
  int v9 = [a2 inheritsPipelineState];
  uint64_t v10 = *(void *)(v7 + 424);
  [v6 useResource:v10 usage:1];
  [v6 setBuffer:v10 offset:0 atIndex:2];
  objc_msgSend(v6, "useResource:usage:", objc_msgSend(a2, "baseObject"), 2);
  objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(a2, "internalICBBuffer"), 0, 0);
  currentPipeline = a1->_currentPipeline;
  if (currentPipeline) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v13 = [(MTLDebugInstrumentationData *)[(MTLToolsComputePipelineState *)currentPipeline debugInstrumentationData] bufferAccessMask];
    objc_msgSend(v6, "useResource:usage:", -[MTLToolsObject baseObject](-[MTLGPUDebugComputePipelineState indirectStateBuffer](a1->_currentPipeline, "indirectStateBuffer"), "baseObject"), 1);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLToolsObject baseObject](-[MTLGPUDebugComputePipelineState indirectStateBuffer](a1->_currentPipeline, "indirectStateBuffer"), "baseObject"), 0, 3);
    if (v9) {
      goto LABEL_9;
    }
LABEL_7:
    GlobalResidentBufferList::useBuffers((GlobalResidentBufferList *)(v7 + 552), a1);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(a2, "internalDispatchIDBuffer"), 0, 5);
    goto LABEL_10;
  }
  uint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
  if ((v9 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_9:
  BOOL v14 = objc_msgSend((id)objc_msgSend((id)v7, "baseObject"), "newBufferWithBytes:length:options:", &a1->_dispatchID, 24, 0);
  [v6 setBuffer:v14 offset:0 atIndex:5];
  [v6 useResource:v14 usage:1];

LABEL_10:
  uint64_t result = objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLBuffer baseObject](a1->_reportBuffer.buffer, "baseObject"), a1->_reportBuffer.offset, 4);
  int v16 = *(_DWORD *)(a3 + 16);
  if (v16 == -1) {
    uint64_t v17 = -1;
  }
  else {
    uint64_t v17 = *(unsigned int *)(a3 + 16);
  }
  if (v17 == 1)
  {
    if (v16 != 1) {
      goto LABEL_45;
    }
    [v6 setBytes:a3 length:8 atIndex:1];
  }
  else
  {
    if (v17) {
      return result;
    }
    if (v16) {
      goto LABEL_45;
    }
    id v18 = *(id *)a3;
    objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(*(id *)a3, "baseObject"), *(void *)(a3 + 8), 1);
    [(MTLToolsCommandEncoder *)a1 addRetainedObject:v18];
  }
  if ((*(void *)&a1->_options->var0 & 0x200000001) != 0)
  {
    [v6 setBuffer:a1->_bufferUsageTable offset:0 atIndex:6];
    [v6 setBuffer:a1->_textureUsageTable offset:0 atIndex:7];
    p_textureTypeTable = &a1->_textureTypeTable;
  }
  else
  {
    [v6 setBuffer:*(void *)(v7 + 424) offset:0 atIndex:6];
    [v6 setBuffer:*(void *)(v7 + 424) offset:0 atIndex:7];
    p_textureTypeTable = (MTLBuffer **)(v7 + 424);
  }
  [v6 setBuffer:*p_textureTypeTable offset:0 atIndex:8];
  if (v8)
  {
    a1->_handles.needsFlush = 1;
    uint64_t v34 = v13;
    MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::KernelEncoderClass>>((uint64_t)&a1->_handles, (unint64_t *)&v34, (id *)&a1->super.super.super.super.isa, 9, 10);
    if ((v9 & 1) == 0)
    {
      uint64_t v20 = objc_msgSend((id)v7, "ICB_Inherit_Buffers_ComputePipelineState");
LABEL_31:
      uint64_t v21 = (void *)v20;
      goto LABEL_32;
    }
  }
  else if (v9)
  {
    uint64_t v20 = objc_msgSend((id)v7, "ICB_Inherit_PSO_ComputePipelineState");
    goto LABEL_31;
  }
  if (((v8 | v9) & 1) == 0)
  {
    uint64_t v20 = objc_msgSend((id)v7, "ICB_Inherit_None_ComputePipelineState");
    goto LABEL_31;
  }
  if ((v8 & v9) != 0)
  {
    uint64_t v20 = objc_msgSend((id)v7, "ICB_Inherit_Both_ComputePipelineState");
    goto LABEL_31;
  }
  uint64_t v21 = 0;
LABEL_32:
  [v6 setComputePipelineState:v21];
  [v6 memoryBarrierWithScope:1];
  int v22 = *(_DWORD *)(a3 + 16);
  if (v22 == -1) {
    uint64_t v23 = -1;
  }
  else {
    uint64_t v23 = *(unsigned int *)(a3 + 16);
  }
  if (v23 == 1)
  {
    if (v22 == 1)
    {
      uint64_t v28 = *(unsigned int *)(a3 + 4);
      int64x2_t v29 = vdupq_n_s64(1uLL);
      uint64_t v26 = [v21 threadExecutionWidth];
      int64x2_t v27 = v29;
      uint64_t v24 = (long long *)&v28;
      unint64_t v25 = &v26;
      goto LABEL_40;
    }
LABEL_45:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (v23) {
    goto LABEL_41;
  }
  long long v32 = xmmword_23BE4ADA0;
  uint64_t v33 = 1;
  uint64_t v30 = [v21 threadExecutionWidth];
  int64x2_t v31 = vdupq_n_s64(1uLL);
  uint64_t v24 = &v32;
  unint64_t v25 = &v30;
LABEL_40:
  [v6 dispatchThreads:v24 threadsPerThreadgroup:v25];
LABEL_41:
  uint64_t result = [v6 memoryBarrierWithScope:1];
  if (v9) {
    return objc_msgSend(v6, "setComputePipelineState:", -[MTLToolsObject baseObject](a1->_currentPipeline, "baseObject"));
  }
  return result;
}

uint64_t RestoreInternalState(MTLGPUDebugComputeCommandEncoder *a1)
{
  [(MTLGPUDebugComputeCommandEncoder *)a1 setKernelReportBuffer:a1->_reportBuffer.buffer offset:a1->_reportBuffer.offset];
  uint64_t result = [(MTLGPUDebugComputeCommandEncoder *)a1 setBufferUsageTable:a1->_bufferUsageTable textureUsageTable:a1->_textureUsageTable textureTypeTable:a1->_textureTypeTable];
  if (a1->_currentPipeline)
  {
    a1->_currentPipeline = 0;
    uint64_t result = -[MTLGPUDebugComputeCommandEncoder setComputePipelineState:](a1, "setComputePipelineState:");
    a1->_handles.needsFlush = 1;
    a1->_threadgroup.needsFlush = 1;
  }
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::KernelEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  [a3[2] setBytes:a1 length:248 atIndex:a4];
  uint64_t result = [a3[2] setBytes:a1 + 744 length:248 atIndex:a5];
  unint64_t v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v11 = __clz(__rbit64(v10));
        uint64_t v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        uint64_t v13 = *(void *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13) {
          break;
        }
        uint64_t result = [a3 useResource:v13 usage:(v10 >> (v11 & 0x3E)) & 3];
        unint64_t v10 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::KernelEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v12 = *a2;
  id v13 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::KernelEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  unint64_t v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v9 = __clz(__rbit64(v8));
        uint64_t v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        uint64_t v11 = *(void *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11) {
          break;
        }
        uint64_t result = [v13 useResource:v11 usage:(v8 >> (v9 & 0x3E)) & 3];
        unint64_t v8 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::KernelEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = 0;
  uint64_t v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  [*((id *)*a1 + 2) setBuffer:v9 offset:v11 atIndex:0];
  [*((id *)*a1 + 2) setBytes:a2 + 992 length:124 atIndex:a4];
  return [*((id *)*a1 + 2) setBytes:a2 + 744 length:248 atIndex:a5];
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::KernelEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v10 = *a2;
  id v11 = a3;
  uint64_t result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::KernelEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  unint64_t v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        int v7 = __clz(__rbit64(v6));
        uint64_t v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        uint64_t v9 = *(void *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9) {
          break;
        }
        uint64_t result = [v11 useResource:v9 usage:(v6 >> (v7 & 0x3E)) & 3];
        unint64_t v6 = *a2;
        if (!*a2) {
          goto LABEL_6;
        }
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(unsigned char *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::KernelEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  for (unint64_t i = *a3; *a3; unint64_t i = *a3)
  {
    unint64_t v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(void *)a1 + 16), "setBuffer:offset:attributeStride:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(void *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), *(void *)(a2 + 8 * (v7 >> 1) + 744), v7 >> 1);
  }
  uint64_t v8 = *(void **)(*(void *)a1 + 16);

  return [v8 setBytes:a2 + 1120 length:496 atIndex:31];
}

uint64_t MTLFunctionHandleToToolsFunctionHandle(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = *(void **)([a2 device] + 48);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = __MTLFunctionHandleToToolsFunctionHandle_block_invoke;
  v8[3] = &unk_264E13C00;
  v8[4] = a1;
  v8[5] = a3;
  v8[6] = a2;
  return [v6 getCachedObjectForKey:a1 onMiss:v8];
}

uint64_t __MTLFunctionHandleToToolsFunctionHandle_block_invoke(void *a1)
{
  MTLCompareFunction v2 = [MTLToolsFunctionHandle alloc];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];

  return (uint64_t)[(MTLToolsFunctionHandle *)v2 initWithBaseObject:v3 parent:v4 function:v5];
}

id getIndirectConstant(MTLDataType a1)
{
  id v1 = objc_alloc(MEMORY[0x263F12918]);
  uint64_t Size = MTLDataTypeGetSize();
  uint64_t v3 = (void *)[v1 initWithName:&stru_26EF29A78 type:4 access:1 isActive:1 locationIndex:0 dataType:30 pixelFormat:0 aluType:0 dataSize:Size alignment:MTLDataTypeGetAlignment()];

  return v3;
}

void sub_23BDF63DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
}

id getStructMember(NSString *a1, uint64_t a2, MTLDataType a3, uint64_t a4, objc_object *a5)
{
  uint64_t v5 = objc_msgSend(objc_alloc(MEMORY[0x263F12A38]), "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", a1, a2, a3, 0, 0, a4, 0, 0, a5);

  return v5;
}

void sub_23BDF68D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100]((GPUDebugArgumentEncoderLayout **)va, 0);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void GPUDebugArgumentEncoderLayout::GPUDebugArgumentEncoderLayout(GPUDebugArgumentEncoderLayout *this, MTLStructType *a2, MTLGPUDebugDevice *a3)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  id v5 = [(MTLToolsObject *)a3 baseObject];
  unint64_t v6 = (void *)MEMORY[0x23ECD5710]();
  id v7 = +[MTLGPUDebugFunction internalStructTypeFromUserStructType:a2];
  uint64_t v8 = (void *)[v5 newIndirectArgumentBufferLayoutWithStructType:v7];
  *(void *)this = v8;
  [v8 setStructType:v7 withDevice:v5];
  MTLEnumerateIndirectResources();
}

void sub_23BDF6B6C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void ___ZN29GPUDebugArgumentEncoderLayoutC2EP13MTLStructTypeP17MTLGPUDebugDevice_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a3;
  operator new();
}

void sub_23BDF6C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, GPUDebugArgumentEncoderLayout *a9)
{
}

void GPUDebugArgumentEncoderLayout::~GPUDebugArgumentEncoderLayout(id *this)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t *GPUDebugArgumentEncoderLayout::sublayout(GPUDebugArgumentEncoderLayout *this, unsigned int a2)
{
  unsigned int v3 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::find<unsigned int>((void *)this + 1, &v3);
  if (result) {
    return (uint64_t *)result[3];
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

GPUDebugArgumentEncoderLayout *std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](GPUDebugArgumentEncoderLayout **a1, GPUDebugArgumentEncoderLayout *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    GPUDebugArgumentEncoderLayout::~GPUDebugArgumentEncoderLayout(result);
    JUMPOUT(0x23ECD5400);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::__emplace_unique_key_args<unsigned int,unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    id v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  BOOL v14 = (void *)(a1 + 16);
  unint64_t v12 = operator new(0x20uLL);
  *unint64_t v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  uint64_t v15 = *a4;
  *a4 = 0;
  v12[3] = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *unint64_t v12 = *v23;
LABEL_38:
    *uint64_t v23 = v12;
    goto LABEL_39;
  }
  *unint64_t v12 = *v14;
  *BOOL v14 = v12;
  *(void *)(v22 + 8 * v4) = v14;
  if (*v12)
  {
    unint64_t v24 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_23BDF7018(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,void *>>>::operator()[abi:ne180100](uint64_t a1, GPUDebugArgumentEncoderLayout **__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::__deallocate_node(a1, *(GPUDebugArgumentEncoderLayout ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::__deallocate_node(uint64_t a1, GPUDebugArgumentEncoderLayout **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = *v2;
      std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = (GPUDebugArgumentEncoderLayout **)v3;
    }
    while (v3);
  }
}

void emitRenderTargetDistribution(void *a1, uint64_t a2)
{
  uint64_t v186 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[17];
  unsigned int v4 = *(_DWORD *)(v3 + 16);
  if (v4)
  {
    if (!*MEMORY[0x263F12D18]) {
      goto LABEL_5;
    }
    if (*MEMORY[0x263F12D18] == 1)
    {
      printf("\n\nRenderAttachmentCounts, minAttachments=%u, maxAttachments=%u, avgAttachments=%f, totalAttachments=%llu, countAttachments=%u", *(_DWORD *)v3, *(_DWORD *)(v3 + 4), (float)((float)*(unint64_t *)(v3 + 8) / (float)v4), *(void *)(v3 + 8), v4);
LABEL_5:
      unint64_t v5 = [a1 telemetryLog];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = (int *)a1[17];
        int v8 = *v6;
        int v7 = v6[1];
        unsigned int v9 = v6[4];
        unint64_t v10 = *((void *)v6 + 1);
        if (v9) {
          double v11 = (float)((float)v10 / (float)v9);
        }
        else {
          double v11 = 0.0;
        }
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)uint64_t v108 = v8;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v7;
        *(_WORD *)uint64_t v109 = 2048;
        *(double *)&v109[2] = v11;
        *(_WORD *)uint64_t v110 = 2048;
        *(void *)&v110[2] = v10;
        LOWORD(v111) = 1024;
        *(_DWORD *)((char *)&v111 + 2) = v9;
        _os_log_impl(&dword_23BD25000, v5, OS_LOG_TYPE_DEFAULT, "RenderAttachmentCounts, minAttachments=%u, maxAttachments=%u, avgAttachments=%f, totalAttachments=%llu, countAttachments=%u", buf, 0x28u);
      }
    }
  }
  unint64_t v12 = *(void **)(a2 + 16);
  if (!v12) {
    return;
  }
  unint64_t v13 = "unknown";
  do
  {
    uint64_t v84 = v12;
    BOOL v14 = v12 + 2;
    uint64_t Name = (const char *)MTLPixelFormatGetName();
    unint64_t v15 = 0;
    uint64_t v87 = v14;
    uint64_t v85 = v14 + 1;
    do
    {
      unint64_t v16 = 0;
      float v17 = "stencil";
      if (v15 == 8) {
        float v17 = "depth";
      }
      uint64_t v102 = v17;
      do
      {
        unint64_t v18 = 0;
        unint64_t v103 = v16;
        do
        {
          unint64_t v19 = 0;
          unint64_t v104 = v18;
          do
          {
            char v20 = 0;
            uint64_t v21 = 0;
            uint64_t v106 = (uint64_t)&v87[396 * v16 + 25345 + 132 * v18 + 22 * v19];
            uint64_t v86 = (uint64_t)&v85[3168 * v15 + 396 * v16 + 132 * v18 + 22 * v19];
            char v22 = 1;
            unint64_t v105 = v19;
            do
            {
              char v23 = v22;
              if (v15 != 9 && (v22 & 1) == 0) {
                break;
              }
              uint64_t v24 = v106;
              if (v15 != 8)
              {
                if (v15 == 9) {
                  uint64_t v24 = (uint64_t)&v87[792 * v16 + 28513 + 264 * v18 + 44 * v19 + 22 * v21];
                }
                else {
                  uint64_t v24 = v86;
                }
              }
              if (!*(_DWORD *)v24) {
                goto LABEL_90;
              }
              if (!*MEMORY[0x263F12D18]) {
                goto LABEL_59;
              }
              if (*MEMORY[0x263F12D18] == 1)
              {
                unint64_t v25 = "unknown";
                if (v16 <= 7) {
                  unint64_t v25 = off_264E140E8[v16];
                }
                uint64_t v98 = v25;
                uint64_t v26 = v102;
                if (v15 <= 7) {
                  uint64_t v26 = (const char *)objc_msgSend((id)objc_msgSend(NSString, "stringWithFormat:", @"color%lu", v15), "UTF8String");
                }
                if (v18 <= 2) {
                  unint64_t v13 = off_264E14128[v18];
                }
                uint64_t v96 = v13;
                int64x2_t v27 = "invalid";
                if (v19 <= 4) {
                  int64x2_t v27 = off_264E14140[v19];
                }
                unsigned int v94 = v27;
                uint64_t v28 = "Unknown";
                if (v20) {
                  uint64_t v28 = "DepthResolvedSample";
                }
                if (v23) {
                  uint64_t v28 = "Sample0";
                }
                if (v15 == 9) {
                  int64x2_t v29 = v28;
                }
                else {
                  int64x2_t v29 = "None";
                }
                unsigned int v30 = *(_DWORD *)(v24 + 24);
                unint64_t v31 = *(void *)(v24 + 16);
                float v32 = 0.0;
                float v33 = 0.0;
                if (v30) {
                  float v33 = (float)v31 / (float)v30;
                }
                unsigned int v34 = *(_DWORD *)(v24 + 48);
                unint64_t v35 = *(void *)(v24 + 40);
                if (v34) {
                  float v32 = (float)v35 / (float)v34;
                }
                unsigned int v36 = *(_DWORD *)(v24 + 72);
                float v37 = 0.0;
                float v38 = 0.0;
                unint64_t v39 = *(void *)(v24 + 64);
                if (v36) {
                  float v38 = (float)v39 / (float)v36;
                }
                unsigned int v40 = *(_DWORD *)(v24 + 96);
                unint64_t v41 = *(void *)(v24 + 88);
                if (v40) {
                  float v37 = (float)v41 / (float)v40;
                }
                unsigned int v42 = *(_DWORD *)(v24 + 120);
                float v43 = 0.0;
                float v44 = 0.0;
                unint64_t v45 = *(void *)(v24 + 112);
                if (v42) {
                  float v44 = (float)v45 / (float)v42;
                }
                unsigned int v46 = *(_DWORD *)(v24 + 144);
                unint64_t v47 = *(void *)(v24 + 136);
                if (v46) {
                  float v43 = (float)v47 / (float)v46;
                }
                unsigned int v48 = *(_DWORD *)(v24 + 168);
                if (v48) {
                  float v49 = (float)*(unint64_t *)(v24 + 160) / (float)v48;
                }
                else {
                  float v49 = 0.0;
                }
                printf("\n\nRenderTarget, format=%s, type=%s, index=%s, loadAction=%s, storeAction=%s, multisampleStencilResolveFilter=%s, minWidth=%u, maxWidth=%u, avgWidth=%f, totalWidth=%llu, countWidth=%u, minHeight=%u, maxHeight=%u, avgHeight=%f, totalHeight=%llu, countHeight=%u, minDepth=%u, maxDepth=%u, avgDepth=%f, totalDepth=%llu, countDepth=%u, minArrayLength=%u, maxArrayLength=%u, avgArrayLength=%f, totalArrayLength=%llu, countArrayLength=%u, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minSlice=%u, maxSlice=%u, avgSlice=%f, totalSlice=%llu, countSlice=%u, minLevel=%u, maxLevel=%u, avgLevel=%f, totalLevel=%llu, countLevel=%u", Name, v98, v26, v96, v94, v29, *(_DWORD *)(v24 + 8), *(_DWORD *)(v24 + 12), v33, v31,
                  v30,
                  *(_DWORD *)(v24 + 32),
                  *(_DWORD *)(v24 + 36),
                  v32,
                  v35,
                  v34,
                  *(_DWORD *)(v24 + 56),
                  *(_DWORD *)(v24 + 60),
                  v38,
                  v39,
                  v36,
                  *(_DWORD *)(v24 + 80),
                  *(_DWORD *)(v24 + 84),
                  v37,
                  v41,
                  v40,
                  *(_DWORD *)(v24 + 104),
                  *(_DWORD *)(v24 + 108),
                  v44,
                  v45,
                  v42,
                  *(_DWORD *)(v24 + 128),
                  *(_DWORD *)(v24 + 132),
                  v43,
                  v47,
                  v46,
                  *(_DWORD *)(v24 + 152),
                  *(_DWORD *)(v24 + 156),
                  v49,
                  *(void *)(v24 + 160),
                  v48);
                unint64_t v13 = "unknown";
                unint64_t v16 = v103;
                unint64_t v18 = v104;
                unint64_t v19 = v105;
LABEL_59:
                double v50 = [a1 telemetryLog];
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v51 = "unknown";
                  if (v16 <= 7) {
                    uint64_t v51 = off_264E140E8[v16];
                  }
                  unsigned int v99 = v51;
                  uint64_t v52 = (uint64_t)v102;
                  if (v15 <= 7) {
                    uint64_t v52 = objc_msgSend((id)objc_msgSend(NSString, "stringWithFormat:", @"color%lu", v15), "UTF8String");
                  }
                  uint64_t v53 = "unknown";
                  if (v18 <= 2) {
                    uint64_t v53 = off_264E14128[v18];
                  }
                  unsigned int v54 = "invalid";
                  if (v19 <= 4) {
                    unsigned int v54 = off_264E14140[v19];
                  }
                  unint64_t v55 = "Unknown";
                  if (v20) {
                    unint64_t v55 = "DepthResolvedSample";
                  }
                  if (v23) {
                    unint64_t v55 = "Sample0";
                  }
                  if (v15 != 9) {
                    unint64_t v55 = "None";
                  }
                  unsigned int v93 = v55;
                  int v95 = *(_DWORD *)(v24 + 8);
                  int v97 = *(_DWORD *)(v24 + 12);
                  unsigned int v56 = *(_DWORD *)(v24 + 24);
                  unint64_t v57 = *(void *)(v24 + 16);
                  float v58 = 0.0;
                  float v59 = 0.0;
                  if (v56) {
                    float v59 = (float)v57 / (float)v56;
                  }
                  int v91 = *(_DWORD *)(v24 + 32);
                  int v92 = *(_DWORD *)(v24 + 36);
                  unsigned int v60 = *(_DWORD *)(v24 + 48);
                  unint64_t v61 = *(void *)(v24 + 40);
                  if (v60) {
                    float v58 = (float)v61 / (float)v60;
                  }
                  int v89 = *(_DWORD *)(v24 + 56);
                  int v90 = *(_DWORD *)(v24 + 60);
                  unsigned int v62 = *(_DWORD *)(v24 + 72);
                  float v63 = 0.0;
                  float v64 = 0.0;
                  unint64_t v65 = *(void *)(v24 + 64);
                  if (v62) {
                    float v64 = (float)v65 / (float)v62;
                  }
                  int v66 = *(_DWORD *)(v24 + 80);
                  int v88 = *(_DWORD *)(v24 + 84);
                  unsigned int v67 = *(_DWORD *)(v24 + 96);
                  unint64_t v68 = *(void *)(v24 + 88);
                  if (v67) {
                    float v63 = (float)v68 / (float)v67;
                  }
                  int v69 = *(_DWORD *)(v24 + 104);
                  int v70 = *(_DWORD *)(v24 + 108);
                  unsigned int v71 = *(_DWORD *)(v24 + 120);
                  float v72 = 0.0;
                  float v73 = 0.0;
                  unint64_t v74 = *(void *)(v24 + 112);
                  if (v71) {
                    float v73 = (float)v74 / (float)v71;
                  }
                  int v76 = *(_DWORD *)(v24 + 128);
                  int v75 = *(_DWORD *)(v24 + 132);
                  unsigned int v77 = *(_DWORD *)(v24 + 144);
                  unint64_t v78 = *(void *)(v24 + 136);
                  if (v77) {
                    float v72 = (float)v78 / (float)v77;
                  }
                  int v80 = *(_DWORD *)(v24 + 152);
                  int v79 = *(_DWORD *)(v24 + 156);
                  unsigned int v81 = *(_DWORD *)(v24 + 168);
                  unint64_t v82 = *(void *)(v24 + 160);
                  if (v81) {
                    float v83 = (float)v82 / (float)v81;
                  }
                  else {
                    float v83 = 0.0;
                  }
                  __int16 v187 = v53;
                  *(void *)uint64_t v109 = v99;
                  *(void *)uint64_t v110 = v52;
                  *(_DWORD *)buf = 136325378;
                  *(void *)uint64_t v108 = Name;
                  *(_WORD *)&v108[8] = 2080;
                  *(_WORD *)&v109[8] = 2080;
                  *(_WORD *)&v110[8] = 2080;
                  uint64_t v111 = v53;
                  __int16 v112 = 2080;
                  uint64_t v113 = v54;
                  __int16 v114 = 2080;
                  uint64_t v115 = v93;
                  __int16 v116 = 1024;
                  int v117 = v95;
                  __int16 v118 = 1024;
                  int v119 = v97;
                  __int16 v120 = 2048;
                  double v121 = v59;
                  __int16 v122 = 2048;
                  unint64_t v123 = v57;
                  __int16 v124 = 1024;
                  unsigned int v125 = v56;
                  __int16 v126 = 1024;
                  int v127 = v91;
                  __int16 v128 = 1024;
                  int v129 = v92;
                  __int16 v130 = 2048;
                  double v131 = v58;
                  __int16 v132 = 2048;
                  unint64_t v133 = v61;
                  __int16 v134 = 1024;
                  unsigned int v135 = v60;
                  __int16 v136 = 1024;
                  int v137 = v89;
                  __int16 v138 = 1024;
                  int v139 = v90;
                  __int16 v140 = 2048;
                  double v141 = v64;
                  __int16 v142 = 2048;
                  unint64_t v143 = v65;
                  __int16 v144 = 1024;
                  unsigned int v145 = v62;
                  __int16 v146 = 1024;
                  int v147 = v66;
                  __int16 v148 = 1024;
                  int v149 = v88;
                  __int16 v150 = 2048;
                  double v151 = v63;
                  __int16 v152 = 2048;
                  unint64_t v153 = v68;
                  __int16 v154 = 1024;
                  unsigned int v155 = v67;
                  __int16 v156 = 1024;
                  int v157 = v69;
                  __int16 v158 = 1024;
                  int v159 = v70;
                  __int16 v160 = 2048;
                  double v161 = v73;
                  __int16 v162 = 2048;
                  unint64_t v163 = v74;
                  __int16 v164 = 1024;
                  unsigned int v165 = v71;
                  __int16 v166 = 1024;
                  int v167 = v76;
                  __int16 v168 = 1024;
                  int v169 = v75;
                  __int16 v170 = 2048;
                  double v171 = v72;
                  __int16 v172 = 2048;
                  unint64_t v173 = v78;
                  __int16 v174 = 1024;
                  unsigned int v175 = v77;
                  __int16 v176 = 1024;
                  int v177 = v80;
                  __int16 v178 = 1024;
                  int v179 = v79;
                  __int16 v180 = 2048;
                  double v181 = v83;
                  __int16 v182 = 2048;
                  unint64_t v183 = v82;
                  __int16 v184 = 1024;
                  unsigned int v185 = v81;
                  _os_log_impl(&dword_23BD25000, v50, OS_LOG_TYPE_DEFAULT, "RenderTarget, format=%s, type=%s, index=%s, loadAction=%s, storeAction=%s, multisampleStencilResolveFilter=%s, minWidth=%u, maxWidth=%u, avgWidth=%f, totalWidth=%llu, countWidth=%u, minHeight=%u, maxHeight=%u, avgHeight=%f, totalHeight=%llu, countHeight=%u, minDepth=%u, maxDepth=%u, avgDepth=%f, totalDepth=%llu, countDepth=%u, minArrayLength=%u, maxArrayLength=%u, avgArrayLength=%f, totalArrayLength=%llu, countArrayLength=%u, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minSlice=%u, maxSlice=%u, avgSlice=%f, totalSlice=%llu, countSlice=%u, minLevel=%u, maxLevel=%u, avgLevel=%f, totalLevel=%llu, countLevel=%u", buf, 0x148u);
                  unint64_t v13 = "unknown";
                  unint64_t v16 = v103;
                  unint64_t v18 = v104;
                  unint64_t v19 = v105;
                }
              }
LABEL_90:
              char v22 = 0;
              char v20 = 1;
              uint64_t v21 = 1;
            }
            while ((v23 & 1) != 0);
            ++v19;
          }
          while (v19 != 6);
          ++v18;
        }
        while (v18 != 3);
        ++v16;
      }
      while (v16 != 8);
      ++v15;
    }
    while (v15 != 10);
    unint64_t v12 = (void *)*v84;
  }
  while (*v84);
}

void emitRenderPassAttributes(MTLTelemetryDevice *a1, MTLTelemetryStatisticUIRec *a2)
{
  uint64_t v221 = *MEMORY[0x263EF8340];
  if (*MEMORY[0x263F12D18])
  {
    if (*MEMORY[0x263F12D18] != 1) {
      return;
    }
    unsigned int count = a2->count;
    unint64_t total = a2->total;
    float v6 = 0.0;
    float v7 = 0.0;
    if (count) {
      float v7 = (float)total / (float)count;
    }
    renderTargetArrayLengthDistributiouint64_t n = a1->renderTargetArrayLengthDistribution;
    unsigned int v9 = renderTargetArrayLengthDistribution->count;
    unint64_t v10 = renderTargetArrayLengthDistribution->total;
    if (v9) {
      float v6 = (float)v10 / (float)v9;
    }
    viewportDistributiouint64_t n = a1->viewportDistribution;
    unsigned int v12 = viewportDistribution->var0.count;
    unint64_t v13 = viewportDistribution->var0.total;
    float v14 = 0.0;
    float v15 = 0.0;
    if (v12) {
      float v15 = (float)v13 / (float)v12;
    }
    unsigned int var3 = viewportDistribution->var1.var3;
    float var2 = viewportDistribution->var1.var2;
    if (var3) {
      float v14 = var2 / (float)var3;
    }
    unsigned int v18 = viewportDistribution->var2.var3;
    float v19 = viewportDistribution->var2.var2;
    float v20 = 0.0;
    float v21 = 0.0;
    if (v18) {
      float v21 = v19 / (float)v18;
    }
    unsigned int v22 = viewportDistribution->var3.var3;
    float v23 = viewportDistribution->var3.var2;
    if (v22) {
      float v20 = v23 / (float)v22;
    }
    unsigned int v24 = viewportDistribution->var4.var3;
    float v25 = viewportDistribution->var4.var2;
    double v26 = 0.0;
    double v27 = 0.0;
    if (v24) {
      double v27 = (float)(v25 / (float)v24);
    }
    scissorRectDistributiouint64_t n = a1->scissorRectDistribution;
    unsigned int v29 = scissorRectDistribution->var0.count;
    unint64_t v30 = scissorRectDistribution->var0.total;
    if (v29) {
      double v26 = (float)((float)v30 / (float)v29);
    }
    float var0 = viewportDistribution->var3.var0;
    float var1 = viewportDistribution->var3.var1;
    float v33 = viewportDistribution->var4.var0;
    float v34 = viewportDistribution->var4.var1;
    unsigned int v35 = scissorRectDistribution->var1.var3;
    double v36 = 0.0;
    double v37 = 0.0;
    float v38 = scissorRectDistribution->var1.var2;
    if (v35) {
      double v37 = (float)(v38 / (float)v35);
    }
    double v39 = v7;
    double v40 = v6;
    double v41 = v15;
    double v42 = viewportDistribution->var1.var0;
    double v43 = viewportDistribution->var1.var1;
    double v44 = v14;
    miuint64_t n = renderTargetArrayLengthDistribution->min;
    unsigned int max = renderTargetArrayLengthDistribution->max;
    double v47 = var2;
    double v48 = viewportDistribution->var2.var0;
    double v49 = viewportDistribution->var2.var1;
    unsigned int v51 = viewportDistribution->var0.min;
    unsigned int v50 = viewportDistribution->var0.max;
    double v52 = v21;
    double v53 = v19;
    double v54 = var0;
    double v55 = var1;
    double v56 = v20;
    double v57 = v23;
    double v58 = v33;
    double v59 = v34;
    double v60 = v25;
    double v61 = v38;
    unsigned int v62 = scissorRectDistribution->var2.var3;
    float v63 = scissorRectDistribution->var2.var2;
    if (v62) {
      double v36 = (float)(v63 / (float)v62);
    }
    printf("\n\nRenderStateAttributes, minDepthClipModeClamp=%u, maxDepthClipModeClamp=%u, avgDepthClipModeClamp=%f, totalDepthClipModeClamp=%llu, countDepthClipModeClamp=%u, minRenderTargetArrayLength=%u, maxRenderTargetArrayLength=%u, avgRenderTargetArrayLength=%f, totalRenderTargetArrayLength=%llu, countRenderTargetArrayLength=%u, minViewportCount=%u, maxViewportCount=%u, avgViewportCount=%f, totalViewportCount=%llu, countViewportCount=%u, minViewportWidth=%.2f, maxViewportWidth=%.2f, avgViewportWidth=%f, totalViewportWidth=%.2f, countViewportWidth=%u, minViewportHeight=%.2f, maxViewportHeight=%.2f, avgViewportHeight=%f, totalViewportHeight=%.2f, countViewportHeight=%u, minViewportZNear=%.2f, maxViewportZNear=%.2f, avgViewportZNear=%f, totalViewportZNear=%.2f, countViewportZNear=%u, minViewportZFar=%.2f, maxViewportZFar=%.2f, avgViewportZFar=%f, totalViewportZFar=%.2f, countViewportZFar=%u, minScissorRectCount=%u, maxScissorRectCount=%u, avgScissorRectCount=%f, totalScissorRectCount=%llu, countScissorRectCount=%u, minScissorRectWidth=%.2f, maxScissorRectWidth=%.2f, avgScissorRectWidth=%f, totalScissorRectWidth=%.2f, countScissorRectWidth=%u, minScissorRectHeight=%.2f, maxScissorRectHeight=%.2f, avgScissorRectHeight=%f, totalScissorRectHeight=%.2f, countScissorRectHeight=%u", a2->min, a2->max, v39, total, count,
      min,
      max,
      v40,
      v10,
      v9,
      v51,
      v50,
      v41,
      v13,
      v12,
      v42,
      v43,
      v44,
      v47,
      var3,
      v48,
      v49,
      v52,
      v53,
      v18,
      v54,
      v55,
      v56,
      v57,
      v22,
      v58,
      v59,
      v27,
      v60,
      v24,
      scissorRectDistribution->var0.min,
      scissorRectDistribution->var0.max,
      v26,
      v30,
      v29,
      scissorRectDistribution->var1.var0,
      scissorRectDistribution->var1.var1,
      v37,
      v61,
      v35,
      scissorRectDistribution->var2.var0,
      scissorRectDistribution->var2.var1,
      v36,
      v63,
      scissorRectDistribution->var2.var3);
  }
  float v64 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v64, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v65 = a2->count;
    unint64_t v66 = a2->total;
    double v67 = 0.0;
    double v68 = 0.0;
    if (v65) {
      double v68 = (float)((float)v66 / (float)v65);
    }
    int v69 = a1->renderTargetArrayLengthDistribution;
    unsigned int v70 = v69->count;
    unint64_t v71 = v69->total;
    if (v70) {
      double v67 = (float)((float)v71 / (float)v70);
    }
    float v72 = a1->viewportDistribution;
    unsigned int v73 = v72->var0.count;
    unint64_t v74 = v72->var0.total;
    double v75 = 0.0;
    double v76 = 0.0;
    if (v73) {
      double v76 = (float)((float)v74 / (float)v73);
    }
    unsigned int v77 = v72->var1.var3;
    float v78 = v72->var1.var2;
    if (v77) {
      double v75 = (float)(v78 / (float)v77);
    }
    unsigned int v79 = v72->var2.var3;
    float v80 = v72->var2.var2;
    double v81 = 0.0;
    double v82 = 0.0;
    if (v79) {
      double v82 = (float)(v80 / (float)v79);
    }
    unsigned int v83 = v72->var3.var3;
    float v84 = v72->var3.var2;
    if (v83) {
      double v81 = (float)(v84 / (float)v83);
    }
    unsigned int v85 = v72->var4.var3;
    float v86 = v72->var4.var2;
    double v87 = 0.0;
    double v88 = 0.0;
    if (v85) {
      double v88 = (float)(v86 / (float)v85);
    }
    int v89 = a1->scissorRectDistribution;
    unsigned int v90 = v89->var0.count;
    unint64_t v91 = v89->var0.total;
    if (v90) {
      double v87 = (float)((float)v91 / (float)v90);
    }
    unsigned int v92 = v89->var1.var3;
    double v93 = 0.0;
    double v94 = 0.0;
    float v95 = v89->var1.var2;
    if (v92) {
      double v94 = (float)(v95 / (float)v92);
    }
    unsigned int v97 = a2->min;
    unsigned int v96 = a2->max;
    double v98 = v72->var1.var0;
    unsigned int v100 = v69->min;
    unsigned int v99 = v69->max;
    double v101 = v72->var1.var1;
    double v102 = v78;
    double v103 = v72->var2.var0;
    double v104 = v72->var2.var1;
    unsigned int v106 = v72->var0.min;
    unsigned int v105 = v72->var0.max;
    double v107 = v80;
    double v108 = v72->var3.var0;
    double v109 = v72->var3.var1;
    double v110 = v72->var4.var0;
    double v111 = v72->var4.var1;
    double v112 = v86;
    unsigned int v114 = v89->var0.min;
    unsigned int v113 = v89->var0.max;
    double v115 = v89->var1.var0;
    double v116 = v89->var1.var1;
    double v117 = v89->var2.var0;
    unsigned int v118 = v89->var2.var3;
    double v119 = v89->var2.var1;
    float v120 = v89->var2.var2;
    if (v118) {
      double v93 = (float)(v120 / (float)v118);
    }
    *(_DWORD *)buf = 67121664;
    unsigned int v122 = v97;
    __int16 v123 = 1024;
    unsigned int v124 = v96;
    __int16 v125 = 2048;
    double v126 = v68;
    __int16 v127 = 2048;
    unint64_t v128 = v66;
    __int16 v129 = 1024;
    unsigned int v130 = v65;
    __int16 v131 = 1024;
    unsigned int v132 = v100;
    __int16 v133 = 1024;
    unsigned int v134 = v99;
    __int16 v135 = 2048;
    double v136 = v67;
    __int16 v137 = 2048;
    unint64_t v138 = v71;
    __int16 v139 = 1024;
    unsigned int v140 = v70;
    __int16 v141 = 1024;
    unsigned int v142 = v106;
    __int16 v143 = 1024;
    unsigned int v144 = v105;
    __int16 v145 = 2048;
    double v146 = v76;
    __int16 v147 = 2048;
    unint64_t v148 = v74;
    __int16 v149 = 1024;
    unsigned int v150 = v73;
    __int16 v151 = 2048;
    double v152 = v98;
    __int16 v153 = 2048;
    double v154 = v101;
    __int16 v155 = 2048;
    double v156 = v75;
    __int16 v157 = 2048;
    double v158 = v102;
    __int16 v159 = 1024;
    unsigned int v160 = v77;
    __int16 v161 = 2048;
    double v162 = v103;
    __int16 v163 = 2048;
    double v164 = v104;
    __int16 v165 = 2048;
    double v166 = v82;
    __int16 v167 = 2048;
    double v168 = v107;
    __int16 v169 = 1024;
    unsigned int v170 = v79;
    __int16 v171 = 2048;
    double v172 = v108;
    __int16 v173 = 2048;
    double v174 = v109;
    __int16 v175 = 2048;
    double v176 = v81;
    __int16 v177 = 2048;
    double v178 = v84;
    __int16 v179 = 1024;
    unsigned int v180 = v83;
    __int16 v181 = 2048;
    double v182 = v110;
    __int16 v183 = 2048;
    double v184 = v111;
    __int16 v185 = 2048;
    double v186 = v88;
    __int16 v187 = 2048;
    double v188 = v112;
    __int16 v189 = 1024;
    unsigned int v190 = v85;
    __int16 v191 = 1024;
    unsigned int v192 = v114;
    __int16 v193 = 1024;
    unsigned int v194 = v113;
    __int16 v195 = 2048;
    double v196 = v87;
    __int16 v197 = 2048;
    unint64_t v198 = v91;
    __int16 v199 = 1024;
    unsigned int v200 = v90;
    __int16 v201 = 2048;
    double v202 = v115;
    __int16 v203 = 2048;
    double v204 = v116;
    __int16 v205 = 2048;
    double v206 = v94;
    __int16 v207 = 2048;
    double v208 = v95;
    __int16 v209 = 1024;
    unsigned int v210 = v92;
    __int16 v211 = 2048;
    double v212 = v117;
    __int16 v213 = 2048;
    double v214 = v119;
    __int16 v215 = 2048;
    double v216 = v93;
    __int16 v217 = 2048;
    double v218 = v120;
    __int16 v219 = 1024;
    unsigned int v220 = v118;
    _os_log_impl(&dword_23BD25000, (os_log_t)v64, OS_LOG_TYPE_DEFAULT, "RenderStateAttributes, minDepthClipModeClamp=%u, maxDepthClipModeClamp=%u, avgDepthClipModeClamp=%f, totalDepthClipModeClamp=%llu, countDepthClipModeClamp=%u, minRenderTargetArrayLength=%u, maxRenderTargetArrayLength=%u, avgRenderTargetArrayLength=%f, totalRenderTargetArrayLength=%llu, countRenderTargetArrayLength=%u, minViewportCount=%u, maxViewportCount=%u, avgViewportCount=%f, totalViewportCount=%llu, countViewportCount=%u, minViewportWidth=%.2f, maxViewportWidth=%.2f, avgViewportWidth=%f, totalViewportWidth=%.2f, countViewportWidth=%u, minViewportHeight=%.2f, maxViewportHeight=%.2f, avgViewportHeight=%f, totalViewportHeight=%.2f, countViewportHeight=%u, minViewportZNear=%.2f, maxViewportZNear=%.2f, avgViewportZNear=%f, totalViewportZNear=%.2f, countViewportZNear=%u, minViewportZFar=%.2f, maxViewportZFar=%.2f, avgViewportZFar=%f, totalViewportZFar=%.2f, countViewportZFar=%u, minScissorRectCount=%u, maxScissorRectCount=%u, avgScissorRectCount=%f, totalScissorRectCount=%llu, countScissorRectCount=%u, minScissorRectWidth=%.2f, maxScissorRectWidth=%.2f, avgScissorRectWidth=%f, totalScissorRectWidth=%.2f, countScissorRectWidth=%u, minScissorRectHeight=%.2f, maxScissorRectHeight=%.2f, avgScissorRectHeight=%f, totalScissorRectHeight=%.2f, countScissorRectHeight=%u", buf, 0x1AEu);
  }
}

void emitDrawDistribution(MTLTelemetryDevice *a1, MTLTelemetryDrawDistributionRec *a2)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  int v4 = *MEMORY[0x263F12D18];
  if (*MEMORY[0x263F12D18])
  {
    if (v4 != 1) {
      goto LABEL_13;
    }
    renderEncoderDrawCallDistributiouint64_t n = a1->renderEncoderDrawCallDistribution;
    miuint64_t n = renderEncoderDrawCallDistribution->min;
    unsigned int max = renderEncoderDrawCallDistribution->max;
    unsigned int count = renderEncoderDrawCallDistribution->count;
    unint64_t total = renderEncoderDrawCallDistribution->total;
    if (count) {
      double v10 = (float)((float)total / (float)count);
    }
    else {
      double v10 = 0.0;
    }
    printf("\n\nDrawsPerRenderEncoder, minDraws=%u, maxDraws=%u, avgDraws=%f, totalDraws=%llu, countDraws=%u", min, max, v10, total, count);
  }
  double v11 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v12 = a1->renderEncoderDrawCallDistribution;
    unsigned int v14 = v12->min;
    unsigned int v13 = v12->max;
    unsigned int v15 = v12->count;
    unint64_t v16 = v12->total;
    if (v15) {
      double v17 = (float)((float)v16 / (float)v15);
    }
    else {
      double v17 = 0.0;
    }
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)unsigned int v79 = v14;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v13;
    *(_WORD *)float v80 = 2048;
    *(double *)&v80[2] = v17;
    *(_WORD *)double v81 = 2048;
    *(void *)&v81[2] = v16;
    *(_WORD *)double v82 = 1024;
    *(_DWORD *)&v82[2] = v15;
    _os_log_impl(&dword_23BD25000, (os_log_t)v11, OS_LOG_TYPE_DEFAULT, "DrawsPerRenderEncoder, minDraws=%u, maxDraws=%u, avgDraws=%f, totalDraws=%llu, countDraws=%u", buf, 0x28u);
  }
  int v4 = *MEMORY[0x263F12D18];
LABEL_13:
  if (v4)
  {
    if (v4 != 1) {
      goto LABEL_24;
    }
    commandBufferDrawCallDistributiouint64_t n = a1->commandBufferDrawCallDistribution;
    unsigned int v19 = commandBufferDrawCallDistribution->min;
    unsigned int v20 = commandBufferDrawCallDistribution->max;
    unsigned int v21 = commandBufferDrawCallDistribution->count;
    unint64_t v22 = commandBufferDrawCallDistribution->total;
    if (v21) {
      double v23 = (float)((float)v22 / (float)v21);
    }
    else {
      double v23 = 0.0;
    }
    printf("\n\nDrawsPerCommandBuffer, minDraws=%u, maxDraws=%u, avgDraws=%f, totalDraws=%llu, countDraws=%u", v19, v20, v23, v22, v21);
  }
  unsigned int v24 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_DEFAULT))
  {
    float v25 = a1->commandBufferDrawCallDistribution;
    unsigned int v27 = v25->min;
    unsigned int v26 = v25->max;
    unsigned int v28 = v25->count;
    unint64_t v29 = v25->total;
    if (v28) {
      double v30 = (float)((float)v29 / (float)v28);
    }
    else {
      double v30 = 0.0;
    }
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)unsigned int v79 = v27;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v26;
    *(_WORD *)float v80 = 2048;
    *(double *)&v80[2] = v30;
    *(_WORD *)double v81 = 2048;
    *(void *)&v81[2] = v29;
    *(_WORD *)double v82 = 1024;
    *(_DWORD *)&v82[2] = v28;
    _os_log_impl(&dword_23BD25000, (os_log_t)v24, OS_LOG_TYPE_DEFAULT, "DrawsPerCommandBuffer, minDraws=%u, maxDraws=%u, avgDraws=%f, totalDraws=%llu, countDraws=%u", buf, 0x28u);
  }
LABEL_24:
  commandBufferMemoryBarrierDistributiouint64_t n = a1->commandBufferMemoryBarrierDistribution;
  unsigned int v32 = commandBufferMemoryBarrierDistribution->count;
  if (v32)
  {
    if (!*MEMORY[0x263F12D18]) {
      goto LABEL_28;
    }
    if (*MEMORY[0x263F12D18] == 1)
    {
      printf("\n\nMemoryBarriersPerCommandBuffer, minMemoryBarriers=%u, maxMemoryBarriers=%u, avgMemoryBarriers=%f, totalMemoryBarriers=%llu, countMemoryBarriers=%u", commandBufferMemoryBarrierDistribution->min, commandBufferMemoryBarrierDistribution->max, (float)((float)commandBufferMemoryBarrierDistribution->total / (float)v32), commandBufferMemoryBarrierDistribution->total, v32);
LABEL_28:
      float v33 = [(MTLTelemetryDevice *)a1 telemetryLog];
      if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_DEFAULT))
      {
        float v34 = a1->commandBufferMemoryBarrierDistribution;
        unsigned int v36 = v34->min;
        unsigned int v35 = v34->max;
        unsigned int v37 = v34->count;
        unint64_t v38 = v34->total;
        if (v37) {
          double v39 = (float)((float)v38 / (float)v37);
        }
        else {
          double v39 = 0.0;
        }
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)unsigned int v79 = v36;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v35;
        *(_WORD *)float v80 = 2048;
        *(double *)&v80[2] = v39;
        *(_WORD *)double v81 = 2048;
        *(void *)&v81[2] = v38;
        *(_WORD *)double v82 = 1024;
        *(_DWORD *)&v82[2] = v37;
        _os_log_impl(&dword_23BD25000, (os_log_t)v33, OS_LOG_TYPE_DEFAULT, "MemoryBarriersPerCommandBuffer, minMemoryBarriers=%u, maxMemoryBarriers=%u, avgMemoryBarriers=%f, totalMemoryBarriers=%llu, countMemoryBarriers=%u", buf, 0x28u);
      }
    }
  }
  for (unint64_t i = 0; i != 5; ++i)
  {
    uint64_t v41 = 0;
    unsigned int v77 = a2;
    do
    {
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      while (1)
      {
        unsigned int var0 = a2->var0[0][0][v42].var0;
        if (!var0) {
          goto LABEL_63;
        }
        int v45 = *MEMORY[0x263F12D18];
        if (v42 == 2) {
          break;
        }
        if (!v45) {
          goto LABEL_51;
        }
        if (v45 == 1)
        {
          unsigned int v46 = "Unknown";
          if (v43 <= 2) {
            unsigned int v46 = off_264E14168[v43];
          }
          double v47 = "unknown";
          if (i <= 4) {
            double v47 = off_264E14180[i];
          }
          double v48 = "unknown";
          if (v41 <= 2) {
            double v48 = off_264E141A8[(int)v41];
          }
          double v49 = (char *)a2 + v42 * 56;
          unsigned int v50 = a2->var0[0][0][v42].var1.count;
          unint64_t v51 = a2->var0[0][0][v42].var1.total;
          float v52 = 0.0;
          float v53 = 0.0;
          if (v50) {
            float v53 = (float)v51 / (float)v50;
          }
          unsigned int v54 = *((_DWORD *)v49 + 12);
          unint64_t v55 = *((void *)v49 + 5);
          if (v54) {
            float v52 = (float)v55 / (float)v54;
          }
          printf("\n\n%s, primitive=%s, indexType=%s, minVertices=%u, maxVertices=%u, avgVertices=%f, totalVertices=%llu, countVertices=%u, minInstances=%u, maxInstances=%u, avgInstances=%f, totalInstances=%llu, countInstances=%u", v46, v47, v48, *((_DWORD *)v49 + 2), *((_DWORD *)v49 + 3), v53, v51, v50, *((_DWORD *)v49 + 8), *((_DWORD *)v49 + 9), v52, v55, v54);
LABEL_51:
          double v56 = [(MTLTelemetryDevice *)a1 telemetryLog];
          if (os_log_type_enabled((os_log_t)v56, OS_LOG_TYPE_DEFAULT))
          {
            double v57 = "Unknown";
            if (v43 <= 2) {
              double v57 = off_264E14168[v43];
            }
            double v58 = "unknown";
            if (i <= 4) {
              double v58 = off_264E14180[i];
            }
            double v59 = "unknown";
            if (v41 <= 2) {
              double v59 = off_264E141A8[(int)v41];
            }
            double v60 = (char *)a2 + v42 * 56;
            unsigned int v61 = a2->var0[0][0][v42].var1.count;
            unint64_t v62 = a2->var0[0][0][v42].var1.total;
            float v63 = 0.0;
            float v64 = 0.0;
            if (v61) {
              float v64 = (float)v62 / (float)v61;
            }
            unsigned int v65 = *((_DWORD *)v60 + 12);
            unint64_t v66 = *((void *)v60 + 5);
            if (v65) {
              float v63 = (float)v66 / (float)v65;
            }
            int v67 = *((_DWORD *)v60 + 2);
            int v68 = *((_DWORD *)v60 + 3);
            int v69 = *((_DWORD *)v60 + 8);
            int v70 = *((_DWORD *)v60 + 9);
            *(_DWORD *)buf = 136318210;
            *(void *)unsigned int v79 = v57;
            *(_WORD *)&v79[8] = 2080;
            *(void *)float v80 = v58;
            *(_WORD *)&v80[8] = 2080;
            *(void *)double v81 = v59;
            *(_WORD *)&v81[8] = 1024;
            *(_DWORD *)double v82 = v67;
            *(_WORD *)&v82[4] = 1024;
            int v83 = v68;
            __int16 v84 = 2048;
            double v85 = v64;
            __int16 v86 = 2048;
            unint64_t v87 = v62;
            __int16 v88 = 1024;
            unsigned int v89 = v61;
            __int16 v90 = 1024;
            int v91 = v69;
            __int16 v92 = 1024;
            int v93 = v70;
            __int16 v94 = 2048;
            double v95 = v63;
            __int16 v96 = 2048;
            unint64_t v97 = v66;
            __int16 v98 = 1024;
            unsigned int v99 = v65;
            _os_log_impl(&dword_23BD25000, (os_log_t)v56, OS_LOG_TYPE_DEFAULT, "%s, primitive=%s, indexType=%s, minVertices=%u, maxVertices=%u, avgVertices=%f, totalVertices=%llu, countVertices=%u, minInstances=%u, maxInstances=%u, avgInstances=%f, totalInstances=%llu, countInstances=%u", buf, 0x6Cu);
          }
        }
LABEL_63:
        ++v43;
        if (++v42 == 3) {
          goto LABEL_64;
        }
      }
      if (!v45) {
        goto LABEL_73;
      }
      if (v45 == 1)
      {
        unint64_t v71 = "unknown";
        if (i <= 4) {
          unint64_t v71 = off_264E14180[i];
        }
        float v72 = "unknown";
        if (v41 <= 2) {
          float v72 = off_264E141A8[(int)v41];
        }
        printf("\n\n%s, primitive=%s, indexType=%s, count=%u", "DrawIndirect", v71, v72, var0);
LABEL_73:
        unsigned int v73 = [(MTLTelemetryDevice *)a1 telemetryLog];
        if (os_log_type_enabled((os_log_t)v73, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v74 = "unknown";
          if (i <= 4) {
            unint64_t v74 = off_264E14180[i];
          }
          double v75 = "unknown";
          if (v41 <= 2) {
            double v75 = off_264E141A8[(int)v41];
          }
          unsigned int v76 = a2->var0[0][0][2].var0;
          *(_DWORD *)buf = 136315906;
          *(void *)unsigned int v79 = "DrawIndirect";
          *(_WORD *)&v79[8] = 2080;
          *(void *)float v80 = v74;
          *(_WORD *)&v80[8] = 2080;
          *(void *)double v81 = v75;
          *(_WORD *)&v81[8] = 1024;
          *(_DWORD *)double v82 = v76;
          _os_log_impl(&dword_23BD25000, (os_log_t)v73, OS_LOG_TYPE_DEFAULT, "%s, primitive=%s, indexType=%s, count=%u", buf, 0x26u);
        }
      }
LABEL_64:
      ++v41;
      a2 = (MTLTelemetryDrawDistributionRec *)((char *)a2 + 168);
    }
    while (v41 != 3);
    a2 = (MTLTelemetryDrawDistributionRec *)v77->var0[1];
  }
}

void emitAnisoClippedCounts(MTLTelemetryDevice *a1, MTLTelemetryAnisoClippedCountsRec *a2)
{
  uint64_t v3 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = (_DWORD *)MEMORY[0x263F12D18];
  unint64_t v5 = &a2->var0[1];
  do
  {
    unint64_t v6 = v3 + 1;
    if (*v4)
    {
      if (*v4 != 1) {
        goto LABEL_11;
      }
      float v7 = "unknown";
      if (v6 <= 3) {
        float v7 = off_264E141C0[v3];
      }
      printf("\n\nAnisoClippedUsage, type=%s, count=%u", v7, v5[v3]);
    }
    int v8 = [(MTLTelemetryDevice *)a1 telemetryLog];
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = "unknown";
      if (v6 <= 3) {
        unsigned int v9 = off_264E141D8[v3 + 1];
      }
      unsigned int v10 = v5[v3];
      *(_DWORD *)buf = 136315394;
      unsigned int v12 = v9;
      __int16 v13 = 1024;
      unsigned int v14 = v10;
      _os_log_impl(&dword_23BD25000, (os_log_t)v8, OS_LOG_TYPE_DEFAULT, "AnisoClippedUsage, type=%s, count=%u", buf, 0x12u);
    }
LABEL_11:
    ++v3;
  }
  while (v3 != 3);
}

void *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::piecewise_construct_t const&,std::tuple<MTLPixelFormat&&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x44118uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  bzero(i + 3, 0x44100uLL);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t i = *v20;
LABEL_38:
    *unsigned int v20 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BDFBA74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void emitEncoderDistribution(MTLTelemetryDevice *a1, MTLTelemetryEncoderDistributionRec *a2)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  if (*MEMORY[0x263F12D18])
  {
    if (*MEMORY[0x263F12D18] != 1) {
      return;
    }
    unsigned int count = a2->var0.count;
    unint64_t total = a2->var0.total;
    double v6 = 0.0;
    double v7 = 0.0;
    if (count) {
      double v7 = (float)((float)total / (float)count);
    }
    unsigned int v8 = a2->var2.count;
    unint64_t v9 = a2->var2.total;
    if (v8) {
      double v6 = (float)((float)v9 / (float)v8);
    }
    unsigned int v10 = a2->var1.count;
    unint64_t v11 = a2->var1.total;
    double v12 = 0.0;
    double v13 = 0.0;
    if (v10) {
      double v13 = (float)((float)v11 / (float)v10);
    }
    unsigned int v14 = a2->var3.count;
    unint64_t v15 = a2->var3.total;
    if (v14) {
      double v12 = (float)((float)v15 / (float)v14);
    }
    unsigned int v16 = a2->var4.count;
    unint64_t v17 = a2->var4.total;
    if (v16) {
      double v18 = (float)((float)v17 / (float)v16);
    }
    else {
      double v18 = 0.0;
    }
    printf("\n\nCommandBuffer, minRenderEncoders=%u, maxRenderEncoders=%u, avgRenderEncoders=%f, totalRenderEncoders=%llu, countRenderEncoders=%u, minComputeEncoders=%u, maxComputeEncoders=%u, avgComputeEncoders=%f, totalComputeEncoders=%llu, countComputeEncoders=%u, minBlitEncoders=%u, maxBlitEncoders=%u, avgBlitEncoders=%f, totalBlitEncoders=%llu, countBlitEncoders=%u, minParallelEncoders=%u, maxParallelEncoders=%u, avgParallelEncoders=%f, totalParallelEncoders=%llu, countParallelEncoders=%u, minTotalEncoders=%u, maxTotalEncoders=%u, avgTotalEncoders=%f, totalTotalEncoders=%llu, countTotalEncoders=%u, maxTextureBindCount=%u", a2->var0.min, a2->var0.max, v7, total, count, a2->var2.min, a2->var2.max, v6, v9, v8, a2->var1.min,
      a2->var1.max,
      v13,
      v11,
      v10,
      a2->var3.min,
      a2->var3.max,
      v12,
      v15,
      v14,
      a2->var4.min,
      a2->var4.max,
      v18,
      v17,
      a2->var4.count,
      a1->textureBindCount->max);
  }
  uint64_t v19 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v20 = a2->var0.count;
    unint64_t v21 = a2->var0.total;
    double v22 = 0.0;
    double v23 = 0.0;
    if (v20) {
      double v23 = (float)((float)v21 / (float)v20);
    }
    unsigned int v24 = a2->var2.count;
    unint64_t v25 = a2->var2.total;
    if (v24) {
      double v22 = (float)((float)v25 / (float)v24);
    }
    unsigned int v26 = a2->var1.count;
    unint64_t v27 = a2->var1.total;
    double v28 = 0.0;
    double v29 = 0.0;
    if (v26) {
      double v29 = (float)((float)v27 / (float)v26);
    }
    unsigned int v30 = a2->var3.count;
    unint64_t v31 = a2->var3.total;
    if (v30) {
      double v28 = (float)((float)v31 / (float)v30);
    }
    miuint64_t n = a2->var0.min;
    unsigned int max = a2->var0.max;
    unsigned int v35 = a2->var2.min;
    unsigned int v34 = a2->var2.max;
    unsigned int v37 = a2->var1.min;
    unsigned int v36 = a2->var1.max;
    unsigned int v39 = a2->var3.min;
    unsigned int v38 = a2->var3.max;
    unsigned int v41 = a2->var4.min;
    unsigned int v40 = a2->var4.max;
    unsigned int v42 = a2->var4.count;
    unint64_t v43 = a2->var4.total;
    if (v42) {
      double v44 = (float)((float)v43 / (float)v42);
    }
    else {
      double v44 = 0.0;
    }
    unsigned int v45 = a1->textureBindCount->max;
    *(_DWORD *)buf = 67115520;
    unsigned int v47 = min;
    __int16 v48 = 1024;
    unsigned int v49 = max;
    __int16 v50 = 2048;
    double v51 = v23;
    __int16 v52 = 2048;
    unint64_t v53 = v21;
    __int16 v54 = 1024;
    unsigned int v55 = v20;
    __int16 v56 = 1024;
    unsigned int v57 = v35;
    __int16 v58 = 1024;
    unsigned int v59 = v34;
    __int16 v60 = 2048;
    double v61 = v22;
    __int16 v62 = 2048;
    unint64_t v63 = v25;
    __int16 v64 = 1024;
    unsigned int v65 = v24;
    __int16 v66 = 1024;
    unsigned int v67 = v37;
    __int16 v68 = 1024;
    unsigned int v69 = v36;
    __int16 v70 = 2048;
    double v71 = v29;
    __int16 v72 = 2048;
    unint64_t v73 = v27;
    __int16 v74 = 1024;
    unsigned int v75 = v26;
    __int16 v76 = 1024;
    unsigned int v77 = v39;
    __int16 v78 = 1024;
    unsigned int v79 = v38;
    __int16 v80 = 2048;
    double v81 = v28;
    __int16 v82 = 2048;
    unint64_t v83 = v31;
    __int16 v84 = 1024;
    unsigned int v85 = v30;
    __int16 v86 = 1024;
    unsigned int v87 = v41;
    __int16 v88 = 1024;
    unsigned int v89 = v40;
    __int16 v90 = 2048;
    double v91 = v44;
    __int16 v92 = 2048;
    unint64_t v93 = v43;
    __int16 v94 = 1024;
    unsigned int v95 = v42;
    __int16 v96 = 1024;
    unsigned int v97 = v45;
    _os_log_impl(&dword_23BD25000, (os_log_t)v19, OS_LOG_TYPE_DEFAULT, "CommandBuffer, minRenderEncoders=%u, maxRenderEncoders=%u, avgRenderEncoders=%f, totalRenderEncoders=%llu, countRenderEncoders=%u, minComputeEncoders=%u, maxComputeEncoders=%u, avgComputeEncoders=%f, totalComputeEncoders=%llu, countComputeEncoders=%u, minBlitEncoders=%u, maxBlitEncoders=%u, avgBlitEncoders=%f, totalBlitEncoders=%llu, countBlitEncoders=%u, minParallelEncoders=%u, maxParallelEncoders=%u, avgParallelEncoders=%f, totalParallelEncoders=%llu, countParallelEncoders=%u, minTotalEncoders=%u, maxTotalEncoders=%u, avgTotalEncoders=%f, totalTotalEncoders=%llu, countTotalEncoders=%u, maxTextureBindCount=%u", buf, 0xC6u);
  }
}

void *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::piecewise_construct_t const&,std::tuple<MTLPixelFormat const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x44118uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  bzero(i + 3, 0x44100uLL);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t i = *v20;
LABEL_38:
    *unsigned int v20 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BDFEA70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::piecewise_construct_t const&,std::tuple<MTLPixelFormat const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x1608uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  bzero(i + 3, 0x15F0uLL);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t i = *v20;
LABEL_38:
    *unsigned int v20 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BDFEC9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t validateMTLSamplerDescriptor(void *a1, void *a2)
{
  if ([a2 compareFunction]) {
    MTLValidateFeatureSupport();
  }
  _MTLMessageContextBegin_();
  if (([a2 normalizedCoordinates] & 1) == 0)
  {
    if ([a2 mipFilter]) {
      _MTLMessageContextPush_();
    }
    if ([a2 sAddressMode]
      && [a2 sAddressMode] != 4
      && [a2 sAddressMode] != 5
      && [a2 sAddressMode] != 6
      || [a2 tAddressMode]
      && [a2 tAddressMode] != 4
      && [a2 tAddressMode] != 5
      && [a2 sAddressMode] != 6
      || [a2 rAddressMode]
      && [a2 rAddressMode] != 4
      && [a2 rAddressMode] != 5
      && [a2 sAddressMode] != 6)
    {
      _MTLMessageContextPush_();
    }
    if ([a2 maxAnisotropy] != 1) {
      _MTLMessageContextPush_();
    }
    if ([a2 minFilter] && objc_msgSend(a2, "minFilter") != 1
      || (uint64_t v4 = [a2 minFilter], v4 != objc_msgSend(a2, "magFilter")))
    {
      _MTLMessageContextPush_();
    }
  }
  if ([a2 minFilter] >= 3)
  {
    uint64_t v11 = [a2 minFilter];
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a2, "magFilter", v11) >= 3)
  {
    uint64_t v12 = [a2 magFilter];
    _MTLMessageContextPush_();
  }
  if ((unint64_t)objc_msgSend(a2, "mipFilter", v12) >= 3)
  {
    uint64_t v13 = [a2 mipFilter];
    _MTLMessageContextPush_();
  }
  if (!objc_msgSend(a2, "maxAnisotropy", v13) || (unint64_t)objc_msgSend(a2, "maxAnisotropy") >= 0x11)
  {
    uint64_t v21 = 16;
    uint64_t v14 = [a2 maxAnisotropy];
    uint64_t v20 = 1;
    _MTLMessageContextPush_();
  }
  unint64_t v5 = objc_msgSend(a2, "sAddressMode", v14, v20, v21);
  if (v5 >= 7)
  {
    uint64_t v15 = [a2 sAddressMode];
    _MTLMessageContextPush_();
    BOOL v6 = 0;
    unsigned int v7 = 0;
  }
  else
  {
    BOOL v6 = (v5 & 0x7F) == 4;
    unsigned int v7 = (0x60u >> v5) & 1;
  }
  unint64_t v8 = objc_msgSend(a2, "tAddressMode", v15);
  if (v8 >= 4)
  {
    if (v8 - 5 >= 2)
    {
      if (v8 == 4)
      {
        BOOL v6 = 1;
      }
      else
      {
        uint64_t v16 = [a2 tAddressMode];
        _MTLMessageContextPush_();
      }
    }
    else
    {
      unsigned int v7 = 1;
    }
  }
  unint64_t v9 = objc_msgSend(a2, "rAddressMode", v16);
  if (v9 < 4)
  {
LABEL_47:
    if (!v6) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  if (v9 - 5 < 2)
  {
    unsigned int v7 = 1;
    if (!v6) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  if (v9 == 4)
  {
    BOOL v6 = 1;
    goto LABEL_47;
  }
  uint64_t v17 = [a2 rAddressMode];
  _MTLMessageContextPush_();
  if (!v6) {
    goto LABEL_51;
  }
LABEL_48:
  if (v7 && [a2 borderColor]) {
    _MTLMessageContextPush_();
  }
LABEL_51:
  if (objc_msgSend(a2, "minFilter", v17) == 2 || objc_msgSend(a2, "magFilter") == 2)
  {
    if ([a2 sAddressMode] == 3) {
      _MTLMessageContextPush_();
    }
    if ([a2 tAddressMode] == 3) {
      _MTLMessageContextPush_();
    }
    if ([a2 rAddressMode] == 3) {
      _MTLMessageContextPush_();
    }
    if ([a2 compareFunction])
    {
      uint64_t v18 = [a2 compareFunction];
      _MTLMessageContextPush_();
    }
  }
  if (objc_msgSend(a2, "supportArgumentBuffers", v18) && objc_msgSend(a2, "pixelFormat"))
  {
    [a2 pixelFormat];
    uint64_t Name = MTLPixelFormatGetName();
    _MTLMessageContextPush_();
  }
  if ((objc_msgSend(a2, "sAddressMode", Name) == 1
     || [a2 rAddressMode] == 1
     || [a2 tAddressMode] == 1)
    && ([a1 supportsMirrorClampToEdgeSamplerMode] & 1) == 0)
  {
    _MTLMessageContextPush_();
  }
  if (([a2 sAddressMode] == 6
     || [a2 rAddressMode] == 6
     || [a2 tAddressMode] == 6)
    && ([a1 supportsSamplerAddressModeClampToHalfBorder] & 1) == 0)
  {
    _MTLMessageContextPush_();
    if (!v7) {
      return _MTLMessageContextEnd();
    }
  }
  else if (!v7)
  {
    return _MTLMessageContextEnd();
  }
  if ([a2 borderColorSPI] == 3 && (objc_msgSend(a1, "supportsCustomBorderColor") & 1) == 0) {
    _MTLMessageContextPush_();
  }
  if (([a2 borderColor] == 2 || objc_msgSend(a2, "borderColor") == 1 || !objc_msgSend(a2, "borderColor"))
    && ([a1 supportsBlackOrWhiteSamplerBorderColors] & 1) == 0)
  {
    [a2 borderColor];
    MTLSamplerBorderColorString();
    _MTLMessageContextPush_();
  }
  return _MTLMessageContextEnd();
}

__n128 MTLSamplerDescriptorHashMap::extractBits@<Q0>(MTLSamplerDescriptorHashMap *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = (__n128 *)[(MTLSamplerDescriptorHashMap *)this descriptorPrivate];
  __n128 result = *v4;
  *a2 = *v4;
  a2[1].n128_u64[0] = v4[1].n128_u64[0];
  return result;
}

void MTLSamplerDescriptorHashMap::MTLSamplerDescriptorHashMap(MTLSamplerDescriptorHashMap *this)
{
  this->_map.__table_.__bucket_list_ = 0u;
  *(_OWORD *)&this->_map.__table_.__p1_.__value_.__next_ = 0u;
  this->_map.__table_.__p3_.__value_ = 1.0;
  this->_limit = 0;
}

unint64_t MTLSamplerDescriptorHashMap::setLimitForDevice(MTLSamplerDescriptorHashMap *this, MTLDebugDevice *a2)
{
  unint64_t result = [(MTLToolsDevice *)a2 maxIndirectSamplersPerDevice];
  this->_limit = result;
  return result;
}

void *MTLSamplerDescriptorHashMap::add(MTLSamplerDescriptorHashMap *this, MTLSamplerDescriptor *a2)
{
  uint64_t v3 = [(MTLSamplerDescriptor *)a2 descriptorPrivate];
  uint64_t v4 = *(void *)(v3 + 16);
  long long v7 = *(_OWORD *)v3;
  uint64_t v8 = v4;
  int v9 = 0;
  unint64_t result = std::__hash_table<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,std::__unordered_map_hasher<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::hash_t,MTLSamplerDescriptorHashMap::equal_t,true>,std::__unordered_map_equal<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::equal_t,MTLSamplerDescriptorHashMap::hash_t,true>,std::allocator<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>>>::__emplace_unique_key_args<std::array<unsigned long long,3ul>,std::pair<std::array<unsigned long long,3ul> const,unsigned int> const&>((uint64_t)this, &v7, &v7);
  if (!v6) {
    ++*((_DWORD *)result + 10);
  }
  if (this->_map.__table_.__p2_.__value_ > this->_limit) {
    return (void *)MTLReportFailure();
  }
  return result;
}

void *MTLSamplerDescriptorHashMap::remove(MTLSamplerDescriptorHashMap *this, MTLSamplerDescriptor *a2)
{
  uint64_t v3 = [(MTLSamplerDescriptor *)a2 descriptorPrivate];
  long long v6 = *(_OWORD *)v3;
  uint64_t v7 = *(void *)(v3 + 16);
  unint64_t result = std::__hash_table<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,std::__unordered_map_hasher<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::hash_t,MTLSamplerDescriptorHashMap::equal_t,true>,std::__unordered_map_equal<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::equal_t,MTLSamplerDescriptorHashMap::hash_t,true>,std::allocator<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>>>::find<std::array<unsigned long long,3ul>>(this, &v6);
  int v5 = *((_DWORD *)result + 10);
  if (!v5) {
    return (void *)std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::erase(this, result);
  }
  *((_DWORD *)result + 1std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](&a9, 0) = v5 - 1;
  return result;
}

uint64_t MTLSamplerDescriptorHashMap::hash_t::operator()(uint64_t a1, void *a2)
{
  return a2[2] ^ a2[1] ^ *a2;
}

uint64_t MTLSamplerDescriptorHashMap::equal_t::operator()(uint64_t a1, void *a2, void *a3)
{
  if (*a2 == *a3 && a2[1] == a3[1])
  {
    if (a2[2] == a3[2]) {
      char v3 = -1;
    }
    else {
      char v3 = 0;
    }
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

void *std::__hash_table<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,std::__unordered_map_hasher<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::hash_t,MTLSamplerDescriptorHashMap::equal_t,true>,std::__unordered_map_equal<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::equal_t,MTLSamplerDescriptorHashMap::hash_t,true>,std::allocator<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>>>::__emplace_unique_key_args<std::array<unsigned long long,3ul>,std::pair<std::array<unsigned long long,3ul> const,unsigned int> const&>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  unint64_t v8 = v6 ^ v7 ^ *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v6 ^ v7 ^ *a2;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == v6 && i[4] == v7) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x30uLL);
  *unint64_t i = 0;
  i[1] = v8;
  long long v14 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  double v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *unint64_t i = *v22;
LABEL_40:
    void *v22 = i;
    goto LABEL_41;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    double v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BE01A04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,std::__unordered_map_hasher<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::hash_t,MTLSamplerDescriptorHashMap::equal_t,true>,std::__unordered_map_equal<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::equal_t,MTLSamplerDescriptorHashMap::hash_t,true>,std::allocator<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>>>::find<std::array<unsigned long long,3ul>>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  unint64_t v5 = v3 ^ v4 ^ *a2;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v3 ^ v4 ^ *a2;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v5;
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  unint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2 && result[3] == v3 && result[4] == v4) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      unint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t MTLLegacySVReadReportBuffer(void *a1, unsigned int *a2, uint64_t a3)
{
  v43[1] = *MEMORY[0x263EF8340];
  unint64_t v31 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithArray:", objc_msgSend((id)objc_msgSend(a1, "baseObject"), "logs"));
  unsigned int v32 = a1;
  uint64_t v4 = [a1 device];
  uint64_t v5 = 0;
  uint64_t v6 = v4 + 264;
  v43[0] = 0x100000000;
  uint64_t v29 = v4 + 88;
  do
  {
    uint64_t v7 = *((unsigned int *)v43 + v5);
    if ((*a2 >> v7))
    {
      unint64_t v8 = objc_alloc_init(MTLLegacySVBufferErrorLog);
      unint64_t v9 = (int *)&a2[32 * v7];
      resolvedSharedPacketData<GPUDebugBadAccessPacket>::resolvedSharedPacketData(v38, (void *)v9 + 1, a3, v32, v8);
      uint64_t v10 = *((unsigned __int16 *)v9 + 24);
      unint64_t v11 = *((void *)v9 + 3);
      [(MTLLegacySVBufferErrorLog *)v8 setOperation:*((unsigned __int16 *)v9 + 25)];
      unint64_t v12 = *(void *)(v6 + 20);
      if ((v12 & 0x800000) != 0)
      {
        if (v7) {
          LODWORD(v13) = 0;
        }
        else {
          uint64_t v13 = (v12 >> 27) & 1;
        }
      }
      else
      {
        LODWORD(v13) = 1;
      }
      if (v7) {
        uint64_t v14 = 3;
      }
      else {
        uint64_t v14 = 1;
      }
      [(MTLLegacySVBufferErrorLog *)v8 setAddressSpace:v14];
      if (!v7 && (*(unsigned char *)(v6 + 22) & 0x80) != 0)
      {
        uint64_t v15 = *(void *)(*(void *)(v29 + 296) + ((v11 >> 37) & 0x7FFFFF8));
        v11 &= 0xFFFFFFFFFFuLL;
      }
      else
      {
        uint64_t v15 = 0;
      }
      [(MTLLegacySVBufferErrorLog *)v8 setBuffer:v15];
      [(MTLLegacySVBufferErrorLog *)v8 setOffset:v11];
      if ([(MTLLegacySVBufferErrorLog *)v8 buffer] && v41 && (*(void *)(v6 + 20) & 0x200000001) != 0)
      {
        uint64_t v16 = [(MTLLegacySVBufferErrorLog *)v8 buffer];
        -[MTLLegacySVBufferErrorLog setSpecifiedUsage:](v8, "setSpecifiedUsage:", [v32 resourceUsageForBuffer:v16 stage:v41]);
      }
      if (v13
        && (uint64_t v17 = v7 != 0,
            long long v36 = 0u,
            long long v37 = 0u,
            long long v34 = 0u,
            long long v35 = 0u,
            id v18 = v40,
            (uint64_t v19 = [v40 countByEnumeratingWithState:&v34 objects:v42 count:16]) != 0))
      {
        uint64_t v20 = *(void *)v35;
LABEL_21:
        uint64_t v21 = 0;
        while (1)
        {
          if (*(void *)v35 != v20) {
            objc_enumerationMutation(v18);
          }
          double v22 = *(void **)(*((void *)&v34 + 1) + 8 * v21);
          if ([v22 type] == v17 && objc_msgSend(v22, "index") == v10) {
            break;
          }
          if (v19 == ++v21)
          {
            uint64_t v19 = [v18 countByEnumeratingWithState:&v34 objects:v42 count:16];
            double v22 = 0;
            if (v19) {
              goto LABEL_21;
            }
            break;
          }
        }
      }
      else
      {
        double v22 = 0;
      }
      [(MTLLegacySVBufferErrorLog *)v8 setArgument:v22];
      [v31 addObject:v8];

      resolvedSharedPacketData<GPUDebugBadAccessPacket>::~resolvedSharedPacketData((uint64_t)v38);
    }
    ++v5;
  }
  while (v5 != 2);
  unsigned int v23 = *a2;
  if ((*a2 & 4) != 0)
  {
    unsigned int v24 = objc_alloc_init(MTLLegacySVTextureErrorLog);
    resolvedSharedPacketData<GPUDebugBadTexturePacket>::resolvedSharedPacketData(v38, (void *)a2 + 33, a3, v32, v24);
    [(MTLLegacySVTextureErrorLog *)v24 setErrorReason:*((unsigned __int8 *)a2 + 300)];
    [v31 addObject:v24];

    resolvedSharedPacketData<GPUDebugBadTexturePacket>::~resolvedSharedPacketData((uint64_t)v38);
    unsigned int v23 = *a2;
  }
  if ((v23 & 0x10) != 0)
  {
    unint64_t v25 = objc_alloc_init(MTLLegacySVStackOverflowErrorLog);
    resolvedSharedPacketData<GPUDebugStackPacket>::resolvedSharedPacketData(v38, (void *)a2 + 62, a3, v32, v25);
    -[MTLLegacySVStackOverflowErrorLog setFunctionName:](v25, "setFunctionName:", [v39 stringForID:a2[131]]);
    [v31 addObject:v25];

    resolvedSharedPacketData<GPUDebugStackPacket>::~resolvedSharedPacketData((uint64_t)v38);
    unsigned int v23 = *a2;
  }
  if ((v23 & 8) != 0)
  {
    unsigned int v26 = objc_alloc_init(MTLLegacySVTrapErrorLog);
    resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::resolvedSharedPacketData(v38, (void *)a2 + 48, a3, v32, v26);
    -[MTLLegacySVTrapErrorLog setFunctionName:](v26, "setFunctionName:", [v39 stringForID:a2[103]]);
    [v31 addObject:v26];

    resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::~resolvedSharedPacketData((uint64_t)v38);
    unsigned int v23 = *a2;
  }
  if ((v23 & 0x20) != 0)
  {
    unint64_t v27 = objc_alloc_init(MTLLegacySVAccelerationStructureErrorLog);
    resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::resolvedSharedPacketData(v38, (void *)a2 + 76, a3, v32, v27);
    -[MTLLegacySVAccelerationStructureErrorLog setFunctionName:](v27, "setFunctionName:", [v39 stringForID:a2[159]]);
    [(MTLLegacySVAccelerationStructureErrorLog *)v27 setExpectedAccelerationStructureType:*((void *)a2 + 80)];
    [(MTLLegacySVAccelerationStructureErrorLog *)v27 setActualAccelerationStructureType:*((void *)a2 + 81)];
    [v31 addObject:v27];

    resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::~resolvedSharedPacketData((uint64_t)v38);
  }
  return objc_msgSend((id)objc_msgSend(v32, "baseObject"), "setLogs:", v31);
}

void sub_23BE01F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  resolvedSharedPacketData<GPUDebugBadTexturePacket>::~resolvedSharedPacketData((uint64_t)va);
  _Unwind_Resume(a1);
}

void *resolvedSharedPacketData<GPUDebugBadAccessPacket>::resolvedSharedPacketData(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  double v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 1std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 6);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 28));
  unint64_t v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [v14 label];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = (id)*a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [v12 label];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = (id)*a2;
        if ([(id)*a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [v18 label];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = (void *)a1[1];
      uint64_t v21 = a1[3];
      if (v20)
      {
        if (v21) {
          uint64_t v22 = [NSString stringWithFormat:@"pipeline(function): \"%@(%@)\"", v21, objc_msgSend(v20, "name")];
        }
        else {
          uint64_t v22 = [NSString stringWithFormat:@"function: \"%@\"", objc_msgSend(v20, "name")];
        }
        uint64_t v21 = v22;
        a1[3] = v22;
      }
      if (!v21) {
        a1[3] = objc_msgSend([NSString alloc], "initWithFormat:", @"packet pipelineID: \"%llX\"", *a2);
      }
      uint64_t v23 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v23;
      if (v23)
      {
        unint64_t v24 = a1[10];
        unint64_t v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          uint64_t v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v24 - (void)*v61;
          uint64_t v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            uint64_t v23 = (uint64_t)*v10;
          }
          else
          {
            unint64_t v31 = 0;
          }
          unsigned int v32 = (uint64_t *)&v31[8 * v27];
          float v33 = &v31[8 * v30];
          uint64_t *v32 = v23;
          unsigned int v26 = v32 + 1;
          long long v35 = (id *)a1[8];
          long long v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              uint64_t v36 = (uint64_t)*--v34;
              *--unsigned int v32 = v36;
            }
            while (v34 != v35);
            long long v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          uint64_t *v25 = v23;
          unsigned int v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_61;
      }
      uint64_t v37 = 0;
      break;
    case 7:
      id v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [v16 label];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [v17 label];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v38 = *((_DWORD *)a2 + v37 + 11);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v40 = v39;
      unsigned int v42 = (uint64_t *)a1[9];
      unint64_t v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        uint64_t v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = v41 - (void)*v61;
        uint64_t v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
          uint64_t v46 = v44 + 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          __int16 v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        }
        else {
          __int16 v48 = 0;
        }
        unsigned int v49 = (uint64_t *)&v48[8 * v44];
        *unsigned int v49 = v40;
        unint64_t v43 = v49 + 1;
        double v51 = (id *)a1[8];
        __int16 v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            uint64_t v52 = (uint64_t)*--v50;
            *--unsigned int v49 = v52;
          }
          while (v50 != v51);
          __int16 v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *unsigned int v42 = v39;
        unint64_t v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  id v53 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  __int16 v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  unsigned int v55 = newRuntimeStackTrace(v61);
  uint64_t v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  unsigned int v57 = v54;
  if (v56 == 1)
  {
    uint64_t v58 = objc_msgSend(a4, "device", v54);
    unsigned int v57 = v55;
    if ((*(unsigned char *)(v58 + 285) & 2) == 0) {
      unsigned int v57 = v54;
    }
  }
  [a5 setErrorStackTrace:v57];
  if (v54) {
    uint64_t v59 = [v54 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v59 = 0;
  }
  [a5 setDebugLocation:v59];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BE02F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *resolvedSharedPacketData<GPUDebugBadTexturePacket>::resolvedSharedPacketData(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  double v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 1std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 4);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 20));
  unint64_t v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [v14 label];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = (id)*a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [v12 label];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = (id)*a2;
        if ([(id)*a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [v18 label];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = (void *)a1[1];
      uint64_t v21 = a1[3];
      if (v20)
      {
        if (v21) {
          uint64_t v22 = [NSString stringWithFormat:@"pipeline(function): \"%@(%@)\"", v21, objc_msgSend(v20, "name")];
        }
        else {
          uint64_t v22 = [NSString stringWithFormat:@"function: \"%@\"", objc_msgSend(v20, "name")];
        }
        uint64_t v21 = v22;
        a1[3] = v22;
      }
      if (!v21) {
        a1[3] = objc_msgSend([NSString alloc], "initWithFormat:", @"packet pipelineID: \"%llX\"", *a2);
      }
      uint64_t v23 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v23;
      if (v23)
      {
        unint64_t v24 = a1[10];
        unint64_t v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          uint64_t v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v24 - (void)*v61;
          uint64_t v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            uint64_t v23 = (uint64_t)*v10;
          }
          else
          {
            unint64_t v31 = 0;
          }
          unsigned int v32 = (uint64_t *)&v31[8 * v27];
          float v33 = &v31[8 * v30];
          uint64_t *v32 = v23;
          unsigned int v26 = v32 + 1;
          long long v35 = (id *)a1[8];
          long long v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              uint64_t v36 = (uint64_t)*--v34;
              *--unsigned int v32 = v36;
            }
            while (v34 != v35);
            long long v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          uint64_t *v25 = v23;
          unsigned int v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_61;
      }
      uint64_t v37 = 0;
      break;
    case 7:
      id v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [v16 label];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [v17 label];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v38 = *((_DWORD *)a2 + v37 + 10);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v40 = v39;
      unsigned int v42 = (uint64_t *)a1[9];
      unint64_t v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        uint64_t v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = v41 - (void)*v61;
        uint64_t v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
          uint64_t v46 = v44 + 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          __int16 v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        }
        else {
          __int16 v48 = 0;
        }
        unsigned int v49 = (uint64_t *)&v48[8 * v44];
        *unsigned int v49 = v40;
        unint64_t v43 = v49 + 1;
        double v51 = (id *)a1[8];
        __int16 v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            uint64_t v52 = (uint64_t)*--v50;
            *--unsigned int v49 = v52;
          }
          while (v50 != v51);
          __int16 v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *unsigned int v42 = v39;
        unint64_t v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  id v53 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  __int16 v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  unsigned int v55 = newRuntimeStackTrace(v61);
  uint64_t v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  unsigned int v57 = v54;
  if (v56 == 1)
  {
    uint64_t v58 = objc_msgSend(a4, "device", v54);
    unsigned int v57 = v55;
    if ((*(unsigned char *)(v58 + 285) & 2) == 0) {
      unsigned int v57 = v54;
    }
  }
  [a5 setErrorStackTrace:v57];
  if (v54) {
    uint64_t v59 = [v54 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v59 = 0;
  }
  [a5 setDebugLocation:v59];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BE03584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *resolvedSharedPacketData<GPUDebugStackPacket>::resolvedSharedPacketData(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  double v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 1std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 4);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 20));
  unint64_t v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [v14 label];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = (id)*a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [v12 label];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = (id)*a2;
        if ([(id)*a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [v18 label];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = (void *)a1[1];
      uint64_t v21 = a1[3];
      if (v20)
      {
        if (v21) {
          uint64_t v22 = [NSString stringWithFormat:@"pipeline(function): \"%@(%@)\"", v21, objc_msgSend(v20, "name")];
        }
        else {
          uint64_t v22 = [NSString stringWithFormat:@"function: \"%@\"", objc_msgSend(v20, "name")];
        }
        uint64_t v21 = v22;
        a1[3] = v22;
      }
      if (!v21) {
        a1[3] = objc_msgSend([NSString alloc], "initWithFormat:", @"packet pipelineID: \"%llX\"", *a2);
      }
      uint64_t v23 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v23;
      if (v23)
      {
        unint64_t v24 = a1[10];
        unint64_t v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          uint64_t v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v24 - (void)*v61;
          uint64_t v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            uint64_t v23 = (uint64_t)*v10;
          }
          else
          {
            unint64_t v31 = 0;
          }
          unsigned int v32 = (uint64_t *)&v31[8 * v27];
          float v33 = &v31[8 * v30];
          uint64_t *v32 = v23;
          unsigned int v26 = v32 + 1;
          long long v35 = (id *)a1[8];
          long long v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              uint64_t v36 = (uint64_t)*--v34;
              *--unsigned int v32 = v36;
            }
            while (v34 != v35);
            long long v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          uint64_t *v25 = v23;
          unsigned int v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_61;
      }
      uint64_t v37 = 0;
      break;
    case 7:
      id v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [v16 label];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [v17 label];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v38 = *((_DWORD *)a2 + v37 + 8);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v40 = v39;
      unsigned int v42 = (uint64_t *)a1[9];
      unint64_t v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        uint64_t v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = v41 - (void)*v61;
        uint64_t v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
          uint64_t v46 = v44 + 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          __int16 v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        }
        else {
          __int16 v48 = 0;
        }
        unsigned int v49 = (uint64_t *)&v48[8 * v44];
        *unsigned int v49 = v40;
        unint64_t v43 = v49 + 1;
        double v51 = (id *)a1[8];
        __int16 v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            uint64_t v52 = (uint64_t)*--v50;
            *--unsigned int v49 = v52;
          }
          while (v50 != v51);
          __int16 v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *unsigned int v42 = v39;
        unint64_t v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  id v53 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  __int16 v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  unsigned int v55 = newRuntimeStackTrace(v61);
  uint64_t v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  unsigned int v57 = v54;
  if (v56 == 1)
  {
    uint64_t v58 = objc_msgSend(a4, "device", v54);
    unsigned int v57 = v55;
    if ((*(unsigned char *)(v58 + 285) & 2) == 0) {
      unsigned int v57 = v54;
    }
  }
  [a5 setErrorStackTrace:v57];
  if (v54) {
    uint64_t v59 = [v54 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v59 = 0;
  }
  [a5 setDebugLocation:v59];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BE03B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::resolvedSharedPacketData(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  double v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 1std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 4);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 20));
  unint64_t v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [v14 label];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = (id)*a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [v12 label];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = (id)*a2;
        if ([(id)*a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [v18 label];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = (void *)a1[1];
      uint64_t v21 = a1[3];
      if (v20)
      {
        if (v21) {
          uint64_t v22 = [NSString stringWithFormat:@"pipeline(function): \"%@(%@)\"", v21, objc_msgSend(v20, "name")];
        }
        else {
          uint64_t v22 = [NSString stringWithFormat:@"function: \"%@\"", objc_msgSend(v20, "name")];
        }
        uint64_t v21 = v22;
        a1[3] = v22;
      }
      if (!v21) {
        a1[3] = objc_msgSend([NSString alloc], "initWithFormat:", @"packet pipelineID: \"%llX\"", *a2);
      }
      uint64_t v23 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v23;
      if (v23)
      {
        unint64_t v24 = a1[10];
        unint64_t v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          uint64_t v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v24 - (void)*v61;
          uint64_t v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            uint64_t v23 = (uint64_t)*v10;
          }
          else
          {
            unint64_t v31 = 0;
          }
          unsigned int v32 = (uint64_t *)&v31[8 * v27];
          float v33 = &v31[8 * v30];
          uint64_t *v32 = v23;
          unsigned int v26 = v32 + 1;
          long long v35 = (id *)a1[8];
          long long v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              uint64_t v36 = (uint64_t)*--v34;
              *--unsigned int v32 = v36;
            }
            while (v34 != v35);
            long long v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          uint64_t *v25 = v23;
          unsigned int v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_61;
      }
      uint64_t v37 = 0;
      break;
    case 7:
      id v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [v16 label];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [v17 label];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v38 = *((_DWORD *)a2 + v37 + 8);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v40 = v39;
      unsigned int v42 = (uint64_t *)a1[9];
      unint64_t v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        uint64_t v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = v41 - (void)*v61;
        uint64_t v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
          uint64_t v46 = v44 + 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          __int16 v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        }
        else {
          __int16 v48 = 0;
        }
        unsigned int v49 = (uint64_t *)&v48[8 * v44];
        *unsigned int v49 = v40;
        unint64_t v43 = v49 + 1;
        double v51 = (id *)a1[8];
        __int16 v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            uint64_t v52 = (uint64_t)*--v50;
            *--unsigned int v49 = v52;
          }
          while (v50 != v51);
          __int16 v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *unsigned int v42 = v39;
        unint64_t v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  id v53 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  __int16 v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  unsigned int v55 = newRuntimeStackTrace(v61);
  uint64_t v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  unsigned int v57 = v54;
  if (v56 == 1)
  {
    uint64_t v58 = objc_msgSend(a4, "device", v54);
    unsigned int v57 = v55;
    if ((*(unsigned char *)(v58 + 285) & 2) == 0) {
      unsigned int v57 = v54;
    }
  }
  [a5 setErrorStackTrace:v57];
  if (v54) {
    uint64_t v59 = [v54 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v59 = 0;
  }
  [a5 setDebugLocation:v59];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BE0415C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::resolvedSharedPacketData(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v10 = (void **)(a1 + 7);
  double v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 1std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 4);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 20));
  unint64_t v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = [v11 debugInstrumentationData];
  switch(a3)
  {
    case 1:
      id v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      uint64_t v13 = [v14 label];
      goto LABEL_5;
    case 2:
    case 3:
      id v12 = (id)*a2;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        uint64_t v13 = [v12 label];
LABEL_5:
        uint64_t v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_14;
        }
        id v18 = (id)*a2;
        if ([(id)*a2 tileFunctionData])
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          uint64_t v19 = (void *)[v18 tileFunctionData];
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          uint64_t v19 = (void *)[v18 fragmentFunctionData];
        }
        a1[1] = [v19 function];
        uint64_t v13 = [v18 label];
        uint64_t v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      uint64_t v20 = (void *)a1[1];
      uint64_t v21 = a1[3];
      if (v20)
      {
        if (v21) {
          uint64_t v22 = [NSString stringWithFormat:@"pipeline(function): \"%@(%@)\"", v21, objc_msgSend(v20, "name")];
        }
        else {
          uint64_t v22 = [NSString stringWithFormat:@"function: \"%@\"", objc_msgSend(v20, "name")];
        }
        uint64_t v21 = v22;
        a1[3] = v22;
      }
      if (!v21) {
        a1[3] = objc_msgSend([NSString alloc], "initWithFormat:", @"packet pipelineID: \"%llX\"", *a2);
      }
      uint64_t v23 = [(id)a1[2] debugLocationForID:*((unsigned int *)a1 + 11)];
      *uint64_t v10 = (void *)v23;
      if (v23)
      {
        unint64_t v24 = a1[10];
        unint64_t v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          uint64_t v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61) {
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v24 - (void)*v61;
          uint64_t v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            uint64_t v23 = (uint64_t)*v10;
          }
          else
          {
            unint64_t v31 = 0;
          }
          unsigned int v32 = (uint64_t *)&v31[8 * v27];
          float v33 = &v31[8 * v30];
          uint64_t *v32 = v23;
          unsigned int v26 = v32 + 1;
          long long v35 = (id *)a1[8];
          long long v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              uint64_t v36 = (uint64_t)*--v34;
              *--unsigned int v32 = v36;
            }
            while (v34 != v35);
            long long v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          uint64_t *v25 = v23;
          unsigned int v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if ([(id)*a1 imageType] == 1) {
        goto LABEL_61;
      }
      uint64_t v37 = 0;
      break;
    case 7:
      id v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      uint64_t v13 = [v16 label];
      uint64_t v15 = 16;
      goto LABEL_13;
    case 8:
      id v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      uint64_t v13 = [v17 label];
      uint64_t v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    int v38 = *((_DWORD *)a2 + v37 + 12);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      uint64_t v40 = v39;
      unsigned int v42 = (uint64_t *)a1[9];
      unint64_t v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        uint64_t v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = v41 - (void)*v61;
        uint64_t v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
          uint64_t v46 = v44 + 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          __int16 v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        }
        else {
          __int16 v48 = 0;
        }
        unsigned int v49 = (uint64_t *)&v48[8 * v44];
        *unsigned int v49 = v40;
        unint64_t v43 = v49 + 1;
        double v51 = (id *)a1[8];
        __int16 v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            uint64_t v52 = (uint64_t)*--v50;
            *--unsigned int v49 = v52;
          }
          while (v50 != v51);
          __int16 v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *unsigned int v42 = v39;
        unint64_t v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  id v53 = (id)a1[3];
  [a5 setImage:*a1];
  [a5 setCallIndex:*((unsigned int *)a1 + 12)];
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  __int16 v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  unsigned int v55 = newRuntimeStackTrace(v61);
  uint64_t v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  unsigned int v57 = v54;
  if (v56 == 1)
  {
    uint64_t v58 = objc_msgSend(a4, "device", v54);
    unsigned int v57 = v55;
    if ((*(unsigned char *)(v58 + 285) & 2) == 0) {
      unsigned int v57 = v54;
    }
  }
  [a5 setErrorStackTrace:v57];
  if (v54) {
    uint64_t v59 = [v54 objectAtIndexedSubscript:0];
  }
  else {
    uint64_t v59 = 0;
  }
  [a5 setDebugLocation:v59];

  [a5 setFunction:a1[1]];
  [a5 setType:0];
  [a5 setPipelineIdentifier:a1[3]];
  return a1;
}

void sub_23BE04748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  id v14 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_23BE06744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PrepareExecuteIndirect(MTLLegacySVComputeCommandEncoder *a1, void *a2, uint64_t a3)
{
  id v6 = [(MTLToolsObject *)a1 baseObject];
  uint64_t v7 = [(MTLToolsObject *)a1 device];
  int v8 = [a2 inheritsBuffers];
  int v9 = [a2 inheritsPipelineState];
  uint64_t v10 = *(void *)(v7 + 424);
  [v6 useResource:v10 usage:1];
  [v6 setBuffer:v10 offset:0 atIndex:2];
  objc_msgSend(v6, "useResource:usage:", objc_msgSend(a2, "baseObject"), 2);
  objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(a2, "internalICBBuffer"), 0, 0);
  currentPipeline = a1->_currentPipeline;
  if (currentPipeline) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v13 = [(MTLDebugInstrumentationData *)[(MTLToolsComputePipelineState *)currentPipeline debugInstrumentationData] bufferAccessMask];
    objc_msgSend(v6, "useResource:usage:", -[MTLToolsObject baseObject](-[MTLLegacySVComputePipelineState indirectStateBuffer](a1->_currentPipeline, "indirectStateBuffer"), "baseObject"), 1);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLToolsObject baseObject](-[MTLLegacySVComputePipelineState indirectStateBuffer](a1->_currentPipeline, "indirectStateBuffer"), "baseObject"), 0, 3);
    if (v9) {
      goto LABEL_9;
    }
LABEL_7:
    LegacySVGlobalResidentBufferList::useBuffers((LegacySVGlobalResidentBufferList *)(v7 + 552), a1);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(a2, "internalDispatchIDBuffer"), 0, 5);
    goto LABEL_10;
  }
  uint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
  if ((v9 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_9:
  id v14 = objc_msgSend((id)objc_msgSend((id)v7, "baseObject"), "newBufferWithBytes:length:options:", &a1->_dispatchID, 24, 0);
  [v6 setBuffer:v14 offset:0 atIndex:5];
  [v6 useResource:v14 usage:1];

LABEL_10:
  uint64_t result = objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLBuffer baseObject](a1->_reportBuffer.buffer, "baseObject"), a1->_reportBuffer.offset, 4);
  int v16 = *(_DWORD *)(a3 + 16);
  if (v16 == -1) {
    uint64_t v17 = -1;
  }
  else {
    uint64_t v17 = *(unsigned int *)(a3 + 16);
  }
  if (v17 == 1)
  {
    if (v16 != 1) {
      goto LABEL_45;
    }
    [v6 setBytes:a3 length:8 atIndex:1];
  }
  else
  {
    if (v17) {
      return result;
    }
    if (v16) {
      goto LABEL_45;
    }
    id v18 = *(id *)a3;
    objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(*(id *)a3, "baseObject"), *(void *)(a3 + 8), 1);
    [(MTLToolsCommandEncoder *)a1 addRetainedObject:v18];
  }
  if ((*(void *)&a1->_options->var0 & 0x200000001) != 0)
  {
    [v6 setBuffer:a1->_bufferUsageTable offset:0 atIndex:6];
    p_textureUsageTable = &a1->_textureUsageTable;
  }
  else
  {
    [v6 setBuffer:*(void *)(v7 + 424) offset:0 atIndex:6];
    p_textureUsageTable = (MTLBuffer **)(v7 + 424);
  }
  [v6 setBuffer:*p_textureUsageTable offset:0 atIndex:7];
  if (v8)
  {
    a1->_handles.needsFlush = 1;
    uint64_t v34 = v13;
    MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::KernelEncoderClass>>((uint64_t)&a1->_handles, (unint64_t *)&v34, (id *)&a1->super.super.super.super.isa, 9, 10);
    if ((v9 & 1) == 0)
    {
      uint64_t v20 = objc_msgSend((id)v7, "ICB_Inherit_Buffers_ComputePipelineState");
LABEL_31:
      uint64_t v21 = (void *)v20;
      goto LABEL_32;
    }
  }
  else if (v9)
  {
    uint64_t v20 = objc_msgSend((id)v7, "ICB_Inherit_PSO_ComputePipelineState");
    goto LABEL_31;
  }
  if (((v8 | v9) & 1) == 0)
  {
    uint64_t v20 = objc_msgSend((id)v7, "ICB_Inherit_None_ComputePipelineState");
    goto LABEL_31;
  }
  if ((v8 & v9) != 0)
  {
    uint64_t v20 = objc_msgSend((id)v7, "ICB_Inherit_Both_ComputePipelineState");
    goto LABEL_31;
  }
  uint64_t v21 = 0;
LABEL_32:
  [v6 setComputePipelineState:v21];
  [v6 memoryBarrierWithScope:1];
  int v22 = *(_DWORD *)(a3 + 16);
  if (v22 == -1) {
    uint64_t v23 = -1;
  }
  else {
    uint64_t v23 = *(unsigned int *)(a3 + 16);
  }
  if (v23 == 1)
  {
    if (v22 == 1)
    {
      uint64_t v28 = *(unsigned int *)(a3 + 4);
      int64x2_t v29 = vdupq_n_s64(1uLL);
      uint64_t v26 = [v21 threadExecutionWidth];
      int64x2_t v27 = v29;
      unint64_t v24 = (long long *)&v28;
      unint64_t v25 = &v26;
      goto LABEL_40;
    }
LABEL_45:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (v23) {
    goto LABEL_41;
  }
  long long v32 = xmmword_23BE4ADA0;
  uint64_t v33 = 1;
  uint64_t v30 = [v21 threadExecutionWidth];
  int64x2_t v31 = vdupq_n_s64(1uLL);
  unint64_t v24 = &v32;
  unint64_t v25 = &v30;
LABEL_40:
  [v6 dispatchThreads:v24 threadsPerThreadgroup:v25];
LABEL_41:
  uint64_t result = [v6 memoryBarrierWithScope:1];
  if (v9) {
    return objc_msgSend(v6, "setComputePipelineState:", -[MTLToolsObject baseObject](a1->_currentPipeline, "baseObject"));
  }
  return result;
}

uint64_t RestoreInternalState(MTLLegacySVComputeCommandEncoder *a1)
{
  [(MTLLegacySVComputeCommandEncoder *)a1 setKernelReportBuffer:a1->_reportBuffer.buffer offset:a1->_reportBuffer.offset];
  uint64_t result = [(MTLLegacySVComputeCommandEncoder *)a1 setBufferUsageTable:a1->_bufferUsageTable textureUsageTable:a1->_textureUsageTable];
  if (a1->_currentPipeline)
  {
    a1->_currentPipeline = 0;
    uint64_t result = -[MTLLegacySVComputeCommandEncoder setComputePipelineState:](a1, "setComputePipelineState:");
    a1->_handles.needsFlush = 1;
    a1->_threadgroup.needsFlush = 1;
  }
  return result;
}

void sub_23BE08124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
}

void sub_23BE08594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<LegacySVArgumentEncoderLayout>::reset[abi:ne180100]((LegacySVArgumentEncoderLayout **)va, 0);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void LegacySVArgumentEncoderLayout::LegacySVArgumentEncoderLayout(LegacySVArgumentEncoderLayout *this, MTLStructType *a2, MTLLegacySVDevice *a3)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 1std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](&a9, 0) = 1065353216;
  id v5 = [(MTLToolsObject *)a3 baseObject];
  id v6 = (void *)MEMORY[0x23ECD5710]();
  id v7 = +[MTLLegacySVFunction internalStructTypeFromUserStructType:a2];
  int v8 = (void *)[v5 newIndirectArgumentBufferLayoutWithStructType:v7];
  *(void *)this = v8;
  [v8 setStructType:v7 withDevice:v5];
  MTLEnumerateIndirectResources();
}

void sub_23BE0882C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void ___ZN29LegacySVArgumentEncoderLayoutC2EP13MTLStructTypeP17MTLLegacySVDevice_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a3;
  operator new();
}

void sub_23BE088E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, LegacySVArgumentEncoderLayout *a9)
{
}

void LegacySVArgumentEncoderLayout::~LegacySVArgumentEncoderLayout(id *this)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t *LegacySVArgumentEncoderLayout::sublayout(LegacySVArgumentEncoderLayout *this, unsigned int a2)
{
  unsigned int v3 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::find<unsigned int>((void *)this + 1, &v3);
  if (result) {
    return (uint64_t *)result[3];
  }
  return result;
}

LegacySVArgumentEncoderLayout *std::unique_ptr<LegacySVArgumentEncoderLayout>::reset[abi:ne180100](LegacySVArgumentEncoderLayout **a1, LegacySVArgumentEncoderLayout *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    LegacySVArgumentEncoderLayout::~LegacySVArgumentEncoderLayout(result);
    JUMPOUT(0x23ECD5400);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::__emplace_unique_key_args<unsigned int,unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      BOOL v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          BOOL v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  id v14 = (void *)(a1 + 16);
  BOOL v12 = operator new(0x20uLL);
  *BOOL v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  uint64_t v15 = *a4;
  *a4 = 0;
  v12[3] = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *BOOL v12 = *v23;
LABEL_38:
    *uint64_t v23 = v12;
    goto LABEL_39;
  }
  *BOOL v12 = *v14;
  *id v14 = v12;
  *(void *)(v22 + 8 * v4) = v14;
  if (*v12)
  {
    unint64_t v24 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_23BE08C24(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,void *>>>::operator()[abi:ne180100](uint64_t a1, LegacySVArgumentEncoderLayout **__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::unique_ptr<LegacySVArgumentEncoderLayout>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::__deallocate_node(a1, *(LegacySVArgumentEncoderLayout ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::__deallocate_node(uint64_t a1, LegacySVArgumentEncoderLayout **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unsigned int v3 = *v2;
      std::unique_ptr<LegacySVArgumentEncoderLayout>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = (LegacySVArgumentEncoderLayout **)v3;
    }
    while (v3);
  }
}

uint64_t _validateReplaceRegion(MTLDebugTexture *a1, MTLOrigin *a2, MTLSize *a3, unint64_t a4, unint64_t a5, const void *a6, unint64_t a7, char a8, unint64_t a9, unint64_t a10)
{
  uint64_t v15 = a1;
  [(MTLToolsObject *)a1 device];
  _MTLMessageContextBegin_();
  if (a3->height * a3->width * a3->depth)
  {
    if (a6) {
      goto LABEL_3;
    }
  }
  else
  {
    NSUInteger depth = a3->depth;
    uint64_t v36 = 0;
    NSUInteger width = a3->width;
    NSUInteger height = a3->height;
    _MTLMessageContextPush_();
    if (a6) {
      goto LABEL_3;
    }
  }
  _MTLMessageContextPush_();
LABEL_3:
  if ([(MTLToolsResource *)v15 storageMode] == 2) {
    _MTLMessageContextPush_();
  }
  if ([(MTLToolsResource *)v15 storageMode] == 3) {
    _MTLMessageContextPush_();
  }
  if ([(MTLToolsTexture *)v15 isFramebufferOnly]) {
    _MTLMessageContextPush_();
  }
  if ([(MTLToolsTexture *)v15 mipmapLevelCount] <= a5)
  {
    unint64_t v29 = a5;
    uint64_t v32 = [(MTLToolsTexture *)v15 mipmapLevelCount];
    _MTLMessageContextPush_();
  }
  uint64_t v16 = [(MTLToolsTexture *)v15 numFaces];
  if ([(MTLToolsTexture *)v15 arrayLength] * v16 <= a4)
  {
    uint64_t v27 = [(MTLToolsTexture *)v15 numFaces];
    uint64_t v30 = a4;
    uint64_t v33 = [(MTLToolsTexture *)v15 arrayLength] * v27;
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  [(MTLToolsObject *)v15 device];
  [(MTLToolsTexture *)v15 pixelFormat];
  [(MTLToolsTexture *)v15 width];
  [(MTLToolsTexture *)v15 height];
  [(MTLToolsTexture *)v15 depth];
  [(MTLToolsTexture *)v15 sampleCount];
  MTLGetTextureLevelInfoForDeviceWithOptions();
  [(MTLToolsObject *)v15 device];
  [(MTLToolsTexture *)v15 pixelFormat];
  MTLPixelFormatGetInfoForDevice();
  _MTLAdjustMTLSize();
  [(MTLToolsObject *)v15 device];
  _MTLMessageContextBegin_();
  if (a3->width + a2->x)
  {
    uint64_t v30 = a3->width + a2->x;
    uint64_t v33 = 0;
    _MTLMessageContextPush_();
  }
  if (a3->height + a2->y)
  {
    uint64_t v30 = a3->height + a2->y;
    uint64_t v33 = 0;
    _MTLMessageContextPush_();
  }
  if (a3->depth + a2->z)
  {
    uint64_t v30 = a3->depth + a2->z;
    uint64_t v33 = 0;
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  [(MTLToolsObject *)v15 device];
  _MTLMessageContextBegin_();
  [(MTLToolsObject *)v15 device];
  [(MTLToolsTexture *)v15 pixelFormat];
  [(MTLToolsTexture *)v15 sampleCount];
  MTLGetTextureLevelInfoForDeviceWithOptions();
  if (!a7 && 0 == __PAIR128__(1, 1)) {
    a7 = 0;
  }
  if ((a8 & 1) == 0)
  {
    [(MTLToolsTexture *)v15 textureType];
    uint64_t v30 = MTLTextureTypeString();
    _MTLMessageContextPush_();
  }
  if (a7 % 0)
  {
    long long v35 = "pixel";
    uint64_t v37 = 0;
    uint64_t v30 = a7;
    uint64_t v33 = 0;
    _MTLMessageContextPush_();
  }
  if (a9 % 0)
  {
    long long v35 = "pixel";
    uint64_t v37 = 0;
    uint64_t v30 = a9;
    uint64_t v33 = 0;
    _MTLMessageContextPush_();
  }
  if (([(MTLToolsTexture *)v15 usage] & 4) != 0)
  {
    uint64_t v17 = [(MTLToolsTexture *)v15 parentTexture];
    unint64_t v18 = a4;
    if (v17)
    {
      unint64_t v19 = a5;
      do
      {
        uint64_t v20 = v17;
        v19 += [(MTLToolsTexture *)v15 parentRelativeLevel];
        v18 += [(MTLToolsTexture *)v15 parentRelativeSlice];
        uint64_t v17 = [(id)v20 parentTexture];
        uint64_t v15 = (MTLDebugTexture *)v20;
      }
      while (v17);
    }
    else
    {
      unint64_t v19 = a5;
      uint64_t v20 = (uint64_t)v15;
    }
    size_t v21 = (std::mutex *)(v20 + 152);
    std::mutex::lock((std::mutex *)(v20 + 152));
    for (unint64_t i = *(void **)(v20 + 232); i; unint64_t i = (void *)*i)
    {
      if (v19 == i[2])
      {
        unint64_t v23 = i[3];
        BOOL v25 = v18 >= v23;
        unint64_t v24 = v18 - v23;
        BOOL v25 = !v25 || v24 >= i[4];
        if (!v25) {
          _MTLMessageContextPush_();
        }
      }
    }
    std::mutex::unlock(v21);
  }
  return _MTLMessageContextEnd();
}

void sub_23BE0A250(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t _validateGetBytes(MTLDebugTexture *a1, MTLOrigin *a2, MTLSize *a3, unint64_t a4, unint64_t a5, void *a6, unint64_t a7, char a8, unint64_t a9, unint64_t a10)
{
  [(MTLToolsObject *)a1 device];
  _MTLMessageContextBegin_();
  if (a3->height * a3->width * a3->depth)
  {
    if (a6) {
      goto LABEL_3;
    }
  }
  else
  {
    NSUInteger depth = a3->depth;
    uint64_t v24 = 0;
    NSUInteger width = a3->width;
    NSUInteger height = a3->height;
    _MTLMessageContextPush_();
    if (a6) {
      goto LABEL_3;
    }
  }
  _MTLMessageContextPush_();
LABEL_3:
  if ([(MTLToolsResource *)a1 storageMode] == 2) {
    _MTLMessageContextPush_();
  }
  if ([(MTLToolsResource *)a1 storageMode] == 3) {
    _MTLMessageContextPush_();
  }
  if ([(MTLToolsTexture *)a1 isFramebufferOnly]) {
    _MTLMessageContextPush_();
  }
  if ([(MTLToolsTexture *)a1 mipmapLevelCount] <= a5)
  {
    unint64_t v20 = a5;
    unint64_t v22 = [(MTLToolsTexture *)a1 mipmapLevelCount];
    _MTLMessageContextPush_();
  }
  unint64_t v17 = [(MTLToolsTexture *)a1 numFaces];
  if ([(MTLToolsTexture *)a1 arrayLength] * v17 <= a4)
  {
    [(MTLToolsTexture *)a1 numFaces];
    [(MTLToolsTexture *)a1 arrayLength];
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  [(MTLToolsObject *)a1 device];
  [(MTLToolsTexture *)a1 pixelFormat];
  [(MTLToolsTexture *)a1 width];
  [(MTLToolsTexture *)a1 height];
  [(MTLToolsTexture *)a1 depth];
  [(MTLToolsTexture *)a1 sampleCount];
  MTLGetTextureLevelInfoForDeviceWithOptions();
  [(MTLToolsObject *)a1 device];
  [(MTLToolsTexture *)a1 pixelFormat];
  MTLPixelFormatGetInfoForDevice();
  _MTLAdjustMTLSize();
  [(MTLToolsObject *)a1 device];
  _MTLMessageContextBegin_();
  if (a3->width + a2->x) {
    _MTLMessageContextPush_();
  }
  if (a3->height + a2->y) {
    _MTLMessageContextPush_();
  }
  if (a3->depth + a2->z) {
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  [(MTLToolsObject *)a1 device];
  _MTLMessageContextBegin_();
  [(MTLToolsObject *)a1 device];
  [(MTLToolsTexture *)a1 pixelFormat];
  [(MTLToolsTexture *)a1 sampleCount];
  MTLGetTextureLevelInfoForDeviceWithOptions();
  if (!a7 && 0 == __PAIR128__(1, 1)) {
    a7 = 0;
  }
  if ((a8 & 1) == 0)
  {
    [(MTLToolsTexture *)a1 textureType];
    MTLTextureTypeString();
    _MTLMessageContextPush_();
  }
  if (a7 % 0) {
    _MTLMessageContextPush_();
  }
  if (a9 % 0) {
    _MTLMessageContextPush_();
  }
  return _MTLMessageContextEnd();
}

uint64_t _validateTextureView(MTLDebugTexture *a1, MTLPixelFormat a2, MTLTextureType a3)
{
  [(MTLToolsObject *)a1 device];
  _MTLMessageContextBegin_();
  if ([(MTLToolsResource *)a1 storageMode] == 3) {
    _MTLMessageContextPush_();
  }
  [(MTLToolsObject *)a1 device];
  MTLPixelFormatGetInfoForDevice();
  uint64_t v6 = [(MTLToolsTexture *)a1 pixelFormat];
  id v7 = [(MTLToolsObject *)a1 device];
  if (v6 != a2)
  {
    if (![(MTLDevice *)v7 supportsRelaxedTextureViewRequirements])goto LABEL_140; {
    if (v6 == a2)
    }
      MTLPixelFormat v8 = v6;
    else {
      MTLPixelFormat v8 = a2;
    }
    if (v6 <= 300)
    {
      if (v6 > 132)
      {
        switch(v6)
        {
          case 153:
            if (v8 != MTLPixelFormatBC7_RGBAUnorm) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 162:
          case 164:
          case 166:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 180:
          case 182:
          case 183:
          case 184:
            goto LABEL_140;
          case 161:
            if (v8 != MTLPixelFormatPVRTC_RGB_2BPP) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 163:
            if (v8 != MTLPixelFormatPVRTC_RGB_4BPP) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 165:
            if (v8 != MTLPixelFormatPVRTC_RGBA_2BPP) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 167:
            if (v8 != MTLPixelFormatPVRTC_RGBA_4BPP) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 179:
            if (v8 != MTLPixelFormatEAC_RGBA8) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 181:
            if (v8 != MTLPixelFormatETC2_RGB8) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 185:
            if (v8 != (MTLPixelFormatASTC_12x12_sRGB|MTLPixelFormatA8Unorm|0x2)) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 186:
            if (v8 != MTLPixelFormatASTC_4x4_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 187:
            if (v8 != MTLPixelFormatASTC_5x4_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 188:
            if (v8 != MTLPixelFormatASTC_5x5_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 189:
            if (v8 != MTLPixelFormatASTC_6x5_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 190:
            if (v8 != MTLPixelFormatASTC_6x6_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 191:
            if (v8 != (MTLPixelFormatASTC_6x6_LDR|MTLPixelFormatA8Unorm)) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 192:
            if (v8 != MTLPixelFormatASTC_8x5_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 193:
            if (v8 != MTLPixelFormatASTC_8x6_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 194:
            if (v8 != MTLPixelFormatASTC_8x8_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 195:
            if (v8 != MTLPixelFormatASTC_10x5_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 196:
            if (v8 != MTLPixelFormatASTC_10x6_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 197:
            if (v8 != MTLPixelFormatASTC_10x8_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 198:
            if (v8 != MTLPixelFormatASTC_10x10_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 199:
            if (v8 != MTLPixelFormatASTC_12x10_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          case 200:
            if (v8 != MTLPixelFormatASTC_12x12_LDR) {
              goto LABEL_140;
            }
            goto LABEL_142;
          default:
            if (v6 == 133)
            {
              if (v8 != MTLPixelFormatBC2_RGBA) {
                goto LABEL_140;
              }
            }
            else if (v6 != 135 || v8 != MTLPixelFormatBC3_RGBA)
            {
              goto LABEL_140;
            }
            break;
        }
        goto LABEL_142;
      }
      if (v6 > 80)
      {
        if (v6 == 81)
        {
          if (v8 == MTLPixelFormatBGRA8Unorm) {
            goto LABEL_142;
          }
        }
        else if (v6 == 85)
        {
          if (v8 == (MTLPixelFormatBGRA8Unorm|0x4)) {
            goto LABEL_142;
          }
        }
        else if (v6 == 131 && v8 == MTLPixelFormatBC1_RGBA)
        {
          goto LABEL_142;
        }
      }
      else if (v6 == 11)
      {
        if (v8 == MTLPixelFormatR8Unorm) {
          goto LABEL_142;
        }
      }
      else if (v6 == 31)
      {
        if (v8 == MTLPixelFormatRG8Unorm) {
          goto LABEL_142;
        }
      }
      else if (v6 == 71 && v8 == MTLPixelFormatRGBA8Unorm)
      {
        goto LABEL_142;
      }
LABEL_140:
      if (![(MTLDebugTexture *)a1 requireUsage:16])
      {
        unint64_t v10 = [(MTLToolsTexture *)a1 usage];
        uint64_t v11 = 16;
        _MTLMessageContextPush_();
      }
      goto LABEL_142;
    }
    if (v6 > 550)
    {
      if (v6 <= 585)
      {
        if (v6 <= 554)
        {
          if (v6 == 551)
          {
            if (v8 == 550) {
              goto LABEL_142;
            }
          }
          else if (v6 == 553 && v8 == MTLPixelFormatBGRA10_XR)
          {
            goto LABEL_142;
          }
        }
        else if (v6 == 555)
        {
          if (v8 == MTLPixelFormatBGR10_XR) {
            goto LABEL_142;
          }
        }
        else if (v6 == 577)
        {
          if (v8 == 576) {
            goto LABEL_142;
          }
        }
        else if (v6 == 579 && v8 == 578)
        {
          goto LABEL_142;
        }
        goto LABEL_140;
      }
      switch(v6)
      {
        case 625:
          if (v8 != (MTLPixelFormatRGBA16Snorm|0x200)) {
            goto LABEL_140;
          }
          break;
        case 626:
        case 627:
        case 629:
        case 630:
        case 631:
        case 633:
          goto LABEL_140;
        case 628:
          if (v8 != MTLPixelFormatBGR10A2Unorm) {
            goto LABEL_140;
          }
          break;
        case 632:
          if (v8 != (MTLPixelFormatRGBA16Float|0x204)) {
            goto LABEL_140;
          }
          break;
        case 634:
          if (v8 != (MTLPixelFormatBGRA10_XR_sRGB|MTLPixelFormatBGRA8Unorm)) {
            goto LABEL_140;
          }
          break;
        default:
          if (v6 == 586)
          {
            if (v8 == MTLPixelFormatRGB10A2Unorm) {
              break;
            }
            goto LABEL_140;
          }
          if (v6 != 639 || v8 != (MTLPixelFormatRGBA32Sint|0x202)) {
            goto LABEL_140;
          }
          break;
      }
    }
    else
    {
      switch(v6)
      {
        case 520:
          if (v8 != (MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatGBGR422)) {
            goto LABEL_140;
          }
          break;
        case 521:
          if (v8 != (MTLPixelFormatX32_Stencil8|MTLPixelFormatGBGR422)) {
            goto LABEL_140;
          }
          break;
        case 522:
          if (v8 != (MTLPixelFormatX24_Stencil8|MTLPixelFormatGBGR422)) {
            goto LABEL_140;
          }
          break;
        case 523:
          if (v8 != (MTLPixelFormatX24_Stencil8|MTLPixelFormatBGRG422)) {
            goto LABEL_140;
          }
          break;
        case 524:
          if (v8 != (MTLPixelFormatGBGR422|0x108)) {
            goto LABEL_140;
          }
          break;
        case 525:
          if (v8 != (MTLPixelFormatBGRG422|0x108)) {
            goto LABEL_140;
          }
          break;
        case 526:
          if (v8 != (MTLPixelFormatDepth16Unorm|0x100)) {
            goto LABEL_140;
          }
          break;
        case 527:
          if (v8 != (MTLPixelFormatDepth16Unorm|MTLPixelFormatA8Unorm|0x100)) {
            goto LABEL_140;
          }
          break;
        case 528:
          if (v8 != (MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatGBGR422|0x8)) {
            goto LABEL_140;
          }
          break;
        case 529:
          if (v8 != (MTLPixelFormatX32_Stencil8|MTLPixelFormatGBGR422|0x8)) {
            goto LABEL_140;
          }
          break;
        case 530:
          if (v8 != (MTLPixelFormatX24_Stencil8|MTLPixelFormatGBGR422|0x8)) {
            goto LABEL_140;
          }
          break;
        default:
          if (v6 != 301 || v8 != (MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatB5G6R5Unorm)) {
            goto LABEL_140;
          }
          break;
      }
    }
  }
LABEL_142:
  _MTLMessageContextPush_();
  if ([(MTLToolsTexture *)a1 isFramebufferOnly]) {
    _MTLMessageContextPush_();
  }
  if ([(MTLToolsTexture *)a1 buffer] && (a3 > MTLTextureTypeTextureBuffer || ((1 << a3) & 0x20C) == 0))
  {
    MTLTextureTypeString();
    _MTLMessageContextPush_();
  }
  return _MTLMessageContextEnd();
}

void sub_23BE0BB0C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23BE0BBFC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__assign_unique<std::pair<SubView const,unsigned long> const*>(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    MTLPixelFormat v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        long long v11 = *(_OWORD *)v4;
        v8[4] = v4[2];
        *((_OWORD *)v8 + 1) = v11;
        v8[5] = v4[3];
        unint64_t v10 = (void *)*v8;
        std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__node_insert_unique(a1, v8);
        v4 += 4;
        if (v10) {
          BOOL v12 = v4 == a3;
        }
        else {
          BOOL v12 = 1;
        }
        MTLPixelFormat v8 = v10;
      }
      while (!v12);
    }
    if (v10)
    {
      do
      {
        unint64_t v13 = (void *)*v10;
        operator delete(v10);
        unint64_t v10 = v13;
      }
      while (v13);
    }
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__emplace_unique_key_args<SubView,std::pair<SubView const,unsigned long> const&>((uint64_t)a1, v4, v4);
    v4 += 4;
  }
}

void sub_23BE0BEDC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_23BE0BEFC(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__node_insert_unique(void *a1, void *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = a2[3] ^ a2[2] ^ a2[4];
  *(v4 - 1) = v5;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

void *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL) {
      uint64_t v5 = v3 <= a2 ? a2 % v3 : a2;
    }
    else {
      uint64_t v5 = (v3 - 1) & a2;
    }
    uint64_t v6 = *(void **)(*(void *)a1 + 8 * v5);
    if (v6)
    {
      for (uint64_t i = (void *)*v6; i; uint64_t i = (void *)*i)
      {
        unint64_t v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == *a3 && i[3] == a3[1] && i[4] == a3[2]) {
            return i;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3) {
              v8 %= v3;
            }
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5) {
            break;
          }
        }
      }
    }
  }
  float v10 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v11 = *(float *)(a1 + 32);
  if (!v3 || (float)(v11 * (float)v3) < v10)
  {
    uint64_t v12 = 2 * v3;
    BOOL v13 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    size_t v14 = v13 | v12;
    unint64_t v15 = vcvtps_u32_f32(v10 / v11);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v16);
  }
  return 0;
}

void *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__emplace_unique_key_args<SubView,std::pair<SubView const,unsigned long> const&>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  unint64_t v8 = v6 ^ *a2 ^ v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v6 ^ *a2 ^ v7;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    float v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == v6 && i[4] == v7) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v8;
  long long v15 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_43:
    *unint64_t v23 = i;
    goto LABEL_44;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_43;
  }
LABEL_44:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BE0C2C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::find<SubView>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  unint64_t v5 = v3 ^ *a2 ^ v4;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v3 ^ *a2 ^ v4;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v5;
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2 && result[3] == v3 && result[4] == v4) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__emplace_unique_key_args<SubView,SubView const&,int>(uint64_t a1, void *a2, uint64_t a3, int *a4)
{
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  unint64_t v10 = v8 ^ *a2 ^ v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v8 ^ *a2 ^ v9;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2 && i[3] == v8 && i[4] == v9) {
            return i;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  uint64_t v17 = *a4;
  i[4] = *(void *)(a3 + 16);
  i[5] = v17;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  BOOL v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *uint64_t i = *v25;
LABEL_43:
    void *v25 = i;
    goto LABEL_44;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    BOOL v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_43;
  }
LABEL_44:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23BE0C5E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void emitCommandBufferDistribution(MTLTelemetryDevice *a1, MTLTelemetryCommandBufferCounttRec *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*MEMORY[0x263F12D18])
  {
    if (*MEMORY[0x263F12D18] != 1) {
      return;
    }
    printf("\n\nCommandQueue, totalCommandBuffers=%u, unretainedCommandBuffers=%u, ", a2->var0, a2->var1);
  }
  unint64_t v4 = [(MTLTelemetryDevice *)a1 telemetryLog];
  if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int var0 = a2->var0;
    unsigned int var1 = a2->var1;
    *(_DWORD *)buf = 67109376;
    unsigned int v8 = var0;
    __int16 v9 = 1024;
    unsigned int v10 = var1;
    _os_log_impl(&dword_23BD25000, (os_log_t)v4, OS_LOG_TYPE_DEFAULT, "CommandQueue, totalCommandBuffers=%u, unretainedCommandBuffers=%u, ", buf, 0xEu);
  }
}

void emitBlitDistribution(void *a1, uint64_t a2)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  int v3 = *MEMORY[0x263F12D18];
  if (*MEMORY[0x263F12D18])
  {
    if (v3 != 1) {
      goto LABEL_13;
    }
    unint64_t v4 = (int *)a1[87];
    int v5 = *v4;
    int v6 = v4[1];
    unsigned int v7 = v4[4];
    unint64_t v8 = *((void *)v4 + 1);
    if (v7) {
      double v9 = (float)((float)v8 / (float)v7);
    }
    else {
      double v9 = 0.0;
    }
    printf("\n\nBlitsPerBlitEncoder, minBlits=%u, maxBlits=%u, avgBlits=%f, totalBlits=%llu, countBlits=%u", v5, v6, v9, v8, v7);
  }
  unsigned int v10 = [a1 telemetryLog];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (int *)a1[87];
    int v13 = *v11;
    int v12 = v11[1];
    unsigned int v14 = v11[4];
    unint64_t v15 = *((void *)v11 + 1);
    if (v14) {
      double v16 = (float)((float)v15 / (float)v14);
    }
    else {
      double v16 = 0.0;
    }
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)__int16 v82 = v13;
    *(_WORD *)&v82[4] = 1024;
    *(_DWORD *)&unsigned char v82[6] = v12;
    *(_WORD *)unint64_t v83 = 2048;
    *(double *)&v83[2] = v16;
    *(_WORD *)__int16 v84 = 2048;
    *(void *)&v84[2] = v15;
    LOWORD(v85) = 1024;
    *(_DWORD *)((char *)&v85 + 2) = v14;
    _os_log_impl(&dword_23BD25000, v10, OS_LOG_TYPE_DEFAULT, "BlitsPerBlitEncoder, minBlits=%u, maxBlits=%u, avgBlits=%f, totalBlits=%llu, countBlits=%u", buf, 0x28u);
  }
  int v3 = *MEMORY[0x263F12D18];
LABEL_13:
  if (v3)
  {
    if (v3 != 1) {
      goto LABEL_24;
    }
    uint64_t v17 = (int *)a1[86];
    int v18 = *v17;
    int v19 = v17[1];
    unsigned int v20 = v17[4];
    unint64_t v21 = *((void *)v17 + 1);
    if (v20) {
      double v22 = (float)((float)v21 / (float)v20);
    }
    else {
      double v22 = 0.0;
    }
    printf("\n\nBlitsPerCommandBuffer, minBlits=%u, maxBlits=%u, avgBlits=%f, totalBlits=%llu, countBlits=%u", v18, v19, v22, v21, v20);
  }
  size_t v23 = [a1 telemetryLog];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = (int *)a1[86];
    int v26 = *v24;
    int v25 = v24[1];
    unsigned int v27 = v24[4];
    unint64_t v28 = *((void *)v24 + 1);
    if (v27) {
      double v29 = (float)((float)v28 / (float)v27);
    }
    else {
      double v29 = 0.0;
    }
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)__int16 v82 = v26;
    *(_WORD *)&v82[4] = 1024;
    *(_DWORD *)&unsigned char v82[6] = v25;
    *(_WORD *)unint64_t v83 = 2048;
    *(double *)&v83[2] = v29;
    *(_WORD *)__int16 v84 = 2048;
    *(void *)&v84[2] = v28;
    LOWORD(v85) = 1024;
    *(_DWORD *)((char *)&v85 + 2) = v27;
    _os_log_impl(&dword_23BD25000, v23, OS_LOG_TYPE_DEFAULT, "BlitsPerCommandBuffer, minBlits=%u, maxBlits=%u, avgBlits=%f, totalBlits=%llu, countBlits=%u", buf, 0x28u);
  }
LABEL_24:
  uint64_t v30 = *(void **)(a2 + 16);
  if (!v30) {
    return;
  }
  do
  {
    uint64_t Name = (const char *)MTLPixelFormatGetName();
    uint64_t v32 = 0;
    __int16 v78 = v30;
    do
    {
      uint64_t v33 = 0;
      unsigned int v79 = v30;
      do
      {
        uint64_t v34 = 0x1FFFFFFFFFFFFFD9;
        do
        {
          if (!LODWORD(v30[v34 + 42])) {
            goto LABEL_63;
          }
          if (*MEMORY[0x263F12D18])
          {
            if (*MEMORY[0x263F12D18] != 1) {
              goto LABEL_63;
            }
            long long v35 = "BlitUnknown";
            if (v32 <= 5) {
              long long v35 = off_264E141F8[(int)v32];
            }
            uint64_t v36 = "unknown";
            if (v33 <= 2) {
              uint64_t v36 = off_264E14228[(int)v33];
            }
            uint64_t v37 = "false";
            if (v34 == -39) {
              uint64_t v37 = "true";
            }
            int v38 = &v30[v34];
            unsigned int v39 = v30[v34 + 45];
            unint64_t v40 = v30[v34 + 44];
            float v41 = 0.0;
            float v42 = 0.0;
            if (v39) {
              float v42 = (float)v40 / (float)v39;
            }
            unsigned int v43 = *((_DWORD *)v38 + 96);
            unint64_t v44 = v38[47];
            if (v43) {
              float v41 = (float)v44 / (float)v43;
            }
            uint64_t v45 = &v30[v34];
            unsigned int v46 = v30[v34 + 51];
            unint64_t v47 = v30[v34 + 50];
            float v48 = 0.0;
            float v49 = 0.0;
            if (v46) {
              float v49 = (float)v47 / (float)v46;
            }
            unsigned int v50 = *((_DWORD *)v45 + 108);
            unint64_t v51 = v45[53];
            if (v50) {
              float v48 = (float)v51 / (float)v50;
            }
            printf("\n\n%s, format=%s, options=%s, fullBlit=%s, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minBytesPerRow=%u, maxBytesPerRow=%u, avgBytesPerRow=%f, totalBytesPerRow=%llu, countBytesPerRow=%u, minImageBytes=%u, maxImageBytes=%u, avgImageBytes=%f, totalImageBytes=%llu, countImageBytes=%u, minBufferBytes=%u, maxBufferBytes=%u, avgBufferBytes=%f, totalBufferBytes=%llu, countBufferBytes=%u", v35, Name, v36, v37, *((_DWORD *)v38 + 86), *((_DWORD *)v38 + 87), v42, v40, v39, *((_DWORD *)v38 + 92), *((_DWORD *)v38 + 93), v41, v44,
              v43,
              *((_DWORD *)v45 + 98),
              *((_DWORD *)v45 + 99),
              v49,
              v47,
              v46,
              *((_DWORD *)v45 + 104),
              *((_DWORD *)v45 + 105),
              v48,
              v51,
              v50);
          }
          uint64_t v52 = [a1 telemetryLog];
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            id v53 = "BlitUnknown";
            if (v32 <= 5) {
              id v53 = off_264E141F8[(int)v32];
            }
            __int16 v54 = "unknown";
            if (v33 <= 2) {
              __int16 v54 = off_264E14228[(int)v33];
            }
            if (v34 == -39) {
              unsigned int v55 = "true";
            }
            else {
              unsigned int v55 = "false";
            }
            uint64_t v56 = &v30[v34];
            unsigned int v57 = v30[v34 + 45];
            unint64_t v58 = v30[v34 + 44];
            float v59 = 0.0;
            float v60 = 0.0;
            if (v57) {
              float v60 = (float)v58 / (float)v57;
            }
            unsigned int v61 = *((_DWORD *)v56 + 96);
            unint64_t v62 = v56[47];
            if (v61) {
              float v59 = (float)v62 / (float)v61;
            }
            unint64_t v63 = &v30[v34];
            unsigned int v64 = v30[v34 + 51];
            unint64_t v65 = v30[v34 + 50];
            float v66 = 0.0;
            float v67 = 0.0;
            if (v64) {
              float v67 = (float)v65 / (float)v64;
            }
            uint64_t v68 = *((unsigned int *)v63 + 108);
            unint64_t v69 = v63[53];
            if (v68) {
              float v66 = (float)v69 / (float)v68;
            }
            int v70 = *((_DWORD *)v56 + 86);
            int v71 = *((_DWORD *)v56 + 87);
            int v72 = *((_DWORD *)v56 + 92);
            int v73 = *((_DWORD *)v56 + 93);
            int v74 = *((_DWORD *)v63 + 98);
            int v75 = *((_DWORD *)v63 + 99);
            int v76 = *((_DWORD *)v63 + 104);
            int v77 = *((_DWORD *)v63 + 105);
            *(_DWORD *)buf = 136321026;
            uint64_t v127 = v68;
            *(void *)__int16 v82 = v53;
            *(_WORD *)&v82[8] = 2080;
            *(void *)unint64_t v83 = Name;
            *(_WORD *)&v83[8] = 2080;
            *(void *)__int16 v84 = v54;
            *(_WORD *)&v84[8] = 2080;
            unsigned int v85 = v55;
            __int16 v86 = 1024;
            int v87 = v70;
            __int16 v88 = 1024;
            int v89 = v71;
            __int16 v90 = 2048;
            double v91 = v60;
            __int16 v92 = 2048;
            unint64_t v93 = v58;
            __int16 v94 = 1024;
            unsigned int v95 = v57;
            __int16 v96 = 1024;
            int v97 = v72;
            __int16 v98 = 1024;
            int v99 = v73;
            __int16 v100 = 2048;
            double v101 = v59;
            __int16 v102 = 2048;
            unint64_t v103 = v62;
            __int16 v104 = 1024;
            unsigned int v105 = v61;
            __int16 v106 = 1024;
            int v107 = v74;
            __int16 v108 = 1024;
            int v109 = v75;
            __int16 v110 = 2048;
            double v111 = v67;
            __int16 v112 = 2048;
            unint64_t v113 = v65;
            __int16 v114 = 1024;
            unsigned int v115 = v64;
            __int16 v116 = 1024;
            int v117 = v76;
            __int16 v118 = 1024;
            int v119 = v77;
            __int16 v120 = 2048;
            double v121 = v66;
            __int16 v122 = 2048;
            unint64_t v123 = v69;
            __int16 v124 = 1024;
            int v125 = v68;
            _os_log_impl(&dword_23BD25000, v52, OS_LOG_TYPE_DEFAULT, "%s, format=%s, options=%s, fullBlit=%s, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minBytesPerRow=%u, maxBytesPerRow=%u, avgBytesPerRow=%f, totalBytesPerRow=%llu, countBytesPerRow=%u, minImageBytes=%u, maxImageBytes=%u, avgImageBytes=%f, totalImageBytes=%llu, countImageBytes=%u, minBufferBytes=%u, maxBufferBytes=%u, avgBufferBytes=%f, totalBufferBytes=%llu, countBufferBytes=%u", buf, 0xC2u);
          }
LABEL_63:
          v34 += 13;
        }
        while (v34 * 8);
        ++v33;
        v30 += 39;
      }
      while (v33 != 3);
      ++v32;
      uint64_t v30 = v79 + 117;
    }
    while (v32 != 6);
    uint64_t v30 = (void *)*v78;
  }
  while (*v78);
}

void InitResourceIdentifier(MTLGPUDebugTexture *a1)
{
  v6[1] = *MEMORY[0x263EF8340];
  id v2 = [(MTLToolsObject *)a1->super.super.super._device baseObject];
  if ((objc_msgSend((id)objc_msgSend(v2, "vendorName"), "containsString:", @"IG") & 1) != 0
    || objc_msgSend((id)objc_msgSend(v2, "vendorName"), "containsString:", @"Intel"))
  {
    int v3 = (void *)[v2 newBufferWithLength:8 options:0];
    id v4 = objc_alloc_init(MEMORY[0x263F127B8]);
    [v4 setIndex:0];
    [v4 setDataType:58];
    [v4 setAccess:1];
    v6[0] = v4;
    int v5 = objc_msgSend(v2, "newArgumentEncoderWithArguments:", objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:count:", v6, 1));

    [v5 setArgumentBuffer:v3 offset:0];
    objc_msgSend(v5, "setTexture:atIndex:", -[MTLGPUDebugTexture baseObject](a1, "baseObject"), 0);

    a1->_identifier = *(void *)[v3 contents];
  }
  else
  {
    a1->_identifier = [(MTLToolsTexture *)a1 uniqueIdentifier];
  }
}

__CFString *MTLTextureStringFromType(MTLTextureType a1)
{
  if (a1 > MTLTextureTypeTextureBuffer) {
    return @"Unknown";
  }
  else {
    return off_264E14240[a1];
  }
}

void sub_23BE0F508(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLegacySVAccelerationStructureTypeFromDescriptor(MTLAccelerationStructureDescriptor *a1)
{
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 2;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 2;
  }
  else {
    return 0;
  }
}

__CFString *MTLLegacySVAccelerationStructureStringFromType(uint64_t a1)
{
  uint64_t v1 = @"Unknown";
  if (a1 == 2) {
    uint64_t v1 = @"MTLInstanceAccelerationStructure";
  }
  if (a1 == 1) {
    return @"MTLPrimitiveAccelerationStructure";
  }
  else {
    return v1;
  }
}

double MetalBufferHeap::grow(uint8_t *a1, unint64_t *a2, double *a3, NSObject *a4)
{
  double v4 = (float)((float)*a2 * 0.00000095367);
  *(_DWORD *)a1 = 134217984;
  *a3 = v4;
  OUTLINED_FUNCTION_0(&dword_23BD25000, a4, (uint64_t)a3, "BufferHeap::MemoryAllocated (MB) - %.2f", a1);
  return result;
}

double MetalBufferHeap::allocBuffer(unint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  double v3 = (float)((float)*a1 * 0.00000095367);
  double v4 = (float)((float)*(unint64_t *)(a2 + 120) * 0.00000095367);
  int v6 = 134218240;
  double v7 = v3;
  __int16 v8 = 2048;
  double v9 = v4;
  _os_log_debug_impl(&dword_23BD25000, log, OS_LOG_TYPE_DEBUG, "BufferHeap::MemoryUsed (MB) - %.2f/%.2f", (uint8_t *)&v6, 0x16u);
  return result;
}

void GPUDebugBufferDescriptorHeap::init(id *a1, NSObject *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unint64_t v3 = [*a1 length];
  int v5 = 134217984;
  double v6 = (float)((float)v3 * 0.00000095367);
  OUTLINED_FUNCTION_0(&dword_23BD25000, a2, v4, "DescriptorHeapSize (MB) - %.2f", (uint8_t *)&v5);
}

void GPUDebugBufferDescriptorHeap::createHandle(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v3 = 134217984;
  uint64_t v4 = a1;
  OUTLINED_FUNCTION_0(&dword_23BD25000, a2, a3, "DescriptorHeapNewHandle - %llu", (uint8_t *)&v3);
}

void GPUDebugConstantBufferCache::getOrCreateBuffer(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  int v4 = 134217984;
  uint64_t v5 = v3;
  OUTLINED_FUNCTION_0(&dword_23BD25000, a2, a3, "ConstantBufferCache::TotalMemory - %llu", (uint8_t *)&v4);
}

void MTLGPUDebugSetValidationChecksOptions(void *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v4 = 136315138;
  uint64_t v5 = [a1 UTF8String];
  OUTLINED_FUNCTION_0(&dword_23BD25000, a2, v3, "%s", (uint8_t *)&v4);
}

void MTLGPUDebugParsePerPSOList(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v3 = 138412290;
  uint64_t v4 = a1;
  OUTLINED_FUNCTION_0(&dword_23BD25000, a2, a3, "[METAL SHADER VALIDATION] List content: \"%@\"", (uint8_t *)&v3);
}

void MTLLegacySVSetValidationChecksOptions(void *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v4 = 136315138;
  uint64_t v5 = [a1 UTF8String];
  OUTLINED_FUNCTION_0(&dword_23BD25000, a2, v3, "%s", (uint8_t *)&v4);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B30](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B38](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7B40](c, data, *(void *)&len);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x270EE4CE0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x270EF4820](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF49D8](*(void *)&entry, key, allocator, *(void *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x270EF4AB0](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EF4AD0](name);
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x270EF4C20](buffer, key);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x270EF4C58](buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4CB0](buffer);
}

uint64_t MTLCreateStructTypeFromArgumentDescriptors()
{
  return MEMORY[0x270EF5E10]();
}

uint64_t MTLDataTypeGetAlignment()
{
  return MEMORY[0x270EF5E28]();
}

uint64_t MTLDataTypeGetComponentCount()
{
  return MEMORY[0x270EF5E30]();
}

uint64_t MTLDataTypeGetComponentType()
{
  return MEMORY[0x270EF5E38]();
}

uint64_t MTLDataTypeGetShaderTypeName()
{
  return MEMORY[0x270EF5E40]();
}

uint64_t MTLDataTypeGetSize()
{
  return MEMORY[0x270EF5E48]();
}

uint64_t MTLDataTypeString()
{
  return MEMORY[0x270EF5E50]();
}

uint64_t MTLDynamicLibraryLoadOptionsFromPipelineOptions()
{
  return MEMORY[0x270EF5E58]();
}

uint64_t MTLEnumerateIndirectResources()
{
  return MEMORY[0x270EF5E60]();
}

uint64_t MTLFunctionTypeString()
{
  return MEMORY[0x270EF5E68]();
}

uint64_t MTLGPUOperationString()
{
  return MEMORY[0x270EF5E70]();
}

uint64_t MTLGetEnvDefault()
{
  return MEMORY[0x270EF5E80]();
}

uint64_t MTLGetTextureLevelInfoForDevice()
{
  return MEMORY[0x270EF5E98]();
}

uint64_t MTLGetTextureLevelInfoForDeviceWithOptions()
{
  return MEMORY[0x270EF5EA0]();
}

uint64_t MTLPixelFormatCompatibilityString()
{
  return MEMORY[0x270EF5EC8]();
}

uint64_t MTLPixelFormatComputeTotalSizeUsed()
{
  return MEMORY[0x270EF5ED0]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x270EF5EE0]();
}

uint64_t MTLPixelFormatGetName()
{
  return MEMORY[0x270EF5EF0]();
}

uint64_t MTLReadWriteTextureIsSupported()
{
  return MEMORY[0x270EF5F48]();
}

uint64_t MTLReleaseAssertionFailure()
{
  return MEMORY[0x270EF5F50]();
}

uint64_t MTLReportFailure()
{
  return MEMORY[0x270EF5F58]();
}

uint64_t MTLReportFailureTypeEnabled()
{
  return MEMORY[0x270EF5F60]();
}

uint64_t MTLSamplerBorderColorString()
{
  return MEMORY[0x270EF5F88]();
}

uint64_t MTLStorageModeString()
{
  return MEMORY[0x270EF5F90]();
}

uint64_t MTLTextureSwizzleKeyToChannels()
{
  return MEMORY[0x270EF5FA0]();
}

uint64_t MTLTextureTypeString()
{
  return MEMORY[0x270EF5FB0]();
}

uint64_t MTLValidateFeatureSupport()
{
  return MEMORY[0x270EF5FD0]();
}

uint64_t MTLVertexAmplificationModeString()
{
  return MEMORY[0x270EF5FE0]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x270EF2AF8](range1.location, range1.length, range2.location, range2.length);
  result.NSUInteger length = v3;
  result.locatiouint64_t n = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _MTLAdjustMTLSize()
{
  return MEMORY[0x270EF5FF8]();
}

uint64_t _MTLCompatibleTextureDataTypeAndPixelFormatInfo()
{
  return MEMORY[0x270EF6000]();
}

uint64_t _MTLGetAttachmentSize()
{
  return MEMORY[0x270EF6020]();
}

uint64_t _MTLHashState()
{
  return MEMORY[0x270EF6028]();
}

uint64_t _MTLMessageContextBegin_()
{
  return MEMORY[0x270EF6030]();
}

uint64_t _MTLMessageContextEnd()
{
  return MEMORY[0x270EF6038]();
}

uint64_t _MTLMessageContextPush_()
{
  return MEMORY[0x270EF6040]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t MTLAttributeFormatSize(MTLAttributeFormat a1)
{
  return MEMORY[0x270EF6048](a1);
}

uint64_t _MTLRequestHashToString()
{
  return MEMORY[0x270EF6050]();
}

uint64_t MTLAttributeFormatAlignment(MTLAttributeFormat a1)
{
  return MEMORY[0x270EF6058](a1);
}

uint64_t MTLAttributeFormatComponentCount(MTLAttributeFormat a1)
{
  return MEMORY[0x270EF6060](a1);
}

uint64_t MTLAccelerationStructureInstanceDescriptorSize(MTLAccelerationStructureInstanceDescriptorType a1)
{
  return MEMORY[0x270EF6068](a1);
}

uint64_t isValidMTLAccelerationStructureInstanceDescriptorType(MTLAccelerationStructureInstanceDescriptorType a1)
{
  return MEMORY[0x270EF6070](a1);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x270F98900](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

uint64_t _mtlNumMipmapLevelsForSize()
{
  return MEMORY[0x270EF6078]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x270F98F58](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

void free(void *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

uint64_t initLogMode()
{
  return MEMORY[0x270EF60A0]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x270EDA138]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x270F9A6A0](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x270EDAFA0](a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}