@interface CAMViewfinderViewController
+ (int64_t)_pressTypeForCaptureButton:(int64_t)a3;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_advancedPhotoFormat;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_currentPhotoFormat;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_desiredAdvancedPhotoFormat;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_essentialPhotoFormat;
- ($76EADD4ED24426C67044446678BAA581)_dynamicShutterSettingsForGraphConfiguration:(SEL)a3;
- ($E5C720D6BB068A42F0C2CD001350366C)_dynamicShutterPrivateSettingsForGraphConfiguration:(id)a3;
- ($F24F406B2B787EFB06265DBA3D28CBD5)_lowLightDurationMapping;
- (AVCaptureEventInteraction)_physicalButtonInteraction;
- (BCSAVParsingSession)_barcodeParsingSession;
- (BOOL)_allowsPhysicalCaptureInteraction;
- (BOOL)_arePhotoFormatConflictsSupportedForMode:(int64_t)a3 device:(int64_t)a4;
- (BOOL)_autoHideHomeIndicatorForOrientation:(int64_t)a3;
- (BOOL)_canShowIndicatorDuringTrueVideoRecordingForType:(unint64_t)a3 withGraphConfiguration:(id)a4;
- (BOOL)_canShowWhileLocked;
- (BOOL)_canUseFilteringForLayoutStyle:(int64_t)a3;
- (BOOL)_captureStillImageWithCurrentSettings;
- (BOOL)_captureStillImageWithRequest:(id)a3 error:(id *)a4;
- (BOOL)_capturingFromPhysicalButton;
- (BOOL)_completedInitialConfiguration;
- (BOOL)_depthEffectEnabledFromSuggestion;
- (BOOL)_didAcceptCompromisedFlash;
- (BOOL)_externalStorageOutputEnabled;
- (BOOL)_filterScrubberSwipeMatchesExposureBiasPanDirection;
- (BOOL)_hasBeenPromptedForICPLToday;
- (BOOL)_hasInFlightConfiguration;
- (BOOL)_hasSignificantAmountOfRecordingTimeForCurrentConfiguration;
- (BOOL)_isActiveZooming;
- (BOOL)_isAnimatingFilterScrubberDismissal;
- (BOOL)_isAnimatingSmartStyleIndicator;
- (BOOL)_isAutoResumeCancelingWithoutBackgrounding;
- (BOOL)_isBurstEndSoundPlaying;
- (BOOL)_isCTMCaptureForType:(int64_t)a3;
- (BOOL)_isCTMVideoSupportedForGraphConfiguration:(id)a3;
- (BOOL)_isCapturing;
- (BOOL)_isCapturingFromTimer;
- (BOOL)_isCapturingTimelapse;
- (BOOL)_isClosingViewfinder;
- (BOOL)_isControlDrawerShowingPersistentControl;
- (BOOL)_isCurrentLowLightCaptureCancelable;
- (BOOL)_isDepthSuggestedOrEnabledForShallowDepthOfFieldStatus:(int64_t)a3;
- (BOOL)_isDepthSuggestionAllowedForCurrentConfigurationIsBurst:(BOOL)a3;
- (BOOL)_isDisplayingDocumentScanningButton;
- (BOOL)_isDisplayingMRCButton;
- (BOOL)_isDocumentInScene;
- (BOOL)_isExpectedLowLightDurationCancelable;
- (BOOL)_isExposureBiasNonDefault:(double)a3;
- (BOOL)_isFlashCompromisedForDevicePosition:(int64_t)a3;
- (BOOL)_isFlashOrTorchSupportedForGraphConfiguration:(id)a3;
- (BOOL)_isFlashUnavailableForMode:(int64_t)a3;
- (BOOL)_isFlashingVideoStabilizationBadge;
- (BOOL)_isHDRSupportedForGraphConfiguration:(id)a3;
- (BOOL)_isLivePhotoSupportedForGraphConfiguration:(id)a3;
- (BOOL)_isLivePhotoSupportedForMode:(int64_t)a3 device:(int64_t)a4;
- (BOOL)_isLowLightActiveForCurrentSettings;
- (BOOL)_isLowLightCaptureCanceling;
- (BOOL)_isLowLightCaptureUIVisible;
- (BOOL)_isLowLightUpdatingDeferred;
- (BOOL)_isMenuButtonConflictingWithView:(id)a3;
- (BOOL)_isModeDisabled;
- (BOOL)_isNightModePortraitAvailableForMode:(int64_t)a3 device:(int64_t)a4 zoomFactor:(double)a5;
- (BOOL)_isOpeningViewfinder;
- (BOOL)_isOutOfDiskSpace;
- (BOOL)_isPerformingTopBarOrientationChange;
- (BOOL)_isPinchToZoomAllowed;
- (BOOL)_isPinchingForZoom;
- (BOOL)_isPrimaryDisplayAssetForCoordinationInfo:(id)a3;
- (BOOL)_isProactiveFlashSuggestionSuppressed;
- (BOOL)_isReconfiguring;
- (BOOL)_isReconfiguringForZoomChange;
- (BOOL)_isScreenExternalDisplay;
- (BOOL)_isShowingBurstIndicatorView;
- (BOOL)_isShowingCameraRoll;
- (BOOL)_isShowingFilterScrubber;
- (BOOL)_isShowingPortraitApertureSlider;
- (BOOL)_isShowingPortraitIntensitySlider;
- (BOOL)_isSpatialMode:(int64_t)a3 devicePosition:(int64_t)a4;
- (BOOL)_isSpatialVideoEnabled;
- (BOOL)_isSpatialVideoInVideoModeActiveForMode:(int64_t)a3 devicePosition:(int64_t)a4;
- (BOOL)_isSpatialVideoMode:(int64_t)a3 devicePosition:(int64_t)a4;
- (BOOL)_isSwipeToModeSwitchEnabled;
- (BOOL)_isTransitioningToCreativeCamera;
- (BOOL)_isVideoStabilizationIndicatorPrimary;
- (BOOL)_isZoomAllowedCurrently;
- (BOOL)_isZoomAllowedForGraphConfiguration:(id)a3;
- (BOOL)_isZooming;
- (BOOL)_modeChangeSwipeMatchesExposureBiasPanDirection;
- (BOOL)_needsDeferredGraphConfiguration;
- (BOOL)_pauseCapturingVideo;
- (BOOL)_receivedOutOfDiskSpaceErrorDuringCapture;
- (BOOL)_redirectShutterEventIfNecessary:(unint64_t)a3;
- (BOOL)_resetTimerDurationAfterDelayedCapture;
- (BOOL)_resumeCaptureVideo;
- (BOOL)_shouldAllowControlDrawerForGraphConfiguration:(id)a3;
- (BOOL)_shouldAllowControlDrawerToggleForGraphConfiguration:(id)a3 orientation:(int64_t)a4;
- (BOOL)_shouldAllowHapticsForCurrentState;
- (BOOL)_shouldAnimateViewfinderCloseForReason:(int64_t)a3;
- (BOOL)_shouldApplyTopBarRotationForGraphConfiguration:(id)a3;
- (BOOL)_shouldCaptureWithTimer;
- (BOOL)_shouldCreateAndEmbedControls;
- (BOOL)_shouldCreateHorizonLevelViewForMode:(int64_t)a3;
- (BOOL)_shouldCreatePhotosButton;
- (BOOL)_shouldDeferMediaLoadingForGraphConfiguration:(id)a3;
- (BOOL)_shouldDisableCompromisedFlashForDevicePosition:(int64_t)a3;
- (BOOL)_shouldDisableDepthSuggestionForNightModeForConfiguration:(id)a3;
- (BOOL)_shouldDisableModeForGraphConfiguration:(id)a3 callActive:(BOOL)a4;
- (BOOL)_shouldDisableUserInteractionForTransitioning;
- (BOOL)_shouldEmulateAggregateCameraZoomForGraphConfiguration:(id)a3;
- (BOOL)_shouldEnableApertureButton;
- (BOOL)_shouldEnableAspectRatioButton;
- (BOOL)_shouldEnableAutoMacroButton;
- (BOOL)_shouldEnableControlDrawerToggle;
- (BOOL)_shouldEnableControlStatusIndicator:(unint64_t)a3;
- (BOOL)_shouldEnableCreativeCameraButton;
- (BOOL)_shouldEnableDrawerControl:(int64_t)a3;
- (BOOL)_shouldEnableExposureControlButton;
- (BOOL)_shouldEnableFilterButton;
- (BOOL)_shouldEnableFlashButton;
- (BOOL)_shouldEnableFlipButton;
- (BOOL)_shouldEnableHDRButton;
- (BOOL)_shouldEnableImageWell;
- (BOOL)_shouldEnableIntensityButton;
- (BOOL)_shouldEnableLivePhotoButton;
- (BOOL)_shouldEnableLowLightControl;
- (BOOL)_shouldEnableModeDial;
- (BOOL)_shouldEnablePhotoFormatButton;
- (BOOL)_shouldEnableProResButton;
- (BOOL)_shouldEnableRAWButton;
- (BOOL)_shouldEnableSemanticStyleControl;
- (BOOL)_shouldEnableSharedLibraryButton;
- (BOOL)_shouldEnableShutterButton;
- (BOOL)_shouldEnableSmartStyleControl;
- (BOOL)_shouldEnableSmartStylesSwipeGestures;
- (BOOL)_shouldEnableSwipeToChangeFilters;
- (BOOL)_shouldEnableSwipeToModeSwitch;
- (BOOL)_shouldEnableTextAnalysisButton;
- (BOOL)_shouldEnableTimerButton;
- (BOOL)_shouldEnableVideoConfigurationControl;
- (BOOL)_shouldEnableVideoStabilizationButton;
- (BOOL)_shouldEnableZoomControl;
- (BOOL)_shouldEnableZoomSlider;
- (BOOL)_shouldHideApertureButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideAspectRatioControlForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideControlStatusIndicatorsForCommonStateForType:(unint64_t)a3;
- (BOOL)_shouldHideCreativeCameraButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideDoneButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideElapsedTimeViewForGraphConfiguration:(id)a3 orientation:(int64_t)a4;
- (BOOL)_shouldHideFilterButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideFilterNameBadgeForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideFlashBadgeForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideFlashButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideFlipButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideFocusAndExposureLockBadgeForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideGridViewForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideHDRBadgeForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideHDRButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideHorizonLevelViewForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideImageWellForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideIntensityButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideLevelViewForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideLightingControlBadgeForGraphConfiguration:(id)a3 orientation:(int64_t)a4;
- (BOOL)_shouldHideLightingControlForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideLightingNameBadgeForGraphConfiguration:(id)a3 orientation:(int64_t)a4;
- (BOOL)_shouldHideLivePhotoBadgeForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideLivePhotoButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideModeDialForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideModeDialForGraphConfiguration:(id)a3 isCapturingBurst:(BOOL)a4;
- (BOOL)_shouldHidePanoramaViewForGraphConfiguration:(id)a3;
- (BOOL)_shouldHidePhotosButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHidePortraitModeInstructionLabelForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideQRCodeInstructionLabelForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideReviewButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideShutterButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideStillDuringVideoButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideTimerButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideTimerIndicatorViewForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideTopBarForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideUtilityBarForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideZoomControlForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideZoomSliderForGraphConfiguration:(id)a3;
- (BOOL)_shouldHideZoomSliderForGraphConfiguration:(id)a3 ignoreExpiredVisibilityTimer:(BOOL)a4;
- (BOOL)_shouldIgnoreZoomFactorKVOForRamping;
- (BOOL)_shouldMonitorDeviceMotionForGraphConfiguration:(id)a3;
- (BOOL)_shouldPauseCapturingStillImagePairedVideoForGraphConfiguration:(id)a3 isShowingCameraRoll:(BOOL)a4;
- (BOOL)_shouldProcessMachineReadableMetadata;
- (BOOL)_shouldProcessTextRegions;
- (BOOL)_shouldReportUserInitiationTimeForCurrentSettings;
- (BOOL)_shouldRequestDepthDeliveryForBurst:(BOOL)a3;
- (BOOL)_shouldResetZoomForChangeFromMode:(int64_t)a3 toMode:(int64_t)a4;
- (BOOL)_shouldRotateTopBarForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowAutoMacroButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowDepthSuggestionButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowDescriptionOverlayViewForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowDescriptionOverlayViewForGraphConfiguration:(id)a3 viewClass:(Class *)a4;
- (BOOL)_shouldShowDeviceTooHotInstructionLabelForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowDocumentScanningButton;
- (BOOL)_shouldShowDrawerControlOfType:(int64_t)a3 forGraphConfiguration:(id)a4;
- (BOOL)_shouldShowExposureButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowExternalStorageButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowFilterScrubberAfterNextRender;
- (BOOL)_shouldShowFlashCompromisedInstructionsForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowFreeResourcesInstructionLabelForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowImageAnalysisButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowImageAnalysisInstructionLabel;
- (BOOL)_shouldShowIndicatorOfType:(unint64_t)a3 forGraphConfiguration:(id)a4;
- (BOOL)_shouldShowLowLightControlForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowMaxRecordTimeInstructionLabelForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowPhotoFormatButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowPhotoVideoModeSwitchForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowPreviewOverlayButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowProResButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowRAWButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowSemanticStyleControlForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowSharedLibraryBadgeForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowSharedLibraryButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowSharedLibraryImageWellIndicatorForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowSharedLibraryIndicatorForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowShutterButtonDisabled;
- (BOOL)_shouldShowSmartStyleCategoryInstructionLabelForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowSmartStyleControlForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowSmartStyleIndicatorForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowSpatialCaptureControlForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowSpatialCaptureInstructionsForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowUnsupportedExternalStorageFormat;
- (BOOL)_shouldShowUnsupportedExternalStorageFormatForVideoEncodingBehavior:(int64_t)a3;
- (BOOL)_shouldShowVideoConfigurationIndicatorForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowVideoStabilizationBadgeForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowVideoStabilizationButtonForGraphConfiguration:(id)a3;
- (BOOL)_shouldShowViewfinderLegibilityBackgroundsForGraphConfiguration:(id)a3;
- (BOOL)_shouldSuspendCaptureSessionForGraphConfiguration:(id)a3 callActive:(BOOL)a4;
- (BOOL)_shouldSuspendCaptureSessionForModeDisabledReason:(int64_t)a3;
- (BOOL)_shouldSuspendCaptureSessionForModeDisabledReasons:(id)a3;
- (BOOL)_shouldSwitchToVideoConfiguration:(int64_t)a3 videoEncodingBehavior:(int64_t)a4;
- (BOOL)_shouldUpdateCaptureOrientation;
- (BOOL)_shouldUseBurstForCaptureTimer;
- (BOOL)_shouldUseDepthFromSuggestionForCurrentConfigurationIsBurst:(BOOL)a3;
- (BOOL)_shouldUseFiltersForGraphConfiguration:(id)a3;
- (BOOL)_shouldUsePhotoModePortraitEffect;
- (BOOL)_shouldUsePhotoModePortraitEffectIsBurst:(BOOL)a3;
- (BOOL)_shouldUseTransientLightingBadgesForGraphConfiguration:(id)a3;
- (BOOL)_shouldUseZoomButtonForCameraToggleForCurrentModeAndDevice;
- (BOOL)_shouldUseZoomButtonForCameraToggleForGraphConfiguration:(id)a3;
- (BOOL)_shouldUseZoomControlInsteadOfSlider;
- (BOOL)_smartStyleChangeSwipeMatchesExposureBiasPanDirection;
- (BOOL)_spatialModeHasVideoSelected;
- (BOOL)_startCapturingPanoramaWithRequest:(id)a3;
- (BOOL)_startCapturingVideoWithRequest:(id)a3;
- (BOOL)_startTimelapse;
- (BOOL)_stillDuringVideoButtonPressed:(id)a3;
- (BOOL)_stillDuringVideoButtonReleased:(id)a3;
- (BOOL)_stopCapturingPanorama;
- (BOOL)_stopCapturingVideo;
- (BOOL)_stopTimelapse;
- (BOOL)_trueVideoIsActive;
- (BOOL)_trueVideoIsCapturing;
- (BOOL)_trueVideoIsTransitioningFromCapture;
- (BOOL)_trueVideoIsTransitioningToCapture;
- (BOOL)_updateDuetSystemConstraintsIfNecessary;
- (BOOL)_urgentlyNeedsToPurgeDiskSpace;
- (BOOL)_useCreativeCameraControls;
- (BOOL)_useZoomFactorsOfTrueVideoDestinationModeForGraphConfiguration:(id)a3;
- (BOOL)_wantsCaptureAnimationForRequest:(id)a3;
- (BOOL)_wantsExternalStorageOutputEnabled;
- (BOOL)_wantsExternalStorageOutputEnabledForMode:(int64_t)a3 videoConfiguration:(int64_t)a4 desiredProResVideoMode:(int64_t)a5;
- (BOOL)_wantsExternalStorageOutputEnabledForMode:(int64_t)a3 videoEncodingBehavior:(int64_t)a4;
- (BOOL)_wantsFilterScrubberVisible;
- (BOOL)_wantsHDRControlsVisible;
- (BOOL)_wantsLightingControlForGraphConfiguration:(id)a3;
- (BOOL)_wantsLightingControlForMode:(int64_t)a3 devicePosition:(int64_t)a4;
- (BOOL)_wantsVisualTextAnalysis;
- (BOOL)_wantsVisualTextSelectionInstructions;
- (BOOL)_wantsZoomControlForGraphConfiguration:(id)a3;
- (BOOL)_wantsZoomSliderForGraphConfiguration:(id)a3;
- (BOOL)_zoomControlReconfiguresGraphConfiguration:(id)a3;
- (BOOL)automaticallyAdjustsApplicationIdleTimer;
- (BOOL)automaticallyAdjustsAutorotationStyle;
- (BOOL)cameraRollControllerShouldRequestUnlock:(id)a3;
- (BOOL)canToggleBetweenZoomFactorsForZoomControl:(id)a3;
- (BOOL)capturePhoto;
- (BOOL)dynamicShutterControlCanStartOnTouchDown:(id)a3;
- (BOOL)dynamicShutterControlShouldBeginGesture:(id)a3;
- (BOOL)fullscreenViewfinderCanUpdatePreviewSemanticStyles:(id)a3;
- (BOOL)gestureRecognizer:(id)a3 shouldReceiveTouch:(id)a4;
- (BOOL)gestureRecognizer:(id)a3 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a4;
- (BOOL)gestureRecognizer:(id)a3 shouldRequireFailureOfGestureRecognizer:(id)a4;
- (BOOL)gestureRecognizerShouldBegin:(id)a3;
- (BOOL)handleURLIfNeeded:(id)a3;
- (BOOL)imageAnalysisInteraction:(id)a3 shouldBeginAtPoint:(CGPoint)a4 forAnalysisType:(unint64_t)a5;
- (BOOL)isCapturingLivePhoto;
- (BOOL)isCapturingPhoto;
- (BOOL)isDisablingAdditionalCaptures;
- (BOOL)isDisablingMultipleCaptureFeatures;
- (BOOL)isEmulatingImagePicker;
- (BOOL)isInCameraRollView;
- (BOOL)isPerformingReviewUsingOverlay;
- (BOOL)isPerformingTileTransition;
- (BOOL)isPreventingAdditionalCaptures;
- (BOOL)isRecording;
- (BOOL)isShowingStandardControls;
- (BOOL)isUserInteractionLoggingEnabled;
- (BOOL)navigateToViewfinderView;
- (BOOL)prefersHomeIndicatorAutoHidden;
- (BOOL)prefersStatusBarHidden;
- (BOOL)pressShutterButtonWithTouchUpDelay:(double)a3;
- (BOOL)pressShutterButtonWithTouchUpDelay:(double)a3 shutterBehavior:(int64_t)a4;
- (BOOL)previewViewController:(id)a3 gestureRecognizer:(id)a4 shouldRequireFailureOfGestureRecognizer:(id)a5;
- (BOOL)previewViewControllerShouldRestrictExposureBiasPanToTouchesNearSlider:(id)a3;
- (BOOL)remoteShutterBeginBurstCapture:(id)a3;
- (BOOL)remoteShutterEndBurstCapture:(id)a3;
- (BOOL)remoteShutterPauseCapture:(id)a3;
- (BOOL)remoteShutterResumeCapture:(id)a3;
- (BOOL)remoteShutterShouldSuspendApp:(id)a3;
- (BOOL)remoteShutterStartCapture:(id)a3;
- (BOOL)remoteShutterStopCapture:(id)a3;
- (BOOL)shouldAutorotate;
- (BOOL)shouldHideElapsedTimeView;
- (BOOL)shouldHideFilterNameBadge;
- (BOOL)shouldHideFlashButton;
- (BOOL)shouldHideFlipButton;
- (BOOL)shouldHideHDRButton;
- (BOOL)shouldHideLightingControl;
- (BOOL)shouldHideLightingNameBadgeForOrientation:(int64_t)a3;
- (BOOL)shouldHideLivePhotoButton;
- (BOOL)shouldHidePortraitModeInstructionLabel;
- (BOOL)shouldHideQRCodeInstructionLabel;
- (BOOL)shouldHideTimerButton;
- (BOOL)shouldHideTopBar;
- (BOOL)shouldLayoutLightingNameBadgeAtBottom;
- (BOOL)shouldShiftPreviewForUtilityBar;
- (BOOL)startRecording;
- (BOOL)stopRecording;
- (BOOL)takeStillDuringVideoWithTouchUpDelay:(double)a3;
- (BOOL)videoConfigurationStatusIndicatorShouldRespondToTap:(id)a3;
- (BOOL)viewAlreadyDidAppear;
- (BOOL)zoomControlShouldSnapDialToSwitchOverZoomFactors:(id)a3;
- (CAMAnalyticsCaptureEvent)_timelapseAnalyticsEvent;
- (CAMAnalyticsControlDrawerEvent)_analyticsControlDrawerEvent;
- (CAMAnalyticsSessionEvent)_analyticsSessionEvent;
- (CAMAnalyticsVisionSession)_visionAnalyticsSession;
- (CAMAnimationDelegate)_synchronizedCaptureTimerDelegate;
- (CAMBottomBar)_bottomBar;
- (CAMBurstIndicatorView)_burstIndicatorView;
- (CAMCallStatusMonitor)_callStatusMonitor;
- (CAMCameraConfigurationDelegate)configurationDelegate;
- (CAMCameraRollController)_cameraRollController;
- (CAMCaptureGraphConfiguration)_configuredGraphConfiguration;
- (CAMCaptureGraphConfiguration)_currentGraphConfiguration;
- (CAMClosedViewfinderController)_closedViewfinderController;
- (CAMControlDrawer)_controlDrawer;
- (CAMCreativeCameraButton)_creativeCameraButton;
- (CAMCreativeCameraDelegate)creativeCameraDelegate;
- (CAMDisabledModeOverlayView)_disabledModeOverlayView;
- (CAMDisabledPreviewController)_disabledPreviewController;
- (CAMDynamicShutterControl)_dynamicShutterControl;
- (CAMElapsedTimeView)_elapsedTimeView;
- (CAMElapsedTimeView)_targetElapsedTimeView;
- (CAMExternalStorage)_connectedStorage;
- (CAMExternalStorageMonitor)_storageMonitor;
- (CAMFeedbackController)_feedbackController;
- (CAMFilterButton)_filterButton;
- (CAMFilterNameBadge)_filterNameBadge;
- (CAMFlashBadge)_flashBadge;
- (CAMFlashButton)_flashButton;
- (CAMFlipButton)_flipButton;
- (CAMFocusLockBadge)_focusAndExposureLockBadge;
- (CAMFullscreenViewfinder)_fullscreenViewfinder;
- (CAMGridView)_gridView;
- (CAMHDRBadge)_HDRBadge;
- (CAMHDRButton)_HDRButton;
- (CAMHorizonLevelView)_horizonLevelView;
- (CAMIdleController)_idleController;
- (CAMImageWell)_imageWell;
- (CAMIntensityButton)_intensityButton;
- (CAMKeepAliveController)_keepAliveController;
- (CAMLevelIndicatorView)_levelView;
- (CAMLevelViewModel)_levelViewModel;
- (CAMLibrarySelectionController)_librarySelectionController;
- (CAMLivePhotoBadge)_livePhotoBadge;
- (CAMLivePhotoButton)_livePhotoButton;
- (CAMLocationController)_locationController;
- (CAMMachineReadableCodeLoggingController)_machineReadableCodeLoggingController;
- (CAMMessagesPhotosButton)_photosButton;
- (CAMMetalContext)_metalContext;
- (CAMModeDial)_modeDial;
- (CAMMotionController)_motionController;
- (CAMMutableStillImageCaptureRequest)_currentStillImageCaptureMomentSettings;
- (CAMOverlayServiceConnection)_overlayServiceConnection;
- (CAMPanoramaViewController)_panoramaViewController;
- (CAMPhysicalCaptureNotifier)_cameraCaseShutterNotifier;
- (CAMPortraitModeInstructionLabel)_portraitModeInstructionLabel;
- (CAMPortraitModeInstructionLabel)_targetPortraitModeInstructionLabel;
- (CAMPowerController)_powerController;
- (CAMPreciseTimer)_currentBurstTimer;
- (CAMPreventConnectionHandoverAssertionController)_preventConnectionHandoverAssertionController;
- (CAMPreviewViewController)_previewViewController;
- (CAMProminentObjectManager)_prominentObjectManager;
- (CAMQRCodeInstructionLabel)_qrCodeInstructionLabel;
- (CAMQRCodeInstructionLabel)_targetQRCodeInstructionLabel;
- (CAMRemoteShutterController)_remoteShutterController;
- (CAMShallowDepthOfFieldBadge)_shallowDepthOfFieldBadge;
- (CAMSharedLibraryBadge)_sharedLibraryBadge;
- (CAMSharedLibraryButton)_sharedLibraryButton;
- (CAMStorageController)_storageController;
- (CAMTimelapseController)_timelapseController;
- (CAMTimerButton)_timerButton;
- (CAMTimerCache)_timerCache;
- (CAMTimerIndicatorView)_timerIndicatorView;
- (CAMTopBar)_topBar;
- (CAMTorchPatternController)_torchPatternController;
- (CAMUtilityBar)_utilityBar;
- (CAMVideoConfigurationStatusIndicator)_targetVideoConfigurationStatusIndicator;
- (CAMVideoConfigurationStatusIndicator)_videoConfigurationStatusIndicator;
- (CAMViewfinderReviewButtonSource)reviewButtonSource;
- (CAMViewfinderTipManager)_tipManager;
- (CAMViewfinderTransitionController)_transitionController;
- (CAMViewfinderTransitionable)_viewfinderTransitionable;
- (CAMViewfinderViewController)initWithCaptureController:(id)a3 captureConfiguration:(id)a4 conflictingControlConfiguration:(id)a5 locationController:(id)a6 motionController:(id)a7 timelapseController:(id)a8 keepAliveController:(id)a9 remoteShutterController:(id)a10 powerController:(id)a11 cameraRollController:(id)a12 librarySelectionController:(id)a13 callStatusMonitor:(id)a14 storageController:(id)a15 usingEmulationMode:(int64_t)a16 initialLayoutStyle:(int64_t)a17 options:(int64_t)a18;
- (CAMViewfinderViewControllerCameraRollTestingDelegate)cameraRollControllerTestDelegate;
- (CAMViewfinderViewControllerStillImageCaptureRequestTestingDelegate)stillImageCaptureTestDelegate;
- (CAMViewfinderViewControllerUnlockDelegate)unlockDelegate;
- (CAMViewfinderViewControllerVideoCaptureRequestTestingDelegate)videoCaptureTestDelegate;
- (CAMZoomControl)_zoomControl;
- (CAMZoomSlider)_zoomSlider;
- (CEKAnimationSequence)_smartStyleOnboardingControlDrawerAnimationSequence;
- (CEKApertureButton)_apertureButton;
- (CEKApertureSlider)_portraitApertureSlider;
- (CEKLightingControl)_lightingControl;
- (CEKLightingNameBadge)_lightingNameBadge;
- (CEKSlider)_portraitIntensitySlider;
- (CEKWheelScrubberView)_filterScrubberView;
- (CGAffineTransform)customPreviewViewTransform;
- (CGPoint)prominentObjectManagerPointOfInterestInNormalizedDeviceSpace:(id)a3;
- (CGRect)cameraRollControllerPreviewSourceRect:(id)a3;
- (CGRect)cameraRollControllerSourceAssetRect:(id)a3;
- (CGRect)reviewUsingOverlayFrame;
- (CGRect)sourceRectForPopoverActionPicker:(id)a3;
- (CGSize)_desiredPreviewSizeForStillImageCapture;
- (CGSize)_portraitOrientedSizeForSize:(CGSize)a3;
- (CUCaptureController)_captureController;
- (CUShutterButton)_shutterButton;
- (CUShutterButton)_stillDuringVideoButton;
- (NSArray)_cachedAppClipCodeResults;
- (NSArray)_cachedQRCodeResults;
- (NSArray)_cachedTextRegionResults;
- (NSArray)_filterTypes;
- (NSDate)_currentStillImageCaptureTextAnalysisEndDate;
- (NSDate)_currentStillImageCaptureTextAnalysisStateDate;
- (NSDate)_currentTextAnalysisDetectionEndDate;
- (NSDate)_lastTimerIndicatorFaceUpdateDate;
- (NSDictionary)_overlayControls;
- (NSMutableArray)_accessibilityHUDManagers;
- (NSMutableArray)_semanticStyles;
- (NSMutableDictionary)_descriptionOverlayViewByMode;
- (NSMutableDictionary)_exposureBiasesByMode;
- (NSMutableDictionary)_preferredControlToOpenInDrawerForMode;
- (NSMutableSet)_openHalfPressSpotlightControls;
- (NSSet)availableCaptureModes;
- (NSString)_currentStillImageCaptureTextAnalysisIdentifier;
- (PUReviewScreenDoneButton)_doneButton;
- (UIAlertController)_diskSpaceAlertController;
- (UIAlertController)_flashOrTorchUnavailableAlertController;
- (UIButton)_reviewButton;
- (UIControl)_primaryShutterControl;
- (UILongPressGestureRecognizer)_sharedLibraryLongPressGestureRecognizer;
- (UIPanGestureRecognizer)_cameraRollSwipeUpGestureRecognizer;
- (UIPinchGestureRecognizer)_zoomPinchGestureRecognizer;
- (UISwipeGestureRecognizer)_nextFilterGestureRecognizer;
- (UISwipeGestureRecognizer)_nextModeGestureRecognizer;
- (UISwipeGestureRecognizer)_previousFilterGestureRecognizer;
- (UISwipeGestureRecognizer)_previousModeGestureRecognizer;
- (UISwipeGestureRecognizer)_smartStylesSwipeLeftGestureRecognizer;
- (UISwipeGestureRecognizer)_smartStylesSwipeRightGestureRecognizer;
- (UISwipeGestureRecognizer)_swipeDownGestureRecognizer;
- (UISwipeGestureRecognizer)_swipeUpGestureRecognizer;
- (UIView)_captureAnimationPreviewOverlay;
- (UIView)_textInteractionBackground;
- (UIView)customOverlayView;
- (VKCaptureTextAnalyzer)_imageAnalyzer;
- (double)_cachedVideoZoomFactor;
- (double)_currentMaximumZoomFactor;
- (double)_defaultZoomFactorForGraphConfiguration:(id)a3;
- (double)_defaultZoomFactorForGraphConfiguration:(id)a3 captureOrientation:(int64_t)a4;
- (double)_exposureBiasForMode:(int64_t)a3 trueVideoEnabled:(BOOL)a4;
- (double)_highlightClippingValue;
- (double)_lastDefaultApertureValue;
- (double)_minimumExecutionTimeForChangeToGraphConfiguration:(id)a3 fromGraphConfiguration:(id)a4;
- (double)_portraitModeApertureValue;
- (double)_portraitModeIntensityValue;
- (double)_shadowClippingValue;
- (double)_trueVideoSourceZoomFactor;
- (double)_videoZoomFactorAtDynamicShutterStart;
- (double)_videoZoomFactorAtPinchStart;
- (double)_zoomFactorForSelectButtonDisplayZoomFactor:(double)a3 device:(int64_t)a4;
- (double)_zoomFactorForZoomSliderValue:(double)a3;
- (double)_zoomSliderValueForZoomFactor:(double)a3;
- (double)maximumVideoRecordingDuration;
- (double)timeIntervalForDuration:(int64_t)a3;
- (id)_acceptableSizeMRCResultsFromResults:(id)a3;
- (id)_allControlDrawerTypes;
- (id)_cameraRollControllerAction;
- (id)_controlTypesForGraphConfiguration:(id)a3;
- (id)_currentCaptureFiltersForBurst:(BOOL)a3;
- (id)_currentSmartStyle;
- (id)_debugEnabledDescriptionForControl:(id)a3 withReason:(id)a4;
- (id)_debugStringForApplicationDeactivationReason:(int)a3;
- (id)_debugStringForDisabledModeReasons:(id)a3;
- (id)_disabledModeReasonsForGraphConfiguration:(id)a3 callActive:(BOOL)a4;
- (id)_embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:(id)a3;
- (id)_enabledPhotoFormatsForMode:(int64_t)a3 device:(int64_t)a4;
- (id)_filterScrubberLayerContents;
- (id)_filteredTextResults:(id)a3;
- (id)_flashOrTorchDisabledMessageForCurrentPowerPressure;
- (id)_generateAnalyticsCaptureEventForTimelapse;
- (id)_generateAnalyticsCaptureEventWithRequest:(id)a3 burst:(BOOL)a4;
- (id)_graphConfigurationForChangeToMode:(int64_t)a3 device:(int64_t)a4 fromGraphConfiguration:(id)a5;
- (id)_imageAnalysisButton;
- (id)_imageAnalysisInstructionLabel;
- (id)_initialUpdatesForControls:(id)a3;
- (id)_legacyOverlayControls;
- (id)_originalCaptureFiltersForMode:(int64_t)a3 devicePosition:(int64_t)a4;
- (id)_overlayValuesForControls:(id)a3;
- (id)_panoramaCaptureRequestWithCurrentSettings;
- (id)_previewFiltersForMode:(int64_t)a3 device:(int64_t)a4 wantsPhotoModePortraitEffect:(BOOL)a5;
- (id)_primaryControlStatusIndicatorTypes;
- (id)_referenceStyleForSmartStyle:(id)a3;
- (id)_secondaryControlStatusIndicatorTypes;
- (id)_semanticStyleForCapture;
- (id)_semanticStyleForCaptureWithSupport:(unint64_t)a3;
- (id)_semanticStyleForPreview;
- (id)_semanticStyleForPreviewWithSupport:(unint64_t)a3;
- (id)_stillImageCaptureRequestForTextAnalysis;
- (id)_stillImageCaptureRequestWithCurrentSettingsAsBurst:(BOOL)a3 maximumLength:(int64_t)a4;
- (id)_supportedCaptureModes;
- (id)_targetFilterScrubberView;
- (id)_targetLightingControl;
- (id)_textInteractionInsert;
- (id)_videoCaptureRequestWithCurrentSettings;
- (id)cameraRollControllerImageForReveal:(id)a3;
- (id)currentContentSize;
- (id)modesForModeDial:(id)a3;
- (id)modesForModeSelector:(id)a3;
- (id)viewfinderView;
- (int)_lastConfigurationRequestID;
- (int64_t)_aspectRatioCropForMode:(int64_t)a3 devicePosition:(int64_t)a4;
- (int64_t)_aspectRatioForMode:(int64_t)a3 devicePosition:(int64_t)a4;
- (int64_t)_autorotationStyleForLayoutStyle:(int64_t)a3;
- (int64_t)_availableDefaultCaptureMode;
- (int64_t)_bottomBarBackgroundStyleForMode:(int64_t)a3;
- (int64_t)_cachedSharedLibraryTimerState;
- (int64_t)_cinematicConfigurationOverride;
- (int64_t)_configuredDevice;
- (int64_t)_configuredMode;
- (int64_t)_currentCaptureRequestOrigin;
- (int64_t)_currentDevice;
- (int64_t)_currentDevicePosition;
- (int64_t)_currentHalfPressSpotlight;
- (int64_t)_currentMaxPhotoResolution;
- (int64_t)_currentMode;
- (int64_t)_currentPhotoEncodingBehavior;
- (int64_t)_currentRawFileFormatEncodingBehavior;
- (int64_t)_currentVideoConfiguration;
- (int64_t)_currentlyPressedButton;
- (int64_t)_desiredFlashMode;
- (int64_t)_desiredHDRMode;
- (int64_t)_desiredLivePhotoMode;
- (int64_t)_desiredMacroMode;
- (int64_t)_desiredPhotoResolution;
- (int64_t)_desiredProResVideoMode;
- (int64_t)_desiredRAWMode;
- (int64_t)_desiredTorchMode;
- (int64_t)_desiredVideoStabilizationMode;
- (int64_t)_deviceForSelectButtonZoomDisplayZoomFactor:(double)a3;
- (int64_t)_diskSpaceAlertType;
- (int64_t)_displayedFlashModeForMode:(int64_t)a3 flashActive:(BOOL *)a4;
- (int64_t)_effectFilterTypeForMode:(int64_t)a3;
- (int64_t)_elapsedTimeViewIdleBackgroundStyle;
- (int64_t)_filterTypeForItemIndex:(int64_t)a3;
- (int64_t)_flashAndHDRConflictingControl;
- (int64_t)_focusAndExposureLockBadgeTypeForCurrentState;
- (int64_t)_homeIndicatorAutoHideOrientation;
- (int64_t)_internalAutorotationStyle;
- (int64_t)_itemIndexForFilterType:(int64_t)a3;
- (int64_t)_lastCapturedFilterTypeForMode:(int64_t)a3;
- (int64_t)_lastMRCResultsCount;
- (int64_t)_lastZoomInteractionType;
- (int64_t)_layoutStyle;
- (int64_t)_lightingControlLayoutPositionForGraphConfiguration:(id)a3;
- (int64_t)_lowLightModeForMode:(int64_t)a3 captureMode:(int64_t)a4 device:(int64_t)a5 isBurst:(BOOL)a6;
- (int64_t)_mappedVideoConfigurationForVideoConfiguration:(int64_t)a3 proResVideoMode:(int64_t)a4 outputToExternalStorage:(BOOL)a5;
- (int64_t)_maximumBurstLengthForTimer;
- (int64_t)_nextFramerateVideoConfigurationForVideoConfiguration:(int64_t)a3 videoEncodingBehavior:(int64_t)a4;
- (int64_t)_nextResolutionVideoConfigurationForVideoConfiguration:(int64_t)a3 videoEncodingBehavior:(int64_t)a4;
- (int64_t)_overCapturePreviewStatus;
- (int64_t)_persistenceOptionsForBehavior:(unint64_t)a3 allowingOptionalLocalPersistence:(BOOL)a4;
- (int64_t)_photoModeEffectFilterType;
- (int64_t)_portraitModeEffectFilterType;
- (int64_t)_portraitModeLightingEffectType;
- (int64_t)_preferredControlToOpenInDrawerForMode:(int64_t)a3;
- (int64_t)_primaryInstructionLabelForGraphConfiguration:(id)a3;
- (int64_t)_resolvedFlashMode;
- (int64_t)_resolvedHDRMode;
- (int64_t)_resolvedLivePhotoMode;
- (int64_t)_resolvedLowLightMode;
- (int64_t)_resolvedMacroMode;
- (int64_t)_resolvedPhotoResolution;
- (int64_t)_resolvedRAWMode;
- (int64_t)_resolvedTimerDuration;
- (int64_t)_resolvedTorchMode;
- (int64_t)_resolvedTorchModeForGraphConfiguration:(id)a3;
- (int64_t)_resolvedVideoStabilizationMode;
- (int64_t)_resolvedVideoStabilizationModeForVideoConfiguration:(int64_t)a3;
- (int64_t)_sanitizedLightingTypeForMode:(int64_t)a3 device:(int64_t)a4;
- (int64_t)_sanitizedVideoConfigurationForMode:(int64_t)a3 device:(int64_t)a4;
- (int64_t)_secondaryInstructionLabelForGraphConfiguration:(id)a3;
- (int64_t)_shallowDepthOfFieldStatus;
- (int64_t)_shutterButtonModeForCameraMode:(int64_t)a3 isCapturing:(BOOL)a4;
- (int64_t)_slomoConfigurationOverride;
- (int64_t)_squareModeEffectFilterType;
- (int64_t)_stagePreviewStatus;
- (int64_t)_stereoCaptureStatus;
- (int64_t)_temporaryPersistenceOptionsForBehavior:(unint64_t)a3;
- (int64_t)_topBarBackgroundStyleForMode:(int64_t)a3 capturing:(BOOL)a4;
- (int64_t)_topBarStyleForGraphConfiguration:(id)a3 capturing:(BOOL)a4;
- (int64_t)_trueVideoDestinationCaptureMode;
- (int64_t)_trueVideoSourceCaptureMode;
- (int64_t)_videoConfigurationForImagePickerQualityType:(int64_t)a3;
- (int64_t)_videoConfigurationFramerateForGraphConfiguration:(id)a3;
- (int64_t)_videoConfigurationOverride;
- (int64_t)_videoConfigurationResolutionForGraphConfiguration:(id)a3;
- (int64_t)_visibleSuggestionButtonForGraphConfiguration:(id)a3;
- (int64_t)_zoomControlLayoutPositionForGraphConfiguration:(id)a3;
- (int64_t)cameraRollControllerPreferredPresentationOrientation:(id)a3;
- (int64_t)configuredCaptureDevice;
- (int64_t)configuredCaptureMode;
- (int64_t)emulationMode;
- (int64_t)expandedControlTypeForExpandingDrawerInFullscreenViewfinder:(id)a3;
- (int64_t)imagePickerVideoConfiguration;
- (int64_t)messagesTransitionState;
- (int64_t)photoModeAspectRatioCrop;
- (int64_t)preferredWhitePointAdaptivityStyle;
- (unint64_t)_catCount;
- (unint64_t)_currentSemanticStyleSupport;
- (unint64_t)_desiredLowLightControlMode;
- (unint64_t)_dogCount;
- (unint64_t)_faceCount;
- (unint64_t)_lastPerformedShutterButtonFeedbackType;
- (unint64_t)_lastShutterButtonTouchDownTime;
- (unint64_t)_lowLightConflicts;
- (unint64_t)_nextModeSwitchDirectionForLayoutStyle:(int64_t)a3;
- (unint64_t)_photoFormatConflicts;
- (unint64_t)_previewConfigurationForMode:(int64_t)a3 devicePosition:(int64_t)a4 videoThumbnailOutputEnabled:(BOOL)a5;
- (unint64_t)_previousModeSwipeDirectionForLayoutStyle:(int64_t)a3;
- (unint64_t)_reasonsToDisableCreativeCameraButton;
- (unint64_t)_reasonsToDisableShutterButton;
- (unint64_t)_remainingCaptureTimerTicks;
- (unint64_t)_resolvedLowLightControlMode;
- (unint64_t)_selectedSemanticStyleIndex;
- (unint64_t)_shutterButtonFeedbackForCurrentConfiguration;
- (unint64_t)_smartStyleSystemStyleIndex;
- (unint64_t)_supportedInterfaceOrientationsForLayoutStyle:(int64_t)a3 wantsTextAnalysis:(BOOL)a4;
- (unint64_t)feedbackTypeForImageAnalysisInteraction:(id)a3;
- (unint64_t)persistenceBehavior;
- (unint64_t)preferredScreenEdgesDeferringSystemGestures;
- (unint64_t)supportedInterfaceOrientations;
- (unint64_t)zoomControl:(id)a3 accessoryButtonTapIndexInDisplayZoomFactors:(id)a4;
- (void)_acknowledgeDescriptionOverlayViewForMode:(int64_t)a3;
- (void)_apertureSliderDidChangeApertureValue:(id)a3;
- (void)_applyAutorotationCorrectingTransformForOrientation:(int64_t)a3;
- (void)_applySelectedEffectFilterType:(int64_t)a3;
- (void)_applyTransformsForAutorotationStyle:(int64_t)a3;
- (void)_attemptShutterPressWithBlock:(id)a3;
- (void)_attemptShutterReleaseWithBlock:(id)a3;
- (void)_availableDefaultCaptureMode;
- (void)_beginCapturingBurst;
- (void)_beginDisablingInterfaceAutorotation;
- (void)_cancelCTMCapture;
- (void)_cancelCaptureAnimation;
- (void)_captureControllerDidOutputMRC;
- (void)_captureOrientationChanged:(id)a3;
- (void)_captureRequest:(id)a3 didCompleteVideoCaptureWithResponse:(id)a4 error:(id)a5;
- (void)_changeToGraphConfiguration:(id)a3 zoomFactor:(double)a4 fromGraphConfiguration:(id)a5;
- (void)_changeToZoomFactor:(double)a3 rampDuration:(double)a4 zoomRampTuning:(int64_t)a5 shouldAnimate:(BOOL)a6;
- (void)_changeToZoomFactor:(double)a3 rampDuration:(double)a4 zoomRampTuning:(int64_t)a5 shouldAnimate:(BOOL)a6 updateOverlay:(BOOL)a7;
- (void)_clearFilterScrubberLayerContentsIfNotNeededFromCallsite:(id)a3;
- (void)_closeViewfinderForChangeFromMode:(int64_t)a3 toMode:(int64_t)a4 fromDevice:(int64_t)a5 toDevice:(int64_t)a6;
- (void)_collapseExpandedButtonsAnimated:(BOOL)a3;
- (void)_commitCTMCaptureWithType:(int64_t)a3;
- (void)_configureZoomControlForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_createApertureButtonIfNecessary;
- (void)_createBurstIndicatorViewIfNecessary;
- (void)_createCameraCaseShutterNotifierIfNeeded;
- (void)_createCameraRollSwipeUpGestureRecognizerIfNecessary;
- (void)_createCommonControlsIfNecessary;
- (void)_createCommonGestureRecognizersIfNecessary;
- (void)_createCreativeCameraButtonIfNecessary;
- (void)_createDoneButtonIfNecessary;
- (void)_createElapsedTimeViewIfNecessary;
- (void)_createFilterButtonIfNecessary;
- (void)_createFilterNameBadgeIfNecessary;
- (void)_createFilterScrubberGestureRecognizersIfNecessary;
- (void)_createFilterScrubberViewIfNecessary;
- (void)_createFlashBadgeIfNecessary;
- (void)_createFlashButtonIfNecessary;
- (void)_createFlipButtonIfNecessary;
- (void)_createFocusAndExposureLockBadgeIfNecessary;
- (void)_createGridViewIfNecessary;
- (void)_createHDRBadgeIfNecessary;
- (void)_createHDRButtonIfNecessary;
- (void)_createHorizonLevelViewIfNecessary;
- (void)_createImageAnalysisButtonIfNeeded;
- (void)_createImageAnalysisInstructionLabelIfNeeded;
- (void)_createImageWellIfNecessary;
- (void)_createIntensityButtonIfNecessary;
- (void)_createLevelViewIfNecessary;
- (void)_createLightingControlIfNecessary;
- (void)_createLightingNameBadgeIfNecessary;
- (void)_createLivePhotoBadgeIfNecessary;
- (void)_createLivePhotoButtonIfNecessary;
- (void)_createMetalContextIfNecessary;
- (void)_createModeDialIfNecessary;
- (void)_createModeSpecificControlsForConfiguration:(id)a3;
- (void)_createOrDestroyHDRBadgeIfNecessary;
- (void)_createOrDestroyHDRButtonIfNecessary;
- (void)_createOrDestroyHorizonLevelViewIfNecessary;
- (void)_createOrDestroyLevelViewIfNecessary;
- (void)_createOrDestroyLevelViewModelIfNecessary;
- (void)_createOrDestroySharedLibraryBadgeIfNecessary;
- (void)_createOrDestroySharedLibraryButtonIfNecessary;
- (void)_createOrDestroySharedLibraryControlsIfNecessary;
- (void)_createPanoramaControlsIfNecessary;
- (void)_createPanoramaViewControllerIfNecessary;
- (void)_createPhotosButtonIfNecessary;
- (void)_createPhysicalCaptureInteractionIfNeeded;
- (void)_createPortraitApertureSliderIfNecessary;
- (void)_createPortraitIntensitySliderIfNecessary;
- (void)_createPortraitModeControlsIfNecessary;
- (void)_createPortraitModeInstructionLabelIfNecessary;
- (void)_createQRCodeInstructionLabelIfNecessary;
- (void)_createReviewButtonIfNecessary;
- (void)_createShallowDepthOfFieldBadgeIfNecessary;
- (void)_createShutterButtonIfNecessary;
- (void)_createStillDuringVideoButtonIfNecessary;
- (void)_createStillImageControlsIfNecessary;
- (void)_createSwipeToModeSwitchGestureRecognizersIfNecessary;
- (void)_createTimerButtonIfNecessary;
- (void)_createTimerIndicatorViewIfNecessary;
- (void)_createUtilityBarIfNecessary;
- (void)_createVerticalSwipeGestureRecognizersIfNecessary;
- (void)_createVideoConfigurationStatusIndicatorIfNecessary;
- (void)_createVideoControlsIfNecessary;
- (void)_createZoomControlIfNecessary;
- (void)_createZoomPinchGestureRecognizerIfNecessary;
- (void)_createZoomSliderIfNecessary;
- (void)_destroyFilterScrubberViewIfNecessary;
- (void)_destroyGestureRecognizersRequiringStandardControls;
- (void)_destroyGridViewIfNecessary;
- (void)_destroyHDRBadgeIfNecessary;
- (void)_destroyHDRButtonIfNecessary;
- (void)_destroyHorizonLevelViewIfNecessary;
- (void)_destroyLevelViewIfNecessary;
- (void)_deviceOrientationChanged:(id)a3;
- (void)_didChangeToGraphConfiguration:(id)a3 forDesiredConfiguration:(id)a4 requestID:(int)a5;
- (void)_dismissDescriptionOverlayView:(id)a3 withDuration:(double)a4;
- (void)_dismissDiskSpaceAlertViewAnimated:(BOOL)a3;
- (void)_dismissDockedMRCButtonIfNeededAnimated:(BOOL)a3;
- (void)_dismissDocumentScanningButton;
- (void)_dismissFlashOrTorchUnavailableAlertViewAnimated:(BOOL)a3;
- (void)_dismissOverlays;
- (void)_embedAllControlsWithLayoutStyle:(int64_t)a3;
- (void)_embedApertureButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedBurstIndicatorViewWithLayoutStyle:(int64_t)a3;
- (void)_embedCreativeCameraButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedDescriptionOverlayView:(id)a3 forMode:(int64_t)a4;
- (void)_embedDisabledModeOverlayView:(id)a3;
- (void)_embedDoneButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedElapsedTimeViewWithLayoutStyle:(int64_t)a3;
- (void)_embedFilterButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedFilterNameBadgeWithLayoutStyle:(int64_t)a3;
- (void)_embedFilterScrubberViewWithLayoutStyle:(int64_t)a3;
- (void)_embedFlashBadgeWithLayoutStyle:(int64_t)a3;
- (void)_embedFlashButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedFlipButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedFocusAndExposureLockBadgeWithLayoutStyle:(int64_t)a3;
- (void)_embedGridViewWithLayoutStyle:(int64_t)a3;
- (void)_embedHDRBadgeWithLayoutStyle:(int64_t)a3;
- (void)_embedHDRButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedHorizonLevelView;
- (void)_embedImageWellWithLayoutStyle:(int64_t)a3;
- (void)_embedIntensityButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedLevelViewWithLayoutStyle:(int64_t)a3;
- (void)_embedLightingControlWithLayoutStyle:(int64_t)a3;
- (void)_embedLightingNameBadgeWithLayoutStyle:(int64_t)a3;
- (void)_embedLivePhotoBadgeWithLayoutStyle:(int64_t)a3;
- (void)_embedLivePhotoButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedModeDialWithLayoutStyle:(int64_t)a3;
- (void)_embedPanoramaViewWithLayoutStyle:(int64_t)a3;
- (void)_embedPhotosButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedPortraitApertureSliderWithLayoutStyle:(int64_t)a3;
- (void)_embedPortraitIntensitySliderWithLayoutStyle:(int64_t)a3;
- (void)_embedPortraitModeInstructionLabelWithLayoutStyle:(int64_t)a3;
- (void)_embedQRCodeInstructionLabelWithLayoutStyle:(int64_t)a3;
- (void)_embedReviewButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedShallowDepthOfFieldBadgeWithLayoutStyle:(int64_t)a3;
- (void)_embedSharedLibraryBadgeWithLayoutStyle:(int64_t)a3;
- (void)_embedShutterButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedStillDuringVideoButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedTimerButtonWithLayoutStyle:(int64_t)a3;
- (void)_embedTimerIndicatorViewWithLayoutStyle:(int64_t)a3;
- (void)_embedUtilityBarWithLayoutStyle:(int64_t)a3;
- (void)_embedVideoConfigurationStatusIndicatorWithLayoutStyle:(int64_t)a3;
- (void)_embedZoomControlWithLayoutStyle:(int64_t)a3;
- (void)_embedZoomSliderWithLayoutStyle:(int64_t)a3;
- (void)_enableProactiveSuggestionsAnimated:(BOOL)a3;
- (void)_endDisablingInterfaceAutorotation;
- (void)_ensureSensitiveContentHidden;
- (void)_fallbackToValidProResVideoConfigurationIfNeeded;
- (void)_forceHideBadgesAnimated:(BOOL)a3;
- (void)_handleApertureButtonTapped:(id)a3;
- (void)_handleApplicationDidBecomeActive:(id)a3;
- (void)_handleApplicationDidEnterBackground:(id)a3;
- (void)_handleApplicationDidRemoveDeactivationReason:(id)a3;
- (void)_handleApplicationWillAddDeactivationReason:(id)a3;
- (void)_handleApplicationWillEnterForeground:(id)a3;
- (void)_handleApplicationWillResignActive:(id)a3;
- (void)_handleAutoMacroButtonTapped:(id)a3;
- (void)_handleBurstTimerFired:(id)a3;
- (void)_handleCallStatusMonitorDidChangeCallActive:(id)a3;
- (void)_handleCameraRollSwipeUpGestureRecognizer:(id)a3;
- (void)_handleContentSizeCategoryDidChange:(id)a3;
- (void)_handleCreativeCameraButtonPressed:(id)a3;
- (void)_handleCreativeCameraButtonReleased:(id)a3;
- (void)_handleCreativeCameraButtonTouchAttemptedWhileDisabled:(id)a3;
- (void)_handleDepthEffectSuggestionButtonTapped:(id)a3;
- (void)_handleDisabledShutterTap;
- (void)_handleDismissLiftedTextGestureRecognizer:(id)a3;
- (void)_handleDocumentScanningPillPress;
- (void)_handleDoneButtonReleased:(id)a3;
- (void)_handleExposureSliderDidChangeValue:(id)a3;
- (void)_handleFilterButtonTapped:(id)a3;
- (void)_handleFlashButtonChangedFlashMode;
- (void)_handleFlashIndicator;
- (void)_handleFlashIndicatorChangedMode:(id)a3;
- (void)_handleFlashIndicatorLongPressed:(id)a3;
- (void)_handleFlipButtonReleased:(id)a3;
- (void)_handleFlipButtonTouchDown:(id)a3;
- (void)_handleFreeResourcesLabelTapped:(id)a3;
- (void)_handleGeneralCaptureControllerSuspension;
- (void)_handleHDRButtonChangedHDRMode;
- (void)_handleHDRIndicator;
- (void)_handleImageAnalysisButtonTapped:(id)a3;
- (void)_handleImageWellPressed:(id)a3;
- (void)_handleImageWellReleased:(id)a3;
- (void)_handleIntensityButtonTapped:(id)a3;
- (void)_handleIntensitySliderDidChangeValue:(id)a3;
- (void)_handleLivePhotoButtonChangedLivePhotoMode;
- (void)_handleLivePhotoIndicator;
- (void)_handleLowLightSliderDidChangeValue:(id)a3;
- (void)_handleModeDialTouchDown:(id)a3;
- (void)_handleModeDialValueChanged:(id)a3;
- (void)_handleNightModeIndicator;
- (void)_handlePhotoFormatPickerChangedPhotoFormat:(id)a3;
- (void)_handlePhotoFormatPickerLongPressed:(id)a3;
- (void)_handlePhotoFormatPickerTapped;
- (void)_handlePhotoVideoModeSwitchValueChanged:(id)a3;
- (void)_handlePhotosButtonReleased:(id)a3;
- (void)_handlePhysicalButtonCancelled:(int64_t)a3;
- (void)_handlePhysicalButtonPressed:(int64_t)a3;
- (void)_handlePhysicalButtonReleased:(int64_t)a3;
- (void)_handlePhysicalCaptureInteractionDidChangePhase:(unint64_t)a3 forButton:(int64_t)a4;
- (void)_handlePillPressForCurrentMRCAction;
- (void)_handleProResIndicator;
- (void)_handleRAWIndicator;
- (void)_handleSceneDidEnterBackground:(id)a3;
- (void)_handleSemanticStyleControlDidChangeValue:(id)a3;
- (void)_handleSessionWasPrewarmed:(id)a3;
- (void)_handleSharedLibraryButton;
- (void)_handleSharedLibraryIndicator;
- (void)_handleShutterButtonActionWithEventTriggerDescription:(id)a3;
- (void)_handleShutterButtonCancelled:(id)a3;
- (void)_handleShutterButtonDragEnter:(id)a3;
- (void)_handleShutterButtonDragExited:(id)a3;
- (void)_handleShutterButtonPressed:(id)a3;
- (void)_handleShutterButtonReleased:(id)a3;
- (void)_handleShutterButtonReleased:(id)a3 fromDragExit:(BOOL)a4;
- (void)_handleSmartStyleIntensitySliderChangedValue:(double)a3;
- (void)_handleSmartStylePadValueChanged:(CGPoint)a3;
- (void)_handleSmartStylePickerSwipe:(id)a3;
- (void)_handleSmartStyleResetButton;
- (void)_handleSmartStyleShutterButtonPressed:(id)a3;
- (void)_handleSmartStyleShutterButtonReleased:(id)a3;
- (void)_handleSpatialCaptureButtonTapped:(id)a3;
- (void)_handleSpotlightSmartStyleStatusIndicatorTapped;
- (void)_handleSwipeDownGestureRecognizer:(id)a3;
- (void)_handleSwipeToNextFilterRecognizer:(id)a3;
- (void)_handleSwipeToPreviousFilterRecognizer:(id)a3;
- (void)_handleSwipeUpGestureRecognizer:(id)a3;
- (void)_handleTextAnalysisStillImageResponse:(id)a3 error:(id)a4 forRequest:(id)a5;
- (void)_handleTimelapseLowDiskSpaceNotification:(id)a3;
- (void)_handleTimerButtonChangedTimerDuration;
- (void)_handleTouchDownForZoomControl:(id)a3;
- (void)_handleTouchDownForZoomSlider:(id)a3;
- (void)_handleUserChangedProResMode:(int64_t)a3;
- (void)_handleUserChangedRAWMode:(int64_t)a3;
- (void)_handleUserChangedSpatialVideoEnabled:(BOOL)a3;
- (void)_handleUserChangedToApertureValue:(double)a3;
- (void)_handleUserChangedToAspectRatioCrop:(int64_t)a3;
- (void)_handleUserChangedToDevice:(int64_t)a3;
- (void)_handleUserChangedToExposureSliderBias:(double)a3 updateSystemOverlayValues:(BOOL)a4;
- (void)_handleUserChangedToFlashMode:(int64_t)a3;
- (void)_handleUserChangedToHDRMode:(int64_t)a3;
- (void)_handleUserChangedToLivePhotoMode:(int64_t)a3;
- (void)_handleUserChangedToMode:(int64_t)a3;
- (void)_handleUserChangedToMode:(int64_t)a3 device:(int64_t)a4;
- (void)_handleUserChangedToMode:(int64_t)a3 device:(int64_t)a4 zoomFactor:(double)a5;
- (void)_handleUserChangedToNightMode:(unint64_t)a3;
- (void)_handleUserChangedToPhotoFormat:(id)a3;
- (void)_handleUserChangedToSharedLibraryMode:(int64_t)a3;
- (void)_handleUserChangedToVideoConfiguration:(int64_t)a3;
- (void)_handleUserChangedVideoStabilizationMode:(int64_t)a3;
- (void)_handleVideoStabilizationIndicator;
- (void)_handleZoomPinchGestureRecognizer:(id)a3;
- (void)_hideBurstIndicatorView;
- (void)_hideControlsForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_hideUtilityBarAnimated:(BOOL)a3;
- (void)_imageWellSetContentHidden:(BOOL)a3;
- (void)_indicateCaptureTimerProgressUsingTorch;
- (void)_initiateCTMCaptureWithCurrentSettingsAtSystemTime:(unint64_t)a3;
- (void)_layoutViewfinderForShowingFilterScrubber:(BOOL)a3 animated:(BOOL)a4;
- (void)_limitZoomRangeForRecordingIfNecessary;
- (void)_openViewfinderForAllModeAndDeviceChangeReasons;
- (void)_pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:(id)a3 isShowingCameraRoll:(BOOL)a4;
- (void)_performCaptureAnimation;
- (void)_performCaptureAnimationWithDuration:(double)a3;
- (void)_performCaptureAnimationWithDuration:(double)a3 curve:(id)a4 color:(id)a5 fadeOut:(BOOL)a6;
- (void)_performChangeFromGraphConfiguration:(id)a3 toGraphConfiguration:(id)a4 zoomFactor:(double)a5 deferIfConfigurationInFlight:(BOOL)a6;
- (void)_populateZoomForCaptureEvent:(id)a3;
- (void)_prepareDeferredProcessingIfNeeded;
- (void)_preparePhotoOutputForExpectedPhotoResolution;
- (void)_prepareTopBarForOrientationChangeDuringConfiguration;
- (void)_presentCameraRollViewControllerAnimated:(BOOL)a3 interactive:(BOOL)a4;
- (void)_presentCameraRollViewControllerIfPossibleAnimated:(BOOL)a3 interactive:(BOOL)a4;
- (void)_presentImageWellImage:(id)a3 uuid:(id)a4 animated:(BOOL)a5;
- (void)_previewDidStartRunning:(id)a3;
- (void)_processResults:(id)a3 completionHandler:(id)a4;
- (void)_processTextRegionResults;
- (void)_reconfigureCaptureGraphWithCurrentMode;
- (void)_remoteShutterSetZoomFactor:(double)a3;
- (void)_requestPasscodeUnlockForCameraRollController:(id)a3 forAction:(unint64_t)a4 completionBlock:(id)a5;
- (void)_requestPasscodeUnlockForDocumentScanningWithCompletionBlock:(id)a3;
- (void)_requestPasscodeUnlockWithCompletionBlock:(id)a3;
- (void)_resetExposureClipping;
- (void)_resetLowLightDurationMappingAnimated:(BOOL)a3;
- (void)_resetMachineReadableMetadataAndProcessing;
- (void)_resetObjectResults;
- (void)_resetPortraitLightingToDefaultAnimated:(BOOL)a3;
- (void)_resetPortraitModeApertureValueIfNeededForGraphConfiguration:(id)a3 zoomFactor:(double)a4;
- (void)_resetZoom;
- (void)_resolveAndUpdatePotentiallyConflictingControls:(BOOL)a3 animated:(BOOL)a4;
- (void)_resolvePotentiallyConflictingControlsForMode:(int64_t)a3 device:(int64_t)a4 resolvedFlashMode:(int64_t *)a5 resolvedHDRMode:(int64_t *)a6 resolvedLivePhotoMode:(int64_t *)a7 resolvedRAWMode:(int64_t *)a8 resolvedPhotoResolution:(int64_t *)a9;
- (void)_restoreZoomRangeAfterRecordingIfNecessary;
- (void)_rotateTopBarAndControlsToOrientation:(int64_t)a3 shouldAnimate:(BOOL)a4;
- (void)_setAccessibilityHUDManagers:(id)a3;
- (void)_setAnalyticsControlDrawerEvent:(id)a3;
- (void)_setAnalyticsSessionEvent:(id)a3;
- (void)_setAnimatingFilterScrubberDismissal:(BOOL)a3;
- (void)_setAutoResumeCancelingWithoutBackgrounding:(BOOL)a3;
- (void)_setBarcodeParsingSession:(id)a3;
- (void)_setBurstEndSoundPlaying:(BOOL)a3;
- (void)_setCachedAppClipCodeResults:(id)a3;
- (void)_setCachedQRCodeResults:(id)a3;
- (void)_setCachedTextRegionResults:(id)a3;
- (void)_setCachedVideoZoomFactor:(double)a3;
- (void)_setCaptureAnimationPreviewOverlay:(id)a3;
- (void)_setCapturingFromTimer:(BOOL)a3;
- (void)_setClosingViewfinder:(BOOL)a3;
- (void)_setConfiguredGraphConfiguration:(id)a3;
- (void)_setConnectedStorage:(id)a3;
- (void)_setCurrentBurstTimer:(id)a3;
- (void)_setCurrentGraphConfiguration:(id)a3;
- (void)_setCurrentHalfPressSpotlight:(int64_t)a3;
- (void)_setCurrentLowLightCaptureCancelable:(BOOL)a3;
- (void)_setCurrentStillImageCaptureMomentSettings:(id)a3;
- (void)_setCurrentStillImageCaptureTextAnalysisEndDate:(id)a3;
- (void)_setCurrentStillImageCaptureTextAnalysisIdentifier:(id)a3;
- (void)_setCurrentStillImageCaptureTextAnalysisStartDate:(id)a3;
- (void)_setCurrentTextAnalysisDetectionEndDate:(id)a3;
- (void)_setCurrentlyPressedButton:(int64_t)a3;
- (void)_setDesiredFlashMode:(int64_t)a3;
- (void)_setDesiredHDRMode:(int64_t)a3;
- (void)_setDesiredLivePhotoMode:(int64_t)a3;
- (void)_setDesiredLowLightControlMode:(unint64_t)a3;
- (void)_setDesiredMacroMode:(int64_t)a3;
- (void)_setDesiredPhotoFormat:(id)a3;
- (void)_setDesiredPhotoResolution:(int64_t)a3;
- (void)_setDesiredProResVideoMode:(int64_t)a3;
- (void)_setDesiredRAWMode:(int64_t)a3;
- (void)_setDesiredTorchMode:(int64_t)a3;
- (void)_setDesiredTorchMode:(int64_t)a3 animated:(BOOL)a4;
- (void)_setDesiredVideoStabilizationMode:(int64_t)a3;
- (void)_setDidAcceptCompromisedFlash:(BOOL)a3;
- (void)_setDisabledModeOverlayView:(id)a3;
- (void)_setDiskSpaceAlertController:(id)a3;
- (void)_setDocumentInScene:(BOOL)a3;
- (void)_setEffectFilterType:(int64_t)a3 forMode:(int64_t)a4;
- (void)_setExposureBias:(double)a3 forMode:(int64_t)a4;
- (void)_setExternalStorageOutputEnabled:(BOOL)a3;
- (void)_setExternalStorageOutputEnabled:(BOOL)a3 animated:(BOOL)a4;
- (void)_setFlashAndHDRConflictingControl:(int64_t)a3;
- (void)_setFlashOrTorchUnavailableAlertController:(id)a3;
- (void)_setFlashingVideoStabilizationBadge:(BOOL)a3;
- (void)_setHighlightClippingValue:(double)a3;
- (void)_setHomeIndicatorAutoHideOrientation:(int64_t)a3;
- (void)_setImageAnalyzer:(id)a3;
- (void)_setInternalAutorotationStyle:(int64_t)a3;
- (void)_setLastConfigurationRequestID:(int)a3;
- (void)_setLastDefaultApertureValue:(double)a3;
- (void)_setLastMRCResultsCount:(int64_t)a3;
- (void)_setLastPerformedShutterButtonFeedbackType:(unint64_t)a3;
- (void)_setLastShutterButtonTouchDownTime:(unint64_t)a3;
- (void)_setLastTimerIndicatorFaceUpdateDate:(id)a3;
- (void)_setLastZoomInteractionType:(int64_t)a3;
- (void)_setLayoutStyle:(int64_t)a3;
- (void)_setLightingType:(int64_t)a3 forMode:(int64_t)a4;
- (void)_setLowLightCaptureUIVisible:(BOOL)a3;
- (void)_setLowLightConflicts:(unint64_t)a3;
- (void)_setLowLightDurationMapping:(id)a3;
- (void)_setModeDisabled:(BOOL)a3;
- (void)_setNeedsDeferredGraphConfiguration:(BOOL)a3;
- (void)_setOpenHalfPressSpotlightControls:(id)a3;
- (void)_setOpeningViewfinder:(BOOL)a3;
- (void)_setOutOfDiskSpace:(BOOL)a3;
- (void)_setOverCapturePreviewStatus:(int64_t)a3;
- (void)_setOverlayControls:(id)a3;
- (void)_setOverlayServiceConnection:(id)a3;
- (void)_setPerformingTopBarOrientationChange:(BOOL)a3;
- (void)_setPhotoFormatConflict:(unint64_t)a3 isConflicting:(BOOL)a4;
- (void)_setPhotoFormatConflicts:(unint64_t)a3;
- (void)_setPhotoModeEffectFilterType:(int64_t)a3;
- (void)_setPortraitModeApertureValue:(double)a3;
- (void)_setPortraitModeEffectFilterType:(int64_t)a3;
- (void)_setPortraitModeIntensityValue:(double)a3;
- (void)_setPortraitModeLightingEffectType:(int64_t)a3;
- (void)_setPreferredControlToOpenInDrawer:(int64_t)a3 forMode:(int64_t)a4;
- (void)_setPreventingAdditionalCaptures:(BOOL)a3;
- (void)_setProactiveFlashSuggestionSuppressed:(BOOL)a3;
- (void)_setProminentObjectManager:(id)a3;
- (void)_setReceivedOutOfDiskSpaceErrorDuringCapture:(BOOL)a3;
- (void)_setReconfiguring:(BOOL)a3;
- (void)_setReconfiguringForZoomChange:(BOOL)a3;
- (void)_setRemainingCaptureTimerTicks:(unint64_t)a3;
- (void)_setResetTimerDurationAfterDelayedCapture:(BOOL)a3;
- (void)_setResolvedFlashMode:(int64_t)a3;
- (void)_setResolvedHDRMode:(int64_t)a3;
- (void)_setResolvedLivePhotoMode:(int64_t)a3;
- (void)_setResolvedLowLightControlMode:(unint64_t)a3;
- (void)_setResolvedLowLightMode:(int64_t)a3;
- (void)_setResolvedMacroMode:(int64_t)a3;
- (void)_setResolvedPhotoResolution:(int64_t)a3;
- (void)_setResolvedRAWMode:(int64_t)a3;
- (void)_setResolvedTimerDuration:(int64_t)a3;
- (void)_setResolvedTorchMode:(int64_t)a3;
- (void)_setResolvedTorchMode:(int64_t)a3 animated:(BOOL)a4;
- (void)_setSelectedSemanticStyleIndex:(unint64_t)a3;
- (void)_setSemanticStyles:(id)a3;
- (void)_setShadowClippingValue:(double)a3;
- (void)_setShallowDepthOfFieldStatus:(int64_t)a3;
- (void)_setShallowDepthOfFieldStatus:(int64_t)a3 stagePreviewStatus:(int64_t)a4;
- (void)_setShallowDepthOfFieldStatus:(int64_t)a3 stagePreviewStatus:(int64_t)a4 animated:(BOOL)a5;
- (void)_setShouldIgnoreZoomFactorKVOForRamping:(BOOL)a3;
- (void)_setShouldShowFilterScrubberAfterNextRender:(BOOL)a3;
- (void)_setShowingFilterScrubber:(BOOL)a3;
- (void)_setShowingFilterScrubber:(BOOL)a3 animated:(BOOL)a4;
- (void)_setShowingPortraitApertureSlider:(BOOL)a3;
- (void)_setShowingPortraitApertureSlider:(BOOL)a3 animated:(BOOL)a4;
- (void)_setShowingPortraitIntensitySlider:(BOOL)a3;
- (void)_setShowingPortraitIntensitySlider:(BOOL)a3 animated:(BOOL)a4;
- (void)_setSmartStyleSystemStyleIndex:(unint64_t)a3;
- (void)_setSpatialModeHasVideoSelected:(BOOL)a3;
- (void)_setSpatialVideoEnabled:(BOOL)a3;
- (void)_setSquareModeEffectFilterType:(int64_t)a3;
- (void)_setStagePreviewStatus:(int64_t)a3;
- (void)_setStereoCaptureStatus:(int64_t)a3;
- (void)_setSwipeToModeSwitchEnabled:(BOOL)a3;
- (void)_setSynchronizedCaptureTimerDelegate:(id)a3;
- (void)_setTextInteractionBackground:(id)a3;
- (void)_setTimerDurationAndUpdateUI:(int64_t)a3 animated:(BOOL)a4;
- (void)_setTrueVideoDestinationCaptureMode:(int64_t)a3;
- (void)_setTrueVideoSourceCaptureMode:(int64_t)a3;
- (void)_setTrueVideoSourceZoomFactor:(double)a3;
- (void)_setVideoZoomFactorAtDynamicShutterStart:(double)a3;
- (void)_setVideoZoomFactorAtPinchStart:(double)a3;
- (void)_setView:(id)a3 hidden:(BOOL)a4 delayedInTotalAnimationTime:(double)a5 normalizedFadeoutDuration:(double)a6;
- (void)_setVisionAnalyticsSession:(id)a3;
- (void)_setWantsFilterScrubberVisible:(BOOL)a3;
- (void)_setWantsFilterScrubberVisible:(BOOL)a3 animated:(BOOL)a4;
- (void)_setWantsVisualTextAnalysis:(BOOL)a3;
- (void)_setWantsVisualTextAnalysis:(BOOL)a3 animated:(BOOL)a4;
- (void)_setWantsVisualTextSelectionInstructions:(BOOL)a3;
- (void)_setupAndStartSynchronizedCaptureTimerDelegate;
- (void)_setupBurstTimerWithDelay:(double)a3;
- (void)_sharedLibraryTapToRadarAction;
- (void)_showBurstIndicatorView;
- (void)_showControlsForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_showDiskSpaceAlertView;
- (void)_showExternalStorageRecordingFailedAlert;
- (void)_showFlashOrTorchUnavailableAlertView;
- (void)_showFrameDropsAlert;
- (void)_showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:(int64_t)a3;
- (void)_showUnsupportedFormatAlert;
- (void)_shutterButtonSetSpinning:(BOOL)a3;
- (void)_snapshotAndFadeDisappearingOverlayViewsForChangeToGraphConfiguration:(id)a3;
- (void)_snapshotAndFadeDisappearingView:(id)a3;
- (void)_snapshotAndFadeDisappearingView:(id)a3 parentViewOverride:(id)a4 shouldHideView:(BOOL)a5;
- (void)_startCaptureSessionIfNecessaryIfVisibleAndInterrupted;
- (void)_startCapturingBurstWithRequest:(id)a3;
- (void)_startCountdownForCaptureTimer;
- (void)_startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:(id)a3;
- (void)_startFlashingVideoStabilizationBadge;
- (void)_startOrCancelPurgeIfNecessary;
- (void)_startPulsingAnimationForSmartStyleIndicator:(id)a3;
- (void)_startSmartStyleOnboardingControlRevealAnimation;
- (void)_startSynchronizedCaptureTimerDelegate;
- (void)_startTimer:(unint64_t)a3;
- (void)_startTransitioningToTrueVideoCaptureFromSourceMode:(int64_t)a3 sourceAspectRatio:(int64_t)a4 toDestinationMode:(int64_t)a5;
- (void)_stillImageCaptureRequestForTextAnalysis;
- (void)_stopCaptureTimerProgressUsingTorch;
- (void)_stopCapturingBurst;
- (void)_stopCapturingCTMVideo;
- (void)_stopCountdownForCaptureTimer;
- (void)_stopFlashingVideoStabilizationBadge;
- (void)_stopPulsingAnimationForSmartStyleIndicator:(id)a3;
- (void)_stopRecordingForDeactivationReason:(id)a3;
- (void)_stopSmartStyleOnboardingControlRevealAnimation;
- (void)_suppressProactiveSuggestionAnimated:(BOOL)a3;
- (void)_swipedToNextCameraMode;
- (void)_swipedToPreviousCameraMode;
- (void)_synchronizedCaptureTimerDelegateFired:(id)a3;
- (void)_teardownBurstTimer;
- (void)_teardownSynchronizedCaptureTimerDelegate;
- (void)_toggleBetweenBackFacingZoomFactorsForZoomControl:(id)a3;
- (void)_toggleBetweenFrontFacingZoomFactorsForZoomControl:(id)a3;
- (void)_trueVideoStartCapture;
- (void)_trueVideoStopCapture;
- (void)_unembedAndDestroyAllControls;
- (void)_unembedDisabledModeOverlayView:(id)a3;
- (void)_unembedGridView;
- (void)_unembedHorizonLevelView;
- (void)_unembedLevelView;
- (void)_updateAllControlsWithContentSize:(id)a3;
- (void)_updateAutoMacroButtonAnimated:(BOOL)a3;
- (void)_updateBadgeVisibilityAnimated:(BOOL)a3;
- (void)_updateBarBackgroundStyleForMode:(int64_t)a3 capturing:(BOOL)a4 animated:(BOOL)a5;
- (void)_updateCachedMRCResults:(id)a3;
- (void)_updateCaptureTimerIndicatorWithFaceResult:(id)a3;
- (void)_updateControlDrawerContentsVisibilityAnimated:(BOOL)a3;
- (void)_updateControlDrawerContentsVisibilityForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_updateControlStatusBarContentsVisibilityAnimated:(BOOL)a3;
- (void)_updateControlStatusBarContentsVisibilityForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_updateControlsDisabledByLowLightAnimated:(BOOL)a3;
- (void)_updateControlsForVisibleFilterScrubberAnimated:(BOOL)a3;
- (void)_updateControlsRelatedToDepthSuggestionAnimated:(BOOL)a3;
- (void)_updateCurrentPreviewFiltersOnCaptureController;
- (void)_updateDepthEffectApertureForGraphConfiguration:(id)a3 fromGraphConfiguration:(id)a4 zoomFactor:(double)a5;
- (void)_updateDepthEffectSuggestionButtonAnimated:(BOOL)a3;
- (void)_updateDepthEffectSuggestionEnabled:(BOOL)a3;
- (void)_updateDescriptionOverlayVisibilityForMode:(int64_t)a3 allowShow:(BOOL)a4 allowHide:(BOOL)a5 animated:(BOOL)a6;
- (void)_updateDisabledModeOverlayViewForCurrentState;
- (void)_updateDisabledModeUIAnimated:(BOOL)a3;
- (void)_updateDiskSpaceAlertViewVisibilityAnimated:(BOOL)a3;
- (void)_updateDocumentScanningButtonIfNeeded;
- (void)_updateDoneButtonIfNeeded;
- (void)_updateEnabledControlsWithReason:(id)a3;
- (void)_updateEnabledControlsWithReason:(id)a3 forceLog:(BOOL)a4;
- (void)_updateExposureButtonForCurrentState;
- (void)_updateExposureSliderForCurrentState;
- (void)_updateExternalStorageDataSources;
- (void)_updateExternalStorageMonitoringState:(unint64_t)a3;
- (void)_updateFallbackPrimaryConstituentDeviceSelectionOnCaptureController;
- (void)_updateFilterButtonOnState;
- (void)_updateFilterNameBadgeAnimated:(BOOL)a3;
- (void)_updateFilterScrubberAfterCapture;
- (void)_updateFilterScrubberForGraphConfiguration:(id)a3;
- (void)_updateFlashButtonAvailability;
- (void)_updateFlashButtonForMode:(int64_t)a3 animated:(BOOL)a4;
- (void)_updateFlashModeOnControllerForMode:(int64_t)a3;
- (void)_updateFocusAfterZoomIfNecessary;
- (void)_updateFocusAndExposureLockBadgeAnimated:(BOOL)a3;
- (void)_updateForCurrentConfiguration;
- (void)_updateForCurrentMachineReadableCodeAction;
- (void)_updateForShallowDepthOfFieldStatusChangedAnimated:(BOOL)a3;
- (void)_updateFreeResourcesInstructionLabelForCurrentState;
- (void)_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_updateHDRButtonAnimated:(BOOL)a3;
- (void)_updateHDRSuggestionMonitoringForGraphConfiguration:(id)a3;
- (void)_updateHomeIndicatorBehaviorsForCaptureOrientation;
- (void)_updateImageAnalysisButton;
- (void)_updateImageAnalysisInstructions;
- (void)_updateImageWellWithStillImageResponse:(id)a3 forRequest:(id)a4 error:(id)a5;
- (void)_updateIntensityButtonForCurrentState;
- (void)_updateInterfaceModulationForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_updateLayoutStyle;
- (void)_updateLevelMotionTracking;
- (void)_updateLightingControlFadesForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_updateLightingUIForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_updateLivePhotoButtonAnimated:(BOOL)a3;
- (void)_updateLowLightConflict:(unint64_t)a3 isConflicting:(BOOL)a4;
- (void)_updateLowLightControlsAnimated:(BOOL)a3;
- (void)_updateLowLightSlider;
- (void)_updateMachineReadableCodeButtonForAction:(id)a3 animated:(BOOL)a4;
- (void)_updateMaxRecordingTimeInstructionLabelForGraphConfiguration:(id)a3;
- (void)_updateModeDisabledForCurrentStateAnimated:(BOOL)a3;
- (void)_updateModeDisabledForGraphConfiguration:(id)a3 callActive:(BOOL)a4 animated:(BOOL)a5;
- (void)_updateObjectResults:(id)a3 headResults:(id)a4 bodyResults:(id)a5;
- (void)_updateOriginForRequest:(id)a3;
- (void)_updatePairedVideoCaptureOnControllerForGraphConfiguration:(id)a3 isShowingCameraRoll:(BOOL)a4;
- (void)_updatePanoramaSizeIfNeededForGraphConfiguration:(id)a3;
- (void)_updatePanoramaViewVisibilityForViewfinderTransition;
- (void)_updatePhotoFormatPickerAnimated:(BOOL)a3;
- (void)_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:(BOOL)a3;
- (void)_updatePortraitApertureButtonForGraphConfiguration:(id)a3 zoomFactor:(double)a4 animated:(BOOL)a5;
- (void)_updatePortraitApertureSliderForGraphConfiguration:(id)a3 zoomFactor:(double)a4;
- (void)_updatePortraitIntensitySliderForCurrentState;
- (void)_updatePortraitModeInstructionLabelForCurrentState;
- (void)_updatePreviewControllerIndicatorStyle;
- (void)_updatePreviewControllerPortraitStatus;
- (void)_updatePreviewSemanticStyleAnimated:(BOOL)a3;
- (void)_updateProResButtonAnimated:(BOOL)a3;
- (void)_updateProResControlsForCurrentState;
- (void)_updateProminentObjectManagerWithCachedMetadataResults;
- (void)_updatePropertiesForCaptureConfiguration:(id)a3 conflictingControlConfiguration:(id)a4;
- (void)_updateQRCodeInstructionLabelForCurrentState;
- (void)_updateRAWButtonAnimated:(BOOL)a3;
- (void)_updateResolvedLowLightModeAnimated:(BOOL)a3;
- (void)_updateResolvedMacroModeAndUpdateFallbackPrimaryConstituentDeviceSelection:(BOOL)a3;
- (void)_updateSelectedSmartStyle:(id)a3 animateSliders:(BOOL)a4;
- (void)_updateSelectedSmartStyleFromPicker;
- (void)_updateSemanticStyleControlsForCurrentStateAnimated:(BOOL)a3;
- (void)_updateSharedLibraryBadgeForCurrentState;
- (void)_updateSharedLibraryButtonAnimated:(BOOL)a3;
- (void)_updateSharedLibraryButtonOnSubviewsForLayoutStyle:(int64_t)a3;
- (void)_updateSharedLibraryImageWellIndicatorForCurrentState;
- (void)_updateShutterButtonForEndOfLowLightCapture;
- (void)_updateShutterButtonForGraphConfiguration:(id)a3 isCapturing:(BOOL)a4 animated:(BOOL)a5;
- (void)_updateShutterButtonLegibility;
- (void)_updateSmartStyleControlsForCurrentStateAnimateSliders:(BOOL)a3 animateOtherControls:(BOOL)a4;
- (void)_updateSmartStyleOnSession;
- (void)_updateSmartStyleStatusIndicator:(id)a3 disableSmartStyles:(BOOL)a4 animated:(BOOL)a5;
- (void)_updateSpatialCaptureUIStateForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_updateSwipeToModeSwitchGestureRecognizersWithDirectionsForLayoutStyle:(int64_t)a3;
- (void)_updateTextAnalysisWithInsert:(id)a3 instructions:(BOOL)a4 animated:(BOOL)a5;
- (void)_updateTopBarForLightingType:(int64_t)a3;
- (void)_updateTopBarStyleForGraphConfiguration:(id)a3 capturing:(BOOL)a4 animated:(BOOL)a5;
- (void)_updateTorchModeForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_updateTorchModeOnControllerForMode:(int64_t)a3;
- (void)_updateTransientLightingBadgeVisibilityAnimated:(BOOL)a3;
- (void)_updateUIForCaptureOrientationAnimated:(BOOL)a3;
- (void)_updateUIForCapturing:(BOOL)a3 animated:(BOOL)a4;
- (void)_updateUserInitiationTimeForRequest:(id)a3;
- (void)_updateUserPreferencesForFilterUsage;
- (void)_updateVideoConfigurationStatusIndicatorForGraphConfiguration:(id)a3 animated:(BOOL)a4;
- (void)_updateVideoStabilizationButtonAnimated:(BOOL)a3;
- (void)_updateViewfinderMaterialAnimated:(BOOL)a3;
- (void)_updateViewfinderMaterialFromStatus:(int64_t)a3 animated:(BOOL)a4;
- (void)_updateZoomButtonSymbolForMode:(int64_t)a3 device:(int64_t)a4 videoConfiguration:(int64_t)a5 zoomFactor:(double)a6 videoStabilizationStrength:(int64_t)a7 animated:(BOOL)a8;
- (void)_updateZoomControlAccessoryStateAnimated:(BOOL)a3;
- (void)_updateZoomControlLayoutForGraphConfiguration:(id)a3 fromGraphConfiguration:(id)a4 animated:(BOOL)a5;
- (void)_updateZoomFactorForZoomFactor:(double)a3 rampDuration:(double)a4 interactionType:(int64_t)a5 didChangeDevice:(id)a6;
- (void)_updateZoomUIWithZoomFactor:(double)a3 animated:(BOOL)a4;
- (void)_willChangeToGraphConfiguration:(id)a3 zoomFactor:(double)a4 fromGraphConfiguration:(id)a5 animated:(BOOL)a6;
- (void)_writeUserPreferences;
- (void)_zoomControlDidChangeZoomFactor:(double)a3 interactionType:(int64_t)a4;
- (void)_zoomSliderValueDidChange:(id)a3 forEvent:(id)a4;
- (void)_zoomUIDidChangeToFactor:(double)a3;
- (void)accessibilityHUDManager:(id)a3 wantsToShowHUDItem:(id)a4;
- (void)actionDidUpdateTitle:(id)a3;
- (void)addChildViewController:(id)a3 toView:(id)a4;
- (void)animateAlongsideFadeOutForTextLiftingView:(id)a3;
- (void)animateAlongsideTextLiftingForView:(id)a3;
- (void)applyCaptureConfiguration:(id)a3 conflictingControlConfiguration:(id)a4;
- (void)availableDiskSpaceChanged:(id)a3;
- (void)badgeTray:(id)a3 didCreateBadgeForType:(unint64_t)a4;
- (void)cameraOverlayConnection:(id)a3 didApplyControlUpdate:(id)a4;
- (void)cameraOverlayConnection:(id)a3 didChangeOverlayVisible:(BOOL)a4 activeControlIdentifier:(id)a5;
- (void)cameraOverlayConnection:(id)a3 didChangeStatus:(unint64_t)a4;
- (void)cameraOverlayConnection:(id)a3 didChangeValue:(id)a4 forControlIdentifier:(id)a5;
- (void)cameraRollController:(id)a3 didChangeImageWellImage:(id)a4 withUUID:(id)a5 animated:(BOOL)a6;
- (void)cameraRollController:(id)a3 didDismissPreviewControllerShouldStartCaptureSession:(BOOL)a4;
- (void)cameraRollController:(id)a3 shouldHideSourceAsset:(BOOL)a4;
- (void)cameraRollController:(id)a3 willShowPresentingViewControllerShouldStartCaptureSession:(BOOL)a4;
- (void)cameraRollControllerDidDismissFullyPresentedCameraRoll:(id)a3;
- (void)cameraRollControllerDidFullyPresentCameraRoll:(id)a3;
- (void)cameraRollControllerDidStartSession:(id)a3;
- (void)cameraRollControllerRequestsCaptureSessionStopped:(id)a3;
- (void)cameraRollControllerRevealDidEnd:(id)a3;
- (void)cameraRollControllerRevealWillBegin:(id)a3;
- (void)cameraRollControllerWillPresentCameraRoll:(id)a3 withOneUpController:(id)a4;
- (void)cameraRollControllerWillPresentPreviewController:(id)a3;
- (void)captureController:(id)a3 didChangeAutoMacroSuggested:(BOOL)a4;
- (void)captureController:(id)a3 didChangeCameraSystemPressureState:(id)a4;
- (void)captureController:(id)a3 didChangeDocumentSceneConfidenceResults:(float)a4;
- (void)captureController:(id)a3 didChangePreviewZoomPIPRect:(CGRect)a4;
- (void)captureController:(id)a3 didChangeRampingVideoZoom:(BOOL)a4;
- (void)captureController:(id)a3 didChangeToGraphConfiguration:(id)a4 forDesiredConfiguration:(id)a5 requestID:(int)a6;
- (void)captureController:(id)a3 didOutputAppClipCodeResults:(id)a4;
- (void)captureController:(id)a3 didOutputCaptureAvailability:(BOOL)a4;
- (void)captureController:(id)a3 didOutputConfigurationAvailability:(BOOL)a4;
- (void)captureController:(id)a3 didOutputFaceResults:(id)a4 headResults:(id)a5 bodyResults:(id)a6 salientObjectResults:(id)a7;
- (void)captureController:(id)a3 didOutputFlashActive:(BOOL)a4;
- (void)captureController:(id)a3 didOutputFlashAvailability:(BOOL)a4;
- (void)captureController:(id)a3 didOutputFlashCompromise:(unint64_t)a4;
- (void)captureController:(id)a3 didOutputHDRSuggestion:(BOOL)a4;
- (void)captureController:(id)a3 didOutputHistogramResult:(id)a4;
- (void)captureController:(id)a3 didOutputLowLightModeDurationMapping:(id)a4;
- (void)captureController:(id)a3 didOutputLowLightStatus:(int64_t)a4;
- (void)captureController:(id)a3 didOutputMinAvailableVideoZoomFactor:(double)a4;
- (void)captureController:(id)a3 didOutputOverCapturePreviewStatus:(int64_t)a4;
- (void)captureController:(id)a3 didOutputQRCodeResults:(id)a4;
- (void)captureController:(id)a3 didOutputShallowDepthOfFieldStatus:(int64_t)a4 stagePreviewStatus:(int64_t)a5;
- (void)captureController:(id)a3 didOutputStereoCaptureStatus:(int64_t)a4;
- (void)captureController:(id)a3 didOutputTextRegionResults:(id)a4;
- (void)captureController:(id)a3 didOutputTorchActive:(BOOL)a4;
- (void)captureController:(id)a3 didOutputTorchAvailability:(BOOL)a4;
- (void)captureController:(id)a3 didOutputVideoZoomFactor:(double)a4;
- (void)captureController:(id)a3 receivedFocusLocked:(BOOL)a4;
- (void)captureController:(id)a3 receivedOverlayApertureControlActive:(BOOL)a4;
- (void)captureController:(id)a3 receivedOverlayChangeSmartStyle:(id)a4;
- (void)captureController:(id)a3 receivedOverlaySimulatedAperture:(float)a4;
- (void)captureController:(id)a3 receivedOverlayStyleControlActive:(BOOL)a4;
- (void)captureController:(id)a3 receivedOverlayUpdateSmartStyle:(id)a4;
- (void)captureController:(id)a3 receivedOverlayVisible:(BOOL)a4;
- (void)captureController:(id)a3 receivedQuietUIActive:(BOOL)a4;
- (void)captureController:(id)a3 receivedSystemOverlayLensSelectorZoomFactor:(double)a4;
- (void)captureController:(id)a3 receivedSystemOverlayUpdateExposureBias:(double)a4;
- (void)captureController:(id)a3 willRecoverFromRuntimeError:(id)a4;
- (void)captureControllerDidReachMaximumBurstLength:(id)a3;
- (void)captureControllerDidStartRunning:(id)a3;
- (void)captureControllerDidStopCapturingBurst:(id)a3;
- (void)captureControllerDidStopPlayingBurstEndSound:(id)a3;
- (void)captureControllerDidStopRunning:(id)a3;
- (void)captureControllerInterruptionEnded:(id)a3;
- (void)captureControllerWasInterrupted:(id)a3;
- (void)captureControllerWillStartCapturingBurst:(id)a3;
- (void)captureControllerWillStartPlayingBurstEndSound:(id)a3;
- (void)changeToMode:(int64_t)a3 device:(int64_t)a4;
- (void)changeToMode:(int64_t)a3 device:(int64_t)a4 animated:(BOOL)a5;
- (void)closedViewfinderController:(id)a3 wantsViewfinderClosedForReason:(int64_t)a4;
- (void)closedViewfinderController:(id)a3 wantsViewfinderOpenForReason:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeAspectRatio:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeFlashMode:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeHDRMode:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeLivePhotoMode:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeProResVideoMode:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeRAWMode:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeSharedLibraryMode:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeTimerDuration:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeValueForControlType:(int64_t)a4;
- (void)controlDrawer:(id)a3 didChangeVideoStabilizationMode:(int64_t)a4;
- (void)controlDrawer:(id)a3 didCreateControlForType:(int64_t)a4;
- (void)controlDrawer:(id)a3 didSelectMenuItemForControlType:(int64_t)a4;
- (void)controlDrawer:(id)a3 wantsFilterScrubberVisible:(BOOL)a4;
- (void)controlDrawerDidCreateApertureSlider:(id)a3;
- (void)controlDrawerDidCreateExposureSlider:(id)a3;
- (void)controlDrawerDidCreateFilterScrubber:(id)a3;
- (void)controlDrawerDidCreateIntensitySlider:(id)a3;
- (void)controlDrawerDidCreateLowLightSlider:(id)a3;
- (void)controlDrawerDidCreateSemanticStyleControl:(id)a3;
- (void)controlStatusBar:(id)a3 didChangeExpandingControl:(id)a4 expanded:(BOOL)a5;
- (void)controlStatusBar:(id)a3 didCreateIndicatorForType:(unint64_t)a4;
- (void)controlStatusBar:(id)a3 didReceiveTapInIndicatorForType:(unint64_t)a4;
- (void)controlStatusBar:(id)a3 willChangeExpandingControl:(id)a4 expanded:(BOOL)a5;
- (void)dealloc;
- (void)descriptionOverlayView:(id)a3 willBecomeVisible:(BOOL)a4;
- (void)descriptionOverlayViewDidAcknowledge:(id)a3;
- (void)descriptionOverlayViewDidSelectDetail:(id)a3;
- (void)disabledPreviewController:(id)a3 wantsPreviewDisabledForReason:(int64_t)a4;
- (void)disabledPreviewController:(id)a3 wantsPreviewEnabledForReason:(int64_t)a4;
- (void)documentScanFlowControllerDidCancel:(id)a3;
- (void)documentScanFlowControllerDidFail:(id)a3 withError:(id)a4;
- (void)documentScanFlowControllerDidFinish:(id)a3;
- (void)dynamicShutterControl:(id)a3 didChangeRelativeZoomProgress:(double)a4;
- (void)dynamicShutterControlDidDismissCounter:(id)a3;
- (void)dynamicShutterControlDidPresentCounter:(id)a3;
- (void)dynamicShutterControlDidPressLockButton:(id)a3;
- (void)dynamicShutterControlDidPressPauseResumeButton:(id)a3;
- (void)dynamicShutterControlDidShortPress:(id)a3;
- (void)dynamicShutterControlDidStart:(id)a3 withGesture:(int64_t)a4;
- (void)dynamicShutterControlDidStartZoomGesture:(id)a3;
- (void)dynamicShutterControlDidStop:(id)a3;
- (void)dynamicShutterControlGesturesDidBegin:(id)a3;
- (void)dynamicShutterControlGesturesDidCancel:(id)a3;
- (void)dynamicShutterControlGesturesDidEnd:(id)a3;
- (void)externalStorageMonitor:(id)a3 didChangeConnectedStorageDevices:(id)a4;
- (void)fadeOutAnimationDidEndForView:(id)a3;
- (void)fullscreenViewFinder:(id)a3 willDismissControlDrawerModallyForControlType:(int64_t)a4 reason:(int64_t)a5;
- (void)fullscreenViewFinder:(id)a3 willPresentControlDrawerModallyForControlType:(int64_t)a4 reason:(int64_t)a5;
- (void)fullscreenViewfinder:(id)a3 didChangeControlDrawerVisibility:(BOOL)a4 animated:(BOOL)a5 forReason:(int64_t)a6;
- (void)fullscreenViewfinder:(id)a3 didChangeExpanded:(BOOL)a4 forDrawerControlOfType:(int64_t)a5 animated:(BOOL)a6 updatePreferredDrawerControl:(BOOL)a7;
- (void)fullscreenViewfinder:(id)a3 didChangeSmartStyleControlsVisibility:(BOOL)a4 animated:(BOOL)a5;
- (void)fullscreenViewfinder:(id)a3 didCreateInstructionLabel:(int64_t)a4;
- (void)fullscreenViewfinderDidChangeSemanticStyle:(id)a3;
- (void)fullscreenViewfinderDidCreateAutoMacroButton:(id)a3;
- (void)fullscreenViewfinderDidCreateControlDrawer:(id)a3;
- (void)fullscreenViewfinderDidCreateDepthEffectSuggestionButton:(id)a3;
- (void)fullscreenViewfinderDidCreateExternalStorageButton:(id)a3;
- (void)fullscreenViewfinderDidCreatePortraitControls:(id)a3;
- (void)fullscreenViewfinderDidCreateSemanticStyleControls:(id)a3;
- (void)fullscreenViewfinderDidCreateSmartStyleControls:(id)a3;
- (void)fullscreenViewfinderDidCreateSpatialCaptureButton:(id)a3;
- (void)fullscreenViewfinderDidCreateSpotlightControlPanel:(id)a3;
- (void)fullscreenViewfinderDidCreateSpotlightSmartStyleStatusIndicator:(id)a3;
- (void)generateAnalyticsSessionEventIfNeeded;
- (void)generateOrUpdateAnalyticsSessionEventIfNeededWithCaptureMode:(int64_t)a3 captureDevice:(int64_t)a4;
- (void)handleVolumeButtonPressed;
- (void)handleVolumeButtonReleased;
- (void)imageAnalysisButton:(id)a3 didChangeContextMenuDisplayed:(BOOL)a4;
- (void)imageAnalysisInteraction:(id)a3 didRequestLiveTextButtonSelectedState:(BOOL)a4;
- (void)librarySelectionDidChangeSharedLibraryMode:(int64_t)a3;
- (void)lightingControl:(id)a3 willChangeExpanded:(BOOL)a4;
- (void)lightingControlDidChangeExpanded:(id)a3;
- (void)lightingControlDidChangeSelectedLightingType:(id)a3;
- (void)loadView;
- (void)machineReadableCodeButtonDidTapDismiss:(id)a3;
- (void)panoramaRequest:(id)a3 didGeneratePaintingStatus:(id)a4;
- (void)panoramaRequestDidCompleteCapture:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)panoramaRequestDidCompleteLocalPersistence:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)panoramaRequestDidCompleteRemotePersistence:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)panoramaRequestDidStartCapturing:(id)a3;
- (void)panoramaRequestDidStopCapturing:(id)a3 interrupted:(BOOL)a4;
- (void)physicalCaptureNotifierDidChangeState:(id)a3 forButton:(int64_t)a4;
- (void)prepareForDefaultImageSnapshotForScreen:(id)a3;
- (void)presentCameraRollViewControllerAnimated:(BOOL)a3 withAction:(unint64_t)a4 selectedAssetIndexFromEnd:(unint64_t)a5;
- (void)presentDocumentScanningViewControllerAnimated:(BOOL)a3;
- (void)pressShutterForRemoteShutter;
- (void)pressStillDuringVideoForRemoteShutter;
- (void)previewViewControllerDidChangeFocusOrExposure:(id)a3;
- (void)previewViewControllerDidChangeFocusOrExposureLocked:(id)a3 shouldAnimate:(BOOL)a4;
- (void)previewViewControllerDidChangeVideoFillAspectRatio:(id)a3;
- (void)previewViewControllerWillResetFocusOrExposure:(id)a3;
- (void)prominentObjectManager:(id)a3 didChangeCurrentMachineReadableCodeAction:(id)a4;
- (void)prominentObjectManager:(id)a3 didChangeCurrentObject:(id)a4;
- (void)prominentObjectManagerDidChangeIsCurrentObjectExpiring:(id)a3;
- (void)readUserPreferencesAndHandleChangesWithOverrides:(id)a3;
- (void)remoteShutter:(id)a3 focusOn:(CGPoint)a4;
- (void)remoteShutter:(id)a3 setCaptureDevice:(int64_t)a4;
- (void)remoteShutter:(id)a3 setFlashMode:(int64_t)a4;
- (void)remoteShutter:(id)a3 setHDRMode:(int64_t)a4;
- (void)remoteShutter:(id)a3 setIrisMode:(int64_t)a4;
- (void)remoteShutter:(id)a3 setMode:(int64_t)a4;
- (void)remoteShutter:(id)a3 setSharedLibraryMode:(int64_t)a4;
- (void)remoteShutter:(id)a3 setZoomAmount:(double)a4;
- (void)remoteShutter:(id)a3 takePhotoWithCountdown:(unint64_t)a4;
- (void)remoteShutterCancelCountdown:(id)a3;
- (void)request:(id)a3 didDetectTextWithResult:(id)a4;
- (void)request:(id)a3 didFailWithError:(id)a4;
- (void)request:(id)a3 didRecgonizeTextWithAnalysis:(id)a4;
- (void)resumeCameraSessionWithCompletion:(id)a3;
- (void)semanticStyleSettingsControllerDidDismiss:(id)a3;
- (void)setAutomaticallyAdjustsApplicationIdleTimer:(BOOL)a3;
- (void)setAutomaticallyAdjustsAutorotationStyle:(BOOL)a3;
- (void)setAutorotationStyle:(int64_t)a3;
- (void)setAvailableCaptureModes:(id)a3;
- (void)setCameraRollControllerTestDelegate:(id)a3;
- (void)setConfigurationDelegate:(id)a3;
- (void)setCreativeCameraDelegate:(id)a3;
- (void)setCustomOverlayView:(id)a3;
- (void)setCustomPreviewViewTransform:(CGAffineTransform *)a3;
- (void)setDisablingAdditionalCaptures:(BOOL)a3;
- (void)setDisablingMultipleCaptureFeatures:(BOOL)a3;
- (void)setHDRMode:(int64_t)a3;
- (void)setImagePickerVideoConfiguration:(int64_t)a3;
- (void)setMaximumVideoRecordingDuration:(double)a3;
- (void)setMessagesTransitionState:(int64_t)a3 animated:(BOOL)a4;
- (void)setPerformingReviewUsingOverlay:(BOOL)a3;
- (void)setPerformingTileTransition:(BOOL)a3;
- (void)setPersistenceBehavior:(unint64_t)a3;
- (void)setPhotoModeAspectRatioCrop:(int64_t)a3;
- (void)setPhotoResolution:(int64_t)a3;
- (void)setReviewButtonSource:(id)a3;
- (void)setShowingStandardControls:(BOOL)a3;
- (void)setSingleUseTimerWithDuration:(int64_t)a3;
- (void)setStillImageCaptureTestDelegate:(id)a3;
- (void)setTimerDuration:(int64_t)a3;
- (void)setTorchMode:(int64_t)a3;
- (void)setUnlockDelegate:(id)a3;
- (void)setUserInteractionLoggingEnabled:(BOOL)a3;
- (void)setVideoCaptureTestDelegate:(id)a3;
- (void)setViewAlreadyDidAppear:(BOOL)a3;
- (void)set_cachedSharedLibraryTimerState:(int64_t)a3;
- (void)set_cameraCaseShutterNotifier:(id)a3;
- (void)set_cameraRollControllerAction:(id)a3;
- (void)set_catCount:(unint64_t)a3;
- (void)set_cinematicConfigurationOverride:(int64_t)a3;
- (void)set_completedInitialConfiguration:(BOOL)a3;
- (void)set_depthEffectEnabledFromSuggestion:(BOOL)a3;
- (void)set_dogCount:(unint64_t)a3;
- (void)set_faceCount:(unint64_t)a3;
- (void)set_filterScrubberLayerContents:(id)a3;
- (void)set_filterTypes:(id)a3;
- (void)set_physicalButtonInteraction:(id)a3;
- (void)set_preferredControlToOpenInDrawerForMode:(id)a3;
- (void)set_reviewButton:(id)a3;
- (void)set_slomoConfigurationOverride:(int64_t)a3;
- (void)set_smartStyleOnboardingControlDrawerAnimationSequence:(id)a3;
- (void)set_smartStylesSwipeLeftGestureRecognizer:(id)a3;
- (void)set_smartStylesSwipeRightGestureRecognizer:(id)a3;
- (void)set_timelapseAnalyticsEvent:(id)a3;
- (void)set_videoConfigurationOverride:(int64_t)a3;
- (void)shutterControlTouchAttemptedWhileDisabled:(id)a3;
- (void)simulateImageWellTap;
- (void)spotlightControlPanel:(id)a3 didChangeOpenForSpotlight:(int64_t)a4;
- (void)spotlightControlPanel:(id)a3 didChangeValueForSpotlight:(int64_t)a4;
- (void)spotlightControlPanelDidCreateApertureSlider:(id)a3;
- (void)stillImageRequestDidBeginCaptureBeforeResolvingSettings:(id)a3;
- (void)stillImageRequestDidCompleteCapture:(id)a3 error:(id)a4;
- (void)stillImageRequestDidCompleteStillImageCapture:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)stillImageRequestDidCompleteStillImageLocalPersistence:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)stillImageRequestDidCompleteStillImageRemotePersistence:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)stillImageRequestDidCompleteVideoCapture:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)stillImageRequestDidStartCapturing:(id)a3 resolvedSettings:(id)a4;
- (void)stillImageRequestDidStopCapturingStillImage:(id)a3;
- (void)stillImageRequestWillStartCapturingCTMVideoWithCaptureInFlight:(BOOL)a3;
- (void)stillImageRequestsDidCompleteCapturingLivePhotoVideo;
- (void)stillImageRequestsDidStopCapturingCTMVideo;
- (void)stillImageRequestsWillRequestCTMVideoCaptureEnd;
- (void)stillImageRequestsWillRequestCTMVideoCaptureStart;
- (void)stillImageRequestsWillStartCapturingLivePhotoVideo;
- (void)stopMonitoringForAccidentalLaunchIfNeeded;
- (void)storageControllerDidChangePurgingState:(id)a3;
- (void)suspendCameraSessionWithCompletion:(id)a3;
- (void)timelapseController:(id)a3 generatedPlaceholderResult:(id)a4 withThumbnailImage:(id)a5 forAssetUUID:(id)a6 inCaptureSession:(unsigned __int16)a7;
- (void)timelapseController:(id)a3 persistedPlaceholderResult:(id)a4 error:(id)a5;
- (void)timelapseController:(id)a3 startedWithCaptureOrientation:(int64_t)a4;
- (void)timelapseControllerStopped:(id)a3;
- (void)timerCache:(id)a3 timerDidFireForKey:(id)a4;
- (void)toggleBetweenZoomFactorsForZoomControl:(id)a3;
- (void)updateControlVisibilityAnimated:(BOOL)a3;
- (void)videoConfigurationStatusIndicatorDidTapFramerate:(id)a3;
- (void)videoConfigurationStatusIndicatorDidTapResolution:(id)a3;
- (void)videoRequestDidCompleteCapture:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)videoRequestDidCompleteLocalPersistence:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)videoRequestDidCompleteRemotePersistence:(id)a3 withResponse:(id)a4 error:(id)a5;
- (void)videoRequestDidResumeCapturing:(id)a3;
- (void)videoRequestDidStartCapturing:(id)a3;
- (void)videoRequestDidStopCapturing:(id)a3;
- (void)videoThumbnailOutputWillBeginRenderingThumbnailsWithContents:(id)a3;
- (void)videoThumbnailOutputWillEndRenderingThumbnails;
- (void)viewDidAppear:(BOOL)a3;
- (void)viewDidDisappear:(BOOL)a3;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)a3;
- (void)viewWillDisappear:(BOOL)a3;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)a3 withTransitionCoordinator:(id)a4;
- (void)wheelScrubberView:(id)a3 updateCell:(id)a4 forItemAtIndex:(unint64_t)a5;
- (void)wheelScrubberViewDidChangeSelectedIndex:(id)a3;
- (void)willHideZoomSlider:(id)a3 withAnimationDuration:(double)a4;
- (void)willShowZoomSlider:(id)a3 withAnimationDuration:(double)a4;
- (void)zoomControl:(id)a3 didChangeSelectedButtonIndex:(unint64_t)a4 displayZoomFactor:(double)a5;
- (void)zoomControl:(id)a3 didChangeZoomFactor:(double)a4 interactionType:(int64_t)a5;
- (void)zoomControlDidChangePlatterExpanded:(id)a3;
- (void)zoomControlDidChangeShowingZoomDial:(id)a3;
- (void)zoomControlDidTapZoomButtonAccessory:(id)a3;
- (void)zoomSliderDidBeginAutozooming:(id)a3;
- (void)zoomSliderDidEndAutozooming:(id)a3;
@end

@implementation CAMViewfinderViewController

- (void)_updatePropertiesForCaptureConfiguration:(id)a3 conflictingControlConfiguration:(id)a4
{
  id v26 = a3;
  id v6 = a4;
  v7 = +[CAMUserPreferences preferences];
  self->__desiredFlashMode = [v6 desiredFlashMode];
  self->__desiredHDRMode = [v6 desiredHDRMode];
  self->__flashAndHDRConflictingControl = [v6 flashAndHDRConflictingControl];
  self->__desiredLivePhotoMode = [v6 desiredLivePhotoMode];
  self->__desiredRAWMode = [v6 desiredRAWMode];
  self->__desiredPhotoResolution = [v6 desiredPhotoResolution];
  self->__photoFormatConflicts = [v6 photoFormatConflicts];
  self->__desiredMacroMode = [v6 desiredMacroMode];
  self->__desiredProResVideoMode = [v26 proResVideoMode];
  v8 = +[CAMCaptureConfiguration captureGraphConfigurationUsingConfiguration:v26 outputToExternalStorage:[(CAMViewfinderViewController *)self _externalStorageOutputEnabled]];
  [(CAMViewfinderViewController *)self _setCurrentGraphConfiguration:v8];
  self->__resolvedFlashMode = [v26 flashMode];
  self->__resolvedHDRMode = [v26 HDRMode];
  self->__desiredTorchMode = [v26 torchMode];
  self->__resolvedTorchMode = [(CAMViewfinderViewController *)self _resolvedTorchModeForGraphConfiguration:v8];
  self->__resolvedTimerDuration = [v26 timerDuration];
  self->_photoModeAspectRatioCrop = [v26 photoModeAspectRatioCrop];
  self->__photoModeEffectFilterType = [v26 photoModeEffectFilterType];
  self->__squareModeEffectFilterType = [v26 squareModeEffectFilterType];
  self->__portraitModeEffectFilterType = [v26 portraitModeEffectFilterType];
  self->__resolvedLivePhotoMode = [v26 irisMode];
  self->__portraitModeLightingEffectType = [v26 portraitModeLightingEffectType];
  [v26 portraitModeApertureValue];
  self->__portraitModeApertureValue = v9;
  [v26 portraitModeIntensityValue];
  self->__portraitModeIntensityValue = v10;
  v11 = [v26 exposureBiasesByMode];
  v12 = (NSMutableDictionary *)[v11 mutableCopy];
  exposureBiasesByMode = self->__exposureBiasesByMode;
  self->__exposureBiasesByMode = v12;

  self->__resolvedMacroMode = [v26 macroMode];
  self->__resolvedPhotoResolution = [v26 photoResolution];
  self->__resolvedRAWMode = [v26 rawMode];
  v14 = [v26 semanticStyles];
  v15 = (NSMutableArray *)[v14 mutableCopy];
  semanticStyles = self->__semanticStyles;
  self->__semanticStyles = v15;

  self->__selectedSemanticStyleIndex = [v26 selectedSemanticStyleIndex];
  self->__smartStyleSystemStyleIndex = [v26 smartStyleSystemStyleIndex];
  self->__desiredVideoStabilizationMode = [v26 videoStabilizationMode];
  v17 = [(CAMViewfinderViewController *)self _motionController];
  -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:captureOrientation:](self, "_defaultZoomFactorForGraphConfiguration:captureOrientation:", v8, [v17 captureOrientation]);
  self->__cachedVideoZoomFactor = v18;

  self->__spatialVideoEnabled = [v26 spatialVideoEnabled];
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  -[CAMViewfinderViewController _resetPortraitModeApertureValueIfNeededForGraphConfiguration:zoomFactor:](self, "_resetPortraitModeApertureValueIfNeededForGraphConfiguration:zoomFactor:", v8);
  v19 = +[CAMCaptureCapabilities capabilities];
  int v20 = [v19 isLowLightSupported];

  if (v20)
  {
    self->__desiredLowLightControlMode = [v6 desiredLowLightControlMode];
    unint64_t v21 = [v6 lowLightConflicts];
    self->__lowLightConflicts = v21;
    self->__resolvedLowLightControlMode = +[CAMConflictingControlConfiguration resolveDesiredLowLightControlMode:self->__desiredLowLightControlMode lowLightConflicts:v21 resolvedFlashMode:self->__resolvedFlashMode];
  }
  self->__depthEffectEnabledFromSuggestion = [v26 optionalDepthEffectEnabled];
  self->encoding = [v7 photoFormatControlSecondaryFormat];
  self->resolution = v22;
  self->__lastZoomInteractionType = 0;
  self->__spatialModeHasVideoSelected = [v7 spatialModeHasVideoSelected];
  v23 = [v7 preferredDrawerControlByMode];
  if (v23)
  {
    id v24 = [v7 preferredDrawerControlByMode];
    v25 = (void *)[v24 mutableCopy];
    [(CAMViewfinderViewController *)self set_preferredControlToOpenInDrawerForMode:v25];
  }
  else
  {
    id v24 = objc_alloc_init(MEMORY[0x263EFF9A0]);
    [(CAMViewfinderViewController *)self set_preferredControlToOpenInDrawerForMode:v24];
  }
}

- (int64_t)_autorotationStyleForLayoutStyle:(int64_t)a3
{
  v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = [v4 isSplitScreenSupported];
  if ((unint64_t)(a3 - 1) >= 3)
  {
    if (a3 != 4 && a3)
    {
      int64_t v6 = 0;
    }
    else if (v5)
    {
      int64_t v6 = 2;
    }
    else
    {
      int64_t v6 = 1;
    }
  }
  else
  {
    int64_t v6 = 2;
  }

  return v6;
}

- (BOOL)isEmulatingImagePicker
{
  return [(CAMViewfinderViewController *)self emulationMode] != 0;
}

- (int64_t)emulationMode
{
  return self->_emulationMode;
}

- (CAMCallStatusMonitor)_callStatusMonitor
{
  return self->__callStatusMonitor;
}

- (unint64_t)supportedInterfaceOrientations
{
  int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
  BOOL v4 = [(CAMViewfinderViewController *)self _wantsVisualTextAnalysis];
  return [(CAMViewfinderViewController *)self _supportedInterfaceOrientationsForLayoutStyle:v3 wantsTextAnalysis:v4];
}

- (int64_t)_layoutStyle
{
  return self->__layoutStyle;
}

- (BOOL)shouldAutorotate
{
  int64_t v3 = [(CAMViewfinderViewController *)self _captureController];
  char v4 = [v3 isCapturingVideo];
  if ([(CAMViewfinderViewController *)self autorotationStyle] == 2) {
    char v5 = v4 ^ 1;
  }
  else {
    char v5 = 1;
  }

  return v5;
}

- (CUCaptureController)_captureController
{
  return self->__captureController;
}

- (int64_t)_internalAutorotationStyle
{
  return self->__internalAutorotationStyle;
}

- (BOOL)prefersStatusBarHidden
{
  v2 = [(CAMViewfinderViewController *)self _cameraRollController];
  int64_t v3 = v2;
  if (v2) {
    char v4 = [v2 prefersPresentingStatusbarHidden];
  }
  else {
    char v4 = 1;
  }

  return v4;
}

- (CAMCameraRollController)_cameraRollController
{
  return self->__cameraRollController;
}

- (unint64_t)preferredScreenEdgesDeferringSystemGestures
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
  if (v3 > 3 || v3 == 1) {
    return 0;
  }
  char v5 = [(CAMViewfinderViewController *)self view];
  int64_t v6 = [v5 window];
  int64_t v7 = CAMInterfaceOrientationForWindow(v6);

  uint64_t v8 = 1;
  uint64_t v9 = 4;
  if (v7 != 1)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  if (v7 == 2) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v7 == 2) {
    uint64_t v11 = 4;
  }
  else {
    uint64_t v11 = v8;
  }
  v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];

  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0;
  }
  return v13 | v10;
}

- (void)loadView
{
  id v74 = [(CAMViewfinderViewController *)self _previewViewController];
  unint64_t v3 = [v74 previewView];
  char v4 = [MEMORY[0x263EFF980] array];
  [(CAMViewfinderViewController *)self _setAccessibilityHUDManagers:v4];
  char v5 = +[CAMCaptureCapabilities capabilities];
  int64_t v6 = [(CAMViewfinderViewController *)self _captureController];
  int64_t v7 = [v6 videoPreviewLayer];

  [v3 setVideoPreviewLayer:v7];
  if (![(CAMViewfinderViewController *)self isShowingStandardControls])
  {
    int64_t v11 = [(CAMViewfinderViewController *)self _layoutStyle];
LABEL_8:
    uint64_t v10 = [[CAMViewfinderView alloc] initWithLayoutStyle:v11];
    [(CAMViewfinderView *)v10 setPreviewView:v3];
    [(CAMViewfinderView *)v10 setTopBar:self->__topBar];
    [(CAMViewfinderView *)v10 setBottomBar:self->__bottomBar];
    [(CAMViewfinderView *)v10 setVisibilityDelegate:self];
    [(CAMViewfinderView *)v10 setUseCreativeControls:self->__useCreativeCameraControls];
    unint64_t v21 = [(CAMViewfinderViewController *)self _transitionController];
    [v21 setTarget:v10];

    [(CAMViewfinderViewController *)self setView:v10];
    goto LABEL_15;
  }
  if (![v5 isCTMSupported])
  {
    int64_t v11 = [(CAMViewfinderViewController *)self _layoutStyle];
    v12 = [CAMTopBar alloc];
    uint64_t v13 = -[CAMTopBar initWithFrame:](v12, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    topBar = self->__topBar;
    self->__topBar = v13;

    [(CAMTopBar *)self->__topBar setStyle:0];
    [(CAMTopBar *)self->__topBar setVisibilityUpdateDelegate:self];
    v15 = [[CAMBottomBar alloc] initWithLayoutStyle:v11];
    bottomBar = self->__bottomBar;
    self->__bottomBar = v15;

    [(CAMBottomBar *)self->__bottomBar setVisibilityUpdateDelegate:self];
    v17 = [(CAMViewfinderViewController *)self currentContentSize];
    BOOL IsAccessibilityCategory = UIContentSizeCategoryIsAccessibilityCategory(v17);

    if (IsAccessibilityCategory)
    {
      v19 = [[CAMBarsAccessibilityHUDManager alloc] initWithView:self->__topBar delegate:self cancelsTouchesInView:1];
      [v4 addObject:v19];

      int v20 = [[CAMBarsAccessibilityHUDManager alloc] initWithView:self->__bottomBar delegate:self cancelsTouchesInView:0];
      [v4 addObject:v20];
    }
    goto LABEL_8;
  }
  [(CAMViewfinderViewController *)self _createMetalContextIfNecessary];
  uint64_t v8 = [CAMFullscreenViewfinder alloc];
  uint64_t v9 = [(CAMViewfinderViewController *)self _metalContext];
  uint64_t v10 = [(CAMFullscreenViewfinder *)v8 initWithMetalContext:v9 useCreativeCameraControls:[(CAMViewfinderViewController *)self _useCreativeCameraControls]];

  [(CAMViewfinderView *)v10 setPreviewView:v3];
  [(CAMViewfinderView *)v10 setDelegate:self];
  [(CAMViewfinderViewController *)self setView:v10];
  [(CAMViewfinderViewController *)self _updateViewfinderMaterialAnimated:0];
  if ([(CAMViewfinderViewController *)self _shouldUseZoomControlInsteadOfSlider])
  {
    [(CAMViewfinderView *)v10 setZoomStyle:1];
  }
  else
  {
    [(CAMViewfinderView *)v10 setZoomStyle:2];
    int64_t v22 = [(CAMViewfinderView *)v10 zoomSlider];
    [v22 setMinimumValue:0.0];

    v23 = [(CAMViewfinderView *)v10 zoomSlider];
    LODWORD(v24) = 1.0;
    [v23 setMaximumValue:v24];

    BOOL v25 = [(CAMViewfinderViewController *)self _shouldEnableZoomSlider];
    id v26 = [(CAMViewfinderView *)v10 zoomSlider];
    [v26 setEnabled:v25];

    v27 = [(CAMViewfinderView *)v10 zoomSlider];
    [v27 setAlpha:0.0];
  }
  v28 = [(CAMViewfinderView *)v10 flipButton];
  [v28 addTarget:self action:sel__handleFlipButtonTouchDown_ forControlEvents:1];

  v29 = [(CAMViewfinderView *)v10 flipButton];
  [v29 addTarget:self action:sel__handleFlipButtonReleased_ forControlEvents:64];

  v30 = [(CAMViewfinderView *)v10 imageWell];
  [v30 addTarget:self action:sel__handleImageWellReleased_ forControlEvents:64];

  v31 = [(CAMViewfinderView *)v10 imageWell];
  [v31 addTarget:self action:sel__handleImageWellPressed_ forControlEvents:1];

  v32 = [(CAMViewfinderView *)v10 modeDial];
  [v32 addTarget:self action:sel__handleModeDialTouchDown_ forControlEvents:1];

  v33 = [(CAMViewfinderView *)v10 modeDial];
  [v33 addTarget:self action:sel__handleModeDialValueChanged_ forControlEvents:4096];

  v34 = [(CAMViewfinderView *)v10 zoomControl];
  [v34 addTarget:self action:sel__handleTouchDownForZoomControl_ forControlEvents:1];

  v35 = [(CAMViewfinderView *)v10 zoomSlider];
  [v35 addTarget:self action:sel__handleTouchDownForZoomSlider_ forControlEvents:1];

  v36 = [(CAMViewfinderView *)v10 zoomSlider];
  [v36 addTarget:self action:sel__zoomSliderValueDidChange_forEvent_ forControlEvents:4096];

  v37 = [(CAMViewfinderView *)v10 creativeCameraButton];
  [v37 addTarget:self action:sel__handleCreativeCameraButtonPressed_ forControlEvents:1];

  v38 = [(CAMViewfinderView *)v10 creativeCameraButton];
  [v38 addTarget:self action:sel__handleCreativeCameraButtonReleased_ forControlEvents:64];

  v39 = [(CAMViewfinderView *)v10 creativeCameraButton];
  [v39 addTarget:self action:sel__handleCreativeCameraButtonTouchAttemptedWhileDisabled_ forControlEvents:0x1000000];

  v40 = [(CAMViewfinderView *)v10 photoVideoModeSwitch];
  [v40 addTarget:self action:sel__handlePhotoVideoModeSwitchValueChanged_ forControlEvents:4096];

  v41 = [(CAMViewfinderViewController *)self currentContentSize];
  BOOL v42 = UIContentSizeCategoryIsAccessibilityCategory(v41);

  if (v42)
  {
    v43 = [[CAMBarsAccessibilityHUDManager alloc] initWithView:v10 delegate:self cancelsTouchesInView:1];
    [v4 addObject:v43];
  }
  if ([(CAMViewfinderViewController *)self _useCreativeCameraControls])
  {
    v44 = [MEMORY[0x263F5E470] doneButton];
    doneButton = self->__doneButton;
    self->__doneButton = v44;

    [(PUReviewScreenDoneButton *)self->__doneButton addTarget:self action:sel__handleDoneButtonReleased_ forControlEvents:64];
    v46 = self->__doneButton;
    v47 = [(CAMViewfinderView *)v10 controlStatusBar];
    [v47 setSecondaryAccessoryControl:v46];
  }
  v48 = [(CAMViewfinderView *)v10 shutterControl];
  [v48 setDelegate:self];

  v49 = [(CAMViewfinderView *)v10 zoomControl];
  [v49 setDelegate:self];

  v50 = [(CAMViewfinderView *)v10 zoomSlider];
  [v50 setDelegate:self];

  v51 = [(CAMViewfinderView *)v10 modeDial];
  [v51 setDataSource:self];

  v52 = [(CAMViewfinderView *)v10 modeSelectorGestureRecognizer];
  [v52 setDelegate:self];

  v53 = [(CAMViewfinderView *)v10 modeSelector];
  [v53 setDelegate:self];

  v54 = [(CAMViewfinderView *)v10 modeSelector];
  [v54 setDataSource:self];

  v55 = [(CAMViewfinderView *)v10 modeDial];
  [v55 reloadData];

  v56 = [(CAMViewfinderView *)v10 modeSelector];
  [v56 reloadData];

  v57 = [(CAMViewfinderView *)v10 controlStatusBar];
  [v57 setDelegate:self];

  v58 = [(CAMViewfinderView *)v10 badgeTray];
  [v58 setDelegate:self];

  v59 = [(CAMViewfinderView *)v10 modeDial];
  modeDial = self->__modeDial;
  self->__modeDial = v59;

  v61 = [(CAMViewfinderView *)v10 imageWell];
  imageWell = self->__imageWell;
  self->__imageWell = v61;

  v63 = [(CAMViewfinderView *)v10 flipButton];
  flipButton = self->__flipButton;
  self->__flipButton = v63;

  v65 = [(CAMViewfinderView *)v10 zoomControl];
  zoomControl = self->__zoomControl;
  self->__zoomControl = v65;

  v67 = [(CAMViewfinderView *)v10 zoomSlider];
  zoomSlider = self->__zoomSlider;
  self->__zoomSlider = v67;

  v69 = [(CAMViewfinderView *)v10 shutterControl];
  dynamicShutterControl = self->__dynamicShutterControl;
  self->__dynamicShutterControl = v69;

  v71 = [(CAMViewfinderView *)v10 creativeCameraButton];
  creativeCameraButton = self->__creativeCameraButton;
  self->__creativeCameraButton = v71;

  v73 = [(CAMViewfinderViewController *)self _transitionController];
  [v73 setTarget:v10];

LABEL_15:
  [(CAMViewfinderViewController *)self _createPhysicalCaptureInteractionIfNeeded];
}

- (CAMPreviewViewController)_previewViewController
{
  return self->__previewViewController;
}

- (BOOL)isShowingStandardControls
{
  return self->_showingStandardControls;
}

- (id)currentContentSize
{
  v2 = [(CAMViewfinderViewController *)self traitCollection];
  unint64_t v3 = [v2 preferredContentSizeCategory];

  return v3;
}

- (void)viewDidLoad
{
  v8.receiver = self;
  v8.super_class = (Class)CAMViewfinderViewController;
  [(CAMViewfinderViewController *)&v8 viewDidLoad];
  unint64_t v3 = [(CAMViewfinderViewController *)self view];
  [v3 _accessibilitySetInterfaceStyleIntent:2];

  char v4 = [(CAMViewfinderViewController *)self _previewViewController];
  [v4 didMoveToParentViewController:self];
  [(CAMViewfinderViewController *)self _createCommonControlsIfNecessary];
  [(CAMViewfinderViewController *)self _createCommonGestureRecognizersIfNecessary];
  [(CAMViewfinderViewController *)self _updateForCurrentConfiguration];
  [(CAMViewfinderViewController *)self _updateModeDisabledForCurrentStateAnimated:0];
  [(CAMViewfinderViewController *)self _updateDisabledModeUIAnimated:0];
  char v5 = [(CAMViewfinderViewController *)self _cameraRollController];
  [(CAMViewfinderViewController *)self cameraRollControllerDidStartSession:v5];
  int64_t v6 = [(CAMViewfinderViewController *)self modesForModeDial:0];
  int64_t v7 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v7 setAvailableCaptureModes:v6];
}

- (CAMCaptureGraphConfiguration)_currentGraphConfiguration
{
  return self->__currentGraphConfiguration;
}

- (void)_createCommonControlsIfNecessary
{
  if ([(CAMViewfinderViewController *)self isShowingStandardControls])
  {
    id v5 = +[CAMCaptureCapabilities capabilities];
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _createShutterButtonIfNecessary];
    if ([v5 isFrontCameraSupported]
      && [v5 isBackCameraSupported])
    {
      [(CAMViewfinderViewController *)self _createFlipButtonIfNecessary];
    }
    if ([v5 isCTMSupported]) {
      [(CAMViewfinderViewController *)self _createVerticalSwipeGestureRecognizersIfNecessary];
    }
    if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:v3])
    {
      [(CAMViewfinderViewController *)self _createTimerButtonIfNecessary];
      if ([(CAMViewfinderViewController *)self _wantsHDRControlsVisible]) {
        [(CAMViewfinderViewController *)self _createHDRButtonIfNecessary];
      }
      if ([v5 isLivePhotoSupported]) {
        [(CAMViewfinderViewController *)self _createLivePhotoButtonIfNecessary];
      }
    }
    if (v3 != 2)
    {
      [(CAMViewfinderViewController *)self _createModeDialIfNecessary];
      [(CAMViewfinderViewController *)self _createFocusAndExposureLockBadgeIfNecessary];
      if ([(CAMViewfinderViewController *)self _useCreativeCameraControls])
      {
        [(CAMViewfinderViewController *)self _createCreativeCameraButtonIfNecessary];
        [(CAMViewfinderViewController *)self _createPhotosButtonIfNecessary];
        [(CAMViewfinderViewController *)self _createDoneButtonIfNecessary];
      }
      else
      {
        [(CAMViewfinderViewController *)self _createReviewButtonIfNecessary];
        char v4 = [(CAMViewfinderViewController *)self _reviewButton];

        if (!v4) {
          [(CAMViewfinderViewController *)self _createImageWellIfNecessary];
        }
      }
      if (([v5 isBackFlashSupported] & 1) != 0
        || [v5 isFrontFlashSupported])
      {
        [(CAMViewfinderViewController *)self _createFlashButtonIfNecessary];
        [(CAMViewfinderViewController *)self _createFlashBadgeIfNecessary];
      }
    }
    [(CAMViewfinderViewController *)self _createOrDestroySharedLibraryControlsIfNecessary];
  }
}

- (void)_createShutterButtonIfNecessary
{
  if (!self->__shutterButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    char v4 = +[CUShutterButton shutterButtonWithLayoutStyle:v3];
    shutterButton = self->__shutterButton;
    self->__shutterButton = v4;

    [(CUShutterButton *)self->__shutterButton addTarget:self action:sel__handleShutterButtonPressed_ forControlEvents:1];
    [(CUShutterButton *)self->__shutterButton addTarget:self action:sel__handleShutterButtonReleased_ forControlEvents:64];
    [(CUShutterButton *)self->__shutterButton addTarget:self action:sel__handleShutterButtonDragEnter_ forControlEvents:16];
    [(CUShutterButton *)self->__shutterButton addTarget:self action:sel__handleShutterButtonDragExited_ forControlEvents:32];
    [(CUShutterButton *)self->__shutterButton addTarget:self action:sel__handleShutterButtonCancelled_ forControlEvents:256];
    [(CUShutterButton *)self->__shutterButton setMode:0];
    [(CUShutterButton *)self->__shutterButton setExclusiveTouch:1];
    [(CUShutterButton *)self->__shutterButton setDelegate:self];
    [(CAMViewfinderViewController *)self _embedShutterButtonWithLayoutStyle:v3];
  }
}

- (void)_embedShutterButtonWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  id v5 = [v9 bottomBar];
  int64_t v6 = [(CAMViewfinderViewController *)self _shutterButton];
  if (a3 == 2) {
    int64_t v7 = v5;
  }
  else {
    int64_t v7 = v9;
  }
  if (a3 == 2) {
    objc_super v8 = v9;
  }
  else {
    objc_super v8 = v5;
  }
  [v7 setShutterButton:0];
  [v8 setShutterButton:v6];
}

- (id)viewfinderView
{
  int64_t v3 = +[CAMCaptureCapabilities capabilities];
  char v4 = [v3 isCTMSupported];

  if (v4)
  {
    id v5 = 0;
  }
  else
  {
    id v5 = [(CAMViewfinderViewController *)self view];
  }
  return v5;
}

- (CUShutterButton)_shutterButton
{
  return self->__shutterButton;
}

- (void)_createFlipButtonIfNecessary
{
  if (!self->__flipButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    char v4 = +[CAMCaptureCapabilities capabilities];
    int v5 = [v4 overContentFlipButtonSupported];

    if (v5) {
      +[CAMFlipButton flipButtonOverContent];
    }
    else {
    int64_t v6 = +[CAMFlipButton flipButtonWithLayoutStyle:v3];
    }
    flipButton = self->__flipButton;
    self->__flipButton = v6;

    [(CAMFlipButton *)self->__flipButton addTarget:self action:sel__handleFlipButtonTouchDown_ forControlEvents:1];
    [(CAMFlipButton *)self->__flipButton addTarget:self action:sel__handleFlipButtonReleased_ forControlEvents:64];
    [(CAMFlipButton *)self->__flipButton setExclusiveTouch:1];
    [(CAMViewfinderViewController *)self _embedFlipButtonWithLayoutStyle:v3];
  }
}

- (void)_embedFlipButtonWithLayoutStyle:(int64_t)a3
{
  id v12 = [(CAMViewfinderViewController *)self viewfinderView];
  int v5 = [(CAMViewfinderViewController *)self _topBar];
  int64_t v6 = [(CAMViewfinderViewController *)self _bottomBar];
  int64_t v7 = [(CAMViewfinderViewController *)self _flipButton];
  BOOL v8 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  if (!dyld_program_sdk_at_least())
  {
    if (a3 == 2)
    {
      [v5 setFlipButton:0];
      id v9 = v6;
      uint64_t v10 = 0;
      goto LABEL_12;
    }
    if (!v8)
    {
      [v6 setFlipButton:0];
      id v9 = v5;
      goto LABEL_11;
    }
    int64_t v11 = v5;
    goto LABEL_9;
  }
  if (a3 != 2)
  {
    int64_t v11 = v12;
LABEL_9:
    [v11 setFlipButton:0];
    id v9 = v6;
    goto LABEL_11;
  }
  [v6 setFlipButton:0];
  id v9 = v12;
LABEL_11:
  uint64_t v10 = v7;
LABEL_12:
  [v9 setFlipButton:v10];
}

- (CAMTopBar)_topBar
{
  return self->__topBar;
}

- (CAMBottomBar)_bottomBar
{
  return self->__bottomBar;
}

- (CAMFlipButton)_flipButton
{
  return self->__flipButton;
}

- (void)_createModeDialIfNecessary
{
  if (!self->__modeDial
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    char v4 = [[CAMModeDial alloc] initWithLayoutStyle:v3];
    modeDial = self->__modeDial;
    self->__modeDial = v4;

    [(CAMModeDial *)self->__modeDial addTarget:self action:sel__handleModeDialTouchDown_ forControlEvents:1];
    [(CAMModeDial *)self->__modeDial addTarget:self action:sel__handleModeDialValueChanged_ forControlEvents:4096];
    [(CAMModeDial *)self->__modeDial setDataSource:self];
    [(CAMModeDial *)self->__modeDial reloadData];
    [(CAMViewfinderViewController *)self _embedModeDialWithLayoutStyle:v3];
  }
}

- (id)modesForModeDial:(id)a3
{
  id v4 = objc_alloc_init(MEMORY[0x263EFF980]);
  int v5 = [(CAMViewfinderViewController *)self availableCaptureModes];
  if ([v5 containsObject:&unk_26BDDDED8]) {
    [v4 addObject:&unk_26BDDDED8];
  }
  if ([v5 containsObject:&unk_26BDDDE60]) {
    [v4 addObject:&unk_26BDDDE60];
  }
  if ([v5 containsObject:&unk_26BDDDEC0]) {
    [v4 addObject:&unk_26BDDDEC0];
  }
  if ([v5 containsObject:&unk_26BDDDE00]) {
    [v4 addObject:&unk_26BDDDE00];
  }
  if ([v5 containsObject:&unk_26BDDDDE8]) {
    [v4 addObject:&unk_26BDDDDE8];
  }
  if ([v5 containsObject:&unk_26BDDDE18]) {
    [v4 addObject:&unk_26BDDDE18];
  }
  BOOL v6 = [(CAMViewfinderViewController *)self _spatialModeHasVideoSelected];
  if ([v5 containsObject:&unk_26BDDDE78] && v6) {
    [v4 addObject:&unk_26BDDDE78];
  }
  if ((([v5 containsObject:&unk_26BDDDDB8] ^ 1 | v6) & 1) == 0) {
    [v4 addObject:&unk_26BDDDDB8];
  }
  if ([v5 containsObject:&unk_26BDDDEA8]) {
    [v4 addObject:&unk_26BDDDEA8];
  }
  if ([v5 containsObject:&unk_26BDDDE90]) {
    [v4 addObject:&unk_26BDDDE90];
  }

  return v4;
}

- (NSSet)availableCaptureModes
{
  return self->_availableCaptureModes;
}

- (void)_embedModeDialWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  int v5 = [v9 bottomBar];
  uint64_t v6 = [(CAMViewfinderViewController *)self _modeDial];
  int64_t v7 = (void *)v6;
  if (a3 == 2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  [v5 setModeDial:v8];
}

- (CAMModeDial)_modeDial
{
  return self->__modeDial;
}

- (void)_createFocusAndExposureLockBadgeIfNecessary
{
  if (!self->__focusAndExposureLockBadge
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [CAMFocusLockBadge alloc];
    id v4 = -[CAMFocusLockBadge initWithFrame:](v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    focusAndExposureLockBadge = self->__focusAndExposureLockBadge;
    self->__focusAndExposureLockBadge = v4;
  }
  int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
  [(CAMViewfinderViewController *)self _embedFocusAndExposureLockBadgeWithLayoutStyle:v6];
}

- (void)_embedFocusAndExposureLockBadgeWithLayoutStyle:(int64_t)a3
{
  id v8 = [(CAMViewfinderViewController *)self viewfinderView];
  uint64_t v5 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadge];
  int64_t v6 = (void *)v5;
  if (a3 == 2) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v5;
  }
  [v8 setFocusAndExposureLockBadge:v7];
}

- (CAMFocusLockBadge)_focusAndExposureLockBadge
{
  return self->__focusAndExposureLockBadge;
}

- (BOOL)_useCreativeCameraControls
{
  return self->__useCreativeCameraControls;
}

- (void)_createReviewButtonIfNecessary
{
  id v5 = [(CAMViewfinderViewController *)self reviewButtonSource];
  int64_t v3 = [v5 reviewButton];
  if (v3 != self->__reviewButton)
  {
    int64_t v4 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(UIButton *)self->__reviewButton removeFromSuperview];
    objc_storeStrong((id *)&self->__reviewButton, v3);
    [(CAMViewfinderViewController *)self _embedReviewButtonWithLayoutStyle:v4];
  }
}

- (CAMViewfinderReviewButtonSource)reviewButtonSource
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_reviewButtonSource);
  return (CAMViewfinderReviewButtonSource *)WeakRetained;
}

- (UIButton)_reviewButton
{
  return self->__reviewButton;
}

- (void)_createImageWellIfNecessary
{
  if (!self->__imageWell
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    int64_t v4 = [[CAMImageWell alloc] initWithLayoutStyle:v3];
    imageWell = self->__imageWell;
    self->__imageWell = v4;

    [(CAMImageWell *)self->__imageWell addTarget:self action:sel__handleImageWellReleased_ forControlEvents:64];
    [(CAMImageWell *)self->__imageWell addTarget:self action:sel__handleImageWellPressed_ forControlEvents:1];
    [(CAMImageWell *)self->__imageWell setExclusiveTouch:1];
    [(CAMViewfinderViewController *)self _embedImageWellWithLayoutStyle:v3];
  }
}

- (void)_embedImageWellWithLayoutStyle:(int64_t)a3
{
  id v10 = [(CAMViewfinderViewController *)self viewfinderView];
  id v5 = [v10 bottomBar];
  int64_t v6 = [(CAMViewfinderViewController *)self _imageWell];
  BOOL v7 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v7) {
    id v9 = 0;
  }
  else {
    id v9 = v6;
  }
  [v5 setImageWell:v9];
}

- (CAMImageWell)_imageWell
{
  return self->__imageWell;
}

- (void)_createFlashButtonIfNecessary
{
  if (!self->__flashButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    int64_t v4 = [[CAMFlashButton alloc] initWithLayoutStyle:v3];
    flashButton = self->__flashButton;
    self->__flashButton = v4;

    [(CAMFlashButton *)self->__flashButton addTarget:self action:sel__handleFlashButtonChangedFlashMode forControlEvents:4096];
    [(CAMFlashButton *)self->__flashButton addTarget:self action:sel__handleFlashButtonWhileFlashUnavailable forControlEvents:0x1000000];
    [(CAMFlashButton *)self->__flashButton setExclusiveTouch:1];
    [(CAMFlashButton *)self->__flashButton setAllowsAutomaticFlash:1 needsReloadData:0];
    [(CAMFlashButton *)self->__flashButton reloadData];
    [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:0];
    [(CAMViewfinderViewController *)self _embedFlashButtonWithLayoutStyle:v3];
  }
}

- (BOOL)_isLivePhotoSupportedForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 mode];
  uint64_t v6 = [v4 device];

  return [(CAMViewfinderViewController *)self _isLivePhotoSupportedForMode:v5 device:v6];
}

- (BOOL)_isLivePhotoSupportedForMode:(int64_t)a3 device:(int64_t)a4
{
  if ((unint64_t)(a4 - 1) > 0xA) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = qword_209C794E8[a4 - 1];
  }
  uint64_t v6 = +[CAMCaptureCapabilities capabilities];
  char v7 = [v6 isLivePhotoSupportedForMode:a3 devicePosition:v5];

  return v7;
}

- (BOOL)_isHDRSupportedForGraphConfiguration:(id)a3
{
  id v3 = a3;
  id v4 = +[CAMCaptureCapabilities capabilities];
  uint64_t v5 = [v3 mode];
  uint64_t v6 = [v3 devicePosition];

  LOBYTE(v3) = [v4 isHDRSupportedForMode:v5 devicePosition:v6];
  return (char)v3;
}

- (BOOL)_isFlashOrTorchSupportedForGraphConfiguration:(id)a3
{
  id v3 = a3;
  id v4 = +[CAMCaptureCapabilities capabilities];
  if (objc_msgSend(v4, "isFlashOrTorchSupportedForMode:devicePosition:", objc_msgSend(v3, "mode"), objc_msgSend(v3, "devicePosition")))int v5 = objc_msgSend(v3, "enableStereoVideoCapture") ^ 1; {
  else
  }
    LOBYTE(v5) = 0;

  return v5;
}

- (int64_t)_desiredFlashMode
{
  return self->__desiredFlashMode;
}

- (int64_t)_desiredHDRMode
{
  return self->__desiredHDRMode;
}

- (int64_t)_flashAndHDRConflictingControl
{
  return self->__flashAndHDRConflictingControl;
}

- (void)_setResolvedFlashMode:(int64_t)a3
{
  self->__resolvedFlashMode = a3;
}

- (void)_setResolvedHDRMode:(int64_t)a3
{
  self->__resolvedHDRMode = a3;
}

- (void)_setResolvedLivePhotoMode:(int64_t)a3
{
  self->__resolvedLivePhotoMode = a3;
}

- (int64_t)_resolvedFlashMode
{
  return self->__resolvedFlashMode;
}

- (CAMFlashButton)_flashButton
{
  return self->__flashButton;
}

- (CAMRemoteShutterController)_remoteShutterController
{
  return self->__remoteShutterController;
}

- (CAMPortraitModeInstructionLabel)_portraitModeInstructionLabel
{
  return self->__portraitModeInstructionLabel;
}

- (CAMHDRButton)_HDRButton
{
  return self->__HDRButton;
}

- (BOOL)_isShowingCameraRoll
{
  v2 = [(CAMViewfinderViewController *)self _cameraRollController];
  char v3 = [v2 isCameraRollViewControllerPresented];

  return v3;
}

- (void)_updatePairedVideoCaptureOnControllerForGraphConfiguration:(id)a3 isShowingCameraRoll:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v7 = [(CAMViewfinderViewController *)self _captureController];
  LODWORD(v4) = [(CAMViewfinderViewController *)self _shouldPauseCapturingStillImagePairedVideoForGraphConfiguration:v6 isShowingCameraRoll:v4];

  if (v4) {
    [v7 pauseCapturingStillImagePairedVideo];
  }
  else {
    [v7 resumeCapturingStillImagePairedVideo];
  }
}

- (BOOL)_shouldPauseCapturingStillImagePairedVideoForGraphConfiguration:(id)a3 isShowingCameraRoll:(BOOL)a4
{
  uint64_t v12 = 0;
  id v6 = a3;
  uint64_t v7 = [v6 mode];
  uint64_t v8 = [v6 device];

  [(CAMViewfinderViewController *)self _resolvePotentiallyConflictingControlsForMode:v7 device:v8 resolvedFlashMode:0 resolvedHDRMode:0 resolvedLivePhotoMode:&v12 resolvedRAWMode:0 resolvedPhotoResolution:0];
  BOOL v9 = [(CAMViewfinderViewController *)self _isBurstEndSoundPlaying];
  if (v12) {
    BOOL v10 = a4;
  }
  else {
    BOOL v10 = 1;
  }
  return v10 || v9;
}

- (BOOL)_isBurstEndSoundPlaying
{
  return self->__burstEndSoundPlaying;
}

- (void)updateControlVisibilityAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  int v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  id v6 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v7 = [v6 captureOrientation];

  if (v3) {
    double v8 = 0.25;
  }
  else {
    double v8 = 0.0;
  }
  uint64_t v10 = MEMORY[0x263EF8330];
  uint64_t v11 = 3221225472;
  uint64_t v12 = __63__CAMViewfinderViewController_updateControlVisibilityAnimated___block_invoke;
  uint64_t v13 = &unk_263FA1F80;
  v14 = self;
  id v15 = v5;
  uint64_t v16 = v7;
  BOOL v17 = v3;
  id v9 = v5;
  +[CAMView animateIfNeededWithDuration:&v10 animations:v8];
  -[CEKLightingControl setNameBadgeHidden:animated:](self->__lightingControl, "setNameBadgeHidden:animated:", -[CAMViewfinderViewController _shouldHideLightingControlBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingControlBadgeForGraphConfiguration:orientation:", v9, v7, v10, v11, v12, v13, v14), v3);
  -[CAMViewfinderViewController _updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:](self, "_updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:", [v9 mode], 1, 1, v3);
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:v3];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v9 animated:v3];
}

- (BOOL)isPerformingReviewUsingOverlay
{
  return self->_performingReviewUsingOverlay;
}

- (BOOL)_shouldHideTopBarForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = [(CAMViewfinderViewController *)self _captureController];
  int v6 = [v5 isCapturingTimelapse];
  BOOL v7 = [(CAMViewfinderViewController *)self _isPerformingTopBarOrientationChange];
  BOOL v8 = [(CAMViewfinderViewController *)self isPerformingReviewUsingOverlay];
  int v9 = [v5 isCapturingPanorama];
  uint64_t v10 = [v4 mode];
  if (v10 == 5 || v10 == 3)
  {
    int v11 = [(CAMViewfinderViewController *)self _useCreativeCameraControls];
    uint64_t v12 = [(CAMViewfinderViewController *)self _topBar];
    uint64_t v13 = [v12 sharedLibraryButton];
    if (v13)
    {
      v14 = (void *)v13;
      BOOL v15 = [(CAMViewfinderViewController *)self _shouldShowSharedLibraryButtonForGraphConfiguration:v4];

      v11 |= v15;
    }
    else
    {
    }
    if ((v11 ^ 1 | v6 | v9)) {
      goto LABEL_9;
    }
  }
  else if ((v6 | v9))
  {
LABEL_9:
    char v16 = 1;
    goto LABEL_10;
  }
  char v16 = v7 || v8;
LABEL_10:

  return v16;
}

- (BOOL)_isPerformingTopBarOrientationChange
{
  return self->__performingTopBarOrientationChange;
}

- (BOOL)_shouldHideFlashButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = [(CAMViewfinderViewController *)self _captureController];
  int v6 = [(CAMViewfinderViewController *)self _topBar];
  char v7 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  char v8 = [v5 isCapturingVideo];
  char v9 = [v5 isCapturingTimelapse];
  BOOL v10 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  BOOL v11 = [(CAMViewfinderViewController *)self _isFlashOrTorchSupportedForGraphConfiguration:v4];
  if ((v8 & 1) != 0 || (v9 & 1) != 0 || v10)
  {
    uint64_t v13 = [(CAMViewfinderViewController *)self _controlDrawer];
    BOOL v12 = v13 == 0;
  }
  else
  {
    BOOL v12 = 0;
  }
  char v14 = v7 | !v11;
  int v15 = 1;
  if ((v14 & 1) == 0 && !v12) {
    int v15 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera];
  }
  char v16 = [(CAMViewfinderViewController *)self _flashButton];
  BOOL v17 = [v6 flashButton];

  if (v16 == v17) {
    v15 |= [v6 shouldHideFlashButtonForGraphConfiguration:v4];
  }

  return v15;
}

- (BOOL)_isCapturingFromTimer
{
  return self->__capturingFromTimer;
}

- (BOOL)_isTransitioningToCreativeCamera
{
  return [(CAMViewfinderViewController *)self messagesTransitionState] == 1;
}

- (int64_t)messagesTransitionState
{
  return self->_messagesTransitionState;
}

- (BOOL)_shouldHideHDRButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = [(CAMViewfinderViewController *)self _topBar];
  BOOL v6 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  char v7 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  BOOL v8 = [(CAMViewfinderViewController *)self _isHDRSupportedForGraphConfiguration:v4];
  BOOL v9 = [(CAMViewfinderViewController *)self _wantsHDRControlsVisible];
  int v10 = 1;
  if (v8 && !v6 && (v7 & 1) == 0) {
    int v10 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera]
  }
       || !v9;
  BOOL v11 = [(CAMViewfinderViewController *)self _HDRButton];
  BOOL v12 = [v5 HDRButton];

  if (v11 == v12) {
    v10 |= [v5 shouldHideHDRButtonForGraphConfiguration:v4];
  }

  return v10;
}

- (CAMElapsedTimeView)_elapsedTimeView
{
  return self->__elapsedTimeView;
}

- (BOOL)_shouldHideLivePhotoButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = [(CAMViewfinderViewController *)self _topBar];
  char v6 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  BOOL v7 = [(CAMViewfinderViewController *)self _isLivePhotoSupportedForGraphConfiguration:v4];
  int v8 = 1;
  if ((v6 & 1) == 0 && v7) {
    int v8 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera];
  }
  BOOL v9 = [(CAMViewfinderViewController *)self _livePhotoButton];
  int v10 = [v5 livePhotoButton];

  if (v9 == v10) {
    v8 |= [v5 shouldHideLivePhotoButtonForGraphConfiguration:v4];
  }

  return v8;
}

- (CAMLivePhotoButton)_livePhotoButton
{
  return self->__livePhotoButton;
}

- (BOOL)_shouldHideFlipButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = +[CAMCaptureCapabilities capabilities];
  char v27 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  if ([v6 isBackCameraSupported]) {
    int v26 = [v6 isFrontCameraSupported];
  }
  else {
    int v26 = 0;
  }
  char v25 = [v5 isCapturingVideo];
  char v24 = [v5 isCapturingTimelapse];
  BOOL v23 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v22 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  char v7 = 0;
  switch([v4 mode])
  {
    case 0:
    case 1:
    case 4:
    case 5:
      char v7 = 1;
      goto LABEL_14;
    case 2:
      if (![v6 isFrontSlomoSupported]) {
        goto LABEL_13;
      }
      char v8 = [v6 isBackSlomoSupported];
      goto LABEL_12;
    case 6:
      if (![v6 isFrontPortraitModeSupported]) {
        goto LABEL_13;
      }
      char v8 = [v6 isBackPortraitModeSupported];
      goto LABEL_12;
    case 7:
      if ([v6 isFrontCinematicModeSupported])
      {
        char v8 = [v6 isBackCinematicModeSupported];
LABEL_12:
        char v7 = v8;
      }
      else
      {
LABEL_13:
        char v7 = 0;
      }
LABEL_14:
      char v9 = [v5 isCapturingBurst];
      int v10 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      if (v10) {
        char v11 = v9;
      }
      else {
        char v11 = 0;
      }

      char v12 = [v4 enableStereoVideoCapture];
      BOOL v13 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
      char v14 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      char v15 = [v14 smartStyleControlsVisible];

      char v16 = v7 ^ 1;
      if (!v26) {
        char v16 = 1;
      }
      char v17 = v16 | v25 | v11 | v24 | v23 | v27 | v12 | v22 | v13 | v15;
      double v18 = [(CAMViewfinderViewController *)self _topBar];
      v19 = [(CAMViewfinderViewController *)self _flipButton];
      int v20 = [v18 flipButton];

      if (v19 == v20) {
        v17 |= [v18 shouldHideFlipButtonForGraphConfiguration:v4];
      }

      return v17 & 1;
    default:
      goto LABEL_14;
  }
}

- (BOOL)_shouldHideModeDialForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = [(CAMViewfinderViewController *)self _captureController];
  LOBYTE(self) = -[CAMViewfinderViewController _shouldHideModeDialForGraphConfiguration:isCapturingBurst:](self, "_shouldHideModeDialForGraphConfiguration:isCapturingBurst:", v4, [v5 isCapturingBurst]);

  return (char)self;
}

- (BOOL)_shouldHideUtilityBarForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = +[CAMCaptureCapabilities capabilities];
  char v6 = [v5 isCTMSupported];

  if (v6)
  {
    LOBYTE(v7) = 1;
  }
  else
  {
    char v8 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
    BOOL v9 = [(CAMViewfinderViewController *)self _isShowingFilterScrubber];
    int v10 = v9 & [(CAMViewfinderViewController *)self _shouldUseFiltersForGraphConfiguration:v4];
    BOOL v11 = [(CAMViewfinderViewController *)self _isShowingPortraitApertureSlider];
    int v12 = v10 | v11 | [(CAMViewfinderViewController *)self _isShowingPortraitIntensitySlider];
    char v7 = [(CAMViewfinderViewController *)self _utilityBar];
    BOOL v13 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v7];

    LOBYTE(v7) = 1;
    if (v12 == 1 && (v8 & 1) == 0) {
      LODWORD(v7) = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera]|| v13;
    }
  }

  return (char)v7;
}

- (BOOL)_isShowingFilterScrubber
{
  return self->__showingFilterScrubber;
}

- (BOOL)_shouldUseFiltersForGraphConfiguration:(id)a3
{
  unint64_t v3 = [a3 mode];
  if (v3 > 6 || ((1 << v3) & 0x51) == 0) {
    return 0;
  }
  id v4 = +[CAMCaptureCapabilities capabilities];
  char v5 = [v4 isLiveFilteringSupported];

  return v5;
}

- (BOOL)_shouldHideImageWellForGraphConfiguration:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _captureController];
  char v17 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  char v5 = [v4 isCapturingVideo];
  char v6 = [v4 isCapturingPanorama];
  char v7 = [v4 isCapturingTimelapse];
  BOOL v8 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v9 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  int v10 = [v4 isCapturingBurst];
  BOOL v11 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  if (v11) {
    unsigned int v12 = v10 & ~[(CAMViewfinderViewController *)self _capturingFromPhysicalButton];
  }
  else {
    LOBYTE(v12) = 0;
  }

  BOOL v13 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
  char v14 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v15 = [v14 smartStyleControlsVisible];

  return (v17 | v5 | v12 | v6 | v7 | v8 | v9 | v13 | v15) & 1;
}

- (BOOL)_shouldHideReviewButtonForGraphConfiguration:(id)a3
{
  unint64_t v3 = self;
  id v4 = [(CAMViewfinderViewController *)self _captureController];
  char v5 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  char v6 = [v4 isCapturingVideo];
  char v7 = [v4 isCapturingPanorama];
  char v8 = [v4 isCapturingTimelapse];
  BOOL v9 = [(CAMViewfinderViewController *)v3 _isCapturingFromTimer];
  LOBYTE(v3) = v5 | v6 | v7 | v8 | v9 | [(CAMViewfinderViewController *)v3 _isInPopoverPresentation];

  return (char)v3;
}

- (BOOL)_shouldHideCreativeCameraButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  char v5 = [(CAMViewfinderViewController *)self _captureController];
  uint64_t v6 = [v4 mode];

  char v18 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  char v7 = [v5 isCapturingVideo];
  char v8 = [v5 isCapturingPanorama];
  char v9 = [v5 isCapturingTimelapse];
  BOOL v10 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v11 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  int64_t v12 = [(CAMViewfinderViewController *)self _currentHalfPressSpotlight];
  unint64_t v13 = v6 - 2;
  char v14 = [(CAMViewfinderViewController *)self view];
  char v15 = CEKIsViewInMultitask();

  BOOL v16 = 1;
  if (v13 >= 8 && (v18 & 1) == 0 && (v7 & 1) == 0 && (v8 & 1) == 0 && (v9 & 1) == 0 && !v10 && !v11)
  {
    if (v12) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v15;
    }
  }

  return v16;
}

- (BOOL)_shouldHideDoneButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  char v5 = [(CAMViewfinderViewController *)self _captureController];
  int v20 = [v5 isCapturingVideo];
  int v6 = [v5 isCapturingPanorama];
  int v7 = [v5 isCapturingTimelapse];
  BOOL v8 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v9 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  BOOL v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v11 = [v10 controlStatusBar];
  char v12 = [v11 isControlExpanded];

  unint64_t v13 = [(CAMViewfinderViewController *)self _doneButton];
  char v14 = [(CAMViewfinderViewController *)self _topBar];
  char v15 = [v14 doneButton];

  if (v13 == v15) {
    char v16 = [v14 shouldHideDoneButtonForGraphConfiguration:v4];
  }
  else {
    char v16 = 0;
  }
  char v17 = v4;
  if ((v20 | v6 | v7 | v8 | v9)) {
    char v18 = 1;
  }
  else {
    char v18 = v16 | v12;
  }

  return v18;
}

- (PUReviewScreenDoneButton)_doneButton
{
  return self->__doneButton;
}

- (BOOL)_shouldHideShutterButtonForGraphConfiguration:(id)a3
{
  unint64_t v4 = [(CAMViewfinderViewController *)self messagesTransitionState] - 2;
  char v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v6 = [v5 smartStyleControlsVisible];

  if (v4 < 3) {
    return 1;
  }
  else {
    return v6;
  }
}

- (CAMMotionController)_motionController
{
  return self->__motionController;
}

- (BOOL)_shouldHideStillDuringVideoButtonForGraphConfiguration:(id)a3
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _captureController];
  char v4 = [v3 isCapturingVideo] ^ 1;

  return v4;
}

- (BOOL)_shouldHideFilterButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  char v5 = [(CAMViewfinderViewController *)self _topBar];
  char v6 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  BOOL v7 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  int v8 = 1;
  if ([(CAMViewfinderViewController *)self _shouldUseFiltersForGraphConfiguration:v4]&& !v7&& (v6 & 1) == 0)
  {
    int v8 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera];
  }
  BOOL v9 = [(CAMViewfinderViewController *)self _filterButton];
  BOOL v10 = [v5 filterButton];

  if (v9 == v10) {
    v8 |= [v5 shouldHideFilterButtonForGraphConfiguration:v4];
  }

  return v8;
}

- (CAMFilterButton)_filterButton
{
  return self->__filterButton;
}

- (BOOL)_shouldHideFilterNameBadgeForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _isShowingFilterScrubber];
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldUseFiltersForGraphConfiguration:v4];
  BOOL v7 = [(CAMViewfinderViewController *)self _isShowingBurstIndicatorView];
  char v8 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  BOOL v9 = [(CAMViewfinderViewController *)self _filterNameBadge];
  BOOL v10 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v9];

  BOOL v11 = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:v4];
  BOOL result = 1;
  if (v6 && v5 && !v7 && (v8 & 1) == 0 && !v10) {
    return [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera]
  }
        || v11;
  return result;
}

- (BOOL)_isShowingBurstIndicatorView
{
  v2 = [(CAMViewfinderViewController *)self _burstIndicatorView];
  [v2 alpha];
  BOOL v4 = v3 > 0.0;

  return v4;
}

- (CAMBurstIndicatorView)_burstIndicatorView
{
  return self->__burstIndicatorView;
}

- (CAMFilterNameBadge)_filterNameBadge
{
  return self->__filterNameBadge;
}

- (BOOL)_shouldHidePanoramaViewForGraphConfiguration:(id)a3
{
  BOOL v4 = (void *)MEMORY[0x263F82438];
  id v5 = a3;
  char v6 = [v4 shouldMakeUIForDefaultPNG];
  uint64_t v7 = [v5 mode];

  char v8 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  char v9 = [v8 isViewfinderClosed];
  if (v7 == 3) {
    char v10 = v6;
  }
  else {
    char v10 = 1;
  }
  char v11 = v10 | v9;

  return v11;
}

- (CAMClosedViewfinderController)_closedViewfinderController
{
  return self->__closedViewfinderController;
}

- (CAMPanoramaViewController)_panoramaViewController
{
  return self->__panoramaViewController;
}

- (BOOL)_shouldHideZoomSliderForGraphConfiguration:(id)a3
{
  return [(CAMViewfinderViewController *)self _shouldHideZoomSliderForGraphConfiguration:a3 ignoreExpiredVisibilityTimer:0];
}

- (BOOL)_shouldHideZoomSliderForGraphConfiguration:(id)a3 ignoreExpiredVisibilityTimer:(BOOL)a4
{
  id v6 = a3;
  char v7 = [(CAMViewfinderViewController *)self _wantsZoomSliderForGraphConfiguration:v6];
  char v8 = [(CAMViewfinderViewController *)self _captureController];
  char v9 = [v8 isCapturingBurst];
  char v10 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  BOOL v11 = !a4
     && [(CAMZoomSlider *)self->__zoomSlider shouldHideForExpiredVisibilityTimer];
  BOOL v12 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  char v13 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v6];

  char v14 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v15 = [v14 isSemanticStyleControlVisible];

  char v16 = v11 | ~v7 | v9 | v12 | v10 | ~v13 | v15 | [(CAMViewfinderViewController *)self _wantsVisualTextAnalysis];
  return v16 & 1;
}

- (BOOL)_isZoomAllowedForGraphConfiguration:(id)a3
{
  id v3 = a3;
  BOOL v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = objc_msgSend(v4, "isZoomAllowedForMode:device:videoConfiguration:videoStabilizationStrength:", objc_msgSend(v3, "mode"), objc_msgSend(v3, "device"), objc_msgSend(v3, "videoConfiguration"), objc_msgSend(v3, "videoStabilizationStrength"));

  if (v5) {
    int v6 = [v3 enableStereoVideoCapture] ^ 1;
  }
  else {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (BOOL)_shouldHideZoomControlForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = [(CAMViewfinderViewController *)self _captureController];
  int v30 = [v5 isCapturingBurst];
  int v6 = [v5 isCapturingVideo];
  int v7 = [v5 isCapturingTimelapse];
  int v8 = [v5 isCapturingPanorama];
  BOOL v29 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v28 = [(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v4];
  BOOL v9 = [(CAMViewfinderViewController *)self _zoomControlReconfiguresGraphConfiguration:v4];
  if (!v9 | v6) {
    int v10 = v9;
  }
  else {
    int v10 = v7 | v8;
  }
  int v11 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  BOOL v12 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  BOOL v27 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v4];
  char v26 = [(CAMViewfinderViewController *)self _shouldHideLightingControlForGraphConfiguration:v4];
  char v13 = [(CAMViewfinderViewController *)self _targetLightingControl];
  char v25 = [v13 isExpanded];
  char v14 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v24 = [v14 isFilterScrubberVisible];

  char v15 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v16 = [v15 isSemanticStyleControlVisible];

  char v17 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v18 = [v17 smartStyleControlsVisible];

  BOOL v19 = [(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:v4];
  if ([(CAMViewfinderViewController *)self _wantsVisualTextAnalysis])
  {
    int v20 = [(CAMViewfinderViewController *)self _textInteractionInsert];
    BOOL v21 = v20 != 0;
  }
  else
  {
    BOOL v21 = 0;
  }
  char v22 = 1;
  if (((!v28 | v30 | v29 | v10 | v11 | v12) & 1) == 0 && v27) {
    char v22 = v25 & ~v26 | v24 | v19 | v16 | v18 | v21;
  }

  return v22 & 1;
}

- (BOOL)_shouldHideLightingControlForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v24 = [(CAMViewfinderViewController *)self _wantsLightingControlForGraphConfiguration:v4];
  BOOL v23 = [(CAMViewfinderViewController *)self _isShowingFilterScrubber];
  BOOL v5 = [(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:v4];
  int v6 = [(CAMViewfinderViewController *)self _zoomControl];
  int v7 = [v6 isShowingZoomDial];

  BOOL v8 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  BOOL v9 = +[CAMCaptureCapabilities capabilities];
  uint64_t v10 = [v4 mode];
  uint64_t v11 = [v4 devicePosition];
  uint64_t v12 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  int v14 = objc_msgSend(v9, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v10, v11, v12, v13);

  BOOL v15 = [(CAMViewfinderViewController *)self _shouldUsePhotoModePortraitEffect];
  char v16 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v17 = [v16 smartStyleControlsVisible];

  char v18 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v19 = [v18 isSystemOverlayVisible];

  int64_t v20 = [(CAMViewfinderViewController *)self _lightingControlLayoutPositionForGraphConfiguration:v4];
  BOOL result = 1;
  if (v24 && !v23 && !v5 && !v7 && !v8 && v14 ^ 1 | v15)
  {
    if (v20 == 2) {
      char v22 = v19;
    }
    else {
      char v22 = 0;
    }
    return v17 | v22;
  }
  return result;
}

- (BOOL)_shouldHideLightingControlBadgeForGraphConfiguration:(id)a3 orientation:(int64_t)a4
{
  unint64_t v5 = a4 - 3;
  id v6 = a3;
  int64_t v7 = [(CAMViewfinderViewController *)self _layoutStyle];
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:v6];

  return v5 < 2 || v7 == 1 || v8;
}

- (BOOL)_shouldHideGridViewForGraphConfiguration:(id)a3
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera];
  id v4 = +[CAMUserPreferences preferences];
  char v5 = [v4 shouldShowGridView];

  return v3 | v5 ^ 1;
}

- (BOOL)_shouldHideLevelViewForGraphConfiguration:(id)a3
{
  BOOL v4 = -[CAMViewfinderViewController _shouldCreateLevelViewForMode:](self, "_shouldCreateLevelViewForMode:", [a3 mode]);
  BOOL v5 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  if (!v4 || v5) {
    return 1;
  }
  return [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera];
}

- (void)_updateLevelMotionTracking
{
  id v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v3 = -[CAMViewfinderViewController _shouldMonitorDeviceMotionForGraphConfiguration:](self, "_shouldMonitorDeviceMotionForGraphConfiguration:");
  BOOL v4 = [(CAMViewfinderViewController *)self _motionController];
  BOOL v5 = v4;
  if (v3)
  {
    id v6 = [(CAMViewfinderViewController *)self _levelViewModel];
    [v5 beginUpdatingLevelViewModel:v6];
  }
  else
  {
    [v4 endUpdatingActiveLevelViewModel];
  }
}

- (BOOL)_shouldMonitorDeviceMotionForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int64_t v5 = +[CAMApplication appOrPlugInState];
  id v6 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  char v7 = [v6 isViewfinderClosed];
  BOOL v8 = [(CAMViewfinderViewController *)self _levelViewModel];
  BOOL v9 = [(CAMViewfinderViewController *)self _shouldHideLevelViewForGraphConfiguration:v4];
  LOBYTE(self) = [(CAMViewfinderViewController *)self _shouldHideHorizonLevelViewForGraphConfiguration:v4];

  if (v9 & self) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = (v8 != 0) & ~v7;
  }
  if (v5) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v10;
  }

  return v11;
}

- (CAMLevelViewModel)_levelViewModel
{
  return self->__levelViewModel;
}

- (int64_t)_sanitizedVideoConfigurationForMode:(int64_t)a3 device:(int64_t)a4
{
  if ([(CAMViewfinderViewController *)self emulationMode])
  {
    return [(CAMViewfinderViewController *)self imagePickerVideoConfiguration];
  }
  else
  {
    BOOL v8 = +[CAMUserPreferences preferences];
    if ((unint64_t)(a4 - 1) > 0xA) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = qword_209C794E8[a4 - 1];
    }
    BOOL v10 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:a3 devicePosition:v9];
    int64_t v11 = 0;
    BOOL v12 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
    switch(a3)
    {
      case 1:
        if ([(CAMViewfinderViewController *)self _videoConfigurationOverride]) {
          uint64_t v13 = [(CAMViewfinderViewController *)self _videoConfigurationOverride];
        }
        else {
          uint64_t v13 = [v8 videoConfiguration];
        }
        if (v10) {
          uint64_t v16 = 7;
        }
        else {
          uint64_t v16 = v13;
        }
        uint64_t v17 = 1;
        goto LABEL_28;
      case 2:
        if ([(CAMViewfinderViewController *)self _slomoConfigurationOverride]) {
          uint64_t v14 = [(CAMViewfinderViewController *)self _slomoConfigurationOverride];
        }
        else {
          uint64_t v14 = [v8 slomoConfiguration];
        }
        int64_t v11 = +[CAMCaptureConfiguration sanitizeVideoConfigurationForDesiredConfiguration:v14 mode:2 device:a4 spatialVideoEnabled:v10 trueVideoEnabled:v12];
        if (!v11)
        {
          char v18 = +[CAMCaptureCapabilities capabilities];
          uint64_t v19 = [v8 videoEncodingBehaviorForConfiguration:0 mode:2 desiredProResVideoMode:0 outputToExternalStorage:0 spatialVideoEnabled:v10];
          int v20 = [v8 HDR10BitVideoEnabled];
          char v21 = 0;
          if (v20) {
            char v21 = [v18 isHDR10BitVideoSupportedForMode:2];
          }
          LOBYTE(v22) = v21;
          int64_t v11 = [v18 resolvedVideoConfigurationForMode:2 device:a4 videoEncodingBehavior:v19 videoConfiguration:0 outputToExternalStorage:0 spatialVideoEnabled:v10 prefersHDR10BitVideo:v22];
        }
        break;
      case 7:
        if ([(CAMViewfinderViewController *)self _cinematicConfigurationOverride]) {
          uint64_t v15 = [(CAMViewfinderViewController *)self _cinematicConfigurationOverride];
        }
        else {
          uint64_t v15 = [v8 cinematicConfiguration];
        }
        uint64_t v16 = v15;
        uint64_t v17 = 7;
        goto LABEL_28;
      case 8:
        uint64_t v16 = 7;
        uint64_t v17 = 8;
LABEL_28:
        int64_t v11 = +[CAMCaptureConfiguration sanitizeVideoConfigurationForDesiredConfiguration:v16 mode:v17 device:a4 spatialVideoEnabled:v10 trueVideoEnabled:v12];
        break;
      default:
        break;
    }

    return v11;
  }
}

- (BOOL)_shouldHideTimerButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _topBar];
  char v6 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  char v7 = +[CAMCaptureCapabilities capabilities];
  int v8 = objc_msgSend(v7, "isTimerSupportedForMode:", objc_msgSend(v4, "mode"));

  int v9 = 1;
  if (v8 && (v6 & 1) == 0) {
    int v9 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera];
  }
  BOOL v10 = [(CAMViewfinderViewController *)self _timerButton];
  int64_t v11 = [v5 timerButton];

  if (v10 == v11) {
    v9 |= [v5 shouldHideTimerButtonForGraphConfiguration:v4];
  }

  return v9;
}

- (CAMTimerButton)_timerButton
{
  return self->__timerButton;
}

- (BOOL)_shouldHideTimerIndicatorViewForGraphConfiguration:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _shouldHideTimerButtonForGraphConfiguration:a3];
  return v4 | ![(CAMViewfinderViewController *)self _isCapturingFromTimer];
}

- (void)_updateBadgeVisibilityAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  v38 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldHideFlashBadgeForGraphConfiguration:v5];
  BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideHDRBadgeForGraphConfiguration:v5];
  BOOL v40 = [(CAMViewfinderViewController *)self _shouldHideLivePhotoBadgeForGraphConfiguration:v5];
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:v5];
  BOOL v39 = [(CAMViewfinderViewController *)self _shouldHideFocusAndExposureLockBadgeForGraphConfiguration:v5];
  int v9 = [(CAMViewfinderViewController *)self _motionController];
  BOOL v10 = -[CAMViewfinderViewController _shouldHideLightingNameBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingNameBadgeForGraphConfiguration:orientation:", v5, [v9 captureOrientation]);

  BOOL v11 = [(CAMViewfinderViewController *)self shouldLayoutLightingNameBadgeAtBottom];
  BOOL v12 = [(CAMViewfinderViewController *)self _shouldShowSharedLibraryBadgeForGraphConfiguration:v5];
  HIDWORD(v35) = [(CAMViewfinderViewController *)self _shouldShowVideoStabilizationBadgeForGraphConfiguration:v5];
  uint64_t v13 = [(CAMViewfinderViewController *)self _captureController];
  LODWORD(v35) = [v13 videoCapturePaused];

  uint64_t v14 = [MEMORY[0x263EFF980] array];
  if (!v6)
  {
    uint64_t v15 = [(CAMViewfinderViewController *)self _flashBadge];

    if (v15)
    {
      uint64_t v16 = [(CAMViewfinderViewController *)self _flashBadge];
      [v14 addObject:v16];
    }
  }
  if (!v7)
  {
    uint64_t v17 = [(CAMViewfinderViewController *)self _HDRBadge];

    if (v17)
    {
      char v18 = [(CAMViewfinderViewController *)self _HDRBadge];
      [v14 addObject:v18];
    }
  }
  if (!v40)
  {
    uint64_t v19 = [(CAMViewfinderViewController *)self _livePhotoBadge];

    if (v19)
    {
      int v20 = [(CAMViewfinderViewController *)self _livePhotoBadge];
      [v14 addObject:v20];
    }
  }
  if (!v8)
  {
    char v21 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge];

    if (v21)
    {
      uint64_t v22 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge];
      [v14 addObject:v22];
    }
  }
  if (!v39)
  {
    BOOL v23 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadge];

    if (v23)
    {
      BOOL v24 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadge];
      [v14 addObject:v24];
    }
  }
  if (!v10 && !v11)
  {
    char v25 = [(CAMViewfinderViewController *)self _lightingNameBadge];

    if (v25)
    {
      char v26 = [(CAMViewfinderViewController *)self _lightingNameBadge];
      [v14 addObject:v26];
    }
  }
  if (v12)
  {
    BOOL v27 = [(CAMViewfinderViewController *)self _sharedLibraryBadge];

    if (v27)
    {
      BOOL v28 = [(CAMViewfinderViewController *)self _sharedLibraryBadge];
      [v14 addObject:v28];
    }
  }
  objc_msgSend(v38, "setVisibleTopBadges:animated:", v14, v3, v35);
  if (v3) {
    double v29 = 0.25;
  }
  else {
    double v29 = 0.0;
  }
  v41[0] = MEMORY[0x263EF8330];
  v41[1] = 3221225472;
  v41[2] = __62__CAMViewfinderViewController__updateBadgeVisibilityAnimated___block_invoke;
  v41[3] = &unk_263FA0320;
  v41[4] = self;
  id v42 = v5;
  BOOL v43 = v11;
  BOOL v44 = v10;
  id v30 = v5;
  +[CAMView animateIfNeededWithDuration:v41 animations:v29];
  uint64_t v31 = 2;
  if (v40) {
    uint64_t v31 = 0;
  }
  if (!v39) {
    v31 |= 4uLL;
  }
  if (v12) {
    v31 |= 0x10uLL;
  }
  if (v37) {
    v31 |= 0x20uLL;
  }
  if (v36) {
    uint64_t v32 = v31 | 0x40;
  }
  else {
    uint64_t v32 = v31;
  }
  v33 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  v34 = [v33 badgeTray];
  [v34 setVisibleBadges:v32 animated:v3];
}

- (BOOL)_shouldHideFlashBadgeForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingBurst];
  char v7 = [v5 isCapturingVideo];
  char v8 = [v5 isFlashActive];
  char v9 = [v5 isTorchActive];
  int64_t v10 = [(CAMViewfinderViewController *)self _resolvedFlashMode];
  unint64_t v11 = [v4 mode];
  if (v11 > 8)
  {
    char v14 = 0;
  }
  else if (((1 << v11) & 0x186) != 0)
  {
    int64_t v12 = [(CAMViewfinderViewController *)self _resolvedTorchMode];
    if (v12 == 2) {
      char v13 = v9;
    }
    else {
      char v13 = 0;
    }
    if (v12 == 1) {
      char v14 = 1;
    }
    else {
      char v14 = v13;
    }
  }
  else
  {
    if (v10 == 2) {
      char v15 = v8;
    }
    else {
      char v15 = 0;
    }
    if (v10 == 1) {
      char v15 = 1;
    }
    if (((1 << v11) & 0x51) != 0) {
      char v14 = v15;
    }
    else {
      char v14 = 0;
    }
  }
  BOOL v16 = [(CAMViewfinderViewController *)self _isShowingBurstIndicatorView];
  uint64_t v17 = [(CAMViewfinderViewController *)self _flashBadge];
  BOOL v18 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v17];

  BOOL v19 = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:v4];
  char v20 = v6 | v14 ^ 1 | v7;
  LOBYTE(v21) = 1;
  if ((v20 & 1) == 0 && !v16 && !v18) {
    int v21 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera]
  }
       || v19;

  return v21;
}

- (CAMFlashBadge)_flashBadge
{
  return self->__flashBadge;
}

- (BOOL)_shouldHideHDRBadgeForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  int64_t v6 = [(CAMViewfinderViewController *)self _resolvedHDRMode];
  char v20 = v5;
  char v7 = [v5 isHDRSuggested];
  BOOL v8 = [(CAMViewfinderViewController *)self _isHDRSupportedForGraphConfiguration:v4];
  char v9 = v7 ^ 1;
  if (v6 != 2) {
    char v9 = 1;
  }
  if (v6 == 1) {
    char v10 = 0;
  }
  else {
    char v10 = v9;
  }
  BOOL v11 = [(CAMViewfinderViewController *)self _shouldHideFlashBadgeForGraphConfiguration:v4];
  BOOL v12 = [(CAMViewfinderViewController *)self _isShowingBurstIndicatorView];
  char v13 = [(CAMViewfinderViewController *)self _HDRBadge];
  BOOL v14 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v13];

  uint64_t v17 = +[CAMCaptureCapabilities capabilities];
  int v15 = [v17 isSmartHDRSupported];

  BOOL v16 = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:v4];
  LOBYTE(v17) = 1;
  if (!v8 || (v10 & 1) != 0 || !v11 || v12)
  {
    BOOL v18 = v20;
  }
  else
  {
    BOOL v18 = v20;
    if (!v14) {
      LODWORD(v17) = ([(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera]|| v16) | v15;
    }
  }

  return (char)v17;
}

- (int64_t)_resolvedHDRMode
{
  return self->__resolvedHDRMode;
}

- (CAMHDRBadge)_HDRBadge
{
  return self->__HDRBadge;
}

- (BOOL)_shouldHideLivePhotoBadgeForGraphConfiguration:(id)a3
{
  id v13 = a3;
  id v4 = [(CAMViewfinderViewController *)self _captureController];
  int v5 = [v4 isCapturingLivePhotoVideo];
  char v6 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  BOOL v7 = [(CAMViewfinderViewController *)self _isLivePhotoSupportedForGraphConfiguration:v13];
  BOOL v8 = [(CAMViewfinderViewController *)self _timerCache];
  int v9 = [v8 isRunningTimerForKey:&unk_26BDDDDA0];

  char v10 = [(CAMViewfinderViewController *)self _livePhotoBadge];
  BOOL v11 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v10];

  BOOL v12 = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:v13];
  LOBYTE(v13) = 1;
  if ((v6 & 1) == 0 && v7 && (((v5 | v9) ^ 1 | v11) & 1) == 0) {
    LODWORD(v13) = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera]|| v12;
  }

  return (char)v13;
}

- (CAMLivePhotoBadge)_livePhotoBadge
{
  return self->__livePhotoBadge;
}

- (BOOL)_shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 mode];
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:v4];
  BOOL v7 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge];
  BOOL v8 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v7];

  char v9 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  char v10 = +[CAMCaptureCapabilities capabilities];
  char v11 = [v10 arePortraitEffectsSupported];

  BOOL v12 = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:v4];
  if (v5 == 6) {
    char v13 = v9;
  }
  else {
    char v13 = 1;
  }
  return v13 | v8 | v11 | v6 | v12;
}

- (CAMShallowDepthOfFieldBadge)_shallowDepthOfFieldBadge
{
  return self->__shallowDepthOfFieldBadge;
}

- (BOOL)_shouldHideFocusAndExposureLockBadgeForGraphConfiguration:(id)a3
{
  previewViewController = self->__previewViewController;
  id v5 = a3;
  if ([(CAMPreviewViewController *)previewViewController isFocusLockedByUser]
    || [(CAMPreviewViewController *)self->__previewViewController isExposureLockedByUser])
  {
    char v6 = 0;
  }
  else
  {
    BOOL v7 = [(CAMViewfinderViewController *)self _previewViewController];
    char v6 = [v7 isFocusLockedOnCinematicSubject] ^ 1;
  }
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldHideLivePhotoBadgeForGraphConfiguration:v5];
  BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowSharedLibraryBadgeForGraphConfiguration:v5];
  BOOL v10 = [(CAMViewfinderViewController *)self _shouldShowVideoStabilizationBadgeForGraphConfiguration:v5];
  char v11 = [(CAMViewfinderViewController *)self _livePhotoBadge];
  BOOL v12 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v11];

  BOOL v13 = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:v5];
  BOOL result = 1;
  if ((v6 & 1) == 0 && v8 && !v12) {
    return [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera]
  }
        || v13
        || v9
        || v10;
  return result;
}

- (BOOL)_shouldHidePortraitModeInstructionLabelForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 mode];
  if ((unint64_t)(v5 - 6) < 2)
  {
    BOOL v6 = 0;
    BOOL v7 = 1;
  }
  else if (v5)
  {
    BOOL v6 = 0;
    BOOL v7 = v5 == 1 && ([v4 videoStabilizationStrength] & 0xFFFFFFFFFFFFFFFELL) == 2;
  }
  else
  {
    BOOL v8 = +[CAMCaptureCapabilities capabilities];
    uint64_t v9 = [v4 mode];
    uint64_t v10 = [v4 devicePosition];
    uint64_t v11 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
    int v13 = objc_msgSend(v8, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v9, v10, v11, v12);
    BOOL v14 = +[CAMCaptureCapabilities capabilities];
    char v15 = [v14 portraitInPhotoModeBehavior];

    BOOL v7 = 0;
    if (v13 && (v15 & 1) != 0) {
      BOOL v7 = [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion];
    }
    BOOL v6 = [(CAMViewfinderViewController *)self isRecording];
  }
  BOOL v16 = +[CAMPortraitModeInstructionLabel shouldDisplayInstructionForShallowDepthOfFieldStatus:[(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus]];
  BOOL v17 = [(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:v4];
  char v18 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  BOOL v19 = [(CAMViewfinderViewController *)self _portraitModeInstructionLabel];
  BOOL v20 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v19];

  uint64_t v21 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v22 = [(id)v21 isSemanticStyleControlVisible];

  BOOL v23 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  LOBYTE(v21) = [v23 isSmartStylePickerVisible];

  return ((!v7 || !v16) | v18 | v20 | v17 | v6 | v22 | v21) & 1;
}

- (int64_t)_shallowDepthOfFieldStatus
{
  return self->__shallowDepthOfFieldStatus;
}

- (BOOL)_shouldHideQRCodeInstructionLabelForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 mode];
  BOOL v6 = [(CAMViewfinderViewController *)self _previewViewController];
  uint64_t v7 = [v4 devicePosition];

  BOOL v8 = [v6 cachedMRCResults];
  LOBYTE(v7) = +[CAMQRCodeInstructionLabel shouldDisplayInstructionForMRCResults:v8 devicePosition:v7];
  uint64_t v9 = [(CAMViewfinderViewController *)self _qrCodeInstructionLabel];
  BOOL v10 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v9];

  char v11 = v7 ^ 1;
  if ((v5 & 0xFFFFFFFFFFFFFFFBLL) != 0) {
    char v11 = 1;
  }
  if (v10) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v11;
  }

  return v12;
}

- (CAMQRCodeInstructionLabel)_qrCodeInstructionLabel
{
  return self->__qrCodeInstructionLabel;
}

- (BOOL)_shouldHideLightingNameBadgeForGraphConfiguration:(id)a3 orientation:(int64_t)a4
{
  id v6 = a3;
  BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideLightingControlForGraphConfiguration:v6];
  BOOL v8 = [(CAMViewfinderViewController *)self _isShowingBurstIndicatorView];
  char v9 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  BOOL v10 = [(CAMViewfinderViewController *)self _lightingNameBadge];
  BOOL v11 = [(CAMViewfinderViewController *)self _isMenuButtonConflictingWithView:v10];

  LOBYTE(a4) = [(CAMViewfinderViewController *)self _shouldHideLightingControlBadgeForGraphConfiguration:v6 orientation:a4];
  LOBYTE(self) = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:v6];

  return (v7 || v8 || v11) | a4 ^ 1 | self | v9;
}

- (CEKLightingNameBadge)_lightingNameBadge
{
  return self->__lightingNameBadge;
}

- (void)_updateHDRSuggestionMonitoringForGraphConfiguration:(id)a3
{
  id v11 = a3;
  id v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = objc_msgSend(v4, "isHDRSupportedForDevicePosition:", objc_msgSend(v11, "devicePosition"));
  char v6 = [v4 isSmartHDRSupported];
  if (v5 && (v6 & 1) == 0)
  {
    BOOL v7 = [(CAMViewfinderViewController *)self _isHDRSupportedForGraphConfiguration:v11];
    int64_t v8 = [(CAMViewfinderViewController *)self _resolvedHDRMode];
    char v9 = [(CAMViewfinderViewController *)self _captureController];
    BOOL v10 = v9;
    if (v7 && v8 == 2) {
      [v9 startMonitoringForHDRSuggestions];
    }
    else {
      [v9 stopMonitoringForHDRSuggestions];
    }
  }
}

- (void)_embedFlashButtonWithLayoutStyle:(int64_t)a3
{
  id v10 = [(CAMViewfinderViewController *)self _bottomBar];
  int v5 = [(CAMViewfinderViewController *)self _topBar];
  char v6 = [(CAMViewfinderViewController *)self _flashButton];
  BOOL v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  if (a3 == 2)
  {
    [v5 setFlashButton:0];
    int64_t v8 = v10;
    char v9 = 0;
  }
  else
  {
    if (v7)
    {
      [v5 setFlashButton:0];
      int64_t v8 = v10;
    }
    else
    {
      [v10 setFlashButton:0];
      int64_t v8 = v5;
    }
    char v9 = v6;
  }
  [v8 setFlashButton:v9];
}

- (void)_createFlashBadgeIfNecessary
{
  if (!self->__flashBadge
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    BOOL v3 = [CAMFlashBadge alloc];
    id v4 = -[CAMFlashBadge initWithFrame:](v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    flashBadge = self->__flashBadge;
    self->__flashBadge = v4;
  }
  int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
  [(CAMViewfinderViewController *)self _embedFlashBadgeWithLayoutStyle:v6];
}

- (void)_embedFlashBadgeWithLayoutStyle:(int64_t)a3
{
  id v8 = [(CAMViewfinderViewController *)self viewfinderView];
  uint64_t v5 = [(CAMViewfinderViewController *)self _flashBadge];
  int64_t v6 = (void *)v5;
  if (a3 == 2) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v5;
  }
  [v8 setFlashBadge:v7];
}

- (void)_createCommonGestureRecognizersIfNecessary
{
  [(CAMViewfinderViewController *)self _createZoomPinchGestureRecognizerIfNecessary];
  if ([(CAMViewfinderViewController *)self isShowingStandardControls])
  {
    [(CAMViewfinderViewController *)self _createSwipeToModeSwitchGestureRecognizersIfNecessary];
    [(CAMViewfinderViewController *)self _createCameraRollSwipeUpGestureRecognizerIfNecessary];
  }
}

- (void)_createZoomPinchGestureRecognizerIfNecessary
{
  if (!self->__zoomPinchGestureRecognizer)
  {
    BOOL v3 = [[CAMZoomPinchGestureRecognizer alloc] initWithTarget:self action:sel__handleZoomPinchGestureRecognizer_];
    zoomPinchGestureRecognizer = self->__zoomPinchGestureRecognizer;
    self->__zoomPinchGestureRecognizer = &v3->super;

    [(UIPinchGestureRecognizer *)self->__zoomPinchGestureRecognizer setDelegate:self];
    id v5 = [(CAMViewfinderViewController *)self view];
    [v5 addGestureRecognizer:self->__zoomPinchGestureRecognizer];
  }
}

- (void)_createSwipeToModeSwitchGestureRecognizersIfNecessary
{
  int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
  if (!self->__previousModeGestureRecognizer)
  {
    unint64_t v4 = [(CAMViewfinderViewController *)self _previousModeSwipeDirectionForLayoutStyle:v3];
    id v5 = (UISwipeGestureRecognizer *)[objc_alloc(MEMORY[0x263F82C38]) initWithTarget:self action:sel__swipedToPreviousCameraMode];
    previousModeGestureRecognizer = self->__previousModeGestureRecognizer;
    self->__previousModeGestureRecognizer = v5;

    [(UISwipeGestureRecognizer *)self->__previousModeGestureRecognizer setDirection:v4];
    [(UISwipeGestureRecognizer *)self->__previousModeGestureRecognizer setDelegate:self];
    uint64_t v7 = [(CAMViewfinderViewController *)self view];
    [v7 addGestureRecognizer:self->__previousModeGestureRecognizer];
  }
  if (!self->__nextModeGestureRecognizer)
  {
    unint64_t v8 = [(CAMViewfinderViewController *)self _nextModeSwitchDirectionForLayoutStyle:v3];
    char v9 = (UISwipeGestureRecognizer *)[objc_alloc(MEMORY[0x263F82C38]) initWithTarget:self action:sel__swipedToNextCameraMode];
    nextModeGestureRecognizer = self->__nextModeGestureRecognizer;
    self->__nextModeGestureRecognizer = v9;

    [(UISwipeGestureRecognizer *)self->__nextModeGestureRecognizer setDirection:v8];
    [(UISwipeGestureRecognizer *)self->__nextModeGestureRecognizer setDelegate:self];
    id v11 = [(CAMViewfinderViewController *)self view];
    [v11 addGestureRecognizer:self->__nextModeGestureRecognizer];
  }
}

- (unint64_t)_previousModeSwipeDirectionForLayoutStyle:(int64_t)a3
{
  if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:a3])
  {
    return 8;
  }
  else
  {
    return 1;
  }
}

- (unint64_t)_nextModeSwitchDirectionForLayoutStyle:(int64_t)a3
{
  if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:a3])
  {
    return 4;
  }
  else
  {
    return 2;
  }
}

- (void)_createCameraRollSwipeUpGestureRecognizerIfNecessary
{
  if (!self->__cameraRollSwipeUpGestureRecognizer)
  {
    int64_t v3 = (UIPanGestureRecognizer *)[objc_alloc(MEMORY[0x263F82A00]) initWithTarget:self action:sel__handleCameraRollSwipeUpGestureRecognizer_];
    cameraRollSwipeUpGestureRecognizer = self->__cameraRollSwipeUpGestureRecognizer;
    self->__cameraRollSwipeUpGestureRecognizer = v3;

    [(UIPanGestureRecognizer *)self->__cameraRollSwipeUpGestureRecognizer setDelegate:self];
    id v5 = [(CAMViewfinderViewController *)self view];
    [v5 addGestureRecognizer:self->__cameraRollSwipeUpGestureRecognizer];
  }
}

- (void)_updateForCurrentConfiguration
{
  id v16 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v3 = [v16 mode];
  [(CAMViewfinderViewController *)self _createCommonControlsIfNecessary];
  [(CAMViewfinderViewController *)self _createModeSpecificControlsForConfiguration:v16];
  [(CAMViewfinderViewController *)self _updateBarBackgroundStyleForMode:v3 capturing:0 animated:0];
  unint64_t v4 = [(CAMViewfinderViewController *)self _topBar];
  [v4 configureForMode:v3];
  id v5 = [(CAMViewfinderViewController *)self _modeDial];
  [v5 reloadData];
  [v5 setSelectedMode:v3 animated:0];
  [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v16 isCapturing:[(CAMViewfinderViewController *)self _isCapturing] animated:0];
  int64_t v6 = [(CAMViewfinderViewController *)self viewfinderView];
  int64_t v7 = -[CAMViewfinderViewController _aspectRatioForMode:devicePosition:](self, "_aspectRatioForMode:devicePosition:", v3, [v16 devicePosition]);
  [v6 setDesiredAspectRatio:v7];
  [v6 setMaskingAspectRatio:v7];
  [(CAMViewfinderViewController *)self _applyTransformsForAutorotationStyle:[(CAMViewfinderViewController *)self autorotationStyle]];
  [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:0 animated:0];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:0];
  [(CAMViewfinderViewController *)self _updateModeDisabledForCurrentStateAnimated:0];
  if (+[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]])
  {
    [(CAMZoomSlider *)self->__zoomSlider makeInvisibleAnimated:0];
  }
  unint64_t v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _configureZoomControlForGraphConfiguration:v8 animated:0];

  [(CAMZoomControl *)self->__zoomControl setShouldShowZoomDial:0 animationDuration:0];
  [(CAMViewfinderViewController *)self _updateZoomControlLayoutForGraphConfiguration:v16 fromGraphConfiguration:v16 animated:0];
  [(CAMViewfinderViewController *)self _updateLightingControlFadesForGraphConfiguration:v16 animated:0];
  [(CAMViewfinderViewController *)self _updateFilterButtonOnState];
  [(CAMViewfinderViewController *)self _setTimerDurationAndUpdateUI:[(CAMViewfinderViewController *)self _resolvedTimerDuration] animated:0];
  [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:0];
  if ([(CAMViewfinderViewController *)self _shouldUpdateCaptureOrientation]) {
    [(CAMViewfinderViewController *)self _updateUIForCaptureOrientationAnimated:0];
  }
  [(CAMViewfinderViewController *)self _updateHomeIndicatorBehaviorsForCaptureOrientation];
  [(CAMViewfinderViewController *)self _updateFilterScrubberForGraphConfiguration:v16];
  [(CAMViewfinderViewController *)self _updateFilterNameBadgeAnimated:0];
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v16);
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v16, 0);
  [(CAMViewfinderViewController *)self _updatePortraitIntensitySliderForCurrentState];
  [(CAMViewfinderViewController *)self _updateIntensityButtonForCurrentState];
  char v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v9 setViewportAspectRatio:v7 animated:0];
  id v10 = [v9 modeIndicator];
  [v10 setSelectedMode:v3];

  id v11 = [v9 modeSelector];
  [v11 setSelectedMode:v3];

  int64_t v12 = [(CAMViewfinderViewController *)self photoModeAspectRatioCrop];
  int v13 = [(CAMViewfinderViewController *)self _controlDrawer];
  BOOL v14 = [v13 aspectRatioButton];
  [v14 setAspectRatio:v12];

  [(CAMViewfinderViewController *)self _updateLightingUIForGraphConfiguration:v16 animated:0];
  [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
  [(CAMViewfinderViewController *)self _updateQRCodeInstructionLabelForCurrentState];
  [(CAMViewfinderViewController *)self _updateAutoMacroButtonAnimated:0];
  [(CAMViewfinderViewController *)self _updateDepthEffectSuggestionButtonAnimated:0];
  [(CAMViewfinderViewController *)self _updatePhotoFormatPickerAnimated:0];
  [(CAMViewfinderViewController *)self _updateSpatialCaptureUIStateForGraphConfiguration:v16 animated:0];
  char v15 = [(CAMViewfinderViewController *)self _previewViewController];
  [v15 willChangeToGraphConfiguration:v16];
  [v15 didChangeToGraphConfiguration:v16 animated:0];
}

- (int64_t)_currentMode
{
  v2 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int64_t v3 = [v2 mode];

  return v3;
}

- (void)_createStillImageControlsIfNecessary
{
  id v5 = +[CAMCaptureCapabilities capabilities];
  int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
  int v4 = [v5 isLivePhotoSupported];
  if (v4) {
    [(CAMViewfinderViewController *)self _createLivePhotoBadgeIfNecessary];
  }
  if (v3 != 2)
  {
    [(CAMViewfinderViewController *)self _createTimerButtonIfNecessary];
    [(CAMViewfinderViewController *)self _createTimerIndicatorViewIfNecessary];
    if ([(CAMViewfinderViewController *)self _wantsHDRControlsVisible])
    {
      [(CAMViewfinderViewController *)self _createHDRButtonIfNecessary];
      [(CAMViewfinderViewController *)self _createHDRBadgeIfNecessary];
    }
    if (([v5 isBackBurstSupported] & 1) != 0 || objc_msgSend(v5, "isFrontBurstSupported")) {
      [(CAMViewfinderViewController *)self _createBurstIndicatorViewIfNecessary];
    }
    if ([v5 isLiveFilteringSupported]) {
      [(CAMViewfinderViewController *)self _createFilterButtonIfNecessary];
    }
    if (v4) {
      [(CAMViewfinderViewController *)self _createLivePhotoButtonIfNecessary];
    }
    [(CAMViewfinderViewController *)self _createQRCodeInstructionLabelIfNecessary];
  }
  if ([v5 isLiveFilteringSupported]) {
    [(CAMViewfinderViewController *)self _createFilterScrubberGestureRecognizersIfNecessary];
  }
}

- (void)_createTimerButtonIfNecessary
{
  if (![(CAMViewfinderViewController *)self _shouldCreatePhotosButton])
  {
    if (!self->__timerButton
      && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
    {
      int64_t v3 = [[CAMTimerButton alloc] initWithLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]];
      timerButton = self->__timerButton;
      self->__timerButton = v3;

      [(CAMTimerButton *)self->__timerButton addTarget:self action:sel__handleTimerButtonChangedTimerDuration forControlEvents:4096];
      [(CAMTimerButton *)self->__timerButton setDelegate:self];
      [(CAMTimerButton *)self->__timerButton setHideOffWhenCollapsed:1 needsReloadData:0];
      [(CAMTimerButton *)self->__timerButton reloadData];
      [(CAMTimerButton *)self->__timerButton setDuration:[(CAMViewfinderViewController *)self _resolvedTimerDuration]];
    }
    int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedTimerButtonWithLayoutStyle:v5];
  }
}

- (double)timeIntervalForDuration:(int64_t)a3
{
  double result = 0.0;
  if ((unint64_t)(a3 - 1) <= 2) {
    return dbl_209C79360[a3 - 1];
  }
  return result;
}

- (int64_t)_resolvedTimerDuration
{
  return self->__resolvedTimerDuration;
}

- (void)_embedTimerButtonWithLayoutStyle:(int64_t)a3
{
  id v11 = [(CAMViewfinderViewController *)self _bottomBar];
  int64_t v5 = [(CAMViewfinderViewController *)self _topBar];
  int64_t v6 = [(CAMViewfinderViewController *)self _timerButton];
  BOOL v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  BOOL v8 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v8)
  {
    [v5 setTimerButton:0];
    char v9 = v11;
    id v10 = 0;
  }
  else
  {
    if (v7)
    {
      [v5 setTimerButton:0];
      char v9 = v11;
    }
    else
    {
      [v11 setTimerButton:0];
      char v9 = v5;
    }
    id v10 = v6;
  }
  [v9 setTimerButton:v10];
}

- (void)_createTimerIndicatorViewIfNecessary
{
  if (!self->__timerIndicatorView
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = objc_alloc_init(CAMTimerIndicatorView);
    timerIndicatorView = self->__timerIndicatorView;
    self->__timerIndicatorView = v3;

    int64_t v5 = [MEMORY[0x263EFF910] dateWithTimeIntervalSinceReferenceDate:0.0];
    [(CAMViewfinderViewController *)self _setLastTimerIndicatorFaceUpdateDate:v5];
  }
  int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
  [(CAMViewfinderViewController *)self _embedTimerIndicatorViewWithLayoutStyle:v6];
}

- (void)_setLastTimerIndicatorFaceUpdateDate:(id)a3
{
}

- (void)_embedTimerIndicatorViewWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  int64_t v5 = [(CAMViewfinderViewController *)self _timerIndicatorView];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v5;
  }
  [v9 setTimerIndicatorView:v8];
}

- (CAMTimerIndicatorView)_timerIndicatorView
{
  return self->__timerIndicatorView;
}

- (BOOL)_wantsHDRControlsVisible
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int v4 = [(CAMViewfinderViewController *)self _isHDRSupportedForGraphConfiguration:v3];

  if (v4)
  {
    int64_t v5 = +[CAMUserPreferences preferences];
    int v4 = [v5 shouldUseModernHDRBehavior] ^ 1;
  }
  return v4;
}

- (void)_createHDRButtonIfNecessary
{
  uint64_t v3 = +[CAMCaptureCapabilities capabilities];
  uint64_t v4 = v3;
  if (!self->__HDRButton)
  {
    id v9 = (void *)v3;
    uint64_t v3 = [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls];
    uint64_t v4 = (uint64_t)v9;
    if (v3)
    {
      uint64_t v5 = objc_msgSend(v9, "isAutomaticHDRSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
      int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
      BOOL v7 = [[CAMHDRButton alloc] initWithLayoutStyle:v6];
      HDRButton = self->__HDRButton;
      self->__HDRButton = v7;

      [(CAMHDRButton *)self->__HDRButton addTarget:self action:sel__handleHDRButtonChangedHDRMode forControlEvents:4096];
      [(CAMHDRButton *)self->__HDRButton setExclusiveTouch:1];
      [(CAMHDRButton *)self->__HDRButton setAllowsAutomaticHDR:v5 needsReloadData:0];
      [(CAMHDRButton *)self->__HDRButton reloadData];
      [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:0];
      uint64_t v3 = [(CAMViewfinderViewController *)self _embedHDRButtonWithLayoutStyle:v6];
      uint64_t v4 = (uint64_t)v9;
    }
  }
  MEMORY[0x270F9A758](v3, v4);
}

- (void)_embedHDRButtonWithLayoutStyle:(int64_t)a3
{
  id v11 = [(CAMViewfinderViewController *)self _bottomBar];
  uint64_t v5 = [(CAMViewfinderViewController *)self _topBar];
  int64_t v6 = [(CAMViewfinderViewController *)self _HDRButton];
  BOOL v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  BOOL v8 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v8)
  {
    [v5 setHDRButton:0];
    id v9 = v11;
    id v10 = 0;
    goto LABEL_6;
  }
  if (v7)
  {
    [v5 setHDRButton:0];
    id v9 = v11;
    id v10 = v6;
LABEL_6:
    [v9 setHDRButton:v10];
    goto LABEL_8;
  }
  [v11 setHDRButton:0];
  [v5 setHDRButton:v6];
  objc_msgSend(v5, "configureForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
LABEL_8:
}

- (void)_createHDRBadgeIfNecessary
{
  if (!self->__HDRBadge)
  {
    uint64_t v3 = +[CAMCaptureCapabilities capabilities];
    char v4 = [v3 isSmartHDRSupported];

    if ((v4 & 1) == 0)
    {
      uint64_t v5 = [CAMHDRBadge alloc];
      int64_t v6 = -[CAMHDRBadge initWithFrame:](v5, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
      HDRBadge = self->__HDRBadge;
      self->__HDRBadge = v6;
    }
  }
  int64_t v8 = [(CAMViewfinderViewController *)self _layoutStyle];
  [(CAMViewfinderViewController *)self _embedHDRBadgeWithLayoutStyle:v8];
}

- (void)_embedHDRBadgeWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  uint64_t v5 = [(CAMViewfinderViewController *)self _HDRBadge];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    int64_t v8 = 0;
  }
  else {
    int64_t v8 = v5;
  }
  [v9 setHDRBadge:v8];
}

- (BOOL)_shouldUseZoomControlInsteadOfSlider
{
  uint64_t v3 = +[CAMCaptureCapabilities capabilities];
  char v4 = [(id)v3 zoomControlSupported];

  LOBYTE(v3) = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  return v4 & (v3 ^ 1 | [(CAMViewfinderViewController *)self isShowingStandardControls]);
}

- (void)_createBurstIndicatorViewIfNecessary
{
  if (!self->__burstIndicatorView
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    char v4 = [[CAMBurstIndicatorView alloc] initWithLayoutStyle:v3];
    burstIndicatorView = self->__burstIndicatorView;
    self->__burstIndicatorView = v4;

    [(CAMBurstIndicatorView *)self->__burstIndicatorView setAlpha:0.0];
    [(CAMViewfinderViewController *)self _embedBurstIndicatorViewWithLayoutStyle:v3];
  }
}

- (void)_embedBurstIndicatorViewWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  uint64_t v5 = [(CAMViewfinderViewController *)self _burstIndicatorView];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    int64_t v8 = 0;
  }
  else {
    int64_t v8 = v5;
  }
  [v9 setBurstIndicatorView:v8];
}

- (void)_createFilterButtonIfNecessary
{
  if (!self->__filterButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    char v4 = +[CAMFilterButton filterButtonWithLayoutStyle:v3];
    filterButton = self->__filterButton;
    self->__filterButton = v4;

    [(CAMFilterButton *)self->__filterButton addTarget:self action:sel__handleFilterButtonTapped_ forControlEvents:64];
    [(CAMFilterButton *)self->__filterButton setExclusiveTouch:1];
    [(CAMViewfinderViewController *)self _updateFilterButtonOnState];
    [(CAMViewfinderViewController *)self _embedFilterButtonWithLayoutStyle:v3];
  }
}

- (void)_updateFilterButtonOnState
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v4 = [(CAMViewfinderViewController *)self _effectFilterTypeForMode:v3];
  BOOL v5 = v4 != +[CAMUserPreferences defaultFilterTypeForMode:v3];
  BOOL v6 = [(CAMViewfinderViewController *)self _filterButton];
  [v6 setOn:v5];

  BOOL v7 = [(CAMViewfinderViewController *)self _controlDrawer];
  int64_t v8 = [v7 filterButton];
  [v8 setOn:v5];

  id v11 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v9 = [v11 controlStatusBar];
  id v10 = [v9 filterIndicator];
  [v10 setOn:v5];
}

- (int64_t)_effectFilterTypeForMode:(int64_t)a3
{
  if ([(CAMViewfinderViewController *)self _canUseFilteringForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]])
  {
    if (a3 == 6)
    {
      return [(CAMViewfinderViewController *)self _portraitModeEffectFilterType];
    }
    else if (a3 == 4)
    {
      return [(CAMViewfinderViewController *)self _squareModeEffectFilterType];
    }
    else if (a3)
    {
      return 0;
    }
    else
    {
      return [(CAMViewfinderViewController *)self _photoModeEffectFilterType];
    }
  }
  else
  {
    return +[CAMUserPreferences defaultFilterTypeForMode:a3];
  }
}

- (BOOL)_canUseFilteringForLayoutStyle:(int64_t)a3
{
  int64_t v4 = +[CAMUserPreferences preferences];
  char v5 = [v4 preserveEffectFilter];
  if (a3 == 2) {
    BOOL v6 = v5;
  }
  else {
    BOOL v6 = 1;
  }

  return v6;
}

- (int64_t)_photoModeEffectFilterType
{
  return self->__photoModeEffectFilterType;
}

- (void)_embedFilterButtonWithLayoutStyle:(int64_t)a3
{
  id v11 = [(CAMViewfinderViewController *)self viewfinderView];
  char v5 = [v11 topBar];
  BOOL v6 = [(CAMViewfinderViewController *)self _filterButton];
  BOOL v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  BOOL v8 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  int v9 = a3 == 2 || v8;
  if (v9 | v7) {
    id v10 = 0;
  }
  else {
    id v10 = v6;
  }
  [v5 setFilterButton:v10];
}

- (void)_createQRCodeInstructionLabelIfNecessary
{
  if (!self->__qrCodeInstructionLabel
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [CAMQRCodeInstructionLabel alloc];
    int64_t v4 = -[CAMInstructionLabel initWithFrame:](v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    qrCodeInstructionLabel = self->__qrCodeInstructionLabel;
    self->__qrCodeInstructionLabel = v4;

    [(CAMInstructionLabel *)self->__qrCodeInstructionLabel setUseModeDialFontSize:1];
    [(CAMViewfinderViewController *)self _updateQRCodeInstructionLabelForCurrentState];
    int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedQRCodeInstructionLabelWithLayoutStyle:v6];
  }
}

- (void)_updateQRCodeInstructionLabelForCurrentState
{
  id v5 = [(CAMViewfinderViewController *)self _targetQRCodeInstructionLabel];
  unint64_t v3 = [(CAMViewfinderViewController *)self _currentDevice] - 1;
  if (v3 > 0xA) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = qword_209C794E8[v3];
  }
  [v5 setDevicePosition:v4];
  [v5 setMRCResults:MEMORY[0x263EFFA68]];
}

- (int64_t)_currentDevice
{
  v2 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int64_t v3 = [v2 device];

  return v3;
}

- (void)_embedQRCodeInstructionLabelWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  id v5 = [(CAMViewfinderViewController *)self _qrCodeInstructionLabel];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v5;
  }
  [v9 setQrCodeInstructionLabel:v8];
}

- (void)_destroyGridViewIfNecessary
{
  if (self->__gridView)
  {
    [(CAMViewfinderViewController *)self _unembedGridView];
    gridView = self->__gridView;
    self->__gridView = 0;
  }
}

- (void)_createOrDestroyLevelViewIfNecessary
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  id v6 = +[CAMUserPreferences preferences];
  char v4 = [v6 shouldShowLevelView];
  BOOL v5 = [(CAMViewfinderViewController *)self _shouldCreateLevelViewForMode:v3];
  if (v4)
  {
    if (v5) {
      [(CAMViewfinderViewController *)self _createLevelViewIfNecessary];
    }
  }
  else
  {
    [(CAMViewfinderViewController *)self _destroyLevelViewIfNecessary];
  }
}

- (void)_destroyLevelViewIfNecessary
{
  if (self->__levelView)
  {
    [(CAMViewfinderViewController *)self _unembedLevelView];
    levelView = self->__levelView;
    self->__levelView = 0;
  }
}

- (void)_createFilterScrubberGestureRecognizersIfNecessary
{
  [(CAMViewfinderViewController *)self _createVerticalSwipeGestureRecognizersIfNecessary];
  int64_t v3 = +[CAMCaptureCapabilities capabilities];
  char v4 = [v3 isCTMSupported];

  if ((v4 & 1) == 0)
  {
    id v9 = [(CAMViewfinderViewController *)self view];
    if (!self->__previousFilterGestureRecognizer)
    {
      BOOL v5 = (UISwipeGestureRecognizer *)[objc_alloc(MEMORY[0x263F82C38]) initWithTarget:self action:sel__handleSwipeToPreviousFilterRecognizer_];
      previousFilterGestureRecognizer = self->__previousFilterGestureRecognizer;
      self->__previousFilterGestureRecognizer = v5;

      [(UISwipeGestureRecognizer *)self->__previousFilterGestureRecognizer setDirection:1];
      [(UISwipeGestureRecognizer *)self->__previousFilterGestureRecognizer setDelegate:self];
      [v9 addGestureRecognizer:self->__previousFilterGestureRecognizer];
    }
    if (!self->__nextFilterGestureRecognizer)
    {
      BOOL v7 = (UISwipeGestureRecognizer *)[objc_alloc(MEMORY[0x263F82C38]) initWithTarget:self action:sel__handleSwipeToNextFilterRecognizer_];
      nextFilterGestureRecognizer = self->__nextFilterGestureRecognizer;
      self->__nextFilterGestureRecognizer = v7;

      [(UISwipeGestureRecognizer *)self->__nextFilterGestureRecognizer setDirection:2];
      [(UISwipeGestureRecognizer *)self->__nextFilterGestureRecognizer setDelegate:self];
      [v9 addGestureRecognizer:self->__nextFilterGestureRecognizer];
    }
  }
}

- (void)_updateEnabledControlsWithReason:(id)a3
{
}

- (void)_updateEnabledControlsWithReason:(id)a3 forceLog:(BOOL)a4
{
  BOOL v87 = a4;
  uint64_t v101 = *MEMORY[0x263EF8340];
  id v88 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v6 = [v5 controlDrawer];
  v86 = v5;
  BOOL v7 = [v5 controlStatusBar];
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldEnableControlDrawerToggle];
  id v9 = [v7 directionIndicator];
  [v9 setEnabled:v8];

  id v10 = [(CAMViewfinderViewController *)self _primaryControlStatusIndicatorTypes];
  id v11 = [(CAMViewfinderViewController *)self _secondaryControlStatusIndicatorTypes];
  int64_t v12 = [v10 arrayByAddingObjectsFromArray:v11];

  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  id v13 = v12;
  uint64_t v14 = [v13 countByEnumeratingWithState:&v93 objects:v100 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v94;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v94 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = [*(id *)(*((void *)&v93 + 1) + 8 * i) integerValue];
        BOOL v19 = [(CAMViewfinderViewController *)self _shouldEnableControlStatusIndicator:v18];
        BOOL v20 = [v7 indicatorForType:v18];
        [v20 setEnabled:v19];
      }
      uint64_t v15 = [v13 countByEnumeratingWithState:&v93 objects:v100 count:16];
    }
    while (v15);
  }

  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  uint64_t v21 = [(CAMViewfinderViewController *)self _allControlDrawerTypes];
  uint64_t v22 = [v21 countByEnumeratingWithState:&v89 objects:v99 count:16];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = *(void *)v90;
    do
    {
      for (uint64_t j = 0; j != v23; ++j)
      {
        if (*(void *)v90 != v24) {
          objc_enumerationMutation(v21);
        }
        uint64_t v26 = [*(id *)(*((void *)&v89 + 1) + 8 * j) integerValue];
        BOOL v27 = [(CAMViewfinderViewController *)self _shouldEnableDrawerControl:v26];
        BOOL v28 = [v6 buttonForType:v26];
        [v28 setEnabled:v27];
      }
      uint64_t v23 = [v21 countByEnumeratingWithState:&v89 objects:v99 count:16];
    }
    while (v23);
  }

  int v85 = [(CAMFlashButton *)self->__flashButton isEnabled];
  int v84 = [(CAMViewfinderViewController *)self _shouldEnableFlashButton];
  unsigned __int8 v83 = [(CAMHDRButton *)self->__HDRButton isEnabled];
  BOOL v82 = [(CAMViewfinderViewController *)self _shouldEnableHDRButton];
  unsigned __int8 v81 = [(CAMTimerButton *)self->__timerButton isEnabled];
  BOOL v80 = [(CAMViewfinderViewController *)self _shouldEnableTimerButton];
  unsigned __int8 v79 = [(CAMLivePhotoButton *)self->__livePhotoButton isEnabled];
  BOOL v78 = [(CAMViewfinderViewController *)self _shouldEnableLivePhotoButton];
  unsigned __int8 v77 = [(CAMFlipButton *)self->__flipButton isEnabled];
  BOOL v76 = [(CAMViewfinderViewController *)self _shouldEnableFlipButton];
  unsigned __int8 v75 = [(CAMImageWell *)self->__imageWell isEnabled];
  BOOL v74 = [(CAMViewfinderViewController *)self _shouldEnableImageWell];
  unsigned __int8 v73 = [(CUShutterButton *)self->__shutterButton isEnabled];
  BOOL v72 = [(CAMViewfinderViewController *)self _shouldEnableShutterButton];
  unsigned __int8 v71 = [(CUShutterButton *)self->__stillDuringVideoButton isEnabled];
  BOOL v70 = [(CAMViewfinderViewController *)self _shouldEnableShutterButton];
  unsigned __int8 v69 = [(CAMFilterButton *)self->__filterButton isEnabled];
  BOOL v68 = [(CAMViewfinderViewController *)self _shouldEnableFilterButton];
  unsigned __int8 v67 = [(CAMModeDial *)self->__modeDial isEnabled];
  BOOL v66 = [(CAMViewfinderViewController *)self _shouldEnableModeDial];
  unsigned __int8 v65 = [(CAMZoomSlider *)self->__zoomSlider isEnabled];
  BOOL v64 = [(CAMViewfinderViewController *)self _shouldEnableZoomSlider];
  unsigned __int8 v63 = [(CAMZoomControl *)self->__zoomControl isEnabled];
  BOOL v62 = [(CAMViewfinderViewController *)self _shouldEnableZoomControl];
  [(CAMFlashButton *)self->__flashButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableFlashButton]];
  [(CAMHDRButton *)self->__HDRButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableHDRButton]];
  [(CAMTimerButton *)self->__timerButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableTimerButton]];
  [(CAMLivePhotoButton *)self->__livePhotoButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableLivePhotoButton]];
  [(CAMSharedLibraryButton *)self->__sharedLibraryButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableSharedLibraryButton]];
  [(CAMFlipButton *)self->__flipButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableFlipButton]];
  [(CAMImageWell *)self->__imageWell setEnabled:[(CAMViewfinderViewController *)self _shouldEnableImageWell]];
  [(CUShutterButton *)self->__shutterButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableShutterButton]];
  [(CUShutterButton *)self->__shutterButton setShowDisabled:[(CAMViewfinderViewController *)self _shouldShowShutterButtonDisabled]];
  [(CAMDynamicShutterControl *)self->__dynamicShutterControl setEnabled:[(CAMViewfinderViewController *)self _shouldEnableShutterButton]];
  [(CAMDynamicShutterControl *)self->__dynamicShutterControl setShowDisabled:[(CAMViewfinderViewController *)self _shouldShowShutterButtonDisabled] animated:1];
  [(CUShutterButton *)self->__stillDuringVideoButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableShutterButton]];
  [(CAMFilterButton *)self->__filterButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableFilterButton]];
  [(CEKApertureButton *)self->__apertureButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableApertureButton]];
  [(CAMModeDial *)self->__modeDial setEnabled:[(CAMViewfinderViewController *)self _shouldEnableModeDial]];
  [(CAMZoomSlider *)self->__zoomSlider setEnabled:[(CAMViewfinderViewController *)self _shouldEnableZoomSlider]];
  [(CAMZoomControl *)self->__zoomControl setEnabled:[(CAMViewfinderViewController *)self _shouldEnableZoomControl]];
  [(CAMCreativeCameraButton *)self->__creativeCameraButton setEnabled:[(CAMViewfinderViewController *)self _shouldEnableCreativeCameraButton]];
  [(CAMVideoConfigurationStatusIndicator *)self->__videoConfigurationStatusIndicator setEnabled:[(CAMViewfinderViewController *)self _shouldEnableVideoConfigurationControl]];
  BOOL v29 = [(CAMViewfinderViewController *)self _shouldEnableTextAnalysisButton];
  id v30 = [(CAMViewfinderViewController *)self _imageAnalysisButton];
  [v30 setEnabled:v29];

  BOOL v31 = [(CAMViewfinderViewController *)self _shouldEnableAutoMacroButton];
  uint64_t v32 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  v33 = [v32 autoMacroButton];
  [v33 setEnabled:v31];

  [(CAMViewfinderViewController *)self _setSwipeToModeSwitchEnabled:[(CAMViewfinderViewController *)self _shouldEnableSwipeToModeSwitch]];
  BOOL v34 = [(CAMViewfinderViewController *)self _shouldEnableSwipeToChangeFilters];
  [(UISwipeGestureRecognizer *)self->__previousFilterGestureRecognizer setEnabled:v34];
  [(UISwipeGestureRecognizer *)self->__nextFilterGestureRecognizer setEnabled:v34];
  BOOL v35 = [(CAMViewfinderViewController *)self _shouldEnableSmartStylesSwipeGestures];
  [(UISwipeGestureRecognizer *)self->__smartStylesSwipeLeftGestureRecognizer setEnabled:v35];
  [(UISwipeGestureRecognizer *)self->__smartStylesSwipeRightGestureRecognizer setEnabled:v35];
  int v36 = v88;
  if (self->_userInteractionLoggingEnabled)
  {
    if (v85 != v84) {
      goto LABEL_17;
    }
    if (!v87)
    {
      if (((v83 ^ v82) & 1) == 0)
      {
LABEL_32:
        BOOL v39 = v87;
        if ((v81 ^ v80)) {
          goto LABEL_37;
        }
        if (!v87)
        {
          int v36 = v88;
          if (((v79 ^ v78) & 1) == 0) {
            goto LABEL_48;
          }
          goto LABEL_45;
        }
LABEL_34:
        if ([(CAMTimerButton *)self->__timerButton isEnabled])
        {
          int v36 = v88;
          if ((v79 ^ v78))
          {
LABEL_45:
            BOOL v44 = os_log_create("com.apple.camera", "Camera");
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              v45 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__livePhotoButton withReason:v36];
              *(_DWORD *)buf = 138543362;
              v98 = v45;
              _os_log_impl(&dword_2099F8000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
            }
LABEL_48:
            if (((v77 ^ v76) & 1) == 0)
            {
              if (!v39)
              {
                if ((v75 ^ v74))
                {
LABEL_61:
                  v48 = os_log_create("com.apple.camera", "Camera");
                  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                  {
                    v49 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__imageWell withReason:v36];
                    *(_DWORD *)buf = 138543362;
                    v98 = v49;
                    _os_log_impl(&dword_2099F8000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
                  }
                  goto LABEL_64;
                }
                goto LABEL_64;
              }
              goto LABEL_50;
            }
            goto LABEL_53;
          }
LABEL_41:
          if ([(CAMLivePhotoButton *)self->__livePhotoButton isEnabled])
          {
            if (((v77 ^ v76) & 1) == 0)
            {
LABEL_50:
              if ([(CAMFlipButton *)self->__flipButton isEnabled])
              {
                if ((v75 ^ v74)) {
                  goto LABEL_61;
                }
LABEL_57:
                if ([(CAMImageWell *)self->__imageWell isEnabled])
                {
                  if ((v73 ^ v72)) {
                    goto LABEL_69;
                  }
                  goto LABEL_66;
                }
                goto LABEL_61;
              }
            }
LABEL_53:
            v46 = os_log_create("com.apple.camera", "Camera");
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              v47 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__flipButton withReason:v36];
              *(_DWORD *)buf = 138543362;
              v98 = v47;
              _os_log_impl(&dword_2099F8000, v46, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
            }
            if ((v75 ^ v74)) {
              goto LABEL_61;
            }
            if (v39) {
              goto LABEL_57;
            }
LABEL_64:
            if ((v73 ^ v72)) {
              goto LABEL_69;
            }
            if (!v39)
            {
              if (((v71 ^ v70) & 1) == 0) {
                goto LABEL_80;
              }
              goto LABEL_77;
            }
LABEL_66:
            if ([(CUShutterButton *)self->__shutterButton isEnabled])
            {
              if ((v71 ^ v70))
              {
LABEL_77:
                v52 = os_log_create("com.apple.camera", "Camera");
                if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                {
                  v53 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__stillDuringVideoButton withReason:v36];
                  *(_DWORD *)buf = 138543362;
                  v98 = v53;
                  _os_log_impl(&dword_2099F8000, v52, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
                }
LABEL_80:
                if (((v69 ^ v68) & 1) == 0)
                {
                  if (!v39)
                  {
                    if ((v67 ^ v66))
                    {
LABEL_93:
                      v56 = os_log_create("com.apple.camera", "Camera");
                      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
                      {
                        v57 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__modeDial withReason:v36];
                        *(_DWORD *)buf = 138543362;
                        v98 = v57;
                        _os_log_impl(&dword_2099F8000, v56, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
                      }
                      goto LABEL_96;
                    }
                    goto LABEL_96;
                  }
                  goto LABEL_82;
                }
                goto LABEL_85;
              }
LABEL_73:
              if ([(CUShutterButton *)self->__stillDuringVideoButton isEnabled])
              {
                if (((v69 ^ v68) & 1) == 0)
                {
LABEL_82:
                  if ([(CAMFilterButton *)self->__filterButton isEnabled])
                  {
                    if ((v67 ^ v66)) {
                      goto LABEL_93;
                    }
LABEL_89:
                    if ([(CAMModeDial *)self->__modeDial isEnabled])
                    {
                      if ((v65 ^ v64)) {
                        goto LABEL_101;
                      }
                      goto LABEL_98;
                    }
                    goto LABEL_93;
                  }
                }
LABEL_85:
                v54 = os_log_create("com.apple.camera", "Camera");
                if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                {
                  v55 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__filterButton withReason:v36];
                  *(_DWORD *)buf = 138543362;
                  v98 = v55;
                  _os_log_impl(&dword_2099F8000, v54, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
                }
                if ((v67 ^ v66)) {
                  goto LABEL_93;
                }
                if (v39) {
                  goto LABEL_89;
                }
LABEL_96:
                if ((v65 ^ v64)) {
                  goto LABEL_101;
                }
                if (!v39)
                {
                  if (((v63 ^ v62) & 1) == 0) {
                    goto LABEL_111;
                  }
                  goto LABEL_108;
                }
LABEL_98:
                if ([(CAMZoomSlider *)self->__zoomSlider isEnabled])
                {
                  if ((v63 ^ v62))
                  {
LABEL_108:
                    v60 = os_log_create("com.apple.camera", "Camera");
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                    {
                      v61 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__zoomControl withReason:v36];
                      *(_DWORD *)buf = 138543362;
                      v98 = v61;
                      _os_log_impl(&dword_2099F8000, v60, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
                    }
                    goto LABEL_111;
                  }
LABEL_105:
                  if ([(CAMZoomControl *)self->__zoomControl isEnabled]) {
                    goto LABEL_111;
                  }
                  goto LABEL_108;
                }
LABEL_101:
                v58 = os_log_create("com.apple.camera", "Camera");
                if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                {
                  v59 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__zoomSlider withReason:v36];
                  *(_DWORD *)buf = 138543362;
                  v98 = v59;
                  _os_log_impl(&dword_2099F8000, v58, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
                }
                if ((v63 ^ v62)) {
                  goto LABEL_108;
                }
                if (!v87) {
                  goto LABEL_111;
                }
                goto LABEL_105;
              }
              goto LABEL_77;
            }
LABEL_69:
            v50 = os_log_create("com.apple.camera", "Camera");
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              v51 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__shutterButton withReason:v36];
              *(_DWORD *)buf = 138543362;
              v98 = v51;
              _os_log_impl(&dword_2099F8000, v50, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
            }
            if ((v71 ^ v70)) {
              goto LABEL_77;
            }
            if (!v39) {
              goto LABEL_80;
            }
            goto LABEL_73;
          }
          goto LABEL_45;
        }
LABEL_37:
        id v42 = os_log_create("com.apple.camera", "Camera");
        int v36 = v88;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v43 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__timerButton withReason:v88];
          *(_DWORD *)buf = 138543362;
          v98 = v43;
          _os_log_impl(&dword_2099F8000, v42, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
        }
        if ((v79 ^ v78)) {
          goto LABEL_45;
        }
        if (!v39) {
          goto LABEL_48;
        }
        goto LABEL_41;
      }
      goto LABEL_29;
    }
    if ([(CAMFlashButton *)self->__flashButton isEnabled])
    {
      if (((v83 ^ v82) & 1) == 0)
      {
LABEL_25:
        if ([(CAMHDRButton *)self->__HDRButton isEnabled])
        {
          BOOL v39 = v87;
          if ((v81 ^ v80)) {
            goto LABEL_37;
          }
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_17:
      int v37 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__flashButton withReason:v88];
        *(_DWORD *)buf = 138543362;
        v98 = v38;
        _os_log_impl(&dword_2099F8000, v37, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }
      if (((v83 ^ v82) & 1) == 0)
      {
        if (!v87) {
          goto LABEL_32;
        }
        goto LABEL_25;
      }
    }
LABEL_29:
    BOOL v40 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      v41 = [(CAMViewfinderViewController *)self _debugEnabledDescriptionForControl:self->__HDRButton withReason:v88];
      *(_DWORD *)buf = 138543362;
      v98 = v41;
      _os_log_impl(&dword_2099F8000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
    }
    goto LABEL_32;
  }
LABEL_111:
}

- (BOOL)_shouldEnableFlashButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _isModeDisabled];
  BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingLowLightImage];

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_isOutOfDiskSpace
{
  return self->__outOfDiskSpace;
}

- (BOOL)_shouldEnableHDRButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _isModeDisabled];
  BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingLowLightImage];

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableTimerButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  BOOL v4 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v5 = [(CAMViewfinderViewController *)self _isModeDisabled];
  char v6 = [(CAMViewfinderViewController *)self _captureController];
  char v7 = [v6 isCapturingLowLightImage];

  return ((v3 || v4 || v5) | v7) ^ 1;
}

- (BOOL)_shouldEnableLivePhotoButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isModeDisabled];
  BOOL v4 = [(CAMViewfinderViewController *)self _captureController];
  char v5 = [v4 isCapturingLowLightImage];

  return (v3 | v5) ^ 1;
}

- (BOOL)_shouldEnableFlipButton
{
  v2 = self;
  BOOL v3 = [(CAMViewfinderViewController *)self _captureController];
  char v4 = [v3 isConfigurationAvailable];
  LOBYTE(v2) = v4 & ![(CAMViewfinderViewController *)v2 _isOutOfDiskSpace];

  return (char)v2;
}

- (BOOL)_shouldEnableImageWell
{
  v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingLowLightImage];

  return v3 ^ 1;
}

- (BOOL)_shouldEnableShutterButton
{
  return [(CAMViewfinderViewController *)self _reasonsToDisableShutterButton] == 0;
}

- (unint64_t)_reasonsToDisableShutterButton
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v4 = [(CAMViewfinderViewController *)self _currentDevicePosition];
  char v5 = [(CAMViewfinderViewController *)self _captureController];
  int v6 = 1;
  if (v3 <= 9 && ((1 << v3) & 0x3D7) != 0)
  {
    if ([v5 isCapturingLowLightImage]) {
      int v6 = [(CAMViewfinderViewController *)self _isCurrentLowLightCaptureCancelable];
    }
    else {
      int v6 = [v5 isCaptureAvailable];
    }
  }
  int v28 = v6;
  BOOL v27 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  if ([v5 isCapturingLowLightImage]
    && [(CAMViewfinderViewController *)self _isCurrentLowLightCaptureCancelable])
  {
    int v7 = 1;
  }
  else
  {
    int v7 = ![(CAMViewfinderViewController *)self isPreventingAdditionalCaptures];
  }
  int v26 = v7;
  char v25 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  int v8 = [v25 isViewfinderClosed];
  BOOL v9 = [(CAMViewfinderViewController *)self _isOpeningViewfinder];
  BOOL v10 = [(CAMViewfinderViewController *)self _isClosingViewfinder];
  int v11 = [v5 isInterrupted];
  int v12 = 0;
  if ((v11 & 1) == 0 && v9)
  {
    id v13 = +[CAMCaptureCapabilities capabilities];
    int v12 = [v13 allowCaptureWhileViewfinderIsOpeningForMode:v3 devicePosition:v4] ^ 1;
  }
  int v14 = v8 | v10;
  BOOL v15 = [(CAMViewfinderViewController *)self _isModeDisabled];
  uint64_t v16 = [(CAMViewfinderViewController *)self _storageController];
  BOOL v17 = [v16 purgeableStorageContainer];
  int v18 = [v17 isPurging];

  BOOL v19 = +[CAMCaptureCapabilities capabilities];
  int v20 = objc_msgSend(v19, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", v3, -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration"), -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

  BOOL v21 = [(CAMViewfinderViewController *)self _desiredProResVideoMode] == 1;
  unint64_t v22 = v28 ^ 1u;
  if (v27) {
    v22 |= 2uLL;
  }
  if ((v14 & ~v11) != 0) {
    v22 |= 4uLL;
  }
  if (v12) {
    v22 |= 0x40uLL;
  }
  if (!v26) {
    v22 |= 8uLL;
  }
  if (v15) {
    v22 |= 0x10uLL;
  }
  if ((v18 & v20 & v21) != 0) {
    unint64_t v23 = v22 | 0x80;
  }
  else {
    unint64_t v23 = v22;
  }

  return v23;
}

- (BOOL)_isOpeningViewfinder
{
  return self->__openingViewfinder;
}

- (BOOL)_isClosingViewfinder
{
  return self->__closingViewfinder;
}

- (BOOL)_shouldEnableFilterButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _isModeDisabled];
  char v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingLowLightImage];

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableModeDial
{
  BOOL v3 = [(CAMViewfinderViewController *)self _captureController];
  int v4 = [v3 isConfigurationAvailable];
  char v5 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  char v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v6];

  char v8 = [(CAMViewfinderViewController *)self _layoutStyle] == 1 || v7;
  char v9 = v8 & ~v5;
  if (v4) {
    BOOL v10 = v9;
  }
  else {
    BOOL v10 = 0;
  }

  return v10;
}

- (BOOL)_shouldEnableZoomSlider
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  return (v3 | [(CAMViewfinderViewController *)self _isModeDisabled]) ^ 1;
}

- (BOOL)_shouldEnableZoomControl
{
  BOOL v3 = [(CAMViewfinderViewController *)self _captureController];
  BOOL v4 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v5 = [(CAMViewfinderViewController *)self _isModeDisabled];
  unsigned int v6 = ((v4 || v5) | [v3 isCapturingLowLightImage]) ^ 1;
  if ([(CAMViewfinderViewController *)self _shouldUseZoomButtonForCameraToggleForCurrentModeAndDevice])
  {
    v6 &= [v3 isConfigurationAvailable];
  }

  return v6;
}

- (BOOL)_shouldShowShutterButtonDisabled
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isModeDisabled];
  BOOL v4 = [(CAMViewfinderViewController *)self _captureController];
  if ([v4 isCapturingLowLightImage]) {
    int v5 = ![(CAMViewfinderViewController *)self _isCurrentLowLightCaptureCancelable];
  }
  else {
    int v5 = 0;
  }

  int v6 = v5 | [(CAMViewfinderViewController *)self _isLowLightCaptureCanceling];
  if (v3) {
    return 1;
  }
  else {
    return v6;
  }
}

- (BOOL)_shouldEnableSwipeToModeSwitch
{
  BOOL v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v4 = [(CAMViewfinderViewController *)self _shouldHideModeDialForGraphConfiguration:v3 isCapturingBurst:0];

  int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldEnableModeDial];
  BOOL v7 = [(CAMViewfinderViewController *)self _isShowingFilterScrubber];
  char v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int v9 = [v8 isSemanticStyleControlVisible];

  BOOL v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int v11 = [v10 isSmartStylePickerVisible];

  BOOL v12 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
  int v13 = !v6 || v4;
  if (v5 == 2) {
    int v13 = 1;
  }
  return ((v13 | v7 | v9 | v11 | v12) & 1) == 0;
}

- (void)_setSwipeToModeSwitchEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  -[UISwipeGestureRecognizer setEnabled:](self->__nextModeGestureRecognizer, "setEnabled:");
  previousModeGestureRecognizer = self->__previousModeGestureRecognizer;
  [(UISwipeGestureRecognizer *)previousModeGestureRecognizer setEnabled:v3];
}

- (BOOL)_shouldEnableSwipeToChangeFilters
{
  int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
  BOOL v4 = [(CAMViewfinderViewController *)self _isShowingFilterScrubber];
  int64_t v5 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  int v6 = [v5 isViewfinderClosed];
  BOOL v7 = [(CAMViewfinderViewController *)self _isOpeningViewfinder];
  int v8 = (v6 | v7 | [(CAMViewfinderViewController *)self _isClosingViewfinder]) ^ 1;
  if (v3 == 2) {
    LOBYTE(v8) = 0;
  }
  if (v4) {
    BOOL v9 = v8;
  }
  else {
    BOOL v9 = 0;
  }

  return v9;
}

- (BOOL)_isAnimatingFilterScrubberDismissal
{
  return self->__animatingFilterScrubberDismissal;
}

- (int64_t)_bottomBarBackgroundStyleForMode:(int64_t)a3
{
  int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
  if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:v5])
  {
    return 1;
  }
  BOOL v7 = [(CAMViewfinderViewController *)self _captureController];
  unsigned int v8 = [v7 isCapturingVideo];
  BOOL v9 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  switch(a3)
  {
    case 0:
    case 4:
    case 6:
    case 9:
      BOOL v10 = v9;
      int v11 = [(CAMViewfinderViewController *)self view];
      BOOL v12 = [v11 window];
      int v13 = [v12 screen];
      BOOL v14 = !CAMIsTallScreen(v13);

      uint64_t v15 = 2;
      if (v14 || v10) {
        uint64_t v15 = 0;
      }
      break;
    case 1:
    case 2:
    case 7:
    case 8:
      uint64_t v15 = v8;
      break;
    case 3:
      unsigned int v16 = [v7 isCapturingPanorama];
      goto LABEL_11;
    case 5:
      unsigned int v16 = [v7 isCapturingTimelapse];
LABEL_11:
      uint64_t v15 = v16;
      break;
    default:
      uint64_t v15 = 0;
      break;
  }
  if (v5 == 2) {
    int64_t v6 = 1;
  }
  else {
    int64_t v6 = v15;
  }

  return v6;
}

- (int64_t)_shutterButtonModeForCameraMode:(int64_t)a3 isCapturing:(BOOL)a4
{
  BOOL v4 = a4;
  switch(a3)
  {
    case 0:
    case 4:
    case 6:
    case 9:
      int64_t v5 = +[CAMCaptureCapabilities capabilities];
      int v6 = [v5 isLivePhotoSupported];
      uint64_t v7 = 4;
      if (v4) {
        uint64_t v7 = 9;
      }
      uint64_t v8 = 5;
      if (!v4) {
        uint64_t v8 = 0;
      }
      if (v6) {
        int64_t v9 = v7;
      }
      else {
        int64_t v9 = v8;
      }

      break;
    case 1:
    case 7:
    case 8:
      if (a4) {
        int64_t v9 = 6;
      }
      else {
        int64_t v9 = 1;
      }
      break;
    case 2:
      BOOL v10 = !a4;
      uint64_t v11 = 2;
      uint64_t v12 = 7;
      goto LABEL_16;
    case 3:
      if (a4) {
        int64_t v9 = 5;
      }
      else {
        int64_t v9 = 0;
      }
      break;
    case 5:
      BOOL v10 = !a4;
      uint64_t v11 = 3;
      uint64_t v12 = 8;
LABEL_16:
      if (v10) {
        int64_t v9 = v11;
      }
      else {
        int64_t v9 = v12;
      }
      break;
    default:
      int64_t v9 = 0;
      break;
  }
  return v9;
}

- (void)_applyTransformsForAutorotationStyle:(int64_t)a3
{
  int64_t v5 = [(CAMViewfinderViewController *)self view];
  int v6 = [(CAMViewfinderViewController *)self viewfinderView];
  uint64_t v7 = [(CAMViewfinderViewController *)self _previewViewController];
  uint64_t v8 = [v7 previewView];

  memset(&v29, 0, sizeof(v29));
  int64_t v9 = 1;
  CAMTransformCorrectingForOrientation(1, (uint64_t)&v29);
  memset(&v28[1], 0, sizeof(CGAffineTransform));
  [(CAMViewfinderViewController *)self customPreviewViewTransform];
  switch(a3)
  {
    case 2:
      CGAffineTransform v22 = v29;
      [v5 setTransform:&v22];
      BOOL v14 = [(CAMViewfinderViewController *)self view];
      uint64_t v15 = [v14 window];
      int64_t v9 = CAMInterfaceOrientationForWindow(v15);

      [v6 setPreviewViewOrientation:v9];
      if ([(CAMViewfinderViewController *)self _isScreenExternalDisplay])
      {
        unsigned int v16 = [(CAMViewfinderViewController *)self _motionController];
        int64_t v9 = [v16 captureOrientation];
      }
      memset(&v27, 0, sizeof(v27));
      objc_msgSend(v6, "setExternalDisplayPreviewOrientation:", v9, CAMTransformCorrectingForOrientation(v9, (uint64_t)&v27));
      CGAffineTransform t2 = v28[1];
      memset(&t1, 0, sizeof(t1));
      CGAffineTransform v21 = v27;
      CGAffineTransformConcat(&t1, &t2, &v21);
      CGAffineTransform v20 = t1;
      [v8 setTransform:&v20];
      BOOL v17 = [(CAMViewfinderViewController *)self _textInteractionBackground];
      CGAffineTransform v19 = t1;
      [v17 setTransform:&v19];
      [v6 prepareForAutorotation];

      break;
    case 1:
      int64_t v9 = 1;
      [v6 setPreviewViewOrientation:1];
      uint64_t v11 = [(CAMViewfinderViewController *)self view];
      uint64_t v12 = [v11 window];
      int64_t v13 = CAMInterfaceOrientationForWindow(v12);

      [(CAMViewfinderViewController *)self _applyAutorotationCorrectingTransformForOrientation:v13];
      CGAffineTransform t1 = v28[1];
      memset(&v27, 0, sizeof(v27));
      CGAffineTransform t2 = v29;
      CGAffineTransformConcat(&v27, &t1, &t2);
      CGAffineTransform v23 = v27;
      BOOL v10 = &v23;
      goto LABEL_6;
    case 0:
      v28[0] = v29;
      [v5 setTransform:v28];
      int64_t v9 = 1;
      [v6 setPreviewViewOrientation:1];
      CGAffineTransform t1 = v28[1];
      memset(&v27, 0, sizeof(v27));
      CGAffineTransform t2 = v29;
      CGAffineTransformConcat(&v27, &t1, &t2);
      CGAffineTransform v24 = v27;
      BOOL v10 = &v24;
LABEL_6:
      [v8 setTransform:v10];
      break;
  }
  int v18 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v18 setPreviewViewOrientation:v9];
}

- (CGAffineTransform)customPreviewViewTransform
{
  long long v3 = *(_OWORD *)&self[55].tx;
  *(_OWORD *)&retstr->a = *(_OWORD *)&self[55].c;
  *(_OWORD *)&retstr->c = v3;
  *(_OWORD *)&retstr->tx = *(_OWORD *)&self[56].a;
  return self;
}

- (void)_applyAutorotationCorrectingTransformForOrientation:(int64_t)a3
{
  int64_t v5 = [(CAMViewfinderViewController *)self view];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  int v6 = [(CAMViewfinderViewController *)self view];
  uint64_t v7 = [v6 window];
  uint64_t v8 = [v7 screen];

  [v8 _referenceBounds];
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  [v5 bounds];
  -[CAMViewfinderViewController _portraitOrientedSizeForSize:](self, "_portraitOrientedSizeForSize:", v17, v18);
  CGAffineTransform v19 = [v5 superview];
  CGAffineTransform v20 = [v19 layer];

  uint64_t v21 = [v20 needsLayoutOnGeometryChange];
  [v20 setNeedsLayoutOnGeometryChange:0];
  CGAffineTransform v22 = [(CAMViewfinderViewController *)self view];
  UIRoundToViewScale();
  double v24 = v23;

  char v25 = [(CAMViewfinderViewController *)self view];
  UIRoundToViewScale();
  double v27 = v26;

  int v28 = [(CAMViewfinderViewController *)self view];
  UIRoundToViewScale();
  double v30 = v29;

  BOOL v31 = [(CAMViewfinderViewController *)self view];
  UIRoundToViewScale();
  double v33 = v32;

  if (v24 == v30 && v27 == v33) {
    objc_msgSend(v5, "setBounds:", v10, v12, v14, v16);
  }
  v34[0] = v35;
  v34[1] = v36;
  v34[2] = v37;
  [v5 setTransform:v34];
  [v20 setNeedsLayoutOnGeometryChange:v21];
}

- (CGSize)_portraitOrientedSizeForSize:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  int64_t v5 = [(CAMViewfinderViewController *)self view];
  int v6 = [v5 window];
  uint64_t v7 = [v6 screen];

  [v7 _referenceBounds];
  BOOL v8 = width < height;
  if (v9 < v10) {
    BOOL v8 = width > height;
  }
  if (v8) {
    double v11 = width;
  }
  else {
    double v11 = height;
  }
  if (!v8) {
    double height = width;
  }

  double v12 = height;
  double v13 = v11;
  result.double height = v13;
  result.double width = v12;
  return result;
}

- (void)_setResolvedTimerDuration:(int64_t)a3
{
  self->__resolvedTimerDuration = a3;
}

- (void)_collapseExpandedButtonsAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int64_t v5 = [v7 controlDrawer];
  [v5 collapseExpandableButtonsAnimated:v3 updatePreferredDrawerControl:0];

  int v6 = [v7 controlStatusBar];
  [v6 collapseExpandedIndicatorAnimated:v3];

  [(CAMExpandableMenuButton *)self->__flashButton collapseMenuAnimated:v3];
  [(CAMExpandableMenuButton *)self->__HDRButton collapseMenuAnimated:v3];
  [(CAMExpandableMenuButton *)self->__timerButton collapseMenuAnimated:v3];
  [(CAMExpandableMenuButton *)self->__livePhotoButton collapseMenuAnimated:v3];
  [(CAMExpandableMenuButton *)self->__sharedLibraryButton collapseMenuAnimated:v3];
}

- (void)_updateUIForCaptureOrientationAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self autorotationStyle];
  int v6 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v7 = [v6 captureOrientation];
  BOOL v8 = [(CAMViewfinderViewController *)self viewfinderView];
  if ([(CAMViewfinderViewController *)self _isScreenExternalDisplay])
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __70__CAMViewfinderViewController__updateUIForCaptureOrientationAnimated___block_invoke;
    aBlock[3] = &unk_263FA1FF8;
    aBlock[4] = self;
    int64_t v36 = v5;
    id v9 = v8;
    id v35 = v9;
    double v10 = (void (**)(void))_Block_copy(aBlock);
    double v11 = v10;
    if (v3)
    {
      double v12 = (void *)MEMORY[0x263F82E00];
      v31[0] = MEMORY[0x263EF8330];
      v31[1] = 3221225472;
      v31[2] = __70__CAMViewfinderViewController__updateUIForCaptureOrientationAnimated___block_invoke_2;
      v31[3] = &unk_263FA0C08;
      double v33 = v10;
      id v32 = v9;
      [v12 animateWithDuration:v31 animations:0.3];
    }
    else
    {
      v10[2](v10);
    }
  }
  if (v5 == 1)
  {
    double v13 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v14 = [(CAMViewfinderViewController *)self _shouldRotateTopBarForGraphConfiguration:v13];

    [v8 setAutomaticallyAdjustsTopBarOrientation:v14];
    uint64_t v15 = v7;
  }
  else
  {
    uint64_t v15 = 1;
  }
  [(CAMViewfinderViewController *)self _rotateTopBarAndControlsToOrientation:v15 shouldAnimate:v3];
  double v16 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v16 setOrientation:v15 animated:v3];

  double v17 = [(CAMViewfinderViewController *)self _imageWell];
  [v17 setCameraOrientation:v15 animated:v3];

  double v18 = [(CAMViewfinderViewController *)self _creativeCameraButton];
  [v18 setOrientation:v15 animated:v3];

  CGAffineTransform v19 = [(CAMViewfinderViewController *)self _burstIndicatorView];
  +[CAMView rotateView:v19 toInterfaceOrientation:v15 animated:v3];

  CGAffineTransform v20 = [(CAMViewfinderViewController *)self _timerIndicatorView];
  [v20 setOrientation:v15 animated:v3];

  [v8 setOrientation:v15 animated:v3];
  uint64_t v21 = [(CAMViewfinderViewController *)self _zoomSlider];
  [v21 setOrientation:v15 animated:v3];

  int64_t v22 = [(CAMViewfinderViewController *)self _layoutStyle];
  double v23 = [(CAMViewfinderViewController *)self _zoomControl];
  double v24 = v23;
  if (v22 == 1)
  {
    char v25 = [v23 isTracking];

    if (v25) {
      goto LABEL_14;
    }
    double v24 = [(CAMViewfinderViewController *)self _zoomControl];
    [v24 setShouldShowZoomDial:0 animationDuration:0];
  }
  else
  {
    [v23 setOrientation:v15 animated:v3];
  }

LABEL_14:
  if (dyld_program_sdk_at_least())
  {
    double v26 = [(CAMViewfinderViewController *)self _flipButton];
    [v26 setOrientation:v15 animated:v3];
  }
  double v27 = [(CAMViewfinderViewController *)self _lightingControl];
  [v27 setOrientation:v7];

  int v28 = [(CAMViewfinderViewController *)self _targetElapsedTimeView];
  objc_msgSend(v28, "setBackgroundStyle:animated:", -[CAMViewfinderViewController _elapsedTimeViewIdleBackgroundStyle](self, "_elapsedTimeViewIdleBackgroundStyle"), v3);
  double v29 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v29 setSpatialCaptureRecordingIndicatorVisible:0 animated:v3];

  double v30 = [(CAMViewfinderViewController *)self _panoramaViewController];
  [v30 didChangeToCaptureOrientation:v7];
}

- (CAMZoomSlider)_zoomSlider
{
  return self->__zoomSlider;
}

- (CAMZoomControl)_zoomControl
{
  return self->__zoomControl;
}

- (CAMCreativeCameraButton)_creativeCameraButton
{
  return self->__creativeCameraButton;
}

- (BOOL)_shouldRotateTopBarForGraphConfiguration:(id)a3
{
  unint64_t v4 = [a3 mode];
  unsigned int v5 = (v4 < 9) & (0x186u >> v4);
  if ([(CAMViewfinderViewController *)self autorotationStyle] == 1) {
    return v5;
  }
  else {
    return 0;
  }
}

- (void)_rotateTopBarAndControlsToOrientation:(int64_t)a3 shouldAnimate:(BOOL)a4
{
  BOOL v4 = a4;
  id v23 = [(CAMViewfinderViewController *)self _captureController];
  uint64_t v7 = [v23 isCapturingVideo];
  BOOL v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateTopBarStyleForGraphConfiguration:v8 capturing:v7 animated:v4];
  BOOL v9 = [(CAMViewfinderViewController *)self _shouldApplyTopBarRotationForGraphConfiguration:v8];
  double v10 = [(CAMViewfinderViewController *)self _topBar];

  if (v10)
  {
    double v11 = [(CAMViewfinderViewController *)self _topBar];
    [v11 setOrientation:a3];
  }
  else
  {
    [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v4];
  }
  if (v9) {
    a3 = 1;
  }
  double v12 = [(CAMViewfinderViewController *)self _flashButton];
  [v12 setOrientation:a3 animated:v4];

  double v13 = [(CAMViewfinderViewController *)self _HDRButton];
  [v13 setOrientation:a3 animated:v4];

  BOOL v14 = [(CAMViewfinderViewController *)self _livePhotoButton];
  [v14 setOrientation:a3 animated:v4];

  uint64_t v15 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
  [v15 setOrientation:a3 animated:v4];

  double v16 = [(CAMViewfinderViewController *)self _timerButton];
  [v16 setOrientation:a3 animated:v4];

  double v17 = [(CAMViewfinderViewController *)self _filterButton];
  [v17 setOrientation:a3 animated:v4];

  double v18 = [(CAMViewfinderViewController *)self _apertureButton];
  [v18 setOrientation:a3 animated:v4];

  CGAffineTransform v19 = [(CAMViewfinderViewController *)self _videoConfigurationStatusIndicator];
  +[CAMView rotateView:v19 toInterfaceOrientation:a3 animated:v4];

  CGAffineTransform v20 = [(CAMViewfinderViewController *)self _photosButton];
  [v20 setOrientation:a3 animated:v4];

  uint64_t v21 = [(CAMViewfinderViewController *)self _intensityButton];
  [v21 setOrientation:a3 animated:v4];

  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    int64_t v22 = [(CAMViewfinderViewController *)self _flipButton];
    [v22 setOrientation:a3 animated:v4];
  }
}

- (void)_updateTopBarStyleForGraphConfiguration:(id)a3 capturing:(BOOL)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t v7 = [(CAMViewfinderViewController *)self _topBarStyleForGraphConfiguration:a3 capturing:a4];
  id v8 = [(CAMViewfinderViewController *)self _topBar];
  [v8 setStyle:v7 animated:v5];
}

- (BOOL)_shouldApplyTopBarRotationForGraphConfiguration:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _shouldRotateTopBarForGraphConfiguration:a3];
  BOOL v5 = [(CAMViewfinderViewController *)self _motionController];
  if ((unint64_t)([v5 captureOrientation] - 3) >= 2) {
    BOOL v4 = 0;
  }

  return v4;
}

- (BOOL)shouldHideLightingControl
{
  v2 = self;
  BOOL v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideLightingControlForGraphConfiguration:v3];

  return (char)v2;
}

- (BOOL)shouldHideFilterNameBadge
{
  v2 = self;
  BOOL v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideFilterNameBadgeForGraphConfiguration:v3];

  return (char)v2;
}

- (CEKLightingControl)_lightingControl
{
  return self->__lightingControl;
}

- (void)_updateHomeIndicatorBehaviorsForCaptureOrientation
{
  if ([(CAMViewfinderViewController *)self _layoutStyle] == 4)
  {
    id v6 = [(CAMViewfinderViewController *)self _motionController];
    uint64_t v3 = [v6 captureOrientation];
    BOOL v4 = [MEMORY[0x263F82438] sharedApplication];
    BOOL v5 = +[CAMCaptureCapabilities capabilities];
    if (([v5 hostProcess] | 4) == 4) {
      [v4 _setReachabilitySupported:(unint64_t)(v3 - 5) < 0xFFFFFFFFFFFFFFFELL];
    }
    [(CAMViewfinderViewController *)self _setHomeIndicatorAutoHideOrientation:v3];
  }
}

- (void)_updateFilterScrubberForGraphConfiguration:(id)a3
{
  id v16 = a3;
  BOOL v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = [v4 isLiveFilteringSupported];

  id v6 = v16;
  if (v5)
  {
    uint64_t v7 = [v16 mode];
    int64_t v8 = [(CAMViewfinderViewController *)self _effectFilterTypeForMode:v7];
    BOOL v9 = +[CAMUserPreferences preferences];
    double v10 = [v9 filterTypesForMode:v7];
    [(CAMViewfinderViewController *)self set_filterTypes:v10];
    double v11 = [(CAMViewfinderViewController *)self _filterTypes];
    uint64_t v12 = [v11 count];

    if (v12 >= 1)
    {
      int64_t v13 = [(CAMViewfinderViewController *)self _lastCapturedFilterTypeForMode:v7];
      int64_t v14 = +[CAMUserPreferences defaultFilterTypeForMode:v7];
      uint64_t v15 = [(CAMViewfinderViewController *)self _targetFilterScrubberView];
      [v15 setItemCount:v12];
      objc_msgSend(v15, "setDefaultIndex:", -[CAMViewfinderViewController _itemIndexForFilterType:](self, "_itemIndexForFilterType:", v14));
      objc_msgSend(v15, "setSelectedIndex:", -[CAMViewfinderViewController _itemIndexForFilterType:](self, "_itemIndexForFilterType:", v8));
      objc_msgSend(v15, "setMarkedIndex:", -[CAMViewfinderViewController _itemIndexForFilterType:](self, "_itemIndexForFilterType:", v13));
    }
    id v6 = v16;
  }
}

- (int64_t)_lastCapturedFilterTypeForMode:(int64_t)a3
{
  BOOL v4 = +[CAMUserPreferences preferences];
  int v5 = v4;
  if (a3 == 6)
  {
    uint64_t v6 = [v4 portraitModeLastCapturedEffectFilterType];
  }
  else if (a3 == 4)
  {
    uint64_t v6 = [v4 squareModeLastCapturedEffectFilterType];
  }
  else
  {
    if (a3)
    {
      int64_t v7 = 0;
      goto LABEL_9;
    }
    uint64_t v6 = [v4 photoModeLastCapturedEffectFilterType];
  }
  int64_t v7 = v6;
LABEL_9:

  return v7;
}

- (CEKWheelScrubberView)_filterScrubberView
{
  return self->__filterScrubberView;
}

- (void)_updateFilterNameBadgeAnimated:(BOOL)a3
{
  int64_t v4 = [(CAMViewfinderViewController *)self _effectFilterTypeForMode:[(CAMViewfinderViewController *)self _currentMode]];
  int v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];

  if (v5)
  {
    id v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    uint64_t v6 = [v7 filterNameBadge];
    [v6 setFilterType:v4];
  }
  else
  {
    id v7 = [(CAMViewfinderViewController *)self _filterNameBadge];
    [v7 setFilterType:v4];
  }
}

- (void)_updatePortraitModeInstructionLabelForCurrentState
{
  id v9 = [(CAMViewfinderViewController *)self _targetPortraitModeInstructionLabel];
  int64_t v3 = [(CAMViewfinderViewController *)self _displayedFlashModeForMode:[(CAMViewfinderViewController *)self _currentMode] flashActive:0];
  int64_t v4 = +[CAMCaptureCapabilities capabilities];
  uint64_t v5 = objc_msgSend(v4, "isFlashOrTorchSupportedForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if ([(CAMViewfinderViewController *)self _currentMode] == 1)
  {
    if ([(CAMViewfinderViewController *)self _resolvedVideoStabilizationMode] == 1) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v5;
    }
  }
  objc_msgSend(v9, "setShallowDepthOfFieldStatus:", -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus"));
  [v9 setFlashSupported:v5];
  [v9 setFlashMode:v3];
  unint64_t v6 = [(CAMViewfinderViewController *)self _currentDevice] - 1;
  if (v6 > 0xA) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = qword_209C794E8[v6];
  }
  [v9 setDevicePosition:v7];
  objc_msgSend(v9, "setLightingType:", -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice")));
  objc_msgSend(v9, "setLowLightMode:", -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode"));
  int64_t v8 = [(CAMViewfinderViewController *)self _captureController];
  objc_msgSend(v9, "setLowLightStatus:", objc_msgSend(v8, "lowLightStatus"));
}

- (void)_updateDisabledModeUIAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(CAMViewfinderViewController *)self isViewLoaded])
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _isModeDisabled];
    unint64_t v6 = [(CAMViewfinderViewController *)self _disabledModeOverlayView];
    uint64_t v7 = v6;
    if ((v5 ^ (v6 != 0)))
    {
      if (v6)
      {
        if (v3)
        {
          int64_t v8 = v6;
          [(CAMViewfinderViewController *)self _setDisabledModeOverlayView:0];
          id v9 = (void *)MEMORY[0x263F82E00];
          v14[0] = MEMORY[0x263EF8330];
          v14[1] = 3221225472;
          v14[2] = __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke_3;
          v14[3] = &unk_263FA0208;
          uint64_t v15 = v8;
          v12[0] = MEMORY[0x263EF8330];
          v12[1] = 3221225472;
          v12[2] = __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke_4;
          v12[3] = &unk_263FA2180;
          v12[4] = self;
          int64_t v13 = v15;
          uint64_t v7 = v15;
          [v9 animateWithDuration:2 delay:v14 options:v12 animations:0.25 completion:0.0];
        }
        else
        {
          [(CAMViewfinderViewController *)self _embedDisabledModeOverlayView:0];
          [(CAMViewfinderViewController *)self _setDisabledModeOverlayView:0];
        }
      }
      else
      {
        double v10 = [CAMDisabledModeOverlayView alloc];
        uint64_t v7 = -[CAMDisabledModeOverlayView initWithFrame:](v10, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
        [(CAMViewfinderViewController *)self _setDisabledModeOverlayView:v7];
        [(CAMViewfinderViewController *)self _embedDisabledModeOverlayView:v7];
        [(CAMViewfinderViewController *)self _updateDisabledModeOverlayViewForCurrentState];
        if (v3)
        {
          [(CAMDisabledModeOverlayView *)v7 setAlpha:0.0];
          double v11 = (void *)MEMORY[0x263F82E00];
          v16[0] = MEMORY[0x263EF8330];
          v16[1] = 3221225472;
          v16[2] = __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke;
          v16[3] = &unk_263FA0208;
          uint64_t v7 = v7;
          double v17 = v7;
          [v11 animateWithDuration:2 delay:v16 options:&__block_literal_global_1354 animations:0.1 completion:0.0];
        }
      }
    }
    else
    {
      [(CAMViewfinderViewController *)self _updateDisabledModeOverlayViewForCurrentState];
    }
  }
}

- (CAMDisabledModeOverlayView)_disabledModeOverlayView
{
  return self->__disabledModeOverlayView;
}

- (void)cameraRollControllerDidStartSession:(id)a3
{
  id v4 = [a3 persistedThumbnailImage];
  [(CAMViewfinderViewController *)self _presentImageWellImage:v4 uuid:@"CAMPersistedThumbnailImage" animated:0];
}

- (void)viewWillAppear:(BOOL)a3
{
  BOOL v3 = a3;
  v7.receiver = self;
  v7.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewWillAppear:](&v7, sel_viewWillAppear_);
  BOOL v5 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v5 presentingViewControllerViewWillAppear:v3];

  unint64_t v6 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v6 removeClosedViewfinderReason:8];
}

- (int64_t)preferredWhitePointAdaptivityStyle
{
  return 2;
}

- (BOOL)prefersHomeIndicatorAutoHidden
{
  int64_t v3 = [(CAMViewfinderViewController *)self _homeIndicatorAutoHideOrientation];
  return [(CAMViewfinderViewController *)self _autoHideHomeIndicatorForOrientation:v3];
}

- (int64_t)_homeIndicatorAutoHideOrientation
{
  return self->__homeIndicatorAutoHideOrientation;
}

- (BOOL)_autoHideHomeIndicatorForOrientation:(int64_t)a3
{
  int64_t v3 = a3 - 3;
  id v4 = [(CAMViewfinderViewController *)self view];
  BOOL v5 = [v4 window];
  int64_t v6 = CAMInterfaceOrientationForWindow(v5);

  return ((v6 - 3) | (unint64_t)v3) < 2;
}

- (void)_handleApplicationDidRemoveDeactivationReason:(id)a3
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = [a3 userInfo];
  BOOL v5 = [v4 objectForKeyedSubscript:*MEMORY[0x263F83C70]];
  uint64_t v6 = [v5 integerValue];

  objc_super v7 = [(CAMViewfinderViewController *)self _debugStringForApplicationDeactivationReason:v6];
  int64_t v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138543362;
    int64_t v14 = v7;
    _os_log_impl(&dword_2099F8000, v8, OS_LOG_TYPE_DEFAULT, "Did remove deactivation reason %{public}@", (uint8_t *)&v13, 0xCu);
  }

  id v9 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  double v10 = v9;
  switch((int)v6)
  {
    case 0:
    case 5:
    case 10:
    case 12:
    case 15:
      break;
    case 1:
      uint64_t v11 = 14;
      goto LABEL_16;
    case 2:
      uint64_t v11 = 15;
      goto LABEL_16;
    case 3:
      [v9 removeClosedViewfinderReason:16];
      uint64_t v12 = [(CAMViewfinderViewController *)self _disabledPreviewController];
      [v12 removeDisabledPreviewReason:2];
      goto LABEL_13;
    case 4:
      uint64_t v11 = 17;
      goto LABEL_16;
    case 6:
      uint64_t v11 = 18;
      goto LABEL_16;
    case 7:
      uint64_t v11 = 19;
      goto LABEL_16;
    case 8:
      uint64_t v11 = 20;
      goto LABEL_16;
    case 11:
      uint64_t v11 = 21;
      goto LABEL_16;
    case 13:
      uint64_t v11 = 22;
LABEL_16:
      [v9 removeClosedViewfinderReason:v11];
      break;
    default:
      uint64_t v12 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        -[CAMViewfinderViewController _handleApplicationWillAddDeactivationReason:]();
      }
LABEL_13:

      break;
  }
}

- (id)_debugStringForApplicationDeactivationReason:(int)a3
{
  if a3 < 0x1F && ((0x4000FDFFu >> a3)) {
    int64_t v3 = off_263FA25D0[a3];
  }
  else {
    int64_t v3 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown deactivation reason %lu", a3);
  }
  return v3;
}

- (void)viewWillLayoutSubviews
{
  v3.receiver = self;
  v3.super_class = (Class)CAMViewfinderViewController;
  [(CAMViewfinderViewController *)&v3 viewWillLayoutSubviews];
  [(CAMViewfinderViewController *)self _updateLayoutStyle];
  [(CAMViewfinderViewController *)self _updateDoneButtonIfNeeded];
  [(CAMViewfinderViewController *)self _applyTransformsForAutorotationStyle:[(CAMViewfinderViewController *)self autorotationStyle]];
}

- (void)_setLayoutStyle:(int64_t)a3
{
  int64_t layoutStyle = self->__layoutStyle;
  if (layoutStyle == a3) {
    return;
  }
  self->__int64_t layoutStyle = a3;
  uint64_t v6 = +[CAMUserPreferences preferences];
  id v32 = v6;
  if (layoutStyle == 2)
  {
    objc_super v7 = [v6 captureConfiguration];
    uint64_t v8 = +[CAMCaptureConfiguration configuration:v7 withDevice:[(CAMViewfinderViewController *)self _currentDevice]];
    goto LABEL_6;
  }
  if (a3 == 2)
  {
    objc_super v7 = [v6 captureConfiguration];
    uint64_t v8 = +[CAMCaptureConfiguration tinyConfigurationForConfiguration:preserveFilters:](CAMCaptureConfiguration, "tinyConfigurationForConfiguration:preserveFilters:", v7, [v32 preserveEffectFilter]);
LABEL_6:
    id v9 = (void *)v8;

    if (v9)
    {
      -[CAMViewfinderViewController changeToMode:device:](self, "changeToMode:device:", [v9 mode], objc_msgSend(v9, "device"));
      double v10 = [v32 conflictingControlConfiguration];
      [(CAMViewfinderViewController *)self applyCaptureConfiguration:v9 conflictingControlConfiguration:v10];

      [(CAMViewfinderViewController *)self _hideUtilityBarAnimated:0];
    }
  }
  uint64_t v11 = [(CAMViewfinderViewController *)self _panoramaViewController];
  [v11 setLayoutStyle:a3];

  uint64_t v12 = [(CAMViewfinderViewController *)self viewfinderView];
  [v12 setLayoutStyle:a3];

  int v13 = [(CAMViewfinderViewController *)self _previewViewController];
  [v13 setLayoutStyle:a3];

  int64_t v14 = [(CAMViewfinderViewController *)self _bottomBar];
  [v14 setLayoutStyle:a3];

  uint64_t v15 = [(CAMViewfinderViewController *)self _flashButton];
  [v15 setLayoutStyle:a3];

  id v16 = [(CAMViewfinderViewController *)self _elapsedTimeView];
  [v16 setLayoutStyle:a3];

  double v17 = [(CAMViewfinderViewController *)self _HDRButton];
  [v17 setLayoutStyle:a3];

  double v18 = [(CAMViewfinderViewController *)self _livePhotoButton];
  [v18 setLayoutStyle:a3];

  CGAffineTransform v19 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
  [v19 setLayoutStyle:a3];

  CGAffineTransform v20 = [(CAMViewfinderViewController *)self _flipButton];
  [v20 setLayoutStyle:a3];

  uint64_t v21 = [(CAMViewfinderViewController *)self _timerButton];
  [v21 setLayoutStyle:a3];

  int64_t v22 = [(CAMViewfinderViewController *)self _modeDial];
  [v22 setLayoutStyle:a3];

  id v23 = [(CAMViewfinderViewController *)self _imageWell];
  [v23 setLayoutStyle:a3];

  double v24 = [(CAMViewfinderViewController *)self _zoomSlider];
  [v24 setLayoutStyle:a3];

  char v25 = [(CAMViewfinderViewController *)self _burstIndicatorView];
  [v25 setLayoutStyle:a3];

  double v26 = [(CAMViewfinderViewController *)self _shutterButton];
  [v26 setLayoutStyle:a3];

  double v27 = [(CAMViewfinderViewController *)self _controlDrawer];
  [v27 setLayoutStyle:a3];

  int v28 = [(CAMViewfinderViewController *)self _creativeCameraButton];
  [v28 setLayoutStyle:a3];

  double v29 = [(CAMViewfinderViewController *)self _videoConfigurationStatusIndicator];
  [v29 setLayoutStyle:a3];

  double v30 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", [v30 mode], 0, 0);
  [(CAMViewfinderViewController *)self _embedAllControlsWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _updateSwipeToModeSwitchGestureRecognizersWithDirectionsForLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:0];
  if ([(CAMViewfinderViewController *)self automaticallyAdjustsAutorotationStyle])
  {
    [(CAMViewfinderViewController *)self _setInternalAutorotationStyle:[(CAMViewfinderViewController *)self _autorotationStyleForLayoutStyle:a3]];
  }
  if (a3 == 2) {
    [(CAMViewfinderViewController *)self _resetZoom];
  }
  [(CAMViewfinderViewController *)self _updateForCurrentConfiguration];
  BOOL v31 = [(CAMViewfinderViewController *)self _canUseFilteringForLayoutStyle:layoutStyle];
  if (v31 != [(CAMViewfinderViewController *)self _canUseFilteringForLayoutStyle:a3])[(CAMViewfinderViewController *)self _updateCurrentPreviewFiltersOnCaptureController]; {
}
  }

- (BOOL)shouldShiftPreviewForUtilityBar
{
  v2 = self;
  objc_super v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideUtilityBarForGraphConfiguration:v3];

  return v2 ^ 1;
}

- (void)viewDidAppear:(BOOL)a3
{
  BOOL v3 = a3;
  v27.receiver = self;
  v27.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewDidAppear:](&v27, sel_viewDidAppear_);
  [(CAMViewfinderViewController *)self _createCameraCaseShutterNotifierIfNeeded];
  [(CAMViewfinderViewController *)self _createPhysicalCaptureInteractionIfNeeded];
  [(CAMViewfinderViewController *)self _updateDiskSpaceAlertViewVisibilityAnimated:1];
  BOOL v5 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v5 setShowingPreview:1];

  uint64_t v6 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v6 presentingViewControllerViewDidAppear:v3];

  [(CAMViewfinderViewController *)self _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:0];
  objc_super v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updatePairedVideoCaptureOnControllerForGraphConfiguration:v7 isShowingCameraRoll:0];
  if ([(CAMViewfinderViewController *)self isDisablingAdditionalCaptures]) {
    [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:0];
  }
  [(CAMViewfinderViewController *)self setPerformingTileTransition:0];
  uint64_t v8 = [(CAMViewfinderViewController *)self _librarySelectionController];
  int v9 = CAMSharedLibraryModeIsOn([v8 sharedLibraryMode]);

  if (v9)
  {
    [(CAMViewfinderViewController *)self _startTimer:1];
    [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:1];
  }
  double v10 = [(CAMViewfinderViewController *)self view];
  uint64_t v11 = [v10 window];
  uint64_t v12 = [v11 windowScene];
  [v12 _setSystemVolumeHUDEnabled:0];

  if (![(CAMViewfinderViewController *)self viewAlreadyDidAppear])
  {
    int v13 = +[CAMCaptureCapabilities capabilities];
    int v14 = [v13 fallbackCameraEnabled];

    if (v14) {
      +[CAMFallbackConfiguration checkAvailableCameraModules];
    }
  }
  [(CAMViewfinderViewController *)self setViewAlreadyDidAppear:1];
  uint64_t v15 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v16 = [v15 controlStatusBar];
  double v17 = [v16 smartStyleIndicator];

  if (v17)
  {
    double v18 = [(CAMViewfinderViewController *)self _tipManager];
    int v19 = [v18 stylesTipIsValid];

    if (v19)
    {
      CGAffineTransform v20 = [(CAMViewfinderViewController *)self _tipManager];
      uint64_t v21 = [(CAMViewfinderViewController *)self _motionController];
      objc_msgSend(v20, "setIsPortraitOrientation:", objc_msgSend(v21, "captureOrientation") == 1);

      int64_t v22 = [(CAMViewfinderViewController *)self _tipManager];
      [v22 startTipObservationForViewController:self sourceItem:v17];

      id v23 = AVSmartStyleSettingsGetSystemStyle();

      if (v23)
      {
        double v24 = [(CAMViewfinderViewController *)self _tipManager];
        [v24 setStylesSetupTipActionPerformed];
      }
      else
      {
        SEL v25 = NSSelectorFromString(&cfstr_Sharedphotolib.isa);
        objc_opt_class();
        BOOL v26 = (objc_opt_respondsToSelector() & 1) != 0
           && [(id)objc_opt_class() performSelector:v25] != 0;
        double v24 = [(CAMViewfinderViewController *)self _tipManager];
        [v24 setStylesSetupTipIsPresentable:v26];
      }
    }
  }
}

- (void)_updateDiskSpaceAlertViewVisibilityAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v36 = *MEMORY[0x263EF8340];
  if ([(CAMViewfinderViewController *)self _isShowingCameraRoll])
  {
    [(CAMViewfinderViewController *)self _dismissDiskSpaceAlertViewAnimated:v3];
    return;
  }
  BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
  int v6 = [v5 isCapturingBurst];
  objc_super v7 = [(CAMViewfinderViewController *)self _storageController];
  uint64_t v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int v9 = [v7 hasDiskSpaceToAllowCaptureWithConfiguration:v8 allowPurging:v6 ^ 1u];

  uint64_t v10 = [(CAMViewfinderViewController *)self _storageController];
  uint64_t v11 = [(id)v10 purgeableStorageContainer];
  int v12 = [v11 isPurging];

  LODWORD(v10) = [(CAMViewfinderViewController *)self _hasInFlightConfiguration];
  int v13 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v14 = [v13 videoEncodingBehavior];

  int v15 = v12 | v10;
  if (v14 != 2) {
    int v15 = 0;
  }
  uint64_t v16 = (v9 | v15) ^ 1u;
  if ([(CAMViewfinderViewController *)self _externalStorageOutputEnabled])
  {
    double v17 = [(CAMViewfinderViewController *)self _storageMonitor];
    uint64_t v18 = [v17 monitoringState];

    if (v18 == 2) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v16;
    }
  }
  if ([(CAMViewfinderViewController *)self _externalStorageOutputEnabled])
  {
    int v19 = [(CAMViewfinderViewController *)self _connectedStorage];
    int v20 = [v19 connected];

    uint64_t v21 = [(CAMViewfinderViewController *)self _connectedStorage];
    uint64_t v22 = [v21 totalFreeBytes];

    int v23 = v20 ^ 1;
    if (v22 < 0) {
      int v23 = 1;
    }
    uint64_t v24 = v16 & ~v23;
    if (v23 & 1) != 0 || ((v16 ^ 1)) {
      goto LABEL_26;
    }
    SEL v25 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (v20) {
        BOOL v26 = @"YES";
      }
      else {
        BOOL v26 = @"NO";
      }
      objc_super v27 = v26;
      if ([(CAMViewfinderViewController *)self _receivedOutOfDiskSpaceErrorDuringCapture])
      {
        int v28 = @"YES";
      }
      else
      {
        int v28 = @"NO";
      }
      double v29 = v28;
      int v30 = 138543874;
      BOOL v31 = v27;
      __int16 v32 = 2048;
      uint64_t v33 = v22;
      __int16 v34 = 2114;
      id v35 = v29;
      _os_log_impl(&dword_2099F8000, v25, OS_LOG_TYPE_DEFAULT, "External storage: setting out of disk space alert, connected=%{public}@, totalFreeBytes=%lld, receivedOutOfDiskSpaceErrorDuringCapture=%{public}@", (uint8_t *)&v30, 0x20u);
    }
  }
  uint64_t v24 = v16;
LABEL_26:
  if ([(CAMViewfinderViewController *)self _receivedOutOfDiskSpaceErrorDuringCapture]|| v24)
  {
    [(CAMViewfinderViewController *)self _showDiskSpaceAlertView];
  }
  else
  {
    [(CAMViewfinderViewController *)self _dismissDiskSpaceAlertViewAnimated:v3];
  }
  [(CAMViewfinderViewController *)self _setOutOfDiskSpace:v24];
}

- (CAMStorageController)_storageController
{
  return self->__storageController;
}

- (void)_dismissDiskSpaceAlertViewAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _diskSpaceAlertController];
  if (v5)
  {
    id v7 = v5;
    int v6 = [v5 presentingViewController];
    [v6 dismissViewControllerAnimated:v3 completion:0];

    [(CAMViewfinderViewController *)self _setDiskSpaceAlertController:0];
    [(CAMViewfinderViewController *)self _setReceivedOutOfDiskSpaceErrorDuringCapture:0];
    BOOL v5 = v7;
  }
}

- (UIAlertController)_diskSpaceAlertController
{
  return self->__diskSpaceAlertController;
}

- (void)_setOutOfDiskSpace:(BOOL)a3
{
  if (self->__outOfDiskSpace != a3)
  {
    BOOL v3 = a3;
    self->__outOfDiskSpace = a3;
    if (a3) {
      BOOL v5 = @"Out of disk space";
    }
    else {
      BOOL v5 = @"No longer out of disk space";
    }
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:v5];
    id v7 = [(CAMViewfinderViewController *)self _closedViewfinderController];
    int v6 = [(CAMViewfinderViewController *)self _disabledPreviewController];
    if (v3)
    {
      [v7 addClosedViewfinderReason:6];
      [v6 addDisabledPreviewReason:0];
    }
    else
    {
      [v7 removeClosedViewfinderReason:6];
      [v6 removeDisabledPreviewReason:0];
    }
  }
}

- (void)_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:(BOOL)a3
{
  BOOL v5 = [(CAMViewfinderViewController *)self _isShowingCameraRoll];
  int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
  BOOL v7 = [(CAMViewfinderViewController *)self _wantsVisualTextAnalysis];
  uint64_t v8 = 0;
  if (!v5 && v6 != 2 && !a3) {
    uint64_t v8 = ([(CAMViewfinderViewController *)self _shouldDisableUserInteractionForTransitioning] | v7) ^ 1;
  }
  int v9 = [(CAMViewfinderViewController *)self _cameraCaseShutterNotifier];
  [v9 setEnabled:v8];

  id v10 = [(CAMViewfinderViewController *)self _physicalButtonInteraction];
  [v10 setEnabled:v8];
}

- (BOOL)_shouldDisableUserInteractionForTransitioning
{
  return (unint64_t)([(CAMViewfinderViewController *)self messagesTransitionState] - 1) < 4;
}

- (BOOL)isDisablingAdditionalCaptures
{
  return self->_disablingAdditionalCaptures;
}

- (void)setPerformingTileTransition:(BOOL)a3
{
  if (self->_performingTileTransition != a3)
  {
    BOOL v3 = a3;
    self->_performingTileTransition = a3;
    id v10 = [(CAMViewfinderViewController *)self _closedViewfinderController];
    BOOL v5 = [(CAMViewfinderViewController *)self _callStatusMonitor];
    if (v3)
    {
      int64_t v6 = +[CAMUserPreferences preferences];
      if ([(CAMViewfinderViewController *)self _layoutStyle] == 2)
      {
        objc_msgSend(v6, "readPreferencesWithOverrides:emulationMode:callActive:shouldResetCaptureConfiguration:", 0, -[CAMViewfinderViewController emulationMode](self, "emulationMode"), objc_msgSend(v5, "isCallActive"), 0);
        BOOL v7 = [v6 captureConfiguration];
      }
      else
      {
        [(CAMViewfinderViewController *)self _writeUserPreferences];
        uint64_t v8 = [v6 captureConfiguration];
        BOOL v7 = +[CAMCaptureConfiguration tinyConfigurationForConfiguration:preserveFilters:](CAMCaptureConfiguration, "tinyConfigurationForConfiguration:preserveFilters:", v8, [v6 preserveEffectFilter]);
      }
      int64_t v9 = [(CAMViewfinderViewController *)self _currentMode];
      if (v9 != [v7 mode]) {
        [v10 addClosedViewfinderReason:10];
      }
    }
    else
    {
      [v10 removeClosedViewfinderReason:10 afterDelay:0.0];
    }
  }
}

- (void)captureController:(id)a3 didOutputHDRSuggestion:(BOOL)a4
{
}

- (void)captureController:(id)a3 didChangeRampingVideoZoom:(BOOL)a4
{
  if (!a4) {
    [(CAMViewfinderViewController *)self _setShouldIgnoreZoomFactorKVOForRamping:0];
  }
}

- (void)_setShouldIgnoreZoomFactorKVOForRamping:(BOOL)a3
{
  self->__shouldIgnoreZoomFactorKVOForRamping = a3;
}

- (void)captureController:(id)a3 didOutputMinAvailableVideoZoomFactor:(double)a4
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ([(CAMViewfinderViewController *)self _hasInFlightConfiguration])
  {
    int64_t v6 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      double v15 = a4;
      _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "Ignoring didOutputMinAvailableVideoZoomFactor:%f because we are waiting on an in-flight configuration", buf, 0xCu);
    }
  }
  else
  {
    BOOL v7 = [(CAMViewfinderViewController *)self _zoomControl];
    int v8 = [v7 allowsContinuousZoom];

    if (v8)
    {
      if (a4 == 1.0)
      {
        int64_t v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
        BOOL v10 = [(CAMViewfinderViewController *)self _shouldEmulateAggregateCameraZoomForGraphConfiguration:v9];

        a4 = 1.0;
        if (v10)
        {
          uint64_t v11 = [(CAMViewfinderViewController *)self _zoomControl];
          [v11 minimumZoomFactor];
          a4 = v12;
        }
      }
      id v13 = [(CAMViewfinderViewController *)self _zoomControl];
      [v13 setMinAvailableZoomFactor:a4];
    }
  }
}

- (BOOL)_hasInFlightConfiguration
{
  return [(CAMViewfinderViewController *)self _lastConfigurationRequestID] != -1;
}

- (int)_lastConfigurationRequestID
{
  return self->__lastConfigurationRequestID;
}

- (void)captureController:(id)a3 didOutputVideoZoomFactor:(double)a4
{
  if (![(CAMViewfinderViewController *)self _hasInFlightConfiguration]
    && ![(CAMViewfinderViewController *)self _shouldIgnoreZoomFactorKVOForRamping]&& ![(CAMViewfinderViewController *)self _isPinchingForZoom])
  {
    int v6 = [(CAMZoomSlider *)self->__zoomSlider isTracking];
    BOOL v7 = [(CAMViewfinderViewController *)self _zoomSlider];
    int v8 = [v7 isAutozooming];

    if ((!v6 || v8 != 0) && ([(CAMZoomControl *)self->__zoomControl isTracking] & 1) == 0)
    {
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      if (vabdd_f64(a4, v10) >= 0.0001)
      {
        id v17 = [(CAMViewfinderViewController *)self _zoomControl];
        int64_t v11 = [(CAMViewfinderViewController *)self _currentMode];
        int64_t v12 = [(CAMViewfinderViewController *)self _currentDevice];
        int64_t v13 = [(CAMViewfinderViewController *)self _currentVideoConfiguration];
        uint64_t v14 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
        BOOL v15 = +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", v11, v12, v13, [v14 videoStabilizationStrength], 0, 0);

        if (v17)
        {
          if (v15 && ([v17 zoomButtonContentType] | 2) == 2)
          {
            [v17 maximumZoomFactor];
            if (v16 - a4 < 0.0001) {
              a4 = v16;
            }
          }
        }
        [(CAMViewfinderViewController *)self _setCachedVideoZoomFactor:a4];
        [(CAMViewfinderViewController *)self _updateZoomUIWithZoomFactor:0 animated:a4];
        [(CAMViewfinderViewController *)self _updateControlsRelatedToDepthSuggestionAnimated:0];
      }
    }
  }
}

- (BOOL)_shouldIgnoreZoomFactorKVOForRamping
{
  return self->__shouldIgnoreZoomFactorKVOForRamping;
}

- (BOOL)_isPinchingForZoom
{
  return [(UIPinchGestureRecognizer *)self->__zoomPinchGestureRecognizer state] == 2;
}

- (void)_setCachedVideoZoomFactor:(double)a3
{
  self->__cachedVideoZoomFactor = a3;
}

- (void)_updateZoomUIWithZoomFactor:(double)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  -[CAMViewfinderViewController _zoomSliderValueForZoomFactor:](self, "_zoomSliderValueForZoomFactor:");
  double v8 = v7;
  *(float *)&double v7 = v7;
  [(CAMZoomSlider *)self->__zoomSlider setValue:0 animated:v7];
  int64_t v9 = [(CAMViewfinderViewController *)self _zoomControl];
  int v10 = [v9 allowsContinuousZoom];

  if (v10)
  {
    int64_t v11 = [(CAMViewfinderViewController *)self _zoomControl];
    [v11 setZoomFactor:a3];
  }
  id v14 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  -[CAMViewfinderViewController _updateZoomButtonSymbolForMode:device:videoConfiguration:zoomFactor:videoStabilizationStrength:animated:](self, "_updateZoomButtonSymbolForMode:device:videoConfiguration:zoomFactor:videoStabilizationStrength:animated:", [v14 mode], objc_msgSend(v14, "device"), objc_msgSend(v14, "videoConfiguration"), objc_msgSend(v14, "videoStabilizationStrength"), v4, a3);
  int64_t v12 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v12 setZoomAmount:v8];

  int64_t v13 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v13 setZoomFactor:a3];
}

- (double)_zoomSliderValueForZoomFactor:(double)a3
{
  [(CAMViewfinderViewController *)self _currentMaximumZoomFactor];
  long double v5 = v4;
  double v6 = log(a3);
  return v6 / log(v5);
}

- (double)_currentMaximumZoomFactor
{
  BOOL v3 = +[CAMCaptureCapabilities capabilities];
  double v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  objc_msgSend(v3, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "device"), objc_msgSend(v4, "videoConfiguration"), objc_msgSend(v4, "videoStabilizationStrength"));
  double v6 = v5;

  return v6;
}

- (void)captureController:(id)a3 didOutputTorchAvailability:(BOOL)a4
{
  BOOL v4 = a4;
  double v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateTorchModeForGraphConfiguration:v6 animated:1];

  [(CAMViewfinderViewController *)self _updateFlashButtonAvailability];
  unint64_t v7 = [(CAMViewfinderViewController *)self _currentMode];
  if (v7 <= 8 && ((1 << v7) & 0x186) != 0 && v4)
  {
    [(CAMViewfinderViewController *)self _dismissFlashOrTorchUnavailableAlertViewAnimated:1];
  }
}

- (int64_t)_desiredTorchMode
{
  return self->__desiredTorchMode;
}

- (void)_setResolvedTorchMode:(int64_t)a3
{
  self->__resolvedTorchMode = a3;
}

- (void)_updateFlashButtonAvailability
{
  if (![(CAMViewfinderViewController *)self _hasInFlightConfiguration])
  {
    BOOL v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v4 = [(CAMViewfinderViewController *)self _isFlashOrTorchSupportedForGraphConfiguration:v3];

    if (v4)
    {
      BOOL v5 = [(CAMViewfinderViewController *)self _isFlashUnavailableForMode:[(CAMViewfinderViewController *)self _currentMode]];
      double v6 = [(CAMViewfinderViewController *)self _flashButton];
      [v6 setUnavailable:v5];

      unint64_t v7 = [(CAMViewfinderViewController *)self _controlDrawer];
      double v8 = [v7 flashButton];
      [v8 setFlashUnavailable:v5];

      id v11 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      int64_t v9 = [v11 controlStatusBar];
      int v10 = [v9 flashIndicator];
      [v10 setFlashUnavailable:v5];
    }
  }
}

- (void)captureController:(id)a3 didOutputFlashAvailability:(BOOL)a4
{
  BOOL v4 = a4;
  [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:0 animated:1];
  [(CAMViewfinderViewController *)self _updateFlashButtonAvailability];
  unint64_t v6 = [(CAMViewfinderViewController *)self _currentMode];
  if (v6 <= 9 && ((1 << v6) & 0x279) != 0 && v4)
  {
    [(CAMViewfinderViewController *)self _dismissFlashOrTorchUnavailableAlertViewAnimated:1];
  }
}

- (void)_dismissFlashOrTorchUnavailableAlertViewAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _flashOrTorchUnavailableAlertController];
  if (v5)
  {
    id v7 = v5;
    id v6 = [(CAMViewfinderViewController *)self presentedViewController];

    if (v6 == v7) {
      [(CAMViewfinderViewController *)self dismissViewControllerAnimated:v3 completion:0];
    }
    [(CAMViewfinderViewController *)self _setFlashOrTorchUnavailableAlertController:0];
    BOOL v5 = v7;
  }
}

- (UIAlertController)_flashOrTorchUnavailableAlertController
{
  return self->__flashOrTorchUnavailableAlertController;
}

- (void)captureController:(id)a3 didOutputTorchActive:(BOOL)a4
{
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1, a4);
  int64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
  [(CAMViewfinderViewController *)self _updateFlashButtonForMode:v5 animated:1];
}

- (void)captureController:(id)a3 didOutputFlashActive:(BOOL)a4
{
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1, a4);
  int64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
  [(CAMViewfinderViewController *)self _updateFlashButtonForMode:v5 animated:1];
}

- (void)_handleApplicationDidBecomeActive:(id)a3
{
  BOOL v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int64_t v13 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Received UIApplicationDidBecomeActiveNotification", v13, 2u);
  }

  int64_t v5 = +[CAMUserPreferences preferences];
  id v6 = [v5 resetTimeoutDate];
  id v7 = [v6 dateByAddingTimeInterval:-0.01];

  double v8 = [MEMORY[0x263EFF910] date];
  [v8 timeIntervalSinceDate:v7];
  double v10 = v9;

  if (v10 > 0.0
    && [(CAMViewfinderViewController *)self _isAutoResumeCancelingWithoutBackgrounding])
  {
    id v11 = [(CAMViewfinderViewController *)self _captureController];
    [v11 startCaptureSessionWithRetryCount:3 retryInterval:@"became active with no auto-resume" logReason:0 completion:0.05];
  }
  [(CAMViewfinderViewController *)self _setAutoResumeCancelingWithoutBackgrounding:0];
  [(CAMViewfinderViewController *)self _updateDiskSpaceAlertViewVisibilityAnimated:0];
  [(CAMViewfinderViewController *)self _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:0];
  int64_t v12 = [(CAMViewfinderViewController *)self _currentMode];
  [(CAMViewfinderViewController *)self _updateFlashModeOnControllerForMode:v12];
  [(CAMViewfinderViewController *)self _updateTorchModeOnControllerForMode:v12];
  [(CAMViewfinderViewController *)self _updateLevelMotionTracking];
  [(CAMViewfinderViewController *)self _enableProactiveSuggestionsAnimated:0];
}

- (CAMDisabledPreviewController)_disabledPreviewController
{
  return self->__disabledPreviewController;
}

- (void)captureControllerDidStartRunning:(id)a3
{
  BOOL v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v11 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "captureControllerDidStartRunning:", v11, 2u);
  }

  int64_t v5 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v5 removeClosedViewfinderReason:2];
  id v6 = [(CAMViewfinderViewController *)self _disabledPreviewController];
  char v7 = [v6 isPreviewDisabled];

  if ((v7 & 1) == 0) {
    [v5 removeClosedViewfinderReason:3 afterDelay:0.5];
  }
  double v8 = +[CAMCaptureCapabilities capabilities];
  int v9 = [v8 shouldPreventConnectionHandover];

  if (v9)
  {
    double v10 = [(CAMViewfinderViewController *)self _preventConnectionHandoverAssertionController];
    [v10 requestAssertionIfUnheld];
  }
}

- (void)captureController:(id)a3 didChangeToGraphConfiguration:(id)a4 forDesiredConfiguration:(id)a5 requestID:(int)a6
{
  [(CAMViewfinderViewController *)self _didChangeToGraphConfiguration:a4 forDesiredConfiguration:a5 requestID:*(void *)&a6];
  id v7 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  [v7 removeDisabledReason:0];
}

- (void)_didChangeToGraphConfiguration:(id)a3 forDesiredConfiguration:(id)a4 requestID:(int)a5
{
  *(void *)&v48[5] = *MEMORY[0x263EF8340];
  id v7 = a3;
  uint64_t v8 = [v7 mode];
  uint64_t v9 = [v7 device];
  uint64_t v10 = v9;
  if ((unint64_t)(v9 - 8) < 3 || v9 == 11 || v9 == 1)
  {
    char v11 = 0;
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
    char v11 = 1;
  }
  int64_t v13 = +[CAMCaptureCapabilities capabilities];
  [(CAMViewfinderViewController *)self set_completedInitialConfiguration:1];
  id v14 = [(CAMViewfinderViewController *)self _configuredGraphConfiguration];
  [(CAMViewfinderViewController *)self _setConfiguredGraphConfiguration:v7];
  CAMSignpostWithIDAndArgs(10, 0xEEEEB0B5B2B2EEEELL, v8, v10, 0, 0);
  [(CAMViewfinderViewController *)self _resetMachineReadableMetadataAndProcessing];
  int v15 = [(CAMViewfinderViewController *)self _lastConfigurationRequestID];
  if (v15 == -1 || (int v16 = v15, v15 == a5))
  {
    char v42 = v11;
    [(CAMViewfinderViewController *)self _setLastConfigurationRequestID:0xFFFFFFFFLL];
    id v17 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    if ([(CAMViewfinderViewController *)self _needsDeferredGraphConfiguration])
    {
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      double v19 = v18;
      int v20 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        v46 = v17;
        __int16 v47 = 2048;
        *(double *)v48 = v19;
        _os_log_impl(&dword_2099F8000, v20, OS_LOG_TYPE_DEFAULT, "Performing deferred change to: %{public}@ with zoom factor %.3f", buf, 0x16u);
      }

      [(CAMViewfinderViewController *)self _changeToGraphConfiguration:v17 zoomFactor:v7 fromGraphConfiguration:v19];
    }
    else
    {
      BOOL v44 = [(CAMViewfinderViewController *)self _captureController];
      if (v8 == [(CAMViewfinderViewController *)self _trueVideoDestinationCaptureMode]&& [(CAMViewfinderViewController *)self _trueVideoIsTransitioningToCapture])
      {
        [(CAMViewfinderViewController *)self _trueVideoStartCapture];
      }
      [(CAMViewfinderViewController *)self _setCurrentGraphConfiguration:v7];
      [(CAMViewfinderViewController *)self _setReconfiguring:0];
      if ([(CAMViewfinderViewController *)self _isReconfiguringForZoomChange])
      {
        [(CAMViewfinderViewController *)self _setReconfiguringForZoomChange:0];
        uint64_t v21 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
          *(_DWORD *)buf = 134217984;
          v46 = v22;
          _os_log_impl(&dword_2099F8000, v21, OS_LOG_TYPE_DEFAULT, "Changing to zoom factor %.3f after reconfig", buf, 0xCu);
        }

        [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
        objc_msgSend(v44, "changeToVideoZoomFactor:graphConfiguration:", v7);
      }
      [(CAMViewfinderViewController *)self _setPerformingTopBarOrientationChange:0];
      int v23 = [(CAMViewfinderViewController *)self viewfinderView];
      int64_t v24 = [(CAMViewfinderViewController *)self _aspectRatioForMode:v8 devicePosition:v12];
      [v23 setDesiredAspectRatio:v24];
      v41 = v23;
      [v23 setMaskingAspectRatio:v24];
      BOOL v40 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      [v40 setViewportAspectRatio:v24 animated:1];
      [(CAMViewfinderViewController *)self _createModeSpecificControlsForConfiguration:v7];
      BOOL v39 = [(CAMViewfinderViewController *)self _previewViewController];
      [v39 didChangeToGraphConfiguration:v7 animated:1];
      [(CAMViewfinderViewController *)self _updatePanoramaSizeIfNeededForGraphConfiguration:v7];
      BOOL v25 = +[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]];
      char v26 = [(CAMZoomSlider *)self->__zoomSlider isHidden];
      BOOL v27 = 0;
      if ((v26 & 1) == 0)
      {
        [(CAMZoomSlider *)self->__zoomSlider alpha];
        BOOL v27 = v28 != 0.0;
      }
      if (v25 && !v27) {
        [(CAMZoomSlider *)self->__zoomSlider makeInvisibleAnimated:0];
      }
      [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:1];
      [(CAMViewfinderViewController *)self _hideControlsForGraphConfiguration:v7 animated:0];
      [(CAMViewfinderViewController *)self _showControlsForGraphConfiguration:v7 animated:1];
      [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v7 animated:1];
      [(CAMViewfinderViewController *)self _updateVideoConfigurationStatusIndicatorForGraphConfiguration:v7 animated:1];
      [(CAMViewfinderViewController *)self _updateZoomControlLayoutForGraphConfiguration:v7 fromGraphConfiguration:v17 animated:1];
      [(CAMViewfinderViewController *)self _updateLightingControlFadesForGraphConfiguration:v17 animated:1];
      [(CAMViewfinderViewController *)self _updateModeDisabledForCurrentStateAnimated:1];
      [(CAMViewfinderViewController *)self _updateFlashButtonAvailability];
      if (![(CAMViewfinderViewController *)self _isControlDrawerShowingPersistentControl])[(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:1]; {
      [(CAMViewfinderViewController *)self _updateBarBackgroundStyleForMode:v8 capturing:0 animated:0];
      }
      v38 = [(CAMViewfinderViewController *)self _topBar];
      [v38 configureForMode:v8 animated:0];
      [(CAMViewfinderViewController *)self _updateFilterScrubberForGraphConfiguration:v7];
      double v29 = +[CAMUserPreferences preferences];
      int v30 = v29;
      char v31 = v42 ^ 1;
      if (v8 != 6) {
        char v31 = 1;
      }
      if ((v31 & 1) == 0)
      {
        [v29 setPortraitModeRearDevice:v10];
        [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
        objc_msgSend(v30, "setPortraitModeRearZoomValue:");
      }
      BOOL v43 = v30;
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _updateDepthEffectApertureForGraphConfiguration:fromGraphConfiguration:zoomFactor:](self, "_updateDepthEffectApertureForGraphConfiguration:fromGraphConfiguration:zoomFactor:", v7, v14);
      if ([v13 isPortraitEffectIntensitySupportedForMode:v8])
      {
        [(CAMViewfinderViewController *)self _portraitModeIntensityValue];
        objc_msgSend(v44, "changeToPortraitLightingEffectStrength:");
        [(CAMViewfinderViewController *)self _updatePortraitIntensitySliderForCurrentState];
        [(CAMViewfinderViewController *)self _updateIntensityButtonForCurrentState];
      }
      [(CAMViewfinderViewController *)self _updateLightingUIForGraphConfiguration:v7 animated:[(CAMViewfinderViewController *)self _wantsLightingControlForGraphConfiguration:v14]];
      [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
      [(CAMViewfinderViewController *)self _updateQRCodeInstructionLabelForCurrentState];
      [(CAMViewfinderViewController *)self _updateFilterButtonOnState];
      [(CAMViewfinderViewController *)self _resetExposureClipping];
      [(CAMViewfinderViewController *)self _updateExposureSliderForCurrentState];
      [(CAMViewfinderViewController *)self _updateShutterButtonLegibility];
      [(CAMViewfinderViewController *)self _updateUIForCaptureOrientationAnimated:0];
      [(CAMViewfinderViewController *)self _configureZoomControlForGraphConfiguration:v7 animated:0];
      [(CAMViewfinderViewController *)self _updateMaxRecordingTimeInstructionLabelForGraphConfiguration:v7];
      [(CAMViewfinderViewController *)self _startOrCancelPurgeIfNecessary];
      [(CAMViewfinderViewController *)self _updateFreeResourcesInstructionLabelForCurrentState];
      [(CAMViewfinderViewController *)self _updateDiskSpaceAlertViewVisibilityAnimated:1];
      [(CAMViewfinderViewController *)self _enableProactiveSuggestionsAnimated:1];
      __int16 v32 = [(CAMViewfinderViewController *)self _closedViewfinderController];
      char v33 = [v32 isViewfinderClosed];

      if ((v33 & 1) == 0)
      {
        [(CAMViewfinderViewController *)self _prepareDeferredProcessingIfNeeded];
        [(CAMViewfinderViewController *)self _updateExternalStorageMonitoringState:1];
      }
      [(CAMViewfinderViewController *)self _openViewfinderForAllModeAndDeviceChangeReasons];
      __int16 v34 = [MEMORY[0x263F82438] sharedApplication];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        [v34 didChangeToMode:v8 device:v10];
      }
      id v35 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        v46 = v7;
        __int16 v47 = 1024;
        *(_DWORD *)v48 = a5;
        _os_log_impl(&dword_2099F8000, v35, OS_LOG_TYPE_DEFAULT, "Did change to: %{public}@ (requestID=%d)", buf, 0x12u);
      }

      if (self->_configurationDelegateFlags.respondsToDidCompleteConfiguration)
      {
        uint64_t v36 = [(CAMViewfinderViewController *)self configurationDelegate];
        [v36 cameraViewControllerDidCompleteConfigurationForCaptureMode:v8 captureDevice:v10];
      }
      [(CAMViewfinderViewController *)self captureController:v44 didOutputFaceResults:MEMORY[0x263EFFA68] headResults:MEMORY[0x263EFFA68] bodyResults:MEMORY[0x263EFFA68] salientObjectResults:MEMORY[0x263EFFA68]];
      [(CAMViewfinderViewController *)self _resetObjectResults];
      [(CAMViewfinderViewController *)self _updateInterfaceModulationForGraphConfiguration:v17 animated:1];
      [(CAMViewfinderViewController *)self _setExternalStorageOutputEnabled:[(CAMViewfinderViewController *)self _wantsExternalStorageOutputEnabled] animated:1];
      if ([(CAMViewfinderViewController *)self _shouldShowUnsupportedExternalStorageFormat])
      {
        [(CAMViewfinderViewController *)self _showUnsupportedFormatAlert];
      }
      [(CAMViewfinderViewController *)self _startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:v17];
      [(CAMViewfinderViewController *)self _updateTransientLightingBadgeVisibilityAnimated:1];
      if (v8 == [(CAMViewfinderViewController *)self _trueVideoSourceCaptureMode]
        && [(CAMViewfinderViewController *)self _trueVideoIsActive])
      {
        long long v37 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
        [v37 setTrueVideoState:0];

        [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"True video state changed to idle"];
        [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
      }
    }
  }
  else
  {
    id v17 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      v46 = v7;
      __int16 v47 = 1024;
      *(_DWORD *)v48 = a5;
      v48[2] = 1024;
      *(_DWORD *)&v48[3] = v16;
      _os_log_impl(&dword_2099F8000, v17, OS_LOG_TYPE_DEFAULT, "Did change to: %{public}@ (requestID=%d) (waiting on another in-flight configuration before completing configuration changes (requestID=%d)", buf, 0x18u);
    }
  }
}

- (void)_setConfiguredGraphConfiguration:(id)a3
{
}

- (void)_setBarcodeParsingSession:(id)a3
{
}

- (void)_setLastConfigurationRequestID:(int)a3
{
  self->__lastConfigurationRequestID = a3;
}

- (void)_setCurrentGraphConfiguration:(id)a3
{
  id v7 = (CAMCaptureGraphConfiguration *)a3;
  if (self->__currentGraphConfiguration != v7)
  {
    objc_storeStrong((id *)&self->__currentGraphConfiguration, a3);
    int64_t v5 = [(CAMViewfinderViewController *)self _storageController];
    [v5 setGraphConfiguration:v7];

    id v6 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v6 setCurrentGraphConfiguration:v7];
  }
}

- (void)_setPerformingTopBarOrientationChange:(BOOL)a3
{
  self->__performingTopBarOrientationChange = a3;
}

- (void)_hideControlsForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v7 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v8 = [v7 captureOrientation];

  BOOL v9 = [(CAMViewfinderViewController *)self shouldLayoutLightingNameBadgeAtBottom];
  BOOL v10 = [(CAMViewfinderViewController *)self _shouldHideLightingNameBadgeForGraphConfiguration:v6 orientation:v8];
  if (v4) {
    double v11 = 0.25;
  }
  else {
    double v11 = 0.0;
  }
  v44[0] = MEMORY[0x263EF8330];
  v44[1] = 3221225472;
  v44[2] = __75__CAMViewfinderViewController__hideControlsForGraphConfiguration_animated___block_invoke;
  v44[3] = &unk_263FA1F30;
  v44[4] = self;
  id v12 = v6;
  id v45 = v12;
  uint64_t v46 = v8;
  BOOL v41 = v10;
  BOOL v42 = v9;
  BOOL v47 = v10;
  BOOL v48 = v9;
  +[CAMView animateIfNeededWithDuration:v44 animations:v11];
  -[CAMViewfinderViewController _updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:](self, "_updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:", [v12 mode], 0, 1, v4);
  if ([(CAMViewfinderViewController *)self _shouldHideLightingControlBadgeForGraphConfiguration:v12 orientation:v8])
  {
    [(CEKLightingControl *)self->__lightingControl setNameBadgeHidden:1 animated:v4];
  }
  BOOL v43 = v4;
  int64_t v13 = [(CAMViewfinderViewController *)self viewfinderView];
  id v14 = (void *)MEMORY[0x263EFFA08];
  int v15 = [v13 visibleTopBadges];
  int v16 = [v14 setWithArray:v15];

  BOOL v17 = [(CAMViewfinderViewController *)self _shouldHideFlashBadgeForGraphConfiguration:v12];
  BOOL v18 = [(CAMViewfinderViewController *)self _shouldHideHDRBadgeForGraphConfiguration:v12];
  BOOL v19 = [(CAMViewfinderViewController *)self _shouldHideLivePhotoBadgeForGraphConfiguration:v12];
  BOOL v20 = [(CAMViewfinderViewController *)self _shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:v12];
  BOOL v40 = [(CAMViewfinderViewController *)self _shouldHideFocusAndExposureLockBadgeForGraphConfiguration:v12];
  uint64_t v21 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v16, "count"));
  if (!v17)
  {
    uint64_t v22 = [(CAMViewfinderViewController *)self _flashBadge];
    int v23 = [v16 containsObject:v22];

    if (v23)
    {
      int64_t v24 = [(CAMViewfinderViewController *)self _flashBadge];
      [v21 addObject:v24];
    }
  }
  if (!v18)
  {
    BOOL v25 = [(CAMViewfinderViewController *)self _HDRBadge];
    int v26 = [v16 containsObject:v25];

    if (v26)
    {
      BOOL v27 = [(CAMViewfinderViewController *)self _HDRBadge];
      [v21 addObject:v27];
    }
  }
  if (!v19)
  {
    double v28 = [(CAMViewfinderViewController *)self _livePhotoBadge];
    int v29 = [v16 containsObject:v28];

    if (v29)
    {
      int v30 = [(CAMViewfinderViewController *)self _livePhotoBadge];
      [v21 addObject:v30];
    }
  }
  if (!v20)
  {
    char v31 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge];
    int v32 = [v16 containsObject:v31];

    if (v32)
    {
      char v33 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge];
      [v21 addObject:v33];
    }
  }
  if (!v40)
  {
    __int16 v34 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadge];
    int v35 = [v16 containsObject:v34];

    if (v35)
    {
      uint64_t v36 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadge];
      [v21 addObject:v36];
    }
  }
  if (!v41 && !v42)
  {
    long long v37 = [(CAMViewfinderViewController *)self _lightingNameBadge];
    int v38 = [v16 containsObject:v37];

    if (v38)
    {
      BOOL v39 = [(CAMViewfinderViewController *)self _lightingNameBadge];
      [v21 addObject:v39];
    }
  }
  [v13 setVisibleTopBadges:v21 animated:v43];
}

- (void)_showControlsForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v7 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v8 = [v7 captureOrientation];

  BOOL v9 = [(CAMViewfinderViewController *)self shouldLayoutLightingNameBadgeAtBottom];
  BOOL v10 = [(CAMViewfinderViewController *)self _shouldHideLightingNameBadgeForGraphConfiguration:v6 orientation:v8];
  if (v4) {
    double v11 = 0.25;
  }
  else {
    double v11 = 0.0;
  }
  v50[0] = MEMORY[0x263EF8330];
  v50[1] = 3221225472;
  v50[2] = __75__CAMViewfinderViewController__showControlsForGraphConfiguration_animated___block_invoke;
  v50[3] = &unk_263FA1F58;
  v50[4] = self;
  id v12 = v6;
  id v51 = v12;
  uint64_t v52 = v8;
  BOOL v53 = v10;
  BOOL v48 = v9;
  BOOL v54 = v9;
  BOOL v55 = v4;
  +[CAMView animateIfNeededWithDuration:v50 animations:v11];
  if (![(CAMViewfinderViewController *)self _shouldHideLightingControlBadgeForGraphConfiguration:v12 orientation:v8])[(CEKLightingControl *)self->__lightingControl setNameBadgeHidden:0 animated:v4]; {
  -[CAMViewfinderViewController _updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:](self, "_updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:", [v12 mode], 1, 0, v4);
  }
  int64_t v13 = [(CAMViewfinderViewController *)self viewfinderView];
  id v14 = (void *)MEMORY[0x263EFFA08];
  v49 = v13;
  int v15 = [v13 visibleTopBadges];
  int v16 = [v14 setWithArray:v15];

  BOOL v17 = [(CAMViewfinderViewController *)self _flashBadge];
  if (v17) {
    char v18 = ![(CAMViewfinderViewController *)self _shouldHideFlashBadgeForGraphConfiguration:v12];
  }
  else {
    char v18 = 0;
  }

  BOOL v19 = [(CAMViewfinderViewController *)self _HDRBadge];
  if (v19) {
    char v20 = ![(CAMViewfinderViewController *)self _shouldHideHDRBadgeForGraphConfiguration:v12];
  }
  else {
    char v20 = 0;
  }

  uint64_t v21 = [(CAMViewfinderViewController *)self _livePhotoBadge];
  if (v21) {
    char v22 = ![(CAMViewfinderViewController *)self _shouldHideLivePhotoBadgeForGraphConfiguration:v12];
  }
  else {
    char v22 = 0;
  }

  int v23 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge];
  if (v23) {
    int v46 = ![(CAMViewfinderViewController *)self _shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:v12];
  }
  else {
    LOBYTE(v46) = 0;
  }

  int64_t v24 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadge];
  if (v24) {
    int v47 = ![(CAMViewfinderViewController *)self _shouldHideFocusAndExposureLockBadgeForGraphConfiguration:v12];
  }
  else {
    LOBYTE(v47) = 0;
  }

  BOOL v25 = [(CAMViewfinderViewController *)self _lightingNameBadge];
  if (v25) {
    int v26 = v10;
  }
  else {
    int v26 = 1;
  }

  BOOL v27 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v16, "count"));
  if ((v18 & 1) != 0
    || ([(CAMViewfinderViewController *)self _flashBadge],
        double v28 = objc_claimAutoreleasedReturnValue(),
        int v29 = [v16 containsObject:v28],
        v28,
        v29))
  {
    int v30 = [(CAMViewfinderViewController *)self _flashBadge];
    [v27 addObject:v30];
  }
  if ((v20 & 1) != 0
    || ([(CAMViewfinderViewController *)self _HDRBadge],
        char v31 = objc_claimAutoreleasedReturnValue(),
        int v32 = [v16 containsObject:v31],
        v31,
        v32))
  {
    char v33 = [(CAMViewfinderViewController *)self _HDRBadge];
    [v27 addObject:v33];
  }
  if ((v22 & 1) != 0
    || ([(CAMViewfinderViewController *)self _livePhotoBadge],
        __int16 v34 = objc_claimAutoreleasedReturnValue(),
        int v35 = [v16 containsObject:v34],
        v34,
        v35))
  {
    uint64_t v36 = [(CAMViewfinderViewController *)self _livePhotoBadge];
    [v27 addObject:v36];
  }
  if ((v46 & 1) != 0
    || ([(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge],
        long long v37 = objc_claimAutoreleasedReturnValue(),
        int v38 = [v16 containsObject:v37],
        v37,
        v38))
  {
    BOOL v39 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge];
    [v27 addObject:v39];
  }
  if ((v47 & 1) != 0
    || ([(CAMViewfinderViewController *)self _focusAndExposureLockBadge],
        BOOL v40 = objc_claimAutoreleasedReturnValue(),
        int v41 = [v16 containsObject:v40],
        v40,
        v41))
  {
    BOOL v42 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadge];
    [v27 addObject:v42];
  }
  if (!(v26 | v48)
    || ([(CAMViewfinderViewController *)self _lightingNameBadge],
        BOOL v43 = objc_claimAutoreleasedReturnValue(),
        int v44 = [v16 containsObject:v43],
        v43,
        v44))
  {
    id v45 = [(CAMViewfinderViewController *)self _lightingNameBadge];
    [v27 addObject:v45];
  }
  [v49 setVisibleTopBadges:v27 animated:v4];
}

- (double)_cachedVideoZoomFactor
{
  return self->__cachedVideoZoomFactor;
}

- (void)_openViewfinderForAllModeAndDeviceChangeReasons
{
  id v2 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v2 removeClosedViewfinderReason:0];
  [v2 removeClosedViewfinderReason:1];
}

- (void)_previewDidStartRunning:(id)a3
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  CAMSignpostWithIDAndArgs(7, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  BOOL v4 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  int64_t v5 = [(CAMViewfinderViewController *)self _locationController];
  id v6 = [(CAMViewfinderViewController *)self _keepAliveController];
  BOOL v25 = +[CAMCaptureCapabilities capabilities];
  int64_t v7 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v8 = [(CAMViewfinderViewController *)self _currentDevicePosition];
  BOOL v9 = [v4 descriptionForTimeBetweenReferenceAndNow];
  BOOL v10 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    BOOL v27 = v9;
    _os_log_impl(&dword_2099F8000, v10, OS_LOG_TYPE_DEFAULT, "Received AVCaptureVideoPreviewLayerDidStartRunningNotification %{public}@", buf, 0xCu);
  }

  [v4 removeClosedViewfinderReason:5];
  [v4 removeClosedViewfinderReason:3];
  if (![(CUCaptureController *)self->__captureController isCapturingTimelapse]) {
    [v5 setEnabled:1];
  }
  [v5 setHeadingEnabled:1];
  if ([(CAMViewfinderViewController *)self automaticallyAdjustsApplicationIdleTimer])
  {
    double v11 = [(CAMViewfinderViewController *)self _idleController];
    [v11 startUpdatingIdleTimer];
  }
  id v12 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v12 preload];

  [v6 startKeepAliveSession];
  int64_t v13 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v13 createConnectionIfNecessary];
  id v14 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
  if (!v14)
  {
    if (![v25 isImageAnalysisSupportedForMode:v7 devicePosition:v8]) {
      goto LABEL_14;
    }
    int v15 = +[CAMUserPreferences preferences];
    unsigned int v24 = [v15 isImageAnalysisEnabled];

    int v16 = +[CAMUserPreferences preferences];
    uint64_t v17 = [v16 shouldShowQRBanners];

    char v18 = +[CAMCaptureCapabilities capabilities];
    if ([v18 isDocumentScanningSupported]) {
      BOOL v19 = +[CAMDocumentScanFlowController isSupported];
    }
    else {
      BOOL v19 = 0;
    }

    id v14 = [[CAMAnalyticsVisionSession alloc] initWithTextDetectionEnabled:v24 MRCDetectionEnabled:v17 documentScanningEnabled:v19];
    [(CAMViewfinderViewController *)self _setVisionAnalyticsSession:v14];
  }

LABEL_14:
  char v20 = +[CAMUserPreferences preferences];
  int v21 = [v20 sharedLibraryAutoBehaviorEnabled];

  if (v21)
  {
    char v22 = [(CAMViewfinderViewController *)self _librarySelectionController];
    [v22 startAcquiringSignals];
  }
  if (+[CAMApplication appOrPlugInState] != 2)
  {
    [(CAMViewfinderViewController *)self generateAnalyticsSessionEventIfNeeded];
    int v23 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    [v23 didStartPreview];
  }
  [(CAMViewfinderViewController *)self _resetObjectResults];
}

- (CAMLocationController)_locationController
{
  return self->__locationController;
}

- (CAMKeepAliveController)_keepAliveController
{
  return self->__keepAliveController;
}

- (BOOL)automaticallyAdjustsApplicationIdleTimer
{
  return self->_automaticallyAdjustsApplicationIdleTimer;
}

- (CAMIdleController)_idleController
{
  return self->__idleController;
}

- (BOOL)gestureRecognizer:(id)a3 shouldReceiveTouch:(id)a4
{
  id v6 = (UISwipeGestureRecognizer *)a3;
  id v7 = a4;
  zoomPinchGestureRecognizer = self->__zoomPinchGestureRecognizer;
  BOOL v9 = [(CAMViewfinderViewController *)self _primaryShutterControl];
  int v10 = [v9 isTracking];

  if (v10 && zoomPinchGestureRecognizer != (UIPinchGestureRecognizer *)v6)
  {
    LOBYTE(v11) = 0;
    goto LABEL_58;
  }
  if (self->__nextModeGestureRecognizer == v6 || self->__previousModeGestureRecognizer == v6)
  {
    uint64_t v11 = [(CAMPreviewViewController *)self->__previewViewController activeExposureBiasPanGestureRecognizer];
    if (v11)
    {
      if ([(CAMViewfinderViewController *)self _modeChangeSwipeMatchesExposureBiasPanDirection])
      {
        if (!self->__modeDial) {
          goto LABEL_39;
        }
        objc_msgSend(v7, "locationInView:");
        CGFloat v16 = v15;
        CGFloat v18 = v17;
        [(CAMModeDial *)self->__modeDial bounds];
        v147.origin.x = v19 + 0.0;
        v147.origin.y = v20 + -10.0;
        v147.size.double height = v21 + 10.0;
        v139.x = v16;
        v139.y = v18;
        if (!CGRectContainsPoint(v147, v139))
        {
LABEL_39:
          BOOL v33 = 0;
LABEL_53:
          unsigned __int8 v81 = [(CAMViewfinderViewController *)self _feedbackController];
          [v81 prepareDiscreteFeedback:0];

          LOBYTE(v11) = v33;
          goto LABEL_58;
        }
      }
    }
    char v22 = [v7 view];
    if (([(CAMViewfinderViewController *)self _layoutStyle] | 4) != 4)
    {
      BOOL v33 = 1;
LABEL_50:
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        BOOL v80 = [(CAMViewfinderViewController *)self _modeDial];
        BOOL v33 = v22 == v80;
      }
      goto LABEL_53;
    }
    int v23 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    unsigned int v24 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v25 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v24];

    if ([v23 isControlDrawerExpanded]) {
      char v26 = [v23 isControlDrawerAllowed];
    }
    else {
      char v26 = 0;
    }
    __int16 v34 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v35 = [(CAMViewfinderViewController *)self _shouldApplyTopBarRotationForGraphConfiguration:v34];

    uint64_t v36 = [(CAMViewfinderViewController *)self _topBar];
    if (!v36 || v35)
    {
      uint64_t v37 = [v23 controlStatusBar];
    }
    else
    {
      uint64_t v37 = [(CAMViewfinderViewController *)self _topBar];
    }
    int v38 = (void *)v37;

    if (v26)
    {
      uint64_t v39 = [v23 controlDrawer];
    }
    else
    {
      if (v25) {
        [(CAMViewfinderViewController *)self _primaryShutterControl];
      }
      else {
      uint64_t v39 = [(CAMViewfinderViewController *)self _utilityBar];
      }
    }
    BOOL v40 = (void *)v39;
    [v38 bounds];
    double v42 = v41;
    double v44 = v43;
    double v46 = v45;
    double v48 = v47;
    v49 = [(CAMViewfinderViewController *)self view];
    objc_msgSend(v38, "convertRect:toView:", v49, v42, v44, v46, v48);
    CGFloat v51 = v50;
    CGFloat v53 = v52;
    CGFloat v55 = v54;
    CGFloat v57 = v56;

    [v40 bounds];
    double v59 = v58;
    double v61 = v60;
    double v63 = v62;
    double v65 = v64;
    BOOL v66 = [(CAMViewfinderViewController *)self view];
    objc_msgSend(v40, "convertRect:toView:", v66, v59, v61, v63, v65);
    CGFloat v68 = v67;
    CGFloat v70 = v69;
    CGFloat v72 = v71;
    CGFloat v74 = v73;

    if (v38)
    {
      v148.origin.x = v51;
      v148.origin.y = v53;
      v148.size.double width = v55;
      v148.size.double height = v57;
      double MaxY = CGRectGetMaxY(v148);
      if (v40)
      {
LABEL_43:
        v149.origin.x = v68;
        v149.origin.y = v70;
        v149.size.double width = v72;
        v149.size.double height = v74;
        double MinY = CGRectGetMinY(v149);
LABEL_46:
        unsigned __int8 v77 = [(CAMViewfinderViewController *)self view];
        [v7 locationInView:v77];
        double v79 = v78;

        BOOL v33 = v79 > MaxY && v79 < MinY;
        goto LABEL_50;
      }
    }
    else
    {
      double MaxY = 0.0;
      if (v40) {
        goto LABEL_43;
      }
    }
    double MinY = 1.79769313e308;
    goto LABEL_46;
  }
  if (self->__nextFilterGestureRecognizer == v6 || self->__previousFilterGestureRecognizer == v6)
  {
    BOOL v27 = [v7 view];
    uint64_t v28 = [(CAMViewfinderViewController *)self _topBar];
    int v29 = [(CAMViewfinderViewController *)self _bottomBar];
    int v30 = [(CAMViewfinderViewController *)self _utilityBar];
    uint64_t v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v31 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v11];

    objc_opt_class();
    LOBYTE(v11) = 0;
    if ((objc_opt_isKindOfClass() & 1) == 0 && v27 != v28 && v27 != v29)
    {
      if (v30) {
        char v32 = v31;
      }
      else {
        char v32 = 1;
      }
      if (v32)
      {
        LOBYTE(v11) = 1;
      }
      else
      {
        [v7 locationInView:v30];
        CGFloat v83 = v82;
        CGFloat v85 = v84;
        [v30 bounds];
        v140.x = v83;
        v140.y = v85;
        LODWORD(v11) = !CGRectContainsPoint(v150, v140);
      }
    }

    goto LABEL_56;
  }
  if ((UISwipeGestureRecognizer *)self->__cameraRollSwipeUpGestureRecognizer == v6)
  {
    BOOL v87 = [(CAMViewfinderViewController *)self _imageWell];
    if ([v87 isHidden])
    {
      [v87 isEnabled];
      LOBYTE(v11) = 0;
    }
    else
    {
      [v87 alpha];
      double v100 = v99;
      int v101 = [v87 isEnabled];
      LOBYTE(v11) = 0;
      if (v100 != 0.0 && v101)
      {
        [v87 bounds];
        CGFloat v103 = v102 + -20.0;
        CGFloat v105 = v104 + -20.0;
        CGFloat v107 = v106 + 40.0;
        CGFloat v109 = v108 + 40.0;
        [v7 locationInView:v87];
        v142.x = v110;
        v142.y = v111;
        v152.origin.x = v103;
        v152.origin.y = v105;
        v152.size.double width = v107;
        v152.size.double height = v109;
        LOBYTE(v11) = CGRectContainsPoint(v152, v142);
      }
    }
  }
  else
  {
    uint64_t v12 = [(CAMViewfinderViewController *)self _swipeUpGestureRecognizer];
    if ((UISwipeGestureRecognizer *)v12 == v6)
    {
    }
    else
    {
      int64_t v13 = (void *)v12;
      id v14 = [(CAMViewfinderViewController *)self _swipeDownGestureRecognizer];

      if (v14 != v6)
      {
        if ((UISwipeGestureRecognizer *)self->__zoomPinchGestureRecognizer != v6)
        {
          LOBYTE(v11) = 1;
          goto LABEL_58;
        }
        BOOL v27 = [(CAMViewfinderViewController *)self _topBar];
        [v7 locationInView:v27];
        double v118 = v117;
        if (v27)
        {
          CGFloat v119 = v116;
          [v27 bounds];
          v144.x = v119;
          v144.y = v118;
          BOOL v120 = CGRectContainsPoint(v154, v144);
        }
        else
        {
          BOOL v120 = 0;
        }
        v121 = [(CAMViewfinderViewController *)self _bottomBar];
        [v7 locationInView:v121];
        if (v121)
        {
          CGFloat v135 = v133;
          CGFloat v136 = v134;
          [v121 bounds];
          v146.x = v135;
          v146.y = v136;
          BOOL v137 = !CGRectContainsPoint(v158, v146);
        }
        else
        {
          LOBYTE(v137) = 1;
        }
        if (v120) {
          LOBYTE(v11) = 0;
        }
        else {
          LOBYTE(v11) = (v118 >= 0.0 || v27 == 0) && v137;
        }
LABEL_102:

        goto LABEL_57;
      }
    }
    id v88 = +[CAMCaptureCapabilities capabilities];
    int v89 = [v88 isCTMSupported];

    if (v89)
    {
      BOOL v27 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      int v90 = [v27 isControlDrawerAllowed];
      uint64_t v11 = [(CAMViewfinderViewController *)self _captureController];
      char v91 = [(id)v11 isCapturingLowLightImage];

      LOBYTE(v11) = 0;
      if (!v90 || (v91 & 1) != 0) {
        goto LABEL_57;
      }
      if ([v27 isControlDrawerExpanded]) {
        [v27 controlDrawer];
      }
      else {
      v121 = [v27 modeDial];
      }
      v122 = [v27 controlStatusBar];
      [v7 locationInView:v122];
      double v124 = v123;
      [v122 bounds];
      LOBYTE(v11) = v124 > CGRectGetMaxY(v155);
      [v7 locationInView:v121];
      double v126 = v125;
      [v121 bounds];
      if (v126 >= CGRectGetMaxY(v156)) {
        LOBYTE(v11) = 0;
      }

      goto LABEL_102;
    }
    unint64_t v92 = [(CAMViewfinderViewController *)self _currentMode];
    LOBYTE(v11) = 0;
    if (v92 <= 6 && ((1 << v92) & 0x51) != 0)
    {
      BOOL v27 = [(CAMViewfinderViewController *)self _utilityBar];
      long long v93 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      BOOL v94 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v93];

      if (v27)
      {
        if (!v94)
        {
          [v7 locationInView:v27];
          CGFloat v96 = v95;
          CGFloat v98 = v97;
          [v27 bounds];
          v141.x = v96;
          v141.y = v98;
          if (CGRectContainsPoint(v151, v141))
          {
            LOBYTE(v11) = 1;
            goto LABEL_57;
          }
        }
      }
      uint64_t v28 = [(CAMViewfinderViewController *)self _topBar];
      [v7 locationInView:v28];
      if (v28)
      {
        CGFloat v114 = v112;
        CGFloat v115 = v113;
        [v28 bounds];
        v143.x = v114;
        v143.y = v115;
        LODWORD(v11) = !CGRectContainsPoint(v153, v143);
      }
      else
      {
        LOBYTE(v11) = 1;
      }
      v127 = [(CAMViewfinderViewController *)self _bottomBar];
      [v7 locationInView:v127];
      if (v127)
      {
        CGFloat v130 = v128;
        CGFloat v131 = v129;
        [v127 bounds];
        v145.x = v130;
        v145.y = v131;
        BOOL v132 = !CGRectContainsPoint(v157, v145);
      }
      else
      {
        LOBYTE(v132) = 1;
      }
      LOBYTE(v11) = v11 & v132;

LABEL_56:
LABEL_57:
    }
  }
LABEL_58:

  return v11;
}

- (CAMUtilityBar)_utilityBar
{
  return self->__utilityBar;
}

- (CAMFeedbackController)_feedbackController
{
  return self->__feedbackController;
}

- (void)_handleShutterButtonPressed:(id)a3
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __59__CAMViewfinderViewController__handleShutterButtonPressed___block_invoke;
  v3[3] = &unk_263FA20E0;
  v3[4] = self;
  [(CAMViewfinderViewController *)self _attemptShutterPressWithBlock:v3];
}

- (void)_setLastShutterButtonTouchDownTime:(unint64_t)a3
{
  self->__lastShutterButtonTouchDownTime = a3;
}

- (unint64_t)_shutterButtonFeedbackForCurrentConfiguration
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  if (v3 > 9) {
    return 0;
  }
  if (((1 << v3) & 0x1AE) != 0)
  {
    BOOL v4 = [(CAMViewfinderViewController *)self _captureController];
    if ([v4 isCapturingTimelapse] & 1) != 0 || (objc_msgSend(v4, "isCapturingVideo"))
    {
      unint64_t v5 = 2;
    }
    else if ([v4 isCapturingPanorama])
    {
      unint64_t v5 = 2;
    }
    else
    {
      unint64_t v5 = 1;
    }
  }
  else if ([(CAMViewfinderViewController *)self _isCapturingFromTimer])
  {
    return 2;
  }
  else
  {
    return [(CAMViewfinderViewController *)self _shouldCaptureWithTimer];
  }
  return v5;
}

- (BOOL)_shouldCaptureWithTimer
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  int64_t v4 = [(CAMViewfinderViewController *)self _resolvedTimerDuration];
  int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
  BOOL v6 = ![(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (v5 == 2) {
    LOBYTE(v6) = 0;
  }
  if (!v4) {
    LOBYTE(v6) = 0;
  }
  return !v3 && v6;
}

- (BOOL)_shouldReportUserInitiationTimeForCurrentSettings
{
  BOOL v3 = +[CAMCaptureCapabilities capabilities];
  unint64_t v4 = [v3 hostProcess] & 0xFFFFFFFFFFFFFFFBLL;
  int64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingBurst];
  if ([(CAMViewfinderViewController *)self _isCapturingFromTimer]) {
    LOBYTE(v7) = 0;
  }
  else {
    int v7 = ![(CAMViewfinderViewController *)self _shouldCaptureWithTimer];
  }
  char v8 = v7 & ~v6;
  if (v4) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v8;
  }

  return v9;
}

- (BOOL)isDisablingMultipleCaptureFeatures
{
  return self->_disablingMultipleCaptureFeatures;
}

- (void)_setupBurstTimerWithDelay:(double)a3
{
  objc_initWeak(&location, self);
  int64_t v5 = [CAMPreciseTimer alloc];
  uint64_t v7 = MEMORY[0x263EF8330];
  uint64_t v8 = 3221225472;
  BOOL v9 = __57__CAMViewfinderViewController__setupBurstTimerWithDelay___block_invoke;
  int v10 = &unk_263FA2158;
  objc_copyWeak(&v11, &location);
  char v6 = [(CAMPreciseTimer *)v5 initWithDelay:&v7 interval:a3 handler:1.79769313e308];
  [(CAMPreciseTimer *)v6 start];
  [(CAMViewfinderViewController *)self _setCurrentBurstTimer:v6];

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
}

- (void)_setCurrentBurstTimer:(id)a3
{
}

- (void)_setLastPerformedShutterButtonFeedbackType:(unint64_t)a3
{
  self->__lastPerformedShutterButtonFeedbackType = a3;
}

- (unint64_t)_lastPerformedShutterButtonFeedbackType
{
  return self->__lastPerformedShutterButtonFeedbackType;
}

- (void)_handleShutterButtonReleased:(id)a3
{
}

- (void)_handleShutterButtonActionWithEventTriggerDescription:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  switch([v6 mode])
  {
    case 0:
    case 4:
    case 6:
    case 9:
      [(CAMViewfinderViewController *)self _teardownBurstTimer];
      BOOL v7 = [(CAMViewfinderViewController *)self _shouldCaptureWithTimer];
      BOOL v8 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
      int v9 = [v5 isCapturingBurst];
      if (v8)
      {
        [(CAMViewfinderViewController *)self _stopCountdownForCaptureTimer];
        int v10 = @"stop timer countdown";
        goto LABEL_18;
      }
      if (v9)
      {
        [(CAMViewfinderViewController *)self _stopCapturingBurst];
        int v10 = @"stop capturing burst";
        goto LABEL_18;
      }
      if (v7)
      {
        [(CAMViewfinderViewController *)self _startCountdownForCaptureTimer];
        int v10 = @"start timer countdown";
        goto LABEL_18;
      }
      [(CAMViewfinderViewController *)self _captureStillImageWithCurrentSettings];
      int v10 = @"capture still image";
      goto LABEL_9;
    case 1:
    case 2:
    case 7:
    case 8:
      if ([v5 isCapturingVideo])
      {
        [(CAMViewfinderViewController *)self _stopCapturingVideo];
        int v10 = @"stop capturing video";
        goto LABEL_18;
      }
      id v11 = [(CAMViewfinderViewController *)self _videoCaptureRequestWithCurrentSettings];
      [(CAMViewfinderViewController *)self _startCapturingVideoWithRequest:v11];

      int v10 = @"start capturing video";
      goto LABEL_9;
    case 3:
      if ([v5 isCapturingPanorama])
      {
        [(CAMViewfinderViewController *)self _stopCapturingPanorama];
        int v10 = @"stop capturing panorama";
        goto LABEL_18;
      }
      id v14 = [(CAMViewfinderViewController *)self _panoramaCaptureRequestWithCurrentSettings];
      unint64_t v15 = [v14 captureOrientation];
      unint64_t v16 = +[CAMOrientationUtilities captureOrientationFromPanoramaCaptureOrientation:v15];
      if (v15 >= 5)
      {
        objc_msgSend(NSString, "stringWithFormat:", @"Unexpected:%ld", v15);
        double v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        double v17 = off_263FA2568[v15];
      }
      if (v16 >= 5)
      {
        objc_msgSend(NSString, "stringWithFormat:", @"Unexpected:%ld", v16);
        CGFloat v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        CGFloat v18 = off_263FA2568[v16];
      }
      int v10 = [NSString stringWithFormat:@"start capturing panorama (device in %@, image in %@)", v18, v17];
      [(CAMViewfinderViewController *)self _startCapturingPanoramaWithRequest:v14];

      goto LABEL_9;
    case 5:
      if ([(CAMViewfinderViewController *)self _isCapturingTimelapse])
      {
        [(CAMViewfinderViewController *)self _stopTimelapse];
        int v10 = @"stop capturing timelapse";
LABEL_18:
        int64_t v13 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543618;
          id v20 = v4;
          __int16 v21 = 2114;
          char v22 = v10;
          _os_log_impl(&dword_2099F8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@: %{public}@", buf, 0x16u);
        }

        goto LABEL_21;
      }
      [(CAMViewfinderViewController *)self _startTimelapse];
      int v10 = @"start capturing timelapse";
LABEL_9:
      uint64_t v12 = [(CAMViewfinderViewController *)self _motionController];
      objc_msgSend(v12, "debugValidateCaptureOrientationForMode:", objc_msgSend(v6, "mode"));

      if (v10) {
        goto LABEL_18;
      }
LABEL_21:

      return;
    default:
      int v10 = @"no context";
      goto LABEL_18;
  }
}

- (void)_teardownBurstTimer
{
  id v3 = [(CAMViewfinderViewController *)self _currentBurstTimer];
  [v3 invalidate];
  [(CAMViewfinderViewController *)self _setCurrentBurstTimer:0];
}

- (CAMPreciseTimer)_currentBurstTimer
{
  return self->__currentBurstTimer;
}

- (BOOL)_captureStillImageWithCurrentSettings
{
  [(CAMViewfinderViewController *)self _setImageAnalyzer:0];
  id v3 = [(CAMViewfinderViewController *)self _stillImageCaptureRequestWithCurrentSettingsAsBurst:0 maximumLength:0];
  id v4 = [(CAMViewfinderViewController *)self _generateAnalyticsCaptureEventWithRequest:v3 burst:0];
  [v3 setAnalyticsEvent:v4];

  BOOL v5 = [(CAMViewfinderViewController *)self _captureStillImageWithRequest:v3 error:0];
  if (v5)
  {
    char v6 = [(CAMViewfinderViewController *)self stillImageCaptureTestDelegate];
    [v6 viewfinderViewController:self willCaptureStillImageForRequest:v3];

    BOOL v7 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    BOOL v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [v7 didCaptureWithRequest:v3 currentConfiguration:v8];
  }
  return v5;
}

- (id)_stillImageCaptureRequestWithCurrentSettingsAsBurst:(BOOL)a3 maximumLength:(int64_t)a4
{
  BOOL v4 = a3;
  char v6 = [(CAMViewfinderViewController *)self _captureController];
  BOOL v7 = [(CAMViewfinderViewController *)self _motionController];
  double v48 = [(CAMViewfinderViewController *)self _cameraRollController];
  BOOL v8 = +[CAMCaptureCapabilities capabilities];
  int64_t v9 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v10 = [(CAMViewfinderViewController *)self _currentDevice];
  unint64_t v43 = [(CAMViewfinderViewController *)self persistenceBehavior];
  double v45 = v6;
  uint64_t v11 = [v6 isCapturingVideo];
  int64_t v12 = [(CAMViewfinderViewController *)self _effectFilterTypeForMode:v9];
  double v47 = [(CAMViewfinderViewController *)self _currentCaptureFiltersForBurst:v4];
  double v46 = [(CAMViewfinderViewController *)self _originalCaptureFiltersForMode:v9 devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  double v44 = v7;
  uint64_t v13 = [v7 captureOrientation];
  BOOL v40 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  id v14 = +[CAMUserPreferences preferences];
  unint64_t v15 = objc_alloc_init(CAMMutableStillImageCaptureRequest);
  [(CAMMutableStillImageCaptureRequest *)v15 setDelegate:self];
  uint64_t v42 = v13;
  [(CAMMutableStillImageCaptureRequest *)v15 setCaptureOrientation:v13];
  if ((unint64_t)(v10 - 1) > 0xA) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = qword_209C794E8[v10 - 1];
  }
  -[CAMMutableStillImageCaptureRequest setCaptureMirrored:](v15, "setCaptureMirrored:", [v14 mirrorCameraCapturesForDevicePosition:v16 mode:v9]);
  [(CAMMutableStillImageCaptureRequest *)v15 setCaptureDevice:v10];
  [(CAMMutableStillImageCaptureRequest *)v15 setCaptureMode:v9];
  [(CAMMutableStillImageCaptureRequest *)v15 setWantsSquareCrop:v9 == 4];
  [(CAMMutableStillImageCaptureRequest *)v15 setAspectRatioCrop:[(CAMViewfinderViewController *)self _aspectRatioCropForMode:v9 devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]]];
  [(CAMMutableStillImageCaptureRequest *)v15 setEffectFilterType:v12];
  -[CAMMutableStillImageCaptureRequest setSessionIdentifier:](v15, "setSessionIdentifier:", [v48 sessionIdentifier]);
  [(CAMMutableStillImageCaptureRequest *)v15 setAdjustmentFilters:v47];
  [(CAMMutableStillImageCaptureRequest *)v15 setOriginalFilters:v46];
  [(CAMMutableStillImageCaptureRequest *)v15 setWantsHighResolutionStills:1];
  [(CAMMutableStillImageCaptureRequest *)v15 setStillDuringVideo:v11];
  [(CAMMutableStillImageCaptureRequest *)v15 setWantsAutoDualCameraFusion:v4 ^ 1];
  if ([v14 semanticDevelopmentEnabled]) {
    BOOL v17 = [(CAMViewfinderViewController *)self _resolvedRAWMode] != 1;
  }
  else {
    BOOL v17 = 0;
  }
  [(CAMMutableStillImageCaptureRequest *)v15 setWantsSemanticSceneFilter:v17];
  CGFloat v18 = [(CAMViewfinderViewController *)self _semanticStyleForCapture];
  [(CAMMutableStillImageCaptureRequest *)v15 setSemanticStyle:v18];

  if (v4)
  {
    uint64_t v19 = [v8 isBurstSupportedForMode:v9 device:v10] ^ 1;
  }
  else if (v11)
  {
    uint64_t v19 = 0;
  }
  else if ([(CAMViewfinderViewController *)self _isBurstEndSoundPlaying])
  {
    uint64_t v19 = [(CAMViewfinderViewController *)self _desiredLivePhotoMode] == 0;
  }
  else
  {
    uint64_t v19 = 1;
  }
  [(CAMMutableStillImageCaptureRequest *)v15 setWantsAudioForCapture:v19];
  [(CAMMutableStillImageCaptureRequest *)v15 setLightingEffectType:[(CAMViewfinderViewController *)self _sanitizedLightingTypeForMode:v9 device:v10]];
  -[CAMMutableStillImageCaptureRequest setWantsWhiteBalanceLockedDuringVideoRecording:](v15, "setWantsWhiteBalanceLockedDuringVideoRecording:", [v14 shouldLockWhiteBalanceDuringVideoRecording]);
  if (v4)
  {
    [(CAMMutableStillImageCaptureRequest *)v15 setFlashMode:0];
    [(CAMMutableStillImageCaptureRequest *)v15 setHdrMode:0];
    [(CAMMutableStillImageCaptureRequest *)v15 setIrisMode:0];
    [(CAMMutableStillImageCaptureRequest *)v15 setPhotoQualityPrioritization:0];
    [(CAMMutableStillImageCaptureRequest *)v15 setLowLightMode:0];
    if (a4 >= 1) {
      -[CAMMutableStillImageCaptureRequest setMaximumBurstLength:](v15, "setMaximumBurstLength:");
    }
    unint64_t v20 = v43;
    if ([v14 burstFollowsEncoderSettings]) {
      uint64_t v21 = [v14 photoEncodingBehavior];
    }
    else {
      uint64_t v21 = 0;
    }
    [(CAMMutableStillImageCaptureRequest *)v15 setPhotoEncodingBehavior:v21];
    [(CAMMutableStillImageCaptureRequest *)v15 setPersistenceOptions:[(CAMViewfinderViewController *)self _persistenceOptionsForBehavior:v43 allowingOptionalLocalPersistence:1]];
  }
  else
  {
    unsigned __int8 v49 = 0;
    int64_t v22 = [(CAMViewfinderViewController *)self _displayedFlashModeForMode:v9 flashActive:&v49];
    [(CAMMutableStillImageCaptureRequest *)v15 setFlashMode:v49];
    if (v22) {
      int64_t v23 = [(CAMViewfinderViewController *)self _resolvedFlashMode];
    }
    else {
      int64_t v23 = 0;
    }
    [(CAMMutableStillImageCaptureRequest *)v15 setTorchMode:+[CAMCaptureConversions torchModeForFlashMode:v23]];
    if (v40)
    {
      [v8 isSmartHDRSupported];
      int64_t v24 = 0;
      LOBYTE(v11) = 1;
    }
    else
    {
      int64_t v24 = [(CAMViewfinderViewController *)self _resolvedHDRMode];
      if ([v8 isSmartHDRSupported])
      {
        if (v24 == 1) {
          int64_t v24 = 2;
        }
      }
      else if (v24 == 2)
      {
        int64_t v24 = [v45 isHDRSuggested];
      }
    }
    [(CAMMutableStillImageCaptureRequest *)v15 setHdrMode:v24];
    -[CAMMutableStillImageCaptureRequest setWantsEV0ForHDR:](v15, "setWantsEV0ForHDR:", [v14 shouldCaptureHDREV0]);
    BOOL v25 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    uint64_t v26 = [v25 photoQualityPrioritization];

    [(CAMMutableStillImageCaptureRequest *)v15 setPhotoQualityPrioritization:v26];
    [(CAMMutableStillImageCaptureRequest *)v15 setPhotoEncodingBehavior:[(CAMViewfinderViewController *)self _currentPhotoEncodingBehavior]];
    [(CAMMutableStillImageCaptureRequest *)v15 setRawFileFormatBehavior:[(CAMViewfinderViewController *)self _currentRawFileFormatEncodingBehavior]];
    [(CAMMutableStillImageCaptureRequest *)v15 setLowLightMode:[(CAMViewfinderViewController *)self _lowLightModeForMode:[(CAMViewfinderViewController *)self _resolvedLowLightMode] captureMode:v9 device:v10 isBurst:0]];
    -[CAMMutableStillImageCaptureRequest setDisablesCameraSwitchingDuringRecording:](v15, "setDisablesCameraSwitchingDuringRecording:", [v14 shouldDisableCameraSwitchingDuringVideoRecordingForMode:v9]);
    [(CAMMutableStillImageCaptureRequest *)v15 setMaximumPhotoResolution:[(CAMViewfinderViewController *)self _currentMaxPhotoResolution]];
    [(CAMMutableStillImageCaptureRequest *)v15 setWantsDepthData:[(CAMViewfinderViewController *)self _shouldRequestDepthDeliveryForBurst:0]];
    if (v11) {
      int64_t v27 = 0;
    }
    else {
      int64_t v27 = [(CAMViewfinderViewController *)self _resolvedLivePhotoMode];
    }
    unint64_t v20 = v43;
    [(CAMMutableStillImageCaptureRequest *)v15 setIrisMode:v27];
    uint64_t v28 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    -[CAMMutableStillImageCaptureRequest setVideoEncodingBehavior:](v15, "setVideoEncodingBehavior:", [v28 videoEncodingBehavior]);

    [(CAMMutableStillImageCaptureRequest *)v15 setPersistenceOptions:[(CAMViewfinderViewController *)self _persistenceOptionsForBehavior:v43 allowingOptionalLocalPersistence:v27 == 0]];
    [(CAMViewfinderViewController *)self _updateUserInitiationTimeForRequest:v15];
  }
  int v29 = [(CAMViewfinderViewController *)self _locationController];
  int v30 = [v29 currentLocation];
  if (v30) {
    [(CAMMutableStillImageCaptureRequest *)v15 setLocation:v30];
  }
  BOOL v31 = [v29 headingForOrientation:v42];
  if (v31) {
    [(CAMMutableStillImageCaptureRequest *)v15 setHeading:v31];
  }
  if ([v8 isInternalInstall]) {
    -[CAMMutableStillImageCaptureRequest setShouldDelayRemotePersistence:](v15, "setShouldDelayRemotePersistence:", [v14 shouldDelayRemotePersistence]);
  }
  [(CAMMutableStillImageCaptureRequest *)v15 setTemporaryPersistenceOptions:[(CAMViewfinderViewController *)self _temporaryPersistenceOptionsForBehavior:v20]];
  [(CAMViewfinderViewController *)self _updateOriginForRequest:v15];
  [(CAMViewfinderViewController *)self _desiredPreviewSizeForStillImageCapture];
  -[CAMMutableStillImageCaptureRequest setDesiredPreviewSize:](v15, "setDesiredPreviewSize:");
  if ([v14 sharedLibraryEnabled])
  {
    if ([(CAMViewfinderViewController *)self _isCapturingFromTimer])
    {
      [(CAMMutableStillImageCaptureRequest *)v15 setSharedLibraryMode:[(CAMViewfinderViewController *)self _cachedSharedLibraryTimerState]];
    }
    else
    {
      char v32 = [(CAMViewfinderViewController *)self _librarySelectionController];
      -[CAMMutableStillImageCaptureRequest setSharedLibraryMode:](v15, "setSharedLibraryMode:", [v32 sharedLibraryMode]);
    }
    if ([v8 isInternalInstall])
    {
      BOOL v33 = [(CAMViewfinderViewController *)self _librarySelectionController];
      __int16 v34 = [v33 librarySelectionDiagnostics];
      [(CAMMutableStillImageCaptureRequest *)v15 setSharedLibraryDiagnostics:v34];
    }
    if ([v8 peopleProximityPersistenceSupported])
    {
      BOOL v35 = [(CAMViewfinderViewController *)self _librarySelectionController];
      uint64_t v36 = [v35 acquiredSignalResults];

      uint64_t v37 = [v36 identitiesInProximity];
      int v38 = CAMLibrarySelectionIdentityContactIdentifiersForIdentities(v37);
      [(CAMMutableStillImageCaptureRequest *)v15 setContactIDsInProximity:v38];
    }
  }
  [(CAMMutableStillImageCaptureRequest *)v15 setStereoCaptureStatus:[(CAMViewfinderViewController *)self _stereoCaptureStatus]];
  [(CAMMutableStillImageCaptureRequest *)v15 setPressType:[(CAMViewfinderViewController *)self _currentlyPressedButton]];

  return v15;
}

- (unint64_t)persistenceBehavior
{
  return self->_persistenceBehavior;
}

- (int64_t)_resolvedLivePhotoMode
{
  return self->__resolvedLivePhotoMode;
}

- (int64_t)_persistenceOptionsForBehavior:(unint64_t)a3 allowingOptionalLocalPersistence:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v6 = [(CAMViewfinderViewController *)self _externalStorageOutputEnabled];
  int64_t v7 = 2;
  if (a3 == 2) {
    int64_t v7 = 1;
  }
  if (a3 == 3) {
    int64_t v7 = !v4;
  }
  if (v6) {
    return 3;
  }
  else {
    return v7;
  }
}

- (void)_updateUserInitiationTimeForRequest:(id)a3
{
  id v5 = a3;
  if ([(CAMViewfinderViewController *)self _shouldReportUserInitiationTimeForCurrentSettings])
  {
    unint64_t v4 = [(CAMViewfinderViewController *)self _lastShutterButtonTouchDownTime];
  }
  else
  {
    unint64_t v4 = 0;
  }
  [v5 setUserInitiationTime:v4];
}

- (unint64_t)_lastShutterButtonTouchDownTime
{
  return self->__lastShutterButtonTouchDownTime;
}

- (int64_t)_temporaryPersistenceOptionsForBehavior:(unint64_t)a3
{
  if (a3 - 1 > 2) {
    return 0;
  }
  else {
    return qword_209C79330[a3 - 1];
  }
}

- (void)_updateOriginForRequest:(id)a3
{
  id v4 = a3;
  objc_msgSend(v4, "setOrigin:", -[CAMViewfinderViewController _currentCaptureRequestOrigin](self, "_currentCaptureRequestOrigin"));
}

- (int64_t)_currentCaptureRequestOrigin
{
  id v3 = +[CAMCaptureCapabilities capabilities];
  int64_t v4 = [(CAMViewfinderViewController *)self _layoutStyle];
  uint64_t v5 = [v3 hostProcess];
  uint64_t v6 = 3;
  if (v4 != 2) {
    uint64_t v6 = 1;
  }
  if (v5 != 1) {
    uint64_t v6 = 0;
  }
  if (v5 == 2) {
    int64_t v7 = 1;
  }
  else {
    int64_t v7 = v6;
  }

  return v7;
}

- (int64_t)_lastZoomInteractionType
{
  return self->__lastZoomInteractionType;
}

- (BOOL)_captureStillImageWithRequest:(id)a3 error:(id *)a4
{
  id v6 = a3;
  int64_t v7 = [(CAMViewfinderViewController *)self _captureController];
  int v8 = [v7 captureStillImageWithRequest:v6 error:a4];
  BOOL v9 = [(CAMViewfinderViewController *)self isDisablingAdditionalCaptures];
  char v10 = [v7 isCapturingVideo];
  if (v8 && v9 && (v10 & 1) == 0) {
    [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:1];
  }
  if (((v8 ^ 1 | [v7 isCaptureAvailable]) & 1) == 0)
  {
    uint64_t v11 = +[CAMCaptureCapabilities capabilities];
    char v12 = [v11 portraitModeOverlappingCapturesSupported];

    if ((v12 & 1) == 0 && [(CAMViewfinderViewController *)self _currentMode] == 6)
    {
      unint64_t v13 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus];
      if (v13 <= 0xE && ((1 << v13) & 0x6202) != 0 && ![v6 lowLightMode]) {
        [(CAMViewfinderViewController *)self _shutterButtonSetSpinning:1];
      }
    }
  }
  [(CAMViewfinderViewController *)self _updateUserPreferencesForFilterUsage];
  [(CAMViewfinderViewController *)self _updateFilterScrubberAfterCapture];

  return v8;
}

- (void)_updateUserPreferencesForFilterUsage
{
  uint64_t v5 = +[CAMUserPreferences preferences];
  uint64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  if (v3 == 6)
  {
    uint64_t v3 = objc_msgSend(v5, "setPortraitModeLastCapturedEffectFilterType:", -[CAMViewfinderViewController _portraitModeEffectFilterType](self, "_portraitModeEffectFilterType"));
  }
  else if (v3 == 4)
  {
    uint64_t v3 = objc_msgSend(v5, "setSquareModeLastCapturedEffectFilterType:", -[CAMViewfinderViewController _squareModeEffectFilterType](self, "_squareModeEffectFilterType"));
  }
  else
  {
    int64_t v4 = v5;
    if (v3) {
      goto LABEL_8;
    }
    uint64_t v3 = objc_msgSend(v5, "setPhotoModeLastCapturedEffectFilterType:", -[CAMViewfinderViewController _photoModeEffectFilterType](self, "_photoModeEffectFilterType"));
  }
  int64_t v4 = v5;
LABEL_8:
  MEMORY[0x270F9A758](v3, v4);
}

- (void)_updateFilterScrubberAfterCapture
{
  id v4 = +[CAMCaptureCapabilities capabilities];
  uint64_t v3 = [(CAMViewfinderViewController *)self _targetFilterScrubberView];
  if ([v4 isLiveFilteringSupported]) {
    objc_msgSend(v3, "setMarkedIndex:animated:", -[CAMViewfinderViewController _itemIndexForFilterType:](self, "_itemIndexForFilterType:", -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"))), 1);
  }
}

- (void)stillImageRequestDidStartCapturing:(id)a3 resolvedSettings:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  int v8 = +[CAMCaptureCapabilities capabilities];
  BOOL v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v10 = [v7 isCaptureBeforeResolvingSettingsEnabled];
  BOOL v11 = [(CAMViewfinderViewController *)self _wantsCaptureAnimationForRequest:v6];
  [v7 lowLightCaptureTime];
  if (v11 && (v10 & 1) == 0)
  {
    double v13 = v12;
    uint64_t v14 = [v6 lowLightMode];
    if ((unint64_t)(v14 - 1) >= 2)
    {
      if (!v14) {
        [(CAMViewfinderViewController *)self _performCaptureAnimation];
      }
    }
    else
    {
      if (v13 >= 2.0)
      {
        [v9 setPreviewAlignmentGuideVisible:1 animated:1];
        unint64_t v15 = [(CAMViewfinderViewController *)self _motionController];
        uint64_t v16 = [v9 previewAlignmentGuide];
        BOOL v17 = [v16 alignmentModel];
        [v15 beginUpdatingPreviewAlignmentModel:v17];

        CGFloat v18 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
        [v18 presentControlDrawerModally:1 forReason:2 controlType:9];

        objc_initWeak(&location, self);
        uint64_t v19 = [(CAMViewfinderViewController *)self _controlDrawer];
        unint64_t v20 = [v19 lowLightSlider];
        v57[0] = MEMORY[0x263EF8330];
        v57[1] = 3221225472;
        v57[2] = __83__CAMViewfinderViewController_stillImageRequestDidStartCapturing_resolvedSettings___block_invoke;
        v57[3] = &unk_263FA1D38;
        objc_copyWeak(&v58, &location);
        [v20 performCaptureAnimationWithDuration:v57 completion:v13];

        [(CAMViewfinderViewController *)self _setLowLightCaptureUIVisible:1];
        [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
        objc_destroyWeak(&v58);
        objc_destroyWeak(&location);
      }
      uint64_t v21 = objc_msgSend(v8, "lowLightPreviewOverlayStyleForDevicePosition:sensitiveToChangingDisplayFeedback:sensitiveToInitialFeedback:duration:", objc_msgSend(v6, "captureDevicePosition"), objc_msgSend(v7, "lowLightCaptureHasConstantPreviewFeedbackSensitivity"), objc_msgSend(v7, "lowLightCaptureHasInitialPreviewFeedbackSensitivity"), v13);
      int64_t v22 = objc_msgSend(MEMORY[0x263F825C8], "colorWithCGColor:", objc_msgSend(v7, "lowLightPreviewColorEstimate"));
      int64_t v23 = v22;
      if (v22)
      {
        id v24 = v22;
      }
      else
      {
        id v24 = [MEMORY[0x263F825C8] blackColor];
      }
      BOOL v25 = v24;

      switch(v21)
      {
        case 0:
        case 1:
          int v29 = (void *)MEMORY[0x263F15808];
          int v30 = (void *)MEMORY[0x263F15EC8];
          goto LABEL_16;
        case 2:
          LODWORD(v26) = 1.0;
          LODWORD(v27) = 1.0;
          LODWORD(v28) = 1.0;
          uint64_t v32 = [MEMORY[0x263F15808] functionWithControlPoints:v26 :0.0 :v27 :v28];
          goto LABEL_17;
        case 3:
          int v29 = (void *)MEMORY[0x263F15808];
          int v30 = (void *)MEMORY[0x263F15EA0];
LABEL_16:
          uint64_t v32 = [v29 functionWithName:*v30];
LABEL_17:
          BOOL v31 = (void *)v32;
          goto LABEL_18;
        case 4:
          BOOL v31 = 0;
          uint64_t v33 = 0;
          goto LABEL_19;
        default:
          BOOL v31 = 0;
LABEL_18:
          uint64_t v33 = 1;
LABEL_19:
          [(CAMViewfinderViewController *)self _performCaptureAnimationWithDuration:v31 curve:v25 color:v33 fadeOut:v13];
          __int16 v34 = [(CAMViewfinderViewController *)self _feedbackController];
          [v34 prepareDiscreteFeedback:0];

          break;
      }
    }
  }
  BOOL v35 = [v6 burstIdentifier];

  if (v35)
  {
    uint64_t v36 = [(CAMViewfinderViewController *)self _feedbackController];
    [v36 performDiscreteFeedback:1];

    uint64_t v37 = [(CAMViewfinderViewController *)self _feedbackController];
    [v37 prepareDiscreteFeedback:1];

    int v38 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

    if (v38)
    {
      uint64_t v39 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      uint64_t v40 = [v39 incrementCounter];
    }
    else
    {
      uint64_t v39 = [(CAMViewfinderViewController *)self _burstIndicatorView];
      uint64_t v40 = [v39 incrementWithCaptureAnimation:1];
    }
    uint64_t v41 = v40;

    uint64_t v42 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v42 burstCaptureNumberOfPhotosDidChange:v41];
  }
  unint64_t v43 = v9;
  int v55 = [v7 isHDREnabled];
  double v56 = v7;
  int v54 = [v7 isPortraitEffectEnabled];
  int v44 = [v8 portraitModeOverlappingCapturesSupported];
  double v45 = v8;
  int v46 = [v8 isSmartHDRSupported];
  uint64_t v47 = [v6 lowLightMode];
  uint64_t v48 = [v6 maximumPhotoResolution];
  unsigned __int8 v49 = v45;
  int v50 = [v45 supportsOverlappingCapturesForResolution:3];
  if ([v6 captureMode] == 9)
  {
    CGFloat v51 = v6;
    unint64_t v52 = ((unint64_t)[v6 stereoCaptureStatus] >> 1) & 1;
    if (v47) {
      goto LABEL_34;
    }
  }
  else
  {
    CGFloat v51 = v6;
    LODWORD(v52) = 0;
    if (v47) {
      goto LABEL_34;
    }
  }
  if (v48 == 3) {
    int v53 = v50;
  }
  else {
    int v53 = 1;
  }
  if (((v46 | ~v55) & (v44 | ~v54) & v53 ^ 1 | v52) == 1) {
    [(CAMViewfinderViewController *)self _shutterButtonSetSpinning:1];
  }
LABEL_34:
  [(CAMPreviewViewController *)self->__previewViewController notifyWillStartCapturing];
}

- (void)_performCaptureAnimation
{
}

- (void)stillImageRequestDidCompleteCapture:(id)a3 error:(id)a4
{
  id v10 = a3;
  id v6 = a4;
  id v7 = [(CAMViewfinderViewController *)self stillImageCaptureTestDelegate];

  if (v7)
  {
    int v8 = [(CAMViewfinderViewController *)self stillImageCaptureTestDelegate];
    [v8 viewfinderViewController:self didReceiveStillImageRequestDidCompleteCapture:v10 error:v6];
  }
  if (v6 && [(CAMViewfinderViewController *)self isDisablingAdditionalCaptures]) {
    [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:0];
  }
  if (([v10 isCTMVideo] & 1) == 0)
  {
    BOOL v9 = [v10 analyticsEvent];
    [v9 publish];
  }
}

- (void)stillImageRequestDidCompleteStillImageCapture:(id)a3 withResponse:(id)a4 error:(id)a5
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  BOOL v11 = [v8 textAnalysisIdentifier];

  if (v11)
  {
    [(CAMViewfinderViewController *)self _handleTextAnalysisStillImageResponse:v9 error:v10 forRequest:v8];
  }
  else
  {
    double v12 = [(CAMViewfinderViewController *)self stillImageCaptureTestDelegate];

    if (v12)
    {
      double v13 = [(CAMViewfinderViewController *)self stillImageCaptureTestDelegate];
      [v13 viewfinderViewController:self didReceiveStillImageRequestDidCompleteStillImageCapture:v8 withResponse:v9 error:v10];
    }
    uint64_t v14 = [v9 coordinationInfo];
    int v15 = [v14 isFinalExpectedStillImageResult];
    int v16 = [v14 isEV0ForHDREV0Pair];
    BOOL v17 = [(CAMViewfinderViewController *)self _cameraRollController];
    if ((v10 || v15)
      && ![(CAMViewfinderViewController *)self _isLowLightCaptureCanceling])
    {
      [(CAMViewfinderViewController *)self _shutterButtonSetSpinning:0];
    }
    if (v16)
    {
      CGFloat v18 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = [v9 persistenceUUID];
        int v30 = 138543618;
        BOOL v31 = v19;
        __int16 v32 = 2114;
        uint64_t v33 = v14;
        _os_log_impl(&dword_2099F8000, v18, OS_LOG_TYPE_DEFAULT, "ImageWell %{public}@: ignoring future updates for EV0 result from stillImageRequestDidCompleteStillImageCapture %{public}@", (uint8_t *)&v30, 0x16u);
      }
      unint64_t v20 = [v8 EV0PersistenceUUID];
      uint64_t v21 = [v8 persistenceUUID];
      [v17 ignoreImageWellChangeNotificationForEV0UUID:v20 withHDRUUID:v21];
    }
    [(CAMViewfinderViewController *)self _updateImageWellWithStillImageResponse:v9 forRequest:v8 error:v10];
    if (!v10)
    {
      if ([(CAMViewfinderViewController *)self _isPrimaryDisplayAssetForCoordinationInfo:v14])
      {
        objc_msgSend(v17, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v9, 0, objc_msgSend(v8, "persistenceOptions"));
      }
      int64_t v22 = [v8 analyticsEvent];
      [v22 populateFromStillImageCaptureResponse:v9];
    }
    int64_t v23 = [v8 burstIdentifier];

    if (v23)
    {
      [(CAMViewfinderViewController *)self _updateDiskSpaceAlertViewVisibilityAnimated:1];
    }
    else
    {
      id v24 = [(CAMViewfinderViewController *)self _captureController];
      BOOL v25 = [(CAMViewfinderViewController *)self _currentBurstTimer];
      if (([v24 isCapturingBurst] & 1) == 0
        && ([v24 isCapturingStillImage] & 1) == 0
        && [v25 fired])
      {
        double v26 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v30) = 0;
          _os_log_impl(&dword_2099F8000, v26, OS_LOG_TYPE_DEFAULT, "Starting burst because image capture finished after burst timer fired", (uint8_t *)&v30, 2u);
        }

        [(CAMViewfinderViewController *)self _beginCapturingBurst];
      }
    }
    if ([v8 lowLightMode])
    {
      [(CAMViewfinderViewController *)self _setLowLightCaptureUIVisible:0];
      [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:1];
      [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Night mode capture ended"];
      double v27 = [(CAMViewfinderViewController *)self _controlDrawer];
      double v28 = [v27 lowLightSlider];
      [v28 endCaptureAnimationAnimated:1];

      int v29 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      [v29 dismissModalControlDrawerIfNeededForReason:2];
    }
  }
}

- (void)_updateImageWellWithStillImageResponse:(id)a3 forRequest:(id)a4 error:(id)a5
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  id v10 = [v8 coordinationInfo];
  BOOL v11 = [v8 persistenceUUID];
  int v12 = [v10 representsFinalProcessedStillImage];
  if (a5)
  {
    [(CAMImageWell *)self->__imageWell recoverFromFailedThumbnailUpdate];
  }
  else if (v12)
  {
    double v13 = [v8 imageWellImage];
    if (v13)
    {
      uint64_t v14 = [(CAMViewfinderViewController *)self _cameraRollController];
      uint64_t v15 = [v8 sessionIdentifier];
      int v16 = [v8 persistenceUUID];
      if ([v14 isCaptureSessionCurrent:v15])
      {
        [v14 willPersistAssetWithUUID:v16 captureSession:v15];
        BOOL v17 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = 138543874;
          id v24 = v16;
          __int16 v25 = 2114;
          double v26 = v13;
          __int16 v27 = 2114;
          double v28 = v10;
          _os_log_impl(&dword_2099F8000, v17, OS_LOG_TYPE_DEFAULT, "ImageWell %{public}@: updating from still image capture %{public}@ %{public}@", (uint8_t *)&v23, 0x20u);
        }

        [(CAMImageWell *)self->__imageWell prepareForThumbnailUpdateFromCapture];
        [(CAMViewfinderViewController *)self _presentImageWellImage:v13 uuid:v16 animated:1];
        CAMSignpostWithIDAndArgs(75, [v8 captureID], objc_msgSend(v8, "captureID"), 0, 0, 0);
        if (![v9 conformsToProtocol:&unk_26BE66418]
          || ([v9 burstIdentifier],
              CGFloat v18 = objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          uint64_t v19 = [(CAMViewfinderViewController *)self _remoteShutterController];
          [v19 sendThumbnailImage:v13 isVideo:0];
        }
        unint64_t v20 = [(CAMViewfinderViewController *)self stillImageCaptureTestDelegate];
        [v20 viewfinderViewController:self didUpdateImageWellWithRequest:v9 response:v8 error:0];
      }
    }
    else
    {
      int64_t v22 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 138543618;
        id v24 = v11;
        __int16 v25 = 2114;
        double v26 = v10;
        _os_log_impl(&dword_2099F8000, v22, OS_LOG_TYPE_DEFAULT, "ImageWell %{public}@: no image well image found, so calling recoverFromFailedThumbnailUpdate for still image capture %{public}@", (uint8_t *)&v23, 0x16u);
      }

      [(CAMImageWell *)self->__imageWell recoverFromFailedThumbnailUpdate];
    }
  }
  else
  {
    uint64_t v21 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138543618;
      id v24 = v11;
      __int16 v25 = 2114;
      double v26 = v10;
      _os_log_impl(&dword_2099F8000, v21, OS_LOG_TYPE_DEFAULT, "ImageWell %{public}@: ignoring non-final image well update from still image capture %{public}@", (uint8_t *)&v23, 0x16u);
    }
  }
}

- (void)stillImageRequestDidCompleteStillImageLocalPersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (a5)
  {
    BOOL v11 = [a5 userInfo];
    int v12 = [v11 objectForKeyedSubscript:*MEMORY[0x263F08608]];

    double v13 = [v12 domain];
    if ([v13 isEqual:*MEMORY[0x263F08438]])
    {
      uint64_t v14 = [v12 code];

      if (v14 != 28)
      {
LABEL_10:

        goto LABEL_13;
      }
      uint64_t v15 = [v8 captureMode];
      uint64_t v16 = [v8 captureDevice];
      BOOL v17 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      double v13 = [(CAMViewfinderViewController *)self _graphConfigurationForChangeToMode:v15 device:v16 fromGraphConfiguration:v17];

      CGFloat v18 = [(CAMViewfinderViewController *)self _storageController];
      LODWORD(v17) = [v18 hasDiskSpaceToAllowCaptureWithConfiguration:v13 allowPurging:1 verbose:1];

      uint64_t v19 = @"insufficient";
      if (v17) {
        uint64_t v19 = @"sufficient";
      }
      unint64_t v20 = v19;
      uint64_t v21 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        -[CAMViewfinderViewController stillImageRequestDidCompleteStillImageLocalPersistence:withResponse:error:]();
      }

      [(CAMViewfinderViewController *)self _setReceivedOutOfDiskSpaceErrorDuringCapture:1];
      [(CAMViewfinderViewController *)self _updateDiskSpaceAlertViewVisibilityAnimated:1];
    }
    goto LABEL_10;
  }
  int64_t v22 = [v9 coordinationInfo];
  BOOL v23 = [(CAMViewfinderViewController *)self _isPrimaryDisplayAssetForCoordinationInfo:v22];

  if (v23)
  {
    id v24 = [(CAMViewfinderViewController *)self _cameraRollController];
    objc_msgSend(v24, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v10, 0, objc_msgSend(v8, "persistenceOptions"));
  }
LABEL_13:
}

- (void)stillImageRequestDidCompleteStillImageRemotePersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  if (!a5)
  {
    id v7 = a4;
    id v8 = a3;
    id v9 = [v7 persistenceUUID];
    uint64_t v10 = [v7 sessionIdentifier];
    BOOL v11 = [(CAMViewfinderViewController *)self _cameraRollController];
    uint64_t v12 = [v8 persistenceOptions];

    [v11 processTransientAssetUpdate:v7 preventingInsertion:1 persistenceOptions:v12];
    [v11 didPersistAssetWithUUID:v9 captureSession:v10];
  }
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1, a4);
}

- (BOOL)shouldHideElapsedTimeView
{
  id v2 = self;
  uint64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  id v4 = [(CAMViewfinderViewController *)v2 _motionController];
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideElapsedTimeViewForGraphConfiguration:orientation:](v2, "_shouldHideElapsedTimeViewForGraphConfiguration:orientation:", v3, [v4 captureOrientation]);

  return (char)v2;
}

- (BOOL)shouldHideTopBar
{
  id v2 = self;
  uint64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideTopBarForGraphConfiguration:v3];

  return (char)v2;
}

- (BOOL)shouldHidePortraitModeInstructionLabel
{
  id v2 = self;
  uint64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHidePortraitModeInstructionLabelForGraphConfiguration:v3];

  return (char)v2;
}

- (BOOL)shouldHideQRCodeInstructionLabel
{
  id v2 = self;
  uint64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideQRCodeInstructionLabelForGraphConfiguration:v3];

  return (char)v2;
}

- (void)_handleApplicationWillAddDeactivationReason:(id)a3
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = [a3 userInfo];
  uint64_t v5 = [v4 objectForKeyedSubscript:*MEMORY[0x263F83C70]];
  uint64_t v6 = [v5 integerValue];

  id v7 = [(CAMViewfinderViewController *)self _debugStringForApplicationDeactivationReason:v6];
  id v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138543362;
    uint64_t v14 = v7;
    _os_log_impl(&dword_2099F8000, v8, OS_LOG_TYPE_DEFAULT, "Will add deactivation reason %{public}@", (uint8_t *)&v13, 0xCu);
  }

  id v9 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  uint64_t v10 = v9;
  switch((int)v6)
  {
    case 0:
    case 4:
    case 5:
    case 12:
    case 15:
      break;
    case 1:
      uint64_t v11 = 14;
      goto LABEL_22;
    case 2:
      [v9 addClosedViewfinderReason:15];
      if (![(CAMViewfinderViewController *)self _capturingFromPhysicalButton]) {
        break;
      }
      goto LABEL_13;
    case 3:
      [v9 addClosedViewfinderReason:16];
      if ([(CAMViewfinderViewController *)self _capturingFromPhysicalButton]) {
        [(CAMViewfinderViewController *)self _stopRecordingForDeactivationReason:v7];
      }
      if ([(CAMViewfinderViewController *)self _currentMode] != 6) {
        break;
      }
      uint64_t v12 = [(CAMViewfinderViewController *)self _disabledPreviewController];
      [v12 addDisabledPreviewReason:2];
      goto LABEL_20;
    case 6:
      uint64_t v11 = 18;
      goto LABEL_22;
    case 7:
      [v9 addClosedViewfinderReason:19];
LABEL_13:
      [(CAMViewfinderViewController *)self _stopRecordingForDeactivationReason:v7];
      break;
    case 8:
      uint64_t v11 = 20;
      goto LABEL_22;
    case 10:
      uint64_t v12 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      goto LABEL_20;
    case 11:
      [v9 addClosedViewfinderReason:21];
      uint64_t v12 = [(CAMViewfinderViewController *)self _disabledPreviewController];
      [v12 removeDisabledPreviewReason:2];
      goto LABEL_20;
    case 13:
      uint64_t v11 = 22;
LABEL_22:
      [v9 addClosedViewfinderReason:v11];
      break;
    default:
      uint64_t v12 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
LABEL_16:
      }
        -[CAMViewfinderViewController _handleApplicationWillAddDeactivationReason:]();
LABEL_20:

      break;
  }
}

- (void)_handleApplicationWillResignActive:(id)a3
{
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Received UIApplicationWillResignActiveNotification", v16, 2u);
  }

  [(CAMViewfinderViewController *)self _writeUserPreferences];
  uint64_t v5 = +[CAMUserPreferences preferences];
  if ([v5 preserveCaptureMode])
  {
  }
  else
  {
    BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];

    if (!v6)
    {
      int64_t v7 = [(CAMViewfinderViewController *)self _currentMode];
      int64_t v8 = +[CAMUserPreferences defaultMode];
      int64_t v9 = [(CAMViewfinderViewController *)self _currentDevicePosition];
      int64_t v10 = +[CAMUserPreferences defaultDevicePosition];
      if (v7 != v8 || v9 != v10)
      {
        uint64_t v11 = [(CAMViewfinderViewController *)self _captureController];
        uint64_t v12 = +[CAMUserPreferences preferences];
        int v13 = [v12 resetTimeoutDate];
        [v11 cancelAutoResumeAfterDate:v13];

        [(CAMViewfinderViewController *)self _setAutoResumeCancelingWithoutBackgrounding:1];
      }
    }
  }
  [(CAMViewfinderViewController *)self _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:1];
  uint64_t v14 = +[CAMCaptureCapabilities capabilities];
  int v15 = [v14 isImageAnalysisSupported];

  if (v15) {
    [(CAMViewfinderViewController *)self _resetMachineReadableMetadataAndProcessing];
  }
}

- (void)_writeUserPreferences
{
  BOOL v3 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  int64_t v4 = [(CAMViewfinderViewController *)self _layoutStyle];
  if (!v3 && v4 != 2)
  {
    int v54 = +[CAMUserPreferences preferences];
    uint64_t v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    uint64_t v6 = [v5 mode];
    uint64_t v7 = [v5 device];
    int v53 = v5;
    uint64_t v49 = [v5 videoConfiguration];
    int64_t v48 = [(CAMViewfinderViewController *)self _resolvedFlashMode];
    int64_t v47 = [(CAMViewfinderViewController *)self _desiredTorchMode];
    int64_t v46 = [(CAMViewfinderViewController *)self _resolvedHDRMode];
    int64_t v52 = [(CAMViewfinderViewController *)self _desiredLivePhotoMode];
    int64_t v45 = [(CAMViewfinderViewController *)self _resolvedTimerDuration];
    int64_t v44 = [(CAMViewfinderViewController *)self _photoModeEffectFilterType];
    int64_t v43 = [(CAMViewfinderViewController *)self _squareModeEffectFilterType];
    int64_t v42 = [(CAMViewfinderViewController *)self _portraitModeEffectFilterType];
    int64_t v8 = [(CAMViewfinderViewController *)self _callStatusMonitor];
    uint64_t v9 = [v8 isCallActive];

    uint64_t v50 = v7;
    uint64_t v41 = objc_msgSend(v54, "audioConfigurationForMode:device:emulationMode:duringCall:", v6, v7, -[CAMViewfinderViewController emulationMode](self, "emulationMode"), v9);
    uint64_t v40 = v6;
    if ([v54 shouldMirrorFrontCameraCaptures])
    {
      int64_t v10 = +[CAMCaptureCapabilities capabilities];
      char v38 = [v10 mirroredFrontCapturesSupportedForMode:v6];
    }
    else
    {
      char v38 = 0;
    }
    uint64_t v39 = [CAMCaptureConfiguration alloc];
    unsigned int v37 = [v54 shouldMixAudioWithOthers];
    int64_t v36 = [(CAMViewfinderViewController *)self photoModeAspectRatioCrop];
    int64_t v35 = [(CAMViewfinderViewController *)self _portraitModeLightingEffectType];
    [(CAMViewfinderViewController *)self _portraitModeApertureValue];
    double v12 = v11;
    [(CAMViewfinderViewController *)self _portraitModeIntensityValue];
    double v14 = v13;
    uint64_t v34 = [(CAMViewfinderViewController *)self _exposureBiasesByMode];
    int64_t v33 = [(CAMViewfinderViewController *)self _resolvedMacroMode];
    int64_t v32 = [(CAMViewfinderViewController *)self _resolvedPhotoResolution];
    int64_t v31 = [(CAMViewfinderViewController *)self _resolvedRAWMode];
    int64_t v15 = [(CAMViewfinderViewController *)self _desiredProResVideoMode];
    uint64_t v16 = [(CAMViewfinderViewController *)self _semanticStyles];
    unint64_t v17 = [(CAMViewfinderViewController *)self _selectedSemanticStyleIndex];
    unint64_t v18 = [(CAMViewfinderViewController *)self _smartStyleSystemStyleIndex];
    int64_t v19 = [(CAMViewfinderViewController *)self _desiredVideoStabilizationMode];
    char v20 = [v54 isZoomPIPEnabled];
    BOOL v21 = [(CAMViewfinderViewController *)self _isSpatialVideoEnabled];
    BOOL v22 = [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion];
    BOOL v23 = [(CAMViewfinderViewController *)self _librarySelectionController];
    BYTE2(v30) = v22;
    BYTE1(v30) = v21;
    LOBYTE(v30) = v20;
    LOBYTE(v29) = v38;
    CGFloat v51 = -[CAMCaptureConfiguration initWithCaptureMode:captureDevice:videoConfiguration:audioConfiguration:mixAudioWithOthers:flashMode:torchMode:HDRMode:irisMode:timerDuration:photoModeAspectRatioCrop:photoModeEffectFilterType:squareModeEffectFilterType:portraitModeEffectFilterType:portraitModeLightingEffectType:portraitModeApertureValue:portraitModeIntensityValue:mirrorFrontCameraCaptures:exposureBiasesByMode:macroMode:photoResolution:rawMode:proResVideoMode:semanticStyles:selectedSemanticStyleIndex:smartStyleSystemStyleIndex:videoStabilizationMode:zoomPIPEnabled:spatialVideoEnabled:optionalDepthEffectEnabled:sharedLibraryMode:](v39, "initWithCaptureMode:captureDevice:videoConfiguration:audioConfiguration:mixAudioWithOthers:flashMode:torchMode:HDRMode:irisMode:timerDuration:photoModeAspectRatioCrop:photoModeEffectFilterType:squareModeEffectFilterType:portraitModeEffectFilterType:portraitModeLightingEffectType:portraitModeApertureValue:portraitModeIntensityValue:mirrorFrontCameraCaptures:exposureBiasesByMode:macroMode:photoResolution:rawMode:proResVideoMode:semanticStyles:selectedSemanticStyleIndex:smartStyleSystemStyleIndex:videoStabilizationMode:zoomPIPEnabled:spatialVideoEnabled:optionalDepthEffectEnabled:sharedLibraryMode:", v40, v50, v49, v41, v37, v48, v12, v14, v47, v46, v52, v45,
            v36,
            v44,
            v43,
            v42,
            v35,
            v29,
            v34,
            v33,
            v32,
            v31,
            v15,
            v16,
            v17,
            v18,
            v19,
            v30,
            [v23 sharedLibraryMode]);

    id v24 = [[CAMConflictingControlConfiguration alloc] initWithDesiredFlashMode:[(CAMViewfinderViewController *)self _desiredFlashMode] desiredHDRMode:[(CAMViewfinderViewController *)self _desiredHDRMode] flashAndHDRConflictingControl:[(CAMViewfinderViewController *)self _flashAndHDRConflictingControl] desiredLivePhotoMode:v52 desiredRAWMode:[(CAMViewfinderViewController *)self _desiredRAWMode] desiredPhotoResolution:[(CAMViewfinderViewController *)self _desiredPhotoResolution] photoFormatConflicts:[(CAMViewfinderViewController *)self _photoFormatConflicts] desiredLowLightControlMode:[(CAMViewfinderViewController *)self _desiredLowLightControlMode] lowLightConflicts:[(CAMViewfinderViewController *)self _lowLightConflicts] desiredMacroMode:[(CAMViewfinderViewController *)self _desiredMacroMode]];
    [v54 setCaptureConfiguration:v51];
    [v54 setConflictingControlConfiguration:v24];
    __int16 v25 = [(CAMViewfinderViewController *)self _openHalfPressSpotlightControls];
    if (v25) {
      [v54 setOpenHalfPressSpotlightControls:v25];
    }
    double v26 = [(CAMViewfinderViewController *)self _controlDrawer];

    if (v26)
    {
      __int16 v27 = [(CAMViewfinderViewController *)self _preferredControlToOpenInDrawerForMode];
      double v28 = (void *)[v27 copy];
      [v54 setPreferredDrawerControlByMode:v28];
    }
    [v54 writePreferences];
  }
}

- (int64_t)_desiredLivePhotoMode
{
  return self->__desiredLivePhotoMode;
}

- (int64_t)_squareModeEffectFilterType
{
  return self->__squareModeEffectFilterType;
}

- (int64_t)_portraitModeEffectFilterType
{
  return self->__portraitModeEffectFilterType;
}

- (int64_t)_portraitModeLightingEffectType
{
  return self->__portraitModeLightingEffectType;
}

- (void)closedViewfinderController:(id)a3 wantsViewfinderClosedForReason:(int64_t)a4
{
  id v6 = a3;
  uint64_t v7 = [(CAMViewfinderViewController *)self _viewfinderTransitionable];
  [(CAMViewfinderViewController *)self _updateLevelMotionTracking];
  if (v7)
  {
    [(CAMViewfinderViewController *)self _setClosingViewfinder:1];
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Began closing viewfinder"];
    int64_t v8 = [MEMORY[0x263F82438] sharedApplication];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v9 = v8;
      [v9 willCloseViewfinderForReason:a4];
    }
    else
    {
      id v9 = 0;
    }
    BOOL v10 = [(CAMViewfinderViewController *)self _shouldAnimateViewfinderCloseForReason:a4];
    objc_initWeak(&location, self);
    uint64_t v18 = MEMORY[0x263EF8330];
    uint64_t v19 = 3221225472;
    char v20 = __89__CAMViewfinderViewController_closedViewfinderController_wantsViewfinderClosedForReason___block_invoke;
    BOOL v21 = &unk_263FA1FD0;
    objc_copyWeak(v23, &location);
    id v11 = v9;
    id v22 = v11;
    v23[1] = (id)a4;
    double v12 = _Block_copy(&v18);
    if ((unint64_t)a4 <= 0x16)
    {
      if (((1 << a4) & 0x5FCFFE) != 0)
      {
        double v13 = [(CAMViewfinderViewController *)self _transitionController];
        [v13 closeWithBlur:1 animated:v10 withCompletionHandler:v12];
      }
      else if (((1 << a4) & 0x203000) != 0)
      {
        double v13 = [(CAMViewfinderViewController *)self _transitionController];
        [v13 closeWithBlur:0 animated:v10 withCompletionHandler:v12];
      }
      else
      {
        int64_t v15 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
        uint64_t v16 = [v15 device];

        if ((unint64_t)(v16 - 1) > 0xA) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = qword_209C794E8[v16 - 1];
        }
        double v13 = [(CAMViewfinderViewController *)self _transitionController];
        [v13 closeAndRotateWithDirection:v17 withCompletionHandler:v12];
      }
    }
    double v14 = [(CAMViewfinderViewController *)self _targetFilterScrubberView];
    if (v14 && [(CAMViewfinderViewController *)self _isShowingFilterScrubber]) {
      [v14 setSuspended:1];
    }
    [(CAMViewfinderViewController *)self _updatePanoramaViewVisibilityForViewfinderTransition];

    objc_destroyWeak(v23);
    objc_destroyWeak(&location);
  }
  else
  {
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Began closing viewfinder"];
    [(CAMViewfinderViewController *)self _updatePanoramaViewVisibilityForViewfinderTransition];
  }
}

- (void)_setClosingViewfinder:(BOOL)a3
{
  self->__closingViewfinder = a3;
}

- (BOOL)_shouldAnimateViewfinderCloseForReason:(int64_t)a3
{
  if ((unint64_t)(a3 - 12) < 2 || a3 == 21) {
    return 0;
  }
  if (a3 == 8) {
    return ![(CAMViewfinderViewController *)self _isShowingCameraRoll];
  }
  return 1;
}

- (void)_updatePanoramaViewVisibilityForViewfinderTransition
{
  uint64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v4 = [(CAMViewfinderViewController *)self _shouldHidePanoramaViewForGraphConfiguration:v3];
  uint64_t v5 = [(CAMViewfinderViewController *)self _panoramaViewController];
  id v6 = (void *)MEMORY[0x263F82E00];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = __83__CAMViewfinderViewController__updatePanoramaViewVisibilityForViewfinderTransition__block_invoke;
  v8[3] = &unk_263FA02A8;
  id v9 = v5;
  BOOL v10 = v4;
  id v7 = v5;
  [v6 animateWithDuration:v8 animations:0.25];
}

void __89__CAMViewfinderViewController_closedViewfinderController_wantsViewfinderClosedForReason___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _setClosingViewfinder:0];
  [WeakRetained _updateEnabledControlsWithReason:@"Finished closing viewfinder"];
  [*(id *)(a1 + 32) didCloseViewfinderForReason:*(void *)(a1 + 48)];
}

- (void)_handleApplicationDidEnterBackground:(id)a3
{
  BOOL v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v28 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Received UIApplicationDidEnterBackgroundNotification", v28, 2u);
  }

  uint64_t v5 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v5 addClosedViewfinderReason:7];
  [(CAMViewfinderViewController *)self _setAutoResumeCancelingWithoutBackgrounding:0];
  [(CAMViewfinderViewController *)self _resetMachineReadableMetadataAndProcessing];
  [(CAMViewfinderViewController *)self _setImageAnalyzer:0];
  id v6 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  id v7 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
  [v6 countEventsFromAnalyticsVisionSession:v7];

  int64_t v8 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
  [v8 publish];

  [(CAMViewfinderViewController *)self _setVisionAnalyticsSession:0];
  id v9 = +[CAMUserPreferences preferences];
  int v10 = [v9 sharedLibraryAutoBehaviorEnabled];

  if (v10)
  {
    id v11 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    int v12 = [v11 didCapture];

    if (v12)
    {
      double v13 = [CAMAnalyticsSharedLibraryModeEvent alloc];
      double v14 = [(CAMViewfinderViewController *)self _librarySelectionController];
      int64_t v15 = [(CAMAnalyticsSharedLibraryModeEvent *)v13 initWithLibrarySelectionController:v14];

      [(CAMAnalyticsSharedLibraryModeEvent *)v15 publish];
    }
  }
  uint64_t v16 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  uint64_t v17 = [(CAMViewfinderViewController *)self _locationController];
  [v16 updateForLocationController:v17];

  uint64_t v18 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  [v18 publish];

  [(CAMViewfinderViewController *)self _setAnalyticsSessionEvent:0];
  if ([(CAMViewfinderViewController *)self _isCapturingFromTimer]) {
    [(CAMViewfinderViewController *)self _stopCountdownForCaptureTimer];
  }
  [(CAMViewfinderViewController *)self _setResolvedLowLightMode:0];
  uint64_t v19 = [(CAMViewfinderViewController *)self _captureController];
  [v19 changeToLowLightMode:0];

  [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:0];
  char v20 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v20 setControlDrawerExpanded:0 forReason:6 animated:0];

  [(CAMViewfinderViewController *)self _hideUtilityBarAnimated:0];
  if (+[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]])
  {
    [(CAMZoomSlider *)self->__zoomSlider makeInvisibleAnimated:0];
  }
  [(CAMZoomControl *)self->__zoomControl setShouldShowZoomDial:0 animationDuration:0];
  BOOL v21 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v21 dismissCameraRollViewControllerForced:1 animated:0];
  id v22 = +[CAMCaptureCapabilities capabilities];
  if (([v22 hostProcess] | 4) == 4 && objc_msgSend(v22, "isImageAnalysisSupported")) {
    [(CAMViewfinderViewController *)self dismissViewControllerAnimated:0 completion:0];
  }
  if (v10)
  {
    BOOL v23 = [(CAMViewfinderViewController *)self _librarySelectionController];
    [v23 stopAndClearAcquiredSignals];
  }
  [(CAMViewfinderViewController *)self _dismissDiskSpaceAlertViewAnimated:0];
  [(CAMViewfinderViewController *)self _updateLevelMotionTracking];
  [(CAMViewfinderViewController *)self _ensureSensitiveContentHidden];
  id v24 = [(CAMViewfinderViewController *)self _transitionController];
  [v24 handleApplicationDidEnterBackground];

  __int16 v25 = [(CAMViewfinderViewController *)self _viewfinderTransitionable];
  [v25 prepareForResumingUsingCrossfade];

  [(CAMViewfinderViewController *)self _updateExternalStorageMonitoringState:2];
  double v26 = [(CAMViewfinderViewController *)self _storageController];
  __int16 v27 = [v26 purgeableStorageContainer];
  [v27 cancelPurge];
}

- (void)_hideUtilityBarAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  [(CAMViewfinderViewController *)self _setWantsFilterScrubberVisible:0 animated:a3];
  [(CAMViewfinderViewController *)self _setShowingPortraitApertureSlider:0 animated:v3];
  [(CAMViewfinderViewController *)self _setShowingPortraitIntensitySlider:0 animated:v3];
}

- (void)_setWantsFilterScrubberVisible:(BOOL)a3 animated:(BOOL)a4
{
  if (self->__wantsFilterScrubberVisible != a3)
  {
    BOOL v4 = a4;
    BOOL v5 = a3;
    self->__wantsFilterScrubberVisible = a3;
    [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:a4];
    [(CAMViewfinderViewController *)self _setShouldShowFilterScrubberAfterNextRender:v5 & v4];
    if ([(CAMViewfinderViewController *)self _shouldShowFilterScrubberAfterNextRender])
    {
      [(CAMViewfinderViewController *)self _createFilterScrubberViewIfNecessary];
    }
    else
    {
      [(CAMViewfinderViewController *)self _setShowingFilterScrubber:v5 animated:v4];
    }
    unint64_t v7 = [(CAMViewfinderViewController *)self _previewConfigurationForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition] videoThumbnailOutputEnabled:v5];
    id v8 = [(CAMViewfinderViewController *)self _captureController];
    [v8 changeToPreviewConfiguration:v7];
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Filter scrubber desired visibility changed"];
  }
}

- (void)_ensureSensitiveContentHidden
{
  BOOL v3 = [(CAMViewfinderViewController *)self _imageWell];
  [v3 setThumbnailImage:0 uuid:0 animated:0];

  id v4 = [(CAMViewfinderViewController *)self _viewfinderTransitionable];
  [v4 removeInflightBlurAnimations];
}

- (void)captureControllerWasInterrupted:(id)a3
{
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "captureControllerWasInterrupted:", v8, 2u);
  }

  BOOL v5 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v5 addClosedViewfinderReason:4];
  if ([(CAMViewfinderViewController *)self _isCapturingFromTimer]) {
    [(CAMViewfinderViewController *)self _stopCountdownForCaptureTimer];
  }
  [(CAMViewfinderViewController *)self _handleGeneralCaptureControllerSuspension];
  [(CAMViewfinderViewController *)self _updateModeDisabledForCurrentStateAnimated:1];
  [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Capture Controller Interrupted"];
  id v6 = +[CAMCaptureCapabilities capabilities];
  if ([v6 isCTMSupported])
  {
    int64_t v7 = [(CAMViewfinderViewController *)self _currentMode];

    if (!v7) {
      [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:0];
    }
  }
  else
  {
  }
}

- (void)captureControllerDidStopRunning:(id)a3
{
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "captureControllerDidStopRunning:", v8, 2u);
  }

  BOOL v5 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v5 addClosedViewfinderReason:2];
  [v5 cancelDelayedRemovalOfReason:3];
  [v5 addClosedViewfinderReason:3];
  id v6 = [(CAMViewfinderViewController *)self _previewViewController];
  [v6 notifyCaptureSessionDidStopRunning];
  [(CAMViewfinderViewController *)self _handleGeneralCaptureControllerSuspension];
  int64_t v7 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v7 beginAllowingStagedMediaLoading];
}

- (void)prepareForDefaultImageSnapshotForScreen:(id)a3
{
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "prepareForDefaultImageSnapshotForScreen:", v5, 2u);
  }

  [(CAMViewfinderViewController *)self _ensureSensitiveContentHidden];
  [(CAMViewfinderViewController *)self _forceHideBadgesAnimated:0];
  [(CAMViewfinderViewController *)self _hideUtilityBarAnimated:0];
}

- (void)_forceHideBadgesAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self viewfinderView];
  [v5 setVisibleTopBadges:MEMORY[0x263EFFA68] animated:v3];
  id v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int64_t v7 = [v6 badgeTray];
  [v7 setVisibleBadges:0 animated:v3];

  double v8 = 0.25;
  if (!v3) {
    double v8 = 0.0;
  }
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = __56__CAMViewfinderViewController__forceHideBadgesAnimated___block_invoke;
  v9[3] = &unk_263FA0208;
  v9[4] = self;
  +[CAMView animateIfNeededWithDuration:v9 animations:v8];
}

- (void)cameraRollController:(id)a3 didChangeImageWellImage:(id)a4 withUUID:(id)a5 animated:(BOOL)a6
{
  BOOL v6 = a6;
  id v10 = a4;
  id v9 = a5;
  if (![(CAMViewfinderViewController *)self _externalStorageOutputEnabled]
    || ![(CAMViewfinderViewController *)self isRecording])
  {
    [(CAMViewfinderViewController *)self _presentImageWellImage:v10 uuid:v9 animated:v6];
  }
}

- (CAMViewfinderViewController)initWithCaptureController:(id)a3 captureConfiguration:(id)a4 conflictingControlConfiguration:(id)a5 locationController:(id)a6 motionController:(id)a7 timelapseController:(id)a8 keepAliveController:(id)a9 remoteShutterController:(id)a10 powerController:(id)a11 cameraRollController:(id)a12 librarySelectionController:(id)a13 callStatusMonitor:(id)a14 storageController:(id)a15 usingEmulationMode:(int64_t)a16 initialLayoutStyle:(int64_t)a17 options:(int64_t)a18
{
  id v75 = a3;
  id v23 = a4;
  id v24 = a5;
  id v84 = a6;
  id v74 = a7;
  id v25 = a7;
  id v85 = a8;
  id v83 = a9;
  id v82 = a10;
  id v81 = a11;
  id v80 = a12;
  id v79 = a13;
  id v78 = a14;
  id v77 = a15;
  v86.receiver = self;
  v86.super_class = (Class)CAMViewfinderViewController;
  double v26 = [(CAMViewfinderViewController *)&v86 initWithNibName:0 bundle:0];
  __int16 v27 = v26;
  if (v26)
  {
    [(CAMViewfinderViewController *)v26 _updateDuetSystemConstraintsIfNecessary];
    CGFloat v72 = +[CAMCaptureCapabilities capabilities];
    v27->__int64_t layoutStyle = a17;
    v27->__useCreativeCameraControls = a18 & 1;
    v27->__currentlyPressedButton = -1;
    objc_storeStrong((id *)&v27->__captureController, a3);
    objc_storeStrong((id *)&v27->__locationController, a6);
    objc_storeStrong((id *)&v27->__motionController, v74);
    objc_storeStrong((id *)&v27->__timelapseController, a8);
    objc_storeStrong((id *)&v27->__keepAliveController, a9);
    objc_storeStrong((id *)&v27->__remoteShutterController, a10);
    objc_storeStrong((id *)&v27->__powerController, a11);
    objc_storeStrong((id *)&v27->__cameraRollController, a12);
    objc_storeStrong((id *)&v27->__callStatusMonitor, a14);
    objc_storeStrong((id *)&v27->__storageController, a15);
    [(CAMStorageController *)v27->__storageController setDelegate:v27];
    double v28 = [[CAMPreviewViewController alloc] initWithCaptureController:v75 motionController:v25 timelapseController:v85];
    previewViewController = v27->__previewViewController;
    v27->__previewViewController = v28;

    [(CAMPreviewViewController *)v27->__previewViewController setDelegate:v27];
    [(CAMPreviewViewController *)v27->__previewViewController setLayoutStyle:a17];
    [(CAMViewfinderViewController *)v27 addChildViewController:v27->__previewViewController];
    uint64_t v30 = objc_alloc_init(CAMViewfinderTransitionController);
    transitionController = v27->__transitionController;
    v27->__transitionController = v30;

    int64_t v32 = [[CAMTorchPatternController alloc] initWithCaptureController:v75];
    torchPatternController = v27->__torchPatternController;
    v27->__torchPatternController = v32;

    [(CAMCameraRollController *)v27->__cameraRollController setImageWellDelegate:v27];
    [(CAMCameraRollController *)v27->__cameraRollController setSessionDelegate:v27];
    [(CAMCameraRollController *)v27->__cameraRollController setPresentationDelegate:v27];
    uint64_t v34 = objc_alloc_init(CAMIdleController);
    idleController = v27->__idleController;
    v27->__idleController = v34;

    int64_t v36 = objc_alloc_init(CAMClosedViewfinderController);
    closedViewfinderController = v27->__closedViewfinderController;
    v27->__closedViewfinderController = v36;

    [(CAMClosedViewfinderController *)v27->__closedViewfinderController setDelegate:v27];
    char v38 = objc_alloc_init(CAMDisabledPreviewController);
    disabledPreviewController = v27->__disabledPreviewController;
    v27->__disabledPreviewController = v38;

    [(CAMDisabledPreviewController *)v27->__disabledPreviewController setDelegate:v27];
    uint64_t v40 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x263EFF9A0]);
    preferredControlToOpenInDrawerForMode = v27->__preferredControlToOpenInDrawerForMode;
    v27->__preferredControlToOpenInDrawerForMode = v40;

    -[CAMViewfinderViewController _updatePropertiesForCaptureConfiguration:conflictingControlConfiguration:](v27, "_updatePropertiesForCaptureConfiguration:conflictingControlConfiguration:", v23);
    uint64_t v42 = +[CAMCaptureConfiguration captureGraphConfigurationUsingConfiguration:v23 outputToExternalStorage:[(CAMViewfinderViewController *)v27 _externalStorageOutputEnabled]];
    configuredGraphConfiguration = v27->__configuredGraphConfiguration;
    v27->__configuredGraphConfiguration = (CAMCaptureGraphConfiguration *)v42;

    v27->__lastConfigurationRequestID = -1;
    v27->__stereoCaptureStatus = 1;
    [v75 setFacesDelegate:v27];
    [v75 setMachineReadableCodeDelegate:v27];
    [v75 setHistogramDelegate:v27];
    [v75 setTextRegionResultDelegate:v27];
    [v75 setDocumentSceneResultDelegate:v27];
    [v75 setConfigurationDelegate:v27];
    [v75 setSuggestionDelegate:v27];
    [v75 setAvailabilityDelegate:v27];
    [v75 setBurstDelegate:v27];
    [v75 setRecoveryDelegate:v27];
    [v75 setInterruptionDelegate:v27];
    [v75 setRunningDelegate:v27];
    [v75 setZoomDelegate:v27];
    [v75 setControlsDelegate:v27];
    [v75 setStillImageCapturingVideoDelegate:v27];
    [v75 setPreviewLayerOverCaptureStatusDelegate:v27];
    [v75 setSystemPressureStateDelegate:v27];
    [v75 setStereoCaptureStatusDelegate:v27];
    v27->__shallowDepthOfFieldStatus = 0;
    [v75 setShallowDepthOfFieldStatusDelegate:v27];
    if ([v72 librarySelectionSupported])
    {
      objc_storeStrong((id *)&v27->__librarySelectionController, a13);
      [(CAMLibrarySelectionController *)v27->__librarySelectionController setDelegate:v27];
    }
    int64_t v44 = +[CAMPriorityNotificationCenter defaultCenter];
    [v44 addObserver:v27 selector:sel__previewDidStartRunning_ name:*MEMORY[0x263EF97C8] object:0];
    [v44 addObserver:v27 selector:sel__captureOrientationChanged_ name:@"CAMMotionControllerCaptureOrientationChangedNotification" object:0];
    [v44 addObserver:v27 selector:sel__deviceOrientationChanged_ name:@"CAMMotionControllerCaptureDeviceOrientationChangedNotification" object:0];
    [v44 addObserver:v27 selector:sel__handleApplicationDidBecomeActive_ name:*MEMORY[0x263F83318] object:0];
    [v44 addObserver:v27 selector:sel__handleApplicationWillResignActive_ name:*MEMORY[0x263F833C0] object:0];
    [v44 addObserver:v27 selector:sel__handleApplicationWillAddDeactivationReason_ name:*MEMORY[0x263F83CA0] object:0];
    [v44 addObserver:v27 selector:sel__handleApplicationDidRemoveDeactivationReason_ name:*MEMORY[0x263F83C78] object:0];
    [v44 addObserver:v27 selector:sel__handleApplicationWillEnterForeground_ name:*MEMORY[0x263F833B8] object:0];
    [v44 addObserver:v27 selector:sel__handleApplicationDidEnterBackground_ name:*MEMORY[0x263F83330] object:0];
    [v44 addObserver:v27 selector:sel__handleSceneDidEnterBackground_ name:*MEMORY[0x263F83930] object:0];
    [v44 addObserver:v27 selector:sel__handleContentSizeCategoryDidChange_ name:*MEMORY[0x263F83428] object:0];
    [v44 addObserver:v27 selector:sel__handleCallStatusMonitorDidChangeCallActive_ name:@"CAMCallStatusMonitorDidChangeCallActiveNotification" object:0];
    [v44 addObserver:v27 selector:sel__handleTimelapseLowDiskSpaceNotification_ name:@"CAMTimelapseLowDiskSpaceNotification" object:0];
    int64_t v45 = [MEMORY[0x263F08A00] defaultCenter];
    [v45 addObserver:v27 selector:sel__handleSessionWasPrewarmed_ name:@"AVCaptureSessionWasPrewarmedNotification" object:0];
    v27->__overCapturePreviewStatus = 0;
    v27->_emulationMode = a16;
    uint64_t v46 = 3;
    if (!a16) {
      uint64_t v46 = 0;
    }
    v27->_persistenceBehavior = v46;
    char v47 = 1;
    if (!a16) {
      char v47 = [v72 multipleCaptureFeaturesSupported] ^ 1;
    }
    v27->_disablingMultipleCaptureFeatures = v47;
    v27->__internalAutorotationStyle = [(CAMViewfinderViewController *)v27 _autorotationStyleForLayoutStyle:v27->__layoutStyle];
    v27->_automaticallyAdjustsAutorotationStyle = a16 == 0;
    v27->_automaticallyAdjustsApplicationIdleTimer = 1;
    uint64_t v48 = [(CAMViewfinderViewController *)v27 _supportedCaptureModes];
    availableCaptureModes = v27->_availableCaptureModes;
    v27->_availableCaptureModes = (NSSet *)v48;

    v27->_showingStandardControls = 1;
    v27->_maximumVideoRecordingDuration = 0.0;
    customOverlayView = v27->_customOverlayView;
    v27->_customOverlayView = 0;

    uint64_t v51 = MEMORY[0x263F000D0];
    long long v52 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
    *(_OWORD *)&v27->_customPreviewViewTransform.a = *MEMORY[0x263F000D0];
    *(_OWORD *)&v27->_customPreviewViewTransform.c = v52;
    *(_OWORD *)&v27->_customPreviewViewTransform.tx = *(_OWORD *)(v51 + 32);
    int v53 = objc_alloc_init(CAMMachineReadableCodeLoggingController);
    machineReadableCodeLoggingController = v27->__machineReadableCodeLoggingController;
    v27->__machineReadableCodeLoggingController = v53;

    if ([v72 isImageAnalysisSupported])
    {
      int v55 = objc_alloc_init(CAMProminentObjectManager);
      prominentObjectManager = v27->__prominentObjectManager;
      v27->__prominentObjectManager = v55;

      [(CAMProminentObjectManager *)v27->__prominentObjectManager setDelegate:v27];
    }
    if ([v72 allowHaptics])
    {
      CGFloat v57 = objc_alloc_init(CAMFeedbackController);
      feedbackController = v27->__feedbackController;
      v27->__feedbackController = v57;
    }
    double v59 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x263EFF9A0]);
    descriptionOverlayViewByMode = v27->__descriptionOverlayViewByMode;
    v27->__descriptionOverlayViewByMode = v59;

    double v61 = objc_alloc_init(CAMTimerCache);
    timerCache = v27->__timerCache;
    v27->__timerCache = v61;

    [(CAMTimerCache *)v27->__timerCache setDelegate:v27];
    [(CAMViewfinderViewController *)v27 setOverrideUserInterfaceStyle:2];
    [(CAMViewfinderViewController *)v27 generateAnalyticsSessionEventIfNeeded];
    if ([v72 externalStorageSupported])
    {
      double v63 = objc_alloc_init(CAMExternalStorageMonitor);
      storageMonitor = v27->__storageMonitor;
      v27->__storageMonitor = v63;

      double v65 = [(CAMViewfinderViewController *)v27 _storageMonitor];
      [v65 setDelegate:v27];
    }
    if ([v72 shouldPreventConnectionHandover])
    {
      BOOL v66 = objc_alloc_init(CAMPreventConnectionHandoverAssertionController);
      preventConnectionHandoverAssertionController = v27->__preventConnectionHandoverAssertionController;
      v27->__preventConnectionHandoverAssertionController = v66;
    }
    if (CFPreferencesGetAppBooleanValue(@"CAMFeatureDevelopmentResetTipDataStoreOnLaunch", @"com.apple.camera", 0))
    {
      +[CAMViewfinderTipManager resetDataStore];
    }
    +[CAMViewfinderTipManager configure];
    if (+[CAMViewfinderTipManager anyTipPendingOrAvailable])
    {
      CGFloat v68 = objc_alloc_init(CAMViewfinderTipManager);
      tipManager = v27->__tipManager;
      v27->__tipManager = v68;
    }
    CGFloat v70 = v27;
  }
  return v27;
}

- (void)dealloc
{
  BOOL v3 = +[CAMPriorityNotificationCenter defaultCenter];
  [v3 removeObserver:self];

  [(CAMViewfinderViewController *)self _dismissDiskSpaceAlertViewAnimated:0];
  [(CAMViewfinderViewController *)self _dismissFlashOrTorchUnavailableAlertViewAnimated:0];
  id v4 = [(CAMViewfinderViewController *)self _captureController];
  [v4 invalidateController];

  v5.receiver = self;
  v5.super_class = (Class)CAMViewfinderViewController;
  [(CAMViewfinderViewController *)&v5 dealloc];
}

- (int64_t)_currentDevicePosition
{
  id v2 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int64_t v3 = [v2 devicePosition];

  return v3;
}

- (int64_t)_currentVideoConfiguration
{
  id v2 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int64_t v3 = [v2 videoConfiguration];

  return v3;
}

- (int64_t)_configuredMode
{
  id v2 = [(CAMViewfinderViewController *)self _configuredGraphConfiguration];
  int64_t v3 = [v2 mode];

  return v3;
}

- (int64_t)_configuredDevice
{
  id v2 = [(CAMViewfinderViewController *)self _configuredGraphConfiguration];
  int64_t v3 = [v2 device];

  return v3;
}

- (BOOL)_capturingFromPhysicalButton
{
  return [(CAMViewfinderViewController *)self _currentlyPressedButton] != -1;
}

- (void)applyCaptureConfiguration:(id)a3 conflictingControlConfiguration:(id)a4
{
  [(CAMViewfinderViewController *)self _updatePropertiesForCaptureConfiguration:a3 conflictingControlConfiguration:a4];
  [(CAMViewfinderViewController *)self _updateForCurrentConfiguration];
}

- (void)_reconfigureCaptureGraphWithCurrentMode
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v4 = [(CAMViewfinderViewController *)self _currentDevice];
  [(CAMViewfinderViewController *)self changeToMode:v3 device:v4];
}

- (void)_updateLayoutStyle
{
  int64_t v3 = [(CAMViewfinderViewController *)self view];
  uint64_t v4 = CAMLayoutStyleForView(v3);

  [(CAMViewfinderViewController *)self _setLayoutStyle:v4];
}

- (CAMViewfinderTransitionable)_viewfinderTransitionable
{
  int64_t v3 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v5 = [(CAMViewfinderViewController *)self viewfinderView];
  }
  BOOL v6 = v5;

  return (CAMViewfinderTransitionable *)v6;
}

- (CAMFullscreenViewfinder)_fullscreenViewfinder
{
  int64_t v3 = +[CAMCaptureCapabilities capabilities];
  int v4 = [v3 isCTMSupported];

  if (v4)
  {
    id v5 = [(CAMViewfinderViewController *)self view];
  }
  else
  {
    id v5 = 0;
  }
  return (CAMFullscreenViewfinder *)v5;
}

- (CAMControlDrawer)_controlDrawer
{
  id v2 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int64_t v3 = [v2 controlDrawer];

  return (CAMControlDrawer *)v3;
}

- (BOOL)_canShowWhileLocked
{
  return 1;
}

- (void)viewWillDisappear:(BOOL)a3
{
  BOOL v3 = a3;
  v14.receiver = self;
  v14.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewWillDisappear:](&v14, sel_viewWillDisappear_);
  [(CAMViewfinderViewController *)self _dismissDiskSpaceAlertViewAnimated:1];
  [(CAMViewfinderViewController *)self _dismissFlashOrTorchUnavailableAlertViewAnimated:1];
  id v5 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v5 setShowingPreview:0];

  BOOL v6 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v6 presentingViewControllerViewWillDisappear:v3];

  [(CAMViewfinderViewController *)self _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:1];
  if (![(CAMViewfinderViewController *)self isPerformingTileTransition])
  {
    int64_t v7 = [(CAMViewfinderViewController *)self _closedViewfinderController];
    [v7 addClosedViewfinderReason:8];
  }
  double v8 = +[CAMUserPreferences preferences];
  int v9 = [v8 sharedLibraryAutoBehaviorEnabled];

  if (v9)
  {
    id v10 = [(CAMViewfinderViewController *)self _librarySelectionController];
    [v10 stopAcquiringSignals];
  }
  [(CAMViewfinderViewController *)self _writeUserPreferences];
  id v11 = [(CAMViewfinderViewController *)self view];
  int v12 = [v11 window];
  double v13 = [v12 windowScene];
  [v13 _setSystemVolumeHUDEnabled:1];
}

- (unint64_t)_supportedInterfaceOrientationsForLayoutStyle:(int64_t)a3 wantsTextAnalysis:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v6 = +[CAMCaptureCapabilities capabilities];
  int v7 = [v6 forceAllowAllInterfaceOrientations];

  if ([(CAMViewfinderViewController *)self _layoutStyle] == 4)
  {
    double v8 = [(CAMViewfinderViewController *)self view];
    int v9 = [v8 window];
    id v10 = [v9 screen];

    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v11 = objc_msgSend(MEMORY[0x263F82B60], "screens", 0);
    uint64_t v12 = [v11 countByEnumeratingWithState:&v24 objects:v30 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v25;
      while (2)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v25 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          uint64_t v17 = [v16 mirroredScreen];

          if (v10 && v17 == v10)
          {
            uint64_t v19 = os_log_create("com.apple.camera", "Camera");
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              uint64_t v29 = v16;
              _os_log_impl(&dword_2099F8000, v19, OS_LOG_TYPE_DEFAULT, "Detected mirrored screen, allowing all interface orientations (%{public}@)", buf, 0xCu);
            }

            unint64_t v18 = 30;
            goto LABEL_18;
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v24 objects:v30 count:16];
        if (v13) {
          continue;
        }
        break;
      }
    }

    if (v4 | v7) {
      unint64_t v18 = 30;
    }
    else {
      unint64_t v18 = 2;
    }
LABEL_18:
  }
  else
  {
    unint64_t v18 = 30;
  }
  if ([(CAMViewfinderViewController *)self isRecording])
  {
    char v20 = [(CAMViewfinderViewController *)self view];
    BOOL v21 = [v20 window];
    id v22 = [v21 windowScene];
    unint64_t v18 = 1 << [v22 interfaceOrientation];
  }
  return v18;
}

- (void)viewDidDisappear:(BOOL)a3
{
  BOOL v3 = a3;
  v9.receiver = self;
  v9.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewDidDisappear:](&v9, sel_viewDidDisappear_);
  id v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v5 setControlDrawerExpanded:0 forReason:7 animated:0];

  [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:0];
  BOOL v6 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v6 presentingViewControllerViewDidDisappear:v3];

  int v7 = [(CAMViewfinderViewController *)self view];
  [v7 _removeAllAnimations:1];

  double v8 = [(CAMViewfinderViewController *)self _tipManager];
  [v8 stopTipObservation];
}

- (void)viewDidLayoutSubviews
{
  v17.receiver = self;
  v17.super_class = (Class)CAMViewfinderViewController;
  [(CAMViewfinderViewController *)&v17 viewDidLayoutSubviews];
  BOOL v3 = [(CAMViewfinderViewController *)self view];
  BOOL v4 = [(CAMViewfinderViewController *)self _textInteractionBackground];
  [v3 bounds];
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  uint64_t v13 = [v4 superview];
  objc_msgSend(v3, "convertRect:toView:", v13, v6, v8, v10, v12);
  objc_msgSend(v4, "setFrame:");

  uint64_t v14 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  double v15 = (double)([(CAMViewfinderViewController *)self _shouldHideCreativeCameraButtonForGraphConfiguration:v14] ^ 1);
  uint64_t v16 = [(CAMViewfinderViewController *)self _creativeCameraButton];
  [v16 setAlpha:v15];
}

- (void)viewWillTransitionToSize:(CGSize)a3 withTransitionCoordinator:(id)a4
{
  double height = a3.height;
  double width = a3.width;
  v10.receiver = self;
  v10.super_class = (Class)CAMViewfinderViewController;
  id v7 = a4;
  -[CAMViewfinderViewController viewWillTransitionToSize:withTransitionCoordinator:](&v10, sel_viewWillTransitionToSize_withTransitionCoordinator_, v7, width, height);
  double v8 = [(CAMViewfinderViewController *)self view];
  [v8 setNeedsLayout];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = __82__CAMViewfinderViewController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke;
  v9[3] = &unk_263FA1D10;
  v9[4] = self;
  [v7 animateAlongsideTransition:0 completion:v9];
}

uint64_t __82__CAMViewfinderViewController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) setNeedsUpdateOfHomeIndicatorAutoHidden];
  id v2 = *(void **)(a1 + 32);
  return [v2 setNeedsUpdateOfScreenEdgesDeferringSystemGestures];
}

- (void)_setHomeIndicatorAutoHideOrientation:(int64_t)a3
{
  if (a3 != 2 && self->__homeIndicatorAutoHideOrientation != a3)
  {
    self->__homeIndicatorAutoHideOrientation = a3;
    BOOL v5 = -[CAMViewfinderViewController _autoHideHomeIndicatorForOrientation:](self, "_autoHideHomeIndicatorForOrientation:");
    if (v5 != [(CAMViewfinderViewController *)self _autoHideHomeIndicatorForOrientation:a3])
    {
      [(CAMViewfinderViewController *)self setNeedsUpdateOfHomeIndicatorAutoHidden];
    }
  }
}

- (void)_commitCTMCaptureWithType:(int64_t)a3
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (a3)
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _currentStillImageCaptureMomentSettings];
    double v6 = @"Photo";
    if (a3 != 1) {
      double v6 = 0;
    }
    if (a3 == 2) {
      double v6 = @"Video";
    }
    id v7 = v6;
    if (!v5)
    {
      uint64_t v13 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        -[CAMViewfinderViewController _commitCTMCaptureWithType:]();
      }

      double v8 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      [v8 resetAnimated:1];
      goto LABEL_38;
    }
    double v8 = [(CAMViewfinderViewController *)self _captureController];
    double v9 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v10 = [v5 lowLightMode];
      uint64_t v11 = [v8 lowLightStatus];
      if (v10 > 2) {
        double v12 = 0;
      }
      else {
        double v12 = off_263FA23F0[v10];
      }
      unint64_t v14 = v11 + 1;
      if (v14 > 3) {
        double v15 = 0;
      }
      else {
        double v15 = off_263FA2408[v14];
      }
      uint64_t v16 = [NSString stringWithFormat:@"NightMode%@/%@", v12, v15];
      *(_DWORD *)buf = 138543618;
      int64_t v32 = v7;
      __int16 v33 = 2114;
      uint64_t v34 = v16;
      _os_log_impl(&dword_2099F8000, v9, OS_LOG_TYPE_DEFAULT, "Commit CTM capture with type %{public}@, %{public}@", buf, 0x16u);
    }
    [v5 setCtmCaptureType:a3];
    objc_super v17 = [(CAMViewfinderViewController *)self _generateAnalyticsCaptureEventWithRequest:v5 burst:0];
    [v5 setAnalyticsEvent:v17];

    id v30 = 0;
    char v18 = [v8 commitCTMCaptureWithRequest:v5 error:&v30];
    id v19 = v30;
    if ((v18 & 1) == 0)
    {
      BOOL v21 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = [v19 localizedDescription];
        *(_DWORD *)buf = 138543874;
        int64_t v32 = v7;
        __int16 v33 = 2114;
        uint64_t v34 = v5;
        __int16 v35 = 2114;
        int64_t v36 = v29;
        _os_log_error_impl(&dword_2099F8000, v21, OS_LOG_TYPE_ERROR, "Failed to capture %{public}@ with request %{public}@ (%{public}@)", buf, 0x20u);
      }
      if (a3 == 2
        || [(CAMViewfinderViewController *)self _isCurrentLowLightCaptureCancelable])
      {
        [(CAMViewfinderViewController *)self _setCurrentLowLightCaptureCancelable:0];
        id v22 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
        [v22 resetAnimated:1];
      }
      [(CAMViewfinderViewController *)self _cancelCTMCapture];
      goto LABEL_37;
    }
    if ((unint64_t)a3 > 1)
    {
      if (a3 == 2)
      {
        [(CAMViewfinderViewController *)self _updateUIForCapturing:1 animated:1];
LABEL_33:
        BOOL v23 = [(CAMViewfinderViewController *)self isDisablingAdditionalCaptures];
        long long v24 = [(CAMViewfinderViewController *)self _captureController];
        char v25 = [v24 isCapturingVideo];

        if (v23 && (v25 & 1) == 0) {
          [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:1];
        }
        [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureMomentSettings:0];
        [(CAMViewfinderViewController *)self _updateResolvedLowLightModeAnimated:1];
        long long v26 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
        long long v27 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
        [v26 didCaptureWithRequest:v5 currentConfiguration:v27];

LABEL_37:
        double v28 = [(CAMViewfinderViewController *)self _motionController];
        objc_msgSend(v28, "debugValidateCaptureOrientationForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

LABEL_38:
        [(CAMViewfinderViewController *)self _updateUserPreferencesForFilterUsage];
        [(CAMViewfinderViewController *)self _updateFilterScrubberAfterCapture];

        goto LABEL_39;
      }
    }
    else
    {
      char v20 = [(CAMViewfinderViewController *)self stillImageCaptureTestDelegate];
      [v20 viewfinderViewController:self willCaptureStillImageForRequest:v5];
    }
    if ([v5 lowLightMode])
    {
      [(CAMViewfinderViewController *)self _updateUIForCapturing:1 animated:1];
      [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Night mode capture began"];
    }
    goto LABEL_33;
  }
  BOOL v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    -[CAMViewfinderViewController _commitCTMCaptureWithType:]();
  }
LABEL_39:
}

- (void)_initiateCTMCaptureWithCurrentSettingsAtSystemTime:(unint64_t)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  [(CAMViewfinderViewController *)self _setImageAnalyzer:0];
  BOOL v4 = [(CAMViewfinderViewController *)self _captureController];
  BOOL v5 = [(CAMViewfinderViewController *)self _currentStillImageCaptureMomentSettings];

  if (v5)
  {
    double v6 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController _initiateCTMCaptureWithCurrentSettingsAtSystemTime:]();
    }

    id v7 = [(CAMViewfinderViewController *)self _currentStillImageCaptureMomentSettings];
    [v4 cancelCTMCaptureForSettings:v7];

    [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureMomentSettings:0];
  }
  double v8 = [(CAMViewfinderViewController *)self _stillImageCaptureRequestWithCurrentSettingsAsBurst:0 maximumLength:0];
  id v19 = 0;
  int v9 = [v4 initiateCTMCaptureWithSettings:v8 error:&v19];
  id v10 = v19;
  if (v9)
  {
    [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureMomentSettings:v8];
    uint64_t v11 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v12 = [v8 lowLightMode];
      uint64_t v13 = [v4 lowLightStatus];
      if (v12 > 2) {
        unint64_t v14 = 0;
      }
      else {
        unint64_t v14 = off_263FA23F0[v12];
      }
      unint64_t v16 = v13 + 1;
      if (v16 > 3) {
        objc_super v17 = 0;
      }
      else {
        objc_super v17 = off_263FA2408[v16];
      }
      char v18 = [NSString stringWithFormat:@"NightMode%@/%@", v14, v17];
      *(_DWORD *)buf = 138543362;
      id v21 = v18;
      _os_log_impl(&dword_2099F8000, v11, OS_LOG_TYPE_DEFAULT, "Initiated moment with %{public}@", buf, 0xCu);
    }
  }
  else
  {
    double v15 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v21 = v10;
      _os_log_impl(&dword_2099F8000, v15, OS_LOG_TYPE_DEFAULT, "Failed to initiate CTM capture: %{public}@", buf, 0xCu);
    }

    if (v5) {
      [(CAMViewfinderViewController *)self _updateResolvedLowLightModeAnimated:1];
    }
  }
}

- (int64_t)_currentPhotoEncodingBehavior
{
  BOOL v3 = +[CAMUserPreferences preferences];
  int64_t v4 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v5 = [(CAMViewfinderViewController *)self _resolvedRAWMode];
  double v6 = [(CAMViewfinderViewController *)self _captureController];
  int64_t v7 = objc_msgSend(v3, "photoEncodingBehaviorForMode:resolvedRAWMode:isCapturingVideo:", v4, v5, objc_msgSend(v6, "isCapturingVideo"));

  return v7;
}

- (int64_t)_currentRawFileFormatEncodingBehavior
{
  id v2 = +[CAMUserPreferences preferences];
  int64_t v3 = [v2 rawFileFormatBehavior];

  return v3;
}

- (int64_t)_currentMaxPhotoResolution
{
  int64_t v3 = +[CAMUserPreferences preferences];
  int64_t v4 = +[CAMCaptureCapabilities capabilities];
  int64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v6 = [(CAMViewfinderViewController *)self _currentDevice];
  if ([v3 shouldUsePhotoFormatControlForMode:v5])
  {
    uint64_t v7 = [(CAMViewfinderViewController *)self _resolvedPhotoResolution];
  }
  else if ([(CAMViewfinderViewController *)self _resolvedRAWMode] == 1)
  {
    uint64_t v7 = [v3 maximumRAWPhotoResolution];
  }
  else
  {
    uint64_t v7 = objc_msgSend(v3, "preferredHEICPhotoResolutionForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  }
  int64_t v8 = v7;
  int64_t v9 = [(CAMViewfinderViewController *)self _resolvedRAWMode];
  id v10 = [(CAMViewfinderViewController *)self _captureController];
  uint64_t v11 = objc_msgSend(v3, "photoEncodingBehaviorForMode:resolvedRAWMode:isCapturingVideo:", v5, v9, objc_msgSend(v10, "isCapturingVideo"));

  if (![v4 isPhotoResolutionSupported:v8 forMode:v5 device:v6 photoEncoding:v11]) {
    int64_t v8 = 0;
  }
  if (objc_msgSend(v4, "isPhotoResolutionSupported:forLightingType:", v8, -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", v5, v6)))int64_t v12 = v8; {
  else
  }
    int64_t v12 = 0;

  return v12;
}

- (void)_stopCapturingCTMVideo
{
  int64_t v3 = [(CAMViewfinderViewController *)self _captureController];
  [v3 endCTMVideoCapture];

  [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:1];
  [(CAMViewfinderViewController *)self _updateUIForCaptureOrientationAnimated:1];
}

- (void)_cancelCTMCapture
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentStillImageCaptureMomentSettings];
  if (v3)
  {
    BOOL v4 = [(CAMViewfinderViewController *)self _isReconfiguring];
    int64_t v5 = os_log_create("com.apple.camera", "Camera");
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        __int16 v11 = 0;
        uint64_t v7 = "Cancelling CTM capture for reconfiguring";
        int64_t v8 = (uint8_t *)&v11;
LABEL_7:
        _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
      }
    }
    else if (v6)
    {
      __int16 v10 = 0;
      uint64_t v7 = "Cancelling CTM capture";
      int64_t v8 = (uint8_t *)&v10;
      goto LABEL_7;
    }

    int64_t v9 = [(CAMViewfinderViewController *)self _captureController];
    [v9 cancelCTMCaptureForSettings:v3];
    [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureMomentSettings:0];
    [(CAMViewfinderViewController *)self _updateResolvedLowLightModeAnimated:1];
  }
}

- (BOOL)_isCTMCaptureForType:(int64_t)a3
{
  return (unint64_t)(a3 - 1) < 2;
}

- (CGSize)_desiredPreviewSizeForStillImageCapture
{
  id v2 = [(CAMViewfinderViewController *)self view];
  int64_t v3 = [v2 window];
  BOOL v4 = [v3 screen];

  [v4 _referenceBounds];
  double v6 = v5;
  double v8 = v7;
  [v4 scale];
  double v10 = v9 * v8;
  double v11 = v9 * v6;

  double v12 = v10;
  double v13 = v11;
  result.double height = v13;
  result.double width = v12;
  return result;
}

- (BOOL)_isPrimaryDisplayAssetForCoordinationInfo:(id)a3
{
  if (a3) {
    return [a3 isUnfilteredImageForFilteredPair] ^ 1;
  }
  else {
    return 1;
  }
}

- (BOOL)_wantsCaptureAnimationForRequest:(id)a3
{
  id v4 = a3;
  double v5 = [(CAMViewfinderViewController *)self _captureController];
  if ([v5 isCapturingVideo]) {
    char v6 = [v5 videoCapturePaused];
  }
  else {
    char v6 = 1;
  }
  char v7 = [v5 isCapturingBurst];
  double v8 = [v4 burstIdentifier];

  double v9 = [v4 textAnalysisIdentifier];

  if (v9) {
    char v10 = 0;
  }
  else {
    char v10 = v6;
  }
  if (v8) {
    char v10 = 0;
  }
  if (v7) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v10;
  }

  return v11;
}

- (void)stillImageRequestDidBeginCaptureBeforeResolvingSettings:(id)a3
{
  if ([(CAMViewfinderViewController *)self _wantsCaptureAnimationForRequest:a3])
  {
    [(CAMViewfinderViewController *)self _performCaptureAnimation];
  }
}

void __83__CAMViewfinderViewController_stillImageRequestDidStartCapturing_resolvedSettings___block_invoke(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _updateShutterButtonForEndOfLowLightCapture];
  }
}

- (void)stillImageRequestDidStopCapturingStillImage:(id)a3
{
  id v10 = a3;
  id v4 = [(CAMViewfinderViewController *)self stillImageCaptureTestDelegate];

  if (v4)
  {
    double v5 = [(CAMViewfinderViewController *)self stillImageCaptureTestDelegate];
    [v5 viewfinderViewController:self didReceiveStillImageRequestDidStopCapturingStillImage:v10];
  }
  [(CAMPreviewViewController *)self->__previewViewController notifyDidStopCapture];
  if ([v10 lowLightMode])
  {
    char v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v6 setPreviewAlignmentGuideVisible:0 animated:1];
    char v7 = [(CAMViewfinderViewController *)self _motionController];
    [v7 endUpdatingPreviewAlignmentModel];

    double v8 = [(CAMViewfinderViewController *)self _feedbackController];
    [v8 performDiscreteFeedback:0];

    [(CAMViewfinderViewController *)self _updateShutterButtonForEndOfLowLightCapture];
  }
  double v9 = [(CAMViewfinderViewController *)self _idleController];
  [v9 stillImageRequestDidStopCapturingStillImage:v10];
}

- (void)stillImageRequestDidCompleteVideoCapture:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v12 = a3;
  id v8 = a4;
  id v9 = a5;
  if ([v12 isCTMVideo])
  {
    id v10 = [v12 analyticsEvent];
    [(CAMViewfinderViewController *)self _populateZoomForCaptureEvent:v10];

    [(CAMViewfinderViewController *)self _captureRequest:v12 didCompleteVideoCaptureWithResponse:v8 error:v9];
  }
  else if (!v9)
  {
    BOOL v11 = [(CAMViewfinderViewController *)self _cameraRollController];
    objc_msgSend(v11, "processTransientPairedVideoUpdate:filterType:", v8, objc_msgSend(v12, "effectFilterType"));
  }
}

- (void)stillImageRequestsWillStartCapturingLivePhotoVideo
{
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __81__CAMViewfinderViewController_stillImageRequestsWillStartCapturingLivePhotoVideo__block_invoke;
  v3[3] = &unk_263FA0208;
  v3[4] = self;
  [MEMORY[0x263F82E00] animateWithDuration:2 delay:v3 options:0 animations:0.25 completion:0.0];
}

void __81__CAMViewfinderViewController_stillImageRequestsWillStartCapturingLivePhotoVideo__block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) viewfinderView];
  [v1 setNeedsLayout];
  [v1 layoutIfNeeded];
}

- (void)stillImageRequestsDidCompleteCapturingLivePhotoVideo
{
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateResolvedLowLightModeAnimated:1];
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __83__CAMViewfinderViewController_stillImageRequestsDidCompleteCapturingLivePhotoVideo__block_invoke;
  v3[3] = &unk_263FA0208;
  v3[4] = self;
  [MEMORY[0x263F82E00] animateWithDuration:2 delay:v3 options:0 animations:0.25 completion:0.0];
}

void __83__CAMViewfinderViewController_stillImageRequestsDidCompleteCapturingLivePhotoVideo__block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) viewfinderView];
  [v1 setNeedsLayout];
  [v1 layoutIfNeeded];
}

- (void)stillImageRequestsWillRequestCTMVideoCaptureStart
{
  int64_t v3 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    double v5 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
    [v5 stillImageRequestsWillRequestCTMVideoCaptureStartForViewfinderViewController:self];
  }
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:1];
  [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:1];
  [(CAMViewfinderViewController *)self _preparePhotoOutputForExpectedPhotoResolution];
}

- (void)stillImageRequestsWillRequestCTMVideoCaptureEnd
{
  int64_t v3 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    double v5 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
    [v5 stillImageRequestsWillRequestCTMVideoCaptureEndForViewfinderViewController:self];
  }
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:1];
  [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:1];
  [(CAMViewfinderViewController *)self _preparePhotoOutputForExpectedPhotoResolution];
}

- (BOOL)_isCTMVideoSupportedForGraphConfiguration:(id)a3
{
  if ([a3 mode]) {
    return 0;
  }
  char v4 = +[CAMCaptureCapabilities capabilities];
  char v5 = [v4 isCTMSupported];

  return v5;
}

- (void)stillImageRequestWillStartCapturingCTMVideoWithCaptureInFlight:(BOOL)a3
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v6 = [(CAMViewfinderViewController *)self _isCTMVideoSupportedForGraphConfiguration:v5];

  if (v6)
  {
    if (!a3)
    {
      char v7 = [(CAMViewfinderViewController *)self _idleController];
      [v7 stillImageRequestWillStartCapturingCTMVideoWithCaptureInFlight:0];
    }
    id v11 = [(CAMViewfinderViewController *)self _targetElapsedTimeView];
    [v11 startTimer];
    [v11 setBackgroundStyle:1 animated:1];
    id v8 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v8 didStartCaptureTimer];

    [(CAMViewfinderViewController *)self _limitZoomRangeForRecordingIfNecessary];
  }
  else
  {
    id v9 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      *(_DWORD *)buf = 138543362;
      double v13 = v10;
      _os_log_impl(&dword_2099F8000, v9, OS_LOG_TYPE_DEFAULT, "Received stillImageRequestWillStartCapturingCTMVideoWithCaptureInFlight in unsupported configuration %{public}@", buf, 0xCu);
    }
  }
}

- (void)stillImageRequestsDidStopCapturingCTMVideo
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v4 = [(CAMViewfinderViewController *)self _isCTMVideoSupportedForGraphConfiguration:v3];

  if (v4)
  {
    char v5 = [(CAMViewfinderViewController *)self _captureController];
    char v6 = [v5 isCapturingCTMVideo];

    if (v6) {
      return;
    }
    [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:1];
    if ([(CAMViewfinderViewController *)self isDisablingAdditionalCaptures]) {
      [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:1];
    }
    [(CAMViewfinderViewController *)self _restoreZoomRangeAfterRecordingIfNecessary];
  }
  else
  {
    char v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      int v10 = 138543362;
      id v11 = v8;
      _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "Received stillImageRequestsDidStopCapturingCTMVideo in unsupported configuration %{public}@", (uint8_t *)&v10, 0xCu);
    }
  }
  id v9 = [(CAMViewfinderViewController *)self _idleController];
  [v9 stillImageRequestsDidStopCapturingCTMVideo];
}

- (void)_presentImageWellImage:(id)a3 uuid:(id)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a4;
  id v9 = a3;
  id v10 = [(CAMViewfinderViewController *)self _imageWell];
  [v10 setThumbnailImage:v9 uuid:v8 animated:v5];
}

- (id)_videoCaptureRequestWithCurrentSettings
{
  int64_t v3 = +[CAMUserPreferences preferences];
  BOOL v4 = [(CAMViewfinderViewController *)self _motionController];
  BOOL v5 = [(CAMViewfinderViewController *)self _cameraRollController];
  char v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v7 = [v6 mode];
  uint64_t v8 = [v6 device];
  uint64_t v9 = [v6 videoConfiguration];
  if ([(CAMViewfinderViewController *)self _isProactiveFlashSuggestionSuppressed])
  {
    int64_t v10 = 0;
  }
  else
  {
    int64_t v10 = [(CAMViewfinderViewController *)self _resolvedTorchMode];
  }
  uint64_t v42 = v4;
  uint64_t v11 = [v4 captureOrientation];
  uint64_t v12 = objc_alloc_init(CAMMutableVideoCaptureRequest);
  [(CAMMutableVideoCaptureRequest *)v12 setTorchMode:v10];
  [(CAMMutableVideoCaptureRequest *)v12 setCaptureOrientation:v11];
  if ((unint64_t)(v8 - 1) > 0xA) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = qword_209C794E8[v8 - 1];
  }
  -[CAMMutableVideoCaptureRequest setCaptureMirrored:](v12, "setCaptureMirrored:", [v3 mirrorCameraCapturesForDevicePosition:v13 mode:v7]);
  [(CAMMutableVideoCaptureRequest *)v12 setCaptureDevice:v8];
  [(CAMMutableVideoCaptureRequest *)v12 setCaptureMode:v7];
  [(CAMMutableVideoCaptureRequest *)v12 setCaptureVideoConfiguration:v9];
  -[CAMMutableVideoCaptureRequest setWantsWhiteBalanceLocked:](v12, "setWantsWhiteBalanceLocked:", [v3 shouldLockWhiteBalanceDuringVideoRecording]);
  [(CAMMutableVideoCaptureRequest *)v12 setDelegate:self];
  -[CAMMutableVideoCaptureRequest setSessionIdentifier:](v12, "setSessionIdentifier:", [v5 sessionIdentifier]);
  [(CAMMutableVideoCaptureRequest *)v12 setUserInitationTimestamp:CFAbsoluteTimeGetCurrent()];
  -[CAMMutableVideoCaptureRequest setAudioConfiguration:](v12, "setAudioConfiguration:", [v6 audioConfiguration]);
  [(CAMMutableVideoCaptureRequest *)v12 setTrueVideoEnabled:[(CAMViewfinderViewController *)self _trueVideoIsActive]];
  uint64_t v14 = [(CAMViewfinderViewController *)self _locationController];
  double v15 = [v14 currentLocation];
  if (v15) {
    [(CAMMutableVideoCaptureRequest *)v12 setLocation:v15];
  }
  unint64_t v16 = [v14 headingForOrientation:v11];
  if (v16) {
    [(CAMMutableVideoCaptureRequest *)v12 setHeading:v16];
  }
  objc_super v17 = +[CAMCaptureCapabilities capabilities];
  if ([v17 isInternalInstall]) {
    -[CAMMutableVideoCaptureRequest setShouldDelayRemotePersistence:](v12, "setShouldDelayRemotePersistence:", [v3 shouldDelayRemotePersistence]);
  }
  uint64_t v41 = v5;
  int64_t v43 = v3;
  -[CAMMutableVideoCaptureRequest setVideoEncodingBehavior:](v12, "setVideoEncodingBehavior:", [v6 videoEncodingBehavior]);
  char v18 = [(CAMViewfinderViewController *)self _storageController];
  -[CAMMutableVideoCaptureRequest setRemainingDiskUsageThreshold:](v12, "setRemainingDiskUsageThreshold:", [v18 minimumDiskUsageThresholdInBytesForGraphConfiguration:v6]);
  [(CAMViewfinderViewController *)self maximumVideoRecordingDuration];
  if (v19 > 0.0) {
    -[CAMMutableVideoCaptureRequest setMaximumRecordedDuration:](v12, "setMaximumRecordedDuration:");
  }
  unint64_t v20 = [(CAMViewfinderViewController *)self persistenceBehavior];
  int64_t v21 = [(CAMViewfinderViewController *)self _persistenceOptionsForBehavior:v20 allowingOptionalLocalPersistence:0];
  [(CAMMutableVideoCaptureRequest *)v12 setPersistenceOptions:v21];
  [(CAMMutableVideoCaptureRequest *)v12 setTemporaryPersistenceOptions:[(CAMViewfinderViewController *)self _temporaryPersistenceOptionsForBehavior:v20]];
  if (v21 == 3)
  {
    uint64_t v22 = [(CAMViewfinderViewController *)self _storageController];
    BOOL v23 = [v22 externalStorage];
    [v23 generateDestinationURLWithExtension:@"MOV"];
    uint64_t v40 = v6;
    long long v24 = v17;
    char v25 = v14;
    long long v26 = v18;
    long long v27 = v16;
    v29 = double v28 = v15;

    [(CAMMutableVideoCaptureRequest *)v12 setLocalDestinationURL:v29];
    double v15 = v28;
    unint64_t v16 = v27;
    char v18 = v26;
    uint64_t v14 = v25;
    objc_super v17 = v24;
    char v6 = v40;
  }
  -[CAMViewfinderViewController _updateOriginForRequest:](self, "_updateOriginForRequest:", v12, v40);
  [(CAMMutableVideoCaptureRequest *)v12 setPressType:[(CAMViewfinderViewController *)self _currentlyPressedButton]];
  id v30 = [(CAMViewfinderViewController *)self _generateAnalyticsCaptureEventWithRequest:v12 burst:0];
  [(CAMMutableVideoCaptureRequest *)v12 setAnalyticsEvent:v30];

  uint64_t v31 = v43;
  if ([v43 sharedLibraryEnabled]
    && ![(CAMViewfinderViewController *)self _externalStorageOutputEnabled])
  {
    int64_t v32 = [(CAMViewfinderViewController *)self _librarySelectionController];
    -[CAMMutableVideoCaptureRequest setSharedLibraryMode:](v12, "setSharedLibraryMode:", [v32 sharedLibraryMode]);

    if ([v17 isInternalInstall])
    {
      __int16 v33 = [(CAMViewfinderViewController *)self _librarySelectionController];
      uint64_t v34 = [v33 librarySelectionDiagnostics];
      [(CAMMutableVideoCaptureRequest *)v12 setSharedLibraryDiagnostics:v34];

      uint64_t v31 = v43;
    }
    if ([v17 peopleProximityPersistenceSupported])
    {
      __int16 v35 = [(CAMViewfinderViewController *)self _librarySelectionController];
      int64_t v36 = [v35 acquiredSignalResults];

      uint64_t v37 = [v36 identitiesInProximity];
      char v38 = CAMLibrarySelectionIdentityContactIdentifiersForIdentities(v37);
      [(CAMMutableVideoCaptureRequest *)v12 setContactIDsInProximity:v38];

      uint64_t v31 = v43;
    }
  }

  return v12;
}

- (BOOL)_startCapturingVideoWithRequest:(id)a3
{
  id v4 = a3;
  if ([v4 persistenceOptions] == 3
    && ([v4 localDestinationURL], BOOL v5 = objc_claimAutoreleasedReturnValue(), v5, !v5))
  {
    uint64_t v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController _startCapturingVideoWithRequest:]();
    }

    [(CAMViewfinderViewController *)self _showExternalStorageRecordingFailedAlert];
    id v8 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v8 resetAnimated:1];
    LOBYTE(v7) = 0;
  }
  else
  {
    char v6 = [(CAMViewfinderViewController *)self _captureController];
    id v13 = 0;
    LODWORD(v7) = [v6 startCapturingVideoWithRequest:v4 error:&v13];
    id v8 = v13;
    if (v7)
    {
      [(CAMViewfinderViewController *)self _updateUIForCapturing:1 animated:1];
      uint64_t v9 = [(CAMViewfinderViewController *)self _previewViewController];
      [v9 notifyWillStartCapturing];
      int64_t v10 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
      uint64_t v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [v10 didCaptureWithRequest:v4 currentConfiguration:v11];
    }
  }

  return (char)v7;
}

- (BOOL)_stopCapturingVideo
{
  int64_t v3 = [(CAMViewfinderViewController *)self _captureController];
  int v4 = [v3 stopCapturingVideo];
  [MEMORY[0x263F82E10] attemptRotationToDeviceOrientation];
  [(CAMViewfinderViewController *)self _updateUIForCaptureOrientationAnimated:1];
  [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:1];
  BOOL v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  [v5 resetAnimated:1];

  BOOL v6 = [(CAMViewfinderViewController *)self isDisablingAdditionalCaptures];
  if (v4 && v6) {
    [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:1];
  }
  if (v4 && [(CAMViewfinderViewController *)self _externalStorageOutputEnabled])
  {
    uint64_t v7 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v7 setSpinning:1];
  }
  return v4;
}

- (BOOL)_pauseCapturingVideo
{
  int64_t v3 = [(CAMViewfinderViewController *)self _captureController];
  int v4 = [v3 pauseCapturingVideo];
  if (v4)
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v5 setPausedDuringVideo:1 animated:1];

    BOOL v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    uint64_t v7 = [v6 elapsedTimeView];
    [v7 setTimerPaused:1];

    id v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    uint64_t v9 = [v8 elapsedTimeView];
    [v9 setBackgroundStyle:2 animated:1];

    int64_t v10 = [(CAMViewfinderViewController *)self _remoteShutterController];
    uint64_t v11 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    uint64_t v12 = [v11 elapsedTimeView];
    id v13 = [v12 pausedTime];
    [v10 didPauseCaptureTimerWithPauseTime:v13];

    uint64_t v14 = [(CAMViewfinderViewController *)self _idleController];
    [v14 updateForVideoPaused];
  }
  return v4;
}

- (BOOL)_resumeCaptureVideo
{
  int64_t v3 = [(CAMViewfinderViewController *)self _captureController];
  int v4 = [v3 resumeCaptureVideo];
  if (v4)
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v5 setPausedDuringVideo:0 animated:1];

    BOOL v6 = [(CAMViewfinderViewController *)self _idleController];
    [v6 updateForVideoResumed];
  }
  return v4;
}

- (void)videoRequestDidStartCapturing:(id)a3
{
  id v11 = a3;
  int v4 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
  char v5 = objc_opt_respondsToSelector();

  if (v5)
  {
    BOOL v6 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
    [v6 viewfinderViewController:self didReceiveVideoRequestDidStartCapturing:v11];
  }
  uint64_t v7 = [(CAMViewfinderViewController *)self _idleController];
  [v7 videoRequestDidStartCapturing:v11];
  id v8 = [(CAMViewfinderViewController *)self _targetElapsedTimeView];
  [v8 startTimer];
  [v8 setBackgroundStyle:1 animated:1];
  if (-[CAMViewfinderViewController _isSpatialVideoMode:devicePosition:](self, "_isSpatialVideoMode:devicePosition:", [v11 captureMode], objc_msgSend(v11, "captureDevicePosition")))
  {
    uint64_t v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v9 setSpatialCaptureRecordingIndicatorVisible:1 animated:1];
  }
  int64_t v10 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v10 didStartCaptureTimer];

  [(CAMViewfinderViewController *)self _limitZoomRangeForRecordingIfNecessary];
}

- (void)videoRequestDidStopCapturing:(id)a3
{
  id v12 = a3;
  int v4 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
  char v5 = objc_opt_respondsToSelector();

  if (v5)
  {
    BOOL v6 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
    [v6 viewfinderViewController:self didReceiveVideoRequestDidStopCapturing:v12];
  }
  uint64_t v7 = [(CAMViewfinderViewController *)self _captureController];
  if (([v7 isCapturingVideo] & 1) == 0)
  {
    id v8 = [(CAMViewfinderViewController *)self _idleController];
    [v8 videoRequestDidStopCapturing:v12];
    [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:1];
    if ([(CAMViewfinderViewController *)self isDisablingAdditionalCaptures]) {
      [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:1];
    }
    uint64_t v9 = [v12 analyticsEvent];
    [(CAMViewfinderViewController *)self _populateZoomForCaptureEvent:v9];

    [(CAMViewfinderViewController *)self _restoreZoomRangeAfterRecordingIfNecessary];
    int64_t v10 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v10 setSpinning:0];

    if ([(CAMViewfinderViewController *)self _trueVideoIsCapturing]) {
      [(CAMViewfinderViewController *)self _trueVideoStopCapture];
    }
    id v11 = [(CAMViewfinderViewController *)self _captureController];
    objc_msgSend(v11, "updateCaptureButtonControlsForCaptureMode:devicePosition:isRecording:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), -[CAMViewfinderViewController isRecording](self, "isRecording"));
  }
}

- (void)videoRequestDidCompleteCapture:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v13 = a3;
  id v8 = a4;
  id v9 = a5;
  int64_t v10 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
  char v11 = objc_opt_respondsToSelector();

  if (v11)
  {
    id v12 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
    [v12 viewfinderViewController:self didReceiveVideoRequestDidCompleteCapture:v13 withResponse:v8 error:v9];
  }
  [(CAMViewfinderViewController *)self _captureRequest:v13 didCompleteVideoCaptureWithResponse:v8 error:v9];
}

- (void)_captureRequest:(id)a3 didCompleteVideoCaptureWithResponse:(id)a4 error:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  char v11 = [(CAMViewfinderViewController *)self _captureController];
  if (([v11 isCapturingBurst] & 1) == 0 && (objc_msgSend(v11, "isCapturingVideo") & 1) == 0)
  {
    int v12 = [v11 isCapturingLowLightImage];
    if (v10) {
      goto LABEL_4;
    }
LABEL_6:
    int v13 = 0;
    goto LABEL_7;
  }
  int v12 = 1;
  if (!v10) {
    goto LABEL_6;
  }
LABEL_4:
  int v13 = CAMErrorIsVideoCaptureRequestError(v10, -28003) ^ 1;
LABEL_7:
  if (((([v9 stoppedUnexpectedly] | v13) ^ 1 | v12) & 1) == 0)
  {
    [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:1];
    uint64_t v14 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v14 resetAnimated:1];

    if ([(CAMViewfinderViewController *)self isDisablingAdditionalCaptures]) {
      [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:0];
    }
  }
  double v15 = [v9 coordinationInfo];
  unint64_t v16 = v15;
  if (v15 && ![v15 representsFinalProcessedVideo])
  {
    if (v10) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v10)
    {
      [(CAMImageWell *)self->__imageWell recoverFromFailedThumbnailUpdate];
      goto LABEL_22;
    }
    objc_super v17 = [(CAMViewfinderViewController *)self _cameraRollController];
    uint64_t v18 = [v9 sessionIdentifier];
    double v19 = [v9 persistenceUUID];
    if ([v17 isCaptureSessionCurrent:v18])
    {
      [v17 willPersistAssetWithUUID:v19 captureSession:v18];
      unint64_t v20 = [v9 imageWellImage];
      [(CAMViewfinderViewController *)self _presentImageWellImage:v20 uuid:v19 animated:1];
      int64_t v21 = [(CAMViewfinderViewController *)self _remoteShutterController];
      [v21 sendThumbnailImage:v20 isVideo:1];
    }
  }
  if ([(CAMViewfinderViewController *)self _isPrimaryDisplayAssetForCoordinationInfo:v16])
  {
    uint64_t v22 = [(CAMViewfinderViewController *)self _cameraRollController];
    objc_msgSend(v22, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v9, 0, objc_msgSend(v8, "persistenceOptions"));
  }
  BOOL v23 = [v8 analyticsEvent];
  [v23 populateFromVideoCaptureResponse:v9];
  [v23 publish];

LABEL_22:
  uint64_t v24 = [v9 reason];
  if (v24 == 3)
  {
    char v25 = @"MAX_RECORDING_FILE_SIZE_REACHED";
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        [(CAMViewfinderViewController *)self _setReceivedOutOfDiskSpaceErrorDuringCapture:1];
        [(CAMViewfinderViewController *)self _updateDiskSpaceAlertViewVisibilityAnimated:1];
      }
      goto LABEL_30;
    }
    char v25 = @"MAX_RECORDING_DURATION_REACHED";
  }
  uint64_t v26 = CAMLocalizedFrameworkString(v25, 0);
  if (v26)
  {
    long long v27 = (void *)v26;
    double v28 = (void *)MEMORY[0x263F82418];
    uint64_t v29 = CAMLocalizedFrameworkString(@"RECORDING_STOPPED_TITLE", 0);
    id v30 = [v28 alertControllerWithTitle:v29 message:v27 preferredStyle:1];

    uint64_t v31 = (void *)MEMORY[0x263F82400];
    int64_t v32 = CAMLocalizedFrameworkString(@"OK", 0);
    __int16 v33 = [v31 actionWithTitle:v32 style:1 handler:0];
    [v30 addAction:v33];

    uint64_t v34 = [(CAMViewfinderViewController *)self view];
    __int16 v35 = [v34 window];

    objc_msgSend(v35, "pl_presentViewController:animated:", v30, 1);
    goto LABEL_32;
  }
LABEL_30:
  if ([v9 slowWriterFrameDrops]) {
    [(CAMViewfinderViewController *)self _showFrameDropsAlert];
  }
LABEL_32:
  if ([(CAMViewfinderViewController *)self _resolvedTorchMode] == 2) {
    [(CAMViewfinderViewController *)self _updateTorchModeOnControllerForMode:[(CAMViewfinderViewController *)self _configuredMode]];
  }
  if ([(CAMViewfinderViewController *)self _wantsExternalStorageOutputEnabled]
    && ![(CAMViewfinderViewController *)self _externalStorageOutputEnabled])
  {
    int64_t v36 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_2099F8000, v36, OS_LOG_TYPE_DEFAULT, "External storage: enabling deferred SSD output on didCompleteVideoCaptureWithResponse", v37, 2u);
    }

    [(CAMViewfinderViewController *)self _setExternalStorageOutputEnabled:1 animated:1];
  }
}

- (void)videoRequestDidCompleteLocalPersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v16 = a3;
  id v8 = a4;
  id v9 = a5;
  id v10 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
  char v11 = objc_opt_respondsToSelector();

  if (v11)
  {
    int v12 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
    [v12 viewfinderViewController:self didReceiveVideoRequestDidCompleteLocalPersistence:v16 withResponse:v8 error:v9];
  }
  if (!v9)
  {
    int v13 = [v8 coordinationInfo];
    BOOL v14 = [(CAMViewfinderViewController *)self _isPrimaryDisplayAssetForCoordinationInfo:v13];

    if (v14)
    {
      double v15 = [(CAMViewfinderViewController *)self _cameraRollController];
      objc_msgSend(v15, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v8, 0, objc_msgSend(v16, "persistenceOptions"));
    }
  }
}

- (void)videoRequestDidCompleteRemotePersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v16 = a3;
  id v8 = a4;
  id v9 = a5;
  id v10 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
  char v11 = objc_opt_respondsToSelector();

  if (v11)
  {
    int v12 = [(CAMViewfinderViewController *)self videoCaptureTestDelegate];
    [v12 viewfinderViewController:self didReceiveVideoRequestDidCompleteRemotePersistence:v16 withResponse:v8 error:v9];
  }
  if (!v9)
  {
    int v13 = [v8 persistenceUUID];
    uint64_t v14 = [v8 sessionIdentifier];
    double v15 = [(CAMViewfinderViewController *)self _cameraRollController];
    objc_msgSend(v15, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v8, 1, objc_msgSend(v16, "persistenceOptions"));
    [v15 didPersistAssetWithUUID:v13 captureSession:v14];
  }
  [(CAMViewfinderViewController *)self _updateDiskSpaceAlertViewVisibilityAnimated:1];
}

- (void)videoRequestDidResumeCapturing:(id)a3
{
  int v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v13 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "CAMViewfinderViewController videoRequestDidResumeCapturing", v13, 2u);
  }

  char v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v6 = [v5 elapsedTimeView];
  [v6 setTimerPaused:0];

  uint64_t v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v8 = [v7 elapsedTimeView];
  [v8 setBackgroundStyle:1 animated:1];

  id v9 = [(CAMViewfinderViewController *)self _remoteShutterController];
  id v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v11 = [v10 elapsedTimeView];
  int v12 = [v11 startTime];
  [v9 didResumeCaptureTimerWithNewStartTime:v12];
}

- (id)_panoramaCaptureRequestWithCurrentSettings
{
  int64_t v3 = [(CAMViewfinderViewController *)self _motionController];
  int v4 = [(CAMViewfinderViewController *)self _cameraRollController];
  uint64_t v5 = [v3 panoramaCaptureOrientation];
  BOOL v6 = objc_alloc_init(CAMMutablePanoramaCaptureRequest);
  [(CAMMutablePanoramaCaptureRequest *)v6 setCaptureOrientation:v5];
  [(CAMMutablePanoramaCaptureRequest *)v6 setCaptureDevice:[(CAMViewfinderViewController *)self _currentDevice]];
  [(CAMMutablePanoramaCaptureRequest *)v6 setCaptureMode:[(CAMViewfinderViewController *)self _currentMode]];
  [(CAMMutablePanoramaCaptureRequest *)v6 setDelegate:self];
  -[CAMMutablePanoramaCaptureRequest setSessionIdentifier:](v6, "setSessionIdentifier:", [v4 sessionIdentifier]);
  uint64_t v7 = [(CAMViewfinderViewController *)self _locationController];
  id v8 = [v7 currentLocation];
  if (v8) {
    [(CAMMutablePanoramaCaptureRequest *)v6 setLocation:v8];
  }
  id v9 = [v7 headingForOrientation:v5];
  if (v9) {
    [(CAMMutablePanoramaCaptureRequest *)v6 setHeading:v9];
  }
  id v10 = +[CAMCaptureCapabilities capabilities];
  if ([v10 isInternalInstall])
  {
    char v11 = +[CAMUserPreferences preferences];
    -[CAMMutablePanoramaCaptureRequest setShouldDelayRemotePersistence:](v6, "setShouldDelayRemotePersistence:", [v11 shouldDelayRemotePersistence]);
  }
  unint64_t v12 = [(CAMViewfinderViewController *)self persistenceBehavior];
  [(CAMMutablePanoramaCaptureRequest *)v6 setPersistenceOptions:[(CAMViewfinderViewController *)self _persistenceOptionsForBehavior:v12 allowingOptionalLocalPersistence:0]];
  [(CAMMutablePanoramaCaptureRequest *)v6 setTemporaryPersistenceOptions:[(CAMViewfinderViewController *)self _temporaryPersistenceOptionsForBehavior:v12]];
  int v13 = +[CAMUserPreferences preferences];
  -[CAMMutablePanoramaCaptureRequest setPhotoEncodingBehavior:](v6, "setPhotoEncodingBehavior:", [v13 photoEncodingBehavior]);
  if ([v13 sharedLibraryEnabled])
  {
    long long v27 = v8;
    uint64_t v14 = [(CAMViewfinderViewController *)self _librarySelectionController];
    -[CAMMutablePanoramaCaptureRequest setSharedLibraryMode:](v6, "setSharedLibraryMode:", [v14 sharedLibraryMode]);

    if ([v10 isInternalInstall])
    {
      double v15 = [(CAMViewfinderViewController *)self _librarySelectionController];
      id v16 = [v15 librarySelectionDiagnostics];
      [(CAMMutablePanoramaCaptureRequest *)v6 setSharedLibraryDiagnostics:v16];
    }
    id v8 = v27;
    if ([v10 peopleProximityPersistenceSupported])
    {
      objc_super v17 = [(CAMViewfinderViewController *)self _librarySelectionController];
      uint64_t v26 = [v17 acquiredSignalResults];

      uint64_t v18 = [v26 identitiesInProximity];
      CAMLibrarySelectionIdentityContactIdentifiersForIdentities(v18);
      double v19 = v9;
      unint64_t v20 = v7;
      int64_t v21 = v4;
      v23 = uint64_t v22 = v3;
      [(CAMMutablePanoramaCaptureRequest *)v6 setContactIDsInProximity:v23];

      int64_t v3 = v22;
      int v4 = v21;
      uint64_t v7 = v20;
      id v9 = v19;

      id v8 = v27;
    }
  }
  -[CAMViewfinderViewController _updateOriginForRequest:](self, "_updateOriginForRequest:", v6, v26);
  [(CAMMutablePanoramaCaptureRequest *)v6 setPressType:[(CAMViewfinderViewController *)self _currentlyPressedButton]];
  uint64_t v24 = [(CAMViewfinderViewController *)self _generateAnalyticsCaptureEventWithRequest:v6 burst:0];
  [(CAMMutablePanoramaCaptureRequest *)v6 setAnalyticsEvent:v24];

  return v6;
}

- (BOOL)_startCapturingPanoramaWithRequest:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  id v11 = 0;
  char v6 = [v5 startCapturingPanoramaWithRequest:v4 error:&v11];
  id v7 = v11;
  if (v6)
  {
    [(CAMViewfinderViewController *)self _updateUIForCapturing:1 animated:1];
    id v8 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    id v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [v8 didCaptureWithRequest:v4 currentConfiguration:v9];
  }
  else
  {
    id v8 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController _startCapturingPanoramaWithRequest:]();
    }
  }

  return v6;
}

- (BOOL)_stopCapturingPanorama
{
  int64_t v3 = [(CAMViewfinderViewController *)self _captureController];
  int v4 = [v3 stopCapturingPanoramaInterrupted:0];
  [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:1];
  BOOL v5 = [(CAMViewfinderViewController *)self isDisablingAdditionalCaptures];
  if (v4 && v5) {
    [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:1];
  }

  return v4;
}

- (void)panoramaRequestDidStartCapturing:(id)a3
{
  id v4 = a3;
  [(CAMViewfinderViewController *)self _beginDisablingInterfaceAutorotation];
  BOOL v5 = [(CAMViewfinderViewController *)self _idleController];
  [v5 panoramaRequestDidStartCapturing:v4];
  char v6 = [(CAMViewfinderViewController *)self _panoramaViewController];
  id v7 = [v6 analyticsCaptureEvent];
  if (v7)
  {
    id v8 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController panoramaRequestDidStartCapturing:]();
    }
  }
  id v9 = [v4 analyticsEvent];
  [v6 setAnalyticsCaptureEvent:v9];
}

- (void)panoramaRequest:(id)a3 didGeneratePaintingStatus:(id)a4
{
  id v5 = a4;
  id v6 = [(CAMViewfinderViewController *)self _panoramaViewController];
  [v6 updateWithStatus:v5];
}

- (void)panoramaRequestDidStopCapturing:(id)a3 interrupted:(BOOL)a4
{
  BOOL v4 = a4;
  id v10 = a3;
  id v6 = [(CAMViewfinderViewController *)self _panoramaViewController];
  [v6 startProcessingPanorama];
  id v7 = [(CAMViewfinderViewController *)self _captureController];
  if (([v7 isCapturingPanorama] & 1) == 0)
  {
    [v6 setAnalyticsCaptureEvent:0];
    id v8 = [(CAMViewfinderViewController *)self _idleController];
    [v8 panoramaRequestDidStopCapturing:v10 interrupted:v4];
    [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:1];
    if (v4)
    {
      id v9 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      [v9 resetAnimated:1];
    }
    if ([(CAMViewfinderViewController *)self isDisablingAdditionalCaptures]) {
      [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:1];
    }
    [(CAMViewfinderViewController *)self _endDisablingInterfaceAutorotation];
  }
}

- (void)panoramaRequestDidCompleteCapture:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v13 = a3;
  id v8 = a4;
  id v9 = a5;
  id v10 = [(CAMViewfinderViewController *)self _panoramaViewController];
  [v10 finishedProcessingPanorama];
  [(CAMViewfinderViewController *)self _updateImageWellWithStillImageResponse:v8 forRequest:v13 error:v9];

  if (v9)
  {
    if ([(CAMViewfinderViewController *)self isDisablingAdditionalCaptures]) {
      [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:0];
    }
  }
  else
  {
    id v11 = [(CAMViewfinderViewController *)self _cameraRollController];
    objc_msgSend(v11, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v8, 0, objc_msgSend(v13, "persistenceOptions"));
    unint64_t v12 = [v13 analyticsEvent];
    [v12 populateFromStillImageCaptureResponse:v8];
    [v12 publish];
  }
}

- (void)panoramaRequestDidCompleteLocalPersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  if (!a5)
  {
    id v8 = a4;
    id v9 = a3;
    id v11 = [(CAMViewfinderViewController *)self _cameraRollController];
    uint64_t v10 = [v9 persistenceOptions];

    [v11 processTransientAssetUpdate:v8 preventingInsertion:0 persistenceOptions:v10];
  }
}

- (void)panoramaRequestDidCompleteRemotePersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  if (!a5)
  {
    id v7 = a4;
    id v8 = a3;
    id v9 = [v7 persistenceUUID];
    uint64_t v10 = [v7 sessionIdentifier];
    id v11 = [(CAMViewfinderViewController *)self _cameraRollController];
    uint64_t v12 = [v8 persistenceOptions];

    [v11 processTransientAssetUpdate:v7 preventingInsertion:1 persistenceOptions:v12];
    [v11 didPersistAssetWithUUID:v9 captureSession:v10];
  }
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1, a4);
}

- (BOOL)_isCapturingTimelapse
{
  if ([(CAMViewfinderViewController *)self _currentMode] != 5) {
    return 0;
  }
  int64_t v3 = [(CAMViewfinderViewController *)self _timelapseController];
  char v4 = [v3 isCapturing];

  return v4;
}

- (BOOL)_startTimelapse
{
  int64_t v3 = [(CAMViewfinderViewController *)self _timelapseController];
  char v4 = [(CAMViewfinderViewController *)self _cameraRollController];
  uint64_t v5 = [v3 delegate];

  if (v5 != self) {
    [v3 setDelegate:self];
  }
  int v6 = objc_msgSend(v3, "startCapturingWithCaptureDevice:captureSession:", -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"), objc_msgSend(v4, "sessionIdentifier"));
  if (v6)
  {
    id v7 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    id v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [v7 didCaptureTimelapseWithConfiguration:v8];
  }
  return v6;
}

- (BOOL)_stopTimelapse
{
  id v2 = [(CAMViewfinderViewController *)self _timelapseController];
  char v3 = [v2 stopCapturingWithReasons:1];

  return v3;
}

- (void)timelapseController:(id)a3 startedWithCaptureOrientation:(int64_t)a4
{
  [(CAMViewfinderViewController *)self _updateUIForCapturing:1 animated:1];
  [(CAMPreviewViewController *)self->__previewViewController notifyWillStartCapturing];
  id v6 = [(CAMViewfinderViewController *)self _idleController];
  [v6 timelapseRequestDidStartCapturing];
  uint64_t v5 = [(CAMViewfinderViewController *)self _generateAnalyticsCaptureEventForTimelapse];
  [(CAMViewfinderViewController *)self set_timelapseAnalyticsEvent:v5];
}

- (void)timelapseControllerStopped:(id)a3
{
  [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:1];
  [(CAMPreviewViewController *)self->__previewViewController notifyDidStopCapture];
  id v6 = [(CAMViewfinderViewController *)self _idleController];
  [v6 timelapseRequestDidStopCapturing];
  BOOL v4 = +[CAMApplication appOrPlugInState] != 2;
  uint64_t v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  [v5 resetAnimated:v4];

  [(CAMViewfinderViewController *)self set_timelapseAnalyticsEvent:0];
}

- (void)timelapseController:(id)a3 generatedPlaceholderResult:(id)a4 withThumbnailImage:(id)a5 forAssetUUID:(id)a6 inCaptureSession:(unsigned __int16)a7
{
  uint64_t v7 = a7;
  id v20 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  if (v12)
  {
    double v15 = [(CAMViewfinderViewController *)self _cameraRollController];
    [v15 processTransientAssetUpdate:v12 preventingInsertion:0 persistenceOptions:2];
  }
  if (v13)
  {
    id v16 = [(CAMViewfinderViewController *)self _cameraRollController];
    if ([v16 isCaptureSessionCurrent:v7])
    {
      [v16 willPersistAssetWithUUID:v14 captureSession:v7];
      [(CAMViewfinderViewController *)self _presentImageWellImage:v13 uuid:v14 animated:1];
      objc_super v17 = [(CAMViewfinderViewController *)self _remoteShutterController];
      [v17 sendThumbnailImage:v13 isVideo:1];
    }
    uint64_t v18 = [(CAMViewfinderViewController *)self _timelapseAnalyticsEvent];
    [v12 timelapseDuration];
    objc_msgSend(v18, "populateDuration:");

    double v19 = [(CAMViewfinderViewController *)self _timelapseAnalyticsEvent];
    [v19 publish];
  }
  else if (![(CAMViewfinderViewController *)self _isCapturingTimelapse])
  {
    [(CAMImageWell *)self->__imageWell recoverFromFailedThumbnailUpdate];
  }
}

- (void)timelapseController:(id)a3 persistedPlaceholderResult:(id)a4 error:(id)a5
{
  if (!a5)
  {
    id v6 = a4;
    uint64_t v7 = [v6 assetUUID];
    uint64_t v8 = [v6 sessionIdentifier];
    id v9 = [(CAMViewfinderViewController *)self _cameraRollController];
    [v9 processTransientAssetUpdate:v6 preventingInsertion:1 persistenceOptions:2];

    [v9 didPersistAssetWithUUID:v7 captureSession:v8];
  }
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1, a4);
}

- (void)generateAnalyticsSessionEventIfNeeded
{
  char v3 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];

  if (!v3)
  {
    id v10 = +[CAMCaptureCapabilities capabilities];
    BOOL v4 = [CAMAnalyticsSessionEvent alloc];
    uint64_t v5 = [(CAMViewfinderViewController *)self _supportedCaptureModes];
    int64_t v6 = [(CAMViewfinderViewController *)self _currentMode];
    int64_t v7 = [(CAMViewfinderViewController *)self _currentDevice];
    uint64_t v8 = [(CAMViewfinderViewController *)self _callStatusMonitor];
    id v9 = [(CAMAnalyticsSessionEvent *)v4 initWithCapabilities:v10 availableCaptureModes:v5 currentCaptureMode:v6 currentCaptureDevice:v7 callStatusMonitor:v8];
    [(CAMViewfinderViewController *)self _setAnalyticsSessionEvent:v9];
  }
}

- (void)generateOrUpdateAnalyticsSessionEventIfNeededWithCaptureMode:(int64_t)a3 captureDevice:(int64_t)a4
{
  int64_t v7 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];

  if (v7)
  {
    id v12 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    [v12 setFirstConfiguredCaptureMode:a3 captureDevice:a4];
  }
  else
  {
    id v12 = +[CAMCaptureCapabilities capabilities];
    uint64_t v8 = [CAMAnalyticsSessionEvent alloc];
    id v9 = [(CAMViewfinderViewController *)self _supportedCaptureModes];
    id v10 = [(CAMViewfinderViewController *)self _callStatusMonitor];
    id v11 = [(CAMAnalyticsSessionEvent *)v8 initWithCapabilities:v12 availableCaptureModes:v9 currentCaptureMode:a3 currentCaptureDevice:a4 callStatusMonitor:v10];
    [(CAMViewfinderViewController *)self _setAnalyticsSessionEvent:v11];
  }
}

- (void)_handleSessionWasPrewarmed:(id)a3
{
  BOOL v4 = [a3 userInfo];
  id v6 = [v4 objectForKeyedSubscript:*MEMORY[0x263EF96E8]];

  [(CAMViewfinderViewController *)self generateAnalyticsSessionEventIfNeeded];
  uint64_t v5 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  [v5 didPrewarmWithReason:v6];
}

- (BOOL)handleURLIfNeeded:(id)a3
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([v4 isConfigurationURL])
  {
    uint64_t v5 = [v4 configurationRequest];
    id v6 = v5;
    BOOL v7 = v5 != 0;
    if (v5)
    {
      if ([v5 wantsQRCodeForSession])
      {
        uint64_t v8 = +[CAMUserPreferences preferences];
        [v8 setForceEnableQRBanners:1];
        id v9 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_2099F8000, v9, OS_LOG_TYPE_DEFAULT, "Launched with a URL request to force enable QR scanning", buf, 2u);
        }
      }
      unint64_t v10 = [v6 requestedCaptureMode];
      if (v10 > 9) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = off_263FA2788[v10];
      }
      unint64_t v11 = [v6 requestedCaptureDevice];
      if (v11 > 0xB) {
        id v12 = 0;
      }
      else {
        id v12 = off_263FA2428[v11];
      }
      uint64_t v13 = [v6 requestedCaptureMode];
      int64_t v14 = [(CAMViewfinderViewController *)self currentCaptureMode];
      unint64_t v15 = [v6 requestedCaptureDevice] - 1;
      if (v15 > 0xA) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = qword_209C794E8[v15];
      }
      unint64_t v17 = [(CAMViewfinderViewController *)self currentCaptureDevice] - 1;
      if (v17 > 0xA) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = qword_209C794E8[v17];
      }
      if ([(CAMViewfinderViewController *)self isRecording])
      {
        double v19 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543618;
          uint64_t v26 = v24;
          __int16 v27 = 2114;
          double v28 = v12;
          _os_log_impl(&dword_2099F8000, v19, OS_LOG_TYPE_DEFAULT, "Ignoring URL request mode:%{public}@ device:%{public}@ because device is recording", buf, 0x16u);
        }
      }
      else
      {
        id v20 = os_log_create("com.apple.camera", "Camera");
        BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if (v13 == v14 && v16 == v18)
        {
          if (v21)
          {
            *(_DWORD *)buf = 138543618;
            uint64_t v26 = v24;
            __int16 v27 = 2114;
            double v28 = v12;
            _os_log_impl(&dword_2099F8000, v20, OS_LOG_TYPE_DEFAULT, "Ignoring URL request since already configured for mode:%{public}@ device:%{public}@", buf, 0x16u);
          }
        }
        else
        {
          if (v21)
          {
            *(_DWORD *)buf = 138543618;
            uint64_t v26 = v24;
            __int16 v27 = 2114;
            double v28 = v12;
            _os_log_impl(&dword_2099F8000, v20, OS_LOG_TYPE_DEFAULT, "Launched with a URL request for mode:%{public}@ device:%{public}@", buf, 0x16u);
          }

          -[CAMViewfinderViewController changeToMode:device:](self, "changeToMode:device:", [v6 requestedCaptureMode], objc_msgSend(v6, "requestedCaptureDevice"));
        }
        -[CAMViewfinderViewController generateOrUpdateAnalyticsSessionEventIfNeededWithCaptureMode:captureDevice:](self, "generateOrUpdateAnalyticsSessionEventIfNeededWithCaptureMode:captureDevice:", [v6 requestedCaptureMode], objc_msgSend(v6, "requestedCaptureDevice"));
      }
      uint64_t v22 = [(CAMViewfinderViewController *)self _cameraRollController];
      if ([v22 isCameraRollViewControllerPresented]) {
        [v22 dismissCameraRollViewControllerForced:1 animated:1];
      }
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

- (void)_populateZoomForCaptureEvent:(id)a3
{
  id v10 = a3;
  id v4 = [(CAMViewfinderViewController *)self _zoomControl];
  int64_t v5 = [(CAMViewfinderViewController *)self _lastZoomInteractionType];
  if (v4)
  {
    uint64_t v6 = [v4 zoomButtonContentType];
    if (v6 == 2)
    {
LABEL_5:
      [v4 displayZoomValue];
      double v8 = v7;
      id v9 = [v4 zoomPoints];
      [v10 populateZoomFromDisplayZoomValue:v9 zoomPoints:v5 zoomInteractionType:v8];

      goto LABEL_8;
    }
    if (v6 != 1)
    {
      if (v6) {
        goto LABEL_8;
      }
      goto LABEL_5;
    }
    objc_msgSend(v10, "populateZoomFromZoomButtonSymbol:zoomInteractionType:", objc_msgSend(v4, "zoomButtonSymbol"), v5);
  }
  else
  {
    [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
    objc_msgSend(v10, "populateZoomFromDisplayZoomValue:zoomPoints:zoomInteractionType:", 0, v5);
  }
LABEL_8:
}

- (id)_generateAnalyticsCaptureEventWithRequest:(id)a3 burst:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  double v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  double v8 = [[CAMAnalyticsCaptureEvent alloc] initWithGraphConfiguration:v7 outputToExternalStorage:[(CAMViewfinderViewController *)self _externalStorageOutputEnabled]];
  id v9 = [(CAMViewfinderViewController *)self _previewViewController];
  uint64_t v10 = [v6 type];
  if (v10 == 2)
  {
    [(CAMAnalyticsCaptureEvent *)v8 populateFromPanoramaCaptureRequest:v6];
    unint64_t v11 = [(CAMViewfinderViewController *)self _panoramaViewController];
    id v12 = [v11 panoramaView];
    -[CAMAnalyticsCaptureEvent populatePanoramaDirection:](v8, "populatePanoramaDirection:", [v12 direction]);
  }
  else if (v10 == 1)
  {
    unint64_t v11 = +[CAMUserPreferences preferences];
    [(CAMAnalyticsCaptureEvent *)v8 populateFromVideoCaptureRequest:v6 preferences:v11];
  }
  else
  {
    if (v10) {
      goto LABEL_8;
    }
    unint64_t v11 = +[CAMUserPreferences preferences];
    [(CAMAnalyticsCaptureEvent *)v8 populateFromStillImageCaptureRequest:v6 burst:v4 preferences:v11];
  }

LABEL_8:
  [(CAMViewfinderViewController *)self _populateZoomForCaptureEvent:v8];
  [(CAMAnalyticsCaptureEvent *)v8 populateDesiredFlashMode:[(CAMViewfinderViewController *)self _desiredFlashMode] desiredLivePhotoMode:[(CAMViewfinderViewController *)self _desiredLivePhotoMode] desiredHDRMode:[(CAMViewfinderViewController *)self _desiredHDRMode] timerDuration:[(CAMViewfinderViewController *)self _resolvedTimerDuration]];
  [(CAMAnalyticsCaptureEvent *)v8 populateDesiredTorchMode:[(CAMViewfinderViewController *)self _desiredTorchMode]];
  [v9 baselineExposureBias];
  int v14 = v13;
  [v9 cachedExposureTargetBias];
  int v16 = v15;
  [v9 totalExposureBias];
  LODWORD(v18) = v17;
  LODWORD(v19) = v14;
  LODWORD(v20) = v16;
  [(CAMAnalyticsCaptureEvent *)v8 populateExposureSliderBias:v19 exposureTapAndBias:v20 totalExposureBias:v18];
  int64_t v21 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus];
  [(CAMViewfinderViewController *)self _portraitModeIntensityValue];
  double v23 = v22;
  [(CAMViewfinderViewController *)self _portraitModeApertureValue];
  double v25 = v24;
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  char v38 = v6;
  [(CAMAnalyticsCaptureEvent *)v8 populatePortraitStatus:v21 lightingEffectIntensity:[(CAMViewfinderViewController *)self _isDepthSuggestionAllowedForCurrentConfigurationIsBurst:v4] apertureValue:v6 zoomFactor:v23 isDepthSuggestionAllowed:v25 request:v26];
  __int16 v27 = [(CAMViewfinderViewController *)self _captureController];
  -[CAMAnalyticsCaptureEvent populateDesiredNightModeControlMode:resolvedNightModeControlMode:resolvedNightModeMode:nightModeStatus:](v8, "populateDesiredNightModeControlMode:resolvedNightModeControlMode:resolvedNightModeMode:nightModeStatus:", -[CAMViewfinderViewController _desiredLowLightControlMode](self, "_desiredLowLightControlMode"), -[CAMViewfinderViewController _resolvedLowLightControlMode](self, "_resolvedLowLightControlMode"), -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode"), [v27 lowLightStatus]);
  uint64_t v28 = [v7 mode];
  uint64_t v29 = [v7 devicePosition];
  uint64_t v30 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  if (!+[CAMConflictingControlConfiguration shouldDisableMacroForLockedPortraitForMode:devicePosition:photoFormat:optionalDepthEffectEnabled:](CAMConflictingControlConfiguration, "shouldDisableMacroForLockedPortraitForMode:devicePosition:photoFormat:optionalDepthEffectEnabled:", v28, v29, v30, v31, [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion]))
  {
    uint64_t v32 = [v27 isAutoMacroSuggested];
    if (v32) {
      uint64_t v33 = [v27 isAutoMacroActive];
    }
    else {
      uint64_t v33 = 0;
    }
    [(CAMAnalyticsCaptureEvent *)v8 populateDesiredMacroMode:[(CAMViewfinderViewController *)self _desiredMacroMode] isMacroCapture:v33 isMacroSuggested:v32];
  }
  if (![(CAMViewfinderViewController *)self _externalStorageOutputEnabled])
  {
    uint64_t v34 = [(CAMViewfinderViewController *)self _librarySelectionController];
    -[CAMAnalyticsCaptureEvent populateSharedLibraryMode:](v8, "populateSharedLibraryMode:", [v34 sharedLibraryMode]);
  }
  [(CAMAnalyticsCaptureEvent *)v8 populateObjectResultsWithNumberOfFaces:[(CAMViewfinderViewController *)self _faceCount] numberOfCats:[(CAMViewfinderViewController *)self _catCount] numberOfDogs:[(CAMViewfinderViewController *)self _dogCount]];
  __int16 v35 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v36 = [v35 deviceOrientation];

  [(CAMAnalyticsCaptureEvent *)v8 populateDeviceOrientation:v36 isDeviceOrientationLocked:CAMIsDeviceOrientationLocked()];
  return v8;
}

- (id)_generateAnalyticsCaptureEventForTimelapse
{
  char v3 = [CAMAnalyticsCaptureEvent alloc];
  BOOL v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int64_t v5 = [(CAMAnalyticsCaptureEvent *)v3 initWithGraphConfiguration:v4 outputToExternalStorage:0];

  id v6 = [(CAMViewfinderViewController *)self _previewViewController];
  double v7 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v8 = [v7 captureOrientation];

  id v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v10 = +[CAMUserPreferences preferences];
  unint64_t v11 = [v9 device] - 1;
  if (v11 > 0xA) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = qword_209C794E8[v11];
  }
  uint64_t v13 = [v10 mirrorCameraCapturesForDevicePosition:v12 mode:5];

  int64_t v14 = [(CAMViewfinderViewController *)self _currentCaptureRequestOrigin];
  int v15 = [MEMORY[0x263EFF910] now];
  [(CAMAnalyticsCaptureEvent *)v5 populateForTimelapseCaptureOrientation:v8 captureMirrored:v13 origin:v14 pressType:-1 startDate:v15];

  [(CAMViewfinderViewController *)self _populateZoomForCaptureEvent:v5];
  [v6 baselineExposureBias];
  int v17 = v16;
  [v6 cachedExposureTargetBias];
  int v19 = v18;
  [v6 totalExposureBias];
  LODWORD(v21) = v20;
  LODWORD(v22) = v17;
  LODWORD(v23) = v19;
  [(CAMAnalyticsCaptureEvent *)v5 populateExposureSliderBias:v22 exposureTapAndBias:v23 totalExposureBias:v21];

  return v5;
}

- (void)_setTimerDurationAndUpdateUI:(int64_t)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  -[CAMTimerButton setDuration:](self->__timerButton, "setDuration:");
  [(CAMViewfinderViewController *)self _setResolvedTimerDuration:a3];
  double v7 = [(CAMViewfinderViewController *)self _controlDrawer];
  uint64_t v8 = [v7 timerButton];
  [v8 setTimerDuration:a3];

  id v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v10 = [v9 controlStatusBar];
  unint64_t v11 = [v10 timerIndicator];
  [v11 setTimerDuration:a3];

  uint64_t v12 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityForGraphConfiguration:v12 animated:v4];

  id v13 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v13 isCapturing:[(CAMViewfinderViewController *)self _isCapturing] animated:v4];
}

- (void)_setCapturingFromTimer:(BOOL)a3
{
  if (self->__capturingFromTimer != a3)
  {
    self->__capturingFromTimer = a3;
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Capturing from timer"];
  }
}

- (void)_startCountdownForCaptureTimer
{
  char v3 = [(CAMViewfinderViewController *)self _librarySelectionController];
  -[CAMViewfinderViewController set_cachedSharedLibraryTimerState:](self, "set_cachedSharedLibraryTimerState:", [v3 sharedLibraryMode]);

  [(CAMViewfinderViewController *)self _setCapturingFromTimer:1];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _setupAndStartSynchronizedCaptureTimerDelegate];
  BOOL v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v4 isCapturing:1 animated:1];

  [(CAMViewfinderViewController *)self _indicateCaptureTimerProgressUsingTorch];
}

- (void)_stopCountdownForCaptureTimer
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v3 = [(CAMViewfinderViewController *)self _remainingCaptureTimerTicks];
  [(CAMViewfinderViewController *)self _setCapturingFromTimer:0];
  [(CAMViewfinderViewController *)self _teardownSynchronizedCaptureTimerDelegate];
  [(CAMViewfinderViewController *)self _teardownBurstTimer];
  [(CAMViewfinderViewController *)self _stopCapturingBurst];
  if ([(CAMViewfinderViewController *)self _resetTimerDurationAfterDelayedCapture])
  {
    [(CAMViewfinderViewController *)self _setTimerDurationAndUpdateUI:0 animated:1];
  }
  [(CAMViewfinderViewController *)self _setResetTimerDurationAfterDelayedCapture:0];
  BOOL v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v4 isCapturing:0 animated:1];

  if (![(CAMViewfinderViewController *)self _isCurrentLowLightCaptureCancelable])
  {
    int64_t v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v5 resetAnimated:1];
  }
  id v6 = [(CAMViewfinderViewController *)self _librarySelectionController];
  unint64_t v7 = [v6 sharedLibraryMode];

  if ([(CAMViewfinderViewController *)self _cachedSharedLibraryTimerState] != v7)
  {
    uint64_t v8 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = CAMSharedLibraryModeDescription(v7);
      int v11 = 138543362;
      uint64_t v12 = v9;
      _os_log_impl(&dword_2099F8000, v8, OS_LOG_TYPE_DEFAULT, "Updating library selection mode to %{public}@ after timer capture ended", (uint8_t *)&v11, 0xCu);
    }
    [(CAMViewfinderViewController *)self librarySelectionDidChangeSharedLibraryMode:v7];
  }
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _stopCaptureTimerProgressUsingTorch];
  if (v3)
  {
    uint64_t v10 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v10 countdownCanceled];

    [(CAMViewfinderViewController *)self _cancelCTMCapture];
  }
}

- (BOOL)_shouldUseBurstForCaptureTimer
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _captureController];
  BOOL v4 = +[CAMCaptureCapabilities capabilities];
  int64_t v27 = [(CAMViewfinderViewController *)self _currentDevice];
  int64_t v5 = [(CAMViewfinderViewController *)self _currentDevicePosition];
  int v6 = [v4 isFlashSupportedForDevicePosition:v5];
  int64_t v7 = [(CAMViewfinderViewController *)self _resolvedFlashMode];
  if ([(CAMViewfinderViewController *)self _resolvedFlashMode] == 2) {
    int v8 = [v3 isFlashActive];
  }
  else {
    int v8 = 0;
  }
  int v9 = objc_msgSend(v4, "isHDRSupportedForDevicePosition:", v5, v3);
  int64_t v10 = [(CAMViewfinderViewController *)self _resolvedHDRMode];
  char v11 = [v4 isLivePhotoSupportedForDevicePosition:v5];
  unint64_t v12 = [(CAMViewfinderViewController *)self _resolvedLivePhotoMode] - 1;
  uint64_t v13 = +[CAMCaptureCapabilities capabilities];
  int v28 = objc_msgSend(v13, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v27);

  char v14 = 0;
  if (v7 == 1) {
    int v15 = 1;
  }
  else {
    int v15 = v8;
  }
  int v16 = v6 & v15;
  if (v9 && v10 == 1) {
    char v14 = [v4 isSmartHDRSupported] ^ 1;
  }
  if (v12 < 2) {
    char v17 = v11;
  }
  else {
    char v17 = 0;
  }
  BOOL v18 = [(CAMViewfinderViewController *)self _isLowLightActiveForCurrentSettings];
  int64_t v19 = [(CAMViewfinderViewController *)self _resolvedRAWMode];
  int64_t v20 = [(CAMViewfinderViewController *)self _resolvedPhotoResolution];
  BOOL v21 = [(CAMViewfinderViewController *)self isDisablingMultipleCaptureFeatures];
  BOOL v22 = [(CAMViewfinderViewController *)self _shouldUsePhotoModePortraitEffect];
  BOOL v23 = 0;
  if (((v28 ^ 1 | v16) & 1) != 0 || (v14 & 1) != 0 || (v17 & 1) != 0 || v21 || v18)
  {
    double v24 = v26;
  }
  else
  {
    double v24 = v26;
    if (v19 != 1) {
      BOOL v23 = v20 != 3 && !v22;
    }
  }

  return v23;
}

- (void)_setupAndStartSynchronizedCaptureTimerDelegate
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _synchronizedCaptureTimerDelegate];
  if (v3) {
    [(CAMViewfinderViewController *)self _teardownSynchronizedCaptureTimerDelegate];
  }
  BOOL v4 = objc_alloc_init(CAMAnimationDelegate);
  [(CAMViewfinderViewController *)self _setSynchronizedCaptureTimerDelegate:v4];
  objc_initWeak(&location, self);
  objc_initWeak(&from, v4);
  uint64_t v5 = MEMORY[0x263EF8330];
  uint64_t v6 = 3221225472;
  int64_t v7 = __77__CAMViewfinderViewController__setupAndStartSynchronizedCaptureTimerDelegate__block_invoke;
  int v8 = &unk_263FA1D60;
  objc_copyWeak(&v9, &location);
  objc_copyWeak(&v10, &from);
  [(CAMAnimationDelegate *)v4 setCompletion:&v5];
  [(CAMViewfinderViewController *)self _startSynchronizedCaptureTimerDelegate];
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);
}

void __77__CAMViewfinderViewController__setupAndStartSynchronizedCaptureTimerDelegate__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _synchronizedCaptureTimerDelegateFired:v2];
}

- (void)_startSynchronizedCaptureTimerDelegate
{
  id v7 = [(CAMViewfinderViewController *)self _synchronizedCaptureTimerDelegate];
  unint64_t v3 = [(CAMViewfinderViewController *)self _resolvedTimerDuration] - 1;
  if (v3 > 2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = qword_209C79348[v3];
  }
  [(CAMViewfinderViewController *)self _setRemainingCaptureTimerTicks:v4];
  uint64_t v5 = [(CAMViewfinderViewController *)self _timerIndicatorView];
  if (!v5)
  {
    uint64_t v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    uint64_t v5 = [v6 timerIndicator];
  }
  [v5 stopCountdown];
  [v5 resetWithNumberOfTicks:v4];
  [v5 startCountdownWithAnimationDelegate:v7];
}

- (void)_teardownSynchronizedCaptureTimerDelegate
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _synchronizedCaptureTimerDelegate];
  if (v3)
  {
    id v4 = v3;
    [(CAMViewfinderViewController *)self _setSynchronizedCaptureTimerDelegate:0];
    unint64_t v3 = v4;
  }
}

- (void)_synchronizedCaptureTimerDelegateFired:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  id v16 = [(CAMViewfinderViewController *)self _synchronizedCaptureTimerDelegate];
  uint64_t v6 = [(CAMViewfinderViewController *)self _captureController];

  if (!v5 || v16 != v4) {
    goto LABEL_17;
  }
  unint64_t v7 = [(CAMViewfinderViewController *)self _remainingCaptureTimerTicks] - 1;
  [(CAMViewfinderViewController *)self _setRemainingCaptureTimerTicks:v7];
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldUseBurstForCaptureTimer];
  char v9 = [v6 isCapturingBurst];
  if (v8 && v7 == 1)
  {
    [(CAMViewfinderViewController *)self _setupBurstTimerWithDelay:0.6];
LABEL_11:
    char v11 = [(CAMViewfinderViewController *)self _timerIndicatorView];
    [v11 decrement];

    unint64_t v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    uint64_t v13 = [v12 timerIndicator];
    [v13 decrement];

    char v14 = [(CAMViewfinderViewController *)self _currentBurstTimer];

    if (!v14) {
      [(CAMViewfinderViewController *)self _indicateCaptureTimerProgressUsingTorch];
    }
    goto LABEL_17;
  }
  if (v7) {
    char v10 = 1;
  }
  else {
    char v10 = v9;
  }
  if ((v10 & 1) == 0)
  {
    [(CAMViewfinderViewController *)self _setCurrentLowLightCaptureCancelable:[(CAMViewfinderViewController *)self _isExpectedLowLightDurationCancelable]];
    int v15 = [(CAMViewfinderViewController *)self _currentStillImageCaptureMomentSettings];

    if (v15) {
      [(CAMViewfinderViewController *)self _commitCTMCaptureWithType:1];
    }
    else {
      [(CAMViewfinderViewController *)self _captureStillImageWithCurrentSettings];
    }
    [(CAMViewfinderViewController *)self _stopCountdownForCaptureTimer];
    goto LABEL_17;
  }
  if (v7) {
    goto LABEL_11;
  }
LABEL_17:
}

- (void)_indicateCaptureTimerProgressUsingTorch
{
  id v5 = +[CAMCaptureCapabilities capabilities];
  if (objc_msgSend(v5, "isTorchPatternSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")))
  {
    unint64_t v3 = [(CAMViewfinderViewController *)self _torchPatternController];
    int64_t v4 = [(CAMViewfinderViewController *)self _resolvedTimerDuration];
    if ((unint64_t)(v4 - 2) >= 2)
    {
      if (v4 != 1) {
        goto LABEL_7;
      }
    }
    else if ([(CAMViewfinderViewController *)self _remainingCaptureTimerTicks] > 3)
    {
      [v3 blink];
LABEL_7:

      goto LABEL_8;
    }
    [v3 doubleBlink];
    goto LABEL_7;
  }
LABEL_8:
}

- (void)_stopCaptureTimerProgressUsingTorch
{
  id v4 = +[CAMCaptureCapabilities capabilities];
  if (objc_msgSend(v4, "isTorchPatternSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")))
  {
    unint64_t v3 = [(CAMViewfinderViewController *)self _torchPatternController];
    [v3 stopPerformingPattern];
  }
}

- (void)setConfigurationDelegate:(id)a3
{
  obuint64_t j = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_configurationDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_configurationDelegate, obj);
    p_configurationDelegateFlags = &self->_configurationDelegateFlags;
    p_configurationDelegateFlags->respondsToWillBeginConfiguration = objc_opt_respondsToSelector() & 1;
    p_configurationDelegateFlags->respondsToDidCompleteConfiguration = objc_opt_respondsToSelector() & 1;
  }
}

- (void)_handleUserChangedToDevice:(int64_t)a3
{
  int64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
  [(CAMViewfinderViewController *)self _handleUserChangedToMode:v5 device:a3];
}

- (void)_handleUserChangedToMode:(int64_t)a3
{
  BOOL v5 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:a3 devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  uint64_t v6 = +[CAMUserPreferences preferences];
  uint64_t v7 = objc_msgSend(v6, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", a3, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v5);

  [(CAMViewfinderViewController *)self _handleUserChangedToMode:a3 device:v7];
  id v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v8 setControlDrawerExpanded:0 forReason:3 animated:1];
}

- (void)_handleUserChangedToMode:(int64_t)a3 device:(int64_t)a4
{
  uint64_t v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v8 = [v7 mode];

  id v26 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  char v9 = -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", a3, a4);
  BOOL v10 = [(CAMViewfinderViewController *)self _shouldResetZoomForChangeFromMode:v8 toMode:a3];
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  double v12 = v11;
  if ([v9 trueVideoEnabled] && (objc_msgSend(v26, "trueVideoEnabled") & 1) == 0) {
    [(CAMViewfinderViewController *)self _setTrueVideoSourceZoomFactor:v12];
  }
  BOOL v14 = [v26 trueVideoEnabled]
     && (uint64_t v13 = [v9 mode],
         v13 == [(CAMViewfinderViewController *)self _trueVideoSourceCaptureMode])
     && ![v9 mode]
     && [v9 devicePosition] == 1;
  if (v10)
  {
    [(CAMViewfinderViewController *)self _defaultZoomFactorForGraphConfiguration:v9];
LABEL_12:
    double v12 = v15;
    goto LABEL_13;
  }
  if (v14)
  {
    [(CAMViewfinderViewController *)self _trueVideoSourceZoomFactor];
    goto LABEL_12;
  }
  if ([(CAMViewfinderViewController *)self _trueVideoIsActive])
  {
    BOOL v16 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", [v9 mode], objc_msgSend(v9, "devicePosition"));
    char v17 = +[CAMCaptureCapabilities capabilities];
    uint64_t v18 = objc_msgSend(v17, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", a4, objc_msgSend(v9, "mode"), objc_msgSend(v9, "videoConfiguration"), objc_msgSend(v9, "videoStabilizationStrength"), v16);

    [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
    +[CAMZoomControlUtilities equivalentZoomFactor:forDevice:fromDevice:](CAMZoomControlUtilities, "equivalentZoomFactor:forDevice:fromDevice:", v18, [v26 device], v19);
    a4 = +[CAMZoomControlUtilities deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:](CAMZoomControlUtilities, "deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:", v18, [v9 mode], +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", objc_msgSend(v9, "mode"), v18, objc_msgSend(v9, "videoConfiguration"), objc_msgSend(v9, "videoStabilizationStrength"), 0, 0), v20);
    [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
    +[CAMZoomControlUtilities equivalentZoomFactor:forDevice:fromDevice:](CAMZoomControlUtilities, "equivalentZoomFactor:forDevice:fromDevice:", a4, [v26 device], v21);
    double v12 = v22;
    if ([(CAMViewfinderViewController *)self _useZoomFactorsOfTrueVideoDestinationModeForGraphConfiguration:v9])
    {
      BOOL v23 = +[CAMCaptureCapabilities capabilities];
      objc_msgSend(v23, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", objc_msgSend(v9, "mode"), a4, objc_msgSend(v9, "videoConfiguration"), objc_msgSend(v9, "videoStabilizationStrength"));
      double v25 = v24;

      if (v12 >= v25) {
        double v12 = v25;
      }
    }
  }
LABEL_13:
  [(CAMViewfinderViewController *)self _handleUserChangedToMode:a3 device:a4 zoomFactor:v12];
}

- (void)_performChangeFromGraphConfiguration:(id)a3 toGraphConfiguration:(id)a4 zoomFactor:(double)a5 deferIfConfigurationInFlight:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a4;
  BOOL v12 = [(CAMViewfinderViewController *)self _hasInFlightConfiguration];
  [(CAMViewfinderViewController *)self _willChangeToGraphConfiguration:v11 zoomFactor:v10 fromGraphConfiguration:1 animated:a5];
  if (v6 && v12)
  {
    uint64_t v13 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138543618;
      id v15 = v11;
      __int16 v16 = 2114;
      id v17 = v10;
      _os_log_impl(&dword_2099F8000, v13, OS_LOG_TYPE_DEFAULT, "Deferring change to: %{public}@, from: %{public}@", (uint8_t *)&v14, 0x16u);
    }

    [(CAMViewfinderViewController *)self _setNeedsDeferredGraphConfiguration:1];
  }
  else
  {
    [(CAMViewfinderViewController *)self _changeToGraphConfiguration:v11 zoomFactor:v10 fromGraphConfiguration:a5];
  }
}

- (void)_handleUserChangedToMode:(int64_t)a3 device:(int64_t)a4 zoomFactor:(double)a5
{
  id v15 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v9 = [v15 mode];
  uint64_t v10 = [v15 device];
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  if (v9 != a3 || v10 != a4 || v11 != a5)
  {
    BOOL v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    BOOL v13 = [v12 trueVideoState] == 0;

    int v14 = [(CAMViewfinderViewController *)self _graphConfigurationForChangeToMode:a3 device:a4 fromGraphConfiguration:v15];
    [(CAMViewfinderViewController *)self _performChangeFromGraphConfiguration:v15 toGraphConfiguration:v14 zoomFactor:v13 deferIfConfigurationInFlight:a5];
  }
}

- (void)_willChangeToGraphConfiguration:(id)a3 zoomFactor:(double)a4 fromGraphConfiguration:(id)a5 animated:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v100 = *MEMORY[0x263EF8340];
  id v10 = a3;
  id v11 = a5;
  BOOL v12 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543874;
    id v95 = v10;
    __int16 v96 = 2114;
    id v97 = v11;
    __int16 v98 = 2048;
    double v99 = a4;
    _os_log_impl(&dword_2099F8000, v12, OS_LOG_TYPE_DEFAULT, "Will change to: %{public}@ from: %{public}@ with zoomFactor=%.3f", buf, 0x20u);
  }

  int v89 = +[CAMCaptureCapabilities capabilities];
  uint64_t v13 = [v10 mode];
  uint64_t v91 = [v10 device];
  uint64_t v14 = [v11 mode];
  uint64_t v90 = [v11 device];
  id v85 = [(CAMViewfinderViewController *)self _livePhotoButton];
  [v85 interruptEnablingAnimation];
  id v15 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  __int16 v16 = [v15 controlStatusBar];
  id v17 = [v16 livePhotoIndicator];
  [v17 stopAnimating];

  uint64_t v18 = [(CAMViewfinderViewController *)self _timerCache];
  [v18 cancelAllTimers];

  [(CAMViewfinderViewController *)self _stopSmartStyleOnboardingControlRevealAnimation];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v6];
  [(CAMViewfinderViewController *)self _setReconfiguring:1];
  [(CAMViewfinderViewController *)self _cancelCTMCapture];
  [(CAMViewfinderViewController *)self _updateUIForCapturing:0 animated:v6];
  [(CAMViewfinderViewController *)self _setCurrentGraphConfiguration:v10];
  if (v6) {
    [(CAMViewfinderViewController *)self _snapshotAndFadeDisappearingOverlayViewsForChangeToGraphConfiguration:v10];
  }
  double v19 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v87 = [(CAMViewfinderViewController *)self _previewViewController];
  [v87 willChangeToGraphConfiguration:v10];
  if (![(CAMViewfinderViewController *)self _trueVideoIsActive]) {
    [(CAMViewfinderViewController *)self _closeViewfinderForChangeFromMode:v14 toMode:v13 fromDevice:v90 toDevice:v91];
  }
  double v20 = v89;
  if (![(CAMViewfinderViewController *)self _trueVideoIsTransitioningToCapture])
  {
    double v21 = [(CAMViewfinderViewController *)self _modeDial];
    [v21 reloadData];
    [v21 setSelectedMode:v13 animated:v6];
  }
  double v22 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v23 = [v22 modeIndicator];
  [v23 setSelectedMode:v13 animated:v6];

  id v84 = v22;
  double v24 = [v22 modeSelector];
  [v24 setSelectedMode:v13];

  [(CAMViewfinderViewController *)self _updateVideoConfigurationStatusIndicatorForGraphConfiguration:v10 animated:v6];
  [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v10 isCapturing:0 animated:v6];
  [(CAMViewfinderViewController *)self _pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:v10 isShowingCameraRoll:[(CAMViewfinderViewController *)self _isShowingCameraRoll]];
  int64_t v25 = -[CAMViewfinderViewController _aspectRatioForMode:devicePosition:](self, "_aspectRatioForMode:devicePosition:", v13, [v10 devicePosition]);
  [v19 setDesiredAspectRatio:v25];
  if (v13) {
    BOOL v26 = v13 == 6;
  }
  else {
    BOOL v26 = 1;
  }
  int v28 = v26 && v14 == 4;
  if (v13 == 4 || v28) {
    [v19 setMaskingAspectRatio:v25 animated:v6];
  }
  int64_t v83 = v25;
  [(CAMViewfinderViewController *)self _hideControlsForGraphConfiguration:v10 animated:v6];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v10 animated:v6];
  [(CAMViewfinderViewController *)self _updateZoomControlLayoutForGraphConfiguration:v10 fromGraphConfiguration:v11 animated:v6];
  [(CAMViewfinderViewController *)self _updateLightingControlFadesForGraphConfiguration:v10 animated:v6];
  if (!-[CAMViewfinderViewController _isSpatialVideoMode:devicePosition:](self, "_isSpatialVideoMode:devicePosition:", [v10 mode], objc_msgSend(v10, "devicePosition")))-[CAMViewfinderViewController _updateSpatialCaptureUIStateForGraphConfiguration:animated:](self, "_updateSpatialCaptureUIStateForGraphConfiguration:animated:", v10, v6); {
  uint64_t v29 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  }
  BOOL v30 = -[CAMViewfinderViewController _shouldDisableModeForGraphConfiguration:callActive:](self, "_shouldDisableModeForGraphConfiguration:callActive:", v10, [v29 isCallActive]);

  if (v30) {
    [(CAMViewfinderViewController *)self _updateModeDisabledForCurrentStateAnimated:v6];
  }
  if ([(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:v10])
  {
    uint64_t v31 = [(CAMViewfinderViewController *)self _embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:v10];
    uint64_t v32 = v31;
    double v33 = 0.25;
    if (!v6) {
      double v33 = 0.0;
    }
    [v31 setVisible:1 animationDuration:0 completion:v33];
  }
  if ([v89 isLivePhotoSupported])
  {
    BOOL v35 = v13 == 4 && v14 == 0;
    int v37 = v14 == 4 && v13 == 0 || v35;
  }
  else
  {
    int v37 = 0;
  }
  id v88 = v19;
  BOOL v39 = v14 != v13 && (v13 == 6 || v14 == 6);
  BOOL v40 = [(CAMViewfinderViewController *)self _useCreativeCameraControls];
  BOOL v41 = v14 != 3 && v40;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __106__CAMViewfinderViewController__willChangeToGraphConfiguration_zoomFactor_fromGraphConfiguration_animated___block_invoke;
  aBlock[3] = &__block_descriptor_33_e19_v20__0__UIView_8B16l;
  BOOL v93 = v6;
  objc_super v86 = (void (**)(void *, void *, void))_Block_copy(aBlock);
  if (((v37 | v39) & 1) != 0 || v41)
  {
    BOOL v81 = v41;
    id v82 = v11;
    uint64_t v42 = [(CAMViewfinderViewController *)self _topBar];
    int64_t v43 = [v42 _expandedMenuButton];

    int v44 = [v42 _shouldExpandButtonsHorizontally];
    if (v43) {
      int v45 = v44;
    }
    else {
      int v45 = 0;
    }
    if ((v45 & 1) == 0
      && ![(CAMViewfinderViewController *)self _shouldHideLivePhotoButtonForGraphConfiguration:v10])
    {
      v86[2](v86, v85, 0);
    }
    if (([v89 isDepthEffectApertureSupported] & v39) == 1)
    {
      uint64_t v46 = [(CAMViewfinderViewController *)self _apertureButton];

      if (!v46)
      {
        [(CAMViewfinderViewController *)self _createApertureButtonIfNecessary];
        double v47 = (double)([(CAMViewfinderViewController *)self _shouldHideApertureButtonForGraphConfiguration:v82] ^ 1);
        uint64_t v48 = [(CAMViewfinderViewController *)self _apertureButton];
        [v48 setAlpha:v47];
      }
      BOOL v49 = [(CAMViewfinderViewController *)self _shouldHideApertureButtonForGraphConfiguration:v10];
      uint64_t v50 = [(CAMViewfinderViewController *)self _apertureButton];
      v86[2](v86, v50, v49);

      [(CAMViewfinderViewController *)self _resetPortraitModeApertureValueIfNeededForGraphConfiguration:v10 zoomFactor:a4];
      [(CAMViewfinderViewController *)self _updatePortraitApertureSliderForGraphConfiguration:v10 zoomFactor:a4];
      [(CAMViewfinderViewController *)self _updatePortraitApertureButtonForGraphConfiguration:v10 zoomFactor:0 animated:a4];
      double v20 = v89;
    }
    uint64_t v51 = v45 ^ 1u;
    char v52 = [v20 isPortraitEffectIntensitySupportedForMode:v13];
    int v53 = [v20 isPortraitEffectIntensitySupportedForMode:v14];
    int64_t v54 = [(CAMViewfinderViewController *)self _sanitizedLightingTypeForMode:v13 device:v91];
    if (((v52 & 1) != 0 || v53)
      && ([v89 isPortraitEffectIntensitySupportedForLightingType:v54] & v39) == 1)
    {
      [(CAMViewfinderViewController *)self _createIntensityButtonIfNecessary];
      BOOL v55 = [(CAMViewfinderViewController *)self _shouldHideIntensityButtonForGraphConfiguration:v10];
      double v56 = [(CAMViewfinderViewController *)self _intensityButton];
      v86[2](v86, v56, v55);
    }
    if (v81)
    {
      [(CAMViewfinderViewController *)self _createModeSpecificControlsForConfiguration:v10];
      [(CAMViewfinderViewController *)self _hideControlsForGraphConfiguration:v10 animated:0];
      [(CAMViewfinderViewController *)self _showControlsForGraphConfiguration:v10 animated:v6];
    }
    [v42 configureForMode:v13 animated:v51];

    id v11 = v82;
    double v20 = v89;
  }
  BOOL v57 = [(CAMViewfinderViewController *)self _shouldResetZoomForChangeFromMode:v14 toMode:v13];
  BOOL v58 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
  BOOL v59 = v58;
  if (v57 || v58)
  {
    if (+[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]])
    {
      v86[2](v86, self->__zoomSlider, 1);
    }
    if (![(CAMViewfinderViewController *)self _isReconfiguringForZoomChange] && !v59)
    {
      if (v6) {
        uint64_t v60 = 2;
      }
      else {
        uint64_t v60 = 0;
      }
      [(CAMZoomControl *)self->__zoomControl setShouldShowZoomDial:0 animationDuration:v60];
    }
    [(CAMViewfinderViewController *)self _setCachedVideoZoomFactor:a4];
    [(CAMViewfinderViewController *)self _configureZoomControlForGraphConfiguration:v10 animated:v6];
    double v61 = [(CAMViewfinderViewController *)self _zoomSlider];

    if (v61)
    {
      [(CAMViewfinderViewController *)self _zoomSliderValueForZoomFactor:a4];
      double v63 = v62;
      double v64 = [(CAMViewfinderViewController *)self _zoomSlider];
      *(float *)&double v65 = v63;
      [v64 setValue:v6 animated:v65];
    }
    if (!v59) {
      [(CAMViewfinderViewController *)self _setLastZoomInteractionType:0];
    }
  }
  [(CAMViewfinderViewController *)self _updateBarBackgroundStyleForMode:v13 capturing:0 animated:v6];
  BOOL v66 = [(CAMViewfinderViewController *)self _shouldApplyTopBarRotationForGraphConfiguration:v11];
  if (v66 != [(CAMViewfinderViewController *)self _shouldApplyTopBarRotationForGraphConfiguration:v10])[(CAMViewfinderViewController *)self _prepareTopBarForOrientationChangeDuringConfiguration]; {
  objc_msgSend(v88, "setAutomaticallyAdjustsTopBarOrientation:", -[CAMViewfinderViewController _shouldRotateTopBarForGraphConfiguration:](self, "_shouldRotateTopBarForGraphConfiguration:", v10));
  }
  if (v14 != v13) {
    [(CAMViewfinderViewController *)self _hideUtilityBarAnimated:1];
  }
  if ((unint64_t)(v90 - 1) > 0xA) {
    uint64_t v67 = 0;
  }
  else {
    uint64_t v67 = qword_209C794E8[v90 - 1];
  }
  BOOL v68 = [(CAMViewfinderViewController *)self _wantsLightingControlForMode:v14 devicePosition:v67];
  if ((unint64_t)(v91 - 1) > 0xA) {
    uint64_t v69 = 0;
  }
  else {
    uint64_t v69 = qword_209C794E8[v91 - 1];
  }
  if ((v68 & [(CAMViewfinderViewController *)self _wantsLightingControlForMode:v13 devicePosition:v69]) == 1)
  {
    int64_t v70 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", [v11 mode], objc_msgSend(v11, "device"));
    int64_t v71 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", [v10 mode], objc_msgSend(v10, "device"));
    if (v71 != v70)
    {
      [(CAMViewfinderViewController *)self _setLightingType:v71 forMode:6];
      [(CAMViewfinderViewController *)self _updateControlDrawerContentsVisibilityAnimated:1];
    }
    [(CAMViewfinderViewController *)self _updateLightingUIForGraphConfiguration:v10 animated:1];
  }
  -[CAMViewfinderViewController _exposureBiasForMode:trueVideoEnabled:](self, "_exposureBiasForMode:trueVideoEnabled:", v13, [v10 trueVideoEnabled]);
  *(float *)&double v72 = v72;
  [v87 setBaselineExposureBias:v72];
  [(CAMViewfinderViewController *)self _setWantsVisualTextAnalysis:0 animated:v6];
  double v73 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v74 = [v73 controlDrawer];
  [v74 setExpanded:0 forControlType:10 animated:1 updatePreferredDrawerControl:0];

  id v75 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v76 = [v75 controlDrawer];
  [v76 setExpanded:0 forControlType:11 animated:1 updatePreferredDrawerControl:0];

  [(CAMViewfinderViewController *)self _setImageAnalyzer:0];
  id v77 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  id v78 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
  [v77 countEventsFromAnalyticsVisionSession:v78];

  id v79 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
  [v79 publish];

  [(CAMViewfinderViewController *)self _setVisionAnalyticsSession:0];
  if ((v14 != v13 || v91 != v90) && self->_configurationDelegateFlags.respondsToWillBeginConfiguration)
  {
    id v80 = [(CAMViewfinderViewController *)self configurationDelegate];
    [v80 cameraViewControllerWillBeginConfigurationForCaptureMode:v13 captureDevice:v91];
  }
  if ([(CAMViewfinderViewController *)self _trueVideoIsTransitioningToCapture]) {
    [v84 setViewportAspectRatio:v83 animated:1];
  }
  [(CAMViewfinderViewController *)self _startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:v10];
  [(CAMViewfinderViewController *)self _updateTransientLightingBadgeVisibilityAnimated:1];
}

void __106__CAMViewfinderViewController__willChangeToGraphConfiguration_zoomFactor_fromGraphConfiguration_animated___block_invoke(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  if (*(unsigned char *)(a1 + 32)) {
    double v6 = 0.25;
  }
  else {
    double v6 = 0.0;
  }
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = __106__CAMViewfinderViewController__willChangeToGraphConfiguration_zoomFactor_fromGraphConfiguration_animated___block_invoke_2;
  v8[3] = &unk_263FA02A8;
  id v9 = v5;
  char v10 = a3;
  id v7 = v5;
  +[CAMView animateIfNeededWithDuration:v8 animations:v6];
}

uint64_t __106__CAMViewfinderViewController__willChangeToGraphConfiguration_zoomFactor_fromGraphConfiguration_animated___block_invoke_2(uint64_t a1)
{
  double v1 = 0.0;
  if (!*(unsigned char *)(a1 + 40)) {
    double v1 = 1.0;
  }
  return [*(id *)(a1 + 32) setAlpha:v1];
}

- (void)_closeViewfinderForChangeFromMode:(int64_t)a3 toMode:(int64_t)a4 fromDevice:(int64_t)a5 toDevice:(int64_t)a6
{
  if ((unint64_t)(a5 - 1) > 0xA) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = qword_209C794E8[a5 - 1];
  }
  if ((unint64_t)(a6 - 1) > 0xA) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = qword_209C794E8[a6 - 1];
  }
  BOOL v9 = a3 != a4 || v6 == v7;
  id v10 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v10 addClosedViewfinderReason:v9];
}

- (void)_updateDepthEffectApertureForGraphConfiguration:(id)a3 fromGraphConfiguration:(id)a4 zoomFactor:(double)a5
{
  id v30 = a3;
  id v8 = a4;
  BOOL v9 = +[CAMCaptureCapabilities capabilities];
  uint64_t v10 = [v30 device];
  uint64_t v11 = [v30 devicePosition];
  uint64_t v12 = [v30 mode];
  if ([v9 isDepthEffectApertureSupportedForMode:v12 devicePosition:v11])
  {
    [(CAMViewfinderViewController *)self _portraitModeApertureValue];
    double v14 = v13;
    [(CAMViewfinderViewController *)self _lastDefaultApertureValue];
    double v16 = v15;
    [v9 defaultDepthEffectApertureForMode:v12 device:v10 zoomFactor:a5];
    double v18 = v17;
    -[CAMViewfinderViewController _setLastDefaultApertureValue:](self, "_setLastDefaultApertureValue:");
    double v19 = +[CAMUserPreferences preferences];
    char v20 = objc_msgSend(v9, "isDepthEffectApertureSupportedForMode:devicePosition:", objc_msgSend(v8, "mode"), objc_msgSend(v8, "devicePosition"));
    if (([v19 preserveAperture] & 1) == 0)
    {
      char v21 = vabdd_f64(v16, v14) >= 0.0001 ? v20 : 0;
      if ((v21 & 1) == 0) {
        [(CAMViewfinderViewController *)self _setPortraitModeApertureValue:v18];
      }
    }
    [(CAMViewfinderViewController *)self _resetPortraitModeApertureValueIfNeededForGraphConfiguration:v30 zoomFactor:a5];
    [(CAMViewfinderViewController *)self _portraitModeApertureValue];
    double v23 = v22;
    [v9 minimumDepthEffectApertureForMode:v12 device:v10];
    double v25 = v24;
    [v9 maximumDepthEffectApertureForMode:v12 device:v10];
    if (v25 >= v23) {
      double v27 = v25;
    }
    else {
      double v27 = v23;
    }
    if (v26 >= v27) {
      double v28 = v27;
    }
    else {
      double v28 = v26;
    }
    uint64_t v29 = [(CAMViewfinderViewController *)self _captureController];
    [v29 changeToPortraitAperture:v28];

    [(CAMViewfinderViewController *)self _updatePortraitApertureSliderForGraphConfiguration:v30 zoomFactor:a5];
    [(CAMViewfinderViewController *)self _updatePortraitApertureButtonForGraphConfiguration:v30 zoomFactor:0 animated:a5];
  }
}

- (void)_prepareDeferredProcessingIfNeeded
{
  id v5 = +[CAMCaptureCapabilities capabilities];
  if (objc_msgSend(v5, "isDeferredProcessingSupportedForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")))
  {
    unint64_t v3 = [(CAMViewfinderViewController *)self _stillImageCaptureRequestWithCurrentSettingsAsBurst:0 maximumLength:0];
    id v4 = [(CAMViewfinderViewController *)self _captureController];
    [v4 prepareDeferredProcessingWithStillImageRequest:v3];
  }
}

- (void)_updateInterfaceModulationForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v6 = [a3 colorSpace] == 2;
  id v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v7 setInterfaceModulation:v6 animated:v4];
}

- (void)captureController:(id)a3 didOutputFaceResults:(id)a4 headResults:(id)a5 bodyResults:(id)a6 salientObjectResults:(id)a7
{
  id v12 = a7;
  id v13 = a6;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  double v17 = [(CAMViewfinderViewController *)self _previewViewController];
  [v17 captureController:v16 didOutputFaceResults:v15 headResults:v14 bodyResults:v13 salientObjectResults:v12];

  id v20 = [v15 firstObject];
  [(CAMViewfinderViewController *)self _updateCaptureTimerIndicatorWithFaceResult:v20];
  uint64_t v18 = [v15 count];
  double v19 = [(CAMViewfinderViewController *)self _targetPortraitModeInstructionLabel];
  [v19 setNumberOfPeopleFound:v18];

  [(CAMViewfinderViewController *)self _updateObjectResults:v15 headResults:v14 bodyResults:v13];
}

- (void)_updateCaptureTimerIndicatorWithFaceResult:(id)a3
{
  id v16 = a3;
  BOOL v4 = [MEMORY[0x263EFF910] date];
  id v5 = [(CAMViewfinderViewController *)self _lastTimerIndicatorFaceUpdateDate];
  [v4 timeIntervalSinceDate:v5];
  if (v6 >= 1.5)
  {
    [v16 bounds];
    CGFloat x = v18.origin.x;
    CGFloat y = v18.origin.y;
    CGFloat width = v18.size.width;
    CGFloat height = v18.size.height;
    CGRectGetMaxX(v18);
    v19.origin.CGFloat x = x;
    v19.origin.CGFloat y = y;
    v19.size.CGFloat width = width;
    v19.size.CGFloat height = height;
    CGRectGetMaxY(v19);
    UIDistanceBetweenPoints();
    if (v11 <= 0.35 || v16 == 0) {
      uint64_t v13 = 2;
    }
    else {
      uint64_t v13 = 0;
    }
    id v14 = [(CAMViewfinderViewController *)self _timerIndicatorView];
    if (!v14)
    {
      id v15 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      id v14 = [v15 timerIndicator];
    }
    if (v13 != [v14 style])
    {
      objc_msgSend(v14, "setStyle:animated:", v13, -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"));
      [(CAMViewfinderViewController *)self _setLastTimerIndicatorFaceUpdateDate:v4];
    }
  }
}

- (void)_updateObjectResults:(id)a3 headResults:(id)a4 bodyResults:(id)a5
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  id v7 = a3;
  id v8 = a4;
  id v9 = a5;
  id v10 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id v11 = v7;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v70 objects:v77 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v71;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v71 != v14) {
          objc_enumerationMutation(v11);
        }
        id v16 = [*(id *)(*((void *)&v70 + 1) + 8 * i) underlyingMetadataObject];
        [v10 addObject:v16];
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v70 objects:v77 count:16];
    }
    while (v13);
  }

  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id v17 = v8;
  uint64_t v18 = [v17 countByEnumeratingWithState:&v66 objects:v76 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v67;
    do
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v67 != v20) {
          objc_enumerationMutation(v17);
        }
        double v22 = [*(id *)(*((void *)&v66 + 1) + 8 * j) underlyingMetadataObject];
        [v10 addObject:v22];
      }
      uint64_t v19 = [v17 countByEnumeratingWithState:&v66 objects:v76 count:16];
    }
    while (v19);
  }

  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v23 = v9;
  uint64_t v24 = [v23 countByEnumeratingWithState:&v62 objects:v75 count:16];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)v63;
    do
    {
      for (uint64_t k = 0; k != v25; ++k)
      {
        if (*(void *)v63 != v26) {
          objc_enumerationMutation(v23);
        }
        double v28 = [*(id *)(*((void *)&v62 + 1) + 8 * k) underlyingMetadataObject];
        [v10 addObject:v28];
      }
      uint64_t v25 = [v23 countByEnumeratingWithState:&v62 objects:v75 count:16];
    }
    while (v25);
  }
  char v52 = v17;
  int v53 = v11;
  uint64_t v51 = v23;

  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v29 = v10;
  uint64_t v30 = [v29 countByEnumeratingWithState:&v58 objects:v74 count:16];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v55 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    BOOL v57 = 0;
    id v34 = 0;
    id v35 = 0;
    uint64_t v36 = *(void *)v59;
    while (1)
    {
      for (uint64_t m = 0; m != v31; ++m)
      {
        if (*(void *)v59 != v36) {
          objc_enumerationMutation(v29);
        }
        char v38 = *(void **)(*((void *)&v58 + 1) + 8 * m);
        uint64_t v39 = [v38 groupID];
        if ([v38 isHumanFace])
        {
          if (v39 >= 1)
          {
            if (!v35) {
              id v35 = objc_alloc_init(MEMORY[0x263EFF9C0]);
            }
            BOOL v40 = [NSNumber numberWithInteger:v39];
            BOOL v41 = v35;
LABEL_37:
            [v41 addObject:v40];

            continue;
          }
          ++v33;
        }
        else if ([v38 isCat])
        {
          if (v39 >= 1)
          {
            if (!v34) {
              id v34 = objc_alloc_init(MEMORY[0x263EFF9C0]);
            }
            BOOL v40 = [NSNumber numberWithInteger:v39];
            BOOL v41 = v34;
            goto LABEL_37;
          }
          ++v32;
        }
        else if ([v38 isDog])
        {
          if (v39 < 1)
          {
            ++v55;
          }
          else
          {
            id v56 = v35;
            id v42 = v29;
            uint64_t v43 = v33;
            uint64_t v44 = v32;
            id v45 = v34;
            id v46 = v57;
            if (!v57) {
              id v46 = objc_alloc_init(MEMORY[0x263EFF9C0]);
            }
            double v47 = [NSNumber numberWithInteger:v39];
            BOOL v57 = v46;
            [v46 addObject:v47];

            id v34 = v45;
            uint64_t v32 = v44;
            uint64_t v33 = v43;
            id v29 = v42;
            id v35 = v56;
          }
        }
      }
      uint64_t v31 = [v29 countByEnumeratingWithState:&v58 objects:v74 count:16];
      if (!v31) {
        goto LABEL_50;
      }
    }
  }
  uint64_t v55 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  BOOL v57 = 0;
  id v34 = 0;
  id v35 = 0;
LABEL_50:

  uint64_t v48 = [v35 count] + v33;
  uint64_t v49 = [v34 count] + v32;
  uint64_t v50 = [v57 count] + v55;
  [(CAMViewfinderViewController *)self set_faceCount:v48];
  [(CAMViewfinderViewController *)self set_catCount:v49];
  [(CAMViewfinderViewController *)self set_dogCount:v50];
}

- (void)_resetObjectResults
{
  [(CAMViewfinderViewController *)self set_faceCount:0];
  [(CAMViewfinderViewController *)self set_catCount:0];
  [(CAMViewfinderViewController *)self set_dogCount:0];
}

- (void)captureController:(id)a3 didOutputTextRegionResults:(id)a4
{
  [(CAMViewfinderViewController *)self _setCachedTextRegionResults:a4];
  [(CAMViewfinderViewController *)self _processTextRegionResults];
}

- (void)_processTextRegionResults
{
  if ([(CAMViewfinderViewController *)self _shouldProcessTextRegions])
  {
    unint64_t v3 = [(CAMViewfinderViewController *)self _cachedTextRegionResults];
    id v7 = [(CAMViewfinderViewController *)self _filteredTextResults:v3];
  }
  else
  {
    id v7 = (id)MEMORY[0x263EFFA68];
  }
  BOOL v4 = [(CAMViewfinderViewController *)self _previewViewController];
  id v5 = [v4 cachedTextRegionResults];

  if ([v7 count] || objc_msgSend(v5, "count"))
  {
    double v6 = [(CAMViewfinderViewController *)self _previewViewController];
    [v6 setCachedTextRegionResults:v7];

    [(CAMViewfinderViewController *)self _updateProminentObjectManagerWithCachedMetadataResults];
  }
}

- (void)documentScanFlowControllerDidFinish:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
  [v4 countDocumentScanningCompletedScans];

  [(CAMViewfinderViewController *)self dismissViewControllerAnimated:1 completion:0];
  [(CAMViewfinderViewController *)self resumeCameraSessionWithCompletion:0];
}

- (void)documentScanFlowControllerDidCancel:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
  [v4 countDocumentScanningCanceledScans];

  [(CAMViewfinderViewController *)self dismissViewControllerAnimated:1 completion:0];
  [(CAMViewfinderViewController *)self resumeCameraSessionWithCompletion:0];
}

- (void)documentScanFlowControllerDidFail:(id)a3 withError:(id)a4
{
  [(CAMViewfinderViewController *)self dismissViewControllerAnimated:1 completion:0];
  [(CAMViewfinderViewController *)self resumeCameraSessionWithCompletion:0];
}

- (void)captureController:(id)a3 didChangeDocumentSceneConfidenceResults:(float)a4
{
  double v6 = +[CAMCaptureCapabilities capabilities];
  [v6 documentScanningMinimumConfidenceLevel];
  float v8 = v7;

  [(CAMViewfinderViewController *)self _setDocumentInScene:v8 <= a4];
  [(CAMViewfinderViewController *)self _updateDocumentScanningButtonIfNeeded];
}

- (id)_filteredTextResults:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a3;
  BOOL v4 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithCapacity:", objc_msgSend(v3, "count"));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v19 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        id v11 = objc_msgSend(v10, "underlyingMetadataObject", (void)v18);
        [v11 bounds];
        double v13 = v12;
        double v15 = v14;

        double v16 = v15 * 3.0 * 0.25;
        if (fmin(v13, v16) >= 0.03 && v13 * v16 >= 0.0025) {
          [v4 addObject:v10];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v7);
  }

  return v4;
}

- (BOOL)_shouldProcessTextRegions
{
  if (![(CAMViewfinderViewController *)self _shouldProcessMachineReadableMetadata])return 0; {
  id v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  }
  BOOL v4 = [(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v3];
  BOOL v5 = [(CAMViewfinderViewController *)self _wantsLightingControlForGraphConfiguration:v3];
  int64_t v6 = [(CAMViewfinderViewController *)self _zoomControlLayoutPositionForGraphConfiguration:v3];
  int64_t v7 = [(CAMViewfinderViewController *)self _lightingControlLayoutPositionForGraphConfiguration:v3];
  BOOL v8 = v6 == 2 && v4;
  BOOL v9 = v7 == 2 && v5;
  BOOL v10 = !v8 && !v9;

  return v10;
}

- (BOOL)_shouldProcessMachineReadableMetadata
{
  id v3 = [(CAMViewfinderViewController *)self _captureController];
  char v4 = [v3 isCapturingBurst];
  int v5 = [v3 isCapturingVideo];
  if ([(CAMViewfinderViewController *)self _wantsVisualTextAnalysis])
  {
    int64_t v6 = [(CAMViewfinderViewController *)self _textInteractionInsert];
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  BOOL v8 = [(CAMViewfinderViewController *)self _descriptionOverlayViewByMode];
  BOOL v9 = objc_msgSend(NSNumber, "numberWithInteger:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
  BOOL v10 = [v8 objectForKeyedSubscript:v9];

  id v11 = +[CAMCaptureCapabilities capabilities];
  int v12 = [v11 imageAnalysisShowsInactiveTextRegions];

  double v13 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v14 = [v13 isSemanticStyleControlVisible];

  double v15 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v16 = [v15 isSmartStylePickerVisible];

  if (v4)
  {
    char v17 = 0;
  }
  else
  {
    char v17 = 0;
    if (((v5 & (v12 ^ 1) | v7) & 1) == 0 && !v10) {
      char v17 = (v14 | v16) ^ 1;
    }
  }

  return v17;
}

- (void)_resetMachineReadableMetadataAndProcessing
{
  id v4 = [(CAMViewfinderViewController *)self _previewViewController];
  [v4 setCachedSignificantMRCResult:0];
  [v4 setCachedMRCResults:0];
  [v4 setCachedTextRegionResults:0];
  [v4 setCachedSignificantTextRegionResult:0];
  [(CAMViewfinderViewController *)self _setLastMRCResultsCount:0];
  [(CAMViewfinderViewController *)self _setCachedQRCodeResults:0];
  [(CAMViewfinderViewController *)self _setCachedTextRegionResults:0];
  [(CAMViewfinderViewController *)self _setCachedAppClipCodeResults:0];
  [(CAMViewfinderViewController *)self _setBarcodeParsingSession:0];
  id v3 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  [v3 reset];
}

- (id)_textInteractionInsert
{
  id v3 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v4 = [v3 textInteractionInsert];
  int v5 = v4;
  if (v4)
  {
    id v6 = v4;
  }
  else
  {
    BOOL v7 = [(CAMViewfinderViewController *)self viewfinderView];
    id v6 = [v7 textInteractionInsert];
  }
  return v6;
}

- (id)_imageAnalysisButton
{
  id v3 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v4 = [v3 imageAnalysisButton];
  int v5 = v4;
  if (v4)
  {
    id v6 = v4;
  }
  else
  {
    BOOL v7 = [(CAMViewfinderViewController *)self _bottomBar];
    id v6 = [v7 imageAnalysisButton];
  }
  return v6;
}

- (id)_imageAnalysisInstructionLabel
{
  id v3 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v4 = [v3 imageAnalysisInstructionLabel];
  int v5 = v4;
  if (v4)
  {
    id v6 = v4;
  }
  else
  {
    BOOL v7 = [(CAMViewfinderViewController *)self viewfinderView];
    id v6 = [v7 imageAnalysisInstructionLabel];
  }
  return v6;
}

- (void)_createImageAnalysisInstructionLabelIfNeeded
{
  if ([(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    id v4 = objc_alloc_init(CAMImageAnalysisInstructionLabel);
    id v3 = [(CAMViewfinderViewController *)self viewfinderView];
    [v3 setImageAnalysisInstructionLabel:v4];

    [(CAMImageAnalysisInstructionLabel *)v4 setAlpha:0.0];
  }
}

- (void)_createImageAnalysisButtonIfNeeded
{
  id v3 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v4 = [(CAMViewfinderViewController *)self _imageAnalysisButton];

  if (!v4)
  {
    int v5 = objc_alloc_init(CAMImageAnalysisButton);
    [(CAMImageAnalysisButton *)v5 setShowsMenuAsPrimaryAction:1];
    [(VKImageAnalysisButton *)v5 setPrefersDarkGlyphWhenSelected:1];
    [(CAMImageAnalysisButton *)v5 setAdjustsImageWhenHighlighted:0];
    [(CAMImageAnalysisButton *)v5 setAdjustsImageWhenDisabled:0];
    id v6 = [MEMORY[0x263F825C8] systemYellowColor];
    [(CAMImageAnalysisButton *)v5 setTintColor:v6];

    [(CAMImageAnalysisButton *)v5 setDelegate:self];
    if (v3)
    {
      [v3 setImageAnalysisButton:v5];
    }
    else
    {
      BOOL v7 = [(CAMViewfinderViewController *)self _bottomBar];
      [v7 setImageAnalysisButton:v5];
    }
    +[CAMAnimationHelper highlightScaleForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]];
    double v9 = v8;
    BOOL v10 = +[CAMAnimationHelper highlightTransformAnimation];
    [(VKImageAnalysisButton *)v5 setHighlightedGlyphScaleFactor:v10 animation:v9];
    [(CAMImageAnalysisButton *)v5 addTarget:self action:sel__handleImageAnalysisButtonTapped_ forControlEvents:64];
    id v11 = [(CAMViewfinderViewController *)self _prominentObjectManager];
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    v13[2] = __65__CAMViewfinderViewController__createImageAnalysisButtonIfNeeded__block_invoke;
    v13[3] = &unk_263FA1DA8;
    id v14 = v11;
    id v12 = v11;
    [(CAMImageAnalysisButton *)v5 _setMenuProvider:v13];
    [(CAMViewfinderViewController *)self _updateImageAnalysisButton];
  }
}

id __65__CAMViewfinderViewController__createImageAnalysisButtonIfNeeded__block_invoke(uint64_t a1)
{
  double v1 = [*(id *)(a1 + 32) currentMachineReadableCodeAction];
  id v2 = [v1 menuElements];
  if (v2)
  {
    id v3 = (void *)MEMORY[0x263F82940];
    id v4 = [v1 contentPreviewString];
    int v5 = [v3 menuWithTitle:v4 children:v2];
  }
  else
  {
    int v5 = 0;
  }

  return v5;
}

- (void)_handleImageAnalysisButtonTapped:(id)a3
{
  if ([(CAMViewfinderViewController *)self _wantsVisualTextAnalysis])
  {
    id v11 = 0;
    uint64_t v4 = 0;
    goto LABEL_11;
  }
  int v5 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  unint64_t v6 = [v5 currentObjectType];
  BOOL v7 = [v5 currentMachineReadableCodeAction];
  double v8 = v7;
  if (v6 >= 2)
  {
    if (v6 != 2 || [v7 menuElementsCount] != 1)
    {
      id v11 = 0;
      uint64_t v4 = 0;
      goto LABEL_10;
    }
    id v11 = v8;
    double v9 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
    BOOL v10 = [v5 currentObject];
    [v9 countButtonPressForMRC:v10 action:v11];

    uint64_t v4 = 0;
  }
  else
  {
    double v9 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
    [v9 countTextButtonPress];
    id v11 = 0;
    uint64_t v4 = 1;
  }

LABEL_10:
LABEL_11:
  [(CAMViewfinderViewController *)self _setWantsVisualTextAnalysis:v4 animated:1];
  [v11 performActionWithCompletion:&__block_literal_global_11];
}

void __64__CAMViewfinderViewController__handleImageAnalysisButtonTapped___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __64__CAMViewfinderViewController__handleImageAnalysisButtonTapped___block_invoke_cold_1();
    }
  }
}

- (void)_setWantsVisualTextAnalysis:(BOOL)a3
{
}

- (void)_setWantsVisualTextAnalysis:(BOOL)a3 animated:(BOOL)a4
{
  if (self->__wantsVisualTextAnalysis != a3)
  {
    BOOL v4 = a4;
    BOOL v5 = a3;
    self->__wantsVisualTextAnalysis = a3;
    BOOL v7 = [(CAMViewfinderViewController *)self _motionController];
    uint64_t v8 = [v7 captureOrientation];

    unint64_t v9 = [(CAMViewfinderViewController *)self _supportedInterfaceOrientationsForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle] wantsTextAnalysis:0];
    BOOL v10 = [(CAMViewfinderViewController *)self view];
    id v11 = [v10 window];

    int v12 = [v11 _windowOwnsInterfaceOrientation];
    if (!v5)
    {
      [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureTextAnalysisIdentifier:0];
      [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureTextAnalysisStartDate:0];
      [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureTextAnalysisEndDate:0];
      [(CAMViewfinderViewController *)self _setCurrentTextAnalysisDetectionEndDate:0];
      uint64_t v24 = [(CAMViewfinderViewController *)self _imageAnalyzer];
      [v24 cancelAllRequests];

      uint64_t v25 = [(CAMViewfinderViewController *)self _textInteractionInsert];
      uint64_t v26 = [v25 imageInteraction];
      char v17 = [v26 feedbackGestureRecognizer];

      double v27 = [(CAMViewfinderViewController *)self view];
      [v27 removeGestureRecognizer:v17];

      [(CAMViewfinderViewController *)self _resetMachineReadableMetadataAndProcessing];
      [(CAMViewfinderViewController *)self _updateTextAnalysisWithInsert:0 instructions:0 animated:v4];
      [(CAMViewfinderViewController *)self _updateImageAnalysisButton];
      if (v9 == 2)
      {
        if (v12)
        {
          [v11 _setRotatableViewOrientation:1 updateStatusBar:1 duration:1 force:0.0];
        }
        else
        {
          v31[0] = MEMORY[0x263EF8330];
          v31[1] = 3221225472;
          v31[2] = __68__CAMViewfinderViewController__setWantsVisualTextAnalysis_animated___block_invoke_510;
          v31[3] = &unk_263FA0208;
          void v31[4] = self;
          [MEMORY[0x263F82E00] performWithoutAnimation:v31];
        }
        [(CAMViewfinderViewController *)self setNeedsUpdateOfHomeIndicatorAutoHidden];
      }
      goto LABEL_24;
    }
    double v13 = [(CAMViewfinderViewController *)self _prominentObjectManager];
    uint64_t v14 = [v13 currentObjectType];

    if (v14 == 1
      || (+[CAMCaptureCapabilities capabilities],
          double v15 = objc_claimAutoreleasedReturnValue(),
          int v16 = [v15 isImageAnalysisButtonAlwaysVisible],
          v15,
          v16))
    {
      char v17 = [(CAMViewfinderViewController *)self _stillImageCaptureRequestForTextAnalysis];
      long long v18 = [(CAMViewfinderViewController *)self _captureController];
      id v33 = 0;
      int v19 = [v18 captureStillImageWithRequest:v17 error:&v33];
      long long v20 = (__CFString *)v33;

      if (v19)
      {
        long long v21 = [MEMORY[0x263EFF910] now];
        [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureTextAnalysisStartDate:v21];

        double v22 = [v17 textAnalysisIdentifier];
        [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureTextAnalysisIdentifier:v22];

        if (v9 == 2)
        {
          if ((unint64_t)(v8 - 3) < 2) {
            int v23 = v12;
          }
          else {
            int v23 = 0;
          }
          if (v23 == 1)
          {
            [v11 _setRotatableViewOrientation:v8 updateStatusBar:1 duration:1 force:0.0];
          }
          else if ((v12 & 1) == 0)
          {
            v32[0] = MEMORY[0x263EF8330];
            v32[1] = 3221225472;
            v32[2] = __68__CAMViewfinderViewController__setWantsVisualTextAnalysis_animated___block_invoke;
            v32[3] = &unk_263FA0208;
            v32[4] = self;
            [MEMORY[0x263F82E00] performWithoutAnimation:v32];
          }
        }
LABEL_21:

LABEL_24:
        [(CAMViewfinderViewController *)self _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:0];

        return;
      }
    }
    else
    {
      long long v20 = 0;
      char v17 = 0;
    }
    double v28 = @"no prominent text region";
    if (v14 == 1) {
      double v28 = v20;
    }
    id v29 = v28;
    uint64_t v30 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController _setWantsVisualTextAnalysis:animated:]();
    }

    [(CAMViewfinderViewController *)self _setWantsVisualTextAnalysis:0];
    goto LABEL_21;
  }
}

uint64_t __68__CAMViewfinderViewController__setWantsVisualTextAnalysis_animated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setNeedsUpdateOfSupportedInterfaceOrientations];
}

uint64_t __68__CAMViewfinderViewController__setWantsVisualTextAnalysis_animated___block_invoke_510(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setNeedsUpdateOfSupportedInterfaceOrientations];
}

- (void)_handleTextAnalysisStillImageResponse:(id)a3 error:(id)a4 forRequest:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = [MEMORY[0x263EFF910] now];
  if ([(CAMViewfinderViewController *)self _wantsVisualTextAnalysis])
  {
    int v12 = [v10 textAnalysisIdentifier];
    double v13 = [(CAMViewfinderViewController *)self _currentStillImageCaptureTextAnalysisIdentifier];
    int v14 = [v12 isEqualToString:v13];

    if (v14)
    {
      double v15 = [v8 textAnalysisImage];
      if (v15)
      {
        [(CAMViewfinderViewController *)self _setCurrentStillImageCaptureTextAnalysisEndDate:v11];
        id v16 = [(CAMViewfinderViewController *)self _imageAnalyzer];
        if (!v16)
        {
          id v16 = objc_alloc_init(MEMORY[0x263F84810]);
          [(CAMViewfinderViewController *)self _setImageAnalyzer:v16];
        }
        char v17 = [v10 textAnalysisRegion];
        [v17 bounds];
        [v10 captureOrientation];
        _UIWindowConvertRectFromOrientationToOrientation();
        if (CGRectIsEmpty(v24))
        {
          long long v18 = +[CAMCaptureCapabilities capabilities];
          [v18 isImageAnalysisButtonAlwaysVisible];
        }
        [v15 size];
        CEKExpandNormalizedRect();
        int v19 = objc_msgSend(MEMORY[0x263F84858], "quadFromCGRect:");
        [v17 baselineAngle];
        long long v21 = [v19 quadFromRotatingAroundCentroidWithAngle:-v20];
        double v22 = (void *)[objc_alloc(MEMORY[0x263F84808]) initWithImage:v15 focusQuad:v21 delegate:self];
        [v16 processRequest:v22];
      }
      else
      {
        int v23 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          -[CAMViewfinderViewController _handleTextAnalysisStillImageResponse:error:forRequest:]();
        }

        [(CAMViewfinderViewController *)self _setWantsVisualTextAnalysis:0];
      }
    }
  }
}

- (void)_updateTextAnalysisWithInsert:(id)a3 instructions:(BOOL)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v8 = a3;
  [(CAMViewfinderViewController *)self _setWantsVisualTextSelectionInstructions:v6];
  if (v6)
  {
    id v9 = [(CAMViewfinderViewController *)self _timerCache];
    [v9 cancelTimerForKey:&unk_26BDDDD70];

    [(CAMViewfinderViewController *)self _createImageAnalysisInstructionLabelIfNeeded];
  }
  [(CAMViewfinderViewController *)self _updateImageAnalysisButton];
  [(CAMViewfinderViewController *)self _updateImageAnalysisInstructions];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v5];
  id v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v11 = [(CAMViewfinderViewController *)self viewfinderView];
  if (v8)
  {
    int v12 = [(CAMViewfinderViewController *)self _textInteractionBackground];
    if (!v12)
    {
      double v13 = [(CAMViewfinderViewController *)self _imageAnalysisButton];
      int v12 = objc_alloc_init(CAMCounterRotatingView);
      int v14 = [MEMORY[0x263F825C8] colorWithWhite:0.0 alpha:0.5];
      [(CAMCounterRotatingView *)v12 setBackgroundColor:v14];

      [(CAMCounterRotatingView *)v12 setAlpha:0.0];
      [(CAMViewfinderViewController *)self _setTextInteractionBackground:v12];
      if (v10)
      {
        double v15 = [v13 superview];
        [v15 insertSubview:v12 belowSubview:v13];
      }
      else
      {
        double v15 = [(CAMViewfinderViewController *)self _bottomBar];
        [v15 setImageAnalysisButtonBackgroundOverlay:v12];
      }

      long long v18 = (void *)[objc_alloc(MEMORY[0x263F82CB0]) initWithTarget:self action:sel__handleDismissLiftedTextGestureRecognizer_];
      [(CAMCounterRotatingView *)v12 addGestureRecognizer:v18];
    }
    [v10 setTextInteractionInsert:v8];
    [v11 setTextInteractionInsert:v8];
    [v8 setDelegate:self];
    if (v5)
    {
      [v8 performLiftAnimation];
    }
    else
    {
      int v19 = (void *)MEMORY[0x263F82E00];
      v20[0] = MEMORY[0x263EF8330];
      v20[1] = 3221225472;
      v20[2] = __83__CAMViewfinderViewController__updateTextAnalysisWithInsert_instructions_animated___block_invoke;
      v20[3] = &unk_263FA0208;
      id v21 = v8;
      [v19 performWithoutAnimation:v20];
    }
    goto LABEL_15;
  }
  id v16 = [(CAMViewfinderViewController *)self _textInteractionInsert];
  int v12 = v16;
  if (v5)
  {
    [(CAMCounterRotatingView *)v16 fadeOutAndRemoveFromSuperview];
LABEL_15:

    goto LABEL_16;
  }
  [(CAMViewfinderViewController *)self animateAlongsideFadeOutForTextLiftingView:v16];

  char v17 = [(CAMViewfinderViewController *)self _textInteractionInsert];
  [(CAMViewfinderViewController *)self fadeOutAnimationDidEndForView:v17];

LABEL_16:
}

uint64_t __83__CAMViewfinderViewController__updateTextAnalysisWithInsert_instructions_animated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) performLiftAnimation];
}

- (void)_handleDismissLiftedTextGestureRecognizer:(id)a3
{
}

- (void)_updateImageAnalysisButton
{
  id v16 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  id v3 = [(CAMViewfinderViewController *)self _imageAnalysisButton];
  BOOL v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v5 = [(CAMViewfinderViewController *)self _shouldShowImageAnalysisButtonForGraphConfiguration:v4];

  char v6 = [v3 isContextMenuDisplayed];
  char v7 = v6;
  if (v5 && (v6 & 1) == 0)
  {
    BOOL v8 = [(CAMViewfinderViewController *)self _wantsVisualTextAnalysis];
    uint64_t v9 = [v16 currentObjectType];
    if (v8 || v9 != 2)
    {
      [v3 setMode:0];
    }
    else
    {
      id v10 = [v16 currentObject];
      unint64_t v11 = [v10 mrcType];
      if (v11 > 2) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = qword_209C79378[v11];
      }

      [v3 setMode:v12];
      BOOL v8 = [(CAMViewfinderViewController *)self _layoutStyle] == 1;
    }
    [v3 setSelected:v8];
  }
  if ((v7 & 1) == 0)
  {
    double v13 = [v16 currentMachineReadableCodeAction];
    int v14 = v13;
    if (v13 && (unint64_t)[v13 menuElementsCount] >= 2) {
      uint64_t v15 = [(CAMViewfinderViewController *)self _wantsVisualTextAnalysis] ^ 1;
    }
    else {
      uint64_t v15 = 0;
    }
    [v3 setContextMenuInteractionEnabled:v15];
  }
}

- (void)_updateImageAnalysisInstructions
{
  id v9 = [(CAMViewfinderViewController *)self _imageAnalysisInstructionLabel];
  uint64_t v3 = [v9 instruction];
  BOOL v4 = [(CAMViewfinderViewController *)self _wantsVisualTextSelectionInstructions];
  BOOL v5 = [(CAMViewfinderViewController *)self _timerCache];
  int v6 = [v5 isRunningTimerForKey:&unk_26BDDDD70];

  if (v6) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v3;
  }
  if (v4) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  [v9 setInstruction:v8];
}

- (id)_stillImageCaptureRequestForTextAnalysis
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  BOOL v4 = objc_alloc_init(CAMMutableStillImageCaptureRequest);
  [(CAMMutableStillImageCaptureRequest *)v4 setDelegate:self];
  BOOL v5 = [MEMORY[0x263F08C38] UUID];
  int v6 = [v5 UUIDString];
  [(CAMMutableStillImageCaptureRequest *)v4 setTextAnalysisIdentifier:v6];

  [(CAMMutableStillImageCaptureRequest *)v4 setCaptureMirrored:[(CAMViewfinderViewController *)self _currentDevicePosition] == 1];
  uint64_t v7 = [(CAMViewfinderViewController *)self _motionController];
  -[CAMMutableStillImageCaptureRequest setCaptureOrientation:](v4, "setCaptureOrientation:", [v7 captureOrientation]);

  [(CAMMutableStillImageCaptureRequest *)v4 setCaptureDevice:[(CAMViewfinderViewController *)self _currentDevice]];
  [(CAMMutableStillImageCaptureRequest *)v4 setCaptureMode:v3];
  [(CAMMutableStillImageCaptureRequest *)v4 setAspectRatioCrop:[(CAMViewfinderViewController *)self _aspectRatioCropForMode:v3 devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]]];
  [(CAMMutableStillImageCaptureRequest *)v4 setWantsAudioForCapture:0];
  [(CAMMutableStillImageCaptureRequest *)v4 setPhotoQualityPrioritization:0];
  [(CAMMutableStillImageCaptureRequest *)v4 setFlashMode:0];
  [(CAMMutableStillImageCaptureRequest *)v4 setHdrMode:0];
  [(CAMMutableStillImageCaptureRequest *)v4 setIrisMode:0];
  [(CAMMutableStillImageCaptureRequest *)v4 setWantsAutoDualCameraFusion:0];
  [(CAMMutableStillImageCaptureRequest *)v4 setPersistenceOptions:0];
  [(CAMMutableStillImageCaptureRequest *)v4 setUserInitiationTime:mach_absolute_time()];
  [(CAMMutableStillImageCaptureRequest *)v4 setWantsSemanticSceneFilter:0];
  uint64_t v8 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  id v9 = [v8 currentObject];
  if ([v8 currentObjectType] == 1) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }
  [(CAMMutableStillImageCaptureRequest *)v4 setTextAnalysisRegion:v10];
  if (!v10)
  {
    unint64_t v11 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController _stillImageCaptureRequestForTextAnalysis]();
    }
  }
  [(CAMViewfinderViewController *)self _desiredPreviewSizeForStillImageCapture];
  -[CAMMutableStillImageCaptureRequest setDesiredPreviewSize:](v4, "setDesiredPreviewSize:", round(v12 * 1.2), round(v13 * 1.2));

  return v4;
}

- (void)animateAlongsideTextLiftingForView:(id)a3
{
  id v3 = [(CAMViewfinderViewController *)self _textInteractionBackground];
  [v3 setAlpha:1.0];
}

- (void)animateAlongsideFadeOutForTextLiftingView:(id)a3
{
  id v3 = [(CAMViewfinderViewController *)self _textInteractionBackground];
  [v3 setAlpha:0.0];
}

- (void)fadeOutAnimationDidEndForView:(id)a3
{
  id v4 = a3;
  id v5 = [(CAMViewfinderViewController *)self _textInteractionInsert];

  if (v5 == v4)
  {
    int v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v6 setTextInteractionInsert:0];

    id v7 = [(CAMViewfinderViewController *)self viewfinderView];
    [v7 setTextInteractionInsert:0];
  }
}

- (void)imageAnalysisButton:(id)a3 didChangeContextMenuDisplayed:(BOOL)a4
{
  if (a4)
  {
    id v8 = [(CAMViewfinderViewController *)self _prominentObjectManager];
    id v5 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
    int v6 = [v8 currentObject];
    id v7 = [v8 currentMachineReadableCodeAction];
    [v5 countButtonPressForMRC:v6 action:v7];
  }
  else
  {
    [(CAMViewfinderViewController *)self _updateForCurrentMachineReadableCodeAction];
    [(CAMViewfinderViewController *)self _dismissDockedMRCButtonIfNeededAnimated:1];
  }
}

- (BOOL)imageAnalysisInteraction:(id)a3 shouldBeginAtPoint:(CGPoint)a4 forAnalysisType:(unint64_t)a5
{
  return 1;
}

- (void)imageAnalysisInteraction:(id)a3 didRequestLiveTextButtonSelectedState:(BOOL)a4
{
}

- (unint64_t)feedbackTypeForImageAnalysisInteraction:(id)a3
{
  return 2;
}

- (void)request:(id)a3 didFailWithError:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    -[CAMViewfinderViewController request:didFailWithError:]();
  }

  [(CAMViewfinderViewController *)self _setWantsVisualTextAnalysis:0 animated:1];
  [(CAMViewfinderViewController *)self _startTimer:2];
  [(CAMViewfinderViewController *)self _createImageAnalysisInstructionLabelIfNeeded];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateImageAnalysisInstructions];
  id v9 = +[CAMCaptureCapabilities capabilities];
  int v10 = [v9 isInternalInstall];

  if (v10)
  {
    unint64_t v11 = [MEMORY[0x263F82418] alertControllerWithTitle:@"Text Analysis Error" message:@"An error occurred during text analysis request processing." preferredStyle:1];
    double v12 = (void *)MEMORY[0x263F82400];
    uint64_t v15 = MEMORY[0x263EF8330];
    uint64_t v16 = 3221225472;
    char v17 = __56__CAMViewfinderViewController_request_didFailWithError___block_invoke;
    long long v18 = &unk_263FA1DF0;
    id v19 = v6;
    id v20 = v7;
    double v13 = [v12 actionWithTitle:@"File Radar" style:0 handler:&v15];
    objc_msgSend(v11, "addAction:", v13, v15, v16, v17, v18);

    int v14 = [MEMORY[0x263F82400] actionWithTitle:@"Cancel" style:1 handler:0];
    [v11 addAction:v14];

    [(CAMViewfinderViewController *)self presentViewController:v11 animated:1 completion:0];
  }
}

void __56__CAMViewfinderViewController_request_didFailWithError___block_invoke(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x263F84820]);
  [v2 setAssetsProvider:*(void *)(a1 + 32)];
  [v2 setError:*(void *)(a1 + 40)];
  [v2 provideFeedbackWithType:2 options:-1 metadata:0 promisedAttachments:0 userResponseHandler:&__block_literal_global_532];
}

void __56__CAMViewfinderViewController_request_didFailWithError___block_invoke_2(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v2 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl(&dword_2099F8000, v2, OS_LOG_TYPE_DEFAULT, "Launched TTR for text analysis failure", v3, 2u);
    }
  }
}

- (void)request:(id)a3 didDetectTextWithResult:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [MEMORY[0x263EFF910] now];
  [(CAMViewfinderViewController *)self _setCurrentTextAnalysisDetectionEndDate:v8];

  id v9 = [v7 boundingPathWithPadding:8.0 cornerRadius:8.0];
  id v10 = objc_alloc(MEMORY[0x263F84888]);
  unint64_t v11 = [v6 image];
  [v7 baselineAngle];
  double v12 = objc_msgSend(v10, "initWithImage:cutoutPath:baselineAngle:", v11, v9);

  [v12 setMaxScale:4.0];
  [v12 setPresentsQuickActions:1];
  objc_initWeak(&location, self);
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 3221225472;
  uint64_t v15 = __63__CAMViewfinderViewController_request_didDetectTextWithResult___block_invoke;
  uint64_t v16 = &unk_263FA1E40;
  objc_copyWeak(&v17, &location);
  [v12 setQuickActionConfigurationUpdateHandler:&v13];
  -[CAMViewfinderViewController _updateTextAnalysisWithInsert:instructions:animated:](self, "_updateTextAnalysisWithInsert:instructions:animated:", v12, 1, 1, v13, v14, v15, v16);
  objc_destroyWeak(&v17);
  objc_destroyWeak(&location);
}

void __63__CAMViewfinderViewController_request_didDetectTextWithResult___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 configuration];
  if ([v3 state] == 4)
  {
    id v5 = [MEMORY[0x263F825C8] blackColor];
    [v4 setBaseForegroundColor:v5];

    [MEMORY[0x263F825C8] systemYellowColor];
  }
  else
  {
    id v6 = [MEMORY[0x263F825C8] whiteColor];
    [v4 setBaseForegroundColor:v6];

    [MEMORY[0x263F825C8] colorWithWhite:0.0 alpha:0.5];
  id v7 = };
  [v4 setBaseBackgroundColor:v7];

  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = __63__CAMViewfinderViewController_request_didDetectTextWithResult___block_invoke_2;
  v8[3] = &unk_263FA1E18;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  [v4 setTitleTextAttributesTransformer:v8];
  [v3 setConfiguration:v4];
  objc_destroyWeak(&v9);
}

id __63__CAMViewfinderViewController_request_didDetectTextWithResult___block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = (void *)[a2 mutableCopy];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = [WeakRetained traitCollection];
  id v6 = [v5 preferredContentSizeCategory];

  id v7 = +[CAMFont cameraModeDialFontForContentSize:v6];
  [v3 setObject:v7 forKeyedSubscript:*MEMORY[0x263F814F0]];

  return v3;
}

- (void)request:(id)a3 didRecgonizeTextWithAnalysis:(id)a4
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v5 = (void *)MEMORY[0x263EFF910];
  id v6 = a4;
  id v7 = [v5 now];
  id v8 = [(CAMViewfinderViewController *)self _currentStillImageCaptureTextAnalysisStateDate];
  id v9 = [(CAMViewfinderViewController *)self _currentStillImageCaptureTextAnalysisEndDate];
  id v10 = [(CAMViewfinderViewController *)self _currentTextAnalysisDetectionEndDate];
  unint64_t v11 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    [v9 timeIntervalSinceDate:v8];
    uint64_t v13 = v12;
    [v10 timeIntervalSinceDate:v9];
    uint64_t v15 = v14;
    [v7 timeIntervalSinceDate:v10];
    uint64_t v17 = v16;
    [v7 timeIntervalSinceDate:v8];
    int v24 = 134218752;
    uint64_t v25 = v13;
    __int16 v26 = 2048;
    uint64_t v27 = v15;
    __int16 v28 = 2048;
    uint64_t v29 = v17;
    __int16 v30 = 2048;
    uint64_t v31 = v18;
    _os_log_impl(&dword_2099F8000, v11, OS_LOG_TYPE_DEFAULT, "Text analysis completed with time for capture: %.3fs detection: %.3fs recognition: %.3fs total: %.3fs", (uint8_t *)&v24, 0x2Au);
  }

  id v19 = (void *)[objc_alloc(MEMORY[0x263F84840]) initWithInteractionOptions:5];
  [v19 setActiveInteractionTypes:3];
  [v19 setDataDetectorTypes:4091];
  [v19 setAnalysis:v6];

  [v19 setDelegate:self];
  objc_msgSend(v19, "set_customAnalyticsIdentifier:", @"com.apple.camera.livetext");
  id v20 = [(CAMViewfinderViewController *)self _textInteractionInsert];
  [v20 setImageInteraction:v19];

  id v21 = [(CAMViewfinderViewController *)self view];
  [v21 setNeedsLayout];

  double v22 = [(CAMViewfinderViewController *)self view];
  int v23 = [v19 feedbackGestureRecognizer];
  [v22 addGestureRecognizer:v23];
}

- (void)captureController:(id)a3 didOutputQRCodeResults:(id)a4
{
  [(CAMViewfinderViewController *)self _setCachedQRCodeResults:a4];
  [(CAMViewfinderViewController *)self _captureControllerDidOutputMRC];
}

- (void)captureController:(id)a3 didOutputAppClipCodeResults:(id)a4
{
  [(CAMViewfinderViewController *)self _setCachedAppClipCodeResults:a4];
  [(CAMViewfinderViewController *)self _captureControllerDidOutputMRC];
}

- (void)_captureControllerDidOutputMRC
{
  if ([(CAMViewfinderViewController *)self _shouldProcessMachineReadableMetadata])
  {
    int v3 = ![(CAMViewfinderViewController *)self _wantsVisualTextAnalysis];
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = [(CAMViewfinderViewController *)self _cachedQRCodeResults];
  id v5 = (void *)v4;
  id v6 = (void *)MEMORY[0x263EFFA68];
  if (v4) {
    id v7 = (void *)v4;
  }
  else {
    id v7 = (void *)MEMORY[0x263EFFA68];
  }
  id v8 = v7;

  uint64_t v9 = [(CAMViewfinderViewController *)self _cachedAppClipCodeResults];
  id v10 = (void *)v9;
  if (v9) {
    unint64_t v11 = (void *)v9;
  }
  else {
    unint64_t v11 = v6;
  }
  id v12 = v11;

  if (v3)
  {
    id v6 = [v8 arrayByAddingObjectsFromArray:v12];
  }
  if ([v6 count] || -[CAMViewfinderViewController _lastMRCResultsCount](self, "_lastMRCResultsCount"))
  {
    -[CAMViewfinderViewController _setLastMRCResultsCount:](self, "_setLastMRCResultsCount:", [v6 count]);
    uint64_t v13 = [(CAMViewfinderViewController *)self _previewViewController];
    uint64_t v14 = [(CAMViewfinderViewController *)self _machineReadableCodeLoggingController];
    int64_t v15 = +[CAMApplication appOrPlugInState];
    if ([v6 count])
    {
      if (v15) {
        [v14 logMachineReadableCodeResultDuringInactiveAppState];
      }
    }
    else
    {
      [v14 resetLoggingState];
    }
    [(CAMViewfinderViewController *)self _updateCachedMRCResults:v6];
    [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
    uint64_t v16 = +[CAMCaptureCapabilities capabilities];
    int v17 = [v16 isImageAnalysisSupported];

    if (v17)
    {
      [(CAMViewfinderViewController *)self _updateProminentObjectManagerWithCachedMetadataResults];
    }
    else
    {
      uint64_t v18 = [(CAMViewfinderViewController *)self _acceptableSizeMRCResultsFromResults:v6];
      id v19 = v18;
      if (!v15 && [v18 count])
      {
        v20[0] = MEMORY[0x263EF8330];
        v20[1] = 3221225472;
        v20[2] = __61__CAMViewfinderViewController__captureControllerDidOutputMRC__block_invoke;
        v20[3] = &unk_263FA1E68;
        id v21 = v13;
        [(CAMViewfinderViewController *)self _processResults:v19 completionHandler:v20];
      }
    }
  }
}

void __61__CAMViewfinderViewController__captureControllerDidOutputMRC__block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 3221225472;
    v4[2] = __61__CAMViewfinderViewController__captureControllerDidOutputMRC__block_invoke_2;
    v4[3] = &unk_263FA0408;
    id v5 = *(id *)(a1 + 32);
    id v6 = v3;
    dispatch_async(MEMORY[0x263EF83A0], v4);
  }
}

uint64_t __61__CAMViewfinderViewController__captureControllerDidOutputMRC__block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCachedSignificantMRCResult:*(void *)(a1 + 40)];
}

- (void)_updateCachedMRCResults:(id)a3
{
  id v4 = a3;
  id v5 = [(CAMViewfinderViewController *)self _previewViewController];
  [v5 setCachedMRCResults:v4];

  id v6 = [(CAMViewfinderViewController *)self _targetQRCodeInstructionLabel];
  [v6 setMRCResults:v4];
}

- (id)_acceptableSizeMRCResultsFromResults:(id)a3
{
  id v4 = a3;
  id v5 = [(CAMViewfinderViewController *)self _machineReadableCodeLoggingController];
  id v6 = (void *)MEMORY[0x263F08A98];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = __68__CAMViewfinderViewController__acceptableSizeMRCResultsFromResults___block_invoke;
  v11[3] = &unk_263FA1E90;
  id v12 = v5;
  id v7 = v5;
  id v8 = [v6 predicateWithBlock:v11];
  uint64_t v9 = [v4 filteredArrayUsingPredicate:v8];

  return v9;
}

uint64_t __68__CAMViewfinderViewController__acceptableSizeMRCResultsFromResults___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 isOfSignificantSize];
  [*(id *)(a1 + 32) logMachineReadableCodeResult:v3 isOfSignificantSize:v4];

  return v4;
}

- (void)_processResults:(id)a3 completionHandler:(id)a4
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v6 = a3;
  id v7 = (void (**)(id, void))a4;
  if (![v6 count]) {
    v7[2](v7, 0);
  }
  id v8 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v9 = v6;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v34 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v22;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v22 != v11) {
          objc_enumerationMutation(v9);
        }
        uint64_t v13 = [*(id *)(*((void *)&v21 + 1) + 8 * v12) underlyingMachineReadableCodeObject];
        [v8 addObject:v13];

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v34 count:16];
    }
    while (v10);
  }

  id v14 = [(CAMViewfinderViewController *)self _barcodeParsingSession];
  if (!v14)
  {
    int64_t v15 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2099F8000, v15, OS_LOG_TYPE_DEFAULT, "Recognized the first acceptable size QR Code, starting new barcode parsing session", buf, 2u);
    }

    uint64_t v30 = 0;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x2050000000;
    uint64_t v16 = (void *)getBCSAVParsingSessionClass_softClass;
    uint64_t v33 = getBCSAVParsingSessionClass_softClass;
    if (!getBCSAVParsingSessionClass_softClass)
    {
      *(void *)buf = MEMORY[0x263EF8330];
      uint64_t v26 = 3221225472;
      uint64_t v27 = __getBCSAVParsingSessionClass_block_invoke;
      __int16 v28 = &unk_263FA0AB0;
      uint64_t v29 = &v30;
      __getBCSAVParsingSessionClass_block_invoke((uint64_t)buf);
      uint64_t v16 = (void *)v31[3];
    }
    int v17 = v16;
    _Block_object_dispose(&v30, 8);
    id v14 = objc_alloc_init(v17);
    [(CAMViewfinderViewController *)self _setBarcodeParsingSession:v14];
  }
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  v19[2] = __65__CAMViewfinderViewController__processResults_completionHandler___block_invoke;
  v19[3] = &unk_263FA1EB8;
  id v20 = v7;
  uint64_t v18 = v7;
  [v14 updateSessionWithMetadataObjects:v8 completionHandler:v19];
}

void __65__CAMViewfinderViewController__processResults_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    id v8 = [[CAMMachineReadableCodeResult alloc] initWithMachineReadableCodeObject:v5];
    if (!v7) {
      goto LABEL_8;
    }
  }
  else
  {
    id v8 = 0;
    if (!v6) {
      goto LABEL_8;
    }
  }
  id v9 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = [v7 description];
    int v11 = 138543362;
    uint64_t v12 = v10;
    _os_log_impl(&dword_2099F8000, v9, OS_LOG_TYPE_DEFAULT, "There was an error updating the QR barcode parsing session: %{public}@", (uint8_t *)&v11, 0xCu);
  }
LABEL_8:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_dismissDockedMRCButtonIfNeededAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v5 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  id v6 = [v5 currentMachineReadableCodeAction];

  id v7 = [v10 imageAnalysisButton];
  char v8 = [v7 isContextMenuDisplayed];

  if (!v6
    && (v8 & 1) == 0
    && ![(CAMViewfinderViewController *)self _isDisplayingDocumentScanningButton])
  {
    if (v10)
    {
      [v10 dismissMachineReadableCodeButtonAnimated:v3];
    }
    else
    {
      id v9 = [(CAMViewfinderViewController *)self viewfinderView];
      [v9 dismissMachineReadableCodeButtonAnimated:v3];
    }
  }
  [(CAMViewfinderViewController *)self _updateDocumentScanningButtonIfNeeded];
}

- (void)machineReadableCodeButtonDidTapDismiss:(id)a3
{
  id v4 = a3;
  id v5 = [(CAMViewfinderViewController *)self viewfinderView];
  id v6 = [v5 machineReadableCodeButton];

  if (v6 == v4)
  {
    id v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v8 = 0;
      _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "Tapped to dismiss MRC button", v8, 2u);
    }

    [v5 dismissMachineReadableCodeButtonAnimated:1];
    [v4 setDelegate:0];
  }
  [(CAMViewfinderViewController *)self _updateDocumentScanningButtonIfNeeded];
}

- (void)_updateProminentObjectManagerWithCachedMetadataResults
{
  if (!+[CAMApplication appOrPlugInState])
  {
    id v17 = [(CAMViewfinderViewController *)self _previewViewController];
    uint64_t v3 = [v17 cachedTextRegionResults];
    id v4 = (void *)v3;
    id v5 = (void *)MEMORY[0x263EFFA68];
    if (v3) {
      id v6 = (void *)v3;
    }
    else {
      id v6 = (void *)MEMORY[0x263EFFA68];
    }
    id v7 = v6;

    uint64_t v8 = [v17 cachedMRCResults];
    id v9 = (void *)v8;
    if (v8) {
      id v10 = (void *)v8;
    }
    else {
      id v10 = v5;
    }
    id v11 = v10;

    uint64_t v12 = [(CAMViewfinderViewController *)self _acceptableSizeMRCResultsFromResults:v11];
    uint64_t v13 = [v7 arrayByAddingObjectsFromArray:v12];
    id v14 = [(CAMViewfinderViewController *)self _prominentObjectManager];
    [v14 updateWithCandidateObjects:v13];

    int64_t v15 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
    [v15 countObservedSignficantMRCs:v12];
    uint64_t v16 = [v7 count];

    [v15 countObservedSignficantTextRegionCount:v16];
  }
}

- (void)_updateDocumentScanningButtonIfNeeded
{
  id v14 = +[CAMCaptureCapabilities capabilities];
  if ([v14 isDocumentScanningSupported])
  {
    BOOL v3 = +[CAMDocumentScanFlowController isSupported];

    if (!v3) {
      return;
    }
    id v14 = [(CAMViewfinderViewController *)self viewfinderView];
    BOOL v4 = [(CAMViewfinderViewController *)self _shouldShowDocumentScanningButton];
    BOOL v5 = [(CAMViewfinderViewController *)self _isDisplayingDocumentScanningButton];
    id v6 = [(CAMViewfinderViewController *)self _timerCache];
    int v7 = [v6 isRunningTimerForKey:&unk_26BDDDD88];

    if (v4)
    {
      if (v5)
      {
        uint64_t v8 = [(CAMViewfinderViewController *)self _timerCache];
        [v8 cancelTimerForKey:&unk_26BDDDD88];
      }
      else
      {
        id v9 = [MEMORY[0x263F827E8] systemImageNamed:@"doc.viewfinder"];
        id v10 = CAMLocalizedFrameworkString(@"DOCUMENT_SCANNING_TITLE", 0);
        id v11 = +[CAMMachineReadableCodeButton buttonWithType:0];
        [v11 setAttributedTitleWithTitle:v10 image:v9];
        [v11 addTarget:self action:sel__handleDocumentScanningPillPress forControlEvents:64];
        if (v14)
        {
          [v14 adoptMachineReadableCodeButton:v11 animated:1];
        }
        else
        {
          uint64_t v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
          [v12 adoptMachineReadableCodeButton:v11 fromOriginalParent:0 animated:1];
        }
        uint64_t v13 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
        [v13 countObservedDocumentScanning];
      }
    }
    else if (((!v5 | v7) & 1) == 0)
    {
      [(CAMViewfinderViewController *)self _startTimer:3];
    }
  }
}

- (void)_dismissDocumentScanningButton
{
  if (![(CAMViewfinderViewController *)self _shouldShowDocumentScanningButton]
    && [(CAMViewfinderViewController *)self _isDisplayingDocumentScanningButton])
  {
    BOOL v3 = [(CAMViewfinderViewController *)self viewfinderView];
    id v5 = v3;
    if (v3)
    {
      [v3 dismissMachineReadableCodeButtonAnimated:1];
    }
    else
    {
      BOOL v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      [v4 dismissMachineReadableCodeButtonAnimated:1];
    }
  }
}

- (BOOL)_shouldShowDocumentScanningButton
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentDevicePosition];
  if (([(CAMViewfinderViewController *)self _currentMode] | 4) != 4 || v3) {
    goto LABEL_3;
  }
  BOOL v4 = [(CAMViewfinderViewController *)self _isDocumentInScene];
  if (!v4) {
    return v4;
  }
  if ([(CAMViewfinderViewController *)self _isDisplayingMRCButton]) {
LABEL_3:
  }
    LOBYTE(v4) = 0;
  else {
    LOBYTE(v4) = ![(CAMViewfinderViewController *)self _wantsVisualTextAnalysis];
  }
  return v4;
}

- (BOOL)_isDisplayingDocumentScanningButton
{
  int64_t v3 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v4 = v3;
  if (v3)
  {
    id v5 = [v3 machineReadableCodeButton];
  }
  else
  {
    id v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    id v5 = [v6 machineReadableCodeButton];
  }
  int v7 = [v5 title];
  uint64_t v8 = CAMLocalizedFrameworkString(@"DOCUMENT_SCANNING_TITLE", 0);
  char v9 = [v7 isEqualToString:v8];

  return v9;
}

- (BOOL)_isDisplayingMRCButton
{
  int64_t v3 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v4 = v3;
  if (!v3)
  {
    int v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    id v5 = [v7 machineReadableCodeButton];

    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    LOBYTE(v6) = 0;
    goto LABEL_6;
  }
  id v5 = [v3 machineReadableCodeButton];
  if (!v5) {
    goto LABEL_5;
  }
LABEL_3:
  BOOL v6 = ![(CAMViewfinderViewController *)self _isDisplayingDocumentScanningButton];
LABEL_6:

  return v6;
}

- (CGPoint)prominentObjectManagerPointOfInterestInNormalizedDeviceSpace:(id)a3
{
  int64_t v3 = [(CAMViewfinderViewController *)self _previewViewController];
  [v3 pointOfInterestInNormalizedCaptureDeviceSpace];
  double v5 = v4;
  double v7 = v6;

  double v8 = v5;
  double v9 = v7;
  result.CGFloat y = v9;
  result.CGFloat x = v8;
  return result;
}

- (void)prominentObjectManager:(id)a3 didChangeCurrentObject:(id)a4
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v5 = a4;
  double v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = [v5 metadataType];
    int v15 = 138543362;
    uint64_t v16 = v7;
    _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "Current prominent object metadata type: %{public}@", (uint8_t *)&v15, 0xCu);
  }
  double v8 = [(CAMViewfinderViewController *)self _previewViewController];
  double v9 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  uint64_t v10 = [v9 currentObjectType];

  id v11 = 0;
  if (v10 == 2)
  {
    id v13 = v5;
    goto LABEL_7;
  }
  uint64_t v12 = 0;
  if (v10 == 1)
  {
    id v13 = 0;
    id v11 = v5;
LABEL_7:
    uint64_t v12 = v11;
    id v14 = v5;
    id v11 = v13;
  }
  [v8 setCachedSignificantTextRegionResult:v12];
  [v8 setCachedSignificantMRCResult:v11];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _dismissDockedMRCButtonIfNeededAnimated:1];
  [(CAMViewfinderViewController *)self _updateImageAnalysisButton];
}

- (void)prominentObjectManager:(id)a3 didChangeCurrentMachineReadableCodeAction:(id)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v5 = a4;
  double v6 = [(CAMViewfinderViewController *)self _imageAnalysisButton];
  int v7 = [v6 isContextMenuDisplayed];
  double v8 = os_log_create("com.apple.camera", "Camera");
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (!v9)
    {
LABEL_11:

      goto LABEL_12;
    }
    uint64_t v10 = [v5 dataTypeDisplayString];
    int v16 = 138543362;
    uint64_t v17 = v10;
    _os_log_impl(&dword_2099F8000, v8, OS_LOG_TYPE_DEFAULT, "Already showing MRC menu, ignoring new prominent MRC type: %{public}@", (uint8_t *)&v16, 0xCu);
LABEL_10:

    goto LABEL_11;
  }
  if (v9)
  {
    id v11 = [v5 dataTypeDisplayString];
    int v16 = 138543362;
    uint64_t v17 = v11;
    _os_log_impl(&dword_2099F8000, v8, OS_LOG_TYPE_DEFAULT, "Current prominent MRC type: %{public}@", (uint8_t *)&v16, 0xCu);
  }
  [(CAMViewfinderViewController *)self _updateForCurrentMachineReadableCodeAction];
  if (v5)
  {
    double v8 = +[CAMMachineReadableCodeButton buttonWithType:0];
    uint64_t v12 = [v5 shortDescription];
    id v13 = [v5 actionIcon];
    [v8 setAttributedTitleWithTitle:v12 image:v13];

    [v8 addTarget:self action:sel__handlePillPressForCurrentMRCAction forControlEvents:64];
    id v14 = [(CAMViewfinderViewController *)self viewfinderView];
    uint64_t v10 = v14;
    if (v14)
    {
      [v14 adoptMachineReadableCodeButton:v8 animated:1];
      [v8 setDelegate:self];
      [v8 setDismissable:1];
    }
    else
    {
      int v15 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      [v15 adoptMachineReadableCodeButton:v8 fromOriginalParent:0 animated:1];
    }
    goto LABEL_10;
  }
LABEL_12:
  [(CAMViewfinderViewController *)self _updateDocumentScanningButtonIfNeeded];
}

- (void)prominentObjectManagerDidChangeIsCurrentObjectExpiring:(id)a3
{
}

- (void)_updateMachineReadableCodeButtonForAction:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v6 = a3;
  int v7 = [(CAMViewfinderViewController *)self viewfinderView];
  double v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v9 = v8;
  if (v7) {
    double v8 = v7;
  }
  uint64_t v10 = [v8 machineReadableCodeButton];
  if (v10)
  {
    id v11 = [v6 shortDescription];
    uint64_t v12 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v20 = v11;
      _os_log_impl(&dword_2099F8000, v12, OS_LOG_TYPE_DEFAULT, "Updating MRC button with title: %{public}@", buf, 0xCu);
    }

    id v13 = [v6 actionIcon];
    [v10 setAttributedTitleWithTitle:v11 image:v13];

    if (v7) {
      id v14 = v7;
    }
    else {
      id v14 = v9;
    }
    id v15 = v14;
    [v15 setNeedsLayout];
    if (v4)
    {
      int v16 = (void *)MEMORY[0x263F82E00];
      v17[0] = MEMORY[0x263EF8330];
      v17[1] = 3221225472;
      v17[2] = __82__CAMViewfinderViewController__updateMachineReadableCodeButtonForAction_animated___block_invoke;
      v17[3] = &unk_263FA0208;
      id v18 = v15;
      [v16 animateWithDuration:2 delay:v17 usingSpringWithDamping:0 initialSpringVelocity:0.5 options:0.0 animations:1.0 completion:1.0];
    }
  }
}

uint64_t __82__CAMViewfinderViewController__updateMachineReadableCodeButtonForAction_animated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

- (void)_updateForCurrentMachineReadableCodeAction
{
  int64_t v3 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  id v4 = [v3 currentMachineReadableCodeAction];

  [v4 setDelegate:self];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateImageAnalysisButton];
}

- (void)_handlePillPressForCurrentMRCAction
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int64_t v3 = [(CAMViewfinderViewController *)self _previewViewController];
  id v4 = [v3 cachedSignificantMRCResult];

  id v5 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  id v6 = [v5 currentMachineReadableCodeAction];

  int v7 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
  [v7 countPillPressForMRC:v4 action:v6];

  double v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v9 = [v6 detectedCode];
    int v10 = 138543362;
    id v11 = v9;
    _os_log_impl(&dword_2099F8000, v8, OS_LOG_TYPE_DEFAULT, "Performing action for MRC code: %{public}@", (uint8_t *)&v10, 0xCu);
  }
  [v6 performActionWithCompletion:&__block_literal_global_566];
}

void __66__CAMViewfinderViewController__handlePillPressForCurrentMRCAction__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    int64_t v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __66__CAMViewfinderViewController__handlePillPressForCurrentMRCAction__block_invoke_cold_1();
    }
  }
}

- (void)_handleDocumentScanningPillPress
{
  objc_initWeak(&location, self);
  int64_t v3 = [(CAMViewfinderViewController *)self _visionAnalyticsSession];
  [v3 countButtonPressForDocumentScanning];

  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke;
  aBlock[3] = &unk_263FA0E00;
  objc_copyWeak(&v9, &location);
  id v4 = _Block_copy(aBlock);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_4;
  v6[3] = &unk_263FA1EE0;
  id v5 = v4;
  id v7 = v5;
  [(CAMViewfinderViewController *)self _requestPasscodeUnlockForDocumentScanningWithCompletionBlock:v6];

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke(uint64_t a1)
{
  double v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_2;
  v3[3] = &unk_263FA0E00;
  objc_copyWeak(&v4, v1);
  [WeakRetained suspendCameraSessionWithCompletion:v3];

  objc_destroyWeak(&v4);
}

void __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_2(uint64_t a1)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_3;
  block[3] = &unk_263FA0E00;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async(MEMORY[0x263EF83A0], block);
  objc_destroyWeak(&v2);
}

void __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_3(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained presentDocumentScanningViewControllerAnimated:1];
}

uint64_t __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_4(uint64_t result, int a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

- (void)presentDocumentScanningViewControllerAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = objc_alloc_init(CAMDocumentScanFlowController);
  [(CAMDocumentScanFlowController *)v5 setDocumentFlowDelegate:self];
  [(CAMViewfinderViewController *)self presentModalViewController:v5 animated:v3];
}

- (CGRect)sourceRectForPopoverActionPicker:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _imageAnalysisButton];
  [v4 bounds];
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  id v13 = [(CAMViewfinderViewController *)self view];
  objc_msgSend(v4, "convertRect:toView:", v13, v6, v8, v10, v12);
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;

  double v22 = v15;
  double v23 = v17;
  double v24 = v19;
  double v25 = v21;
  result.size.CGFloat height = v25;
  result.size.CGFloat width = v24;
  result.origin.CGFloat y = v23;
  result.origin.CGFloat x = v22;
  return result;
}

- (void)actionDidUpdateTitle:(id)a3
{
  id v11 = a3;
  uint64_t v17 = 0;
  double v18 = &v17;
  uint64_t v19 = 0x2050000000;
  double v12 = (void *)getBCSActionClass_softClass;
  uint64_t v20 = getBCSActionClass_softClass;
  if (!getBCSActionClass_softClass)
  {
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    v16[2] = __getBCSActionClass_block_invoke;
    v16[3] = &unk_263FA0AB0;
    void v16[4] = &v17;
    __getBCSActionClass_block_invoke((uint64_t)v16, v4, v5, v6, v7, v8, v9, v10, v15);
    double v12 = (void *)v18[3];
  }
  id v13 = v12;
  _Block_object_dispose(&v17, 8);
  if (objc_opt_isKindOfClass())
  {
    [(CAMViewfinderViewController *)self _updateMachineReadableCodeButtonForAction:v11 animated:1];
  }
  else
  {
    double v14 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController actionDidUpdateTitle:]();
    }
  }
}

- (void)captureController:(id)a3 didOutputHistogramResult:(id)a4
{
  id v5 = a4;
  [(CAMViewfinderViewController *)self _shadowClippingValue];
  double v7 = v6;
  [v5 shadowClipping];
  [(CAMViewfinderViewController *)self _setShadowClippingValue:v8 * 0.3 + v7 * 0.7];
  [(CAMViewfinderViewController *)self _highlightClippingValue];
  double v10 = v9;
  [v5 highlightClipping];
  double v12 = v11;

  [(CAMViewfinderViewController *)self _setHighlightClippingValue:v12 * 0.3 + v10 * 0.7];
  [(CAMViewfinderViewController *)self _updateExposureButtonForCurrentState];
}

- (void)_resetExposureClipping
{
  [(CAMViewfinderViewController *)self _setShadowClippingValue:0.0];
  [(CAMViewfinderViewController *)self _setHighlightClippingValue:0.0];
  [(CAMViewfinderViewController *)self _updateExposureButtonForCurrentState];
}

- (void)_createVerticalSwipeGestureRecognizersIfNecessary
{
  id v7 = [(CAMViewfinderViewController *)self view];
  if (!self->__swipeDownGestureRecognizer)
  {
    BOOL v3 = (UISwipeGestureRecognizer *)[objc_alloc(MEMORY[0x263F82C38]) initWithTarget:self action:sel__handleSwipeDownGestureRecognizer_];
    swipeDownGestureRecognizer = self->__swipeDownGestureRecognizer;
    self->__swipeDownGestureRecognizer = v3;

    [(UISwipeGestureRecognizer *)self->__swipeDownGestureRecognizer setDirection:8];
    [(UISwipeGestureRecognizer *)self->__swipeDownGestureRecognizer setDelaysTouchesEnded:0];
    [(UISwipeGestureRecognizer *)self->__swipeDownGestureRecognizer setDelegate:self];
    [v7 addGestureRecognizer:self->__swipeDownGestureRecognizer];
  }
  if (!self->__swipeUpGestureRecognizer)
  {
    id v5 = (UISwipeGestureRecognizer *)[objc_alloc(MEMORY[0x263F82C38]) initWithTarget:self action:sel__handleSwipeUpGestureRecognizer_];
    swipeUpGestureRecognizer = self->__swipeUpGestureRecognizer;
    self->__swipeUpGestureRecognizer = v5;

    [(UISwipeGestureRecognizer *)self->__swipeUpGestureRecognizer setDirection:4];
    [(UISwipeGestureRecognizer *)self->__swipeUpGestureRecognizer setDelaysTouchesEnded:0];
    [(UISwipeGestureRecognizer *)self->__swipeUpGestureRecognizer setDelegate:self];
    [v7 addGestureRecognizer:self->__swipeUpGestureRecognizer];
  }
}

- (BOOL)_shouldCreateAndEmbedControls
{
  id v2 = +[CAMCaptureCapabilities capabilities];
  char v3 = [v2 isCTMSupported];

  return v3 ^ 1;
}

- (void)_createOrDestroySharedLibraryControlsIfNecessary
{
  [(CAMViewfinderViewController *)self _createOrDestroySharedLibraryButtonIfNecessary];
  [(CAMViewfinderViewController *)self _createOrDestroySharedLibraryBadgeIfNecessary];
  id v4 = [(CAMViewfinderViewController *)self _remoteShutterController];
  char v3 = +[CAMUserPreferences preferences];
  objc_msgSend(v4, "setSharedLibrarySupported:", objc_msgSend(v3, "sharedLibrarySwitchEnabled"));
}

- (void)_createModeSpecificControlsForConfiguration:(id)a3
{
  id v9 = a3;
  uint64_t v4 = [(CAMViewfinderViewController *)self isShowingStandardControls];
  id v5 = v9;
  if (v4)
  {
    if ([(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v9])
    {
      [(CAMViewfinderViewController *)self _createZoomControlIfNecessary];
    }
    if ([(CAMViewfinderViewController *)self _wantsZoomSliderForGraphConfiguration:v9]&& !+[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]])
    {
      [(CAMViewfinderViewController *)self _createZoomSliderIfNecessary];
    }
    [(CAMViewfinderViewController *)self _createOrDestroyLevelViewModelIfNecessary];
    [(CAMViewfinderViewController *)self _createGridViewIfNecessary];
    [(CAMViewfinderViewController *)self _createOrDestroyLevelViewIfNecessary];
    [(CAMViewfinderViewController *)self _createOrDestroyHorizonLevelViewIfNecessary];
    switch([v9 mode])
    {
      case 0:
      case 4:
      case 9:
        [(CAMViewfinderViewController *)self _createStillImageControlsIfNecessary];
        break;
      case 1:
      case 2:
      case 8:
        [(CAMViewfinderViewController *)self _createVideoControlsIfNecessary];
        break;
      case 3:
        [(CAMViewfinderViewController *)self _createPanoramaControlsIfNecessary];
        break;
      case 6:
      case 7:
        [(CAMViewfinderViewController *)self _createPortraitModeControlsIfNecessary];
        break;
      default:
        break;
    }
    id v6 = [(CAMViewfinderViewController *)self _embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:v9];
    id v7 = +[CAMCaptureCapabilities capabilities];
    int v8 = objc_msgSend(v7, "isImageAnalysisSupportedForMode:devicePosition:", objc_msgSend(v9, "mode"), objc_msgSend(v9, "devicePosition"));

    if (v8) {
      [(CAMViewfinderViewController *)self _createImageAnalysisButtonIfNeeded];
    }
    uint64_t v4 = [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Controls created"];
    id v5 = v9;
  }
  MEMORY[0x270F9A758](v4, v5);
}

- (void)_createPortraitModeControlsIfNecessary
{
  id v5 = +[CAMCaptureCapabilities capabilities];
  [(CAMViewfinderViewController *)self _createTimerButtonIfNecessary];
  [(CAMViewfinderViewController *)self _createTimerIndicatorViewIfNecessary];
  if ([(CAMViewfinderViewController *)self _wantsHDRControlsVisible])
  {
    [(CAMViewfinderViewController *)self _createHDRButtonIfNecessary];
    [(CAMViewfinderViewController *)self _createHDRBadgeIfNecessary];
  }
  if ([v5 isLivePhotoSupported])
  {
    [(CAMViewfinderViewController *)self _createLivePhotoButtonIfNecessary];
    [(CAMViewfinderViewController *)self _createLivePhotoBadgeIfNecessary];
  }
  [(CAMViewfinderViewController *)self _createPortraitModeInstructionLabelIfNecessary];
  if ([v5 isLiveFilteringSupported])
  {
    [(CAMViewfinderViewController *)self _createFilterButtonIfNecessary];
    [(CAMViewfinderViewController *)self _createFilterScrubberGestureRecognizersIfNecessary];
  }
  if ([v5 arePortraitEffectsSupported])
  {
    [(CAMViewfinderViewController *)self _createLightingControlIfNecessary];
    [(CAMViewfinderViewController *)self _createLightingNameBadgeIfNecessary];
  }
  else
  {
    [(CAMViewfinderViewController *)self _createShallowDepthOfFieldBadgeIfNecessary];
  }
  if ([v5 isDepthEffectApertureSupported]) {
    [(CAMViewfinderViewController *)self _createApertureButtonIfNecessary];
  }
  char v3 = +[CAMCaptureCapabilities capabilities];
  int v4 = objc_msgSend(v3, "isPortraitEffectIntensitySupportedForLightingType:", -[CAMViewfinderViewController _portraitModeLightingEffectType](self, "_portraitModeLightingEffectType"));

  if (v4) {
    [(CAMViewfinderViewController *)self _createIntensityButtonIfNecessary];
  }
}

- (void)_createVideoControlsIfNecessary
{
  [(CAMViewfinderViewController *)self _createElapsedTimeViewIfNecessary];
  char v3 = +[CAMCaptureCapabilities capabilities];
  int v4 = [v3 isStillDuringVideoSupported];

  if (v4) {
    [(CAMViewfinderViewController *)self _createStillDuringVideoButtonIfNecessary];
  }
  [(CAMViewfinderViewController *)self _createVideoConfigurationStatusIndicatorIfNecessary];
}

- (void)_createPanoramaControlsIfNecessary
{
  id v3 = +[CAMCaptureCapabilities capabilities];
  if (([v3 isBackPanoramaSupported] & 1) != 0
    || [v3 isFrontPanoramaSupported])
  {
    [(CAMViewfinderViewController *)self _createPanoramaViewControllerIfNecessary];
  }
}

- (void)_createCreativeCameraButtonIfNecessary
{
  if (!self->__creativeCameraButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    int v4 = [[CAMCreativeCameraButton alloc] initWithLayoutStyle:v3];
    creativeCameraButton = self->__creativeCameraButton;
    self->__creativeCameraButton = v4;

    [(CAMCreativeCameraButton *)self->__creativeCameraButton addTarget:self action:sel__handleCreativeCameraButtonPressed_ forControlEvents:1];
    [(CAMCreativeCameraButton *)self->__creativeCameraButton addTarget:self action:sel__handleCreativeCameraButtonReleased_ forControlEvents:64];
    [(CAMCreativeCameraButton *)self->__creativeCameraButton addTarget:self action:sel__handleCreativeCameraButtonTouchAttemptedWhileDisabled_ forControlEvents:0x1000000];
    [(CAMViewfinderViewController *)self _embedCreativeCameraButtonWithLayoutStyle:v3];
  }
}

- (BOOL)_shouldCreatePhotosButton
{
  if (![(CAMViewfinderViewController *)self _useCreativeCameraControls]) {
    return 0;
  }
  id v2 = [MEMORY[0x263F82670] currentDevice];
  BOOL v3 = [v2 userInterfaceIdiom] != 1;

  return v3;
}

- (void)_createPhotosButtonIfNecessary
{
  if ([(CAMViewfinderViewController *)self _shouldCreatePhotosButton]
    && !self->__photosButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    BOOL v3 = +[CAMMessagesPhotosButton photosButton];
    photosButton = self->__photosButton;
    self->__photosButton = v3;

    [(CAMMessagesPhotosButton *)self->__photosButton addTarget:self action:sel__handlePhotosButtonReleased_ forControlEvents:64];
    int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedPhotosButtonWithLayoutStyle:v5];
  }
}

- (void)_createDoneButtonIfNecessary
{
  if (!self->__doneButton)
  {
    BOOL v3 = [MEMORY[0x263F5E470] doneButton];
    doneButton = self->__doneButton;
    self->__doneButton = v3;

    [(PUReviewScreenDoneButton *)self->__doneButton addTarget:self action:sel__handleDoneButtonReleased_ forControlEvents:64];
    int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedDoneButtonWithLayoutStyle:v5];
  }
}

- (void)_createApertureButtonIfNecessary
{
  if (!self->__apertureButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    id v3 = objc_alloc(MEMORY[0x263F30678]);
    int v4 = (CEKApertureButton *)objc_msgSend(v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    apertureButton = self->__apertureButton;
    self->__apertureButton = v4;

    [(CEKApertureButton *)self->__apertureButton addTarget:self action:sel__handleApertureButtonTapped_ forControlEvents:64];
    [(CEKApertureButton *)self->__apertureButton setExclusiveTouch:1];
    int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CEKApertureButton *)self->__apertureButton setWantsBackground:v6 == 1];
    id v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    int v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [(CAMViewfinderViewController *)self _defaultZoomFactorForGraphConfiguration:v8];
    -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v7, 0);

    [(CAMViewfinderViewController *)self _embedApertureButtonWithLayoutStyle:v6];
  }
}

- (void)_createIntensityButtonIfNecessary
{
  if (!self->__intensityButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    int v4 = [[CAMIntensityButton alloc] initWithLayoutStyle:v3];
    intensityButton = self->__intensityButton;
    self->__intensityButton = v4;

    [(CAMIntensityButton *)self->__intensityButton addTarget:self action:sel__handleIntensityButtonTapped_ forControlEvents:64];
    [(CAMIntensityButton *)self->__intensityButton setExclusiveTouch:1];
    [(CAMViewfinderViewController *)self _updateIntensityButtonForCurrentState];
    [(CAMViewfinderViewController *)self _embedIntensityButtonWithLayoutStyle:v3];
  }
}

- (UIControl)_primaryShutterControl
{
  int64_t v3 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  int v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v5 = [(CAMViewfinderViewController *)self _shutterButton];
  }
  int64_t v6 = v5;

  return (UIControl *)v6;
}

- (void)_createStillDuringVideoButtonIfNecessary
{
  if (!self->__stillDuringVideoButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    int v4 = +[CUShutterButton smallShutterButtonWithLayoutStyle:v3];
    stillDuringVideoButton = self->__stillDuringVideoButton;
    self->__stillDuringVideoButton = v4;

    [(CUShutterButton *)self->__stillDuringVideoButton addTarget:self action:sel__handleStillDuringVideoButtonPressed_ forControlEvents:1];
    [(CUShutterButton *)self->__stillDuringVideoButton addTarget:self action:sel__handleStillDuringVideoButtonReleased_ forControlEvents:96];
    [(CUShutterButton *)self->__stillDuringVideoButton setMode:0];
    [(CUShutterButton *)self->__stillDuringVideoButton setExclusiveTouch:1];
    [(CAMViewfinderViewController *)self _embedStillDuringVideoButtonWithLayoutStyle:v3];
  }
}

- (void)_createElapsedTimeViewIfNecessary
{
  if (!self->__elapsedTimeView
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    int v4 = [[CAMElapsedTimeView alloc] initWithLayoutStyle:v3];
    elapsedTimeView = self->__elapsedTimeView;
    self->__elapsedTimeView = v4;

    [(CAMViewfinderViewController *)self _embedElapsedTimeViewWithLayoutStyle:v3];
  }
}

- (CAMElapsedTimeView)_targetElapsedTimeView
{
  int64_t v3 = [(CAMViewfinderViewController *)self _elapsedTimeView];
  if (!v3)
  {
    int v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    int64_t v3 = [v4 elapsedTimeView];
  }
  return (CAMElapsedTimeView *)v3;
}

- (void)_destroyHDRButtonIfNecessary
{
  if (self->__HDRButton)
  {
    id v5 = [(CAMViewfinderViewController *)self _bottomBar];
    int64_t v3 = [(CAMViewfinderViewController *)self _topBar];
    [v3 setHDRButton:0];
    [v5 setHDRButton:0];
    HDRButton = self->__HDRButton;
    self->__HDRButton = 0;

    objc_msgSend(v3, "configureForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
    [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:0];
  }
}

- (void)_createOrDestroyHDRButtonIfNecessary
{
  if ([(CAMViewfinderViewController *)self _wantsHDRControlsVisible])
  {
    [(CAMViewfinderViewController *)self _createHDRButtonIfNecessary];
  }
  else
  {
    [(CAMViewfinderViewController *)self _destroyHDRButtonIfNecessary];
  }
}

- (void)_destroyHDRBadgeIfNecessary
{
  if (self->__HDRBadge)
  {
    id v4 = [(CAMViewfinderViewController *)self viewfinderView];
    [v4 setHDRBadge:0];
    HDRBadge = self->__HDRBadge;
    self->__HDRBadge = 0;
  }
}

- (void)_createOrDestroyHDRBadgeIfNecessary
{
  if ([(CAMViewfinderViewController *)self _wantsHDRControlsVisible])
  {
    [(CAMViewfinderViewController *)self _createHDRBadgeIfNecessary];
  }
  else
  {
    [(CAMViewfinderViewController *)self _destroyHDRBadgeIfNecessary];
  }
}

- (void)_createLivePhotoButtonIfNecessary
{
  if (!self->__livePhotoButton
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    id v4 = +[CAMCaptureCapabilities capabilities];
    uint64_t v5 = [v4 isLivePhotoAutoModeSupported];

    int64_t v6 = [[CAMLivePhotoButton alloc] initWithLayoutStyle:v3];
    livePhotoButton = self->__livePhotoButton;
    self->__livePhotoButton = v6;

    [(CAMLivePhotoButton *)self->__livePhotoButton setExclusiveTouch:1];
    [(CAMLivePhotoButton *)self->__livePhotoButton addTarget:self action:sel__handleLivePhotoButtonChangedLivePhotoMode forControlEvents:4096];
    [(CAMLivePhotoButton *)self->__livePhotoButton setAllowsAutomaticMode:v5 needsReloadData:0];
    [(CAMLivePhotoButton *)self->__livePhotoButton reloadData];
    [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:0];
    [(CAMViewfinderViewController *)self _embedLivePhotoButtonWithLayoutStyle:v3];
  }
}

- (void)_createLivePhotoBadgeIfNecessary
{
  if (!self->__livePhotoBadge
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [CAMLivePhotoBadge alloc];
    id v4 = -[CAMLivePhotoBadge initWithFrame:](v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    livePhotoBadge = self->__livePhotoBadge;
    self->__livePhotoBadge = v4;
  }
  int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
  [(CAMViewfinderViewController *)self _embedLivePhotoBadgeWithLayoutStyle:v6];
}

- (void)_createOrDestroySharedLibraryButtonIfNecessary
{
  int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
  id v4 = +[CAMUserPreferences preferences];
  if ([v4 sharedLibrarySwitchEnabled])
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls];

    if (v5)
    {
      if (self->__sharedLibraryButton) {
        return;
      }
      int64_t v6 = [[CAMSharedLibraryButton alloc] initWithLayoutStyle:v3];
      sharedLibraryButton = self->__sharedLibraryButton;
      self->__sharedLibraryButton = v6;

      [(CAMSharedLibraryButton *)self->__sharedLibraryButton setExclusiveTouch:1];
      [(CAMSharedLibraryButton *)self->__sharedLibraryButton addTarget:self action:sel__handleSharedLibraryButton forControlEvents:4096];
      [(CAMExpandableMenuButton *)self->__sharedLibraryButton reloadData];
      int v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      unsigned int v9 = [(CAMViewfinderViewController *)self _shouldShowSharedLibraryButtonForGraphConfiguration:v8];

      [(CAMSharedLibraryButton *)self->__sharedLibraryButton setAlpha:(double)v9];
      [(CAMViewfinderViewController *)self _updateSharedLibraryButtonAnimated:0];
      goto LABEL_8;
    }
  }
  else
  {
  }
  double v10 = self->__sharedLibraryButton;
  if (!v10) {
    return;
  }
  self->__sharedLibraryButton = 0;

LABEL_8:
  [(CAMViewfinderViewController *)self _updateSharedLibraryButtonOnSubviewsForLayoutStyle:v3];
}

- (void)_createOrDestroySharedLibraryBadgeIfNecessary
{
  int64_t v3 = +[CAMUserPreferences preferences];
  if ([v3 sharedLibrarySwitchEnabled])
  {
    BOOL v4 = [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls];

    if (v4)
    {
      if (self->__sharedLibraryBadge) {
        return;
      }
      BOOL v5 = objc_alloc_init(CAMSharedLibraryBadge);
      sharedLibraryBadge = self->__sharedLibraryBadge;
      self->__sharedLibraryBadge = v5;

      id v7 = [(CAMViewfinderViewController *)self _librarySelectionController];
      -[CAMSharedLibraryBadge setSharedLibraryMode:](self->__sharedLibraryBadge, "setSharedLibraryMode:", [v7 sharedLibraryMode]);
      goto LABEL_8;
    }
  }
  else
  {
  }
  id v7 = self->__sharedLibraryBadge;
  if (!v7) {
    return;
  }
  self->__sharedLibraryBadge = 0;
LABEL_8:

  int64_t v8 = [(CAMViewfinderViewController *)self _layoutStyle];
  [(CAMViewfinderViewController *)self _embedSharedLibraryBadgeWithLayoutStyle:v8];
}

- (void)_createShallowDepthOfFieldBadgeIfNecessary
{
  if (!self->__shallowDepthOfFieldBadge)
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus];
    BOOL v4 = [CAMShallowDepthOfFieldBadge alloc];
    BOOL v5 = -[CAMShallowDepthOfFieldBadge initWithFrame:](v4, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    shallowDepthOfFieldBadge = self->__shallowDepthOfFieldBadge;
    self->__shallowDepthOfFieldBadge = v5;

    [(CAMShallowDepthOfFieldBadge *)self->__shallowDepthOfFieldBadge setShallowDepthOfFieldStatus:v3];
    int64_t v7 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedShallowDepthOfFieldBadgeWithLayoutStyle:v7];
  }
}

- (void)_createPortraitModeInstructionLabelIfNecessary
{
  if (!self->__portraitModeInstructionLabel
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [CAMPortraitModeInstructionLabel alloc];
    BOOL v4 = -[CAMInstructionLabel initWithFrame:](v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    portraitModeInstructionLabel = self->__portraitModeInstructionLabel;
    self->__portraitModeInstructionLabel = v4;

    [(CAMInstructionLabel *)self->__portraitModeInstructionLabel setUseModeDialFontSize:1];
    [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
    int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedPortraitModeInstructionLabelWithLayoutStyle:v6];
  }
}

- (void)fullscreenViewfinderDidCreateControlDrawer:(id)a3
{
  BOOL v4 = [a3 controlDrawer];
  [v4 setDelegate:self];

  [(CAMViewfinderViewController *)self _updateControlDrawerContentsVisibilityAnimated:0];
}

- (void)fullscreenViewfinderDidCreateAutoMacroButton:(id)a3
{
  id v4 = a3;
  [(CAMViewfinderViewController *)self _updateAutoMacroButtonAnimated:0];
  id v5 = [v4 autoMacroButton];

  [v5 addTarget:self action:sel__handleAutoMacroButtonTapped_ forControlEvents:64];
}

- (void)fullscreenViewfinderDidCreateDepthEffectSuggestionButton:(id)a3
{
  id v4 = a3;
  [(CAMViewfinderViewController *)self _updateDepthEffectSuggestionButtonAnimated:0];
  id v5 = [v4 depthEffectSuggestionButton];

  [v5 addTarget:self action:sel__handleDepthEffectSuggestionButtonTapped_ forControlEvents:64];
}

- (void)fullscreenViewfinderDidCreatePortraitControls:(id)a3
{
  id v4 = [a3 lightingControl];
  [v4 setDelegate:self];

  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateLightingUIForGraphConfiguration:v5 animated:0];

  int64_t v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateLightingControlFadesForGraphConfiguration:v6 animated:0];

  [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
}

- (void)fullscreenViewfinderDidCreateSpatialCaptureButton:(id)a3
{
  id v4 = [a3 spatialCaptureButton];
  [v4 addTarget:self action:sel__handleSpatialCaptureButtonTapped_ forControlEvents:64];
  objc_msgSend(v4, "setActive:animated:", -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")), 0);
}

- (void)fullscreenViewfinderDidCreateSemanticStyleControls:(id)a3
{
}

- (void)fullscreenViewfinderDidChangeSemanticStyle:(id)a3
{
  id v4 = [a3 semanticStylePicker];
  -[CAMViewfinderViewController _setSelectedSemanticStyleIndex:](self, "_setSelectedSemanticStyleIndex:", [v4 selectedStyleIndex]);

  [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:1];
  id v5 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];
  [v5 didChangeValueForControlType:10];
}

- (void)_updateSelectedSmartStyleFromPicker
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Received request to update style in mode that doesn't support picker", v2, v3, v4, v5, v6);
}

- (void)fullscreenViewfinder:(id)a3 didChangeControlDrawerVisibility:(BOOL)a4 animated:(BOOL)a5 forReason:(int64_t)a6
{
  BOOL v7 = a5;
  if (a4)
  {
    [(CAMViewfinderViewController *)self _dismissOverlays];
    unsigned int v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    double v10 = [v9 controlStatusBar];
    [v10 collapseExpandedIndicatorAnimated:v7];

    double v11 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];

    if (!v11)
    {
      double v12 = [[CAMAnalyticsControlDrawerEvent alloc] initWithReason:a6 captureMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
      [(CAMViewfinderViewController *)self _setAnalyticsControlDrawerEvent:v12];
    }
    id v13 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    [v13 didPresentControlDrawerForReason:a6];
  }
  else
  {
    double v14 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];
    [v14 dismissedControlDrawerWithReason:a6];

    [(CAMViewfinderViewController *)self _setAnalyticsControlDrawerEvent:0];
  }
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v7];
}

- (void)fullscreenViewFinder:(id)a3 willPresentControlDrawerModallyForControlType:(int64_t)a4 reason:(int64_t)a5
{
  int64_t v8 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];

  if (!v8)
  {
    unsigned int v9 = [[CAMAnalyticsControlDrawerEvent alloc] initWithReason:a5 captureMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
    [(CAMViewfinderViewController *)self _setAnalyticsControlDrawerEvent:v9];

    id v10 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];
    [v10 setOpeningControlType:a4];
  }
}

- (void)fullscreenViewFinder:(id)a3 willDismissControlDrawerModallyForControlType:(int64_t)a4 reason:(int64_t)a5
{
  id v6 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];
  [v6 setDismissingControlType:a4];
}

- (void)fullscreenViewfinder:(id)a3 didCreateInstructionLabel:(int64_t)a4
{
  id v6 = a3;
  id v15 = v6;
  switch(a4)
  {
    case 1:
      [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
      goto LABEL_11;
    case 2:
      [(CAMViewfinderViewController *)self _updateQRCodeInstructionLabelForCurrentState];
      goto LABEL_11;
    case 4:
      BOOL v7 = [(CAMViewfinderViewController *)self _captureController];
      uint64_t v8 = [v7 flashCompromise];
      unsigned int v9 = [v15 flashCompromisedInstructionLabel];
      [v9 setCompromise:v8];

      goto LABEL_11;
    case 5:
      [(CAMViewfinderViewController *)self _updateImageAnalysisInstructions];
      goto LABEL_11;
    case 6:
      id v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateMaxRecordingTimeInstructionLabelForGraphConfiguration:v10];
      goto LABEL_8;
    case 7:
      id v10 = (void *)[objc_alloc(MEMORY[0x263F82CB0]) initWithTarget:self action:sel__handleFreeResourcesLabelTapped_];
      double v11 = [v15 freeResourcesInstructionLabel];
      [v11 addGestureRecognizer:v10];

      [(CAMViewfinderViewController *)self _updateFreeResourcesInstructionLabelForCurrentState];
LABEL_8:

      goto LABEL_11;
    case 9:
      BOOL v12 = [(CAMViewfinderViewController *)self _currentMode] == 9;
      id v13 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      objc_msgSend(v13, "setStereoCaptureStatus:useHoldStillStereoLowLightInstruction:animated:", -[CAMViewfinderViewController _stereoCaptureStatus](self, "_stereoCaptureStatus"), v12, 1);

      goto LABEL_11;
    case 10:
      double v14 = [v6 smartStyleCategoryInstructionLabel];
      [v14 setStyle:2];

      [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:0];
LABEL_11:
      id v6 = v15;
      break;
    default:
      break;
  }
}

- (void)fullscreenViewfinder:(id)a3 didChangeExpanded:(BOOL)a4 forDrawerControlOfType:(int64_t)a5 animated:(BOOL)a6 updatePreferredDrawerControl:(BOOL)a7
{
  BOOL v7 = a7;
  BOOL v8 = a6;
  BOOL v10 = a4;
  id v15 = a3;
  switch(a5)
  {
    case 4:
      if (v10 || ![(CAMViewfinderViewController *)self _wantsFilterScrubberVisible]) {
        break;
      }
      [(CAMViewfinderViewController *)self _setWantsFilterScrubberVisible:0 animated:v8];
      if (v7) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 6:
      BOOL v12 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v12, v8);
      goto LABEL_11;
    case 7:
      [(CAMViewfinderViewController *)self _updateIntensityButtonForCurrentState];
      if (!v7) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 8:
      [(CAMViewfinderViewController *)self _updateExposureButtonForCurrentState];
      id v13 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityForGraphConfiguration:v13 animated:v8];

      BOOL v12 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v12 animated:v8];
      goto LABEL_11;
    case 10:
      [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:0];
      double v14 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityForGraphConfiguration:v14 animated:v8];

      [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v8];
      [(CAMViewfinderViewController *)self _updatePreviewControllerPortraitStatus];
      [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Expanding SemanticStyles control"];
      [(CAMViewfinderViewController *)self _updateViewfinderMaterialAnimated:v8];
      if (!v7) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 11:
      [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:0];
      BOOL v12 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityForGraphConfiguration:v12 animated:v8];
LABEL_11:

      break;
    default:
      break;
  }
  if (v7)
  {
LABEL_13:
    if (!v10) {
      a5 = -1;
    }
    [(CAMViewfinderViewController *)self _setPreferredControlToOpenInDrawer:a5 forMode:[(CAMViewfinderViewController *)self _currentMode]];
  }
LABEL_16:
}

- (int64_t)expandedControlTypeForExpandingDrawerInFullscreenViewfinder:(id)a3
{
  uint64_t v4 = +[CAMUserPreferences preferences];
  int v5 = [v4 preservePreferredDrawerControl];

  int64_t result = -1;
  if (v5) {
    int64_t result = [(CAMViewfinderViewController *)self _preferredControlToOpenInDrawerForMode:[(CAMViewfinderViewController *)self _currentMode]];
  }
  if (result == 11)
  {
    BOOL v7 = [(CAMViewfinderViewController *)self _controlDrawer];
    BOOL v8 = [v7 smartStyleButton];
    int v9 = [v8 showDisabled];

    int64_t result = -1;
    if (!v9) {
      return 11;
    }
  }
  if (result == 4)
  {
    [(CAMViewfinderViewController *)self _setWantsFilterScrubberVisible:1 animated:1];
    return 4;
  }
  return result;
}

- (BOOL)fullscreenViewfinderCanUpdatePreviewSemanticStyles:(id)a3
{
  if ([(CAMViewfinderViewController *)self _isReconfiguring]
    || [(CAMViewfinderViewController *)self _hasInFlightConfiguration])
  {
    return 0;
  }
  return [(CAMViewfinderViewController *)self _completedInitialConfiguration];
}

- (void)fullscreenViewfinderDidCreateExternalStorageButton:(id)a3
{
  id v3 = a3;
  uint64_t v4 = [v3 externalStorageButton];
  [v4 setEnabled:0];

  id v5 = [v3 externalStorageButton];

  [v5 setSelected:1];
}

- (void)fullscreenViewfinderDidCreateSpotlightControlPanel:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = [a3 spotlightControlPanel];
  [v4 setDelegate:self];
  id v5 = +[CAMUserPreferences preferences];
  id v6 = [v5 openHalfPressSpotlightControls];

  BOOL v7 = (void *)[v6 mutableCopy];
  [(CAMViewfinderViewController *)self _setOpenHalfPressSpotlightControls:v7];

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v8 = v6;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v14;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(v8);
        }
        objc_msgSend(v4, "setControlType:open:animated:", objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v12++), "integerValue", (void)v13), 1, 0);
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v10);
  }
}

- (void)fullscreenViewfinderDidCreateSpotlightSmartStyleStatusIndicator:(id)a3
{
  id v4 = a3;
  [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:0];
  id v5 = [v4 spotlightSmartStyleStatusIndicator];

  [v5 addTarget:self action:sel__handleSpotlightSmartStyleStatusIndicatorTapped forControlEvents:64];
}

- (void)_handleSpotlightSmartStyleStatusIndicatorTapped
{
  id v2 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v2 presentControlDrawerModally:1 forReason:1 controlType:11];
}

- (void)fullscreenViewfinderDidCreateSmartStyleControls:(id)a3
{
  id v4 = a3;
  objc_initWeak(location, self);
  id v5 = [v4 smartStyleSlider2D];
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 3221225472;
  v24[2] = __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke;
  v24[3] = &unk_263FA1F08;
  objc_copyWeak(&v25, location);
  [v5 setOnValueChanged:v24];

  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  v22[2] = __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_2;
  v22[3] = &unk_263FA0E00;
  objc_copyWeak(&v23, location);
  id v6 = [v4 smartStyleSlider2D];
  [v6 setOnGestureDidBegin:v22];

  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  v20[2] = __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_3;
  v20[3] = &unk_263FA0E00;
  objc_copyWeak(&v21, location);
  BOOL v7 = [v4 smartStyleSlider2D];
  [v7 setOnGestureDidEnd:v20];

  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  v18[2] = __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_4;
  v18[3] = &unk_263FA0938;
  objc_copyWeak(&v19, location);
  id v8 = [v4 smartStyleIntensitySlider];
  [v8 setOnValueChanged:v18];

  uint64_t v9 = (UISwipeGestureRecognizer *)[objc_alloc(MEMORY[0x263F82C38]) initWithTarget:self action:sel__handleSmartStylePickerSwipe_];
  smartStylesSwipeLeftGestureRecognizer = self->__smartStylesSwipeLeftGestureRecognizer;
  self->__smartStylesSwipeLeftGestureRecognizer = v9;

  uint64_t v11 = (UISwipeGestureRecognizer *)[objc_alloc(MEMORY[0x263F82C38]) initWithTarget:self action:sel__handleSmartStylePickerSwipe_];
  smartStylesSwipeRightGestureRecognizer = self->__smartStylesSwipeRightGestureRecognizer;
  self->__smartStylesSwipeRightGestureRecognizer = v11;

  [(UISwipeGestureRecognizer *)self->__smartStylesSwipeLeftGestureRecognizer setDelegate:self];
  [(UISwipeGestureRecognizer *)self->__smartStylesSwipeRightGestureRecognizer setDelegate:self];
  [(UISwipeGestureRecognizer *)self->__smartStylesSwipeLeftGestureRecognizer setDirection:2];
  [(UISwipeGestureRecognizer *)self->__smartStylesSwipeRightGestureRecognizer setDirection:1];
  long long v13 = [(CAMViewfinderViewController *)self view];
  [v13 addGestureRecognizer:self->__smartStylesSwipeLeftGestureRecognizer];

  long long v14 = [(CAMViewfinderViewController *)self view];
  [v14 addGestureRecognizer:self->__smartStylesSwipeRightGestureRecognizer];

  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3221225472;
  v16[2] = __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_5;
  v16[3] = &unk_263FA0E00;
  objc_copyWeak(&v17, location);
  long long v15 = [v4 smartStyleValuesPlatterView];
  [v15 setResetAction:v16];

  [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:0];
  objc_destroyWeak(&v17);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&v23);
  objc_destroyWeak(&v25);
  objc_destroyWeak(location);
}

void __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke(uint64_t a1, double a2, double a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleSmartStylePadValueChanged:", a2, a3);
}

void __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:1];
}

void __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_3(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:1];
}

void __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_4(uint64_t a1, double a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleSmartStyleIntensitySliderChangedValue:a2];
}

void __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_5(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleSmartStyleResetButton];
}

- (void)addChildViewController:(id)a3 toView:(id)a4
{
  id v6 = a4;
  id v8 = a3;
  [(CAMViewfinderViewController *)self addChildViewController:v8];
  BOOL v7 = [v8 view];
  [v6 addSubview:v7];

  [v8 didMoveToParentViewController:self];
}

- (void)_handleSmartStyleIntensitySliderChangedValue:(double)a3
{
  id v5 = [(CAMViewfinderViewController *)self _currentSmartStyle];
  if (v5)
  {
    id v6 = objc_alloc(MEMORY[0x263F306F8]);
    uint64_t v7 = [v5 presetType];
    [v5 toneBias];
    double v9 = v8;
    [v5 colorBias];
    uint64_t v11 = (void *)[v6 initWithPresetType:v7 castIntensity:a3 toneBias:v9 colorBias:v10];
    [(CAMViewfinderViewController *)self _updateSelectedSmartStyle:v11 animateSliders:0];
  }
  else
  {
    uint64_t v12 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController _handleSmartStyleIntensitySliderChangedValue:]();
    }
  }
}

- (void)_handleSmartStylePadValueChanged:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  id v6 = [(CAMViewfinderViewController *)self _currentSmartStyle];
  if (v6)
  {
    +[CAMSmartStyleUtilities colorAndToneBiasForSlider2DValue:limitRangeForSystemStyles:](CAMSmartStyleUtilities, "colorAndToneBiasForSlider2DValue:limitRangeForSystemStyles:", 0, x, y);
    id v7 = objc_alloc(MEMORY[0x263F306F8]);
    uint64_t v8 = [v6 presetType];
    [v6 castIntensity];
    double v9 = objc_msgSend(v7, "initWithPresetType:castIntensity:toneBias:colorBias:", v8);
    [(CAMViewfinderViewController *)self _updateSelectedSmartStyle:v9 animateSliders:0];
  }
  else
  {
    double v10 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController _handleSmartStyleIntensitySliderChangedValue:]();
    }
  }
}

- (void)_updateSelectedSmartStyle:(id)a3 animateSliders:(BOOL)a4
{
  BOOL v4 = a4;
  id v14 = a3;
  id v6 = +[CAMCaptureCapabilities capabilities];
  char v7 = objc_msgSend(v6, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if ((v7 & 8) != 0)
  {
    uint64_t v11 = [(CAMViewfinderViewController *)self _semanticStyles];
    unint64_t v12 = [(CAMViewfinderViewController *)self _selectedSemanticStyleIndex];
    goto LABEL_6;
  }
  if (v7)
  {
    unint64_t v8 = [(CAMViewfinderViewController *)self _smartStyleSystemStyleIndex];
    double v9 = [(CAMViewfinderViewController *)self _semanticStyles];
    unint64_t v10 = [v9 count];

    if (v8 < v10)
    {
      uint64_t v11 = [(CAMViewfinderViewController *)self _semanticStyles];
      unint64_t v12 = [(CAMViewfinderViewController *)self _smartStyleSystemStyleIndex];
LABEL_6:
      [v11 setObject:v14 atIndexedSubscript:v12];
    }
  }
  [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:v4 animateOtherControls:1];
  [(CAMViewfinderViewController *)self _updateSmartStyleOnSession];
  long long v13 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];
  [v13 didChangeValueForControlType:11];
}

- (void)_handleSmartStyleResetButton
{
  id v3 = [(CAMViewfinderViewController *)self _currentSmartStyle];
  if (v3)
  {
    BOOL v4 = [(CAMViewfinderViewController *)self _referenceStyleForSmartStyle:v3];
    [(CAMViewfinderViewController *)self _updateSelectedSmartStyle:v4 animateSliders:1];
  }
  else
  {
    id v5 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController _handleSmartStyleIntensitySliderChangedValue:]();
    }
  }
}

- (void)_handleSmartStyleShutterButtonPressed:(id)a3
{
  BOOL v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: SmartStyle shutter button pressed", v6, 2u);
  }

  id v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  if ([v5 isEnabled])
  {
    [(CAMViewfinderViewController *)self dynamicShutterControlGesturesDidBegin:v5];
    [(CAMViewfinderViewController *)self dynamicShutterControlDidShortPress:v5];
  }
  else
  {
    [(CAMViewfinderViewController *)self shutterControlTouchAttemptedWhileDisabled:v5];
  }
}

- (void)_handleSmartStyleShutterButtonReleased:(id)a3
{
  BOOL v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: SmartStyle shutter button released", v6, 2u);
  }

  id v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  if ([v5 isEnabled]) {
    [(CAMViewfinderViewController *)self dynamicShutterControlGesturesDidEnd:v5];
  }
}

- (void)fullscreenViewfinder:(id)a3 didChangeSmartStyleControlsVisibility:(BOOL)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v16 = a3;
  if (v6)
  {
    unint64_t v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v9 = [(CAMViewfinderViewController *)self _wantsLightingControlForGraphConfiguration:v8];

    if (v9) {
      [(CAMViewfinderViewController *)self _resetPortraitLightingToDefaultAnimated:v5];
    }
    if ([(CAMViewfinderViewController *)self _useCreativeCameraControls])
    {
      unint64_t v10 = [v16 controlStatusBar];
      uint64_t v11 = [v10 secondaryAccessoryControl];

      if (v11)
      {
        unint64_t v12 = [v16 controlStatusBar];
        [v12 setSecondaryAccessoryControl:0 animated:v5];
LABEL_10:
      }
    }
  }
  else if ([(CAMViewfinderViewController *)self _useCreativeCameraControls])
  {
    long long v13 = [v16 controlStatusBar];
    id v14 = [v13 secondaryAccessoryControl];

    if (!v14)
    {
      unint64_t v12 = [v16 controlStatusBar];
      long long v15 = [(CAMViewfinderViewController *)self _doneButton];
      [v12 setSecondaryAccessoryControl:v15 animated:v5];

      goto LABEL_10;
    }
  }
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v5];
  [(CAMViewfinderViewController *)self _updatePreviewControllerPortraitStatus];
  [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"SmartStyles control visibility changed"];
  [(CAMViewfinderViewController *)self _updateViewfinderMaterialAnimated:v5];
  [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:v5];
}

- (void)spotlightControlPanelDidCreateApertureSlider:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v4);
}

- (void)spotlightControlPanel:(id)a3 didChangeValueForSpotlight:(int64_t)a4
{
  id v6 = a3;
  if (a4 == 2)
  {
    id v8 = v6;
    char v7 = [v6 exposureSlider];
    [(CAMViewfinderViewController *)self _handleExposureSliderDidChangeValue:v7];
  }
  else
  {
    if (a4 != 3) {
      goto LABEL_6;
    }
    id v8 = v6;
    char v7 = [v6 apertureSlider];
    [(CAMViewfinderViewController *)self _apertureSliderDidChangeApertureValue:v7];
  }

  id v6 = v8;
LABEL_6:
}

- (void)spotlightControlPanel:(id)a3 didChangeOpenForSpotlight:(int64_t)a4
{
  int v6 = [a3 isControlTypeOpen:a4];
  id v8 = [(CAMViewfinderViewController *)self _openHalfPressSpotlightControls];
  char v7 = [NSNumber numberWithInteger:a4];
  if (v6) {
    [v8 addObject:v7];
  }
  else {
    [v8 removeObject:v7];
  }
}

- (void)_createMetalContextIfNecessary
{
  if (!self->__metalContext)
  {
    id v3 = objc_alloc_init(CAMMetalContext);
    metalContext = self->__metalContext;
    self->__metalContext = v3;
    MEMORY[0x270F9A758](v3, metalContext);
  }
}

- (CAMPortraitModeInstructionLabel)_targetPortraitModeInstructionLabel
{
  id v3 = [(CAMViewfinderViewController *)self _portraitModeInstructionLabel];
  if (!v3)
  {
    id v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    id v3 = [v4 portraitInstructionLabel];
  }
  return (CAMPortraitModeInstructionLabel *)v3;
}

- (CAMQRCodeInstructionLabel)_targetQRCodeInstructionLabel
{
  id v3 = [(CAMViewfinderViewController *)self _qrCodeInstructionLabel];
  if (!v3)
  {
    id v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    id v3 = [v4 qrCodeInstructionLabel];
  }
  return (CAMQRCodeInstructionLabel *)v3;
}

- (void)_createPanoramaViewControllerIfNecessary
{
  if (!self->__panoramaViewController)
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    id v6 = [(CAMViewfinderViewController *)self _captureController];
    id v4 = [[CAMPanoramaViewController alloc] initWithCaptureController:v6 layoutStyle:v3];
    panoramaViewController = self->__panoramaViewController;
    self->__panoramaViewController = v4;

    [(CAMViewfinderViewController *)self addChildViewController:self->__panoramaViewController];
    [(CAMViewfinderViewController *)self _embedPanoramaViewWithLayoutStyle:v3];
  }
}

- (void)_createZoomSliderIfNecessary
{
  if (!self->__zoomSlider)
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v4 = [(CAMViewfinderViewController *)self _wantsZoomSliderForGraphConfiguration:v3];

    if (v4)
    {
      int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
      id v6 = [[CAMZoomSlider alloc] initWithLayoutStyle:v5];
      zoomSlider = self->__zoomSlider;
      self->__zoomSlider = v6;

      [(CAMZoomSlider *)self->__zoomSlider setExclusiveTouch:1];
      [(CAMZoomSlider *)self->__zoomSlider setMinimumValue:0.0];
      LODWORD(v8) = 1.0;
      [(CAMZoomSlider *)self->__zoomSlider setMaximumValue:v8];
      [(CAMZoomSlider *)self->__zoomSlider addTarget:self action:sel__handleTouchDownForZoomSlider_ forControlEvents:1];
      [(CAMZoomSlider *)self->__zoomSlider addTarget:self action:sel__zoomSliderValueDidChange_forEvent_ forControlEvents:4096];
      [(CAMZoomSlider *)self->__zoomSlider setDelegate:self];
      [(CAMZoomSlider *)self->__zoomSlider setAlpha:0.0];
      [(CAMZoomSlider *)self->__zoomSlider setEnabled:[(CAMViewfinderViewController *)self _shouldEnableZoomSlider]];
      [(CAMViewfinderViewController *)self _embedZoomSliderWithLayoutStyle:v5];
      [(CAMViewfinderViewController *)self _updateUIForCaptureOrientationAnimated:0];
    }
  }
}

- (void)_createZoomControlIfNecessary
{
  if (!self->__zoomControl)
  {
    if ([(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
    {
      int64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      BOOL v4 = [(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v3];

      if (v4)
      {
        int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
        id v6 = [[CAMZoomControl alloc] initWithLayoutStyle:v5];
        zoomControl = self->__zoomControl;
        self->__zoomControl = v6;

        [(CAMZoomControl *)self->__zoomControl setDelegate:self];
        [(CAMZoomControl *)self->__zoomControl addTarget:self action:sel__handleTouchDownForZoomControl_ forControlEvents:1];
        double v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
        [(CAMViewfinderViewController *)self _configureZoomControlForGraphConfiguration:v8 animated:0];

        [(CAMZoomControl *)self->__zoomControl setEnabled:[(CAMViewfinderViewController *)self _shouldEnableZoomControl]];
        [(CAMViewfinderViewController *)self _embedZoomControlWithLayoutStyle:v5];
        [(CAMViewfinderViewController *)self _updateUIForCaptureOrientationAnimated:0];
      }
    }
  }
}

- (void)_createOrDestroyLevelViewModelIfNecessary
{
  id v11 = +[CAMUserPreferences preferences];
  int v3 = [v11 shouldShowHorizonLevelView];
  BOOL v4 = [(CAMViewfinderViewController *)self _isSpatialVideoMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  int v5 = v3 | v4 | [v11 shouldShowLevelView];
  id v6 = [(CAMViewfinderViewController *)self _levelViewModel];

  if (v5 == 1 && v6 == 0)
  {
    unint64_t v10 = objc_alloc_init(CAMLevelViewModel);
    levelViewModel = self->__levelViewModel;
    self->__levelViewModel = v10;
  }
  else
  {
    if (v6) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    if (v8) {
      goto LABEL_12;
    }
    levelViewModel = self->__levelViewModel;
    self->__levelViewModel = 0;
  }

LABEL_12:
}

- (void)_createLevelViewIfNecessary
{
  if (!self->__levelView)
  {
    int v3 = [[CAMLevelIndicatorView alloc] initWithViewModel:self->__levelViewModel];
    levelView = self->__levelView;
    self->__levelView = v3;

    int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedLevelViewWithLayoutStyle:v5];
  }
}

- (void)_createHorizonLevelViewIfNecessary
{
  if (!self->__horizonLevelView)
  {
    int v3 = [[CAMHorizonLevelView alloc] initWithViewModel:self->__levelViewModel];
    horizonLevelView = self->__horizonLevelView;
    self->__horizonLevelView = v3;

    [(CAMHorizonLevelView *)self->__horizonLevelView setDelegate:self];
    [(CAMViewfinderViewController *)self _embedHorizonLevelView];
  }
}

- (void)_destroyHorizonLevelViewIfNecessary
{
  if (self->__horizonLevelView)
  {
    [(CAMViewfinderViewController *)self _unembedHorizonLevelView];
    horizonLevelView = self->__horizonLevelView;
    self->__horizonLevelView = 0;
  }
}

- (void)_createVideoConfigurationStatusIndicatorIfNecessary
{
  if (!self->__videoConfigurationStatusIndicator
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    int64_t v3 = [(CAMViewfinderViewController *)self _layoutStyle];
    BOOL v4 = [[CAMVideoConfigurationStatusIndicator alloc] initWithLayoutStyle:v3];
    videoConfigurationStatusIndicator = self->__videoConfigurationStatusIndicator;
    self->__videoConfigurationStatusIndicator = v4;

    [(CAMVideoConfigurationStatusIndicator *)self->__videoConfigurationStatusIndicator setTouchDelegate:self];
    id v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [(CAMViewfinderViewController *)self _updateVideoConfigurationStatusIndicatorForGraphConfiguration:v8 animated:0];
    [(CAMViewfinderViewController *)self _embedVideoConfigurationStatusIndicatorWithLayoutStyle:v3];
    if ([(CAMViewfinderViewController *)self _shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:v8])
    {
      double v6 = 0.0;
    }
    else
    {
      double v6 = 1.0;
    }
    char v7 = [(CAMViewfinderViewController *)self _videoConfigurationStatusIndicator];
    [v7 setAlpha:v6];
  }
}

- (CAMVideoConfigurationStatusIndicator)_targetVideoConfigurationStatusIndicator
{
  int64_t v3 = [(CAMViewfinderViewController *)self _videoConfigurationStatusIndicator];
  if (!v3)
  {
    BOOL v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    int64_t v5 = [v4 controlStatusBar];
    int64_t v3 = [v5 videoConfigurationIndicator];
  }
  return (CAMVideoConfigurationStatusIndicator *)v3;
}

- (void)_createUtilityBarIfNecessary
{
  if (!self->__utilityBar)
  {
    int64_t v3 = [CAMUtilityBar alloc];
    BOOL v4 = -[CAMUtilityBar initWithFrame:](v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    utilityBar = self->__utilityBar;
    self->__utilityBar = v4;

    double v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v6];

    [(CAMUtilityBar *)self->__utilityBar setAlpha:(double)!v7];
    int64_t v8 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedUtilityBarWithLayoutStyle:v8];
  }
}

- (void)_createFilterScrubberViewIfNecessary
{
  int64_t v3 = +[CAMCaptureCapabilities capabilities];
  char v4 = [v3 isCTMSupported];

  if ((v4 & 1) == 0)
  {
    [(CAMViewfinderViewController *)self _createUtilityBarIfNecessary];
    if (!self->__filterScrubberView)
    {
      id v5 = objc_alloc(MEMORY[0x263F30710]);
      double v6 = (CEKWheelScrubberView *)objc_msgSend(v5, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
      filterScrubberView = self->__filterScrubberView;
      self->__filterScrubberView = v6;

      [(CEKWheelScrubberView *)self->__filterScrubberView setDelegate:self];
      id v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateFilterScrubberForGraphConfiguration:v8];
      [(CAMViewfinderViewController *)self _embedFilterScrubberViewWithLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]];
      [(CUCaptureController *)self->__captureController registerVideoThumbnailContentsDelegate:self];
    }
  }
}

- (void)_destroyFilterScrubberViewIfNecessary
{
  if (self->__filterScrubberView)
  {
    [(CUCaptureController *)self->__captureController unregisterVideoThumbnailContentsDelegate:self];
    [(CAMViewfinderViewController *)self set_filterScrubberLayerContents:0];
    filterScrubberView = self->__filterScrubberView;
    self->__filterScrubberView = 0;
  }
}

- (void)_createFilterNameBadgeIfNecessary
{
  if (!self->__filterNameBadge)
  {
    int64_t v3 = [CAMFilterNameBadge alloc];
    char v4 = -[CAMFilterNameBadge initWithFrame:](v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    filterNameBadge = self->__filterNameBadge;
    self->__filterNameBadge = v4;

    double v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideFilterNameBadgeForGraphConfiguration:v6];

    [(CAMFilterNameBadge *)self->__filterNameBadge setAlpha:(double)!v7];
    [(CAMViewfinderViewController *)self _updateFilterNameBadgeAnimated:0];
    int64_t v8 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedFilterNameBadgeWithLayoutStyle:v8];
  }
}

- (void)_createPortraitApertureSliderIfNecessary
{
  [(CAMViewfinderViewController *)self _createUtilityBarIfNecessary];
  if (!self->__portraitApertureSlider)
  {
    int64_t v3 = (CEKApertureSlider *)objc_alloc_init(MEMORY[0x263F30680]);
    portraitApertureSlider = self->__portraitApertureSlider;
    self->__portraitApertureSlider = v3;

    [(CEKApertureSlider *)self->__portraitApertureSlider addTarget:self action:sel__apertureSliderDidChangeApertureValue_ forControlEvents:4096];
    int64_t v5 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedPortraitApertureSliderWithLayoutStyle:v5];
  }
}

- (void)_createPortraitIntensitySliderIfNecessary
{
  [(CAMViewfinderViewController *)self _createUtilityBarIfNecessary];
  if (!self->__portraitIntensitySlider)
  {
    CAMLocalizedFrameworkString(@"PORTRAIT_INTENSITY_SLIDER_TITLE", 0);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    int64_t v3 = (CEKSlider *)[objc_alloc(MEMORY[0x263F306F0]) initWithTitle:v7];
    portraitIntensitySlider = self->__portraitIntensitySlider;
    self->__portraitIntensitySlider = v3;

    [(CEKSlider *)self->__portraitIntensitySlider setSliderVerticalAlignment:2];
    int64_t v5 = self->__portraitIntensitySlider;
    double v6 = [MEMORY[0x263F825C8] blackColor];
    [(CEKSlider *)v5 setOpaqueGradientsWithColor:v6];

    [(CEKSlider *)self->__portraitIntensitySlider setTitleAlignment:0];
    [(CEKSlider *)self->__portraitIntensitySlider setValueLabelVisibility:2];
    [(CAMViewfinderViewController *)self _updatePortraitIntensitySliderForCurrentState];
    [(CEKSlider *)self->__portraitIntensitySlider addTarget:self action:sel__handleIntensitySliderDidChangeValue_ forControlEvents:4096];
    [(CAMViewfinderViewController *)self _embedPortraitIntensitySliderWithLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]];
  }
}

- (void)_createLightingControlIfNecessary
{
  if (!self->__lightingControl
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    id v3 = objc_alloc(MEMORY[0x263F306D0]);
    char v4 = (CEKLightingControl *)objc_msgSend(v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    lightingControl = self->__lightingControl;
    self->__lightingControl = v4;

    [(CEKLightingControl *)self->__lightingControl setDelegate:self];
    [(CEKLightingControl *)self->__lightingControl preloadEffectChangeAnimation];
    int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedLightingControlWithLayoutStyle:v6];
  }
}

- (void)_createLightingNameBadgeIfNecessary
{
  if (!self->__lightingNameBadge
    && [(CAMViewfinderViewController *)self _shouldCreateAndEmbedControls])
  {
    id v3 = objc_alloc(MEMORY[0x263F306E0]);
    char v4 = (CEKLightingNameBadge *)objc_msgSend(v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    lightingNameBadge = self->__lightingNameBadge;
    self->__lightingNameBadge = v4;

    int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
    [(CAMViewfinderViewController *)self _embedLightingNameBadgeWithLayoutStyle:v6];
  }
}

- (void)_unembedAndDestroyAllControls
{
  id v35 = [(CAMViewfinderViewController *)self _topBar];
  [v35 setFlashButton:0];
  [v35 setElapsedTimeView:0];
  [v35 setHDRButton:0];
  [v35 setFilterButton:0];
  [v35 setApertureButton:0];
  [v35 setTimerButton:0];
  [v35 setLivePhotoButton:0];
  [v35 setVideoConfigurationStatusIndicator:0];
  id v3 = [(CAMViewfinderViewController *)self _utilityBar];
  [v3 setFilterScrubberView:0];
  char v4 = [(CAMViewfinderViewController *)self _bottomBar];
  [v4 setShutterButton:0];
  [v4 setStillDuringVideoButton:0];
  [v4 setModeDial:0];
  [v4 setImageWell:0];
  [v4 setReviewButton:0];
  [v4 setFlipButton:0];
  [v4 setFlashButton:0];
  [v4 setHDRButton:0];
  [v4 setTimerButton:0];
  [v4 setLivePhotoButton:0];
  [v4 setUtilityBar:0];
  int64_t v5 = [(CAMViewfinderViewController *)self viewfinderView];
  [v5 setTopBar:0];
  [v5 setBottomBar:0];
  [v5 setShutterButton:0];
  [v5 setFlipButton:0];
  [v5 setFlashBadge:0];
  [v5 setHDRBadge:0];
  [v5 setFocusAndExposureLockBadge:0];
  [v5 setLivePhotoBadge:0];
  [v5 setShallowDepthOfFieldBadge:0];
  [v5 setPortraitModeInstructionLabel:0];
  [v5 setQrCodeInstructionLabel:0];
  [v5 setElapsedTimeView:0];
  [v5 setBurstIndicatorView:0];
  [v5 setTimerIndicatorView:0];
  [v5 setPanoramaView:0];
  [v5 setZoomSlider:0];
  [v5 setZoomControl:0];
  [v5 setFilterNameBadge:0];
  flashButton = self->__flashButton;
  self->__flashButton = 0;

  elapsedTimeView = self->__elapsedTimeView;
  self->__elapsedTimeView = 0;

  HDRButton = self->__HDRButton;
  self->__HDRButton = 0;

  filterButton = self->__filterButton;
  self->__filterButton = 0;

  apertureButton = self->__apertureButton;
  self->__apertureButton = 0;

  timerButton = self->__timerButton;
  self->__timerButton = 0;

  livePhotoButton = self->__livePhotoButton;
  self->__livePhotoButton = 0;

  sharedLibraryButton = self->__sharedLibraryButton;
  self->__sharedLibraryButton = 0;

  videoConfigurationStatusIndicator = self->__videoConfigurationStatusIndicator;
  self->__videoConfigurationStatusIndicator = 0;

  shutterButton = self->__shutterButton;
  self->__shutterButton = 0;

  stillDuringVideoButton = self->__stillDuringVideoButton;
  self->__stillDuringVideoButton = 0;

  modeDial = self->__modeDial;
  self->__modeDial = 0;

  imageWell = self->__imageWell;
  self->__imageWell = 0;

  reviewButton = self->__reviewButton;
  self->__reviewButton = 0;

  flipButton = self->__flipButton;
  self->__flipButton = 0;

  topBar = self->__topBar;
  self->__topBar = 0;

  bottomBar = self->__bottomBar;
  self->__bottomBar = 0;

  utilityBar = self->__utilityBar;
  self->__utilityBar = 0;

  flashBadge = self->__flashBadge;
  self->__flashBadge = 0;

  HDRBadge = self->__HDRBadge;
  self->__HDRBadge = 0;

  focusAndExposureLockBadge = self->__focusAndExposureLockBadge;
  self->__focusAndExposureLockBadge = 0;

  livePhotoBadge = self->__livePhotoBadge;
  self->__livePhotoBadge = 0;

  shallowDepthOfFieldBadge = self->__shallowDepthOfFieldBadge;
  self->__shallowDepthOfFieldBadge = 0;

  portraitModeInstructionLabel = self->__portraitModeInstructionLabel;
  self->__portraitModeInstructionLabel = 0;

  qrCodeInstructionLabel = self->__qrCodeInstructionLabel;
  self->__qrCodeInstructionLabel = 0;

  burstIndicatorView = self->__burstIndicatorView;
  self->__burstIndicatorView = 0;

  timerIndicatorView = self->__timerIndicatorView;
  self->__timerIndicatorView = 0;

  filterScrubberView = self->__filterScrubberView;
  self->__filterScrubberView = 0;

  filterNameBadge = self->__filterNameBadge;
  self->__filterNameBadge = 0;

  [(CAMViewfinderViewController *)self _destroyGridViewIfNecessary];
  [(CAMViewfinderViewController *)self _destroyLevelViewIfNecessary];
  [(CAMViewfinderViewController *)self _destroyFilterScrubberViewIfNecessary];
}

- (void)_destroyGestureRecognizersRequiringStandardControls
{
  id v20 = [(CAMViewfinderViewController *)self viewfinderView];
  id v3 = [(CAMViewfinderViewController *)self _previousModeGestureRecognizer];
  [v20 removeGestureRecognizer:v3];
  previousModeGestureRecognizer = self->__previousModeGestureRecognizer;
  self->__previousModeGestureRecognizer = 0;

  int64_t v5 = [(CAMViewfinderViewController *)self _nextModeGestureRecognizer];
  [v20 removeGestureRecognizer:v5];
  nextModeGestureRecognizer = self->__nextModeGestureRecognizer;
  self->__nextModeGestureRecognizer = 0;

  id v7 = [(CAMViewfinderViewController *)self _swipeUpGestureRecognizer];
  [v20 removeGestureRecognizer:v7];
  swipeUpGestureRecognizer = self->__swipeUpGestureRecognizer;
  self->__swipeUpGestureRecognizer = 0;

  BOOL v9 = [(CAMViewfinderViewController *)self _swipeDownGestureRecognizer];
  [v20 removeGestureRecognizer:v9];
  swipeDownGestureRecognizer = self->__swipeDownGestureRecognizer;
  self->__swipeDownGestureRecognizer = 0;

  id v11 = [(CAMViewfinderViewController *)self _previousFilterGestureRecognizer];
  [v20 removeGestureRecognizer:v11];
  previousFilterGestureRecognizer = self->__previousFilterGestureRecognizer;
  self->__previousFilterGestureRecognizer = 0;

  long long v13 = [(CAMViewfinderViewController *)self _nextFilterGestureRecognizer];
  [v20 removeGestureRecognizer:v13];
  nextFilterGestureRecognizer = self->__nextFilterGestureRecognizer;
  self->__nextFilterGestureRecognizer = 0;

  long long v15 = [(CAMViewfinderViewController *)self _cameraRollSwipeUpGestureRecognizer];
  [v20 removeGestureRecognizer:v15];
  cameraRollSwipeUpGestureRecognizer = self->__cameraRollSwipeUpGestureRecognizer;
  self->__cameraRollSwipeUpGestureRecognizer = 0;

  id v17 = [(CAMViewfinderViewController *)self _cameraRollController];
  uint64_t v18 = [v17 previewGestureRecognizer];

  id v19 = [v18 view];
  [v19 removeGestureRecognizer:v18];
}

- (void)_embedAllControlsWithLayoutStyle:(int64_t)a3
{
  [(CAMViewfinderViewController *)self _embedFlashButtonWithLayoutStyle:"_embedFlashButtonWithLayoutStyle:"];
  [(CAMViewfinderViewController *)self _embedFlashBadgeWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedElapsedTimeViewWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedHDRButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedHDRBadgeWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedFocusAndExposureLockBadgeWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedLivePhotoButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _updateSharedLibraryButtonOnSubviewsForLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedSharedLibraryBadgeWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedLivePhotoBadgeWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedShallowDepthOfFieldBadgeWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedPortraitModeInstructionLabelWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedQRCodeInstructionLabelWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedFlipButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedTimerButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedTimerIndicatorViewWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedShutterButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedStillDuringVideoButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedModeDialWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedImageWellWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedReviewButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedCreativeCameraButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedDoneButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedFilterButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedApertureButtonWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedBurstIndicatorViewWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedPanoramaViewWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedZoomSliderWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedZoomControlWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedGridViewWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedLevelViewWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedVideoConfigurationStatusIndicatorWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedUtilityBarWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedFilterScrubberViewWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedFilterNameBadgeWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedLightingControlWithLayoutStyle:a3];
  [(CAMViewfinderViewController *)self _embedLightingNameBadgeWithLayoutStyle:a3];
}

- (void)_embedElapsedTimeViewWithLayoutStyle:(int64_t)a3
{
  id v10 = [(CAMViewfinderViewController *)self viewfinderView];
  int64_t v5 = [(CAMViewfinderViewController *)self _topBar];
  int64_t v6 = [(CAMViewfinderViewController *)self _elapsedTimeView];
  BOOL v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  if (a3 == 2)
  {
    [v5 setElapsedTimeView:0];
    int64_t v8 = v10;
    BOOL v9 = 0;
  }
  else
  {
    if (v7)
    {
      [v5 setElapsedTimeView:0];
      int64_t v8 = v10;
    }
    else
    {
      [v10 setElapsedTimeView:0];
      int64_t v8 = v5;
    }
    BOOL v9 = v6;
  }
  [v8 setElapsedTimeView:v9];
}

- (void)_embedLivePhotoButtonWithLayoutStyle:(int64_t)a3
{
  id v11 = [(CAMViewfinderViewController *)self _livePhotoButton];
  int64_t v5 = [(CAMViewfinderViewController *)self _topBar];
  int64_t v6 = [(CAMViewfinderViewController *)self _bottomBar];
  BOOL v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  BOOL v8 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v8)
  {
    [v5 setLivePhotoButton:0];
    BOOL v9 = v6;
    id v10 = 0;
  }
  else
  {
    if (v7)
    {
      [v5 setLivePhotoButton:0];
      BOOL v9 = v6;
    }
    else
    {
      [v6 setLivePhotoButton:0];
      BOOL v9 = v5;
    }
    id v10 = v11;
  }
  [v9 setLivePhotoButton:v10];
}

- (void)_updateSharedLibraryButtonOnSubviewsForLayoutStyle:(int64_t)a3
{
  id v11 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
  int64_t v5 = [(CAMViewfinderViewController *)self _topBar];
  int64_t v6 = [(CAMViewfinderViewController *)self _bottomBar];
  BOOL v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  BOOL v8 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v8)
  {
    [v5 setSharedLibraryButton:0];
    BOOL v9 = v6;
    id v10 = 0;
  }
  else
  {
    if (v7)
    {
      [v5 setSharedLibraryButton:0];
      BOOL v9 = v6;
    }
    else
    {
      [v6 setSharedLibraryButton:0];
      BOOL v9 = v5;
    }
    id v10 = v11;
  }
  [v9 setSharedLibraryButton:v10];
}

- (void)_embedSharedLibraryBadgeWithLayoutStyle:(int64_t)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (v4)
  {
    id v6 = 0;
  }
  else
  {
    id v6 = [(CAMViewfinderViewController *)self _sharedLibraryBadge];
  }
  int64_t v5 = [(CAMViewfinderViewController *)self viewfinderView];
  [v5 setSharedLibraryBadge:v6];

  if (!v4)
  {
  }
}

- (void)_embedLivePhotoBadgeWithLayoutStyle:(int64_t)a3
{
  id v6 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v4 = [(CAMViewfinderViewController *)self _livePhotoBadge];
  if ([(CAMViewfinderViewController *)self isEmulatingImagePicker]) {
    int64_t v5 = 0;
  }
  else {
    int64_t v5 = v4;
  }
  [v6 setLivePhotoBadge:v5];
}

- (void)_embedShallowDepthOfFieldBadgeWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  int64_t v5 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v5;
  }
  [v9 setShallowDepthOfFieldBadge:v8];
}

- (void)_embedPortraitModeInstructionLabelWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  int64_t v5 = [(CAMViewfinderViewController *)self _portraitModeInstructionLabel];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v5;
  }
  [v9 setPortraitModeInstructionLabel:v8];
}

- (void)_embedStillDuringVideoButtonWithLayoutStyle:(int64_t)a3
{
  id v10 = [(CAMViewfinderViewController *)self viewfinderView];
  int64_t v5 = [v10 bottomBar];
  BOOL v6 = [(CAMViewfinderViewController *)self _stillDuringVideoButton];
  BOOL v7 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v7) {
    id v9 = 0;
  }
  else {
    id v9 = v6;
  }
  [v5 setStillDuringVideoButton:v9];
}

- (void)_embedReviewButtonWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  int64_t v5 = [v9 bottomBar];
  uint64_t v6 = [(CAMViewfinderViewController *)self _reviewButton];
  BOOL v7 = (void *)v6;
  if (a3 == 2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  [v5 setReviewButton:v8];
  if (v7) {
    [v5 setImageWell:0];
  }
}

- (void)_embedCreativeCameraButtonWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  int64_t v5 = [v9 bottomBar];
  uint64_t v6 = [(CAMViewfinderViewController *)self _creativeCameraButton];
  BOOL v7 = (void *)v6;
  if (a3 == 2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  [v5 setCreativeCameraButton:v8];
  if (v7)
  {
    [v5 setReviewButton:0];
    [v5 setImageWell:0];
  }
}

- (void)_embedPhotosButtonWithLayoutStyle:(int64_t)a3
{
  if ((unint64_t)(a3 - 1) >= 3)
  {
    if (a3 != 4 && a3) {
      return;
    }
    id v5 = [(CAMViewfinderViewController *)self _photosButton];
    BOOL v4 = [(CAMViewfinderViewController *)self _topBar];
    [v4 setPhotosButton:v5];
  }
  else
  {
    id v5 = [(CAMViewfinderViewController *)self _topBar];
    [v5 setPhotosButton:0];
  }
}

- (void)_embedDoneButtonWithLayoutStyle:(int64_t)a3
{
  id v10 = [(CAMViewfinderViewController *)self _doneButton];
  id v5 = [(CAMViewfinderViewController *)self _topBar];
  uint64_t v6 = [(CAMViewfinderViewController *)self _bottomBar];
  BOOL v7 = v6;
  switch(a3)
  {
    case 0:
    case 4:
      [v6 setDoneButton:0];
      uint64_t v8 = v5;
      goto LABEL_5;
    case 1:
      [v5 setDoneButton:0];
      uint64_t v8 = v7;
LABEL_5:
      id v9 = v10;
      goto LABEL_6;
    case 2:
    case 3:
      [v5 setDoneButton:0];
      uint64_t v8 = v7;
      id v9 = 0;
LABEL_6:
      [v8 setDoneButton:v9];
      break;
    default:
      break;
  }
}

- (void)_embedApertureButtonWithLayoutStyle:(int64_t)a3
{
  id v5 = [(CAMViewfinderViewController *)self viewfinderView];
  id v12 = [v5 topBar];

  uint64_t v6 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v7 = [v6 bottomBar];

  BOOL v8 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  BOOL v9 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v9)
  {
    [v12 setApertureButton:0];
  }
  else
  {
    if (v8)
    {
      [v12 setApertureButton:0];
      id v10 = [(CAMViewfinderViewController *)self _apertureButton];
      [v7 setApertureButton:v10];

      goto LABEL_8;
    }
    id v11 = [(CAMViewfinderViewController *)self _apertureButton];
    [v12 setApertureButton:v11];
  }
  [v7 setApertureButton:0];
LABEL_8:
}

- (void)_embedIntensityButtonWithLayoutStyle:(int64_t)a3
{
  id v5 = [(CAMViewfinderViewController *)self viewfinderView];
  id v9 = [v5 topBar];

  BOOL v6 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  BOOL v7 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v7 || v6)
  {
    [v9 setIntensityButton:0];
  }
  else
  {
    BOOL v8 = [(CAMViewfinderViewController *)self _intensityButton];
    [v9 setIntensityButton:v8];
  }
}

- (void)_embedPanoramaViewWithLayoutStyle:(int64_t)a3
{
  id v11 = [(CAMViewfinderViewController *)self viewfinderView];
  id v5 = [(CAMViewfinderViewController *)self _panoramaViewController];
  BOOL v6 = [v5 view];
  BOOL v7 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (v11)
  {
    int v8 = a3 == 2 || v7;
    if (v8 == 1) {
      id v9 = 0;
    }
    else {
      id v9 = v6;
    }
    [v11 setPanoramaView:v9];
  }
  else
  {
    id v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v10 setPanoramaView:v6];
  }
}

- (void)_embedZoomSliderWithLayoutStyle:(int64_t)a3
{
  id v7 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v5 = [(CAMViewfinderViewController *)self _shouldUseZoomControlInsteadOfSlider];
  zoomSlider = 0;
  if (a3 != 2 && !v5) {
    zoomSlider = self->__zoomSlider;
  }
  [v7 setZoomSlider:zoomSlider];
}

- (void)_embedZoomControlWithLayoutStyle:(int64_t)a3
{
  BOOL v5 = [(CAMViewfinderViewController *)self viewfinderView];
  if (a3 == 2) {
    zoomControl = 0;
  }
  else {
    zoomControl = self->__zoomControl;
  }
  id v7 = v5;
  [v5 setZoomControl:zoomControl];
}

- (void)_embedGridViewWithLayoutStyle:(int64_t)a3
{
  BOOL v5 = [(CAMViewfinderViewController *)self _previewViewController];
  id v10 = [v5 previewView];

  BOOL v6 = [(CAMViewfinderViewController *)self _gridView];
  BOOL v7 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v7) {
    id v9 = 0;
  }
  else {
    id v9 = v6;
  }
  [v10 setGridView:v9];
}

- (void)_unembedGridView
{
  id v3 = [(CAMViewfinderViewController *)self _previewViewController];
  id v5 = [v3 previewView];

  [v5 setGridView:0];
  BOOL v4 = [(CAMViewfinderViewController *)self _gridView];
  [v4 removeFromSuperview];
}

- (void)_embedLevelViewWithLayoutStyle:(int64_t)a3
{
  id v5 = [(CAMViewfinderViewController *)self _previewViewController];
  id v9 = [v5 previewView];

  uint64_t v6 = [(CAMViewfinderViewController *)self _levelView];
  BOOL v7 = (void *)v6;
  if (a3 == 2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  [v9 setLevelView:v8];
}

- (void)_unembedLevelView
{
  id v3 = [(CAMViewfinderViewController *)self _previewViewController];
  id v5 = [v3 previewView];

  [v5 setLevelView:0];
  BOOL v4 = [(CAMViewfinderViewController *)self _levelView];
  [v4 removeFromSuperview];
}

- (void)_embedHorizonLevelView
{
  id v3 = [(CAMViewfinderViewController *)self _previewViewController];
  id v5 = [v3 previewView];

  BOOL v4 = [(CAMViewfinderViewController *)self _horizonLevelView];
  [v5 setHorizonLevelView:v4];
}

- (void)_unembedHorizonLevelView
{
  id v3 = [(CAMViewfinderViewController *)self _previewViewController];
  id v5 = [v3 previewView];

  [v5 setHorizonLevelView:0];
  BOOL v4 = [(CAMViewfinderViewController *)self _horizonLevelView];
  [v4 removeFromSuperview];
}

- (void)_embedVideoConfigurationStatusIndicatorWithLayoutStyle:(int64_t)a3
{
  id v13 = [(CAMViewfinderViewController *)self _videoConfigurationStatusIndicator];
  id v5 = [(CAMViewfinderViewController *)self viewfinderView];
  uint64_t v6 = [(CAMViewfinderViewController *)self _topBar];
  BOOL v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  BOOL v8 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  int v9 = a3 == 2 || v8;
  if (v7) {
    id v10 = v13;
  }
  else {
    id v10 = 0;
  }
  if (v9 | v7) {
    id v11 = 0;
  }
  else {
    id v11 = v13;
  }
  if (v9) {
    id v12 = 0;
  }
  else {
    id v12 = v10;
  }
  [v6 setVideoConfigurationStatusIndicator:v11];
  [v5 setVideoConfigurationStatusIndicator:v12];
}

- (void)_embedUtilityBarWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self _utilityBar];
  id v5 = [(CAMViewfinderViewController *)self _bottomBar];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    id v8 = 0;
  }
  else {
    id v8 = v9;
  }
  [v5 setUtilityBar:v8];
}

- (void)_embedFilterScrubberViewWithLayoutStyle:(int64_t)a3
{
  id v11 = [(CAMViewfinderViewController *)self _filterScrubberView];
  id v5 = [(CAMViewfinderViewController *)self _utilityBar];
  BOOL v6 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:a3];
  BOOL v7 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  id v8 = [(CAMViewfinderViewController *)self _controlDrawer];

  if (!v8)
  {
    int v9 = a3 == 2 || v7;
    if (v9 | v6) {
      id v10 = 0;
    }
    else {
      id v10 = v11;
    }
    [v5 setFilterScrubberView:v10];
  }
}

- (void)_embedFilterNameBadgeWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  id v5 = [(CAMViewfinderViewController *)self _filterNameBadge];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    id v8 = 0;
  }
  else {
    id v8 = v5;
  }
  [v9 setFilterNameBadge:v8];
}

- (void)_embedPortraitApertureSliderWithLayoutStyle:(int64_t)a3
{
  id v7 = [(CAMViewfinderViewController *)self _utilityBar];
  BOOL v5 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v5)
  {
    [v7 setApertureSlider:0];
  }
  else
  {
    BOOL v6 = [(CAMViewfinderViewController *)self _portraitApertureSlider];
    [v7 setApertureSlider:v6];
  }
}

- (void)_embedPortraitIntensitySliderWithLayoutStyle:(int64_t)a3
{
  id v7 = [(CAMViewfinderViewController *)self _utilityBar];
  BOOL v5 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v5)
  {
    [v7 setIntensitySlider:0];
  }
  else
  {
    BOOL v6 = [(CAMViewfinderViewController *)self _portraitIntensitySlider];
    [v7 setIntensitySlider:v6];
  }
}

- (void)_embedLightingControlWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v5 = [(CAMViewfinderViewController *)self _lightingControl];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    id v8 = 0;
  }
  else {
    id v8 = v5;
  }
  [v9 setLightingControl:v8];
}

- (void)_embedLightingNameBadgeWithLayoutStyle:(int64_t)a3
{
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v5 = [(CAMViewfinderViewController *)self _lightingNameBadge];
  BOOL v6 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (a3 == 2 || v6) {
    id v8 = 0;
  }
  else {
    id v8 = v5;
  }
  [v9 setLightingNameBadge:v8];
}

- (BOOL)_shouldAllowControlDrawerForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingVideo];
  char v7 = [v5 isCapturingBurst];
  char v8 = [v5 isCapturingTimelapse];
  BOOL v9 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  id v10 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  BOOL v11 = -[CAMViewfinderViewController _shouldDisableModeForGraphConfiguration:callActive:](self, "_shouldDisableModeForGraphConfiguration:callActive:", v4, [v10 isCallActive]);

  id v12 = [(CAMViewfinderViewController *)self _controlTypesForGraphConfiguration:v4];

  uint64_t v13 = [v12 count];
  BOOL v14 = !v11;
  if (!v13) {
    BOOL v14 = 0;
  }
  if (v9) {
    BOOL v14 = 0;
  }
  if (v8) {
    BOOL v14 = 0;
  }
  if (v7) {
    BOOL v14 = 0;
  }
  BOOL v15 = (v6 & 1) == 0 && v14;

  return v15;
}

- (BOOL)_shouldAllowControlDrawerToggleForGraphConfiguration:(id)a3 orientation:(int64_t)a4
{
  id v6 = a3;
  BOOL v7 = [(CAMViewfinderViewController *)self _shouldAllowControlDrawerForGraphConfiguration:v6];
  BOOL v8 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v9 = [(CAMViewfinderViewController *)self _shouldHideElapsedTimeViewForGraphConfiguration:v6 orientation:a4];

  id v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v11 = [v10 smartStyleControlsVisible];

  char v12 = (unint64_t)(a4 - 3) < 2 || v9;
  char v13 = v12 & (v11 ^ 1);
  if (v8) {
    char v13 = 0;
  }
  if (v7) {
    return v13;
  }
  else {
    return 0;
  }
}

- (BOOL)_isMenuButtonConflictingWithView:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _topBar];
    char v6 = [v5 _shouldExpandButtonsHorizontally];
    BOOL v7 = [v5 _expandedMenuButton];
    BOOL v8 = [(CAMViewfinderViewController *)self _bottomBar];
    BOOL v9 = [v8 _expandedMenuButton];

    if (v7)
    {
      if (v9) {
        char v10 = 0;
      }
      else {
        char v10 = v6;
      }
      if (v10) {
        goto LABEL_7;
      }
    }
    else if (!v9)
    {
LABEL_7:
      BOOL v11 = 0;
LABEL_17:

      goto LABEL_18;
    }
    if (v9) {
      char v12 = v9;
    }
    else {
      char v12 = v7;
    }
    id v13 = v12;
    unint64_t v14 = [(CAMViewfinderViewController *)self _layoutStyle];
    BOOL v11 = 0;
    if (v14 <= 4 && ((1 << v14) & 0x13) != 0)
    {
      BOOL v15 = [(CAMViewfinderViewController *)self view];
      [v13 bounds];
      objc_msgSend(v15, "convertRect:fromView:", v13);
      CGFloat v17 = v16;
      CGFloat v19 = v18;
      CGFloat v21 = v20;
      CGFloat v23 = v22;

      double v24 = [(CAMViewfinderViewController *)self view];
      [v4 bounds];
      objc_msgSend(v24, "convertRect:fromView:", v4);
      CGFloat v26 = v25;
      CGFloat v28 = v27;
      CGFloat v30 = v29;
      CGFloat v32 = v31;

      v34.origin.double x = v17;
      v34.origin.double y = v19;
      v34.size.CGFloat width = v21;
      v34.size.CGFloat height = v23;
      v35.origin.double x = v26;
      v35.origin.double y = v28;
      v35.size.CGFloat width = v30;
      v35.size.CGFloat height = v32;
      BOOL v11 = CGRectIntersectsRect(v34, v35);
    }

    goto LABEL_17;
  }
  BOOL v11 = 0;
LABEL_18:

  return v11;
}

- (BOOL)_shouldHideElapsedTimeViewForGraphConfiguration:(id)a3 orientation:(int64_t)a4
{
  id v6 = a3;
  uint64_t v7 = [(CAMViewfinderViewController *)self _topBar];
  unint64_t v8 = [v6 mode];
  int v9 = 0;
  CGFloat v30 = (void *)v7;
  if (v8 <= 8)
  {
    if (((1 << v8) & 0x186) != 0)
    {
      int64_t v10 = [(CAMViewfinderViewController *)self _layoutStyle];
      BOOL v11 = [(CAMViewfinderViewController *)self _captureController];
      char v12 = [v11 isCapturingVideo];
      int v9 = 1;
      if ((unint64_t)(a4 - 3) >= 2 && (v12 & 1) == 0 && v10 != 1) {
        int v9 = ![(CAMViewfinderViewController *)self _useCreativeCameraControls];
      }
    }
    else
    {
      if (v8) {
        goto LABEL_10;
      }
      BOOL v11 = [(CAMViewfinderViewController *)self _captureController];
      int v9 = [v11 isCapturingVideo];
    }
  }
LABEL_10:
  int v32 = v9;
  BOOL v13 = [(CAMViewfinderViewController *)self _shouldShowIndicatorOfType:13 forGraphConfiguration:v6];
  BOOL v31 = [(CAMViewfinderViewController *)self _shouldShowIndicatorOfType:7 forGraphConfiguration:v6];
  BOOL v29 = [(CAMViewfinderViewController *)self _shouldShowIndicatorOfType:8 forGraphConfiguration:v6];
  BOOL v14 = [(CAMViewfinderViewController *)self _shouldShowIndicatorOfType:5 forGraphConfiguration:v6];
  BOOL v15 = [(CAMViewfinderViewController *)self _shouldShowIndicatorOfType:14 forGraphConfiguration:v6];
  BOOL v16 = [(CAMViewfinderViewController *)self _shouldShowIndicatorOfType:15 forGraphConfiguration:v6];
  int v17 = [(CAMViewfinderViewController *)self _shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:v6];
  double v18 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  CGFloat v19 = [v18 controlStatusBar];
  int v20 = [v19 isControlExpanded];

  int v21 = 1;
  if (v13 && v31)
  {
    double v24 = v30;
    int v22 = v32;
  }
  else
  {
    int v22 = v32;
    if (v29 && v14 || v13 && v15)
    {
      double v24 = v30;
    }
    else
    {
      BOOL v23 = v13 && v16;
      double v24 = v30;
      if (!v23) {
        int v21 = v16 & ~v17 & v15 | v20;
      }
    }
  }
  int v25 = v22 ^ 1 | v21;
  CGFloat v26 = [(CAMViewfinderViewController *)self _elapsedTimeView];
  double v27 = [v24 elapsedTimeView];

  if (v26 == v27) {
    v25 |= [v24 shouldHideElapsedTimeViewForGraphConfiguration:v6];
  }

  return v25;
}

- (BOOL)_shouldHideModeDialForGraphConfiguration:(id)a3 isCapturingBurst:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  uint64_t v7 = [(CAMViewfinderViewController *)self _captureController];
  int v21 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  int v8 = [v7 isCapturingVideo];
  int v9 = [v7 isCapturingPanorama];
  int v10 = [v7 isCapturingTimelapse];
  BOOL v11 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v12 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v6];

  int v13 = [(CAMViewfinderViewController *)self _layoutStyle] != 1 && !v12;
  BOOL v14 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  if (v14) {
    BOOL v15 = v4;
  }
  else {
    BOOL v15 = 0;
  }

  BOOL v16 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  if (v16) {
    BOOL v17 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  }
  else {
    BOOL v17 = 0;
  }

  BOOL v18 = [(CAMViewfinderViewController *)self _trueVideoIsTransitioningToCapture];
  if ((v21 | v8 | v15 | v9 | v10 | v11 | v17 | v13)) {
    LOBYTE(v19) = 1;
  }
  else {
    int v19 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera]
  }
       || v18;

  return v19;
}

- (BOOL)_shouldHidePhotosButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
  int v6 = [v5 isCapturingVideo];
  int v7 = [v5 isCapturingPanorama];
  int v8 = [v5 isCapturingTimelapse];
  BOOL v9 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v18 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  int v10 = [(CAMViewfinderViewController *)self _topBar];
  BOOL v11 = [(CAMViewfinderViewController *)self _photosButton];
  BOOL v12 = [v10 photosButton];

  if (v11 == v12)
  {
    int v15 = [v10 shouldHidePhotosButtonForGraphConfiguration:v4];
    unsigned int v14 = v6 | v7 | v8;
    int v13 = +[CAMTopBar isFloatingStyle:[(CAMViewfinderViewController *)self _topBarStyleForGraphConfiguration:v4 capturing:v14]] | v15;
  }
  else
  {
    LOBYTE(v13) = 0;
    unsigned int v14 = v6 | v7 | v8;
  }
  if ((v14 | v9)) {
    char v16 = 1;
  }
  else {
    char v16 = v18 | v13;
  }

  return v16;
}

- (BOOL)_shouldHideApertureButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _topBar];
  int v6 = +[CAMCaptureCapabilities capabilities];
  int v7 = objc_msgSend(v6, "isDepthEffectApertureSupportedForMode:devicePosition:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "devicePosition"));

  int v8 = +[CAMCaptureCapabilities capabilities];
  uint64_t v9 = [v4 mode];
  uint64_t v10 = [v4 devicePosition];
  uint64_t v11 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  int v13 = objc_msgSend(v8, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v9, v10, v11, v12);

  BOOL v14 = [(CAMViewfinderViewController *)self _shouldUsePhotoModePortraitEffect];
  int v15 = +[CAMCaptureCapabilities capabilities];
  uint64_t v16 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  int v18 = objc_msgSend(v15, "isDepthEffectApertureSupportedForPhotoFormat:", v16, v17);

  BOOL v19 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  int v20 = 1;
  if (v7 && !v19) {
    int v20 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera] | v13 & !v14 | v18 ^ 1;
  }
  int v21 = [(CAMViewfinderViewController *)self _apertureButton];
  int v22 = [v5 apertureButton];

  if (v21 == v22) {
    v20 |= [v5 shouldHideApertureButtonForGraphConfiguration:v4];
  }

  return v20;
}

- (BOOL)_shouldHideIntensityButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _topBar];
  int v6 = +[CAMCaptureCapabilities capabilities];
  int64_t v7 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", [v4 mode], objc_msgSend(v4, "device"));
  int v8 = objc_msgSend(v6, "isPortraitEffectIntensitySupportedForMode:", objc_msgSend(v4, "mode"));
  BOOL v9 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  int v10 = [v6 isPortraitEffectIntensitySupportedForLightingType:v7];
  uint64_t v11 = +[CAMCaptureCapabilities capabilities];
  uint64_t v12 = [v4 mode];
  uint64_t v13 = [v4 devicePosition];
  uint64_t v14 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  int v16 = objc_msgSend(v11, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v12, v13, v14, v15);

  BOOL v17 = [(CAMViewfinderViewController *)self _shouldUsePhotoModePortraitEffect];
  int v18 = 1;
  if (v8 && !v9) {
    int v18 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera] | v10 ^ 1 | v16 & !v17;
  }
  BOOL v19 = [(CAMViewfinderViewController *)self _intensityButton];
  int v20 = [v5 intensityButton];

  if (v19 == v20) {
    v18 |= [v5 shouldHideIntensityButtonForGraphConfiguration:v4];
  }

  return v18;
}

- (BOOL)_shouldShowExposureButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = [v4 mode];

  LODWORD(v4) = [v5 isExposureSliderSupportedForMode:v6];
  if (v4 && ![(CAMViewfinderViewController *)self _isCapturingFromTimer]) {
    return ![(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera];
  }
  else {
    return 0;
  }
}

- (BOOL)_wantsZoomSliderForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _shouldUseZoomControlInsteadOfSlider];
  BOOL v6 = [(CAMViewfinderViewController *)self _isZoomAllowedForGraphConfiguration:v4];
  uint64_t v7 = [v4 devicePosition];

  BOOL v8 = v7 != 1 && v6;
  return !v5 && v8;
}

- (BOOL)_wantsZoomControlForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _shouldUseZoomControlInsteadOfSlider];
  BOOL v6 = [(CAMViewfinderViewController *)self _isZoomAllowedForGraphConfiguration:v4];
  LOBYTE(self) = [(CAMViewfinderViewController *)self _shouldUseZoomButtonForCameraToggleForGraphConfiguration:v4];

  return v5 & (v6 | self);
}

- (BOOL)_shouldUseZoomButtonForCameraToggleForGraphConfiguration:(id)a3
{
  id v3 = a3;
  id v4 = +[CAMCaptureCapabilities capabilities];
  uint64_t v5 = [v3 mode];
  uint64_t v6 = [v3 devicePosition];
  uint64_t v7 = [v3 videoConfiguration];
  uint64_t v8 = [v3 videoStabilizationStrength];

  LOBYTE(v3) = [v4 shouldAllowCameraToggleForMode:v5 devicePosition:v6 videoConfiguration:v7 videoStabilizationStrength:v8];
  return (char)v3;
}

- (BOOL)_shouldUseZoomButtonForCameraToggleForCurrentModeAndDevice
{
  id v2 = self;
  id v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldUseZoomButtonForCameraToggleForGraphConfiguration:v3];

  return (char)v2;
}

- (BOOL)_wantsLightingControlForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 mode];
  uint64_t v6 = [v4 devicePosition];

  return [(CAMViewfinderViewController *)self _wantsLightingControlForMode:v5 devicePosition:v6];
}

- (BOOL)_wantsLightingControlForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  uint64_t v7 = +[CAMCaptureCapabilities capabilities];
  if (![v7 isLightingControlSupportedForMode:a3]) {
    goto LABEL_6;
  }
  if (!a3)
  {
    uint64_t v9 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
    if (objc_msgSend(v7, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", 0, a4, v9, v10))
    {
      BOOL v8 = [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion];
      goto LABEL_7;
    }
LABEL_6:
    BOOL v8 = 0;
    goto LABEL_7;
  }
  BOOL v8 = 1;
LABEL_7:

  return v8;
}

- (BOOL)_shouldShowExternalStorageButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 mode];
  uint64_t v6 = [v4 videoEncodingBehavior];

  BOOL v7 = [(CAMViewfinderViewController *)self _wantsExternalStorageOutputEnabledForMode:v5 videoEncodingBehavior:v6];
  if (v7)
  {
    LOBYTE(v7) = [(CAMViewfinderViewController *)self _externalStorageOutputEnabled];
  }
  return v7;
}

- (BOOL)_wantsExternalStorageOutputEnabledForMode:(int64_t)a3 videoEncodingBehavior:(int64_t)a4
{
  BOOL v7 = +[CAMCaptureCapabilities capabilities];
  char v8 = [v7 isExternalStorageOutputSupportedForMode:a3 videoEncodingBehavior:a4];

  uint64_t v9 = [(CAMViewfinderViewController *)self _connectedStorage];
  if (!v9) {
    char v8 = 0;
  }

  return v8;
}

- (BOOL)_wantsExternalStorageOutputEnabledForMode:(int64_t)a3 videoConfiguration:(int64_t)a4 desiredProResVideoMode:(int64_t)a5
{
  uint64_t v9 = +[CAMUserPreferences preferences];
  LOBYTE(a5) = -[CAMViewfinderViewController _wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:](self, "_wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:", a3, objc_msgSend(v9, "videoEncodingBehaviorForConfiguration:mode:desiredProResVideoMode:outputToExternalStorage:spatialVideoEnabled:", a4, a3, a5, 1, -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", a3, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"))));

  return a5;
}

- (BOOL)_wantsExternalStorageOutputEnabled
{
  id v2 = self;
  id v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = -[CAMViewfinderViewController _wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:](v2, "_wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:", -[CAMViewfinderViewController _currentMode](v2, "_currentMode"), [v3 videoEncodingBehavior]);

  return (char)v2;
}

- (BOOL)_shouldShowUnsupportedExternalStorageFormat
{
  id v2 = self;
  id v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldShowUnsupportedExternalStorageFormatForVideoEncodingBehavior:](v2, "_shouldShowUnsupportedExternalStorageFormatForVideoEncodingBehavior:", [v3 videoEncodingBehavior]);

  return (char)v2;
}

- (BOOL)_shouldShowUnsupportedExternalStorageFormatForVideoEncodingBehavior:(int64_t)a3
{
  int64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
  uint64_t v6 = +[CAMCaptureCapabilities capabilities];
  LODWORD(a3) = [v6 isExternalStorageOutputSupportedForMode:v5 videoEncodingBehavior:a3];

  if (!a3) {
    return 0;
  }
  BOOL v7 = [(CAMViewfinderViewController *)self _connectedStorage];
  if (v7)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t v9 = [(CAMViewfinderViewController *)self _storageMonitor];
    char v8 = [v9 hasExternalStorageNotRecommendedForCapture];
  }
  return v8;
}

- (BOOL)_shouldHideHorizonLevelViewForGraphConfiguration:(id)a3
{
  BOOL v4 = -[CAMViewfinderViewController _shouldCreateHorizonLevelViewForMode:](self, "_shouldCreateHorizonLevelViewForMode:", [a3 mode]);
  BOOL v5 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  if (!v4 || v5) {
    return 1;
  }
  return [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera];
}

- (BOOL)_shouldCreateHorizonLevelViewForMode:(int64_t)a3
{
  return ((unint64_t)a3 < 0xA) & (0x3F7u >> a3);
}

- (BOOL)_shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:(id)a3
{
  id v4 = a3;
  char v5 = [MEMORY[0x263F82438] shouldMakeUIForDefaultPNG];
  uint64_t v6 = +[CAMUserPreferences preferences];
  if ([v6 isVideoConfigurationControlEnabled])
  {

    BOOL v7 = 0;
  }
  else
  {
    char v8 = +[CAMCaptureCapabilities capabilities];
    char v9 = [v8 interactiveVideoFormatControlAlwaysEnabled];

    if (v9)
    {
      BOOL v7 = 0;
    }
    else
    {
      uint64_t v10 = +[CAMCaptureCapabilities capabilities];
      uint64_t v11 = [v4 mode];
      uint64_t v12 = [v4 device];
      uint64_t v13 = [v4 videoEncodingBehavior];
      uint64_t v14 = [v4 videoConfiguration];
      BOOL v15 = [(CAMViewfinderViewController *)self _externalStorageOutputEnabled];
      uint64_t v16 = [v4 enableStereoVideoCapture];
      LOBYTE(v37) = [v4 prefersHDR10BitVideo];
      uint64_t v17 = [v10 resolvedVideoConfigurationForMode:v11 device:v12 videoEncodingBehavior:v13 videoConfiguration:v14 outputToExternalStorage:v15 spatialVideoEnabled:v16 prefersHDR10BitVideo:v37];

      int v18 = +[CAMCaptureCapabilities capabilities];
      uint64_t v19 = [v4 mode];
      uint64_t v20 = [v4 device];
      uint64_t v21 = [v4 videoEncodingBehavior];
      BOOL v22 = [(CAMViewfinderViewController *)self _externalStorageOutputEnabled];
      uint64_t v23 = [v4 enableStereoVideoCapture];
      LOBYTE(v38) = [v4 prefersHDR10BitVideo];
      uint64_t v24 = [v18 resolvedVideoConfigurationForMode:v19 device:v20 videoEncodingBehavior:v21 videoConfiguration:0 outputToExternalStorage:v22 spatialVideoEnabled:v23 prefersHDR10BitVideo:v38];

      BOOL v7 = v17 == v24;
    }
  }
  unint64_t v25 = [v4 mode];
  unsigned int v26 = (v25 > 8) | (0x79u >> v25);
  double v27 = [(CAMViewfinderViewController *)self _captureController];
  uint64_t v28 = [v27 isCapturingVideo];
  BOOL v29 = [(CAMViewfinderViewController *)self _topBar];
  CGFloat v30 = [(CAMViewfinderViewController *)self _elapsedTimeView];
  BOOL v31 = [v29 elapsedTimeView];

  if (v30 == v31)
  {
    char v32 = [v29 shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:v4];
    int64_t v33 = [(CAMViewfinderViewController *)self _topBarStyleForGraphConfiguration:v4 capturing:v28];
    if ([(CAMViewfinderViewController *)self _useCreativeCameraControls]) {
      v32 |= +[CAMTopBar isFloatingStyle:v33];
    }
  }
  else
  {
    char v32 = 0;
  }
  char v34 = v7 | v26 | v5 | v28;
  BOOL v35 = 1;
  if ((v34 & 1) == 0 && (v32 & 1) == 0) {
    BOOL v35 = [(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera];
  }

  return v35;
}

- (BOOL)_shouldShowLowLightControlForGraphConfiguration:(id)a3
{
  id v4 = a3;
  char v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = [v4 mode];
  uint64_t v7 = [v4 device];

  char v8 = [v5 isLowLightSupportedForMode:v6 device:v7];
  char v9 = [(CAMViewfinderViewController *)self _controlDrawer];
  uint64_t v10 = [v9 visibleControlTypes];
  char v11 = [v10 containsObject:&unk_26BDDDDB8];

  uint64_t v12 = [(CAMViewfinderViewController *)self _captureController];
  uint64_t v13 = [v12 lowLightStatus];

  if (v13 == -1) {
    char v14 = v11;
  }
  else {
    char v14 = 0;
  }
  if ((unint64_t)(v13 - 1) >= 2) {
    char v15 = v14;
  }
  else {
    char v15 = 1;
  }
  return v8 & v15;
}

- (BOOL)_shouldShowVideoConfigurationIndicatorForGraphConfiguration:(id)a3
{
  uint64_t v3 = [a3 mode];
  if ((unint64_t)(v3 - 1) < 2 || v3 == 8) {
    return 1;
  }
  if (v3 != 7) {
    return 0;
  }
  uint64_t v6 = +[CAMCaptureCapabilities capabilities];
  char v7 = [v6 cinematic4KSupported];

  return v7;
}

- (BOOL)_shouldHideAspectRatioControlForGraphConfiguration:(id)a3
{
  id v3 = a3;
  id v4 = +[CAMCaptureCapabilities capabilities];
  uint64_t v5 = [v3 mode];
  uint64_t v6 = [v3 devicePosition];

  LOBYTE(v3) = [v4 isAspectRatioCropSupportedForMode:v5 devicePosition:v6];
  return v3 ^ 1;
}

- (BOOL)_shouldShowSemanticStyleControlForGraphConfiguration:(id)a3
{
  id v4 = +[CAMCaptureCapabilities capabilities];
  char v5 = [v4 smartStylesSupported];

  if (v5) {
    LOBYTE(v6) = 0;
  }
  else {
    return ([(CAMViewfinderViewController *)self _currentSemanticStyleSupport] >> 3) & 1;
  }
  return v6;
}

- (BOOL)_shouldShowSmartStyleControlForGraphConfiguration:(id)a3
{
  id v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = [v4 smartStylesSupported];

  return v5
      && ([(CAMViewfinderViewController *)self _currentSemanticStyleSupport] & 9) != 0;
}

- (BOOL)_shouldShowSmartStyleIndicatorForGraphConfiguration:(id)a3
{
  id v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = [v4 smartStylesSupported];

  if (v5) {
    return ([(CAMViewfinderViewController *)self _currentSemanticStyleSupport] >> 3) & 1;
  }
  else {
    LOBYTE(v6) = 0;
  }
  return v6;
}

- (BOOL)_shouldShowSmartStyleCategoryInstructionLabelForGraphConfiguration:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  if ([v4 isSmartStylePickerVisible])
  {
    int v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    BOOL v6 = [v5 smartStylePicker];
    char v7 = [v6 expanded];
  }
  else
  {
    char v7 = 0;
  }

  return v7;
}

- (BOOL)_shouldShowRAWButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = +[CAMCaptureCapabilities capabilities];
  BOOL v6 = +[CAMUserPreferences preferences];
  char v7 = [v6 rawControlEnabled];

  LODWORD(v6) = objc_msgSend(v5, "isLinearDNGSupportedForMode:", objc_msgSend(v4, "mode"));
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldShowPhotoFormatButtonForGraphConfiguration:v4];

  if (v6) {
    BOOL v9 = v7 & !v8;
  }
  else {
    BOOL v9 = 0;
  }

  return v9;
}

- (BOOL)_shouldShowPhotoFormatButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = +[CAMUserPreferences preferences];
  int v6 = objc_msgSend(v5, "shouldUsePhotoFormatControlForMode:", objc_msgSend(v4, "mode"));

  if (v6)
  {
    char v7 = -[CAMViewfinderViewController _enabledPhotoFormatsForMode:device:](self, "_enabledPhotoFormatsForMode:device:", [v4 mode], objc_msgSend(v4, "device"));
    BOOL v8 = (unint64_t)[v7 count] > 1;
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)_shouldShowProResButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = +[CAMUserPreferences preferences];
  int v7 = [(id)v6 isProResControlEnabled];

  LODWORD(v6) = objc_msgSend(v5, "isProResVideoSupportedForMode:", objc_msgSend(v4, "mode"));
  uint64_t v8 = [v4 mode];
  uint64_t v9 = [v4 devicePosition];

  BOOL v10 = v6 & ![(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:v8 devicePosition:v9];
  if (v7) {
    BOOL v11 = v10;
  }
  else {
    BOOL v11 = 0;
  }

  return v11;
}

- (BOOL)_shouldShowVideoStabilizationButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = +[CAMCaptureCapabilities capabilities];
  char v6 = objc_msgSend(v5, "isVideoStabilizationControlSupportedForMode:device:videoConfiguration:videoEncodingBehavior:trueVideoEnabled:prefersHDR10BitVideo:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "device"), objc_msgSend(v4, "videoConfiguration"), objc_msgSend(v4, "videoEncodingBehavior"), objc_msgSend(v4, "trueVideoEnabled"), objc_msgSend(v4, "prefersHDR10BitVideo"));
  uint64_t v7 = [v4 mode];
  uint64_t v8 = [v4 devicePosition];

  LOBYTE(self) = v6 & ![(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:v7 devicePosition:v8];
  return (char)self;
}

- (BOOL)_shouldShowMaxRecordTimeInstructionLabelForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _shouldShowProResButtonForGraphConfiguration:v4];
  uint64_t v6 = [v4 videoEncodingBehavior];

  uint64_t v7 = [(CAMViewfinderViewController *)self _captureController];
  char v8 = [v7 isCapturingVideo];

  BOOL v9 = v6 == 2 && v5;
  return v9 & (v8 ^ 1);
}

- (BOOL)_shouldShowDeviceTooHotInstructionLabelForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = [v4 mode];
  uint64_t v7 = [v4 devicePosition];

  uint64_t v8 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  char v10 = objc_msgSend(v5, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v6, v7, v8, v9);

  if ([(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus] == 6) {
    return v10;
  }
  else {
    return 0;
  }
}

- (BOOL)_shouldShowFreeResourcesInstructionLabelForGraphConfiguration:(id)a3
{
  id v4 = a3;
  if ([(CAMViewfinderViewController *)self _wantsExternalStorageOutputEnabled])
  {
    BOOL v5 = 0;
  }
  else
  {
    BOOL v6 = [(CAMViewfinderViewController *)self _shouldShowProResButtonForGraphConfiguration:v4];
    uint64_t v7 = [v4 videoEncodingBehavior];
    uint64_t v8 = [(CAMViewfinderViewController *)self _captureController];
    int v9 = [v8 isCapturingVideo];

    int v10 = (v9 | [(CAMViewfinderViewController *)self _hasSignificantAmountOfRecordingTimeForCurrentConfiguration]) ^ 1;
    if (v7 != 2) {
      LOBYTE(v10) = 0;
    }
    if (v6) {
      BOOL v5 = v10;
    }
    else {
      BOOL v5 = 0;
    }
  }

  return v5;
}

- (BOOL)_shouldShowSharedLibraryBadgeForGraphConfiguration:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:a3];
  BOOL v5 = [(CAMViewfinderViewController *)self _timerCache];
  char v6 = [v5 isRunningTimerForKey:&unk_26BDDDDD0];

  uint64_t v7 = +[CAMUserPreferences preferences];
  if ([v7 sharedLibrarySwitchEnabled]) {
    BOOL v8 = v6 & !v4;
  }
  else {
    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)_shouldShowVideoStabilizationBadgeForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _shouldHideBadgesForGraphConfiguration:v4];
  char v6 = +[CAMCaptureCapabilities capabilities];
  uint64_t v7 = [v4 mode];
  uint64_t v8 = [v4 device];
  uint64_t v9 = [v4 videoConfiguration];
  uint64_t v10 = [v4 videoEncodingBehavior];
  uint64_t v11 = [v4 trueVideoEnabled];
  uint64_t v12 = [v4 prefersHDR10BitVideo];

  LODWORD(v4) = [v6 isVideoStabilizationControlSupportedForMode:v7 device:v8 videoConfiguration:v9 videoEncodingBehavior:v10 trueVideoEnabled:v11 prefersHDR10BitVideo:v12];
  BOOL v13 = [(CAMViewfinderViewController *)self _isFlashingVideoStabilizationBadge];
  return v4 && v13 && !v5;
}

- (BOOL)_shouldShowImageAnalysisButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _imageAnalysisButton];
  char v6 = +[CAMCaptureCapabilities capabilities];
  int v22 = objc_msgSend(v6, "isImageAnalysisSupportedForMode:devicePosition:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "devicePosition"));
  char v7 = [v5 isContextMenuDisplayed];
  BOOL v8 = [(CAMViewfinderViewController *)self _wantsVisualTextAnalysis];
  uint64_t v9 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  uint64_t v10 = [v9 currentObjectType];
  uint64_t v11 = [v9 currentMachineReadableCodeAction];

  char v12 = 0;
  if (!v8 && v10 != 1 && !v11 && (v7 & 1) == 0) {
    char v12 = [v6 isImageAnalysisButtonAlwaysVisible] ^ 1;
  }
  uint64_t v23 = v6;
  BOOL v13 = [(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v4];
  BOOL v14 = [(CAMViewfinderViewController *)self _wantsLightingControlForGraphConfiguration:v4];
  int64_t v15 = [(CAMViewfinderViewController *)self _zoomControlLayoutPositionForGraphConfiguration:v4];
  char v16 = [(CAMViewfinderViewController *)self _lightingControlLayoutPositionForGraphConfiguration:v4] != 2|| !v14;
  uint64_t v17 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v18 = [v17 isSystemOverlayVisible];

  char v19 = 0;
  if (v5 && ((v22 ^ 1) & 1) == 0 && (v12 & 1) == 0)
  {
    BOOL v20 = v15 == 2 && v13;
    char v19 = 0;
    if ([(CAMViewfinderViewController *)self _shouldShowPreviewOverlayButtonForGraphConfiguration:v4]&& !v20)
    {
      char v19 = v16 & (v18 ^ 1);
    }
  }

  return v19;
}

- (BOOL)_shouldShowImageAnalysisInstructionLabel
{
  if ([(CAMViewfinderViewController *)self _wantsVisualTextSelectionInstructions])
  {
    return 1;
  }
  id v4 = [(CAMViewfinderViewController *)self _timerCache];
  char v5 = [v4 isRunningTimerForKey:&unk_26BDDDD70];

  return v5;
}

- (BOOL)_shouldShowSharedLibraryIndicatorForGraphConfiguration:(id)a3
{
  if ([(CAMViewfinderViewController *)self _externalStorageOutputEnabled]) {
    return 0;
  }
  id v4 = +[CAMUserPreferences preferences];
  char v5 = [v4 sharedLibrarySwitchEnabled];

  return v5;
}

- (BOOL)_shouldShowSharedLibraryImageWellIndicatorForGraphConfiguration:(id)a3
{
  return 0;
}

- (BOOL)_shouldShowPreviewOverlayButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  char v5 = [(CAMViewfinderViewController *)self _zoomControl];
  char v6 = [v5 isShowingZoomDial];

  char v7 = [(CAMViewfinderViewController *)self _zoomSlider];
  [v7 alpha];
  double v9 = v8;

  int64_t v10 = [(CAMViewfinderViewController *)self _layoutStyle];
  if (v9 > 0.0) {
    char v11 = 1;
  }
  else {
    char v11 = v6;
  }
  if (v10 == 1) {
    char v12 = 0;
  }
  else {
    char v12 = v11;
  }
  BOOL v13 = [(CAMViewfinderViewController *)self _targetLightingControl];
  char v14 = [v13 isExpanded];

  int64_t v15 = [(CAMViewfinderViewController *)self _layoutStyle];
  char v16 = [(CAMViewfinderViewController *)self _captureController];
  char v17 = [v16 isCapturingVideo];
  char v18 = [v16 isCapturingBurst];
  BOOL v19 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v20 = [(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:v4];

  BOOL v21 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  if (v15 == 1) {
    char v22 = 0;
  }
  else {
    char v22 = v14;
  }
  char v23 = v17 | v19 | v18 | v20 | v12 | v21 | v22;

  return (v23 & 1) == 0;
}

- (BOOL)_shouldShowAutoMacroButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 mode];
  char v6 = +[CAMCaptureCapabilities capabilities];
  int v7 = objc_msgSend(v6, "isSuperWideAutoMacroSupportedForMode:device:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v5, objc_msgSend(v4, "device"), objc_msgSend(v4, "videoConfiguration"), objc_msgSend(v4, "videoStabilizationStrength"), objc_msgSend(v4, "enableStereoVideoCapture"));

  uint64_t v8 = [v4 devicePosition];
  uint64_t v9 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  BOOL v11 = +[CAMConflictingControlConfiguration shouldDisableMacroForLockedPortraitForMode:devicePosition:photoFormat:optionalDepthEffectEnabled:](CAMConflictingControlConfiguration, "shouldDisableMacroForLockedPortraitForMode:devicePosition:photoFormat:optionalDepthEffectEnabled:", v5, v8, v9, v10, [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion]);
  char v12 = +[CAMUserPreferences preferences];
  int v13 = [v12 isSuperWideAutoMacroControlAllowed];

  char v14 = [(CAMViewfinderViewController *)self _captureController];
  int v15 = [v14 isAutoMacroSuggested];

  if ([(CAMViewfinderViewController *)self _wantsVisualTextAnalysis])
  {
    char v16 = [(CAMViewfinderViewController *)self _textInteractionInsert];
    BOOL v17 = v16 != 0;
  }
  else
  {
    BOOL v17 = 0;
  }
  LOBYTE(v18) = 0;
  if ((v7 & v13 & v15) == 1 && !v17) {
    BOOL v18 = [(CAMViewfinderViewController *)self _shouldShowPreviewOverlayButtonForGraphConfiguration:v4]&& !v11;
  }

  return v18;
}

- (BOOL)_shouldShowDepthSuggestionButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = [v4 mode];
  unint64_t v7 = [v4 device] - 1;
  if (v7 > 0xA) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = qword_209C794E8[v7];
  }
  uint64_t v9 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  int v11 = objc_msgSend(v5, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v6, v8, v9, v10);
  BOOL v12 = [(CAMViewfinderViewController *)self _isDepthSuggestedOrEnabledForShallowDepthOfFieldStatus:[(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus]];
  uint64_t v24 = v5;
  if ([(CAMViewfinderViewController *)self _wantsVisualTextAnalysis])
  {
    int v13 = [(CAMViewfinderViewController *)self _textInteractionInsert];
    BOOL v14 = v13 != 0;
  }
  else
  {
    BOOL v14 = 0;
  }
  int64_t v15 = [(CAMViewfinderViewController *)self _resolvedRAWMode];
  BOOL v16 = [(CAMViewfinderViewController *)self _shouldDisableDepthSuggestionForNightModeForConfiguration:v4];
  BOOL v17 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v18 = [v17 isSemanticStyleControlVisible];

  BOOL v19 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v20 = [v19 isSmartStylePickerVisible];

  BOOL v21 = 0;
  if (v11 & v12) != 1 || v14 || v15 == 1 || v16 || (v18)
  {
    char v22 = v24;
  }
  else
  {
    char v22 = v24;
    if ((v20 & 1) == 0) {
      BOOL v21 = [(CAMViewfinderViewController *)self _shouldShowPreviewOverlayButtonForGraphConfiguration:v4];
    }
  }

  return v21;
}

- (int64_t)_visibleSuggestionButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _isReconfiguring];
  uint64_t v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v7 = [(CAMViewfinderViewController *)self _shouldShowAutoMacroButtonForGraphConfiguration:v4];
  if (v7 && v5) {
    BOOL v7 = [v6 visibleSuggestionButtonType] == 1;
  }
  int64_t v8 = [(CAMViewfinderViewController *)self _resolvedMacroMode];
  BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowDepthSuggestionButtonForGraphConfiguration:v4];
  if (v9 && v5) {
    BOOL v9 = [v6 visibleSuggestionButtonType] == 2;
  }
  BOOL v10 = [(CAMViewfinderViewController *)self _shouldShowSpatialCaptureControlForGraphConfiguration:v4];
  if (v10 && v5) {
    BOOL v10 = [v6 visibleSuggestionButtonType] == 3;
  }
  uint64_t v11 = v7;
  if (v9) {
    uint64_t v11 = 2;
  }
  uint64_t v12 = 3;
  if (!v10 || v7) {
    uint64_t v12 = v11;
  }
  if (v7 && v8 == 1) {
    int64_t v13 = 1;
  }
  else {
    int64_t v13 = v12;
  }

  return v13;
}

- (BOOL)_shouldShowViewfinderLegibilityBackgroundsForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
  int64_t v6 = [(CAMViewfinderViewController *)self _layoutStyle];
  unint64_t v7 = [v4 mode];

  if (v7 > 9)
  {
    LOBYTE(v8) = 1;
  }
  else if (((1 << v7) & 0x3D7) == 0 {
         || [(CAMViewfinderViewController *)self _isCapturingFromTimer]
  }
         || ([v5 isCapturingBurst] & 1) != 0)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    unsigned int v8 = (v6 == 0) & ~[v5 isCapturingVideo];
  }

  return v8;
}

- (BOOL)_shouldHideControlStatusIndicatorsForCommonStateForType:(unint64_t)a3
{
  BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
  BOOL v6 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
  BOOL v7 = [(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible];
  BOOL v9 = ([(CAMViewfinderViewController *)self _isTransitioningToCreativeCamera]
     || [(CAMViewfinderViewController *)self _isCapturingFromTimer]
     || ([v5 isCapturingBurst] & 1) != 0
     || [v5 isCapturingVideo] && ((int v8 = objc_msgSend(v5, "videoCapturePaused"), a3) || !v8)
     || ([v5 isCapturingTimelapse] & 1) != 0
     || ([v5 isCapturingPanorama] | v7) == 1)
    && !v6;

  return v9;
}

- (BOOL)_shouldShowIndicatorOfType:(unint64_t)a3 forGraphConfiguration:(id)a4
{
  id v6 = a4;
  if ([(CAMViewfinderViewController *)self _shouldHideControlStatusIndicatorsForCommonStateForType:a3])
  {
    BOOL v7 = 0;
  }
  else
  {
    switch(a3)
    {
      case 0uLL:
        if ([(CAMViewfinderViewController *)self _isFlashOrTorchSupportedForGraphConfiguration:v6])
        {
          goto LABEL_52;
        }
        goto LABEL_54;
      case 1uLL:
        if (![(CAMViewfinderViewController *)self _isLivePhotoSupportedForGraphConfiguration:v6])goto LABEL_54; {
        goto LABEL_52;
        }
      case 2uLL:
        if (![(CAMViewfinderViewController *)self _isHDRSupportedForGraphConfiguration:v6]|| ![(CAMViewfinderViewController *)self _wantsHDRControlsVisible]|| [(CAMViewfinderViewController *)self _shouldShowRAWButtonForGraphConfiguration:v6])
        {
          goto LABEL_54;
        }
        goto LABEL_52;
      case 3uLL:
        uint64_t v12 = +[CAMCaptureCapabilities capabilities];
        if ((objc_msgSend(v12, "isTimerSupportedForMode:", objc_msgSend(v6, "mode")) & 1) == 0) {
          goto LABEL_53;
        }
        int64_t v13 = [(CAMViewfinderViewController *)self _resolvedTimerDuration];

        if (!v13) {
          goto LABEL_54;
        }
        goto LABEL_52;
      case 4uLL:
        uint64_t v8 = [v6 mode];
        int64_t v9 = [(CAMViewfinderViewController *)self _effectFilterTypeForMode:v8];
        int64_t v10 = +[CAMUserPreferences defaultFilterTypeForMode:v8];
        BOOL v11 = 0;
        if (![(CAMViewfinderViewController *)self _shouldUseFiltersForGraphConfiguration:v6]|| v9 == v10)
        {
          goto LABEL_55;
        }
        goto LABEL_52;
      case 5uLL:
        BOOL v14 = [(CAMViewfinderViewController *)self _shouldHideApertureButtonForGraphConfiguration:v6];
        [(CAMViewfinderViewController *)self _lastDefaultApertureValue];
        double v16 = v15;
        [(CAMViewfinderViewController *)self _portraitModeApertureValue];
        double v18 = vabdd_f64(v16, v17);
        BOOL v19 = +[CAMCaptureCapabilities capabilities];
        uint64_t v20 = [v6 mode];
        uint64_t v21 = [v6 devicePosition];
        uint64_t v22 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
        char v24 = objc_msgSend(v19, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v20, v21, v22, v23);

        BOOL v11 = 0;
        if (v18 < 0.0001) {
          char v25 = v24;
        }
        else {
          char v25 = 0;
        }
        if ((v25 & 1) != 0 || v14) {
          goto LABEL_55;
        }
        goto LABEL_52;
      case 6uLL:
        if ([(CAMViewfinderViewController *)self _shouldHideIntensityButtonForGraphConfiguration:v6])
        {
          goto LABEL_54;
        }
        goto LABEL_52;
      case 7uLL:
        -[CAMViewfinderViewController _exposureBiasForMode:trueVideoEnabled:](self, "_exposureBiasForMode:trueVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), [v6 trueVideoEnabled]);
        double v27 = v26;
        uint64_t v28 = +[CAMUserPreferences preferences];
        int v29 = [v28 preserveExposure];

        CGFloat v30 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
        int v31 = [v30 isExposureSliderVisible];

        BOOL v32 = [(CAMViewfinderViewController *)self _isExposureBiasNonDefault:v27];
        int64_t v33 = +[CAMCaptureCapabilities capabilities];
        int v34 = objc_msgSend(v33, "isExposureSliderSupportedForMode:", objc_msgSend(v6, "mode"));

        if (v34 ^ 1 | v29) {
          int v35 = v34;
        }
        else {
          int v35 = v31 | v32;
        }
        if (v35 != 1) {
          goto LABEL_54;
        }
        goto LABEL_52;
      case 8uLL:
        if (![(CAMViewfinderViewController *)self _shouldShowVideoConfigurationIndicatorForGraphConfiguration:v6])goto LABEL_54; {
        goto LABEL_52;
        }
      case 9uLL:
        if (![(CAMViewfinderViewController *)self _shouldShowLowLightControlForGraphConfiguration:v6])goto LABEL_54; {
        goto LABEL_52;
        }
      case 0xAuLL:
        uint64_t v36 = [(CAMViewfinderViewController *)self _semanticStyleForPreview];
        uint64_t v12 = v36;
        if (v36) {
          int v37 = [v36 isNeutral] ^ 1;
        }
        else {
          LOBYTE(v37) = 0;
        }
        uint64_t v38 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
        unsigned __int8 v39 = [v38 isSemanticStyleControlVisible];

        if ([(CAMViewfinderViewController *)self _shouldShowSemanticStyleControlForGraphConfiguration:v6])
        {

          if ((v37 | v39))
          {
LABEL_52:
            BOOL v11 = [(CAMViewfinderViewController *)self _canShowIndicatorDuringTrueVideoRecordingForType:a3 withGraphConfiguration:v6];
            goto LABEL_55;
          }
        }
        else
        {
LABEL_53:
        }
LABEL_54:
        BOOL v11 = 0;
LABEL_55:
        BOOL v40 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
        char v41 = [v40 smartStyleControlsVisible];

        BOOL v7 = ((a3 == 11) | ~v41) & v11;
        break;
      case 0xBuLL:
        if (![(CAMViewfinderViewController *)self _shouldShowSmartStyleIndicatorForGraphConfiguration:v6])goto LABEL_54; {
        goto LABEL_52;
        }
      case 0xCuLL:
        if (![(CAMViewfinderViewController *)self _shouldShowRAWButtonForGraphConfiguration:v6])goto LABEL_54; {
        goto LABEL_52;
        }
      case 0xDuLL:
        if (![(CAMViewfinderViewController *)self _shouldShowProResButtonForGraphConfiguration:v6])goto LABEL_54; {
        goto LABEL_52;
        }
      case 0xEuLL:
        if (![(CAMViewfinderViewController *)self _shouldShowSharedLibraryIndicatorForGraphConfiguration:v6])goto LABEL_54; {
        goto LABEL_52;
        }
      case 0xFuLL:
        if (![(CAMViewfinderViewController *)self _shouldShowVideoStabilizationButtonForGraphConfiguration:v6])goto LABEL_54; {
        goto LABEL_52;
        }
      case 0x10uLL:
        if (![(CAMViewfinderViewController *)self _shouldShowPhotoFormatButtonForGraphConfiguration:v6])goto LABEL_54; {
        goto LABEL_52;
        }
      default:
        goto LABEL_54;
    }
  }

  return v7;
}

- (BOOL)_canShowIndicatorDuringTrueVideoRecordingForType:(unint64_t)a3 withGraphConfiguration:(id)a4
{
  int v5 = [a4 trueVideoEnabled] ^ 1;
  if (a3 == 8) {
    return 1;
  }
  else {
    return v5;
  }
}

- (BOOL)_shouldShowDrawerControlOfType:(int64_t)a3 forGraphConfiguration:(id)a4
{
  id v6 = a4;
  switch(a3)
  {
    case 0:
      BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideFlashButtonForGraphConfiguration:v6];
      goto LABEL_11;
    case 1:
      BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideLivePhotoButtonForGraphConfiguration:v6];
      goto LABEL_11;
    case 2:
      BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideAspectRatioControlForGraphConfiguration:v6];
      goto LABEL_11;
    case 3:
      BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideTimerButtonForGraphConfiguration:v6];
      goto LABEL_11;
    case 4:
      BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideFilterButtonForGraphConfiguration:v6];
      goto LABEL_11;
    case 5:
      BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideHDRButtonForGraphConfiguration:v6];
      goto LABEL_11;
    case 6:
      BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideApertureButtonForGraphConfiguration:v6];
      goto LABEL_11;
    case 7:
      BOOL v7 = [(CAMViewfinderViewController *)self _shouldHideIntensityButtonForGraphConfiguration:v6];
LABEL_11:
      BOOL v8 = !v7;
      break;
    case 8:
      BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowExposureButtonForGraphConfiguration:v6];
      goto LABEL_20;
    case 9:
      BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowLowLightControlForGraphConfiguration:v6];
      goto LABEL_20;
    case 10:
      BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowSemanticStyleControlForGraphConfiguration:v6];
      goto LABEL_20;
    case 11:
      BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowSmartStyleControlForGraphConfiguration:v6];
      goto LABEL_20;
    case 12:
      BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowRAWButtonForGraphConfiguration:v6];
      goto LABEL_20;
    case 13:
      BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowProResButtonForGraphConfiguration:v6];
      goto LABEL_20;
    case 14:
      BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowSharedLibraryButtonForGraphConfiguration:v6];
      goto LABEL_20;
    case 15:
      BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowVideoStabilizationButtonForGraphConfiguration:v6];
LABEL_20:
      BOOL v8 = v9;
      break;
    default:
      BOOL v8 = 0;
      break;
  }

  return v8;
}

void __75__CAMViewfinderViewController__hideControlsForGraphConfiguration_animated___block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _shouldHideBottomBarForGraphConfiguration:*(void *)(a1 + 40)]) {
    [*(id *)(*(void *)(a1 + 32) + 1584) setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHideTopBarForGraphConfiguration:*(void *)(a1 + 40)]) {
    [*(id *)(*(void *)(a1 + 32) + 1576) setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHideFlashButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1592), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHideHDRButtonForGraphConfiguration:*(void *)(a1 + 40)])
  }
    [*(id *)(*(void *)(a1 + 32) + 1608) setAlpha:0.0];
  if ([*(id *)(a1 + 32) _shouldHideElapsedTimeViewForGraphConfiguration:*(void *)(a1 + 40) orientation:*(void *)(a1 + 48)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1720), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHideLivePhotoButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "setAlpha:", 0.0);
  }
  if (([*(id *)(a1 + 32) _shouldShowSharedLibraryButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1640) setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHidePortraitModeInstructionLabelForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1752), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHideQRCodeInstructionLabelForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1760), "setAlpha:", 0.0);
  }
  if ([*(id *)(a1 + 32) _shouldHideFlipButtonForGraphConfiguration:*(void *)(a1 + 40)])
  {
    id v2 = [*(id *)(a1 + 32) viewfinderView];
    id v3 = [v2 flipButton];
    [v3 setAlpha:0.0];

    id v4 = [*(id *)(a1 + 32) _bottomBar];
    int v5 = [v4 flipButton];
    [v5 setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHideModeDialForGraphConfiguration:*(void *)(a1 + 40)])
  {
    id v6 = [*(id *)(a1 + 32) _bottomBar];
    BOOL v7 = [v6 modeDial];
    [v7 setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHideImageWellForGraphConfiguration:*(void *)(a1 + 40)]) {
    [*(id *)(*(void *)(a1 + 32) + 1824) setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHideReviewButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1672), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHideCreativeCameraButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1680), "setAlpha:", 0.0);
  }
  if ([*(id *)(a1 + 32) _shouldHidePhotosButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1688), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHideDoneButtonForGraphConfiguration:*(void *)(a1 + 40)])
  }
    [*(id *)(*(void *)(a1 + 32) + 1696) setAlpha:0.0];
  if ([*(id *)(a1 + 32) _shouldHideShutterButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1792), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHideStillDuringVideoButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1808), "setAlpha:", 0.0);
  }
  if ([*(id *)(a1 + 32) _shouldHideFilterButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1832), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHideApertureButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1840), "setAlpha:", 0.0);
  }
  if ([*(id *)(a1 + 32) _shouldHideIntensityButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1848), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHideUtilityBarForGraphConfiguration:*(void *)(a1 + 40)])
  }
    [*(id *)(*(void *)(a1 + 32) + 1920) setAlpha:0.0];
  if ([*(id *)(a1 + 32) _shouldHideFilterNameBadgeForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1704), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHidePanoramaViewForGraphConfiguration:*(void *)(a1 + 40)])
  }
  {
    BOOL v8 = [*(id *)(a1 + 32) _panoramaViewController];
    BOOL v9 = [v8 view];
    [v9 setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHideZoomSliderForGraphConfiguration:*(void *)(a1 + 40)]) {
    [*(id *)(*(void *)(a1 + 32) + 1872) setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHideZoomControlForGraphConfiguration:*(void *)(a1 + 40)])
  {
    int64_t v10 = [*(id *)(a1 + 32) viewfinderView];
    BOOL v11 = [v10 zoomControl];
    [v11 setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHideLightingControlForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1952), "setAlpha:", 0.0); {
  if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(a1 + 57))
  }
    [*(id *)(*(void *)(a1 + 32) + 1960) setAlpha:0.0];
  if ([*(id *)(a1 + 32) _shouldHideGridViewForGraphConfiguration:*(void *)(a1 + 40)]) {
    [*(id *)(*(void *)(a1 + 32) + 1888) setAlpha:0.0];
  }
  if ([*(id *)(a1 + 32) _shouldHideLevelViewForGraphConfiguration:*(void *)(a1 + 40)])
  {
    [*(id *)(*(void *)(a1 + 32) + 1896) setAlpha:0.0];
    [*(id *)(a1 + 32) _updateLevelMotionTracking];
  }
  if ([*(id *)(a1 + 32) _shouldHideHorizonLevelViewForGraphConfiguration:*(void *)(a1 + 40)])
  {
    [*(id *)(*(void *)(a1 + 32) + 1904) setAlpha:0.0];
    [*(id *)(a1 + 32) _updateLevelMotionTracking];
  }
  if ([*(id *)(a1 + 32) _shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1968), "setAlpha:", 0.0); {
  if ([*(id *)(a1 + 32) _shouldHideTimerButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1624), "setAlpha:", 0.0);
  }
  if ([*(id *)(a1 + 32) _shouldHideTimerIndicatorViewForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1864), "setAlpha:", 0.0); {
  if (([*(id *)(a1 + 32) _shouldShowImageAnalysisButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  }
  {
    uint64_t v12 = [*(id *)(a1 + 32) _bottomBar];
    int64_t v13 = [v12 imageAnalysisButton];
    [v13 setAlpha:0.0];
  }
  if (([*(id *)(a1 + 32) _shouldShowImageAnalysisInstructionLabel] & 1) == 0)
  {
    BOOL v14 = [*(id *)(a1 + 32) _imageAnalysisInstructionLabel];
    [v14 setAlpha:0.0];
  }
  if (([*(id *)(a1 + 32) _shouldShowExternalStorageButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v15 = [*(id *)(a1 + 32) _fullscreenViewfinder];
    [v15 setExternalStorageButtonVisible:0];
  }
}

void __75__CAMViewfinderViewController__showControlsForGraphConfiguration_animated___block_invoke(uint64_t a1)
{
  if (([*(id *)(a1 + 32) _shouldHideBottomBarForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1584) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideTopBarForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1576) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideFlashButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1592) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideHDRButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1608) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideElapsedTimeViewForGraphConfiguration:*(void *)(a1 + 40) orientation:*(void *)(a1 + 48)] & 1) == 0)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1720), "setAlpha:", 1.0); {
  if (([*(id *)(a1 + 32) _shouldHideLivePhotoButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  }
    [*(id *)(*(void *)(a1 + 32) + 1632) setAlpha:1.0];
  if ([*(id *)(a1 + 32) _shouldShowSharedLibraryButtonForGraphConfiguration:*(void *)(a1 + 40)])objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1640), "setAlpha:", 1.0); {
  if (([*(id *)(a1 + 32) _shouldHidePortraitModeInstructionLabelForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1752), "setAlpha:", 1.0);
  }
  if (([*(id *)(a1 + 32) _shouldHideQRCodeInstructionLabelForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1760) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideFlipButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v2 = [*(id *)(a1 + 32) viewfinderView];
    id v3 = [v2 flipButton];
    [v3 setAlpha:1.0];

    id v4 = [*(id *)(a1 + 32) _bottomBar];
    int v5 = [v4 flipButton];
    [v5 setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideModeDialForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v6 = [*(id *)(a1 + 32) _bottomBar];
    BOOL v7 = [v6 modeDial];
    [v7 setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideImageWellForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1824) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideReviewButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1672) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideCreativeCameraButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1680) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHidePhotosButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1688) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideDoneButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1696) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideShutterButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1792) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideStillDuringVideoButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1808) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideFilterButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1832) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideApertureButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1840) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideIntensityButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1848) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideUtilityBarForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1920) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideFilterNameBadgeForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1704) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHidePanoramaViewForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  {
    BOOL v8 = [*(id *)(a1 + 32) _panoramaViewController];
    BOOL v9 = [v8 view];
    [v9 setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideZoomSliderForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1872) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideZoomControlForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  {
    int64_t v10 = [*(id *)(a1 + 32) viewfinderView];
    BOOL v11 = [v10 zoomControl];
    [v11 setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideLightingControlForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1952) setAlpha:1.0];
  }
  if (!*(unsigned char *)(a1 + 56) && *(unsigned char *)(a1 + 57)) {
    [*(id *)(*(void *)(a1 + 32) + 1960) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideGridViewForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1888) setAlpha:1.0];
  }
  if (([*(id *)(a1 + 32) _shouldHideLevelViewForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  {
    [*(id *)(*(void *)(a1 + 32) + 1896) setAlpha:1.0];
    [*(id *)(a1 + 32) _updateLevelMotionTracking];
  }
  if (([*(id *)(a1 + 32) _shouldHideHorizonLevelViewForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  {
    [*(id *)(*(void *)(a1 + 32) + 1904) setAlpha:1.0];
    [*(id *)(a1 + 32) _updateLevelMotionTracking];
  }
  if (([*(id *)(a1 + 32) _shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1968), "setAlpha:", 1.0); {
  if (([*(id *)(a1 + 32) _shouldHideTimerButtonForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0)
  }
    [*(id *)(*(void *)(a1 + 32) + 1624) setAlpha:1.0];
  if (([*(id *)(a1 + 32) _shouldHideTimerIndicatorViewForGraphConfiguration:*(void *)(a1 + 40)] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 1864) setAlpha:1.0];
  }
  if ([*(id *)(a1 + 32) _shouldShowImageAnalysisButtonForGraphConfiguration:*(void *)(a1 + 40)])
  {
    uint64_t v12 = [*(id *)(a1 + 32) _bottomBar];
    int64_t v13 = [v12 imageAnalysisButton];
    [v13 setAlpha:1.0];
  }
  if ([*(id *)(a1 + 32) _shouldShowImageAnalysisInstructionLabel])
  {
    BOOL v14 = [*(id *)(a1 + 32) _imageAnalysisInstructionLabel];
    [v14 setAlpha:1.0];
  }
  if ([*(id *)(a1 + 32) _shouldShowExternalStorageButtonForGraphConfiguration:*(void *)(a1 + 40)])
  {
    id v15 = [*(id *)(a1 + 32) _fullscreenViewfinder];
    [v15 setExternalStorageButtonVisible:1 animated:*(unsigned __int8 *)(a1 + 58)];
  }
}

void __63__CAMViewfinderViewController_updateControlVisibilityAnimated___block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _shouldHideBottomBarForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v2 = 0.0;
  }
  else {
    double v2 = 1.0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1584) setAlpha:v2];
  if ([*(id *)(a1 + 32) _shouldHideTopBarForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v3 = 0.0;
  }
  else {
    double v3 = 1.0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1576) setAlpha:v3];
  if ([*(id *)(a1 + 32) _shouldHideFlashButtonForGraphConfiguration:*(void *)(a1 + 40)])double v4 = 0.0; {
  else
  }
    double v4 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1592) setAlpha:v4];
  if ([*(id *)(a1 + 32) _shouldHideHDRButtonForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v5 = 0.0;
  }
  else {
    double v5 = 1.0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1608) setAlpha:v5];
  if ([*(id *)(a1 + 32) _shouldHideElapsedTimeViewForGraphConfiguration:*(void *)(a1 + 40) orientation:*(void *)(a1 + 48)])double v6 = 0.0; {
  else
  }
    double v6 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1720) setAlpha:v6];
  if ([*(id *)(a1 + 32) _shouldHideLivePhotoButtonForGraphConfiguration:*(void *)(a1 + 40)])double v7 = 0.0; {
  else
  }
    double v7 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1632) setAlpha:v7];
  if ([*(id *)(a1 + 32) _shouldShowSharedLibraryButtonForGraphConfiguration:*(void *)(a1 + 40)])double v8 = 1.0; {
  else
  }
    double v8 = 0.0;
  [*(id *)(*(void *)(a1 + 32) + 1640) setAlpha:v8];
  if ([*(id *)(a1 + 32) _shouldHideFlipButtonForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v9 = 0.0;
  }
  else {
    double v9 = 1.0;
  }
  int64_t v10 = [*(id *)(a1 + 32) viewfinderView];
  BOOL v11 = [v10 flipButton];
  [v11 setAlpha:v9];

  uint64_t v12 = [*(id *)(a1 + 32) _bottomBar];
  int64_t v13 = [v12 flipButton];
  [v13 setAlpha:v9];

  if ([*(id *)(a1 + 32) _shouldHideModeDialForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v14 = 0.0;
  }
  else {
    double v14 = 1.0;
  }
  id v15 = [*(id *)(a1 + 32) _bottomBar];
  double v16 = [v15 modeDial];
  [v16 setAlpha:v14];

  if ([*(id *)(a1 + 32) _shouldHideImageWellForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v17 = 0.0;
  }
  else {
    double v17 = 1.0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1824) setAlpha:v17];
  if ([*(id *)(a1 + 32) _shouldHideReviewButtonForGraphConfiguration:*(void *)(a1 + 40)])double v18 = 0.0; {
  else
  }
    double v18 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1672) setAlpha:v18];
  if ([*(id *)(a1 + 32) _shouldHideCreativeCameraButtonForGraphConfiguration:*(void *)(a1 + 40)])double v19 = 0.0; {
  else
  }
    double v19 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1680) setAlpha:v19];
  if ([*(id *)(a1 + 32) _shouldHidePhotosButtonForGraphConfiguration:*(void *)(a1 + 40)])double v20 = 0.0; {
  else
  }
    double v20 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1688) setAlpha:v20];
  if ([*(id *)(a1 + 32) _shouldHideDoneButtonForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v21 = 0.0;
  }
  else {
    double v21 = 1.0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1696) setAlpha:v21];
  if ([*(id *)(a1 + 32) _shouldHideShutterButtonForGraphConfiguration:*(void *)(a1 + 40)])double v22 = 0.0; {
  else
  }
    double v22 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1792) setAlpha:v22];
  if ([*(id *)(a1 + 32) _shouldHideStillDuringVideoButtonForGraphConfiguration:*(void *)(a1 + 40)])double v23 = 0.0; {
  else
  }
    double v23 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1808) setAlpha:v23];
  if ([*(id *)(a1 + 32) _shouldHideFilterButtonForGraphConfiguration:*(void *)(a1 + 40)])double v24 = 0.0; {
  else
  }
    double v24 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1832) setAlpha:v24];
  if ([*(id *)(a1 + 32) _shouldHideApertureButtonForGraphConfiguration:*(void *)(a1 + 40)])double v25 = 0.0; {
  else
  }
    double v25 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1840) setAlpha:v25];
  if ([*(id *)(a1 + 32) _shouldHideIntensityButtonForGraphConfiguration:*(void *)(a1 + 40)])double v26 = 0.0; {
  else
  }
    double v26 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1848) setAlpha:v26];
  if ([*(id *)(a1 + 32) _shouldHideUtilityBarForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v27 = 0.0;
  }
  else {
    double v27 = 1.0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1920) setAlpha:v27];
  if ([*(id *)(a1 + 32) _shouldHideFilterNameBadgeForGraphConfiguration:*(void *)(a1 + 40)])double v28 = 0.0; {
  else
  }
    double v28 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1704) setAlpha:v28];
  if ([*(id *)(a1 + 32) _shouldHidePanoramaViewForGraphConfiguration:*(void *)(a1 + 40)])double v29 = 0.0; {
  else
  }
    double v29 = 1.0;
  CGFloat v30 = [*(id *)(a1 + 32) _panoramaViewController];
  int v31 = [v30 view];
  [v31 setAlpha:v29];

  if ([*(id *)(a1 + 32) _shouldHideZoomSliderForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v32 = 0.0;
  }
  else {
    double v32 = 1.0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1872) setAlpha:v32];
  if ([*(id *)(a1 + 32) _shouldHideZoomControlForGraphConfiguration:*(void *)(a1 + 40)])double v33 = 0.0; {
  else
  }
    double v33 = 1.0;
  int v34 = [*(id *)(a1 + 32) viewfinderView];
  int v35 = [v34 zoomControl];
  [v35 setAlpha:v33];

  if ([*(id *)(a1 + 32) _shouldHideLightingControlForGraphConfiguration:*(void *)(a1 + 40)])double v36 = 0.0; {
  else
  }
    double v36 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1952) setAlpha:v36];
  if ([*(id *)(a1 + 32) _shouldHideGridViewForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v37 = 0.0;
  }
  else {
    double v37 = 1.0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1888) setAlpha:v37];
  if ([*(id *)(a1 + 32) _shouldHideLevelViewForGraphConfiguration:*(void *)(a1 + 40)]) {
    double v38 = 0.0;
  }
  else {
    double v38 = 1.0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1896) setAlpha:v38];
  if ([*(id *)(a1 + 32) _shouldHideHorizonLevelViewForGraphConfiguration:*(void *)(a1 + 40)])double v39 = 0.0; {
  else
  }
    double v39 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1904) setAlpha:v39];
  [*(id *)(a1 + 32) _updateLevelMotionTracking];
  if ([*(id *)(a1 + 32) _shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:*(void *)(a1 + 40)])double v40 = 0.0; {
  else
  }
    double v40 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1968) setAlpha:v40];
  if ([*(id *)(a1 + 32) _shouldHideTimerButtonForGraphConfiguration:*(void *)(a1 + 40)])double v41 = 0.0; {
  else
  }
    double v41 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1624) setAlpha:v41];
  if ([*(id *)(a1 + 32) _shouldHideTimerIndicatorViewForGraphConfiguration:*(void *)(a1 + 40)])double v42 = 0.0; {
  else
  }
    double v42 = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 1864) setAlpha:v42];
  if ([*(id *)(a1 + 32) _shouldShowImageAnalysisButtonForGraphConfiguration:*(void *)(a1 + 40)])double v43 = 1.0; {
  else
  }
    double v43 = 0.0;
  uint64_t v44 = [*(id *)(a1 + 32) _bottomBar];
  id v45 = [v44 imageAnalysisButton];
  [v45 setAlpha:v43];

  if ([*(id *)(a1 + 32) _shouldShowImageAnalysisInstructionLabel]) {
    double v46 = 1.0;
  }
  else {
    double v46 = 0.0;
  }
  double v47 = [*(id *)(a1 + 32) _imageAnalysisInstructionLabel];
  [v47 setAlpha:v46];

  uint64_t v48 = [*(id *)(a1 + 32) _shouldShowExternalStorageButtonForGraphConfiguration:*(void *)(a1 + 40)];
  id v49 = [*(id *)(a1 + 32) _fullscreenViewfinder];
  [v49 setExternalStorageButtonVisible:v48 animated:*(unsigned __int8 *)(a1 + 56)];
}

- (void)_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v39 = a3;
  double v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v7 = [(CAMViewfinderViewController *)self _isReconfiguring];
  double v8 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v9 = [v8 captureOrientation];

  uint64_t v10 = [(CAMViewfinderViewController *)self _shouldAllowControlDrawerForGraphConfiguration:v39];
  int v11 = !v7;
  if (v10 && v7) {
    uint64_t v10 = [v6 isControlDrawerAllowed];
  }
  BOOL v12 = [(CAMViewfinderViewController *)self _shouldHideModeDialForGraphConfiguration:v39];
  if ((v12 | v11)) {
    uint64_t v13 = !v12;
  }
  else {
    uint64_t v13 = [v6 isModeUIAllowed];
  }
  [v6 setControlDrawerAllowed:v10 modeUIAllowed:v13 animated:v4];
  BOOL v14 = [(CAMViewfinderViewController *)self _shouldHideShutterButtonForGraphConfiguration:v39];
  if ((v14 | v11)) {
    uint64_t v15 = !v14;
  }
  else {
    uint64_t v15 = [v6 isShutterButtonVisible];
  }
  [v6 setShutterControlVisible:v15 animated:v4];
  uint64_t v16 = [(CAMViewfinderViewController *)self _shouldAllowControlDrawerToggleForGraphConfiguration:v39 orientation:v9];
  if ((v16 & v7) == 1)
  {
    double v17 = [v6 controlStatusBar];
    uint64_t v16 = [v17 isDirectionIndicatorVisible];
  }
  double v18 = [v6 controlStatusBar];
  [v18 setDirectionIndicatorVisible:v16 animated:v4];

  uint64_t v19 = [(CAMViewfinderViewController *)self _shouldShowViewfinderLegibilityBackgroundsForGraphConfiguration:v39];
  if ((v19 & v7) == 1) {
    uint64_t v19 = objc_msgSend(v6, "isLegibilityBackgroundsVisible", v19);
  }
  [v6 setLegibilityBackgroundsVisible:v19 animated:v4];
  BOOL v20 = [(CAMViewfinderViewController *)self _shouldHideElapsedTimeViewForGraphConfiguration:v39 orientation:v9];
  if ((v20 | v11)) {
    uint64_t v21 = !v20;
  }
  else {
    uint64_t v21 = [v6 isElapsedTimeViewVisible];
  }
  [v6 setElapsedTimeViewVisible:v21 animated:v4];
  BOOL v22 = [(CAMViewfinderViewController *)self _shouldHideTimerIndicatorViewForGraphConfiguration:v39];
  if ((v22 | v11)) {
    uint64_t v23 = !v22;
  }
  else {
    uint64_t v23 = [v6 isTimerIndicatorVisible];
  }
  [v6 setTimerIndicatorVisible:v23 animated:v4];
  BOOL v24 = [(CAMViewfinderViewController *)self _shouldHideLightingControlForGraphConfiguration:v39];
  if ((v24 | v11)) {
    uint64_t v25 = !v24;
  }
  else {
    uint64_t v25 = [v6 isPortraitControlsAllowed];
  }
  [v6 setPortraitControlsAllowed:v25 animated:v4];
  BOOL v26 = [(CAMViewfinderViewController *)self _shouldHideZoomControlForGraphConfiguration:v39];
  if ((v26 | v11)) {
    uint64_t v27 = !v26;
  }
  else {
    uint64_t v27 = [v6 isZoomControlVisible];
  }
  [v6 setZoomControlVisible:v27 animated:v4];
  BOOL v28 = [(CAMViewfinderViewController *)self _shouldHideFlipButtonForGraphConfiguration:v39];
  if ((v28 | v11)) {
    uint64_t v29 = !v28;
  }
  else {
    uint64_t v29 = [v6 isFlipButtonVisible];
  }
  [v6 setFlipButtonVisible:v29 animated:v4];
  uint64_t v30 = [(CAMViewfinderViewController *)self _shouldShowImageAnalysisButtonForGraphConfiguration:v39];
  if ((v30 & v7) == 1) {
    uint64_t v30 = objc_msgSend(v6, "isImageAnalysisButtonVisible", v30);
  }
  [v6 setImageAnalysisButtonVisible:v30 animated:v4];
  uint64_t v31 = [(CAMViewfinderViewController *)self _shouldShowPhotoVideoModeSwitchForGraphConfiguration:v39];
  if ((v31 & v7) == 1) {
    uint64_t v31 = objc_msgSend(v6, "isModeSwitchVisible", v31);
  }
  [v6 setPhotoVideoModeSwitchVisible:v31 animated:v4];
  uint64_t v32 = [(CAMViewfinderViewController *)self _shouldShowSharedLibraryImageWellIndicatorForGraphConfiguration:v39];
  if ((v32 & v7) == 1) {
    uint64_t v32 = objc_msgSend(v6, "isSharedLibraryImageWellIndicatorVisible", v32);
  }
  [v6 setSharedLibraryImageWellIndicatorVisible:v32 animated:v4];
  [(CAMViewfinderViewController *)self _updateSharedLibraryImageWellIndicatorForCurrentState];
  objc_msgSend(v6, "setVisiblePreviewSuggestionButton:animated:", -[CAMViewfinderViewController _visibleSuggestionButtonForGraphConfiguration:](self, "_visibleSuggestionButtonForGraphConfiguration:", v39), v4);
  [(CAMViewfinderViewController *)self _updateCurrentPreviewFiltersOnCaptureController];
  uint64_t v33 = [v6 visibleInstructionLabel];
  int64_t v34 = [(CAMViewfinderViewController *)self _primaryInstructionLabelForGraphConfiguration:v39];
  if (v7 && v34 != v33) {
    int64_t v35 = 0;
  }
  else {
    int64_t v35 = v34;
  }
  uint64_t v36 = [v6 visibleSecondaryInstructionLabel];
  int64_t v37 = [(CAMViewfinderViewController *)self _secondaryInstructionLabelForGraphConfiguration:v39];
  if (v7 && v37 != v36) {
    int64_t v38 = 0;
  }
  else {
    int64_t v38 = v37;
  }
  [v6 setVisibleInstructionLabel:v35 visibleSecondaryInstructionLabel:v38 animated:v4];
  [(CAMViewfinderViewController *)self _updateControlDrawerContentsVisibilityForGraphConfiguration:v39 animated:v4];
  [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityForGraphConfiguration:v39 animated:v4];
}

- (void)_updateControlsRelatedToDepthSuggestionAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  double v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  objc_msgSend(v5, "setVisiblePreviewSuggestionButton:animated:", -[CAMViewfinderViewController _visibleSuggestionButtonForGraphConfiguration:](self, "_visibleSuggestionButtonForGraphConfiguration:", v6), v3);
  [(CAMViewfinderViewController *)self _updateCurrentPreviewFiltersOnCaptureController];
  [(CAMViewfinderViewController *)self _updateControlDrawerContentsVisibilityForGraphConfiguration:v6 animated:v3];
  [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityForGraphConfiguration:v6 animated:v3];
}

- (id)_allControlDrawerTypes
{
  return &unk_26BDDFAA0;
}

- (void)_updateControlDrawerContentsVisibilityAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateControlDrawerContentsVisibilityForGraphConfiguration:v5 animated:v3];
}

- (void)_updateControlDrawerContentsVisibilityForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v18 = a4;
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = [(CAMViewfinderViewController *)self _controlDrawer];
  BOOL v7 = (void *)MEMORY[0x263EFFA08];
  double v8 = [v6 visibleControlTypes];
  uint64_t v9 = [v7 setWithArray:v8];

  uint64_t v10 = [MEMORY[0x263EFF980] array];
  BOOL v11 = [(CAMViewfinderViewController *)self _isReconfiguring];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  BOOL v12 = [(CAMViewfinderViewController *)self _controlTypesForGraphConfiguration:v5];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v20;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v20 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*((void *)&v19 + 1) + 8 * v16);
        if (!v11 || [v9 containsObject:*(void *)(*((void *)&v19 + 1) + 8 * v16)]) {
          [v10 addObject:v17];
        }
        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v14);
  }

  [v6 setVisibleControlTypes:v10 animated:v18];
}

- (id)_controlTypesForGraphConfiguration:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v5 = [MEMORY[0x263EFF980] array];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v6 = [(CAMViewfinderViewController *)self _allControlDrawerTypes];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        BOOL v11 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (-[CAMViewfinderViewController _shouldShowDrawerControlOfType:forGraphConfiguration:](self, "_shouldShowDrawerControlOfType:forGraphConfiguration:", [v11 integerValue], v4))
        {
          [v5 addObject:v11];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  return v5;
}

- (int64_t)_primaryInstructionLabelForGraphConfiguration:(id)a3
{
  id v4 = a3;
  if ([(CAMViewfinderViewController *)self _shouldShowImageAnalysisInstructionLabel])
  {
    int64_t v5 = 5;
  }
  else if ([(CAMViewfinderViewController *)self _isLowLightCaptureUIVisible])
  {
    int64_t v5 = 3;
  }
  else if ([(CAMViewfinderViewController *)self _shouldHidePortraitModeInstructionLabelForGraphConfiguration:v4])
  {
    if ([(CAMViewfinderViewController *)self _shouldShowFlashCompromisedInstructionsForGraphConfiguration:v4])
    {
      int64_t v5 = 4;
    }
    else if ([(CAMViewfinderViewController *)self _shouldHideQRCodeInstructionLabelForGraphConfiguration:v4])
    {
      if ([(CAMViewfinderViewController *)self _shouldShowMaxRecordTimeInstructionLabelForGraphConfiguration:v4])
      {
        int64_t v5 = 6;
      }
      else if ([(CAMViewfinderViewController *)self _shouldShowDeviceTooHotInstructionLabelForGraphConfiguration:v4])
      {
        int64_t v5 = 8;
      }
      else if ([(CAMViewfinderViewController *)self _shouldShowSpatialCaptureInstructionsForGraphConfiguration:v4])
      {
        int64_t v5 = 9;
      }
      else if ([(CAMViewfinderViewController *)self _shouldShowSmartStyleCategoryInstructionLabelForGraphConfiguration:v4])
      {
        int64_t v5 = 10;
      }
      else
      {
        int64_t v5 = 0;
      }
    }
    else
    {
      int64_t v5 = 2;
    }
  }
  else
  {
    int64_t v5 = 1;
  }

  return v5;
}

- (int64_t)_secondaryInstructionLabelForGraphConfiguration:(id)a3
{
  if ([(CAMViewfinderViewController *)self _shouldShowFreeResourcesInstructionLabelForGraphConfiguration:a3])
  {
    return 7;
  }
  else
  {
    return 0;
  }
}

- (BOOL)_isVideoStabilizationIndicatorPrimary
{
  double v2 = +[CAMUserPreferences preferences];
  if ([v2 preserveExposure] & 1) != 0 || (objc_msgSend(v2, "isProResControlEnabled")) {
    LOBYTE(v3) = 0;
  }
  else {
    int v3 = [v2 sharedLibraryEnabled] ^ 1;
  }

  return v3;
}

- (id)_primaryControlStatusIndicatorTypes
{
  int v3 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithArray:&unk_26BDDFAB8];
  if ([(CAMViewfinderViewController *)self _isVideoStabilizationIndicatorPrimary])
  {
    [v3 addObject:&unk_26BDDDF98];
  }
  return v3;
}

- (id)_secondaryControlStatusIndicatorTypes
{
  int v3 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithArray:&unk_26BDDFAD0];
  if (!-[CAMViewfinderViewController _isVideoStabilizationIndicatorPrimary](self, "_isVideoStabilizationIndicatorPrimary"))[v3 addObject:&unk_26BDDDF98]; {
  return v3;
  }
}

- (void)_updateControlStatusBarContentsVisibilityAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityForGraphConfiguration:v5 animated:v3];
}

- (void)_updateControlStatusBarContentsVisibilityForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v25 = a4;
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v7 = [v6 controlStatusBar];

  uint64_t v27 = [MEMORY[0x263EFF980] array];
  BOOL v26 = [MEMORY[0x263EFF980] array];
  int v8 = ![(CAMViewfinderViewController *)self _isReconfiguring];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  obuint64_t j = [(CAMViewfinderViewController *)self _primaryControlStatusIndicatorTypes];
  uint64_t v9 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v35 != v11) {
          objc_enumerationMutation(obj);
        }
        long long v13 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        uint64_t v14 = [v13 integerValue];
        int v15 = [v7 isIndicatorDesiredForType:v14];
        if ([(CAMViewfinderViewController *)self _shouldShowIndicatorOfType:v14 forGraphConfiguration:v5])
        {
          BOOL v16 = (v8 | v15) == 0;
        }
        else
        {
          BOOL v16 = 1;
        }
        if (!v16) {
          [v27 addObject:v13];
        }
      }
      uint64_t v10 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
    }
    while (v10);
  }

  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obja = [(CAMViewfinderViewController *)self _secondaryControlStatusIndicatorTypes];
  uint64_t v17 = [obja countByEnumeratingWithState:&v30 objects:v38 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v31;
    do
    {
      for (uint64_t j = 0; j != v18; ++j)
      {
        if (*(void *)v31 != v19) {
          objc_enumerationMutation(obja);
        }
        long long v21 = *(void **)(*((void *)&v30 + 1) + 8 * j);
        uint64_t v22 = [v21 integerValue];
        int v23 = [v7 isIndicatorDesiredForType:v22];
        if ([(CAMViewfinderViewController *)self _shouldShowIndicatorOfType:v22 forGraphConfiguration:v5])
        {
          BOOL v24 = (v8 | v23) == 0;
        }
        else
        {
          BOOL v24 = 1;
        }
        if (!v24) {
          [v26 addObject:v21];
        }
      }
      uint64_t v18 = [obja countByEnumeratingWithState:&v30 objects:v38 count:16];
    }
    while (v18);
  }

  [v7 setPrimaryDesiredIndicatorTypes:v27 secondaryDesiredIndicatorTypes:v26 animated:v25];
}

- (void)_updatePanoramaSizeIfNeededForGraphConfiguration:(id)a3
{
  id v10 = a3;
  id v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = objc_msgSend(v4, "isPanoramaSupportedForDevice:", objc_msgSend(v10, "device"));

  if (v5 && [v10 mode] == 3)
  {
    id v6 = +[CAMPanoramaConfiguration sharedInstance];
    double v7 = (double)objc_msgSend(v6, "maxWidthForDevice:", objc_msgSend(v10, "device"));
    double v8 = (double)[v6 sampleBufferWidth];
    uint64_t v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    objc_msgSend(v9, "setPanoramaCaptureSize:", v7, v8);
  }
}

- (int64_t)_zoomControlLayoutPositionForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = +[CAMCaptureCapabilities capabilities];
  if ([(CAMViewfinderViewController *)self _wantsLightingControlForGraphConfiguration:v4]&& ![(CAMViewfinderViewController *)self _lightingControlLayoutPositionForGraphConfiguration:v4])
  {
    uint64_t v7 = [v4 mode];
    uint64_t v8 = [v4 devicePosition];
    uint64_t v9 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
    if (objc_msgSend(v5, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v7, v8, v9, v10))int64_t v6 = 2; {
    else
    }
      int64_t v6 = 1;
  }
  else
  {
    int64_t v6 = 0;
  }

  return v6;
}

- (int64_t)_lightingControlLayoutPositionForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = [v4 mode];
  uint64_t v7 = [v4 devicePosition];

  uint64_t v8 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  LODWORD(self) = objc_msgSend(v5, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v6, v7, v8, v9);
  char v10 = [v5 portraitInPhotoModeBehavior];
  if (self) {
    int64_t v11 = ~v10 & 2;
  }
  else {
    int64_t v11 = 0;
  }

  return v11;
}

- (void)_updateZoomControlLayoutForGraphConfiguration:(id)a3 fromGraphConfiguration:(id)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a3;
  BOOL v9 = [(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:a4];
  int v10 = [(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v8];
  int64_t v11 = [(CAMViewfinderViewController *)self _zoomControlLayoutPositionForGraphConfiguration:v8];

  if (!v9 || v10)
  {
    uint64_t v12 = (v9 | ~v10) & v5;
    double v13 = 0.0;
    if (v11 == 1) {
      double v13 = 14.0;
    }
    if (v11 == 2) {
      double v14 = -14.0;
    }
    else {
      double v14 = v13;
    }
    int v15 = [(CAMViewfinderViewController *)self _zoomControl];
    [v15 setEdgeMargin:v12 animated:v14];

    id v16 = [(CAMViewfinderViewController *)self _zoomControl];
    [v16 setPlatterLayoutCompact:v14 != 0.0 animated:v12];
  }
}

- (void)_snapshotAndFadeDisappearingOverlayViewsForChangeToGraphConfiguration:(id)a3
{
  id v12 = a3;
  BOOL v4 = [(CAMViewfinderViewController *)self _shouldHidePanoramaViewForGraphConfiguration:v12];
  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = [(CAMViewfinderViewController *)self _panoramaViewController];
    uint64_t v7 = [v6 view];
    id v8 = v7;
    if (v7)
    {
      [v7 alpha];
      if (v9 > 0.0)
      {
        [(CAMViewfinderViewController *)self _snapshotAndFadeDisappearingView:v8];
        int v10 = [v8 instructionView];
        int64_t v11 = [v8 superview];
        [(CAMViewfinderViewController *)self _snapshotAndFadeDisappearingView:v10 parentViewOverride:v11 shouldHideView:0];
      }
    }

    id v5 = v12;
  }
  if ([(CAMViewfinderViewController *)self _shouldHidePortraitModeInstructionLabelForGraphConfiguration:v5])
  {
    [(CAMViewfinderViewController *)self _snapshotAndFadeDisappearingView:self->__portraitModeInstructionLabel];
  }
  if ([(CAMViewfinderViewController *)self _shouldHideQRCodeInstructionLabelForGraphConfiguration:v12])
  {
    [(CAMViewfinderViewController *)self _snapshotAndFadeDisappearingView:self->__qrCodeInstructionLabel];
  }
  if ([(CAMViewfinderViewController *)self _shouldHideFilterNameBadgeForGraphConfiguration:v12])
  {
    [(CAMViewfinderViewController *)self _snapshotAndFadeDisappearingView:self->__filterNameBadge];
  }
}

- (void)_snapshotAndFadeDisappearingView:(id)a3
{
}

- (void)_snapshotAndFadeDisappearingView:(id)a3 parentViewOverride:(id)a4 shouldHideView:(BOOL)a5
{
  id v7 = a3;
  id v8 = a4;
  if (v7)
  {
    if (([v7 isHidden] & 1) == 0)
    {
      [v7 alpha];
      if (v9 != 0.0)
      {
        if (v8)
        {
          id v10 = v8;
        }
        else
        {
          id v10 = [v7 superview];
        }
        int64_t v11 = v10;
        id v12 = [v7 snapshotViewAfterScreenUpdates:0];
        double v13 = (void *)MEMORY[0x263F82E00];
        v22[0] = MEMORY[0x263EF8330];
        v22[1] = 3221225472;
        v22[2] = __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke;
        v22[3] = &unk_263FA1FA8;
        id v23 = v7;
        id v24 = v11;
        id v14 = v12;
        id v25 = v14;
        BOOL v26 = a5;
        id v15 = v11;
        [v13 performWithoutAnimation:v22];
        id v16 = (void *)MEMORY[0x263F82E00];
        v20[0] = MEMORY[0x263EF8330];
        v20[1] = 3221225472;
        v20[2] = __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke_2;
        v20[3] = &unk_263FA0208;
        id v21 = v14;
        v18[0] = MEMORY[0x263EF8330];
        v18[1] = 3221225472;
        v18[2] = __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke_3;
        v18[3] = &unk_263FA0430;
        id v19 = v21;
        id v17 = v21;
        [v16 animateWithDuration:v20 animations:v18 completion:0.25];
      }
    }
  }
}

void __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) superview];
  [*(id *)(a1 + 32) center];
  objc_msgSend(v2, "convertPoint:toView:", *(void *)(a1 + 40));
  double v4 = v3;
  double v6 = v5;
  id v7 = *(void **)(a1 + 48);
  [*(id *)(a1 + 32) bounds];
  objc_msgSend(v7, "setBounds:");
  objc_msgSend(*(id *)(a1 + 48), "setCenter:", v4, v6);
  id v8 = *(void **)(a1 + 48);
  double v9 = *(void **)(a1 + 32);
  if (v9) {
    [v9 transform];
  }
  else {
    memset(v10, 0, sizeof(v10));
  }
  [v8 setTransform:v10];
  [*(id *)(a1 + 40) addSubview:*(void *)(a1 + 48)];
  if (*(unsigned char *)(a1 + 56)) {
    [*(id *)(a1 + 32) setAlpha:0.0];
  }
}

uint64_t __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

uint64_t __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke_3(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeFromSuperview];
}

uint64_t __62__CAMViewfinderViewController__updateBadgeVisibilityAnimated___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1752), "setAlpha:", (double)(objc_msgSend(*(id *)(a1 + 32), "_shouldHidePortraitModeInstructionLabelForGraphConfiguration:", *(void *)(a1 + 40)) ^ 1));
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1760), "setAlpha:", (double)(objc_msgSend(*(id *)(a1 + 32), "_shouldHideQRCodeInstructionLabelForGraphConfiguration:", *(void *)(a1 + 40)) ^ 1));
  uint64_t result = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1704), "setAlpha:", (double)(objc_msgSend(*(id *)(a1 + 32), "_shouldHideFilterNameBadgeForGraphConfiguration:", *(void *)(a1 + 40)) ^ 1));
  if (*(unsigned char *)(a1 + 48))
  {
    double v3 = 0.0;
    if (!*(unsigned char *)(a1 + 49)) {
      double v3 = 1.0;
    }
    double v4 = *(void **)(*(void *)(a1 + 32) + 1960);
    return [v4 setAlpha:v3];
  }
  return result;
}

uint64_t __56__CAMViewfinderViewController__forceHideBadgesAnimated___block_invoke(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 1752) setAlpha:0.0];
  double v2 = *(void **)(*(void *)(a1 + 32) + 1760);
  return [v2 setAlpha:0.0];
}

- (void)_updateUIForCapturing:(BOOL)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  [(CAMViewfinderViewController *)self _setNeedsUpdateOfSupportedInterfaceOrientations];
  id v21 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  unint64_t v7 = [v21 mode];
  [(CAMViewfinderViewController *)self _updateProResControlsForCurrentState];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v4];
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:v4];
  if (![(CAMViewfinderViewController *)self _isReconfiguring]
    || (+[CAMCaptureCapabilities capabilities],
        id v8 = objc_claimAutoreleasedReturnValue(),
        int v9 = [v8 isSpatialModeTrueVideoSupported],
        v8,
        v9))
  {
    [(CAMViewfinderViewController *)self _updateSpatialCaptureUIStateForGraphConfiguration:v21 animated:v4];
  }
  [(CAMViewfinderViewController *)self _setSwipeToModeSwitchEnabled:[(CAMViewfinderViewController *)self _shouldEnableSwipeToModeSwitch]];
  [(CAMViewfinderViewController *)self _updateTopBarStyleForGraphConfiguration:v21 capturing:v5 animated:v4];
  [(CAMViewfinderViewController *)self _updateBarBackgroundStyleForMode:v7 capturing:v5 animated:v4];
  if (![(CAMViewfinderViewController *)self _isReconfiguringForZoomChange])
  {
    if (v4) {
      uint64_t v10 = 3;
    }
    else {
      uint64_t v10 = 0;
    }
    int64_t v11 = [(CAMViewfinderViewController *)self _zoomControl];
    [v11 setShouldShowZoomDial:0 animationDuration:v10];
  }
  [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v21 isCapturing:v5 animated:v4];
  if (v7 <= 8)
  {
    if (((1 << v7) & 0x186) != 0)
    {
      if (v5)
      {
        id v12 = [(CAMViewfinderViewController *)self _previewViewController];
LABEL_22:
        [v12 notifyWillStartCapturing];
        id v19 = [(CAMViewfinderViewController *)self _remoteShutterController];
        [v19 willStartCapturing];
        goto LABEL_24;
      }
      goto LABEL_19;
    }
    if (v7)
    {
      if (v7 != 3) {
        goto LABEL_21;
      }
      double v13 = [(CAMViewfinderViewController *)self _panoramaViewController];
      id v14 = v13;
      if (v5) {
        [v13 startPainting];
      }
      else {
        [v13 stopPainting];
      }
      goto LABEL_20;
    }
    id v15 = +[CAMCaptureCapabilities capabilities];
    int v16 = [v15 isCTMSupported];

    if (v16 && !v5)
    {
LABEL_19:
      id v14 = [(CAMViewfinderViewController *)self _targetElapsedTimeView];
      [v14 endTimer];
      objc_msgSend(v14, "setBackgroundStyle:animated:", -[CAMViewfinderViewController _elapsedTimeViewIdleBackgroundStyle](self, "_elapsedTimeViewIdleBackgroundStyle"), 1);
      id v17 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      [v17 setSpatialCaptureRecordingIndicatorVisible:0 animated:1];

LABEL_20:
    }
  }
LABEL_21:
  uint64_t v18 = [(CAMViewfinderViewController *)self _previewViewController];
  id v12 = v18;
  if (v5) {
    goto LABEL_22;
  }
  [v18 notifyDidStopCapture];
  long long v20 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v20 didStopCapture];

  id v19 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  [v19 setPausedDuringVideo:0 animated:v4];
LABEL_24:
}

- (int64_t)_elapsedTimeViewIdleBackgroundStyle
{
  double v3 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];

  if (v3)
  {
    BOOL v4 = [(CAMViewfinderViewController *)self _motionController];
    BOOL v5 = (unint64_t)([v4 captureOrientation] - 3) < 2;
  }
  else
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _layoutStyle] == 1;
  }
  if (v5) {
    return 3;
  }
  else {
    return 0;
  }
}

- (void)_startTimer:(unint64_t)a3
{
  +[CAMLivePhotoButton enablingAnimationDuration];
  if (a3 - 2 > 2) {
    double v6 = v5;
  }
  else {
    double v6 = dbl_209C79390[a3 - 2];
  }
  id v8 = [(CAMViewfinderViewController *)self _timerCache];
  unint64_t v7 = [NSNumber numberWithUnsignedInteger:a3];
  [v8 startTimerForKey:v7 duration:v6];
}

- (void)timerCache:(id)a3 timerDidFireForKey:(id)a4
{
  id v6 = a4;
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  uint64_t v5 = [v6 unsignedIntegerValue];
  switch(v5)
  {
    case 4:
      [(CAMViewfinderViewController *)self _updateTransientLightingBadgeVisibilityAnimated:1];
      break;
    case 3:
      [(CAMViewfinderViewController *)self _dismissDocumentScanningButton];
      break;
    case 2:
      [(CAMViewfinderViewController *)self _updateImageAnalysisInstructions];
      break;
  }
}

- (BOOL)shouldHideFlashButton
{
  double v2 = self;
  double v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideFlashButtonForGraphConfiguration:v3];

  return (char)v2;
}

- (BOOL)shouldHideHDRButton
{
  double v2 = self;
  double v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideHDRButtonForGraphConfiguration:v3];

  return (char)v2;
}

- (BOOL)shouldHideTimerButton
{
  double v2 = self;
  double v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideTimerButtonForGraphConfiguration:v3];

  return (char)v2;
}

- (BOOL)shouldHideFlipButton
{
  double v2 = self;
  double v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideFlipButtonForGraphConfiguration:v3];

  return (char)v2;
}

- (BOOL)shouldHideLivePhotoButton
{
  double v2 = self;
  double v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _shouldHideLivePhotoButtonForGraphConfiguration:v3];

  return (char)v2;
}

- (BOOL)shouldHideLightingNameBadgeForOrientation:(int64_t)a3
{
  uint64_t v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(a3) = [(CAMViewfinderViewController *)self _shouldHideLightingNameBadgeForGraphConfiguration:v5 orientation:a3];

  return a3;
}

- (BOOL)shouldLayoutLightingNameBadgeAtBottom
{
  unint64_t v2 = [(CAMViewfinderViewController *)self _layoutStyle];
  return (v2 < 5) & (0x1Du >> v2);
}

- (BOOL)_shouldEnableAspectRatioButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _isModeDisabled];
  uint64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingLowLightImage];

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableIntensityButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _isModeDisabled];
  uint64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingLowLightImage];

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableExposureControlButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _isModeDisabled];
  uint64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingLowLightImage];

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableVideoConfigurationControl
{
  unint64_t v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isConfigurationAvailable];

  BOOL v4 = +[CAMUserPreferences preferences];
  if ([v4 isVideoConfigurationControlEnabled])
  {
    char v5 = 1;
  }
  else
  {
    char v6 = +[CAMCaptureCapabilities capabilities];
    char v5 = [v6 interactiveVideoFormatControlAlwaysEnabled];
  }
  return v3 & v5;
}

- (BOOL)_shouldEnableRAWButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _isModeDisabled];
  char v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingLowLightImage];

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnablePhotoFormatButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _isModeDisabled];
  char v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingLowLightImage];

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableProResButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isModeDisabled];
  BOOL v4 = [(CAMViewfinderViewController *)self _captureController];
  char v5 = [v4 isCapturingLowLightImage];

  return (v3 | v5) ^ 1;
}

- (BOOL)_shouldEnableVideoStabilizationButton
{
  unint64_t v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isConfigurationAvailable];

  return v3;
}

- (BOOL)_shouldEnableCreativeCameraButton
{
  return [(CAMViewfinderViewController *)self _reasonsToDisableCreativeCameraButton] == 0;
}

- (unint64_t)_reasonsToDisableCreativeCameraButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self isPreventingAdditionalCaptures];
  BOOL v4 = [(CAMViewfinderViewController *)self _capturingFromPhysicalButton];
  uint64_t v5 = 8;
  if (!v3) {
    uint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = v5 | 0x20;
  }
  else {
    uint64_t v6 = v5;
  }
  unint64_t v7 = [(CAMViewfinderViewController *)self _captureController];
  int v8 = [v7 isCaptureAvailable];

  return v6 | v8 ^ 1u;
}

- (BOOL)_shouldEnableApertureButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _isModeDisabled];
  uint64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  char v6 = [v5 isCapturingLowLightImage];

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableAutoMacroButton
{
  BOOL v3 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  BOOL v4 = [(CAMViewfinderViewController *)self _captureController];
  char v5 = [v4 isCapturingLowLightImage];

  return (v3 | v5) ^ 1;
}

- (BOOL)_shouldEnableLowLightControl
{
  unint64_t v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingLowLightImage] ^ 1;

  return v3;
}

- (BOOL)_shouldEnableSemanticStyleControl
{
  unint64_t v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingLowLightImage] ^ 1;

  return v3;
}

- (BOOL)_shouldEnableSmartStyleControl
{
  unint64_t v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingLowLightImage] ^ 1;

  return v3;
}

- (BOOL)_shouldEnableSmartStylesSwipeGestures
{
  if ([(CAMViewfinderViewController *)self _currentHalfPressSpotlight]) {
    return 0;
  }
  BOOL v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v5 = [v4 isSmartStylePickerVisible];

  return v5;
}

- (BOOL)_shouldEnableControlDrawerToggle
{
  unint64_t v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingLowLightImage] ^ 1;

  return v3;
}

- (BOOL)_shouldEnableTextAnalysisButton
{
  unint64_t v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingLowLightImage] ^ 1;

  return v3;
}

- (BOOL)_shouldEnableSharedLibraryButton
{
  unint64_t v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingLowLightImage];

  return v3 ^ 1;
}

- (BOOL)_shouldShowSharedLibraryButtonForGraphConfiguration:(id)a3
{
  id v4 = a3;
  char v5 = +[CAMUserPreferences preferences];
  int v6 = [v5 sharedLibrarySwitchEnabled];

  unint64_t v7 = [(CAMViewfinderViewController *)self _captureController];
  char v8 = [v7 isCapturingVideo];

  int v9 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
  uint64_t v10 = [(CAMViewfinderViewController *)self _topBar];
  int64_t v11 = [v10 sharedLibraryButton];

  BOOL v12 = v9 == v11;
  if (v9 == v11) {
    LOBYTE(v13) = 0;
  }
  else {
    LOBYTE(v13) = v6;
  }
  if (v12 && v6)
  {
    id v14 = [(CAMViewfinderViewController *)self _topBar];
    int v13 = [v14 shouldHideSharedLibraryButtonForGraphConfiguration:v4] ^ 1;
  }
  return v13 & (v8 ^ 1);
}

- (BOOL)_shouldEnableDrawerControl:(int64_t)a3
{
  switch(a3)
  {
    case 0:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableFlashButton];
      break;
    case 1:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableLivePhotoButton];
      break;
    case 2:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableAspectRatioButton];
      break;
    case 3:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableTimerButton];
      break;
    case 4:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableFilterButton];
      break;
    case 5:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableHDRButton];
      break;
    case 6:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableApertureButton];
      break;
    case 7:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableIntensityButton];
      break;
    case 8:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableExposureControlButton];
      break;
    case 9:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableLowLightControl];
      break;
    case 10:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableSemanticStyleControl];
      break;
    case 11:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableSmartStyleControl];
      break;
    case 12:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableRAWButton];
      break;
    case 13:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableProResButton];
      break;
    case 14:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableSharedLibraryButton];
      break;
    case 15:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableVideoStabilizationButton];
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

- (BOOL)_shouldEnableControlStatusIndicator:(unint64_t)a3
{
  switch(a3)
  {
    case 0uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableFlashButton];
      break;
    case 1uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableLivePhotoButton];
      break;
    case 2uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableHDRButton];
      break;
    case 3uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableTimerButton];
      break;
    case 4uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableFilterButton];
      break;
    case 5uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableApertureButton];
      break;
    case 6uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableIntensityButton];
      break;
    case 7uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableExposureControlButton];
      break;
    case 8uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableVideoConfigurationControl];
      break;
    case 9uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableLowLightControl];
      break;
    case 0xAuLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableSemanticStyleControl];
      break;
    case 0xBuLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableSmartStyleControl];
      break;
    case 0xCuLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableRAWButton];
      break;
    case 0xDuLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableProResButton];
      break;
    case 0xEuLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableSharedLibraryButton];
      break;
    case 0xFuLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnableVideoStabilizationButton];
      break;
    case 0x10uLL:
      BOOL result = [(CAMViewfinderViewController *)self _shouldEnablePhotoFormatButton];
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

- (void)setUserInteractionLoggingEnabled:(BOOL)a3
{
  if (self->_userInteractionLoggingEnabled != a3)
  {
    self->_userInteractionLoggingEnabled = a3;
    if (a3) {
      [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"User Interaction Logging Enabled" forceLog:1];
    }
  }
}

- (id)_debugEnabledDescriptionForControl:(id)a3 withReason:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  char v8 = [v7 isEnabled];
  int v9 = (void *)MEMORY[0x263F089D8];
  uint64_t v10 = objc_opt_class();
  if (v8)
  {
    int64_t v11 = [v9 stringWithFormat:@"<%@: %p> is enabled. (%@)", v10, v7, v6];
  }
  else
  {
    int64_t v11 = [v9 stringWithFormat:@"<%@: %p> is disabled. We're", v10, v7];

    if ([(CAMViewfinderViewController *)self _isOutOfDiskSpace]) {
      [v11 appendString:@" out of disk space,"];
    }
    objc_msgSend(v11, "replaceOccurrencesOfString:withString:options:range:", @",", @".", 1, objc_msgSend(v11, "length") - 1, 1);
    id v7 = [NSString stringWithFormat:@" (%@)", v6];

    [v11 appendString:v7];
  }

  return v11;
}

- (void)simulateImageWellTap
{
  id v3 = [(CAMViewfinderViewController *)self _imageWell];
  [(CAMViewfinderViewController *)self _handleImageWellReleased:v3];
}

- (BOOL)pressShutterButtonWithTouchUpDelay:(double)a3
{
  return [(CAMViewfinderViewController *)self pressShutterButtonWithTouchUpDelay:0 shutterBehavior:a3];
}

- (BOOL)pressShutterButtonWithTouchUpDelay:(double)a3 shutterBehavior:(int64_t)a4
{
  id v7 = [(CAMViewfinderViewController *)self _captureController];
  int v8 = [v7 isCaptureAvailable];

  if (v8)
  {
    int v9 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

    if (v9)
    {
      uint64_t v10 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      int v11 = [v10 externalButtonPressedWithBehavior:a4];

      if (v11)
      {
        dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        uint64_t v24 = MEMORY[0x263EF8330];
        uint64_t v25 = 3221225472;
        BOOL v26 = __82__CAMViewfinderViewController_pressShutterButtonWithTouchUpDelay_shutterBehavior___block_invoke;
        uint64_t v27 = &unk_263FA0208;
        BOOL v28 = self;
        pl_dispatch_after();
        LOBYTE(v11) = 1;
      }
    }
    else
    {
      int v13 = [(CAMViewfinderViewController *)self _shutterButton];
      int v11 = [v13 isEnabled];
      if (v11)
      {
        [(CAMViewfinderViewController *)self _handleShutterButtonPressed:v13];
        id v14 = +[CAMCaptureCapabilities capabilities];
        char v15 = [v14 captureOnTouchDown];

        if (v15)
        {
          dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
          uint64_t v18 = MEMORY[0x263EF8330];
          uint64_t v19 = 3221225472;
          long long v20 = __82__CAMViewfinderViewController_pressShutterButtonWithTouchUpDelay_shutterBehavior___block_invoke_2;
          id v21 = &unk_263FA0408;
          uint64_t v22 = self;
          id v23 = v13;
          pl_dispatch_after();
        }
        else
        {
          [(CAMViewfinderViewController *)self _handleShutterButtonReleased:v13];
        }
      }
    }
  }
  else
  {
    BOOL v12 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v17 = 0;
      _os_log_impl(&dword_2099F8000, v12, OS_LOG_TYPE_DEFAULT, "Capture not available for pressShutterButtonWithTouchUpDelay:shutterBehavior:", v17, 2u);
    }

    LOBYTE(v11) = 0;
  }
  return v11;
}

void __82__CAMViewfinderViewController_pressShutterButtonWithTouchUpDelay_shutterBehavior___block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _dynamicShutterControl];
  [v1 externalButtonReleased];
}

uint64_t __82__CAMViewfinderViewController_pressShutterButtonWithTouchUpDelay_shutterBehavior___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleShutterButtonReleased:*(void *)(a1 + 40)];
}

- (BOOL)takeStillDuringVideoWithTouchUpDelay:(double)a3
{
  char v5 = [(CAMViewfinderViewController *)self _captureController];
  int v6 = [v5 isCaptureAvailable];

  id v7 = +[CAMCaptureCapabilities capabilities];
  int v8 = [v7 captureOnTouchDown];

  if (!v6) {
    return 0;
  }
  int v9 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

  if (v9)
  {
    uint64_t v10 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    char v11 = [v10 externalLockButtonPressed];

    dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    pl_dispatch_after();
    return v11;
  }
  BOOL v14 = [(CAMViewfinderViewController *)self _stillDuringVideoButtonPressed:self->__stillDuringVideoButton];
  if (v8)
  {
    BOOL v13 = v14;
    dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    pl_dispatch_after();
    return v13;
  }
  stillDuringVideoButton = self->__stillDuringVideoButton;
  return [(CAMViewfinderViewController *)self _stillDuringVideoButtonReleased:stillDuringVideoButton];
}

void __68__CAMViewfinderViewController_takeStillDuringVideoWithTouchUpDelay___block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _dynamicShutterControl];
  [v1 externalLockButtonReleased];
}

uint64_t __68__CAMViewfinderViewController_takeStillDuringVideoWithTouchUpDelay___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stillDuringVideoButtonReleased:*(void *)(*(void *)(a1 + 32) + 1808)];
}

- (void)_updateAllControlsWithContentSize:(id)a3
{
  topBar = self->__topBar;
  char v5 = (NSString *)a3;
  [(CAMTopBar *)topBar invalidateIntrinsicContentSize];
  [(CAMTopBar *)self->__topBar setNeedsLayout];
  [(CAMBottomBar *)self->__bottomBar setNeedsLayout];
  id v13 = [(CAMViewfinderViewController *)self _accessibilityHUDManagers];
  LODWORD(topBar) = UIContentSizeCategoryIsAccessibilityCategory(v5);

  if (topBar && ![v13 count])
  {
    int v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];

    id v7 = [CAMBarsAccessibilityHUDManager alloc];
    int v8 = v7;
    if (v6)
    {
      int v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      uint64_t v10 = [(CAMBarsAccessibilityHUDManager *)v8 initWithView:v9 delegate:self cancelsTouchesInView:1];
      [v13 addObject:v10];
    }
    else
    {
      char v11 = [(CAMBarsAccessibilityHUDManager *)v7 initWithView:self->__topBar delegate:self cancelsTouchesInView:1];
      [v13 addObject:v11];

      int v9 = [[CAMBarsAccessibilityHUDManager alloc] initWithView:self->__bottomBar delegate:self cancelsTouchesInView:0];
      [v13 addObject:v9];
    }
  }
  BOOL v12 = [(CAMViewfinderViewController *)self view];
  [v12 setNeedsLayout];
}

- (void)_handleContentSizeCategoryDidChange:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self currentContentSize];
  [(CAMViewfinderViewController *)self _updateAllControlsWithContentSize:v4];
}

void __83__CAMViewfinderViewController__updatePanoramaViewVisibilityForViewfinderTransition__block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    double v1 = 0.0;
  }
  else {
    double v1 = 1.0;
  }
  id v2 = [*(id *)(a1 + 32) view];
  [v2 setAlpha:v1];
}

- (void)closedViewfinderController:(id)a3 wantsViewfinderOpenForReason:(int64_t)a4
{
  id v6 = a3;
  id v7 = [(CAMViewfinderViewController *)self _viewfinderTransitionable];
  [(CAMViewfinderViewController *)self _updateLevelMotionTracking];
  if (v7)
  {
    [(CAMViewfinderViewController *)self _setOpeningViewfinder:1];
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Began opening viewfinder"];
    int v8 = [MEMORY[0x263F82438] sharedApplication];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v9 = v8;
      [v9 willOpenViewfinderForReason:a4];
    }
    else
    {
      id v9 = 0;
    }
    BOOL v10 = [(CAMViewfinderViewController *)self _isSpatialMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
    if ([(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]]|| v10)
    {
      char v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateSpatialCaptureUIStateForGraphConfiguration:v11 animated:0];
    }
    objc_initWeak(&location, self);
    BOOL v12 = [(CAMViewfinderViewController *)self _transitionController];
    uint64_t v15 = MEMORY[0x263EF8330];
    uint64_t v16 = 3221225472;
    id v17 = __87__CAMViewfinderViewController_closedViewfinderController_wantsViewfinderOpenForReason___block_invoke;
    uint64_t v18 = &unk_263FA1FD0;
    objc_copyWeak(v20, &location);
    id v13 = v9;
    id v19 = v13;
    v20[1] = (id)a4;
    [v12 openForReason:a4 animated:1 withCompletionHandler:&v15];

    BOOL v14 = [(CAMViewfinderViewController *)self _targetFilterScrubberView];
    [v14 setSuspended:0];

    [(CAMViewfinderViewController *)self _updatePanoramaViewVisibilityForViewfinderTransition];
    [(CAMViewfinderViewController *)self _prepareDeferredProcessingIfNeeded];
    [(CAMViewfinderViewController *)self _updateExternalStorageMonitoringState:1];

    objc_destroyWeak(v20);
    objc_destroyWeak(&location);
  }
  else
  {
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Finished opening viewfinder"];
    [(CAMViewfinderViewController *)self _updatePanoramaViewVisibilityForViewfinderTransition];
  }
}

void __87__CAMViewfinderViewController_closedViewfinderController_wantsViewfinderOpenForReason___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _setOpeningViewfinder:0];
  [WeakRetained _updateEnabledControlsWithReason:@"Finished opening viewfinder"];
  [*(id *)(a1 + 32) didOpenViewfinderForReason:*(void *)(a1 + 48)];
}

- (void)disabledPreviewController:(id)a3 wantsPreviewDisabledForReason:(int64_t)a4
{
  id v4 = [(CAMViewfinderViewController *)self _captureController];
  [v4 changeToPreviewDisabled];
}

- (void)disabledPreviewController:(id)a3 wantsPreviewEnabledForReason:(int64_t)a4
{
  unint64_t v5 = [(CAMViewfinderViewController *)self _previewConfigurationForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition] videoThumbnailOutputEnabled:[(CAMViewfinderViewController *)self _wantsFilterScrubberVisible]];
  id v6 = [(CAMViewfinderViewController *)self _captureController];
  [v6 changeToPreviewEnabledWithConfiguration:v5];
}

- (void)captureController:(id)a3 didOutputOverCapturePreviewStatus:(int64_t)a4
{
  id v6 = +[CAMCaptureCapabilities capabilities];
  uint64_t v7 = objc_msgSend(v6, "spatialOverCaptureSupportForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  int64_t v8 = [(CAMViewfinderViewController *)self _overCapturePreviewStatus];
  [(CAMViewfinderViewController *)self _setOverCapturePreviewStatus:a4 & (v7 << 62 >> 63)];
  [(CAMViewfinderViewController *)self _updateViewfinderMaterialFromStatus:v8 animated:1];
}

- (void)_updateViewfinderMaterialAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _overCapturePreviewStatus];
  [(CAMViewfinderViewController *)self _updateViewfinderMaterialFromStatus:v5 animated:v3];
}

- (void)_updateViewfinderMaterialFromStatus:(int64_t)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  int64_t v7 = [(CAMViewfinderViewController *)self _overCapturePreviewStatus];
  switch(v7)
  {
    case 0:
      int64_t v8 = a3;
      BOOL v32 = 0;
      goto LABEL_4;
    case 1:
      BOOL v32 = v4;
      int64_t v8 = a3;
      BOOL v26 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      char v27 = [v26 isSemanticStyleControlVisible];

      BOOL v28 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      char v29 = [v28 isSmartStylePickerVisible];

      uint64_t v9 = 2;
      if ((v27 & 1) == 0 && (v29 & 1) == 0)
      {
        unint64_t v30 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus];
        uint64_t v31 = 2;
        if (((1 << v30) & 0x6202) == 0) {
          uint64_t v31 = 0;
        }
        if (v30 <= 0xE) {
          uint64_t v9 = v31;
        }
        else {
          uint64_t v9 = 0;
        }
      }
      break;
    case 2:
    case 4:
    case 5:
      BOOL v32 = v4;
      int64_t v8 = a3;
LABEL_4:
      uint64_t v9 = 4;
      break;
    case 3:
      BOOL v32 = v4;
      int64_t v8 = a3;
      uint64_t v9 = 3;
      break;
    default:
      BOOL v32 = v4;
      int64_t v8 = a3;
      uint64_t v9 = 0;
      break;
  }
  BOOL v10 = +[CAMCaptureCapabilities capabilities];
  if ([v10 isSpatialOverCaptureSupported])
  {
    char v11 = +[CAMUserPreferences preferences];
    int v12 = [v11 isOverCapturePreviewEnabled];

    if (!v12) {
      uint64_t v9 = 4;
    }
  }
  else
  {

    uint64_t v9 = 4;
  }
  id v13 = +[CAMCaptureCapabilities capabilities];
  char v14 = objc_msgSend(v13, "spatialOverCaptureSupportForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  BOOL v15 = [(CAMViewfinderViewController *)self _isZooming];
  BOOL v16 = [(CAMViewfinderViewController *)self _isReconfiguring];
  id v17 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int v18 = [v17 isReticleAnimating];

  double v19 = 3.0;
  if (v7 == 2)
  {
    long long v20 = +[CAMCaptureCapabilities capabilities];
    if ([v20 isBackQuadraSuperWideSupported]) {
      double v19 = 1.0;
    }
    else {
      double v19 = 3.0;
    }
  }
  int v22 = v8 == 4 && v7 == 1 || v15;
  int v23 = v22 | v16 | v18;
  if ((v14 & 2) == 0) {
    uint64_t v9 = 4;
  }
  double v24 = 0.35;
  if (!v23) {
    double v24 = v19;
  }
  if (v32) {
    double v25 = v24;
  }
  else {
    double v25 = 0.0;
  }
  id v33 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v33 setMaterial:v9 withDuration:v25];
}

- (int64_t)_topBarBackgroundStyleForMode:(int64_t)a3 capturing:(BOOL)a4
{
  BOOL v4 = a4;
  int64_t v7 = [(CAMViewfinderViewController *)self _layoutStyle];
  if ((unint64_t)a3 > 9) {
    goto LABEL_9;
  }
  if (((1 << a3) & 0x1A6) != 0)
  {
    int64_t v8 = v4;
    goto LABEL_11;
  }
  BOOL v9 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:v7];
  BOOL v10 = [(CAMViewfinderViewController *)self view];
  char v11 = [v10 window];
  int v12 = [v11 screen];
  BOOL v13 = CAMIsTallScreen(v12);

  BOOL v14 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  if (v7)
  {
    int v15 = 0;
  }
  else
  {
    BOOL v16 = [(CAMViewfinderViewController *)self _isShowingFilterScrubber];
    int v15 = v16 | [(CAMViewfinderViewController *)self _isAnimatingFilterScrubberDismissal];
  }
  if (v9 || !v13 || (v14 | v15) == 1) {
LABEL_9:
  }
    int64_t v8 = 0;
  else {
    int64_t v8 = 2;
  }
LABEL_11:
  if (v7 == 2) {
    return 1;
  }
  else {
    return v8;
  }
}

- (void)_updateBarBackgroundStyleForMode:(int64_t)a3 capturing:(BOOL)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  BOOL v9 = [(CAMViewfinderViewController *)self viewfinderView];
  BOOL v10 = v9;
  if (v5) {
    [v9 layoutIfNeeded];
  }
  char v11 = [(CAMViewfinderViewController *)self _topBar];
  objc_msgSend(v11, "setBackgroundStyle:animated:", -[CAMViewfinderViewController _topBarBackgroundStyleForMode:capturing:](self, "_topBarBackgroundStyleForMode:capturing:", a3, v6), v5);
  int v12 = [(CAMViewfinderViewController *)self _bottomBar];
  objc_msgSend(v12, "setBackgroundStyle:animated:", -[CAMViewfinderViewController _bottomBarBackgroundStyleForMode:](self, "_bottomBarBackgroundStyleForMode:", a3), v5);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __83__CAMViewfinderViewController__updateBarBackgroundStyleForMode_capturing_animated___block_invoke;
  aBlock[3] = &unk_263FA1FF8;
  void aBlock[4] = self;
  int64_t v21 = a3;
  id v13 = v12;
  id v20 = v13;
  BOOL v14 = (void (**)(void))_Block_copy(aBlock);
  [v10 setNeedsLayout];
  if (v5)
  {
    int v15 = (void *)MEMORY[0x263F82E00];
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    v16[2] = __83__CAMViewfinderViewController__updateBarBackgroundStyleForMode_capturing_animated___block_invoke_2;
    v16[3] = &unk_263FA08E8;
    id v17 = v10;
    int v18 = v14;
    [v15 animateWithDuration:2 delay:v16 options:0 animations:0.3 completion:0.0];
  }
  else
  {
    v14[2](v14);
  }
}

void __83__CAMViewfinderViewController__updateBarBackgroundStyleForMode_capturing_animated___block_invoke(uint64_t a1)
{
  if ([*(id *)(a1 + 32) emulationMode] == 1 || objc_msgSend(*(id *)(a1 + 32), "emulationMode") == 2)
  {
    id v2 = +[CAMCaptureCapabilities capabilities];
    int v3 = [v2 deviceSupportsCTM];

    if (v3)
    {
      if (*(void *)(a1 + 48)) {
        +[CAMFullscreenViewfinder darkControlBackgroundColor];
      }
      else {
      id v5 = +[CAMFullscreenViewfinder lightControlBackgroundColor];
      }
      BOOL v4 = [*(id *)(a1 + 40) flipButton];
      [v4 setTintColor:v5];
    }
  }
}

uint64_t __83__CAMViewfinderViewController__updateBarBackgroundStyleForMode_capturing_animated___block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) layoutIfNeeded];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

- (int64_t)_preferredControlToOpenInDrawerForMode:(int64_t)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _preferredControlToOpenInDrawerForMode];
  id v5 = [NSNumber numberWithInteger:a3];
  BOOL v6 = [v4 objectForKeyedSubscript:v5];

  if (v6) {
    int64_t v7 = [v6 integerValue];
  }
  else {
    int64_t v7 = -1;
  }

  return v7;
}

- (void)_setPreferredControlToOpenInDrawer:(int64_t)a3 forMode:(int64_t)a4
{
  if (a3 == -1)
  {
    id v8 = 0;
  }
  else
  {
    objc_msgSend(NSNumber, "numberWithInteger:");
    id v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  BOOL v6 = [(CAMViewfinderViewController *)self _preferredControlToOpenInDrawerForMode];
  int64_t v7 = [NSNumber numberWithInteger:a4];
  [v6 setObject:v8 forKeyedSubscript:v7];
}

- (BOOL)_isControlDrawerShowingPersistentControl
{
  id v2 = [(CAMViewfinderViewController *)self _controlDrawer];
  int v3 = v2;
  if (v2)
  {
    if (([v2 isControlExpandedForType:4] & 1) != 0
      || ([v3 isControlExpandedForType:6] & 1) != 0
      || ([v3 isControlExpandedForType:7] & 1) != 0
      || ([v3 isControlExpandedForType:9] & 1) != 0
      || ([v3 isControlExpandedForType:8] & 1) != 0
      || ([v3 isControlExpandedForType:10] & 1) != 0)
    {
      char v4 = 1;
    }
    else
    {
      char v4 = [v3 isControlExpandedForType:11];
    }
  }
  else
  {
    char v4 = 0;
  }

  return v4;
}

- (void)controlDrawer:(id)a3 didSelectMenuItemForControlType:(int64_t)a4
{
  id v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v4 dismissModalControlDrawerIfNeededForReason:5];
}

- (void)controlDrawer:(id)a3 didChangeHDRMode:(int64_t)a4
{
}

- (void)controlDrawer:(id)a3 didChangeFlashMode:(int64_t)a4
{
}

- (void)controlDrawer:(id)a3 didChangeAspectRatio:(int64_t)a4
{
}

- (void)controlDrawer:(id)a3 didChangeLivePhotoMode:(int64_t)a4
{
}

- (void)controlDrawer:(id)a3 didChangeTimerDuration:(int64_t)a4
{
}

- (void)controlDrawer:(id)a3 wantsFilterScrubberVisible:(BOOL)a4
{
  BOOL v4 = a4;
  [(CAMViewfinderViewController *)self _setWantsFilterScrubberVisible:a4 animated:1];
  if (v4) {
    uint64_t v6 = 4;
  }
  else {
    uint64_t v6 = -1;
  }
  int64_t v7 = [(CAMViewfinderViewController *)self _currentMode];
  [(CAMViewfinderViewController *)self _setPreferredControlToOpenInDrawer:v6 forMode:v7];
}

- (void)controlDrawer:(id)a3 didChangeRAWMode:(int64_t)a4
{
}

- (void)controlDrawer:(id)a3 didChangeProResVideoMode:(int64_t)a4
{
}

- (void)controlDrawer:(id)a3 didChangeVideoStabilizationMode:(int64_t)a4
{
}

- (void)controlDrawer:(id)a3 didCreateControlForType:(int64_t)a4
{
  id v21 = a3;
  switch(a4)
  {
    case 0:
      [(CAMViewfinderViewController *)self _updateFlashButtonForMode:[(CAMViewfinderViewController *)self _currentMode] animated:0];
      [(CAMViewfinderViewController *)self _updateFlashButtonAvailability];
      break;
    case 1:
      [(CAMViewfinderViewController *)self _updateLivePhotoButtonAnimated:0];
      break;
    case 2:
      int64_t v6 = [(CAMViewfinderViewController *)self photoModeAspectRatioCrop];
      int64_t v7 = [v21 aspectRatioButton];
      [v7 setAspectRatio:v6];
      goto LABEL_9;
    case 3:
      int64_t v8 = [(CAMViewfinderViewController *)self _resolvedTimerDuration];
      int64_t v7 = [v21 timerButton];
      [v7 setTimerDuration:v8];
      goto LABEL_9;
    case 4:
      int64_t v9 = [(CAMViewfinderViewController *)self _currentMode];
      int64_t v10 = [(CAMViewfinderViewController *)self _effectFilterTypeForMode:v9];
      BOOL v11 = v10 != +[CAMUserPreferences defaultFilterTypeForMode:v9];
      int64_t v7 = [v21 filterButton];
      [v7 setOn:v11];
      goto LABEL_9;
    case 5:
      [(CAMViewfinderViewController *)self _updateHDRButtonAnimated:0];
      break;
    case 6:
      int64_t v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v7, 0);
LABEL_9:

      break;
    case 7:
      [(CAMViewfinderViewController *)self _updateIntensityButtonForCurrentState];
      break;
    case 8:
      [(CAMViewfinderViewController *)self _updateExposureButtonForCurrentState];
      break;
    case 9:
      [(CAMViewfinderViewController *)self _updateLowLightControlsAnimated:0];
      break;
    case 10:
      [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:0];
      break;
    case 11:
      int v12 = [v21 smartStyleButton];
      id v13 = [v12 resetButton];
      [v13 addTarget:self action:sel__handleSmartStyleResetButton forControlEvents:64];

      BOOL v14 = [v21 smartStyleButton];
      int v15 = [v14 shutterButton];
      [v15 addTarget:self action:sel__handleSmartStyleShutterButtonPressed_ forControlEvents:1];

      BOOL v16 = [v21 smartStyleButton];
      id v17 = [v16 shutterButton];
      [v17 addTarget:self action:sel__handleSmartStyleShutterButtonReleased_ forControlEvents:64];

      int v18 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      uint64_t v19 = [v18 wantsSmartStyleResetButton];
      id v20 = [v21 smartStyleButton];
      [v20 setResetButtonVisibleWhenExpanded:v19];

      [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:0];
      break;
    case 12:
      [(CAMViewfinderViewController *)self _updateRAWButtonAnimated:0];
      break;
    case 13:
      [(CAMViewfinderViewController *)self _updateProResButtonAnimated:0];
      break;
    case 14:
      [(CAMViewfinderViewController *)self _updateSharedLibraryButtonAnimated:0];
      break;
    case 15:
      [(CAMViewfinderViewController *)self _updateVideoStabilizationButtonAnimated:0];
      break;
    default:
      break;
  }
}

- (void)controlDrawerDidCreateFilterScrubber:(id)a3
{
  BOOL v4 = [a3 filterScrubberView];
  [v4 setDelegate:self];

  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFilterScrubberForGraphConfiguration:v5];

  captureController = self->__captureController;
  [(CUCaptureController *)captureController registerVideoThumbnailContentsDelegate:self];
}

- (void)controlDrawerDidCreateApertureSlider:(id)a3
{
  BOOL v4 = [a3 apertureSlider];
  [v4 addTarget:self action:sel__apertureSliderDidChangeApertureValue_ forControlEvents:4096];

  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v5);
}

- (void)controlDrawerDidCreateIntensitySlider:(id)a3
{
  id v4 = a3;
  id v7 = +[CAMCaptureCapabilities capabilities];
  id v5 = [v4 intensitySlider];

  [v5 addTarget:self action:sel__handleIntensitySliderDidChangeValue_ forControlEvents:4096];
  [(CAMViewfinderViewController *)self _updatePortraitIntensitySliderForCurrentState];
  if (([v7 isAspectRatioCropSupportedForMode:6 devicePosition:0] & 1) != 0
    || [v7 isAspectRatioCropSupportedForMode:6 devicePosition:1])
  {
    [v5 setTransparentGradients];
    int64_t v6 = [v5 tickMarksConfiguration];
    [v6 setUseTickMarkLegibilityShadows:1];
  }
}

- (void)controlDrawerDidCreateExposureSlider:(id)a3
{
  id v4 = [a3 exposureSlider];
  [v4 addTarget:self action:sel__handleExposureSliderDidChangeValue_ forControlEvents:4096];
  [v4 setUseTickMarkLegibilityShadows:1];
  [(CAMViewfinderViewController *)self _updateExposureSliderForCurrentState];
}

- (void)controlDrawerDidCreateLowLightSlider:(id)a3
{
  id v4 = [a3 lowLightSlider];
  [v4 addTarget:self action:sel__handleLowLightSliderDidChangeValue_ forControlEvents:4096];
  [v4 setUseTickMarkLegibilityShadows:1];
  [(CAMViewfinderViewController *)self _updateLowLightSlider];
}

- (void)controlDrawerDidCreateSemanticStyleControl:(id)a3
{
  id v4 = [a3 semanticStyleControl];
  [v4 addTarget:self action:sel__handleSemanticStyleControlDidChangeValue_ forControlEvents:4096];
  [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:0];
}

- (void)controlDrawer:(id)a3 didChangeSharedLibraryMode:(int64_t)a4
{
  id v5 = [(CAMViewfinderViewController *)self _librarySelectionController];
  [v5 userDidPickSharedLibraryMode:a4];
}

- (void)controlDrawer:(id)a3 didChangeValueForControlType:(int64_t)a4
{
  id v5 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];
  [v5 didChangeValueForControlType:a4];
}

- (void)controlStatusBar:(id)a3 didCreateIndicatorForType:(unint64_t)a4
{
  id v6 = a3;
  id v19 = v6;
  switch(a4)
  {
    case 0uLL:
      id v7 = [v6 flashIndicator];
      [v7 addTarget:self action:sel__handleFlashIndicatorChangedMode_ forControlEvents:4096];

      [(CAMViewfinderViewController *)self _updateFlashButtonForMode:[(CAMViewfinderViewController *)self _currentMode] animated:0];
      int64_t v8 = [v19 flashIndicator];
      int64_t v9 = v8;
      int64_t v10 = sel__handleFlashIndicatorLongPressed_;
      goto LABEL_19;
    case 1uLL:
      [(CAMViewfinderViewController *)self _updateLivePhotoButtonAnimated:0];
      goto LABEL_21;
    case 2uLL:
      [(CAMViewfinderViewController *)self _updateHDRButtonAnimated:0];
      goto LABEL_21;
    case 3uLL:
      int64_t v14 = [(CAMViewfinderViewController *)self _resolvedTimerDuration];
      int v15 = [v19 timerIndicator];
      [v15 setTimerDuration:v14];

      BOOL v16 = [v19 timerIndicator];
      [v16 setShowingValue:1];

      goto LABEL_21;
    case 4uLL:
      [(CAMViewfinderViewController *)self _updateFilterButtonOnState];
      goto LABEL_21;
    case 5uLL:
      int64_t v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v9, 0);
      goto LABEL_20;
    case 7uLL:
      [(CAMViewfinderViewController *)self _updateExposureButtonForCurrentState];
      goto LABEL_21;
    case 8uLL:
      id v17 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateVideoConfigurationStatusIndicatorForGraphConfiguration:v17 animated:0];

      int64_t v9 = [v19 videoConfigurationIndicator];
      [v9 setTouchDelegate:self];
      goto LABEL_20;
    case 9uLL:
      [(CAMViewfinderViewController *)self _updateLowLightControlsAnimated:0];
      goto LABEL_21;
    case 0xAuLL:
      [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:0];
      goto LABEL_21;
    case 0xBuLL:
      [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:0];
      BOOL v11 = [(CAMViewfinderViewController *)self _descriptionOverlayViewByMode];
      int v12 = objc_msgSend(NSNumber, "numberWithInteger:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
      int64_t v9 = [v11 objectForKeyedSubscript:v12];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v13 = [v19 smartStyleIndicator];
        [(CAMViewfinderViewController *)self _startPulsingAnimationForSmartStyleIndicator:v13];
      }
      goto LABEL_20;
    case 0xCuLL:
      [(CAMViewfinderViewController *)self _updateRAWButtonAnimated:0];
      goto LABEL_21;
    case 0xDuLL:
      [(CAMViewfinderViewController *)self _updateProResButtonAnimated:0];
      goto LABEL_21;
    case 0xEuLL:
      [(CAMViewfinderViewController *)self _updateSharedLibraryButtonAnimated:0];
      goto LABEL_21;
    case 0xFuLL:
      [(CAMViewfinderViewController *)self _updateVideoStabilizationButtonAnimated:0];
      goto LABEL_21;
    case 0x10uLL:
      int v18 = [v6 photoFormatStatusIndicator];
      [v18 addTarget:self action:sel__handlePhotoFormatPickerChangedPhotoFormat_ forControlEvents:4096];

      [(CAMViewfinderViewController *)self _updatePhotoFormatPickerAnimated:0];
      int64_t v8 = [v19 photoFormatStatusIndicator];
      int64_t v9 = v8;
      int64_t v10 = sel__handlePhotoFormatPickerLongPressed_;
LABEL_19:
      [v8 addTarget:self action:v10 forControlEvents:0x1000000];
LABEL_20:

LABEL_21:
      id v6 = v19;
      break;
    default:
      break;
  }
}

- (void)controlStatusBar:(id)a3 didReceiveTapInIndicatorForType:(unint64_t)a4
{
  id v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v15 = MEMORY[0x263EF8330];
  uint64_t v16 = 3221225472;
  id v17 = __80__CAMViewfinderViewController_controlStatusBar_didReceiveTapInIndicatorForType___block_invoke;
  int v18 = &unk_263FA2020;
  id v19 = v6;
  id v20 = self;
  id v7 = v6;
  int64_t v8 = _Block_copy(&v15);
  id v13 = v8;
  switch(a4)
  {
    case 0uLL:
      [(CAMViewfinderViewController *)self _handleFlashIndicator];
      break;
    case 1uLL:
      [(CAMViewfinderViewController *)self _handleLivePhotoIndicator];
      break;
    case 2uLL:
      [(CAMViewfinderViewController *)self _handleHDRIndicator];
      break;
    case 3uLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 3, v9, v10, v11, v12);
      break;
    case 4uLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 4, v9, v10, v11, v12);
      break;
    case 5uLL:
      (*((void (**)(void *, uint64_t))v8 + 2))(v8, 6);
      int64_t v14 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v14, 1);

      break;
    case 6uLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 7, v9, v10, v11, v12);
      break;
    case 7uLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 8, v9, v10, v11, v12);
      break;
    case 9uLL:
      [(CAMViewfinderViewController *)self _handleNightModeIndicator];
      break;
    case 0xAuLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 10, v9, v10, v11, v12);
      break;
    case 0xBuLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 11, v9, v10, v11, v12);
      break;
    case 0xCuLL:
      [(CAMViewfinderViewController *)self _handleRAWIndicator];
      break;
    case 0xDuLL:
      [(CAMViewfinderViewController *)self _handleProResIndicator];
      break;
    case 0xEuLL:
      [(CAMViewfinderViewController *)self _handleSharedLibraryIndicator];
      break;
    case 0xFuLL:
      [(CAMViewfinderViewController *)self _handleVideoStabilizationIndicator];
      break;
    case 0x10uLL:
      [(CAMViewfinderViewController *)self _handlePhotoFormatPickerTapped];
      break;
    default:
      break;
  }
}

void __80__CAMViewfinderViewController_controlStatusBar_didReceiveTapInIndicatorForType___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) controlDrawer];
  if ([*(id *)(a1 + 32) isControlDrawerPresentedModallyWithControlType:a2])
  {
    [*(id *)(a1 + 32) dismissModalControlDrawerIfNeededForReason:1];
  }
  else if ([v4 isControlExpandedForType:a2])
  {
    [v4 collapseExpandableButtonsAnimated:1 updatePreferredDrawerControl:1];
  }
  else
  {
    if (a2 == 4) {
      [*(id *)(a1 + 40) _setWantsFilterScrubberVisible:1 animated:1];
    }
    [*(id *)(a1 + 32) presentControlDrawerModally:1 forReason:1 controlType:a2];
  }
}

- (void)controlStatusBar:(id)a3 didChangeExpandingControl:(id)a4 expanded:(BOOL)a5
{
}

- (void)controlStatusBar:(id)a3 willChangeExpandingControl:(id)a4 expanded:(BOOL)a5
{
  if (a5)
  {
    id v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v5 setControlDrawerExpanded:0 forReason:9 animated:1];
  }
}

- (void)badgeTray:(id)a3 didCreateBadgeForType:(unint64_t)a4
{
  id v12 = a3;
  if ((uint64_t)a4 > 15)
  {
    if (a4 == 16)
    {
      id v7 = [(CAMViewfinderViewController *)self _librarySelectionController];
      uint64_t v10 = [v7 sharedLibraryMode];
      uint64_t v11 = [v12 sharedLibraryBadge];
      [v11 setSharedLibraryMode:v10];
    }
    else
    {
      if (a4 != 32) {
        goto LABEL_11;
      }
      int64_t v8 = [(CAMViewfinderViewController *)self _desiredVideoStabilizationMode];
      id v7 = [v12 videoStabilizationBadge];
      [v7 setVideoStabilizationMode:v8];
    }
  }
  else if (a4 == 2)
  {
    int64_t v9 = [(CAMViewfinderViewController *)self _resolvedLivePhotoMode];
    id v7 = [v12 livePhotoBadge];
    [v7 setIrisMode:v9];
  }
  else
  {
    if (a4 != 4) {
      goto LABEL_11;
    }
    int64_t v6 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadgeTypeForCurrentState];
    id v7 = [v12 focusLockBadge];
    [v7 setFocusLockType:v6];
  }

LABEL_11:
}

- (void)_handleFlashIndicator
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  id v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v5 = [v4 controlStatusBar];
  uint64_t v10 = [v5 flashIndicator];

  if ([v10 isExpanded])
  {
    uint64_t v6 = [v10 setExpanded:0 animated:1];
  }
  else if ([(CAMViewfinderViewController *)self _isFlashUnavailableForMode:v3])
  {
    uint64_t v6 = [(CAMViewfinderViewController *)self _showFlashOrTorchUnavailableAlertView];
  }
  else
  {
    uint64_t v6 = [(CAMViewfinderViewController *)self _displayedFlashModeForMode:v3 flashActive:0];
    if ((unint64_t)(v6 - 1) >= 2)
    {
      int64_t v9 = v10;
      if (v6) {
        goto LABEL_11;
      }
      id v7 = self;
      uint64_t v8 = 2;
    }
    else
    {
      id v7 = self;
      uint64_t v8 = 0;
    }
    uint64_t v6 = [(CAMViewfinderViewController *)v7 _handleUserChangedToFlashMode:v8];
  }
  int64_t v9 = v10;
LABEL_11:
  MEMORY[0x270F9A758](v6, v9);
}

- (void)_handleLivePhotoIndicator
{
  int64_t v3 = [(CAMViewfinderViewController *)self _resolvedLivePhotoMode];
  if ([(CAMViewfinderViewController *)self _isLowLightActiveForCurrentSettings]
    || !v3)
  {
    id v5 = +[CAMCaptureCapabilities capabilities];
    int v6 = [v5 isLivePhotoAutoModeSupported];

    if (v6) {
      uint64_t v4 = 2;
    }
    else {
      uint64_t v4 = 1;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  [(CAMViewfinderViewController *)self _handleUserChangedToLivePhotoMode:v4];
}

- (void)_handleHDRIndicator
{
  if ([(CAMViewfinderViewController *)self _isLowLightActiveForCurrentSettings]
    || ![(CAMViewfinderViewController *)self _resolvedHDRMode])
  {
    uint64_t v4 = +[CAMCaptureCapabilities capabilities];
    int v5 = objc_msgSend(v4, "isAutomaticHDRSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

    if (v5) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  [(CAMViewfinderViewController *)self _handleUserChangedToHDRMode:v3];
}

- (void)_handleNightModeIndicator
{
  BOOL v3 = [(CAMViewfinderViewController *)self _resolvedLowLightControlMode] == 0;
  [(CAMViewfinderViewController *)self _handleUserChangedToNightMode:v3];
}

- (void)_handleFlashButtonChangedFlashMode
{
  BOOL v3 = [(CAMViewfinderViewController *)self _flashButton];
  uint64_t v4 = [v3 flashMode];

  [(CAMViewfinderViewController *)self _handleUserChangedToFlashMode:v4];
}

- (void)_handleUserChangedToFlashMode:(int64_t)a3
{
  unint64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
  if (v5 <= 9)
  {
    if (((1 << v5) & 0x186) != 0)
    {
      [(CAMViewfinderViewController *)self _setDesiredTorchMode:+[CAMCaptureConversions torchModeForFlashMode:a3] animated:1];
    }
    else if (((1 << v5) & 0x251) != 0)
    {
      [(CAMViewfinderViewController *)self _setDesiredFlashMode:a3];
      if (a3
        && [(CAMViewfinderViewController *)self _shouldDisableCompromisedFlashForDevicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]])
      {
        [(CAMViewfinderViewController *)self _setDidAcceptCompromisedFlash:1];
      }
      [(CAMViewfinderViewController *)self _setFlashAndHDRConflictingControl:1];
      [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:1];
      [(CAMViewfinderViewController *)self _updateLowLightConflict:1 isConflicting:[(CAMViewfinderViewController *)self _resolvedFlashMode] != 0];
    }
  }
  [(CAMViewfinderViewController *)self _enableProactiveSuggestionsAnimated:1];
}

- (int64_t)_resolvedVideoStabilizationMode
{
  BOOL v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int64_t v4 = -[CAMViewfinderViewController _resolvedVideoStabilizationModeForVideoConfiguration:](self, "_resolvedVideoStabilizationModeForVideoConfiguration:", [v3 videoConfiguration]);

  return v4;
}

- (int64_t)_resolvedVideoStabilizationModeForVideoConfiguration:(int64_t)a3
{
  unint64_t v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int v6 = +[CAMCaptureCapabilities capabilities];
  if (objc_msgSend(v6, "isVideoStabilizationControlSupportedForMode:device:videoConfiguration:videoEncodingBehavior:trueVideoEnabled:prefersHDR10BitVideo:", objc_msgSend(v5, "mode"), objc_msgSend(v5, "device"), a3, objc_msgSend(v5, "videoEncodingBehavior"), objc_msgSend(v5, "trueVideoEnabled"), objc_msgSend(v5, "prefersHDR10BitVideo")))int64_t v7 = -[CAMViewfinderViewController _desiredVideoStabilizationMode](self, "_desiredVideoStabilizationMode"); {
  else
  }
    int64_t v7 = 0;

  return v7;
}

- (void)_setDesiredTorchMode:(int64_t)a3
{
}

- (void)_setDesiredTorchMode:(int64_t)a3 animated:(BOOL)a4
{
  if (self->__desiredTorchMode != a3)
  {
    self->__desiredTorchMode = a3;
    id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [(CAMViewfinderViewController *)self _updateTorchModeForGraphConfiguration:v5 animated:1];
  }
}

- (void)_updateTorchModeForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  int64_t v6 = [(CAMViewfinderViewController *)self _resolvedTorchModeForGraphConfiguration:a3];
  [(CAMViewfinderViewController *)self _setResolvedTorchMode:v6 animated:v4];
}

- (int64_t)_resolvedTorchModeForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _desiredTorchMode];
  if ([v4 trueVideoEnabled]) {
    int64_t v5 = +[CAMCaptureConversions torchModeForFlashMode:[(CAMViewfinderViewController *)self _resolvedFlashMode]];
  }
  int64_t v6 = [(CAMViewfinderViewController *)self _captureController];
  int v7 = [v6 isTorchAvailable];
  if ((v7 & [(CAMViewfinderViewController *)self _isFlashOrTorchSupportedForGraphConfiguration:v4]) != 0)int64_t v8 = v5; {
  else
  }
    int64_t v8 = 0;

  return v8;
}

- (void)_setResolvedTorchMode:(int64_t)a3 animated:(BOOL)a4
{
  if (self->__resolvedTorchMode != a3)
  {
    BOOL v4 = a4;
    self->__resolvedTorchMode = a3;
    int64_t v6 = [(CAMViewfinderViewController *)self _currentMode];
    [(CAMViewfinderViewController *)self _updateFlashButtonForMode:v6 animated:v4];
    [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:v4];
    [(CAMViewfinderViewController *)self _updateTorchModeOnControllerForMode:v6];
  }
}

- (void)_updateTorchModeOnControllerForMode:(int64_t)a3
{
  int64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  if ([v5 isCapturingVideo])
  {
    int64_t v6 = [(CAMViewfinderViewController *)self _captureController];
    int v7 = [v6 videoCapturePaused];

    if (!v7) {
      return;
    }
  }
  else
  {
  }
  int64_t v8 = 0;
  if ((unint64_t)a3 <= 8 && ((1 << a3) & 0x186) != 0) {
    int64_t v8 = [(CAMViewfinderViewController *)self _resolvedTorchMode];
  }
  if ([(CAMViewfinderViewController *)self isPerformingReviewUsingOverlay]) {
    int64_t v9 = 0;
  }
  else {
    int64_t v9 = v8;
  }
  id v10 = [(CAMViewfinderViewController *)self _captureController];
  [v10 changeToTorchMode:v9];
}

- (void)_handleFlashIndicatorChangedMode:(id)a3
{
  uint64_t v4 = [a3 flashMode];
  [(CAMViewfinderViewController *)self _handleUserChangedToFlashMode:v4];
}

- (void)_handleFlashIndicatorLongPressed:(id)a3
{
  id v3 = a3;
  if (([v3 isExpanded] & 1) == 0 && (objc_msgSend(v3, "isFlashUnavailable") & 1) == 0) {
    [v3 setExpanded:1 animated:1];
  }
}

- (id)_flashOrTorchDisabledMessageForCurrentPowerPressure
{
  id v2 = [(CAMViewfinderViewController *)self _powerController];
  int v3 = [v2 powerPressureLevel];

  if (v3) {
    uint64_t v4 = @"FLASH_DISABLED_POWER_PRESSURE_MESSAGE_%@";
  }
  else {
    uint64_t v4 = @"FLASH_DISABLED_MESSAGE_%@";
  }
  int64_t v5 = NSString;
  int64_t v6 = [MEMORY[0x263F82670] currentDevice];
  int v7 = [v6 model];
  int64_t v8 = [v5 stringWithValidatedFormat:v4, @"%@", 0, v7 validFormatSpecifiers error];

  int64_t v9 = CAMLocalizedFrameworkString(v8, 0);

  return v9;
}

- (void)_showFlashOrTorchUnavailableAlertView
{
  int v3 = [(CAMViewfinderViewController *)self _flashOrTorchUnavailableAlertController];
  if (!v3)
  {
    uint64_t v4 = CAMLocalizedFrameworkString(@"FLASH_DISABLED_TITLE", 0);
    int64_t v5 = CAMLocalizedFrameworkString(@"OK_REPLY", 0);
    int64_t v6 = [(CAMViewfinderViewController *)self _flashOrTorchDisabledMessageForCurrentPowerPressure];
    int v3 = [MEMORY[0x263F82418] alertControllerWithTitle:v4 message:v6 preferredStyle:1];
    objc_initWeak(&location, self);
    int v7 = (void *)MEMORY[0x263F82400];
    uint64_t v9 = MEMORY[0x263EF8330];
    uint64_t v10 = 3221225472;
    uint64_t v11 = __68__CAMViewfinderViewController__showFlashOrTorchUnavailableAlertView__block_invoke;
    id v12 = &unk_263FA2048;
    objc_copyWeak(&v13, &location);
    int64_t v8 = [v7 actionWithTitle:v5 style:0 handler:&v9];
    objc_msgSend(v3, "addAction:", v8, v9, v10, v11, v12);
    [v3 setPreferredAction:v8];
    [(CAMViewfinderViewController *)self _setFlashOrTorchUnavailableAlertController:v3];
    [(CAMViewfinderViewController *)self presentViewController:v3 animated:1 completion:0];

    objc_destroyWeak(&v13);
    objc_destroyWeak(&location);
  }
}

void __68__CAMViewfinderViewController__showFlashOrTorchUnavailableAlertView__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _setFlashOrTorchUnavailableAlertController:0];
}

- (void)_handleHDRButtonChangedHDRMode
{
  int v3 = [(CAMViewfinderViewController *)self _HDRButton];
  uint64_t v4 = [v3 HDRMode];

  [(CAMViewfinderViewController *)self _handleUserChangedToHDRMode:v4];
}

- (void)_handleUserChangedToHDRMode:(int64_t)a3
{
  [(CAMViewfinderViewController *)self _setDesiredHDRMode:a3];
  [(CAMViewfinderViewController *)self _setFlashAndHDRConflictingControl:2];
  [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:1];
  int64_t v4 = [(CAMViewfinderViewController *)self _resolvedHDRMode];
  [(CAMViewfinderViewController *)self _updateLowLightConflict:2 isConflicting:v4 != 0];
  int64_t v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = objc_msgSend(v5, "shouldSuspendVideoHDRForHDRMode:captureMode:", v4, -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

  id v7 = [(CAMViewfinderViewController *)self _captureController];
  [v7 changeToVideoHDRSuspended:v6];
}

- (void)_updateHDRButtonAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v18 = +[CAMCaptureCapabilities capabilities];
  int64_t v5 = [(CAMViewfinderViewController *)self _currentDevicePosition];
  uint64_t v6 = [v18 isHDROnSupportedForDevicePosition:v5];
  uint64_t v7 = [v18 isAutomaticHDRSupportedForDevicePosition:v5];
  int64_t v8 = [(CAMViewfinderViewController *)self _resolvedHDRMode];
  if ([(CAMViewfinderViewController *)self _isLowLightActiveForCurrentSettings]) {
    int64_t v8 = 0;
  }
  uint64_t v9 = [(CAMViewfinderViewController *)self _HDRButton];
  [v9 setHDRMode:v8];

  uint64_t v10 = [(CAMViewfinderViewController *)self _HDRButton];
  [v10 setAllowsHDROn:v6];

  uint64_t v11 = [(CAMViewfinderViewController *)self _HDRButton];
  [v11 setAllowsAutomaticHDR:v7 needsReloadData:1];

  id v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v13 = [v12 controlStatusBar];
  int64_t v14 = [v13 hdrIndicator];

  uint64_t v15 = [(CAMViewfinderViewController *)self _controlDrawer];
  uint64_t v16 = [v15 hdrButton];

  [v16 setHDRMode:v8 animated:v3];
  [v16 setAllowAutoHDR:v7];
  [v16 setAllowHDROn:v6];
  [v14 setHDRMode:v8 animated:v3];
  [v14 setAutoHDRAllowed:v7];
  id v17 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v17 setHdrMode:v8];
}

- (void)_resolvePotentiallyConflictingControlsForMode:(int64_t)a3 device:(int64_t)a4 resolvedFlashMode:(int64_t *)a5 resolvedHDRMode:(int64_t *)a6 resolvedLivePhotoMode:(int64_t *)a7 resolvedRAWMode:(int64_t *)a8 resolvedPhotoResolution:(int64_t *)a9
{
  uint64_t v16 = [(CAMViewfinderViewController *)self _captureController];
  id v45 = a7;
  double v46 = a8;
  double v43 = a5;
  uint64_t v44 = a6;
  if ((unint64_t)(a4 - 1) > 0xA) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = qword_209C794E8[a4 - 1];
  }
  id v18 = +[CAMCaptureCapabilities capabilities];
  int v42 = [v18 isAutomaticHDRSupportedForDevicePosition:v17];
  int v40 = [v18 isHDROnSupportedForDevicePosition:v17];
  BOOL v19 = [(CAMViewfinderViewController *)self _isLivePhotoSupportedForMode:a3 device:a4];
  int v20 = [v18 isHDRSupportedForMode:a3 devicePosition:v17];
  int v21 = [v18 isFlashOrTorchSupportedForMode:a3 devicePosition:v17];
  BOOL v22 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  uint64_t v48 = v16;
  int v23 = [v16 isFlashAvailable];
  BOOL v24 = [(CAMViewfinderViewController *)self _shouldDisableCompromisedFlashForDevicePosition:v17];
  if (v21) {
    int v25 = v23 & !v24;
  }
  else {
    int v25 = 0;
  }
  BOOL v26 = +[CAMUserPreferences preferences];
  double v47 = v26;
  if ([v18 isLinearDNGSupportedForMode:a3]
    && [v26 rawControlEnabled])
  {
    int64_t v27 = [(CAMViewfinderViewController *)self _desiredRAWMode];
  }
  else
  {
    int64_t v27 = 0;
  }
  int64_t v54 = v27;
  if ([(CAMViewfinderViewController *)self _arePhotoFormatConflictsSupportedForMode:a3 device:a4])
  {
    unint64_t v41 = [(CAMViewfinderViewController *)self _photoFormatConflicts];
    if (!v25)
    {
LABEL_13:
      int64_t v28 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v41 = 0;
    if (!v25) {
      goto LABEL_13;
    }
  }
  int64_t v28 = [(CAMViewfinderViewController *)self _desiredFlashMode];
LABEL_16:
  int64_t v53 = v28;
  if ((v20 ^ 1 | v22)) {
    int64_t v29 = 0;
  }
  else {
    int64_t v29 = [(CAMViewfinderViewController *)self _desiredHDRMode];
  }
  if (!v19 || v22) {
    int64_t v30 = 0;
  }
  else {
    int64_t v30 = [(CAMViewfinderViewController *)self _desiredLivePhotoMode];
  }
  int64_t v31 = [(CAMViewfinderViewController *)self _desiredPhotoResolution];
  if ([v18 isModernHDRSupported]
    && [v47 shouldUseModernHDRBehavior])
  {
    if ([v18 isSmartHDRSupported]) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = 2;
    }
  }
  else
  {
    if (v29 == 2) {
      int v33 = v42;
    }
    else {
      int v33 = 1;
    }
    if (v33 == 1)
    {
      if (v29 == 1) {
        int v34 = v40;
      }
      else {
        int v34 = 1;
      }
      uint64_t v35 = 2;
      if (!v42) {
        uint64_t v35 = 0;
      }
      if (v34) {
        uint64_t v32 = v29;
      }
      else {
        uint64_t v32 = v35;
      }
    }
    else
    {
      uint64_t v32 = 0;
    }
  }
  int64_t v52 = v28;
  int64_t v50 = v30;
  int64_t v51 = v32;
  int64_t v49 = v31;
  if ([v48 isCapturingBurst])
  {
    int64_t v52 = 0;
    int64_t v50 = 0;
    int64_t v51 = 0;
    int64_t v54 = 0;
    int64_t v49 = 0;
    long long v37 = v47;
    long long v36 = v48;
  }
  else
  {
    if ([(CAMViewfinderViewController *)self _isBurstEndSoundPlaying]) {
      int64_t v38 = 0;
    }
    else {
      int64_t v38 = v30;
    }
    +[CAMConflictingControlConfiguration resolveDesiredRAWMode:v27 photoFormatConflicts:v41 desiredLivePhotoMode:v38 desiredFlashMode:v28 toRAWMode:&v54 toLivePhotoMode:&v50 toFlashMode:&v53];
    int64_t v39 = [(CAMViewfinderViewController *)self _flashAndHDRConflictingControl];
    +[CAMConflictingControlConfiguration resolveDesiredFlashMode:v53 desiredHDRMode:v32 primaryConflictingControl:v39 device:a4 toFlashMode:&v52 HDRMode:&v51];
    long long v37 = v47;
    [v47 resolveDesiredPhotoResolution:v31 livePhotoMode:v50 rawMode:v54 conflicts:v41 mode:a3 device:a4 resolvedPhotoResolution:&v49 resolvedLivePhotoMode:&v50];
    long long v36 = v48;
  }
  if (v43) {
    int64_t *v43 = v52;
  }
  if (v44) {
    int64_t *v44 = v51;
  }
  if (v45) {
    int64_t *v45 = v50;
  }
  if (v46) {
    int64_t *v46 = v54;
  }
  if (a9) {
    *a9 = v49;
  }
}

- (void)_resolveAndUpdatePotentiallyConflictingControls:(BOOL)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  uint64_t v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v8 = [v7 mode];
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  -[CAMViewfinderViewController _resolvePotentiallyConflictingControlsForMode:device:resolvedFlashMode:resolvedHDRMode:resolvedLivePhotoMode:resolvedRAWMode:resolvedPhotoResolution:](self, "_resolvePotentiallyConflictingControlsForMode:device:resolvedFlashMode:resolvedHDRMode:resolvedLivePhotoMode:resolvedRAWMode:resolvedPhotoResolution:", v8, [v7 device], &v14, &v13, &v12, &v11, &v10);
  [(CAMViewfinderViewController *)self _setResolvedFlashMode:v14];
  [(CAMViewfinderViewController *)self _setResolvedHDRMode:v13];
  [(CAMViewfinderViewController *)self _setResolvedLivePhotoMode:v12];
  [(CAMViewfinderViewController *)self _setResolvedRAWMode:v11];
  [(CAMViewfinderViewController *)self _setResolvedPhotoResolution:v10];
  [(CAMViewfinderViewController *)self _updateResolvedMacroModeAndUpdateFallbackPrimaryConstituentDeviceSelection:1];
  uint64_t v9 = +[CAMCaptureCapabilities capabilities];
  if ([v9 isProResVideoSupportedForMode:v8]
    && (objc_msgSend(v9, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", v8, objc_msgSend(v7, "videoConfiguration"), -[CAMViewfinderViewController _wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:](self, "_wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:", v8, objc_msgSend(v7, "videoEncodingBehavior"))) & 1) == 0)
  {
    [(CAMViewfinderViewController *)self _setDesiredProResVideoMode:0];
  }
  [(CAMViewfinderViewController *)self _updateFlashButtonForMode:v8 animated:v4];
  [(CAMViewfinderViewController *)self _updateHDRButtonAnimated:v4];
  [(CAMViewfinderViewController *)self _updateLivePhotoButtonAnimated:v4];
  [(CAMViewfinderViewController *)self _updateRAWButtonAnimated:v4];
  [(CAMViewfinderViewController *)self _updateProResButtonAnimated:v4];
  [(CAMViewfinderViewController *)self _updateVideoStabilizationButtonAnimated:v4];
  [(CAMViewfinderViewController *)self _updatePhotoFormatPickerAnimated:v4];
  [(CAMViewfinderViewController *)self _updatePreviewSemanticStyleAnimated:v4];
  [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:v4];
  [(CAMViewfinderViewController *)self _updateSmartStyleOnSession];
  [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:v4];
  [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
  [(CAMViewfinderViewController *)self _updatePairedVideoCaptureOnControllerForGraphConfiguration:v7 isShowingCameraRoll:[(CAMViewfinderViewController *)self _isShowingCameraRoll]];
  if (v5) {
    [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  }
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateFlashModeOnControllerForMode:v8];
  [(CAMViewfinderViewController *)self _updateHDRSuggestionMonitoringForGraphConfiguration:v7];
  [(CAMViewfinderViewController *)self _updateCurrentPreviewFiltersOnCaptureController];
  [(CAMViewfinderViewController *)self _updatePreviewControllerIndicatorStyle];
  [(CAMViewfinderViewController *)self _updatePreviewControllerPortraitStatus];
  [(CAMViewfinderViewController *)self _preparePhotoOutputForExpectedPhotoResolution];
}

- (void)_updateFlashModeOnControllerForMode:(int64_t)a3
{
  int64_t v4 = 0;
  if ((unint64_t)a3 <= 6 && ((1 << a3) & 0x51) != 0) {
    int64_t v4 = [(CAMViewfinderViewController *)self _resolvedFlashMode];
  }
  id v5 = [(CAMViewfinderViewController *)self _captureController];
  [v5 changeToFlashMode:v4];
}

- (int64_t)_displayedFlashModeForMode:(int64_t)a3 flashActive:(BOOL *)a4
{
  uint64_t v7 = [(CAMViewfinderViewController *)self _captureController];
  int v8 = [v7 isFlashActive];
  char v9 = [v7 isTorchActive];
  int64_t v10 = [(CAMViewfinderViewController *)self _resolvedFlashMode];
  if ((unint64_t)a3 > 9) {
    goto LABEL_8;
  }
  if (((1 << a3) & 0x186) != 0)
  {
    int64_t v10 = +[CAMCaptureConversions flashModeForTorchMode:[(CAMViewfinderViewController *)self _resolvedTorchMode]];
    goto LABEL_10;
  }
  if (((1 << a3) & 0x51) == 0)
  {
    int64_t v10 = 0;
LABEL_8:
    char v9 = 0;
    goto LABEL_10;
  }
  int v11 = [v7 isCapturingVideo];
  if ((v11 | v8)) {
    v9 |= v11 ^ 1;
  }
  else {
    char v9 = [(CAMViewfinderViewController *)self _resolvedFlashMode] == 1;
  }
LABEL_10:
  int64_t v12 = [(CAMViewfinderViewController *)self _resolvedLowLightMode];
  uint64_t v13 = 2;
  if (v10 != 1) {
    uint64_t v13 = v10;
  }
  if (v12 == 1)
  {
    BOOL v14 = 0;
  }
  else
  {
    uint64_t v13 = v10;
    BOOL v14 = v9;
  }
  if (v12 == 2) {
    int64_t v15 = 0;
  }
  else {
    int64_t v15 = v13;
  }
  if (v12 == 2) {
    BOOL v16 = v9;
  }
  else {
    BOOL v16 = v14;
  }
  if (a4) {
    *a4 = v16;
  }

  return v15;
}

- (void)_updateFlashButtonForMode:(int64_t)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  unsigned __int8 v14 = 0;
  int64_t v6 = [(CAMViewfinderViewController *)self _displayedFlashModeForMode:a3 flashActive:&v14];
  uint64_t v7 = [(CAMViewfinderViewController *)self _flashButton];
  [v7 setFlashMode:v6];

  int v8 = [(CAMViewfinderViewController *)self _controlDrawer];
  char v9 = [v8 flashButton];
  [v9 setFlashMode:v6 animated:v4];

  int64_t v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int v11 = [v10 controlStatusBar];
  int64_t v12 = [v11 flashIndicator];

  [v12 setFlashActive:v14];
  [v12 setFlashMode:v6 animated:v4];
  uint64_t v13 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v13 setFlashMode:v6];
}

- (void)_handleSharedLibraryIndicator
{
  id v4 = [(CAMViewfinderViewController *)self _librarySelectionController];
  if (CAMSharedLibraryModeIsOn([v4 sharedLibraryMode])) {
    uint64_t v3 = 3;
  }
  else {
    uint64_t v3 = 2;
  }
  [v4 userDidPickSharedLibraryMode:v3];
  [(CAMViewfinderViewController *)self _startTimer:1];
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:1];
}

- (void)_updateSharedLibraryButtonAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = [(CAMViewfinderViewController *)self _librarySelectionController];
  uint64_t v6 = [v5 sharedLibraryMode];

  uint64_t v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int v8 = [v7 controlStatusBar];
  id v17 = [v8 sharedLibraryIndicator];

  char v9 = [(CAMViewfinderViewController *)self _controlDrawer];
  int64_t v10 = [v9 sharedLibraryButton];

  [v17 setSharedLibraryMode:v6 animated:v3];
  [v10 setSharedLibraryMode:v6 animated:v3];
  int v11 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
  [v11 setSharedLibraryMode:v6];

  int64_t v12 = +[CAMCaptureCapabilities capabilities];
  if ([v12 isInternalInstall])
  {
    sharedLibraryLongPressGestureRecognizer = self->__sharedLibraryLongPressGestureRecognizer;

    if (sharedLibraryLongPressGestureRecognizer) {
      goto LABEL_5;
    }
    unsigned __int8 v14 = (UILongPressGestureRecognizer *)[objc_alloc(MEMORY[0x263F82938]) initWithTarget:self action:sel__sharedLibraryTapToRadarAction];
    int64_t v15 = self->__sharedLibraryLongPressGestureRecognizer;
    self->__sharedLibraryLongPressGestureRecognizer = v14;

    [(UILongPressGestureRecognizer *)self->__sharedLibraryLongPressGestureRecognizer setDelegate:self];
    [v17 addGestureRecognizer:self->__sharedLibraryLongPressGestureRecognizer];
    int64_t v12 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
    [v12 addGestureRecognizer:self->__sharedLibraryLongPressGestureRecognizer];
  }

LABEL_5:
  BOOL v16 = [(CAMViewfinderViewController *)self _remoteShutterController];
  if ([(CAMViewfinderViewController *)self _isCapturingFromTimer]) {
    uint64_t v6 = [(CAMViewfinderViewController *)self _cachedSharedLibraryTimerState];
  }
  [v16 setSharedLibraryMode:v6];
}

- (void)_updateSharedLibraryBadgeForCurrentState
{
  BOOL v3 = [(CAMViewfinderViewController *)self _librarySelectionController];
  uint64_t v4 = [v3 sharedLibraryMode];

  id v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v6 = [v5 badgeTray];
  uint64_t v7 = [v6 sharedLibraryBadge];
  [v7 setSharedLibraryMode:v4];

  int v8 = [(CAMViewfinderViewController *)self _sharedLibraryBadge];
  [v8 setSharedLibraryMode:v4];

  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:1];
}

- (void)_updateSharedLibraryImageWellIndicatorForCurrentState
{
  BOOL v3 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v5 = [v3 sharedLibraryImageWellIndicatorView];

  uint64_t v4 = [(CAMViewfinderViewController *)self _librarySelectionController];
  objc_msgSend(v5, "setSharedLibraryMode:", objc_msgSend(v4, "sharedLibraryMode"));
}

- (void)_sharedLibraryTapToRadarAction
{
  BOOL v3 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
  uint64_t v4 = [v3 touchingGestureRecognizer];
  [v4 cancelGesture];

  id v5 = [(CAMViewfinderViewController *)self _librarySelectionController];
  id v6 = [v5 tapToRadarAlertController];

  [(CAMViewfinderViewController *)self presentViewController:v6 animated:1 completion:0];
}

- (void)librarySelectionDidChangeSharedLibraryMode:(int64_t)a3
{
  if ([(CAMViewfinderViewController *)self _isCapturingFromTimer])
  {
    uint64_t v4 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Library selection controller changed shared library mode when timer was active, not updating shared library state", v5, 2u);
    }
  }
  else
  {
    [(CAMViewfinderViewController *)self _startTimer:1];
    [(CAMViewfinderViewController *)self _updateSharedLibraryButtonAnimated:1];
    [(CAMViewfinderViewController *)self _updateSharedLibraryBadgeForCurrentState];
    [(CAMViewfinderViewController *)self _updateSharedLibraryImageWellIndicatorForCurrentState];
  }
}

- (void)_updateLivePhotoButtonAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v6 = [(CAMViewfinderViewController *)self _isLivePhotoSupportedForGraphConfiguration:v5];

  int64_t v7 = [(CAMViewfinderViewController *)self _resolvedLivePhotoMode];
  BOOL v8 = [(CAMViewfinderViewController *)self _isLowLightActiveForCurrentSettings];
  if (v6)
  {
    if (v8) {
      int64_t v7 = 0;
    }
    char v9 = [(CAMViewfinderViewController *)self _livePhotoButton];
    [v9 setLivePhotoMode:v7];

    int64_t v10 = [(CAMViewfinderViewController *)self _livePhotoBadge];
    [v10 setIrisMode:v7];

    int v11 = [(CAMViewfinderViewController *)self _controlDrawer];
    int64_t v12 = [v11 livePhotoButton];
    [v12 setLivePhotoMode:v7 animated:v3];

    uint64_t v13 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    unsigned __int8 v14 = [v13 badgeTray];
    int64_t v15 = [v14 livePhotoBadge];
    [v15 setIrisMode:v7];

    BOOL v16 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    id v17 = [v16 controlStatusBar];
    id v18 = [v17 livePhotoIndicator];
    [v18 setLivePhotoMode:v7 animated:v3];

    id v19 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v19 setIrisMode:v7];
  }
}

- (void)_pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:(id)a3 isShowingCameraRoll:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v7 = [(CAMViewfinderViewController *)self _captureController];
  LODWORD(v4) = [(CAMViewfinderViewController *)self _shouldPauseCapturingStillImagePairedVideoForGraphConfiguration:v6 isShowingCameraRoll:v4];

  if (v4) {
    [v7 pauseCapturingStillImagePairedVideo];
  }
}

- (int64_t)_aspectRatioCropForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  id v7 = +[CAMCaptureCapabilities capabilities];
  LODWORD(a4) = [v7 isAspectRatioCropSupportedForMode:a3 devicePosition:a4];

  if (!a4 || a3 != 6 && a3) {
    return 0;
  }
  return [(CAMViewfinderViewController *)self photoModeAspectRatioCrop];
}

- (void)_handleUserChangedToAspectRatioCrop:(int64_t)a3
{
  -[CAMViewfinderViewController setPhotoModeAspectRatioCrop:](self, "setPhotoModeAspectRatioCrop:");
  int64_t v5 = [(CAMViewfinderViewController *)self _aspectRatioForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  id v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v10 setViewportAspectRatio:v5 animated:1];
  id v6 = [(CAMViewfinderViewController *)self _prominentObjectManager];
  [v6 setViewportAspectRatio:v5];

  id v7 = [(CAMViewfinderViewController *)self _captureController];
  [v7 changeToAspectRatioCrop:a3];

  [(CAMViewfinderViewController *)self _updateExposureSliderForCurrentState];
  [(CAMViewfinderViewController *)self _updateShutterButtonLegibility];
  BOOL v8 = [v10 controlDrawer];
  char v9 = [v8 aspectRatioButton];
  [v9 setAspectRatio:a3];
}

- (void)_suppressProactiveSuggestionAnimated:(BOOL)a3
{
}

- (void)_enableProactiveSuggestionsAnimated:(BOOL)a3
{
}

- (int64_t)_videoConfigurationResolutionForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int64_t v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = [v4 mode];
  uint64_t v7 = [v4 device];
  uint64_t v8 = [v4 videoEncodingBehavior];
  uint64_t v9 = [v4 videoConfiguration];
  BOOL v10 = [(CAMViewfinderViewController *)self _externalStorageOutputEnabled];
  uint64_t v11 = [v4 enableStereoVideoCapture];
  LOBYTE(v16) = [v4 prefersHDR10BitVideo];
  unint64_t v12 = [v5 resolvedVideoConfigurationForMode:v6 device:v7 videoEncodingBehavior:v8 videoConfiguration:v9 outputToExternalStorage:v10 spatialVideoEnabled:v11 prefersHDR10BitVideo:v16];

  if (v12 > 0xE) {
    goto LABEL_8;
  }
  if (((1 << v12) & 0x7620) != 0)
  {
    unint64_t v14 = [v4 videoStabilizationStrength];
    if (v14 <= 3)
    {
      int64_t v13 = qword_209C793A8[v14];
      goto LABEL_9;
    }
LABEL_8:
    int64_t v13 = 0;
    goto LABEL_9;
  }
  if (((1 << v12) & 0x992) != 0) {
    int64_t v13 = 2;
  }
  else {
    int64_t v13 = ((1 << v12) & 0x4C) != 0;
  }
LABEL_9:

  return v13;
}

- (int64_t)_videoConfigurationFramerateForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int64_t v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = [v4 mode];
  uint64_t v7 = [v4 device];
  uint64_t v8 = [v4 videoEncodingBehavior];
  uint64_t v9 = [v4 videoConfiguration];
  BOOL v10 = [(CAMViewfinderViewController *)self _externalStorageOutputEnabled];
  uint64_t v11 = [v4 enableStereoVideoCapture];
  char v12 = [v4 prefersHDR10BitVideo];

  LOBYTE(v15) = v12;
  uint64_t v13 = [v5 resolvedVideoConfigurationForMode:v6 device:v7 videoEncodingBehavior:v8 videoConfiguration:v9 outputToExternalStorage:v10 spatialVideoEnabled:v11 prefersHDR10BitVideo:v15];

  if ((unint64_t)(v13 - 1) > 0xD) {
    return 0;
  }
  else {
    return qword_209C793C8[v13 - 1];
  }
}

- (void)_updateVideoConfigurationStatusIndicatorForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  int64_t v7 = [(CAMViewfinderViewController *)self _videoConfigurationResolutionForGraphConfiguration:v6];
  int64_t v8 = [(CAMViewfinderViewController *)self _videoConfigurationFramerateForGraphConfiguration:v6];

  if (v7 && v8)
  {
    id v9 = [(CAMViewfinderViewController *)self _targetVideoConfigurationStatusIndicator];
    [v9 setResolution:v7 framerate:v8 animated:v4];
  }
}

- (void)_handleRAWIndicator
{
  BOOL v3 = [(CAMViewfinderViewController *)self _resolvedRAWMode] == 0;
  [(CAMViewfinderViewController *)self _handleUserChangedRAWMode:v3];
}

- (BOOL)_arePhotoFormatConflictsSupportedForMode:(int64_t)a3 device:(int64_t)a4
{
  id v6 = +[CAMCaptureCapabilities capabilities];
  int64_t v7 = +[CAMUserPreferences preferences];
  if ([v6 isLinearDNGSupportedForMode:a3]) {
    char v8 = [v7 rawControlEnabled];
  }
  else {
    char v8 = 0;
  }
  int v9 = [v6 isPhotoResolutionSupported:3 forMode:a3 device:a4 photoEncoding:1];
  if (v9) {
    LOBYTE(v9) = [v7 photoFormatControlEnabled];
  }
  char v10 = v8 | v9;

  return v10;
}

- (void)_setPhotoFormatConflict:(unint64_t)a3 isConflicting:(BOOL)a4
{
  BOOL v4 = a4;
  if ([(CAMViewfinderViewController *)self _arePhotoFormatConflictsSupportedForMode:[(CAMViewfinderViewController *)self _currentMode] device:[(CAMViewfinderViewController *)self _currentDevice]])
  {
    unint64_t v7 = [(CAMViewfinderViewController *)self _photoFormatConflicts];
    if (v4) {
      unint64_t v8 = v7 | a3;
    }
    else {
      unint64_t v8 = v7 & ~a3;
    }
    [(CAMViewfinderViewController *)self _setPhotoFormatConflicts:v8];
  }
}

- (void)_handleUserChangedRAWMode:(int64_t)a3
{
  -[CAMViewfinderViewController _setDesiredRAWMode:](self, "_setDesiredRAWMode:");
  if (a3 == 1) {
    [(CAMViewfinderViewController *)self _setPhotoFormatConflicts:0];
  }
  [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:0 animated:1];
  [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateControlDrawerContentsVisibilityAnimated:1];
  int64_t v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v5 animated:1];

  [(CAMViewfinderViewController *)self _updatePhotoFormatPickerAnimated:1];
  [(CAMViewfinderViewController *)self _prepareDeferredProcessingIfNeeded];
}

- (void)_updateRAWButtonAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _resolvedRAWMode];
  id v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  unint64_t v7 = [v6 controlStatusBar];
  id v10 = [v7 rawIndicator];

  unint64_t v8 = [(CAMViewfinderViewController *)self _controlDrawer];
  int v9 = [v8 rawButton];

  [v9 setRAWMode:v5 animated:v3];
  [v10 setRAWMode:v5 animated:v3];
}

- (void)setPhotoResolution:(int64_t)a3
{
  uint64_t v5 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  -[CAMViewfinderViewController _handleUserChangedToPhotoFormat:](self, "_handleUserChangedToPhotoFormat:", v5, a3);
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_essentialPhotoFormat
{
  BOOL v3 = +[CAMUserPreferences preferences];
  uint64_t v4 = objc_msgSend(v3, "fallbackPhotoFormatForDesiredFormat:mode:device:", objc_msgSend(v3, "photoEncodingBehavior"), objc_msgSend(v3, "preferredHEICPhotoResolutionForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")), -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
  int64_t v6 = v5;

  int64_t v7 = v4;
  int64_t v8 = v6;
  result.var1 = v8;
  result.var0 = v7;
  return result;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_advancedPhotoFormat
{
  uint64_t v3 = [(CAMViewfinderViewController *)self _desiredAdvancedPhotoFormat];
  int64_t v5 = v4;
  int64_t v6 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v7 = [(CAMViewfinderViewController *)self _currentDevice];
  int64_t v8 = +[CAMUserPreferences preferences];
  char v9 = objc_msgSend(v8, "isPhotoFormat:enabledForMode:device:", v3, v5, v6, v7);

  if ((v9 & 1) == 0)
  {
    id v10 = [(CAMViewfinderViewController *)self _enabledPhotoFormatsForMode:v6 device:v7];
    uint64_t v11 = [(CAMViewfinderViewController *)self _essentialPhotoFormat];
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    v18[2] = __51__CAMViewfinderViewController__advancedPhotoFormat__block_invoke;
    v18[3] = &__block_descriptor_48_e24_B32__0__NSValue_8Q16_B24l;
    void v18[4] = v11;
    v18[5] = v12;
    uint64_t v13 = [v10 indexOfObjectWithOptions:2 passingTest:v18];
    if (v13 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v13;
    }
    uint64_t v15 = [v10 objectAtIndexedSubscript:v14];
    uint64_t v19 = 0;
    int64_t v20 = 0;
    [v15 getValue:&v19 size:16];
    uint64_t v3 = v19;
    int64_t v5 = v20;
  }
  int64_t v16 = v3;
  int64_t v17 = v5;
  result.var1 = v17;
  result.var0 = v16;
  return result;
}

BOOL __51__CAMViewfinderViewController__advancedPhotoFormat__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  [a2 getValue:&v5 size:16];
  return v5 != *(void *)(a1 + 32) || v6 != *(void *)(a1 + 40);
}

- (void)_handlePhotoFormatPickerTapped
{
  double v1 = [a1 _currentGraphConfiguration];
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_2099F8000, v2, v3, "Photo format picker tapped from unsupported configuration: %{public}@", v4, v5, v6, v7, v8);
}

- (void)_handlePhotoFormatPickerChangedPhotoFormat:(id)a3
{
  uint64_t v4 = [a3 photoFormat];
  uint64_t v6 = v5;
  -[CAMViewfinderViewController _setDesiredPhotoFormat:](self, "_setDesiredPhotoFormat:", v4, v5);
  -[CAMViewfinderViewController _handleUserChangedToPhotoFormat:](self, "_handleUserChangedToPhotoFormat:", v4, v6);
}

- (void)_handleUserChangedToPhotoFormat:(id)a3
{
  int64_t var1 = a3.var1;
  int64_t var0 = a3.var0;
  uint64_t v6 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  uint64_t v8 = v7;
  uint64_t v9 = var0 == 2;
  [(CAMViewfinderViewController *)self _setDesiredPhotoResolution:var1];
  [(CAMViewfinderViewController *)self _setDesiredRAWMode:v9];
  if ([(CAMViewfinderViewController *)self _resolvedRAWMode] == v9)
  {
    if (var1 == 3) {
      [(CAMViewfinderViewController *)self _setPhotoFormatConflict:2 isConflicting:0];
    }
    [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:1];
    [(CAMViewfinderViewController *)self _prepareDeferredProcessingIfNeeded];
  }
  else
  {
    [(CAMViewfinderViewController *)self _handleUserChangedRAWMode:v9];
  }
  id v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateZoomControlLayoutForGraphConfiguration:v10 fromGraphConfiguration:v11 animated:1];

  id v20 = +[CAMCaptureCapabilities capabilities];
  int v12 = objc_msgSend(v20, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v6, v8);
  int64_t v13 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v14 = [(CAMViewfinderViewController *)self _currentDevicePosition];
  uint64_t v15 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  LODWORD(v14) = objc_msgSend(v20, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v13, v14, v15, v16);
  char v17 = [v20 portraitInPhotoModeBehavior];
  if (v12 != v14)
  {
    char v18 = v17;
    if ([(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion])
    {
      if ((v18 & 4) != 0)
      {
        uint64_t v19 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
        [(CAMViewfinderViewController *)self _configureZoomControlForGraphConfiguration:v19 animated:1];
      }
    }
  }
}

- (void)_handlePhotoFormatPickerLongPressed:(id)a3
{
  id v3 = a3;
  if (([v3 isExpanded] & 1) == 0) {
    [v3 setExpanded:1 animated:1];
  }
}

- (void)_updatePhotoFormatPickerAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldShowPhotoFormatButtonForGraphConfiguration:v5];

  if (v6)
  {
    uint64_t v7 = [(CAMViewfinderViewController *)self _enabledPhotoFormatsForMode:[(CAMViewfinderViewController *)self _currentMode] device:[(CAMViewfinderViewController *)self _currentDevice]];
    uint64_t v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    uint64_t v9 = [v8 controlStatusBar];
    id v10 = [v9 photoFormatStatusIndicator];

    uint64_t v19 = [(CAMViewfinderViewController *)self _essentialPhotoFormat];
    uint64_t v20 = v11;
    int v12 = [MEMORY[0x263F08D40] valueWithBytes:&v19 objCType:"{?=qq}"];
    uint64_t v13 = [v7 indexOfObject:v12];

    uint64_t v19 = [(CAMViewfinderViewController *)self _advancedPhotoFormat];
    uint64_t v20 = v14;
    uint64_t v15 = [MEMORY[0x263F08D40] valueWithBytes:&v19 objCType:"{?=qq}"];
    uint64_t v16 = [v7 indexOfObject:v15];

    [v10 setAllowedFormats:v7 essentialFormatIndex:v13 advancedFormatIndex:v16];
    uint64_t v17 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
    objc_msgSend(v10, "setPhotoFormat:animated:", v17, v18, v3);
    objc_msgSend(v10, "setLongPressEnabled:", (unint64_t)objc_msgSend(v7, "count") > 2);
  }
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_currentPhotoFormat
{
  BOOL v3 = +[CAMUserPreferences preferences];
  uint64_t v4 = objc_msgSend(v3, "resolvedPhotoFormatForResolvedResolution:rawMode:", -[CAMViewfinderViewController _resolvedPhotoResolution](self, "_resolvedPhotoResolution"), -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode"));
  int64_t v6 = v5;

  int64_t v7 = v4;
  int64_t v8 = v6;
  result.int64_t var1 = v8;
  result.int64_t var0 = v7;
  return result;
}

- (id)_enabledPhotoFormatsForMode:(int64_t)a3 device:(int64_t)a4
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int64_t v6 = +[CAMUserPreferences preferences];
  v14[0] = [v6 photoEncodingBehavior];
  v14[1] = 1;
  v14[2] = v14[0];
  v14[3] = 2;
  void v14[4] = v14[0];
  long long v15 = xmmword_209C79310;
  long long v16 = xmmword_209C791C0;
  uint64_t v17 = 3;
  int64_t v7 = [MEMORY[0x263EFF980] array];
  for (uint64_t i = 0; i != 10; i += 2)
  {
    uint64_t v9 = v14[i];
    uint64_t v10 = v14[i + 1];
    if (objc_msgSend(v6, "isPhotoFormat:enabledForMode:device:", v9, v10, a3, a4))
    {
      v13[0] = v9;
      v13[1] = v10;
      uint64_t v11 = [MEMORY[0x263F08D40] valueWithBytes:v13 objCType:"{?=qq}"];
      [v7 addObject:v11];
    }
  }

  return v7;
}

- (void)_handleProResIndicator
{
  BOOL v3 = [(CAMViewfinderViewController *)self _desiredProResVideoMode] == 0;
  [(CAMViewfinderViewController *)self _handleUserChangedProResMode:v3];
}

- (void)_handleUserChangedProResMode:(int64_t)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int64_t v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v7 = [(CAMViewfinderViewController *)self _externalStorageOutputEnabled];
  uint64_t v8 = v7;
  if (a3 || !v7)
  {
    if (a3 == 1)
    {
      uint64_t v9 = [(CAMViewfinderViewController *)self _connectedStorage];

      if (v9) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v8;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v10 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (a3 == 1) {
      uint64_t v11 = @"ON";
    }
    else {
      uint64_t v11 = @"OFF";
    }
    int v12 = [(CAMViewfinderViewController *)self _connectedStorage];
    if (v12)
    {
      BOOL v3 = [(CAMViewfinderViewController *)self _connectedStorage];
      uint64_t v13 = [v3 displayName];
    }
    else
    {
      uint64_t v13 = @"NONE";
    }
    uint64_t v14 = @"NO";
    if (v8) {
      uint64_t v14 = @"YES";
    }
    long long v15 = v14;
    int v21 = 138543874;
    BOOL v22 = v11;
    __int16 v23 = 2114;
    BOOL v24 = v13;
    __int16 v25 = 2114;
    BOOL v26 = v15;
    _os_log_impl(&dword_2099F8000, v10, OS_LOG_TYPE_DEFAULT, "External storage: userChangedProResMode proResMode=%{public}@, connectedStorage=%{public}@, resolvedExternalStorageOutput=%{public}@", (uint8_t *)&v21, 0x20u);
    if (v12)
    {
    }
  }

  long long v16 = +[CAMCaptureCapabilities capabilities];
  int v17 = objc_msgSend(v16, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), objc_msgSend(v6, "videoConfiguration"), v8);

  if (a3 == 1
    && v17
    && [(CAMViewfinderViewController *)self _shouldShowUnsupportedExternalStorageFormatForVideoEncodingBehavior:2])
  {
    [(CAMViewfinderViewController *)self _showUnsupportedFormatAlert];
  }
  else
  {
    if (a3 == 1) {
      char v18 = v17;
    }
    else {
      char v18 = 1;
    }
    if (v18)
    {
      [(CAMViewfinderViewController *)self _setDesiredProResVideoMode:a3];
      uint64_t v19 = [v6 device];
      -[CAMViewfinderViewController set_videoConfigurationOverride:](self, "set_videoConfigurationOverride:", -[CAMViewfinderViewController _mappedVideoConfigurationForVideoConfiguration:proResVideoMode:outputToExternalStorage:](self, "_mappedVideoConfigurationForVideoConfiguration:proResVideoMode:outputToExternalStorage:", [v6 videoConfiguration], -[CAMViewfinderViewController _desiredProResVideoMode](self, "_desiredProResVideoMode"), v8));
      uint64_t v20 = [(CAMViewfinderViewController *)self _graphConfigurationForChangeToMode:[(CAMViewfinderViewController *)self _currentMode] device:v19 fromGraphConfiguration:v6];
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v6, v20, 1);
      [(CAMViewfinderViewController *)self _setExternalStorageOutputEnabled:v8 animated:1];
    }
    else
    {
      -[CAMViewfinderViewController _showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:](self, "_showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:", [v6 videoConfiguration]);
    }
  }
}

- (void)_updateProResButtonAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _desiredProResVideoMode];
  int64_t v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v7 = [v6 controlStatusBar];
  id v16 = [v7 proResIndicator];

  uint64_t v8 = [(CAMViewfinderViewController *)self _controlDrawer];
  uint64_t v9 = [v8 proResButton];

  [v9 setProResVideoMode:v5 animated:v3];
  BOOL v10 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  uint64_t v11 = +[CAMUserPreferences preferences];
  int v12 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v13 = [v12 videoConfiguration];
  uint64_t v14 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v15 = objc_msgSend(v11, "colorSpaceForMode:videoConfiguration:videoEncodingBehavior:spatialVideoEnabled:device:", 1, v13, 2, v10, objc_msgSend(v14, "device"));

  [v16 setProResVideoMode:v5 colorSpace:v15 animated:v3];
}

- (void)_showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:(int64_t)a3
{
  CAMLocalizedFrameworkString(@"PRO_RES_UNSUPPORTED_ALERT_TITLE", 0);
  id v22 = (id)objc_claimAutoreleasedReturnValue();
  int64_t v5 = +[CAMCaptureCapabilities capabilities];
  int v6 = objc_msgSend(v5, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

  BOOL v7 = +[CAMCaptureCapabilities capabilities];
  if ([v7 externalStorageSupported])
  {
    BOOL v8 = (a3 & 0x7F) == 4 && (unint64_t)a3 < 7;
    if ((((unint64_t)a3 < 7) & (0x4Cu >> a3)) != 0) {
      uint64_t v9 = @"PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_720P";
    }
    else {
      uint64_t v9 = @"PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_1080P_HFR";
    }
    if ((((unint64_t)a3 < 7) & (0x4Cu >> a3)) != 0 || v8) {
      goto LABEL_26;
    }
    if (!v6)
    {
      int v11 = [v7 isBack4k120VideoSupported];
      int v12 = @"PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_1080P30_MAX";
      uint64_t v13 = @"PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_1080P30_MAX_4k120";
LABEL_20:
      if (v11) {
        uint64_t v9 = v13;
      }
      else {
        uint64_t v9 = v12;
      }
      goto LABEL_26;
    }
    int64_t v10 = [(CAMViewfinderViewController *)self _resolvedVideoStabilizationMode];
    if (v10 != 1)
    {
      if (!v10)
      {
        int v11 = [v7 isBack4k120VideoSupported];
        int v12 = @"PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_4k30_MAX";
        uint64_t v13 = @"PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_4k30_MAX_4k120";
        goto LABEL_20;
      }
LABEL_23:
      uint64_t v15 = 0;
      goto LABEL_27;
    }
    uint64_t v9 = @"PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_28K30_MAX";
  }
  else if (v6)
  {
    int64_t v14 = [(CAMViewfinderViewController *)self _resolvedVideoStabilizationMode];
    if (v14)
    {
      if (v14 != 1) {
        goto LABEL_23;
      }
      uint64_t v9 = @"PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_28K30_MAX";
    }
    else
    {
      uint64_t v9 = @"PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_4k30_MAX";
    }
  }
  else
  {
    uint64_t v9 = @"PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_1080P30_MAX";
  }
LABEL_26:
  uint64_t v15 = CAMLocalizedFrameworkString(v9, 0);
LABEL_27:
  id v16 = [MEMORY[0x263F82418] alertControllerWithTitle:v22 message:v15 preferredStyle:1];
  int v17 = (void *)MEMORY[0x263F82400];
  uint64_t v18 = CAMLocalizedFrameworkString(@"PRO_RES_UNSUPPORTED_ALERT_OK", 0);
  uint64_t v19 = [v17 actionWithTitle:v18 style:0 handler:0];
  [v16 addAction:v19];

  [(CAMViewfinderViewController *)self presentViewController:v16 animated:1 completion:0];
  [(CAMViewfinderViewController *)self _setDesiredProResVideoMode:0];
  [(CAMViewfinderViewController *)self _updateProResButtonAnimated:1];
  uint64_t v20 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v18) = [(CAMViewfinderViewController *)self _shouldShowExternalStorageButtonForGraphConfiguration:v20];

  if ((v18 & 1) == 0)
  {
    int v21 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v21 setExternalStorageButtonVisible:0 animated:1];
  }
}

- (void)_startOrCancelPurgeIfNecessary
{
  id v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v3 = +[CAMCaptureCapabilities capabilities];
  int v4 = objc_msgSend(v3, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", objc_msgSend(v10, "mode"), objc_msgSend(v10, "videoConfiguration"), -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

  uint64_t v5 = [v10 videoEncodingBehavior];
  int v6 = [(CAMViewfinderViewController *)self _storageController];
  BOOL v7 = [v6 purgeableStorageContainer];
  BOOL v8 = v7;
  if (v4) {
    BOOL v9 = v5 == 2;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    [v7 purgeFastPurgeableSpaceWithRequestType:0];
  }
  else {
    [v7 cancelPurge];
  }
}

- (void)_updateMaxRecordingTimeInstructionLabelForGraphConfiguration:(id)a3
{
  id v11 = a3;
  int v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v5 = [v4 maxRecordingTimeInstructionLabel];

  uint64_t v6 = [v11 videoConfiguration];
  BOOL v7 = +[CAMCaptureCapabilities capabilities];
  int v8 = objc_msgSend(v7, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", objc_msgSend(v11, "mode"), objc_msgSend(v11, "videoConfiguration"), -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

  uint64_t v9 = [v11 videoEncodingBehavior];
  if (v8 && v6 && v9 == 2)
  {
    id v10 = [(CAMViewfinderViewController *)self _storageController];
    [v10 availableRecordingTimeInSecondsForGraphConfiguration:v11];
    objc_msgSend(v5, "setRemainingTimeInSeconds:");
  }
}

- (void)_updateFreeResourcesInstructionLabelForCurrentState
{
  BOOL v3 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v16 = [v3 freeResourcesInstructionLabel];

  int v4 = [(CAMViewfinderViewController *)self _storageController];
  BOOL v5 = [(CAMViewfinderViewController *)self _urgentlyNeedsToPurgeDiskSpace];
  uint64_t v6 = [v4 purgeableStorageContainer];
  int v7 = [v6 isPurging];

  int v8 = [v4 purgeableStorageContainer];
  int v9 = [v8 isCancelingPurge];

  LODWORD(v8) = [(CAMViewfinderViewController *)self _hasSignificantAmountOfRecordingTimeForCurrentConfiguration];
  id v10 = [v4 purgeableStorageContainer];
  int v11 = [v10 hasPurgeableResources];

  BOOL v12 = [(CAMViewfinderViewController *)self _externalStorageOutputEnabled];
  uint64_t v13 = 3;
  if (v8 | v11 | v12) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = 1;
  if (v5) {
    uint64_t v14 = 2;
  }
  if (v9) {
    uint64_t v14 = 4;
  }
  if (v7) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v13;
  }
  [v16 setFreeResourceInstructionState:v15];
}

- (void)_handleFreeResourcesLabelTapped:(id)a3
{
  id v8 = [(CAMViewfinderViewController *)self _storageController];
  int v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v5 = [v4 freeResourcesInstructionLabel];

  uint64_t v6 = [v5 freeResourceInstructionState];
  if (v6 == 3)
  {
    CAMShowStorageUsageInSettings();
  }
  else
  {
    if (v6 == 1)
    {
      int v7 = [v8 purgeableStorageContainer];
      [v7 cancelPurge];
    }
    else
    {
      if (v6) {
        goto LABEL_8;
      }
      int v7 = [v8 purgeableStorageContainer];
      [v7 purgeFastPurgeableSpaceWithRequestType:1];
    }
  }
LABEL_8:
}

- (BOOL)_urgentlyNeedsToPurgeDiskSpace
{
  BOOL v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v4 = [v3 videoConfiguration];

  if (!v4) {
    return 0;
  }
  BOOL v5 = [(CAMViewfinderViewController *)self _storageController];
  uint64_t v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [v5 availableRecordingTimeInSecondsForGraphConfiguration:v6];
  double v8 = v7;

  BOOL v9 = v8 <= 10.0;
  return v9;
}

- (BOOL)_hasSignificantAmountOfRecordingTimeForCurrentConfiguration
{
  BOOL v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v4 = [v3 videoConfiguration];

  if (!v4) {
    return 1;
  }
  BOOL v5 = [(CAMViewfinderViewController *)self _storageController];
  uint64_t v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [v5 availableRecordingTimeInSecondsForGraphConfiguration:v6];
  double v8 = v7;

  BOOL v9 = v8 > 900.0;
  return v9;
}

- (int64_t)_mappedVideoConfigurationForVideoConfiguration:(int64_t)a3 proResVideoMode:(int64_t)a4 outputToExternalStorage:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v9 = +[CAMCaptureCapabilities capabilities];
  char v10 = objc_msgSend(v9, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), a3, v5);

  if (a4 && (v10 & 1) == 0)
  {
    switch(a3)
    {
      case 1:
      case 5:
      case 10:
        a3 = 7;
        break;
      case 9:
        id v16 = +[CAMCaptureCapabilities capabilities];
        int v17 = objc_msgSend(v16, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

        if (v17) {
          a3 = 1;
        }
        else {
          a3 = 7;
        }
        break;
      case 12:
        a3 = 11;
        break;
      case 13:
      case 14:
        int v11 = +[CAMCaptureCapabilities capabilities];
        int v12 = objc_msgSend(v11, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 9, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

        uint64_t v13 = +[CAMCaptureCapabilities capabilities];
        int v14 = objc_msgSend(v13, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

        int64_t v15 = 7;
        if (v14) {
          int64_t v15 = 1;
        }
        if (v12) {
          a3 = 9;
        }
        else {
          a3 = v15;
        }
        break;
      default:
        return a3;
    }
  }
  return a3;
}

- (void)_updateVideoStabilizationButtonAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _desiredVideoStabilizationMode];
  uint64_t v6 = [(CAMViewfinderViewController *)self _controlDrawer];
  double v7 = [v6 videoStabilizationButton];
  [v7 setVideoStabilizationMode:v5 animated:v3];

  double v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v9 = [v8 controlStatusBar];
  char v10 = [v9 videoStabilizationIndicator];
  [v10 setVideoStabilizationMode:v5 animated:v3];

  id v13 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int v11 = [v13 badgeTray];
  int v12 = [v11 videoStabilizationBadge];
  [v12 setVideoStabilizationMode:v5];
}

- (void)_handleVideoStabilizationIndicator
{
  BOOL v3 = [(CAMViewfinderViewController *)self _desiredVideoStabilizationMode] == 0;
  [(CAMViewfinderViewController *)self _handleUserChangedVideoStabilizationMode:v3];
}

- (void)_handleUserChangedVideoStabilizationMode:(int64_t)a3
{
  -[CAMViewfinderViewController _setDesiredVideoStabilizationMode:](self, "_setDesiredVideoStabilizationMode:");
  [(CAMViewfinderViewController *)self _startFlashingVideoStabilizationBadge];
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateVideoStabilizationButtonAnimated:1];
  BOOL v5 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  uint64_t v6 = +[CAMUserPreferences preferences];
  uint64_t v7 = objc_msgSend(v6, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v5);
  double v8 = +[CAMCaptureCapabilities capabilities];
  int64_t v9 = [(CAMViewfinderViewController *)self _currentVideoConfiguration];
  uint64_t v14 = MEMORY[0x263EF8330];
  uint64_t v15 = 3221225472;
  id v16 = __72__CAMViewfinderViewController__handleUserChangedVideoStabilizationMode___block_invoke;
  int v17 = &unk_263FA2090;
  uint64_t v19 = self;
  int64_t v20 = a3;
  id v18 = v6;
  BOOL v21 = v5;
  id v10 = v6;
  uint64_t v11 = [v8 validatedVideoConfigurationForVideoConfiguration:v9 withBlock:&v14];
  -[CAMViewfinderViewController set_videoConfigurationOverride:](self, "set_videoConfigurationOverride:", v11, v14, v15, v16, v17);

  int v12 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  id v13 = [(CAMViewfinderViewController *)self _graphConfigurationForChangeToMode:[(CAMViewfinderViewController *)self _currentMode] device:v7 fromGraphConfiguration:v12];
  [(CAMViewfinderViewController *)self _defaultZoomFactorForGraphConfiguration:v13];
  -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v12, v13, 1);
}

uint64_t __72__CAMViewfinderViewController__handleUserChangedVideoStabilizationMode___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = objc_msgSend(*(id *)(a1 + 32), "videoStabilizationStrengthForVideoStabilizationMode:captureMode:spatialVideoEnabled:", *(void *)(a1 + 48), objc_msgSend(*(id *)(a1 + 40), "_currentMode"), *(unsigned __int8 *)(a1 + 56));
  BOOL v3 = +[CAMCaptureCapabilities capabilities];
  uint64_t v4 = [*(id *)(a1 + 40) _currentMode];
  uint64_t v5 = [*(id *)(a1 + 40) _currentDevice];
  uint64_t v6 = [*(id *)(a1 + 40) _currentGraphConfiguration];
  uint64_t v7 = [v6 videoEncodingBehavior];
  uint64_t v8 = [*(id *)(a1 + 40) _externalStorageOutputEnabled];
  char v9 = *(unsigned char *)(a1 + 56);
  id v10 = [*(id *)(a1 + 40) _currentGraphConfiguration];
  char v11 = [v10 trueVideoEnabled];
  int v12 = [*(id *)(a1 + 40) _currentGraphConfiguration];
  BYTE2(v15) = [v12 prefersHDR10BitVideo];
  BYTE1(v15) = v11;
  LOBYTE(v15) = v9;
  uint64_t v13 = objc_msgSend(v3, "isVideoStabilizationStrength:supportedForMode:device:videoConfiguration:videoEncodingBehavior:outputToExternalStorage:spatialVideoEnabled:trueVideoEnabled:prefersHDR10BitVideo:", v16, v4, v5, a2, v7, v8, v15);

  return v13;
}

- (void)_startFlashingVideoStabilizationBadge
{
  +[CAMViewfinderViewController cancelPreviousPerformRequestsWithTarget:self selector:sel__stopFlashingVideoStabilizationBadge object:0];
  [(CAMViewfinderViewController *)self _setFlashingVideoStabilizationBadge:1];
  +[CAMLivePhotoButton enablingAnimationDuration];
  -[CAMViewfinderViewController performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel__stopFlashingVideoStabilizationBadge, 0);
}

- (void)_stopFlashingVideoStabilizationBadge
{
  +[CAMViewfinderViewController cancelPreviousPerformRequestsWithTarget:self selector:sel__stopFlashingVideoStabilizationBadge object:0];
  [(CAMViewfinderViewController *)self _setFlashingVideoStabilizationBadge:0];
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:1];
}

- (BOOL)videoConfigurationStatusIndicatorShouldRespondToTap:(id)a3
{
  BOOL v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  char v4 = [v3 trueVideoEnabled] ^ 1;

  return v4;
}

- (void)_handleUserChangedToVideoConfiguration:(int64_t)a3
{
  uint64_t v5 = +[CAMCaptureCapabilities capabilities];
  BOOL v6 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  uint64_t v7 = +[CAMUserPreferences preferences];
  uint64_t v8 = objc_msgSend(v7, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v6);

  int64_t v9 = [(CAMViewfinderViewController *)self _resolvedVideoStabilizationModeForVideoConfiguration:a3];
  id v10 = +[CAMUserPreferences preferences];
  uint64_t v11 = objc_msgSend(v10, "videoStabilizationStrengthForVideoStabilizationMode:captureMode:spatialVideoEnabled:", v9, -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v6);

  int v12 = +[CAMCaptureCapabilities capabilities];
  uint64_t v13 = objc_msgSend(v12, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v8, -[CAMViewfinderViewController _currentMode](self, "_currentMode"), a3, v11, v6);

  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  +[CAMZoomControlUtilities equivalentZoomFactor:v13 forDevice:[(CAMViewfinderViewController *)self _currentDevice] fromDevice:v14];
  double v16 = v15;
  int64_t v17 = +[CAMZoomControlUtilities deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:](CAMZoomControlUtilities, "deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:", v13, [(CAMViewfinderViewController *)self _currentMode], +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:[(CAMViewfinderViewController *)self _currentMode] device:v13 videoConfiguration:a3 videoStabilizationStrength:v11 zoomFactors:0 displayZoomFactors:0], v15);
  id v18 = +[CAMCaptureCapabilities capabilities];
  char v19 = objc_msgSend(v18, "isSupportedVideoConfiguration:forMode:device:", a3, -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v17);

  if (v19)
  {
    [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
    +[CAMZoomControlUtilities equivalentZoomFactor:v17 forDevice:[(CAMViewfinderViewController *)self _currentDevice] fromDevice:v20];
    double v22 = v21;
    uint64_t v13 = v17;
  }
  else
  {
    id v34 = 0;
    +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:[(CAMViewfinderViewController *)self _currentMode] device:v13 videoConfiguration:a3 videoStabilizationStrength:v11 zoomFactors:&v34 displayZoomFactors:0];
    id v23 = v34;
    BOOL v24 = [v23 lastObject];
    [v24 floatValue];
    double v26 = v25;

    if (v16 >= v26) {
      [v23 lastObject];
    }
    else {
    uint64_t v27 = [v23 firstObject];
    }

    [v27 floatValue];
    float v29 = v28;

    double v22 = v29;
  }
  switch([(CAMViewfinderViewController *)self _currentMode])
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
      goto LABEL_16;
    case 1:
      [(CAMViewfinderViewController *)self set_videoConfigurationOverride:a3];
      goto LABEL_11;
    case 2:
      [(CAMViewfinderViewController *)self set_slomoConfigurationOverride:a3];
      goto LABEL_11;
    case 7:
      [(CAMViewfinderViewController *)self set_cinematicConfigurationOverride:a3];
      goto LABEL_11;
    default:
LABEL_11:
      int64_t v30 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      int v31 = objc_msgSend(v5, "isProResVideoSupportedForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
      char v32 = objc_msgSend(v5, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), a3, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));
      if (v31
        && (v32 & 1) == 0
        && [(CAMViewfinderViewController *)self _desiredProResVideoMode] == 1)
      {
        [(CAMViewfinderViewController *)self _showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:a3];
      }
      int v33 = [(CAMViewfinderViewController *)self _graphConfigurationForChangeToMode:[(CAMViewfinderViewController *)self _currentMode] device:v13 fromGraphConfiguration:v30];
      [(CAMViewfinderViewController *)self _updateVideoConfigurationStatusIndicatorForGraphConfiguration:v33 animated:1];
      [(CAMViewfinderViewController *)self _performChangeFromGraphConfiguration:v30 toGraphConfiguration:v33 zoomFactor:1 deferIfConfigurationInFlight:v22];

LABEL_16:
      return;
  }
}

- (void)videoConfigurationStatusIndicatorDidTapFramerate:(id)a3
{
  char v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v5 = [v4 videoConfiguration];

  BOOL v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v7 = [v6 videoEncodingBehavior];

  int64_t v8 = [(CAMViewfinderViewController *)self _nextFramerateVideoConfigurationForVideoConfiguration:v5 videoEncodingBehavior:v7];
  if (v8 != v5)
  {
    [(CAMViewfinderViewController *)self _handleUserChangedToVideoConfiguration:v8];
  }
}

- (BOOL)_shouldSwitchToVideoConfiguration:(int64_t)a3 videoEncodingBehavior:(int64_t)a4
{
  BOOL v6 = +[CAMUserPreferences preferences];
  int64_t v7 = [(CAMViewfinderViewController *)self _currentMode];
  BOOL v8 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:v7 devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  uint64_t v9 = objc_msgSend(v6, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", v7, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v8);
  id v10 = +[CAMCaptureCapabilities capabilities];
  int v11 = [v10 isSupportedVideoConfiguration:a3 forMode:v7 device:v9];

  int v12 = [v6 isPALVideoEnabled];
  if ([v6 usingMostCompatibleEncoding])
  {
    int v13 = 1;
  }
  else
  {
    double v14 = +[CAMCaptureCapabilities capabilities];
    int v13 = [v14 isHEVCEncodingSupported] ^ 1;
  }
  LOBYTE(v15) = 0;
  switch(a3)
  {
    case 1:
    case 5:
    case 7:
    case 10:
      goto LABEL_5;
    case 3:
      double v16 = +[CAMCaptureCapabilities capabilities];
      char v17 = [v16 is1080p240SupportedForDevice:v9];

      LOBYTE(v15) = v13 | v17 ^ 1;
      break;
    case 4:
      if (v7 != 2) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 6:
      double v21 = +[CAMCaptureCapabilities capabilities];
      int v22 = [v21 is4k30VideoSupportedForDevice:v9];

      if (v22) {
        LOBYTE(v15) = [v6 videoConfiguration] == 6;
      }
      else {
LABEL_5:
      }
        LOBYTE(v15) = 1;
      break;
    case 8:
      int v15 = v13 ^ 1 | [v6 didConfirmSlomo1080p240MostCompatible];
      break;
    case 9:
    case 13:
LABEL_9:
      char v18 = [v6 didConfirmVideoMostCompatible];
      if (a4 == 2) {
        char v19 = 1;
      }
      else {
        char v19 = v18;
      }
      LOBYTE(v15) = v13 ^ 1 | v19;
      break;
    case 11:
    case 12:
      LOBYTE(v15) = v12;
      break;
    case 14:
      char v20 = [v6 didConfirmVideoMostCompatible];
      if (a4 == 2) {
        LOBYTE(v15) = 1;
      }
      else {
        LOBYTE(v15) = v20;
      }
      if ((v12 & v13) == 0) {
        LOBYTE(v15) = v12;
      }
      break;
    default:
      break;
  }
  char v23 = v15 & !v8;
  if (v11) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  if ([(CAMViewfinderViewController *)self _resolvedVideoStabilizationMode] == 1)
  {
    float v25 = +[CAMCaptureCapabilities capabilities];
    int64_t v26 = [(CAMViewfinderViewController *)self _currentMode];
    int64_t v27 = [(CAMViewfinderViewController *)self _currentDevice];
    float v28 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    uint64_t v29 = [v28 trueVideoEnabled];
    int64_t v30 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    char v31 = objc_msgSend(v25, "isVideoStabilizationControlSupportedForMode:device:videoConfiguration:videoEncodingBehavior:trueVideoEnabled:prefersHDR10BitVideo:", v26, v27, a3, a4, v29, objc_msgSend(v30, "prefersHDR10BitVideo"));
  }
  else
  {
    char v31 = 1;
  }

  return v24 & v31;
}

- (int64_t)_nextFramerateVideoConfigurationForVideoConfiguration:(int64_t)a3 videoEncodingBehavior:(int64_t)a4
{
  int64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if ((unint64_t)(a3 - 1) > 0xD) {
    int64_t v7 = 0;
  }
  else {
    int64_t v7 = (void *)qword_263FA2488[a3 - 1];
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        int64_t v12 = (int)[*(id *)(*((void *)&v14 + 1) + 8 * i) intValue];
        if ([(CAMViewfinderViewController *)self _shouldSwitchToVideoConfiguration:v12 videoEncodingBehavior:a4])
        {
          return v12;
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  return v5;
}

- (void)videoConfigurationStatusIndicatorDidTapResolution:(id)a3
{
  char v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v5 = [v4 videoConfiguration];

  BOOL v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v7 = [v6 videoEncodingBehavior];

  int64_t v8 = [(CAMViewfinderViewController *)self _nextResolutionVideoConfigurationForVideoConfiguration:v5 videoEncodingBehavior:v7];
  if (v8 != v5)
  {
    [(CAMViewfinderViewController *)self _handleUserChangedToVideoConfiguration:v8];
  }
}

- (int64_t)_nextResolutionVideoConfigurationForVideoConfiguration:(int64_t)a3 videoEncodingBehavior:(int64_t)a4
{
  int64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if ((unint64_t)(a3 - 1) > 0xD) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (void *)qword_263FA24F8[a3 - 1];
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        int64_t v12 = (int)[*(id *)(*((void *)&v14 + 1) + 8 * i) intValue];
        if ([(CAMViewfinderViewController *)self _shouldSwitchToVideoConfiguration:v12 videoEncodingBehavior:a4])
        {
          return v12;
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  return v5;
}

- (void)captureController:(id)a3 didOutputLowLightStatus:(int64_t)a4
{
  [(CAMViewfinderViewController *)self _updateControlDrawerContentsVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityAnimated:1];
  BOOL v6 = [(CAMViewfinderViewController *)self _isLowLightCaptureCanceling];
  if (a4 != -1)
  {
    BOOL v7 = v6;
    if (!a4) {
      [(CAMViewfinderViewController *)self _resetLowLightDurationMappingAnimated:1];
    }
    if (v7)
    {
      uint64_t v8 = [(CAMViewfinderViewController *)self _closedViewfinderController];
      [v8 removeClosedViewfinderReason:13];

      [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Night mode capture cancel ended"];
      [(CAMViewfinderViewController *)self _shutterButtonSetSpinning:0];
    }
  }
  [(CAMViewfinderViewController *)self _updateResolvedLowLightModeAnimated:1];
}

- (void)captureController:(id)a3 didOutputLowLightModeDurationMapping:(id)a4
{
  -[CAMViewfinderViewController _setLowLightDurationMapping:](self, "_setLowLightDurationMapping:", a3, a4.var0, a4.var1);
  [(CAMViewfinderViewController *)self _updateLowLightControlsAnimated:1];
  [(CAMViewfinderViewController *)self _updateLowLightSlider];
  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v5 isCapturing:0 animated:1];
}

- (void)captureController:(id)a3 didChangeAutoMacroSuggested:(BOOL)a4
{
  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v5 animated:1];

  [(CAMViewfinderViewController *)self _updateAutoMacroButtonAnimated:1];
}

- (void)captureController:(id)a3 didOutputCaptureAvailability:(BOOL)a4
{
}

- (void)captureController:(id)a3 didOutputConfigurationAvailability:(BOOL)a4
{
}

- (void)captureController:(id)a3 didOutputFlashCompromise:(unint64_t)a4
{
  [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:0 animated:1];
  BOOL v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v6 animated:1];

  id v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v7 = [v8 flashCompromisedInstructionLabel];
  [v7 setCompromise:a4];
}

- (BOOL)_isFlashUnavailableForMode:(int64_t)a3
{
  char v4 = [(CAMViewfinderViewController *)self _captureController];
  unint64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
  if (v5 > 9)
  {
    char v7 = 0;
  }
  else
  {
    if (((1 << v5) & 0x279) != 0) {
      char v6 = [v4 isFlashAvailable];
    }
    else {
      char v6 = [v4 isTorchAvailable];
    }
    char v7 = v6 ^ 1;
  }

  return v7;
}

- (BOOL)_isFlashCompromisedForDevicePosition:(int64_t)a3
{
  char v4 = [(CAMViewfinderViewController *)self _captureController];
  uint64_t v5 = [v4 flashCompromise];

  if (a3) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = (unint64_t)(v5 - 1) >= 2;
  }
  return !v6;
}

- (BOOL)_shouldDisableCompromisedFlashForDevicePosition:(int64_t)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _isFlashCompromisedForDevicePosition:a3];
  return v4 & ![(CAMViewfinderViewController *)self _didAcceptCompromisedFlash];
}

- (BOOL)_shouldShowFlashCompromisedInstructionsForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 devicePosition];
  BOOL v6 = [(CAMViewfinderViewController *)self _isFlashCompromisedForDevicePosition:v5];
  if ((unint64_t)(-[CAMViewfinderViewController _displayedFlashModeForMode:flashActive:](self, "_displayedFlashModeForMode:flashActive:", [v4 mode], 0)- 1) > 1)
  {
    char v8 = 0;
  }
  else
  {
    char v7 = +[CAMCaptureCapabilities capabilities];
    char v8 = objc_msgSend(v7, "isFlashSupportedForMode:devicePosition:", objc_msgSend(v4, "mode"), v5);
  }
  return v6 & v8;
}

- (void)_handleTimerButtonChangedTimerDuration
{
  id v3 = [(CAMViewfinderViewController *)self _timerButton];
  -[CAMViewfinderViewController _setResolvedTimerDuration:](self, "_setResolvedTimerDuration:", [v3 duration]);
}

- (void)_handleUserChangedToLivePhotoMode:(int64_t)a3
{
  -[CAMViewfinderViewController _setDesiredLivePhotoMode:](self, "_setDesiredLivePhotoMode:");
  [(CAMViewfinderViewController *)self _startTimer:0];
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _setPhotoFormatConflict:2 isConflicting:a3 != 0];
  [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:0 animated:1];
  [(CAMViewfinderViewController *)self _updateLowLightConflict:4 isConflicting:[(CAMViewfinderViewController *)self _resolvedLivePhotoMode] != 0];
  if ((unint64_t)([(CAMViewfinderViewController *)self _resolvedLivePhotoMode] - 1) <= 1)
  {
    uint64_t v5 = [(CAMViewfinderViewController *)self _livePhotoButton];
    [v5 performEnablingAnimation];

    BOOL v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    char v7 = [v6 controlStatusBar];
    char v8 = [v7 livePhotoIndicator];
    [v8 startAnimating];
  }
  if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]])
  {
    [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:1];
  }
}

- (void)_handleLivePhotoButtonChangedLivePhotoMode
{
  id v3 = [(CAMViewfinderViewController *)self _livePhotoButton];
  -[CAMViewfinderViewController _handleUserChangedToLivePhotoMode:](self, "_handleUserChangedToLivePhotoMode:", [v3 livePhotoMode]);
}

- (void)_handleSharedLibraryButton
{
  id v4 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
  if (CAMSharedLibraryModeIsOn([v4 sharedLibraryMode])) {
    uint64_t v3 = 3;
  }
  else {
    uint64_t v3 = 2;
  }
  [(CAMViewfinderViewController *)self _handleUserChangedToSharedLibraryMode:v3];
}

- (void)_handleUserChangedToSharedLibraryMode:(int64_t)a3
{
  id v6 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
  [v6 setSharedLibraryMode:a3];
  uint64_t v5 = [(CAMViewfinderViewController *)self _librarySelectionController];
  [v5 userDidPickSharedLibraryMode:a3];

  [(CAMViewfinderViewController *)self _startTimer:1];
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:1];
}

- (void)_setExternalStorageOutputEnabled:(BOOL)a3
{
}

- (void)_setExternalStorageOutputEnabled:(BOOL)a3 animated:(BOOL)a4
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (self->__externalStorageOutputEnabled != a3)
  {
    BOOL v4 = a4;
    BOOL v5 = a3;
    char v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      char v8 = @"OFF";
      if (v5) {
        char v8 = @"ON";
      }
      int v11 = 138543362;
      int64_t v12 = v8;
      _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "External storage: changing external storage output to %{public}@.", (uint8_t *)&v11, 0xCu);
    }

    if ([(CAMViewfinderViewController *)self _currentMode] == 1 && !v5) {
      [(CAMViewfinderViewController *)self _fallbackToValidProResVideoConfigurationIfNeeded];
    }
    self->__externalStorageOutputEnabled = v5;
    uint64_t v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v9 setExternalStorageButtonVisible:v5 animated:v4];

    if (!v5)
    {
      if ([(CAMViewfinderViewController *)self _isShowingCameraRoll])
      {
        uint64_t v10 = [(CAMViewfinderViewController *)self _cameraRollController];
        [v10 dismissCameraRollViewControllerForced:1 animated:0];
      }
    }
    [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityAnimated:1];
    [(CAMViewfinderViewController *)self _updateExternalStorageDataSources];
  }
}

- (void)_updateExternalStorageDataSources
{
  if ([(CAMViewfinderViewController *)self _externalStorageOutputEnabled])
  {
    id v5 = [(CAMViewfinderViewController *)self _connectedStorage];
  }
  else
  {
    id v5 = 0;
  }
  uint64_t v3 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v3 setExternalStorage:v5];

  BOOL v4 = [(CAMViewfinderViewController *)self _storageController];
  [v4 setExternalStorage:v5];
}

- (void)_fallbackToValidProResVideoConfigurationIfNeeded
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  if ([(CAMViewfinderViewController *)self _desiredProResVideoMode])
  {
    BOOL v4 = +[CAMCaptureCapabilities capabilities];
    uint64_t v16 = MEMORY[0x263EF8330];
    uint64_t v17 = 3221225472;
    char v18 = __79__CAMViewfinderViewController__fallbackToValidProResVideoConfigurationIfNeeded__block_invoke;
    uint64_t v19 = &unk_263FA20B8;
    id v5 = v4;
    id v20 = v5;
    int64_t v21 = v3;
    id v6 = (uint64_t (**)(void *, int64_t))_Block_copy(&v16);
    if ((v6[2](v6, [(CAMViewfinderViewController *)self _currentVideoConfiguration]) & 1) == 0)
    {
      char v7 = +[CAMCaptureCapabilities capabilities];
      uint64_t v8 = objc_msgSend(v7, "validatedVideoConfigurationForVideoConfiguration:withBlock:", -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration"), v6);

      [(CAMViewfinderViewController *)self set_videoConfigurationOverride:v8];
      int64_t v9 = [(CAMViewfinderViewController *)self _currentMode];
      int64_t v10 = [(CAMViewfinderViewController *)self _currentDevicePosition];
      BOOL v11 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:v9 devicePosition:v10];
      int64_t v12 = +[CAMUserPreferences preferences];
      uint64_t v13 = [v12 defaultDeviceForModeChange:v9 devicePosition:v10 spatialVideoEnabled:v11];

      long long v14 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      long long v15 = [(CAMViewfinderViewController *)self _graphConfigurationForChangeToMode:v9 device:v13 fromGraphConfiguration:v14];
      [(CAMViewfinderViewController *)self _defaultZoomFactorForGraphConfiguration:v15];
      -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v14, v15, 1);
    }
  }
}

uint64_t __79__CAMViewfinderViewController__fallbackToValidProResVideoConfigurationIfNeeded__block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) isProResVideoSupportedForMode:*(void *)(a1 + 40) videoConfiguration:a2 outputToExternalStorage:0];
}

- (void)_showExternalStorageRecordingFailedAlert
{
  int64_t v3 = (void *)MEMORY[0x263F82418];
  BOOL v4 = CAMLocalizedFrameworkString(@"EXTERNAL_RECORDING_FAILED_TITLE", 0);
  id v5 = CAMLocalizedFrameworkString(@"EXTERNAL_RECORDING_FAILED_MESSAGE", 0);
  id v11 = [v3 alertControllerWithTitle:v4 message:v5 preferredStyle:1];

  id v6 = (void *)MEMORY[0x263F82400];
  char v7 = CAMLocalizedFrameworkString(@"OK", 0);
  uint64_t v8 = [v6 actionWithTitle:v7 style:1 handler:0];
  [v11 addAction:v8];

  int64_t v9 = [(CAMViewfinderViewController *)self view];
  int64_t v10 = [v9 window];

  objc_msgSend(v10, "pl_presentViewController:animated:", v11, 1);
}

- (void)_updateSwipeToModeSwitchGestureRecognizersWithDirectionsForLayoutStyle:(int64_t)a3
{
  id v6 = [(CAMViewfinderViewController *)self _previousModeGestureRecognizer];
  objc_msgSend(v6, "setDirection:", -[CAMViewfinderViewController _previousModeSwipeDirectionForLayoutStyle:](self, "_previousModeSwipeDirectionForLayoutStyle:", a3));
  id v5 = [(CAMViewfinderViewController *)self _nextModeGestureRecognizer];
  objc_msgSend(v5, "setDirection:", -[CAMViewfinderViewController _nextModeSwitchDirectionForLayoutStyle:](self, "_nextModeSwitchDirectionForLayoutStyle:", a3));
}

- (BOOL)_isSwipeToModeSwitchEnabled
{
  int v3 = [(UISwipeGestureRecognizer *)self->__nextModeGestureRecognizer isEnabled];
  if (v3)
  {
    previousModeGestureRecognizer = self->__previousModeGestureRecognizer;
    LOBYTE(v3) = [(UISwipeGestureRecognizer *)previousModeGestureRecognizer isEnabled];
  }
  return v3;
}

- (void)_swipedToNextCameraMode
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  id v11 = [(CAMViewfinderViewController *)self modesForModeDial:0];
  BOOL v4 = [NSNumber numberWithInteger:v3];
  uint64_t v5 = [v11 indexOfObject:v4];

  uint64_t v6 = [v11 count];
  if (v5 + 1 < (unint64_t)(v6 - 1)) {
    uint64_t v7 = v5 + 1;
  }
  else {
    uint64_t v7 = v6 - 1;
  }
  if (v5 != v7)
  {
    uint64_t v8 = [(CAMViewfinderViewController *)self _feedbackController];
    [v8 performDiscreteFeedback:0];

    int64_t v9 = [(CAMViewfinderViewController *)self _feedbackController];
    [v9 prepareDiscreteFeedback:0];

    int64_t v10 = [v11 objectAtIndexedSubscript:v7];
    -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", [v10 integerValue]);
  }
}

- (void)_swipedToPreviousCameraMode
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  id v11 = [(CAMViewfinderViewController *)self modesForModeDial:0];
  BOOL v4 = [NSNumber numberWithInteger:v3];
  uint64_t v5 = [v11 indexOfObject:v4];

  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = v6 - 1;
  if (v5 != v6 - 1)
  {
    uint64_t v8 = [(CAMViewfinderViewController *)self _feedbackController];
    [v8 performDiscreteFeedback:0];

    int64_t v9 = [(CAMViewfinderViewController *)self _feedbackController];
    [v9 prepareDiscreteFeedback:0];

    int64_t v10 = [v11 objectAtIndexedSubscript:v7];
    -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", [v10 integerValue]);
  }
}

- (void)_handleSwipeToPreviousFilterRecognizer:(id)a3
{
  id v3 = [(CAMViewfinderViewController *)self _filterScrubberView];
  [v3 switchToPreviousItem];
}

- (void)_handleSwipeToNextFilterRecognizer:(id)a3
{
  id v3 = [(CAMViewfinderViewController *)self _filterScrubberView];
  [v3 switchToNextItem];
}

- (void)_handleModeDialTouchDown:(id)a3
{
  id v5 = +[CAMCaptureCapabilities capabilities];
  if ([v5 allowHapticsOnConfigurationTaps])
  {
    BOOL v4 = [(CAMViewfinderViewController *)self _feedbackController];
    [v4 prepareDiscreteFeedback:0];
  }
}

- (void)_handleModeDialValueChanged:(id)a3
{
  id v6 = a3;
  BOOL v4 = +[CAMCaptureCapabilities capabilities];
  if ([v4 allowHapticsOnConfigurationTaps])
  {
    id v5 = [(CAMViewfinderViewController *)self _feedbackController];
    [v5 performDiscreteFeedback:0];
  }
  -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", [v6 selectedMode]);
}

- (void)_handleFlipButtonTouchDown:(id)a3
{
  id v3 = [(CAMViewfinderViewController *)self _feedbackController];
  [v3 prepareDiscreteFeedback:0];
}

- (void)_handleFlipButtonReleased:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _feedbackController];
  [v4 performDiscreteFeedback:0];

  BOOL v5 = [(CAMViewfinderViewController *)self _currentDevicePosition] == 0;
  BOOL v6 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:v5];
  uint64_t v7 = +[CAMUserPreferences preferences];
  uint64_t v8 = objc_msgSend(v7, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v5, v6);

  [(CAMViewfinderViewController *)self _handleUserChangedToDevice:v8];
}

- (void)_attemptShutterPressWithBlock:(id)a3
{
  uint64_t v13 = (void (**)(id, uint64_t))a3;
  uint64_t v4 = mach_absolute_time();
  [(CAMViewfinderViewController *)self _setLastShutterButtonTouchDownTime:v4];
  CAMSignpostWithIDAndArgs(11, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  [MEMORY[0x263F8C6D0] cancelPreviousPerformRequestsWithTarget:self selector:sel_pressShutterForRemoteShutter object:0];
  unint64_t v5 = [(CAMViewfinderViewController *)self _shutterButtonFeedbackForCurrentConfiguration];
  BOOL v6 = [(CAMViewfinderViewController *)self _capturingFromPhysicalButton];
  uint64_t v7 = +[CAMCaptureCapabilities capabilities];
  unsigned __int8 v8 = [v7 isCameraButtonSupported];

  char v9 = v6 & v8;
  if ((v6 & v8 & 1) == 0)
  {
    int64_t v10 = [(CAMViewfinderViewController *)self _feedbackController];
    [v10 prepareButtonFeedback:v5];
  }
  if (![(CAMViewfinderViewController *)self _isControlDrawerShowingPersistentControl])[(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:1]; {
  [(CAMViewfinderViewController *)self _dismissOverlays];
  }
  if ([(CAMViewfinderViewController *)self _redirectShutterEventIfNecessary:1])
  {
    id v11 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v11 resetAnimated:1];
  }
  else
  {
    [(CAMPreviewViewController *)self->__previewViewController notifyShutterButtonPressed];
    if (v13) {
      v13[2](v13, v4);
    }
  }
  if ((v9 & 1) == 0)
  {
    [(CAMViewfinderViewController *)self _setLastPerformedShutterButtonFeedbackType:v5];
    int64_t v12 = [(CAMViewfinderViewController *)self _feedbackController];
    objc_msgSend(v12, "performPressButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));
  }
}

- (void)_attemptShutterReleaseWithBlock:(id)a3
{
  id v11 = (void (**)(void))a3;
  CAMSignpostWithIDAndArgs(12, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  BOOL v4 = [(CAMViewfinderViewController *)self _capturingFromPhysicalButton];
  unint64_t v5 = +[CAMCaptureCapabilities capabilities];
  unsigned __int8 v6 = [v5 isCameraButtonSupported];

  char v7 = v4 & v6;
  if ((v4 & v6 & 1) == 0)
  {
    unsigned __int8 v8 = [(CAMViewfinderViewController *)self _feedbackController];
    objc_msgSend(v8, "prepareButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));
  }
  BOOL v9 = [(CAMViewfinderViewController *)self _redirectShutterEventIfNecessary:64];
  if (v11 && !v9) {
    v11[2]();
  }
  if ((v7 & 1) == 0)
  {
    int64_t v10 = [(CAMViewfinderViewController *)self _feedbackController];
    objc_msgSend(v10, "performReleaseButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));
  }
}

- (BOOL)dynamicShutterControlCanStartOnTouchDown:(id)a3
{
  unint64_t v4 = [(CAMViewfinderViewController *)self _currentMode];
  if (v4 > 9 || ((1 << v4) & 0x211) == 0) {
    return 1;
  }
  return [(CAMViewfinderViewController *)self _shouldCaptureWithTimer];
}

- (BOOL)dynamicShutterControlShouldBeginGesture:(id)a3
{
  return ![(CAMViewfinderViewController *)self _isActiveZooming];
}

- (void)dynamicShutterControlGesturesDidBegin:(id)a3
{
  unint64_t v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: GesturesDidBegin", buf, 2u);
  }

  [(CAMViewfinderViewController *)self _stopSmartStyleOnboardingControlRevealAnimation];
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  v5[2] = __69__CAMViewfinderViewController_dynamicShutterControlGesturesDidBegin___block_invoke;
  v5[3] = &unk_263FA20E0;
  v5[4] = self;
  [(CAMViewfinderViewController *)self _attemptShutterPressWithBlock:v5];
}

uint64_t __69__CAMViewfinderViewController_dynamicShutterControlGesturesDidBegin___block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = objc_msgSend(v4, "isCTMVideoCaptureSupportedForMode:", objc_msgSend(*(id *)(a1 + 32), "_currentMode"));

  unsigned __int8 v6 = [*(id *)(a1 + 32) _captureController];
  char v7 = [v6 isCapturingVideo];

  unsigned __int8 v8 = [*(id *)(a1 + 32) _captureController];
  char v9 = [v8 isCapturingLowLightImage];

  char v10 = [*(id *)(a1 + 32) _isCapturingFromTimer];
  uint64_t result = [*(id *)(a1 + 32) _resolvedTimerDuration];
  if (v5 && (v7 & 1) == 0 && (v10 & 1) == 0 && !result && (v9 & 1) == 0)
  {
    int64_t v12 = *(void **)(a1 + 32);
    return [v12 _initiateCTMCaptureWithCurrentSettingsAtSystemTime:a2];
  }
  return result;
}

- (void)dynamicShutterControlGesturesDidEnd:(id)a3
{
  id v4 = a3;
  int v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v9 = 0;
    _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: GesturesDidEnd", v9, 2u);
  }

  [(CAMViewfinderViewController *)self _attemptShutterReleaseWithBlock:0];
  [(CAMViewfinderViewController *)self _cancelCTMCapture];
  int v6 = [v4 isShutterStateDefault];

  if (v6
    && [(CAMViewfinderViewController *)self _trueVideoIsTransitioningToCapture])
  {
    int64_t v7 = [(CAMViewfinderViewController *)self _currentMode];
    if (v7 == [(CAMViewfinderViewController *)self _trueVideoDestinationCaptureMode])
    {
      [(CAMViewfinderViewController *)self _trueVideoStopCapture];
    }
    else
    {
      unsigned __int8 v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      [v8 setTrueVideoState:0];

      [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"True video state changed to idle"];
      [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
    }
  }
}

- (void)dynamicShutterControlGesturesDidCancel:(id)a3
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if ([(CAMViewfinderViewController *)self _currentMode])
  {
    id v4 = @"no context";
  }
  else
  {
    int v5 = [(CAMViewfinderViewController *)self _currentStillImageCaptureMomentSettings];
    if (v5)
    {
      [(CAMViewfinderViewController *)self _cancelCTMCapture];
      id v4 = @"cancel CTM capture";
    }
    else
    {
      id v4 = @"no context";
    }
  }
  int v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    unsigned __int8 v8 = v4;
    _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: GesturesDidCancel: %{public}@", (uint8_t *)&v7, 0xCu);
  }
}

- (void)dynamicShutterControlDidShortPress:(id)a3
{
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidShortPress", v7, 2u);
  }

  unint64_t v5 = [(CAMViewfinderViewController *)self currentCaptureMode];
  if (v5 <= 9)
  {
    if (((1 << v5) & 0x1BE) != 0)
    {
      [(CAMViewfinderViewController *)self currentCaptureMode];
      int v6 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        -[CAMViewfinderViewController dynamicShutterControlDidShortPress:]();
      }
    }
    else if (((1 << v5) & 0x240) != 0)
    {
      [(CAMViewfinderViewController *)self _captureStillImageWithCurrentSettings];
    }
    else
    {
      [(CAMViewfinderViewController *)self _commitCTMCaptureWithType:1];
    }
  }
}

- (void)dynamicShutterControlDidStart:(id)a3 withGesture:(int64_t)a4
{
  int v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidStart", buf, 2u);
  }

  switch([(CAMViewfinderViewController *)self currentCaptureMode])
  {
    case 0:
    case 4:
    case 6:
    case 9:
      if ([(CAMViewfinderViewController *)self _shouldCaptureWithTimer])
      {
        int v7 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int64_t v26 = 0;
          _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: Starting timer countdown", v26, 2u);
        }

        [(CAMViewfinderViewController *)self _cancelCTMCapture];
        [(CAMViewfinderViewController *)self _startCountdownForCaptureTimer];
        return;
      }
      if (a4 == 1)
      {
        [(CAMViewfinderViewController *)self _setCurrentLowLightCaptureCancelable:1];
        id v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
        [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v11 isCapturing:1 animated:1];

        int64_t v12 = [(CAMViewfinderViewController *)self _currentStillImageCaptureMomentSettings];

        uint64_t v13 = self;
        if (!v12)
        {
          [(CAMViewfinderViewController *)self _captureStillImageWithCurrentSettings];
          return;
        }
        uint64_t v14 = 1;
        goto LABEL_39;
      }
      if ([(CAMViewfinderViewController *)self currentCaptureMode] != 6)
      {
        char v18 = +[CAMCaptureCapabilities capabilities];
        if ([v18 isTrueVideoSupported])
        {
          int64_t v19 = [(CAMViewfinderViewController *)self currentCaptureMode];

          if (!v19)
          {
            long long v15 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
            uint64_t v20 = [v15 viewportAspectRatio];
            int64_t v21 = self;
            uint64_t v22 = 0;
            uint64_t v23 = 1;
LABEL_35:
            [(CAMViewfinderViewController *)v21 _startTransitioningToTrueVideoCaptureFromSourceMode:v22 sourceAspectRatio:v20 toDestinationMode:v23];
            goto LABEL_36;
          }
        }
        else
        {
        }
        char v24 = +[CAMCaptureCapabilities capabilities];
        if ([v24 isSpatialModeTrueVideoSupported])
        {
          int64_t v25 = [(CAMViewfinderViewController *)self currentCaptureMode];

          if (v25 == 9)
          {
            long long v15 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
            uint64_t v20 = [v15 viewportAspectRatio];
            int64_t v21 = self;
            uint64_t v22 = 9;
            uint64_t v23 = 8;
            goto LABEL_35;
          }
        }
        else
        {
        }
        uint64_t v13 = self;
        uint64_t v14 = 2;
LABEL_39:
        [(CAMViewfinderViewController *)v13 _commitCTMCaptureWithType:v14];
        return;
      }
      char v10 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        -[CAMViewfinderViewController dynamicShutterControlDidStart:withGesture:]();
      }
LABEL_24:

      return;
    case 1:
    case 2:
    case 7:
    case 8:
      unsigned __int8 v8 = [(CAMViewfinderViewController *)self _captureController];
      char v9 = [v8 isCapturingVideo];

      if ((v9 & 1) == 0)
      {
        long long v15 = [(CAMViewfinderViewController *)self _videoCaptureRequestWithCurrentSettings];
        [(CAMViewfinderViewController *)self _startCapturingVideoWithRequest:v15];
        goto LABEL_36;
      }
      char v10 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        -[CAMViewfinderViewController dynamicShutterControlDidStart:withGesture:]();
      }
      goto LABEL_24;
    case 3:
      uint64_t v16 = [(CAMViewfinderViewController *)self _captureController];
      char v17 = [v16 isCapturingPanorama];

      if (v17)
      {
        char v10 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          -[CAMViewfinderViewController dynamicShutterControlDidStart:withGesture:]();
        }
        goto LABEL_24;
      }
      long long v15 = [(CAMViewfinderViewController *)self _panoramaCaptureRequestWithCurrentSettings];
      [(CAMViewfinderViewController *)self _startCapturingPanoramaWithRequest:v15];
LABEL_36:

      return;
    case 5:
      if (![(CAMViewfinderViewController *)self _isCapturingTimelapse])
      {
        [(CAMViewfinderViewController *)self _startTimelapse];
        return;
      }
      char v10 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        -[CAMViewfinderViewController dynamicShutterControlDidStart:withGesture:].cold.4();
      }
      goto LABEL_24;
    default:
      return;
  }
}

- (void)dynamicShutterControlDidStartZoomGesture:(id)a3
{
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: didStartZoomGesture", v5, 2u);
  }

  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  -[CAMViewfinderViewController _setVideoZoomFactorAtDynamicShutterStart:](self, "_setVideoZoomFactorAtDynamicShutterStart:");
}

- (void)dynamicShutterControl:(id)a3 didChangeRelativeZoomProgress:(double)a4
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v14 = a4;
    _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: didChangeRelativeZoomProgress: %f", buf, 0xCu);
  }

  int v7 = +[CAMUserPreferences preferences];
  unint64_t v8 = [v7 defaultCustomLens];

  if (v8 > 5) {
    double v9 = NAN;
  }
  else {
    double v9 = dbl_209C79468[v8] / dbl_209C79438[v8];
  }
  double v10 = pow(1.0 / (0.5 / v9), a4);
  [(CAMViewfinderViewController *)self _videoZoomFactorAtDynamicShutterStart];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = __83__CAMViewfinderViewController_dynamicShutterControl_didChangeRelativeZoomProgress___block_invoke;
  v12[3] = &unk_263FA2108;
  v12[4] = self;
  [(CAMViewfinderViewController *)self _updateZoomFactorForZoomFactor:5 rampDuration:v12 interactionType:v11 * v10 didChangeDevice:0.5];
  [(CAMViewfinderViewController *)self _setLastZoomInteractionType:5];
}

uint64_t __83__CAMViewfinderViewController_dynamicShutterControl_didChangeRelativeZoomProgress___block_invoke(uint64_t a1, double a2)
{
  id v3 = *(void **)(a1 + 32);
  [v3 _videoZoomFactorAtDynamicShutterStart];
  double v5 = v4 * a2;
  return [v3 _setVideoZoomFactorAtDynamicShutterStart:v5];
}

- (void)dynamicShutterControlDidStop:(id)a3
{
  double v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidStop", buf, 2u);
  }

  double v5 = [(CAMViewfinderViewController *)self _captureController];
  switch([(CAMViewfinderViewController *)self currentCaptureMode])
  {
    case 0:
    case 4:
    case 6:
    case 9:
      if ([(CAMViewfinderViewController *)self _isCapturingFromTimer])
      {
        [(CAMViewfinderViewController *)self _stopCountdownForCaptureTimer];
      }
      else if ([v5 isCapturingLowLightImage])
      {
        int v6 = [(CAMViewfinderViewController *)self _closedViewfinderController];
        [v6 addClosedViewfinderReason:13];

        [(CAMViewfinderViewController *)self _cancelCaptureAnimation];
        v11[0] = MEMORY[0x263EF8330];
        v11[1] = 3221225472;
        v11[2] = __60__CAMViewfinderViewController_dynamicShutterControlDidStop___block_invoke;
        v11[3] = &unk_263FA0208;
        id v12 = v5;
        [v12 stopCaptureSessionWithCompletion:v11];
        [(CAMViewfinderViewController *)self _setCurrentLowLightCaptureCancelable:0];
        [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Night mode capture cancel began"];
        int v7 = [(CAMViewfinderViewController *)self _controlDrawer];
        unint64_t v8 = [v7 lowLightSlider];
        [v8 endCaptureAnimationAnimated:1];

        double v9 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
        [v9 setSpinning:1];
      }
      else
      {
        if ([(CAMViewfinderViewController *)self currentCaptureMode] == 6)
        {
          double v10 = os_log_create("com.apple.camera", "Camera");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            -[CAMViewfinderViewController dynamicShutterControlDidStop:]();
          }
          goto LABEL_25;
        }
        [(CAMViewfinderViewController *)self _stopCapturingCTMVideo];
      }
      break;
    case 1:
    case 2:
    case 7:
    case 8:
      if ([(CAMViewfinderViewController *)self _trueVideoIsCapturing])
      {
        [(CAMViewfinderViewController *)self _trueVideoStopCapture];
      }
      else
      {
        if (![v5 isCapturingVideo])
        {
          double v10 = os_log_create("com.apple.camera", "Camera");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            -[CAMViewfinderViewController dynamicShutterControlDidStop:]();
          }
          goto LABEL_25;
        }
        [(CAMViewfinderViewController *)self _stopCapturingVideo];
      }
      break;
    case 3:
      if (![v5 isCapturingPanorama])
      {
        double v10 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          -[CAMViewfinderViewController dynamicShutterControlDidStop:]();
        }
        goto LABEL_25;
      }
      [(CAMViewfinderViewController *)self _stopCapturingPanorama];
      break;
    case 5:
      if ([(CAMViewfinderViewController *)self _isCapturingTimelapse])
      {
        [(CAMViewfinderViewController *)self _stopTimelapse];
      }
      else
      {
        double v10 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          -[CAMViewfinderViewController dynamicShutterControlDidStop:].cold.4();
        }
LABEL_25:
      }
      break;
    default:
      break;
  }
}

uint64_t __60__CAMViewfinderViewController_dynamicShutterControlDidStop___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) startCaptureSession];
}

- (void)dynamicShutterControlDidPressLockButton:(id)a3
{
  double v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v14 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidPressLockButton", v14, 2u);
  }

  [(CAMViewfinderViewController *)self _setLastShutterButtonTouchDownTime:mach_absolute_time()];
  CAMSignpostWithIDAndArgs(13, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  CAMSignpostWithIDAndArgs(14, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  int64_t v5 = [(CAMViewfinderViewController *)self currentCaptureMode];
  if ((unint64_t)(v5 - 3) < 7)
  {
    [(CAMViewfinderViewController *)self currentCaptureMode];
    double v9 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController dynamicShutterControlDidPressLockButton:]();
    }

    return;
  }
  if ((unint64_t)(v5 - 1) >= 2)
  {
    if (v5) {
      return;
    }
    double v11 = [(CAMViewfinderViewController *)self _captureController];
    char v12 = [v11 isCapturingVideo];

    if ((v12 & 1) == 0)
    {
      uint64_t v13 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        -[CAMViewfinderViewController dynamicShutterControlDidPressLockButton:]();
      }
    }
    goto LABEL_18;
  }
  int v6 = [(CAMViewfinderViewController *)self _captureController];
  int v7 = [v6 isCapturingVideo];

  if (v7)
  {
LABEL_18:
    [(CAMViewfinderViewController *)self _captureStillImageWithCurrentSettings];
    return;
  }
  unint64_t v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    -[CAMViewfinderViewController dynamicShutterControlDidPressLockButton:]();
  }
}

- (void)dynamicShutterControlDidPressPauseResumeButton:(id)a3
{
  [(CAMViewfinderViewController *)self _setLastShutterButtonTouchDownTime:mach_absolute_time()];
  double v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = objc_msgSend(v4, "isPauseVideoSupportedForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

  if (v5)
  {
    int v6 = [(CAMViewfinderViewController *)self _captureController];
    int v7 = [v6 isCapturingVideo];

    if (v7)
    {
      unint64_t v8 = [(CAMViewfinderViewController *)self _captureController];
      int v9 = [v8 videoCapturePaused];

      double v10 = os_log_create("com.apple.camera", "Camera");
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_2099F8000, v10, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidPressResume", buf, 2u);
        }

        [(CAMViewfinderViewController *)self _resumeCaptureVideo];
      }
      else
      {
        if (v11)
        {
          *(_WORD *)double v14 = 0;
          _os_log_impl(&dword_2099F8000, v10, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidPressPause", v14, 2u);
        }

        [(CAMViewfinderViewController *)self _pauseCapturingVideo];
      }
      [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
    }
    else
    {
      uint64_t v13 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        -[CAMViewfinderViewController dynamicShutterControlDidPressPauseResumeButton:]();
      }
    }
  }
  else
  {
    char v12 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController dynamicShutterControlDidPressPauseResumeButton:](self);
    }
  }
}

- (void)dynamicShutterControlDidPresentCounter:(id)a3
{
  double v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidPresentCounter", v7, 2u);
  }

  int v5 = [(CAMViewfinderViewController *)self _currentStillImageCaptureMomentSettings];
  if (v5)
  {
    [(CAMViewfinderViewController *)self _cancelCTMCapture];
  }
  else
  {
    int v6 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController dynamicShutterControlDidPresentCounter:]();
    }
  }
  [(CAMViewfinderViewController *)self _beginCapturingBurst];
}

- (void)dynamicShutterControlDidDismissCounter:(id)a3
{
  double v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidDismissCounter", v5, 2u);
  }

  [(CAMViewfinderViewController *)self _stopCapturingBurst];
}

- (void)shutterControlTouchAttemptedWhileDisabled:(id)a3
{
  double v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: TouchAttemptedWhileDisabled", v5, 2u);
  }

  [(CAMViewfinderViewController *)self _handleDisabledShutterTap];
}

- (BOOL)_redirectShutterEventIfNecessary:(unint64_t)a3
{
  int v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int v6 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  BOOL v7 = -[CAMViewfinderViewController _shouldDisableModeForGraphConfiguration:callActive:](self, "_shouldDisableModeForGraphConfiguration:callActive:", v5, [v6 isCallActive]);

  unint64_t v8 = [(CAMViewfinderViewController *)self _captureController];
  int v9 = [v8 isInterrupted];

  double v10 = +[CAMCaptureCapabilities capabilities];
  int v11 = [v10 captureOnTouchDown];

  if (a3 != 1)
  {
    if (a3 != 128 && a3 != 64)
    {
      LOBYTE(v9) = 0;
      goto LABEL_14;
    }
    v11 ^= 1u;
  }
  if (v7)
  {
    char v12 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2099F8000, v12, OS_LOG_TYPE_DEFAULT, "Ignoring shutter button while current mode is disabled", buf, 2u);
    }
LABEL_12:

    LOBYTE(v9) = 1;
    goto LABEL_14;
  }
  if ((v9 & v11) == 1)
  {
    uint64_t v13 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_2099F8000, v13, OS_LOG_TYPE_DEFAULT, "Ignoring capture from shutter button: we're interrupted, attempting to end interruption", v15, 2u);
    }

    char v12 = [(CAMViewfinderViewController *)self _captureController];
    [v12 attemptToEndInterruptions];
    goto LABEL_12;
  }
LABEL_14:

  return v9;
}

- (void)_handleDisabledShutterTap
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  CAMSignpostWithIDAndArgs(65, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  unint64_t v3 = [(CAMViewfinderViewController *)self _reasonsToDisableShutterButton];
  double v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = CAMDebugStringForControlDisableReasons(v3);
    *(_DWORD *)uint64_t v16 = 138543362;
    *(void *)&void v16[4] = v5;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Disabled shutter button was tapped, disabled for reasons: %{public}@", v16, 0xCu);
  }
  if (v3)
  {
    int v6 = [(CAMViewfinderViewController *)self _captureController];
    [v6 logCaptureAvailabilityDescription];
  }
  BOOL v7 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  BOOL v8 = v7 != 0;

  int v9 = +[CAMUserPreferences preferences];
  uint64_t v10 = [v9 responsiveShutterEnabled];

  uint64_t v11 = mach_absolute_time();
  uint64_t v12 = v11 - [(CAMViewfinderViewController *)self _lastShutterButtonTouchDownTime];
  *(void *)uint64_t v16 = 0;
  mach_timebase_info((mach_timebase_info_t)v16);
  uint64_t v13 = [[CAMAnalyticsIgnoredShutterEvent alloc] initWithReasons:v3 timeSinceLastPress:v8 dynamicShutterEnabled:v10 responsiveShutterEnabled:(double)(v12 * *(unsigned int *)v16 / *(unsigned int *)&v16[4]) / 1000000000.0];
  [(CAMAnalyticsEvent *)v13 publish];
  if ((v3 & 0x80) != 0)
  {
    double v14 = [(CAMViewfinderViewController *)self _storageController];
    uint64_t v15 = [v14 purgeableStorageContainer];
    [v15 cancelPurge];
  }
}

void __59__CAMViewfinderViewController__handleShutterButtonPressed___block_invoke(uint64_t a1, uint64_t a2)
{
  double v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = [v4 captureOnTouchDown];

  id v12 = [*(id *)(a1 + 32) _captureController];
  int v6 = [*(id *)(a1 + 32) _currentGraphConfiguration];
  BOOL v7 = v6;
  if (v5)
  {
    [*(id *)(a1 + 32) _handleShutterButtonActionWithEventTriggerDescription:@"Shutter button pressed"];
  }
  else
  {
    unint64_t v8 = [v6 mode];
    BOOL v9 = v8 > 9 || ((1 << v8) & 0x251) == 0;
    if (!v9 && [*(id *)(a1 + 32) _shouldReportUserInitiationTimeForCurrentSettings]) {
      [v12 prepareToCaptureStillImageAtSystemTime:a2];
    }
  }
  if (([v7 mode] | 4) == 4)
  {
    uint64_t v10 = [*(id *)(a1 + 32) _layoutStyle];
    char v11 = [*(id *)(a1 + 32) isDisablingMultipleCaptureFeatures];
    if (v10 != 2 && (v11 & 1) == 0) {
      [*(id *)(a1 + 32) _setupBurstTimerWithDelay:0.4];
    }
  }
}

- (void)_handleShutterButtonDragExited:(id)a3
{
}

- (void)_handleShutterButtonDragEnter:(id)a3
{
  unint64_t v4 = [(CAMViewfinderViewController *)self _shutterButtonFeedbackForCurrentConfiguration];
  int v5 = [(CAMViewfinderViewController *)self _feedbackController];
  [v5 prepareButtonFeedback:v4];

  [(CAMViewfinderViewController *)self _setLastPerformedShutterButtonFeedbackType:v4];
  id v6 = [(CAMViewfinderViewController *)self _feedbackController];
  objc_msgSend(v6, "performPressButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));
}

- (void)_handleShutterButtonReleased:(id)a3 fromDragExit:(BOOL)a4
{
  int v5 = @"Shutter button released";
  if (a4) {
    int v5 = @"Shutter button drag exit";
  }
  id v6 = v5;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = __73__CAMViewfinderViewController__handleShutterButtonReleased_fromDragExit___block_invoke;
  v8[3] = &unk_263FA0408;
  void v8[4] = self;
  BOOL v9 = v6;
  BOOL v7 = v6;
  [(CAMViewfinderViewController *)self _attemptShutterReleaseWithBlock:v8];
}

void __73__CAMViewfinderViewController__handleShutterButtonReleased_fromDragExit___block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = +[CAMCaptureCapabilities capabilities];
  int v3 = [v2 captureOnTouchDown];

  unint64_t v4 = [*(id *)(a1 + 32) _captureController];
  int v5 = *(void **)(a1 + 32);
  if (v3)
  {
    [v5 _teardownBurstTimer];
    int v6 = [v4 isCapturingBurst];
    BOOL v7 = os_log_create("com.apple.camera", "Camera");
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v8)
      {
        uint64_t v9 = *(void *)(a1 + 40);
        int v11 = 138543362;
        uint64_t v12 = v9;
        _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: Stop capturing burst", (uint8_t *)&v11, 0xCu);
      }

      [*(id *)(a1 + 32) _stopCapturingBurst];
    }
    else
    {
      if (v8)
      {
        uint64_t v10 = *(void *)(a1 + 40);
        int v11 = 138543362;
        uint64_t v12 = v10;
        _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@", (uint8_t *)&v11, 0xCu);
      }
    }
  }
  else
  {
    [v5 _handleShutterButtonActionWithEventTriggerDescription:*(void *)(a1 + 40)];
  }
}

- (void)_handleShutterButtonCancelled:(id)a3
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (([(CAMViewfinderViewController *)self _currentMode] | 4) == 4)
  {
    [(CAMViewfinderViewController *)self _teardownBurstTimer];
    unint64_t v4 = [(CAMViewfinderViewController *)self _captureController];
    if ([v4 isCapturingBurst])
    {
      [(CAMViewfinderViewController *)self _stopCapturingBurst];
      int v5 = @"stop capturing burst";
    }
    else
    {
      int v5 = @"no context";
    }
  }
  else
  {
    int v5 = @"no context";
  }
  int v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    BOOL v8 = v5;
    _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "Shutter button cancelled: %{public}@", (uint8_t *)&v7, 0xCu);
  }
}

- (BOOL)_stillDuringVideoButtonPressed:(id)a3
{
  [(CAMViewfinderViewController *)self _setLastShutterButtonTouchDownTime:mach_absolute_time()];
  CAMSignpostWithIDAndArgs(13, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  BOOL v4 = [(CUCaptureController *)self->__captureController isCapturingVideo];
  if (v4)
  {
    unint64_t v5 = [(CAMViewfinderViewController *)self _shutterButtonFeedbackForCurrentConfiguration];
    int v6 = [(CAMViewfinderViewController *)self _feedbackController];
    [v6 prepareButtonFeedback:v5];

    [(CAMViewfinderViewController *)self _setLastPerformedShutterButtonFeedbackType:v5];
    int v7 = [(CAMViewfinderViewController *)self _feedbackController];
    objc_msgSend(v7, "performPressButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

    BOOL v8 = +[CAMCaptureCapabilities capabilities];
    LODWORD(v6) = [v8 captureOnTouchDown];

    if (v6)
    {
      LOBYTE(v4) = [(CAMViewfinderViewController *)self _captureStillImageWithCurrentSettings];
    }
    else
    {
      LOBYTE(v4) = 1;
    }
  }
  return v4;
}

- (BOOL)_stillDuringVideoButtonReleased:(id)a3
{
  CAMSignpostWithIDAndArgs(14, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  BOOL v4 = [(CUCaptureController *)self->__captureController isCapturingVideo];
  if (v4)
  {
    unint64_t v5 = [(CAMViewfinderViewController *)self _feedbackController];
    objc_msgSend(v5, "prepareButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

    int v6 = [(CAMViewfinderViewController *)self _feedbackController];
    objc_msgSend(v6, "performReleaseButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

    int v7 = +[CAMCaptureCapabilities capabilities];
    char v8 = [v7 captureOnTouchDown];

    if (v8)
    {
      LOBYTE(v4) = 1;
    }
    else
    {
      LOBYTE(v4) = [(CAMViewfinderViewController *)self _captureStillImageWithCurrentSettings];
    }
  }
  return v4;
}

- (void)_createPhysicalCaptureInteractionIfNeeded
{
  int v3 = +[CAMCaptureCapabilities capabilities];
  char v4 = [v3 isHalfPressOverlayInProcess];

  if ((v4 & 1) == 0)
  {
    unint64_t v5 = [(CAMViewfinderViewController *)self _physicalButtonInteraction];
    if (v5)
    {
    }
    else if ([(CAMViewfinderViewController *)self isViewLoaded])
    {
      objc_initWeak(&location, self);
      id v6 = objc_alloc(MEMORY[0x263EFA988]);
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 3221225472;
      v11[2] = __72__CAMViewfinderViewController__createPhysicalCaptureInteractionIfNeeded__block_invoke;
      v11[3] = &unk_263FA2130;
      objc_copyWeak(&v12, &location);
      v9[0] = MEMORY[0x263EF8330];
      v9[1] = 3221225472;
      v9[2] = __72__CAMViewfinderViewController__createPhysicalCaptureInteractionIfNeeded__block_invoke_1045;
      v9[3] = &unk_263FA2130;
      objc_copyWeak(&v10, &location);
      int v7 = (void *)[v6 initWithPrimaryEventHandler:v11 secondaryEventHandler:v9];
      char v8 = [(CAMViewfinderViewController *)self view];
      [v8 addInteraction:v7];

      [(CAMViewfinderViewController *)self set_physicalButtonInteraction:v7];
      objc_destroyWeak(&v10);
      objc_destroyWeak(&v12);
      objc_destroyWeak(&location);
    }
  }
}

void __72__CAMViewfinderViewController__createPhysicalCaptureInteractionIfNeeded__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  unint64_t v4 = +[CAMCaptureConversions buttonPhaseForCaptureButtonPhase:](CAMCaptureConversions, "buttonPhaseForCaptureButtonPhase:", [v3 phase]);
  unint64_t v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4 > 3) {
      id v6 = 0;
    }
    else {
      id v6 = off_263FA2590[v4];
    }
    int v10 = 138543362;
    int v11 = v6;
    _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "Primary button press stage: %{public}@", (uint8_t *)&v10, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    unint64_t v7 = [v3 physicalButton] - 1;
    if (v7 > 4) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = qword_209C79498[v7];
    }
  }
  else
  {
    uint64_t v8 = 2;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handlePhysicalCaptureInteractionDidChangePhase:v4 forButton:v8];
}

void __72__CAMViewfinderViewController__createPhysicalCaptureInteractionIfNeeded__block_invoke_1045(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v3 = a2;
  unint64_t v4 = +[CAMCaptureConversions buttonPhaseForCaptureButtonPhase:](CAMCaptureConversions, "buttonPhaseForCaptureButtonPhase:", [v3 phase]);
  unint64_t v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4 > 3) {
      id v6 = 0;
    }
    else {
      id v6 = off_263FA2590[v4];
    }
    int v10 = 138543362;
    int v11 = v6;
    _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "Secondary button press stage: %{public}@", (uint8_t *)&v10, 0xCu);
  }

  if (objc_opt_respondsToSelector())
  {
    unint64_t v7 = [v3 physicalButton] - 1;
    if (v7 > 4) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = qword_209C79498[v7];
    }
  }
  else
  {
    uint64_t v8 = 1;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handlePhysicalCaptureInteractionDidChangePhase:v4 forButton:v8];
}

- (void)_handlePhysicalCaptureInteractionDidChangePhase:(unint64_t)a3 forButton:(int64_t)a4
{
  if (![(CAMViewfinderViewController *)self _isShowingCameraRoll])
  {
    switch(a3)
    {
      case 3uLL:
        [(CAMViewfinderViewController *)self _handlePhysicalButtonCancelled:a4];
        break;
      case 2uLL:
        [(CAMViewfinderViewController *)self _handlePhysicalButtonReleased:a4];
        break;
      case 0uLL:
        [(CAMViewfinderViewController *)self _handlePhysicalButtonPressed:a4];
        break;
    }
  }
}

- (void)_createCameraCaseShutterNotifierIfNeeded
{
  id v3 = [(CAMViewfinderViewController *)self _cameraCaseShutterNotifier];

  if (!v3)
  {
    unint64_t v4 = [CAMPhysicalCaptureNotifier alloc];
    unint64_t v5 = [(CAMViewfinderViewController *)self view];
    id v6 = [(CAMPhysicalCaptureNotifier *)v4 initWithView:v5 includeVolumeButtons:0];
    [(CAMViewfinderViewController *)self set_cameraCaseShutterNotifier:v6];

    id v7 = [(CAMViewfinderViewController *)self _cameraCaseShutterNotifier];
    [v7 setDelegate:self];
  }
}

- (void)physicalCaptureNotifierDidChangeState:(id)a3 forButton:(int64_t)a4
{
  uint64_t v6 = [a3 cameraCaseButtonState];
  if (![(CAMViewfinderViewController *)self _isShowingCameraRoll])
  {
    if (v6)
    {
      if (v6 == 1)
      {
        [(CAMViewfinderViewController *)self _handlePhysicalButtonPressed:a4];
      }
    }
    else
    {
      [(CAMViewfinderViewController *)self _handlePhysicalButtonReleased:a4];
    }
  }
}

- (BOOL)_allowsPhysicalCaptureInteraction
{
  uint64_t v2 = [MEMORY[0x263EFFA40] standardUserDefaults];
  char v3 = [v2 BOOLForKey:@"PLIgnoreVolumeButtons"];

  return v3 ^ 1;
}

- (void)_handlePhysicalButtonPressed:(int64_t)a3
{
  if ([(CAMViewfinderViewController *)self _allowsPhysicalCaptureInteraction])
  {
    unint64_t v5 = [(CAMViewfinderViewController *)self _primaryShutterControl];
    int v6 = [v5 isEnabled];
    char v7 = [v5 isTracking];
    if (v6 && (v7 & 1) == 0)
    {
      uint64_t v8 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_2099F8000, v8, OS_LOG_TYPE_DEFAULT, "Physical shutter button pressed", v15, 2u);
      }

      [(CAMViewfinderViewController *)self _setCurrentlyPressedButton:+[CAMViewfinderViewController _pressTypeForCaptureButton:a3]];
      [v5 setHighlighted:1];
      [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Physical capture button pressed"];
      uint64_t v9 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

      if (v9)
      {
        uint64_t v10 = 0;
        switch(a3)
        {
          case 1:
            uint64_t v12 = +[CAMCaptureCapabilities capabilities];
            if ((objc_msgSend(v12, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice")) & 1) == 0)
            {

              goto LABEL_8;
            }
            uint64_t v13 = +[CAMUserPreferences preferences];
            int v14 = [v13 shouldUseVolumeUpBurst];

            if (!v14
              || [(CAMViewfinderViewController *)self isDisablingMultipleCaptureFeatures])
            {
              goto LABEL_8;
            }
            uint64_t v10 = 2;
            break;
          case 2:
          case 4:
          case 5:
          case 6:
LABEL_8:
            uint64_t v10 = 1;
            break;
          default:
            break;
        }
        int v11 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
        [v11 externalButtonPressedWithBehavior:v10];
      }
      else
      {
        int v11 = [(CAMViewfinderViewController *)self _shutterButton];
        [(CAMViewfinderViewController *)self _handleShutterButtonPressed:v11];
      }
    }
  }
}

- (void)_handlePhysicalButtonReleased:(int64_t)a3
{
  if ([(CAMViewfinderViewController *)self _allowsPhysicalCaptureInteraction]
    && [(CAMViewfinderViewController *)self _capturingFromPhysicalButton])
  {
    unint64_t v4 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Physical capture button released", v8, 2u);
    }

    unint64_t v5 = [(CAMViewfinderViewController *)self _primaryShutterControl];
    [v5 setHighlighted:0];
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Physical capture button released"];
    int v6 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

    if (v6)
    {
      char v7 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      [v7 externalButtonReleased];
    }
    else
    {
      char v7 = [(CAMViewfinderViewController *)self _shutterButton];
      [(CAMViewfinderViewController *)self _handleShutterButtonReleased:v7];
    }

    [(CAMViewfinderViewController *)self _setCurrentlyPressedButton:-1];
  }
}

- (void)_handlePhysicalButtonCancelled:(int64_t)a3
{
  if ([(CAMViewfinderViewController *)self _allowsPhysicalCaptureInteraction]
    && [(CAMViewfinderViewController *)self _capturingFromPhysicalButton])
  {
    unint64_t v4 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Physical capture button cancelled", v8, 2u);
    }

    unint64_t v5 = [(CAMViewfinderViewController *)self _primaryShutterControl];
    [v5 setHighlighted:0];
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Physical capture button cancelled"];
    int v6 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

    if (v6)
    {
      char v7 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      [v7 externalButtonCancelled];
    }
    else
    {
      char v7 = [(CAMViewfinderViewController *)self _shutterButton];
      [(CAMViewfinderViewController *)self _handleShutterButtonCancelled:v7];
    }

    [(CAMViewfinderViewController *)self _setCurrentlyPressedButton:-1];
  }
}

- (void)handleVolumeButtonPressed
{
}

- (void)handleVolumeButtonReleased
{
}

- (void)cameraOverlayConnection:(id)a3 didChangeOverlayVisible:(BOOL)a4 activeControlIdentifier:(id)a5
{
  BOOL v5 = a4;
  BOOL v7 = a4;
  [(CAMViewfinderViewController *)self _setCurrentHalfPressSpotlight:a4];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  uint64_t v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v8 setSpotlightControl:v7 animated:1];

  uint64_t v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v9 setSystemOverlayVisible:v5 animated:1];

  [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Spotlight changed"];
}

- (void)cameraOverlayConnection:(id)a3 didChangeValue:(id)a4 forControlIdentifier:(id)a5
{
  id v11 = a4;
  id v7 = a5;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;
  if ([v7 isEqualToString:@"zoom"])
  {
    uint64_t v10 = [(CAMViewfinderViewController *)self _captureController];
    [v10 isCapturingVideo];

    [v9 doubleValue];
    -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:updateOverlay:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:updateOverlay:", 3, 0, 0);
  }
  else if ([v7 isEqualToString:@"exposure"])
  {
    [v9 doubleValue];
    -[CAMViewfinderViewController _handleUserChangedToExposureSliderBias:updateSystemOverlayValues:](self, "_handleUserChangedToExposureSliderBias:updateSystemOverlayValues:", 0);
  }
  else if ([v7 isEqualToString:@"aperture"])
  {
    [v11 doubleValue];
    -[CAMViewfinderViewController _handleUserChangedToApertureValue:](self, "_handleUserChangedToApertureValue:");
  }
}

- (void)cameraOverlayConnection:(id)a3 didChangeStatus:(unint64_t)a4
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  BOOL v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = CAMStringForOverlayServiceConnectionStatus();
    int v7 = 138543362;
    uint64_t v8 = v6;
    _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "Overlay connection output status %{public}@", (uint8_t *)&v7, 0xCu);
  }
  [(CAMViewfinderViewController *)self _updateOverlayConnection];
}

- (void)cameraOverlayConnection:(id)a3 didApplyControlUpdate:(id)a4
{
  id v5 = a4;
  id v10 = [v5 controlIdentifier];
  [v5 floatValue];
  float v7 = v6;

  if ([v10 isEqualToString:@"zoom"])
  {
    uint64_t v8 = [(CAMViewfinderViewController *)self _captureController];
    if ([v8 isCapturingVideo]) {
      double v9 = 0.5;
    }
    else {
      double v9 = 0.25;
    }

    [(CAMViewfinderViewController *)self _changeToZoomFactor:3 rampDuration:0 zoomRampTuning:0 shouldAnimate:v7 updateOverlay:v9];
  }
  else if ([v10 isEqualToString:@"exposure"])
  {
    [(CAMViewfinderViewController *)self _handleUserChangedToExposureSliderBias:0 updateSystemOverlayValues:v7];
  }
  else if ([v10 isEqualToString:@"aperture"])
  {
    [(CAMViewfinderViewController *)self _handleUserChangedToApertureValue:v7];
  }
}

- (NSDictionary)_overlayControls
{
  void v24[4] = *MEMORY[0x263EF8340];
  overlayControls = self->__overlayControls;
  if (overlayControls)
  {
    char v3 = overlayControls;
  }
  else
  {
    id v5 = (void *)[objc_alloc(MEMORY[0x263F30758]) initWithIdentifier:@"zoom" sliderType:5 captureUniqueID:@"device"];
    float v6 = (void *)[objc_alloc(MEMORY[0x263F30758]) initWithIdentifier:@"exposure" sliderType:1 captureUniqueID:@"device"];
    id v7 = objc_alloc(MEMORY[0x263F30738]);
    uint64_t v8 = [MEMORY[0x263F30688] validApertureValues];
    uint64_t v22 = (void *)[v7 initWithValues:v8];

    id v9 = objc_alloc(MEMORY[0x263F30738]);
    id v10 = [MEMORY[0x263F30688] validApertureValues];
    id v11 = (void *)[v9 initWithValues:v10];

    uint64_t v12 = (void *)[objc_alloc(MEMORY[0x263F30758]) initWithIdentifier:@"aperture" title:@"APERTURE" imageName:@"f.cursive" rangeScale:0 valueRange:v22 primaryValues:v11];
    uint64_t v13 = (void *)[objc_alloc(MEMORY[0x263F30750]) initWithIdentifier:@"wine" title:@"wine" imageName:@"wineglass" valueTitles:&unk_26BDDFD40];
    int64_t v21 = v5;
    int v14 = [v5 identifier];
    v23[0] = v14;
    v24[0] = v5;
    uint64_t v15 = [v6 identifier];
    v23[1] = v15;
    v24[1] = v6;
    uint64_t v16 = [v12 identifier];
    id v23[2] = v16;
    v24[2] = v12;
    uint64_t v17 = [v13 identifier];
    v23[3] = v17;
    v24[3] = v13;
    char v18 = [NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:4];
    int64_t v19 = self->__overlayControls;
    self->__overlayControls = v18;

    char v3 = self->__overlayControls;
  }
  return v3;
}

- (id)_initialUpdatesForControls:(id)a3
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v21 = [MEMORY[0x263EFF980] array];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  obuint64_t j = v4;
  uint64_t v5 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v23;
    uint64_t v19 = *(void *)v23;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v22 + 1) + 8 * v8);
        id v10 = [v9 identifier];
        if ([v10 isEqualToString:@"zoom"])
        {
          [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
LABEL_8:
          *(float *)&double v11 = v11;
          uint64_t v12 = [v9 updateWithFloatValue:v11];
LABEL_9:
          uint64_t v13 = (void *)v12;
          goto LABEL_12;
        }
        if ([v10 isEqualToString:@"exposure"])
        {
          int v14 = [(CAMViewfinderViewController *)self _exposureBiasesByMode];
          uint64_t v15 = objc_msgSend(NSNumber, "numberWithInteger:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
          uint64_t v16 = [v14 objectForKeyedSubscript:v15];
          [v16 floatValue];
          uint64_t v13 = objc_msgSend(v9, "updateWithFloatValue:");

          uint64_t v7 = v19;
        }
        else
        {
          if ([v10 isEqualToString:@"aperture"])
          {
            [(CAMViewfinderViewController *)self _portraitModeApertureValue];
            goto LABEL_8;
          }
          if ([v10 isEqualToString:@"wine"])
          {
            uint64_t v12 = [v9 updateWithIndexValue:0];
            goto LABEL_9;
          }
          uint64_t v13 = 0;
        }
LABEL_12:
        [v21 addObject:v13];

        ++v8;
      }
      while (v6 != v8);
      uint64_t v17 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
      uint64_t v6 = v17;
    }
    while (v17);
  }

  return v21;
}

- (id)_legacyOverlayControls
{
  uint64_t v2 = [MEMORY[0x263EFF9A0] dictionary];
  char v3 = (void *)[objc_alloc(MEMORY[0x263F30748]) initWithIdentifier:@"zoom"];
  [v3 setRangeScale:1];
  [v3 setTitle:@"ZOOM"];
  [v3 setImageName:@"square.arrowtriangle.4.outward"];
  [v3 setCaptureDeviceUniqueID:@"avCaptureDevice"];
  [v3 setCaptureDeviceProperty:1];
  id v4 = (void *)[objc_alloc(MEMORY[0x263F30730]) initWithMinimum:1.0 maximum:30.0];
  [v3 setValueRange:v4];

  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263F30738]) initWithValues:&unk_26BDDFD58];
  [v3 setPrimaryValues:v5];

  uint64_t v6 = [v3 identifier];
  [v2 setObject:v3 forKeyedSubscript:v6];

  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x263F30748]) initWithIdentifier:@"exposure"];
  [v7 setTitle:@"EXPOSURE"];
  [v7 setImageName:@"plusminus.circle"];
  [v7 setCaptureDeviceUniqueID:@"avCaptureDevice"];
  [v7 setCaptureDeviceProperty:2];
  uint64_t v8 = (void *)[objc_alloc(MEMORY[0x263F30738]) initWithMinimum:-2.0 maximum:2.0 step:0.333333333];
  [v7 setValueRange:v8];

  id v9 = (void *)[objc_alloc(MEMORY[0x263F30738]) initWithMinimum:-2.0 maximum:2.0 step:1.0];
  [v7 setPrimaryValues:v9];

  id v10 = [v7 identifier];
  [v2 setObject:v7 forKeyedSubscript:v10];

  double v11 = (void *)[objc_alloc(MEMORY[0x263F30748]) initWithIdentifier:@"aperture"];
  [v11 setTitle:@"APERTURE"];
  [v11 setImageName:@"f.cursive"];
  id v12 = objc_alloc(MEMORY[0x263F30738]);
  uint64_t v13 = [MEMORY[0x263F30688] validApertureValues];
  int v14 = (void *)[v12 initWithValues:v13];
  [v11 setValueRange:v14];

  id v15 = objc_alloc(MEMORY[0x263F30738]);
  uint64_t v16 = [MEMORY[0x263F30688] validApertureValues];
  uint64_t v17 = (void *)[v15 initWithValues:v16];
  [v11 setPrimaryValues:v17];

  char v18 = [v11 identifier];
  [v2 setObject:v11 forKeyedSubscript:v18];

  uint64_t v19 = (void *)[objc_alloc(MEMORY[0x263F30748]) initWithIdentifier:@"wine"];
  [v19 setTitle:@"WINE"];
  [v19 setImageName:@"wineglass"];
  uint64_t v20 = (void *)[objc_alloc(MEMORY[0x263F30760]) initWithTitles:&unk_26BDDFD70];
  [v19 setValueRange:v20];

  id v21 = [v19 identifier];
  [v2 setObject:v19 forKeyedSubscript:v21];

  return v2;
}

- (id)_overlayValuesForControls:(id)a3
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v4 = a3;
  id v27 = [MEMORY[0x263EFF9A0] dictionary];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = @"zoom";
    unint64_t v9 = 0x263F08000uLL;
    uint64_t v10 = *(void *)v29;
    double v11 = @"exposure";
    do
    {
      uint64_t v12 = 0;
      uint64_t v26 = v7;
      do
      {
        if (*(void *)v29 != v10) {
          objc_enumerationMutation(v5);
        }
        uint64_t v13 = objc_msgSend(*(id *)(*((void *)&v28 + 1) + 8 * v12), "identifier", v26);
        if ([v13 isEqualToString:v8])
        {
          int v14 = *(void **)(v9 + 2584);
          [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
          id v15 = objc_msgSend(v14, "numberWithDouble:");
          [v27 setObject:v15 forKeyedSubscript:v13];
LABEL_10:

          goto LABEL_11;
        }
        if ([v13 isEqualToString:v11])
        {
          id v15 = [(CAMViewfinderViewController *)self _exposureBiasesByMode];
          uint64_t v16 = v10;
          uint64_t v17 = v11;
          char v18 = v8;
          id v19 = v5;
          uint64_t v20 = objc_msgSend(*(id *)(v9 + 2584), "numberWithInteger:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
          id v21 = [v15 objectForKeyedSubscript:v20];
          [v27 setObject:v21 forKeyedSubscript:v13];

          unint64_t v9 = 0x263F08000;
          id v5 = v19;
          uint64_t v8 = v18;
          double v11 = v17;
          uint64_t v10 = v16;
          uint64_t v7 = v26;
          goto LABEL_10;
        }
        if ([v13 isEqualToString:@"aperture"])
        {
          long long v22 = NSNumber;
          [(CAMViewfinderViewController *)self _portraitModeApertureValue];
          long long v23 = objc_msgSend(v22, "numberWithDouble:");
          [v27 setObject:v23 forKeyedSubscript:v13];

          unint64_t v9 = 0x263F08000;
        }
        else if ([v13 isEqualToString:@"wine"])
        {
          [v27 setObject:@"CABERNET" forKeyedSubscript:v13];
        }
LABEL_11:

        ++v12;
      }
      while (v7 != v12);
      uint64_t v24 = [v5 countByEnumeratingWithState:&v28 objects:v32 count:16];
      uint64_t v7 = v24;
    }
    while (v24);
  }

  return v27;
}

- (void)_updateFocusAndExposureLockBadgeAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldHideFocusAndExposureLockBadgeForGraphConfiguration:v5];

  if (!v6)
  {
    uint64_t v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    uint64_t v8 = [v7 badgeTray];
    unint64_t v9 = [v8 focusLockBadge];
    uint64_t v10 = v9;
    if (v9)
    {
      id v11 = v9;
    }
    else
    {
      id v11 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadge];
    }
    uint64_t v12 = v11;

    objc_msgSend(v12, "setFocusLockType:", -[CAMViewfinderViewController _focusAndExposureLockBadgeTypeForCurrentState](self, "_focusAndExposureLockBadgeTypeForCurrentState"));
  }
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:v3];
  uint64_t v13 = [(CAMViewfinderViewController *)self viewfinderView];
  [v13 setNeedsLayout];
  if (v3)
  {
    int v14 = (void *)MEMORY[0x263F82E00];
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __72__CAMViewfinderViewController__updateFocusAndExposureLockBadgeAnimated___block_invoke;
    v15[3] = &unk_263FA0208;
    id v16 = v13;
    [v14 animateWithDuration:2 delay:v15 options:0 animations:0.25 completion:0.0];
  }
}

uint64_t __72__CAMViewfinderViewController__updateFocusAndExposureLockBadgeAnimated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

- (int64_t)_focusAndExposureLockBadgeTypeForCurrentState
{
  BOOL v3 = [(CAMViewfinderViewController *)self _previewViewController];
  id v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v5 = [v4 badgeTray];
  BOOL v6 = [v5 focusLockBadge];
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = [(CAMViewfinderViewController *)self _focusAndExposureLockBadge];
  }
  unint64_t v9 = v8;

  uint64_t v10 = [v9 focusLockType];
  int v11 = [v3 isFocusLockedByUser];
  int v12 = [v3 isExposureLockedByUser];
  int v13 = [v3 isFocusLockedOnCinematicSubject];
  uint64_t v14 = 2;
  if ((v12 & v11) == 0) {
    uint64_t v14 = 0;
  }
  if (v12) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v10;
  }
  if (!v11) {
    uint64_t v14 = v15;
  }
  if (v13) {
    int64_t v16 = 3;
  }
  else {
    int64_t v16 = v14;
  }

  return v16;
}

void __57__CAMViewfinderViewController__setupBurstTimerWithDelay___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleBurstTimerFired:v3];
  [v3 invalidate];
}

- (void)_handleBurstTimerFired:(id)a3
{
  id v4 = a3;
  id v5 = [(CAMViewfinderViewController *)self _currentBurstTimer];

  if (v5 == v4)
  {
    BOOL v6 = +[CAMCaptureCapabilities capabilities];
    char v7 = [v6 captureOnTouchDown];

    id v8 = [(CAMViewfinderViewController *)self _captureController];
    int v9 = [v8 isCapturingStillImage];

    if (!v9 || (v7 & 1) == 0)
    {
      uint64_t v10 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v12 = 0;
        _os_log_impl(&dword_2099F8000, v10, OS_LOG_TYPE_DEFAULT, "Starting burst because no still image was being captured when burst timer fired", v12, 2u);
      }

      [(CAMViewfinderViewController *)self _beginCapturingBurst];
    }
    int v11 = [(CAMViewfinderViewController *)self _feedbackController];
    [v11 prepareDiscreteFeedback:1];
  }
}

- (void)_beginCapturingBurst
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v3 = +[CAMCaptureCapabilities capabilities];
  int v4 = objc_msgSend(v3, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  if (v4)
  {
    if ([(CAMViewfinderViewController *)self _isCapturingFromTimer])
    {
      int64_t v5 = [(CAMViewfinderViewController *)self _maximumBurstLengthForTimer];
      BOOL v6 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134217984;
        int64_t v10 = v5;
        _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "Starting burst capture of %ld shots for timer", (uint8_t *)&v9, 0xCu);
      }
    }
    else
    {
      BOOL v6 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "Starting burst capture", (uint8_t *)&v9, 2u);
      }
      int64_t v5 = 0;
    }

    char v7 = [(CAMViewfinderViewController *)self _stillImageCaptureRequestWithCurrentSettingsAsBurst:1 maximumLength:v5];
    id v8 = [(CAMViewfinderViewController *)self _generateAnalyticsCaptureEventWithRequest:v7 burst:1];
    [v7 setAnalyticsEvent:v8];

    [(CAMViewfinderViewController *)self _startCapturingBurstWithRequest:v7];
  }
}

- (int64_t)_maximumBurstLengthForTimer
{
  id v3 = +[CAMCaptureCapabilities capabilities];
  objc_msgSend(v3, "captureIntervalForDevice:", -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
  if (v4 * 10.0 <= 2.0) {
    int64_t v5 = 10;
  }
  else {
    int64_t v5 = 5;
  }

  return v5;
}

- (void)_startCapturingBurstWithRequest:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  id v12 = 0;
  char v6 = [v5 startCapturingBurstWithRequest:v4 error:&v12];
  id v7 = v12;
  if (v6)
  {
    [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:1];
    [(CAMViewfinderViewController *)self _updateResolvedLowLightModeAnimated:1];
    [(CAMViewfinderViewController *)self _updatePreviewSemanticStyleAnimated:1];
    id v8 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    int v9 = [v4 captureRequest];
    int64_t v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [v8 didCaptureWithRequest:v9 currentConfiguration:v10];
  }
  else
  {
    uint64_t v11 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      -[CAMViewfinderViewController _startCapturingBurstWithRequest:]();
    }

    id v8 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v8 resetAnimated:1];
  }

  [(CAMViewfinderViewController *)self _updateUserPreferencesForFilterUsage];
  [(CAMViewfinderViewController *)self _updateFilterScrubberAfterCapture];
}

- (void)_stopCapturingBurst
{
  id v4 = [(CAMViewfinderViewController *)self _captureController];
  [v4 stopCapturingBurst];
  id v3 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v3 processPendingBursts];
  [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:1];
  [(CAMViewfinderViewController *)self _updateResolvedLowLightModeAnimated:1];
  [(CAMViewfinderViewController *)self _updatePreviewSemanticStyleAnimated:1];
  [(CAMViewfinderViewController *)self _updateSmartStyleOnSession];
}

- (void)captureControllerWillStartCapturingBurst:(id)a3
{
  [(CAMViewfinderViewController *)self _updateSmartStyleOnSession];
  id v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = objc_msgSend(v4, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  if (v5)
  {
    [(CAMViewfinderViewController *)self _showBurstIndicatorView];
    char v6 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v6 burstCaptureWillStart];
  }
  [(CAMPreviewViewController *)self->__previewViewController notifyWillStartCapturing];
  [(CAMViewfinderViewController *)self _updatePreviewControllerPortraitStatus];
  [(CAMViewfinderViewController *)self _beginDisablingInterfaceAutorotation];
}

- (void)captureControllerDidReachMaximumBurstLength:(id)a3
{
  if ([(CAMViewfinderViewController *)self _isCapturingFromTimer])
  {
    [(CAMViewfinderViewController *)self _stopCountdownForCaptureTimer];
  }
}

- (void)captureControllerDidStopCapturingBurst:(id)a3
{
  id v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = objc_msgSend(v4, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  if (v5)
  {
    [(CAMViewfinderViewController *)self _hideBurstIndicatorView];
    char v6 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v6 burstCaptureDidStop];
  }
  [(CAMPreviewViewController *)self->__previewViewController notifyDidStopCapture];
  [(CAMViewfinderViewController *)self _updatePreviewControllerPortraitStatus];
  [(CAMViewfinderViewController *)self _endDisablingInterfaceAutorotation];
}

- (void)captureControllerWillStartPlayingBurstEndSound:(id)a3
{
  [(CAMViewfinderViewController *)self _setBurstEndSoundPlaying:1];
  id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updatePairedVideoCaptureOnControllerForGraphConfiguration:v4 isShowingCameraRoll:[(CAMViewfinderViewController *)self _isShowingCameraRoll]];
}

- (void)captureControllerDidStopPlayingBurstEndSound:(id)a3
{
  [(CAMViewfinderViewController *)self _setBurstEndSoundPlaying:0];
  [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:0 animated:1];
  id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updatePairedVideoCaptureOnControllerForGraphConfiguration:v4 isShowingCameraRoll:[(CAMViewfinderViewController *)self _isShowingCameraRoll]];
}

- (void)_showBurstIndicatorView
{
  id v3 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

  if (v3)
  {
    id v4 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v4 resetCounter];
  }
  else
  {
    id v4 = [(CAMViewfinderViewController *)self _burstIndicatorView];
    [v4 reset];
    [v4 setAlpha:1.0];
    [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:0];
  }
}

- (void)_hideBurstIndicatorView
{
  id v3 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

  if (!v3)
  {
    id v4 = [(CAMViewfinderViewController *)self _burstIndicatorView];
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke;
    v6[3] = &unk_263FA2180;
    id v7 = v4;
    id v8 = self;
    id v5 = v4;
    [v5 finishIncrementingWithCompletionHandler:v6];
  }
}

void __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F82E00];
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  v5[2] = __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke_2;
  v5[3] = &unk_263FA0208;
  id v6 = *(id *)(a1 + 32);
  [v2 animateWithDuration:327682 delay:v5 options:0 animations:0.415 completion:0.395];
  dispatch_time_t v3 = dispatch_time(0, (uint64_t)((0.81 - 0.25) * 1000000000.0));
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  v4[2] = __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke_3;
  v4[3] = &unk_263FA0208;
  void v4[4] = *(void *)(a1 + 40);
  dispatch_after(v3, MEMORY[0x263EF83A0], v4);
}

uint64_t __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

uint64_t __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke_3(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateBadgeVisibilityAnimated:1];
}

- (void)_performCaptureAnimationWithDuration:(double)a3
{
  id v6 = [MEMORY[0x263F15808] functionWithName:*MEMORY[0x263F15EA0]];
  id v5 = [MEMORY[0x263F825C8] blackColor];
  [(CAMViewfinderViewController *)self _performCaptureAnimationWithDuration:v6 curve:v5 color:1 fadeOut:a3];
}

- (void)_performCaptureAnimationWithDuration:(double)a3 curve:(id)a4 color:(id)a5 fadeOut:(BOOL)a6
{
  BOOL v6 = a6;
  id v10 = a5;
  id v11 = a4;
  id v12 = [(CAMViewfinderViewController *)self _previewViewController];
  int v13 = [v12 previewView];

  id v14 = objc_alloc(MEMORY[0x263F82E00]);
  [v13 bounds];
  uint64_t v15 = objc_msgSend(v14, "initWithFrame:");
  [v15 setBackgroundColor:v10];

  [v13 addSubview:v15];
  if (v6) {
    double v16 = 0.0;
  }
  else {
    double v16 = 1.0;
  }
  uint64_t v17 = [v15 layer];
  char v18 = [MEMORY[0x263F15760] animationWithKeyPath:@"opacity"];
  [v18 setFromValue:&unk_26BDDF238];
  id v19 = [NSNumber numberWithDouble:v16];
  [v18 setToValue:v19];

  [v17 convertTime:0 fromLayer:CACurrentMediaTime()];
  [v18 setBeginTime:v20 + 0.075];
  UIAnimationDragCoefficient();
  [v18 setDuration:v21 * a3];
  [v18 setTimingFunction:v11];

  [v18 setFillMode:*MEMORY[0x263F15AA8]];
  long long v22 = objc_alloc_init(CAMAnimationDelegate);
  uint64_t v25 = MEMORY[0x263EF8330];
  uint64_t v26 = 3221225472;
  id v27 = __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke;
  long long v28 = &unk_263FA1328;
  BOOL v30 = v6;
  id v29 = v15;
  id v23 = v15;
  [(CAMAnimationDelegate *)v22 setCompletion:&v25];
  objc_msgSend(v18, "setDelegate:", v22, v25, v26, v27, v28);
  [v17 addAnimation:v18 forKey:@"opacityAnimation"];
  *(float *)&double v24 = v16;
  [v17 setOpacity:v24];
  [(CAMViewfinderViewController *)self _setCaptureAnimationPreviewOverlay:v23];
}

void __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    [v2 removeFromSuperview];
  }
  else
  {
    dispatch_time_t v3 = (void *)MEMORY[0x263F82E00];
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke_2;
    v6[3] = &unk_263FA0208;
    id v7 = *(id *)(a1 + 32);
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 3221225472;
    v4[2] = __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke_3;
    v4[3] = &unk_263FA0430;
    id v5 = *(id *)(a1 + 32);
    [v3 animateWithDuration:v6 animations:v4 completion:0.25];
  }
}

uint64_t __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

uint64_t __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke_3(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeFromSuperview];
}

- (void)_cancelCaptureAnimation
{
  uint64_t v2 = [(CAMViewfinderViewController *)self _captureAnimationPreviewOverlay];
  id v3 = [v2 layer];

  [v3 removeAllAnimations];
}

- (BOOL)_isScreenExternalDisplay
{
  uint64_t v2 = [(CAMViewfinderViewController *)self view];
  id v3 = [v2 window];
  id v4 = [v3 screen];
  char v5 = [v4 _isEmbeddedScreen] ^ 1;

  return v5;
}

- (void)setAutorotationStyle:(int64_t)a3
{
  [(CAMViewfinderViewController *)self _setInternalAutorotationStyle:a3];
  [(CAMViewfinderViewController *)self _updateForCurrentConfiguration];
}

- (BOOL)_shouldUpdateCaptureOrientation
{
  uint64_t v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingVideo] ^ 1;

  return v3;
}

- (void)_captureOrientationChanged:(id)a3
{
  int64_t v4 = +[CAMApplication appOrPlugInState];
  id v18 = [(CAMViewfinderViewController *)self _captureController];
  if ([(CAMViewfinderViewController *)self _shouldUpdateCaptureOrientation])
  {
    [(CAMViewfinderViewController *)self _updateUIForCaptureOrientationAnimated:v4 == 0];
    char v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v6 = [(CAMViewfinderViewController *)self _isZoomAllowedForGraphConfiguration:v5];

    id v7 = +[CAMCaptureCapabilities capabilities];
    int v8 = objc_msgSend(v7, "shouldAdjustZoomOnOrientationChangeForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

    if (v6 && v8)
    {
      int v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      id v10 = [(CAMViewfinderViewController *)self _motionController];
      -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:captureOrientation:](self, "_defaultZoomFactorForGraphConfiguration:captureOrientation:", v9, [v10 captureOrientation]);
      double v12 = v11;

      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      if (v13 != v12) {
        [(CAMViewfinderViewController *)self _changeToZoomFactor:0 rampDuration:v4 == 0 zoomRampTuning:v12 shouldAnimate:0.5];
      }
      [(CAMViewfinderViewController *)self _setLastZoomInteractionType:0];
    }
  }
  else
  {
    id v14 = [(CAMViewfinderViewController *)self _motionController];
    uint64_t v15 = [v14 captureOrientation];
    if (v15) {
      [v18 changeToVideoRecordingCaptureOrientation:v15];
    }
  }
  [(CAMViewfinderViewController *)self _updateHomeIndicatorBehaviorsForCaptureOrientation];
  double v16 = [(CAMViewfinderViewController *)self _tipManager];
  uint64_t v17 = [(CAMViewfinderViewController *)self _motionController];
  objc_msgSend(v16, "setIsPortraitOrientation:", objc_msgSend(v17, "captureOrientation") == 1);
}

- (void)_deviceOrientationChanged:(id)a3
{
  int64_t v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v5 = [(CAMViewfinderViewController *)self _motionController];
  objc_msgSend(v4, "setDeviceOrientation:animated:", objc_msgSend(v5, "deviceOrientation"), 1);

  BOOL v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateSpatialCaptureUIStateForGraphConfiguration:v6 animated:1];

  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
}

uint64_t __70__CAMViewfinderViewController__updateUIForCaptureOrientationAnimated___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) _applyTransformsForAutorotationStyle:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 40);
  return [v2 setNeedsLayout];
}

uint64_t __70__CAMViewfinderViewController__updateUIForCaptureOrientationAnimated___block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 layoutIfNeeded];
}

- (void)_beginDisablingInterfaceAutorotation
{
  id v3 = [(CAMViewfinderViewController *)self view];
  uint64_t v2 = [v3 window];
  [v2 beginDisablingInterfaceAutorotation];
}

- (void)_endDisablingInterfaceAutorotation
{
  id v3 = [(CAMViewfinderViewController *)self view];
  uint64_t v2 = [v3 window];
  [v2 endDisablingInterfaceAutorotation];
}

- (int64_t)_topBarStyleForGraphConfiguration:(id)a3 capturing:(BOOL)a4
{
  return -[CAMViewfinderViewController _shouldApplyTopBarRotationForGraphConfiguration:](self, "_shouldApplyTopBarRotationForGraphConfiguration:", a3, a4);
}

- (void)_prepareTopBarForOrientationChangeDuringConfiguration
{
  id v3 = [(CAMViewfinderViewController *)self _topBar];
  int64_t v4 = [v3 snapshotViewAfterScreenUpdates:0];
  [v3 bounds];
  objc_msgSend(v4, "setBounds:");
  [v3 center];
  objc_msgSend(v4, "setCenter:");
  if (v3) {
    [v3 transform];
  }
  else {
    memset(v15, 0, sizeof(v15));
  }
  [v4 setTransform:v15];
  char v5 = [v3 superview];
  [v5 addSubview:v4];

  [v3 setAlpha:0.0];
  BOOL v6 = (void *)MEMORY[0x263F82E00];
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __84__CAMViewfinderViewController__prepareTopBarForOrientationChangeDuringConfiguration__block_invoke;
  v13[3] = &unk_263FA0208;
  id v14 = v4;
  uint64_t v8 = MEMORY[0x263EF8330];
  uint64_t v9 = 3221225472;
  id v10 = __84__CAMViewfinderViewController__prepareTopBarForOrientationChangeDuringConfiguration__block_invoke_2;
  double v11 = &unk_263FA0430;
  id v12 = v14;
  id v7 = v14;
  [v6 animateWithDuration:327682 delay:v13 options:&v8 animations:0.3 completion:0.0];
  -[CAMViewfinderViewController _setPerformingTopBarOrientationChange:](self, "_setPerformingTopBarOrientationChange:", 1, v8, v9, v10, v11);
}

uint64_t __84__CAMViewfinderViewController__prepareTopBarForOrientationChangeDuringConfiguration__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

uint64_t __84__CAMViewfinderViewController__prepareTopBarForOrientationChangeDuringConfiguration__block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeFromSuperview];
}

- (void)_handleImageWellPressed:(id)a3
{
}

- (void)_handleImageWellReleased:(id)a3
{
  [(CAMViewfinderViewController *)self _presentCameraRollViewControllerIfPossibleAnimated:1 interactive:0];
  [(CAMViewfinderViewController *)self stopMonitoringForAccidentalLaunchIfNeeded];
}

- (BOOL)_shouldDeferMediaLoadingForGraphConfiguration:(id)a3
{
  return ([a3 mode] & 0xFFFFFFFFFFFFFFFELL) == 6;
}

- (void)_presentCameraRollViewControllerIfPossibleAnimated:(BOOL)a3 interactive:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  id v7 = [(CAMViewfinderViewController *)self _cameraRollController];
  if ([v7 canPresentCameraRollViewController])
  {
    if ([(CAMViewfinderViewController *)self _externalStorageOutputEnabled]
      && +[CAMFrameworkUtilities isPasscodeLocked])
    {
      objc_initWeak(&location, self);
      v8[0] = MEMORY[0x263EF8330];
      v8[1] = 3221225472;
      v8[2] = __94__CAMViewfinderViewController__presentCameraRollViewControllerIfPossibleAnimated_interactive___block_invoke;
      v8[3] = &unk_263FA21A8;
      objc_copyWeak(&v9, &location);
      BOOL v10 = v5;
      BOOL v11 = v4;
      [(CAMViewfinderViewController *)self _requestPasscodeUnlockForCameraRollController:v7 forAction:0 completionBlock:v8];
      objc_destroyWeak(&v9);
      objc_destroyWeak(&location);
    }
    else
    {
      [(CAMViewfinderViewController *)self _presentCameraRollViewControllerAnimated:v5 interactive:v4];
    }
  }
}

void __94__CAMViewfinderViewController__presentCameraRollViewControllerIfPossibleAnimated_interactive___block_invoke(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = (id *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    BOOL v5 = [WeakRetained _connectedStorage];

    if (v5)
    {
      id v6 = objc_loadWeakRetained(v3);
      [v6 _presentCameraRollViewControllerAnimated:*(unsigned __int8 *)(a1 + 40) interactive:*(unsigned __int8 *)(a1 + 41)];
    }
  }
}

- (void)_presentCameraRollViewControllerAnimated:(BOOL)a3 interactive:(BOOL)a4
{
  BOOL v22 = a3;
  BOOL v23 = a4;
  uint64_t v32 = *MEMORY[0x263EF8340];
  BOOL v5 = [(CAMViewfinderViewController *)self _motionController];
  [v5 setForceLandscapeOrientation:0];

  double v24 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v21 = [(CAMViewfinderViewController *)self _shouldDeferMediaLoadingForGraphConfiguration:v24];
  v28[0] = 0;
  v28[1] = v28;
  CGAffineTransform v28[2] = 0x2020000000;
  char v29 = 0;
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2020000000;
  char v27 = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __84__CAMViewfinderViewController__presentCameraRollViewControllerAnimated_interactive___block_invoke;
  aBlock[3] = &unk_263FA21D0;
  void aBlock[4] = v26;
  void aBlock[5] = v28;
  id v6 = (uint64_t (**)(void))_Block_copy(aBlock);
  unint64_t v7 = [(CAMViewfinderViewController *)self supportedInterfaceOrientations];
  uint64_t v8 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v9 = [v8 captureOrientation];

  BOOL v10 = [(CAMViewfinderViewController *)self view];
  BOOL v11 = [v10 window];
  int v12 = [v11 _windowOwnsInterfaceOrientation];

  int v13 = 0;
  if (v7 == 2 && v9 != 1 && v9 != 2 && ((v12 ^ 1) & 1) == 0) {
    int v13 = v6[2](v6) ^ 1;
  }
  id v14 = [MEMORY[0x263F82670] currentDevice];
  uint64_t v15 = [v14 orientation];
  if (v7 == 2 && v15 == 1 && v9 != 1 && (v6[2](v6) & 1) == 0)
  {
    double v16 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (v9 == 3)
      {
        uint64_t v17 = @"UIInterfaceOrientationLandscapeRight";
      }
      else if (v9 == 4)
      {
        uint64_t v17 = @"UIInterfaceOrientationLandscapeLeft";
      }
      else
      {
        uint64_t v17 = @"UIInterfaceOrientationPortraitUpsideDown";
        if (v9 != 2) {
          uint64_t v17 = 0;
        }
      }
      *(_DWORD *)buf = 138543362;
      long long v31 = v17;
      _os_log_impl(&dword_2099F8000, v16, OS_LOG_TYPE_DEFAULT, "UIDevice has Portrait orientation, but capture orientation is %{public}@. Applying capture orientation to the device.", buf, 0xCu);
    }

    [v14 setOrientation:v9];
  }
  if (v13) {
    [(id)*MEMORY[0x263F83300] _setStatusBarOrientation:v9];
  }
  id v18 = [(CAMViewfinderViewController *)self _cameraRollController];
  [v18 resetNavigation];
  [v18 presentCameraRollViewControllerAnimated:v22 interactive:v23 deferringStagedMediaLoading:v21];
  [(CAMViewfinderViewController *)self _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:0];
  [(CAMViewfinderViewController *)self _pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:v24 isShowingCameraRoll:1];
  id v19 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  [v19 didPresentCameraRoll];

  double v20 = [(CAMViewfinderViewController *)self cameraRollControllerTestDelegate];
  [v20 viewfinderViewController:self didPresentCameraRoll:v18];

  _Block_object_dispose(v26, 8);
  _Block_object_dispose(v28, 8);
}

uint64_t __84__CAMViewfinderViewController__presentCameraRollViewControllerAnimated_interactive___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24))
  {
    uint64_t v3 = a1 + 40;
  }
  else
  {
    *(unsigned char *)(v2 + 24) = 1;
    BOOL v4 = CAMIsDeviceOrientationLocked();
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v3 = a1 + 40;
    *(unsigned char *)(*(void *)(v5 + 8) + 24) = v4;
  }
  return *(unsigned __int8 *)(*(void *)(*(void *)v3 + 8) + 24);
}

- (void)presentCameraRollViewControllerAnimated:(BOOL)a3 withAction:(unint64_t)a4 selectedAssetIndexFromEnd:(unint64_t)a5
{
  [(CAMViewfinderViewController *)self _presentCameraRollViewControllerAnimated:a3 interactive:1];
  objc_initWeak(&location, self);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = __108__CAMViewfinderViewController_presentCameraRollViewControllerAnimated_withAction_selectedAssetIndexFromEnd___block_invoke;
  v8[3] = &unk_263FA21F8;
  objc_copyWeak(v9, &location);
  v9[1] = (id)a5;
  v9[2] = (id)a4;
  [(CAMViewfinderViewController *)self set_cameraRollControllerAction:v8];
  objc_destroyWeak(v9);
  objc_destroyWeak(&location);
}

void __108__CAMViewfinderViewController_presentCameraRollViewControllerAnimated_withAction_selectedAssetIndexFromEnd___block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));

  if (WeakRetained)
  {
    id v4 = objc_loadWeakRetained(v2);
    uint64_t v5 = [v4 _cameraRollController];

    if (*(void *)(a1 + 40)) {
      objc_msgSend(v5, "setCurrentAssetIndexFromEnd:");
    }
    if (*(void *)(a1 + 48))
    {
      id v6 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 48);
        int v11 = 134217984;
        uint64_t v12 = v7;
        _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "CameraRoll: executing oneup action: %ld", (uint8_t *)&v11, 0xCu);
      }

      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = [v5 oneUpViewController];
      +[CAMViewfinderLockScreenExtensionHelper executeUnlockOneUpAction:v8 on:v9];
    }
    id v10 = objc_loadWeakRetained(v2);
    objc_msgSend(v10, "set_cameraRollControllerAction:", 0);
  }
}

- (BOOL)_shouldResetZoomForChangeFromMode:(int64_t)a3 toMode:(int64_t)a4
{
  BOOL v6 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
  if (a3 == 4 && !a4) {
    return 0;
  }
  if (a3) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = a4 == 4;
  }
  return !v8 && !v6;
}

- (id)_graphConfigurationForChangeToMode:(int64_t)a3 device:(int64_t)a4 fromGraphConfiguration:(id)a5
{
  id v8 = a5;
  uint64_t v9 = +[CAMCaptureCapabilities capabilities];
  uint64_t v10 = [v9 sanitizeDesiredDevice:a4 forMode:a3];
  int64_t v11 = [(CAMViewfinderViewController *)self emulationMode];
  uint64_t v75 = v10;
  if ((unint64_t)(v10 - 1) > 0xA) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = qword_209C794E8[v10 - 1];
  }
  uint64_t v13 = +[CAMUserPreferences preferences];
  uint64_t v67 = [v13 photoEncodingBehavior];
  BOOL v74 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:a3 devicePosition:v12];
  int64_t v14 = [(CAMViewfinderViewController *)self _sanitizedVideoConfigurationForMode:a3 device:v75];
  if ([(CAMViewfinderViewController *)self _trueVideoIsCapturing]
    || [(CAMViewfinderViewController *)self _trueVideoIsTransitioningToCapture])
  {
    int64_t v15 = 0;
    unsigned int v73 = 1;
  }
  else
  {
    int64_t v15 = [(CAMViewfinderViewController *)self _desiredProResVideoMode];
    unsigned int v73 = 0;
  }
  int64_t v70 = v14;
  BOOL v68 = [(CAMViewfinderViewController *)self _wantsExternalStorageOutputEnabledForMode:a3 videoConfiguration:v14 desiredProResVideoMode:v15];
  uint64_t v72 = objc_msgSend(v13, "videoEncodingBehaviorForConfiguration:mode:desiredProResVideoMode:outputToExternalStorage:spatialVideoEnabled:", v14, a3, v15);
  double v16 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  uint64_t v17 = [v16 isCallActive];

  uint64_t v66 = [v13 audioConfigurationForMode:a3 device:v75 emulationMode:v11 duringCall:v17];
  if ([(CAMViewfinderViewController *)self _wantsFilterScrubberVisible]) {
    BOOL v18 = [v8 mode] == a3;
  }
  else {
    BOOL v18 = 0;
  }
  unint64_t v65 = [(CAMViewfinderViewController *)self _previewConfigurationForMode:a3 devicePosition:v12 videoThumbnailOutputEnabled:v18];
  id v19 = +[CAMCaptureCapabilities capabilities];
  char v20 = [v19 portraitInPhotoModeBehavior];

  BOOL v21 = (v20 & 1) != 0
     && [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion];
  long long v64 = [(CAMViewfinderViewController *)self _previewFiltersForMode:a3 device:v75 wantsPhotoModePortraitEffect:v21];
  long long v63 = [v13 videoThumbnailOutputConfigurationForMode:a3 devicePosition:v12];
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  [(CAMViewfinderViewController *)self _resolvePotentiallyConflictingControlsForMode:a3 device:v75 resolvedFlashMode:0 resolvedHDRMode:&v77 resolvedLivePhotoMode:0 resolvedRAWMode:&v76 resolvedPhotoResolution:0];
  char v62 = [v13 isAutoFPSVideoEnabledForMode:a3 device:v75 videoConfiguration:v70 encodingBehavior:v72 outputToExternalStorage:v68 spatialVideoEnabled:v74];
  BOOL v22 = +[CAMCaptureCapabilities capabilities];
  char v61 = [v22 shouldSuspendVideoHDRForHDRMode:v77 captureMode:a3];

  int64_t v60 = [(CAMViewfinderViewController *)self _aspectRatioCropForMode:a3 devicePosition:v12];
  uint64_t v59 = [v9 maxSupportedPhotoQualityPrioritizationForMode:a3 devicePosition:v12];
  char v58 = [v13 mirrorCameraCapturesForDevicePosition:v12 mode:a3];
  if ([v13 rawControlEnabled]) {
    int v56 = [v9 isLinearDNGSupportedForMode:a3];
  }
  else {
    int v56 = 0;
  }
  uint64_t v55 = [v9 semanticStyleSupportForMode:a3 devicePosition:v12];
  BOOL v57 = -[CAMViewfinderViewController _semanticStyleForPreviewWithSupport:](self, "_semanticStyleForPreviewWithSupport:");
  if ([v13 shouldUseContentAwareDistortionCorrection]) {
    char v54 = [v9 isContentAwareDistortionCorrectionSupportedForMode:a3];
  }
  else {
    char v54 = 0;
  }
  if ([v13 responsiveShutterEnabled]) {
    char v53 = [v9 isResponsiveShutterSupportedForMode:a3];
  }
  else {
    char v53 = 0;
  }
  BOOL v23 = +[CAMUserPreferences preferences];
  double v24 = +[CAMCaptureCapabilities capabilities];
  uint64_t v25 = [v23 prefersHDR10BitVideoForCapabilities:v24];

  if ([v9 isVideoStabilizationControlSupportedForMode:a3 device:v75 videoConfiguration:v70 videoEncodingBehavior:v72 trueVideoEnabled:v73 prefersHDR10BitVideo:v25])int64_t v26 = -[CAMViewfinderViewController _desiredVideoStabilizationMode](self, "_desiredVideoStabilizationMode"); {
  else
  }
    int64_t v26 = 0;
  uint64_t v27 = [v13 videoStabilizationStrengthForVideoStabilizationMode:v26 captureMode:a3 spatialVideoEnabled:v74];
  char v52 = v25;
  BYTE2(v38) = v25;
  BYTE1(v38) = v73;
  LOBYTE(v38) = v74;
  long long v71 = v9;
  int v47 = objc_msgSend(v9, "isVideoStabilizationStrength:supportedForMode:device:videoConfiguration:videoEncodingBehavior:outputToExternalStorage:spatialVideoEnabled:trueVideoEnabled:prefersHDR10BitVideo:", v27, a3, v75, v70, v72, v68, v38);
  uint64_t v69 = [v13 maximumPhotoResolutionForMode:a3 device:v75];
  uint64_t v28 = v76;
  uint64_t v51 = [v13 colorSpaceForMode:a3 videoConfiguration:v70 videoEncodingBehavior:v72 spatialVideoEnabled:v74 device:v75];
  char v50 = [v13 shouldUseDepthSuggestionInPhotoMode];
  char v29 = +[CAMUserPreferences preferences];
  if ([v29 isZoomPIPEnabled])
  {
    BOOL v30 = +[CAMCaptureCapabilities capabilities];
    char v49 = [v30 isZoomPIPSupportedForMode:a3 devicePosition:v12];
  }
  else
  {
    char v49 = 0;
  }

  if ([v71 isCustomLensSupportedForMode:a3 device:v75 isTrueVideo:v73])
  {
    double v46 = [v13 customLensGroup];
  }
  else
  {
    double v46 = 0;
  }
  if (v28 == 1) {
    int v31 = v56;
  }
  else {
    int v31 = 0;
  }
  HIDWORD(v45) = v31;
  if (!v47) {
    uint64_t v27 = 0;
  }
  uint64_t v32 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  uint64_t v34 = v33;
  int64_t v35 = [(CAMViewfinderViewController *)self _desiredMacroMode];
  BYTE1(v40) = v74;
  LOBYTE(v40) = [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion];
  int64_t v48 = +[CAMConflictingControlConfiguration resolveDesiredMacroMode:v35 forMode:a3 device:v75 videoConfiguration:v70 videoStabilizationStrength:v27 photoFormat:v32 optionalDepthEffectEnabled:v34 spatialVideoEnabled:v40];
  BYTE2(v45) = v52;
  BYTE1(v45) = v73;
  LOBYTE(v45) = v74;
  BYTE1(v44) = v49;
  LOBYTE(v44) = v50;
  BYTE2(v43) = BYTE4(v45);
  BYTE1(v43) = v53;
  LOBYTE(v43) = v54;
  BYTE1(v42) = v56;
  LOBYTE(v42) = v58;
  BYTE1(v41) = v61;
  LOBYTE(v41) = v62;
  LOBYTE(v39) = [v13 windRemovalEnabledForAudioConfiguration:v66];
  long long v36 = -[CAMCaptureGraphConfiguration initWithCaptureMode:captureDevice:macroMode:videoConfiguration:audioConfiguration:mixAudioWithOthers:windNoiseRemovalEnabled:previewConfiguration:previewSampleBufferVideoFormat:previewFilters:videoThumbnailOutputConfiguration:photoEncodingBehavior:videoEncodingBehavior:enableAutoFPSVideo:videoHDRSuspended:aspectRatioCrop:photoQualityPrioritization:captureMirrored:enableRAWCaptureIfSupported:semanticStyleSupport:previewSemanticStyle:enableContentAwareDistortionCorrection:enableResponsiveShutter:suspendLivePhotoCapture:videoStabilizationStrength:maximumPhotoResolution:colorSpace:enableDepthSuggestion:enableZoomPIP:customLensGroup:enableStereoVideoCapture:trueVideoEnabled:prefersHDR10BitVideo:]([CAMCaptureGraphConfiguration alloc], "initWithCaptureMode:captureDevice:macroMode:videoConfiguration:audioConfiguration:mixAudioWithOthers:windNoiseRemovalEnabled:previewConfiguration:previewSampleBufferVideoFormat:previewFilters:videoThumbnailOutputConfiguration:photoEncodingBehavior:videoEncodingBehavior:enableAutoFPSVideo:videoHDRSuspended:aspectRatioCrop:photoQualityPrioritization:captureMirrored:enableRAWCaptureIfSupported:semanticStyleSupport:previewSemanticStyle:enableContentAwareDistortionCorrection:enableResponsiveShutter:suspendLivePhotoCapture:videoStabilizationStrength:maximumPhotoResolution:colorSpace:enableDepthSuggestion:enableZoomPIP:customLensGroup:enableStereoVideoCapture:trueVideoEnabled:prefersHDR10BitVideo:", a3, v75, v48, v70, v66, [v13 shouldMixAudioWithOthers], v39, v65, 0, v64, v63,
          v67,
          v72,
          v41,
          v60,
          v59,
          v42,
          v55,
          v57,
          v43,
          v27,
          v69,
          v51,
          v44,
          v46,
          v45);

  return v36;
}

- (void)_changeToGraphConfiguration:(id)a3 zoomFactor:(double)a4 fromGraphConfiguration:(id)a5
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a5;
  uint64_t v10 = [v8 mode];
  uint64_t v11 = [v8 device];
  uint64_t v12 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  BOOL v13 = -[CAMViewfinderViewController _shouldSuspendCaptureSessionForGraphConfiguration:callActive:](self, "_shouldSuspendCaptureSessionForGraphConfiguration:callActive:", v9, [v12 isCallActive]);

  int64_t v14 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  BOOL v15 = -[CAMViewfinderViewController _shouldSuspendCaptureSessionForGraphConfiguration:callActive:](self, "_shouldSuspendCaptureSessionForGraphConfiguration:callActive:", v8, [v14 isCallActive]);

  if (v15)
  {
    [(CAMViewfinderViewController *)self suspendCameraSessionWithCompletion:0];
  }
  else
  {
    CAMSignpostWithIDAndArgs(9, 0xEEEEB0B5B2B2EEEELL, v10, v11, 0, 0);
    [(CAMViewfinderViewController *)self _setNeedsDeferredGraphConfiguration:0];
    [(CAMViewfinderViewController *)self _minimumExecutionTimeForChangeToGraphConfiguration:v8 fromGraphConfiguration:v9];
    double v17 = v16;
    BOOL v18 = [(CAMViewfinderViewController *)self _captureController];
    uint64_t v19 = objc_msgSend(v18, "changeToGraphConfiguration:zoomFactor:minimumExecutionTime:outputToExternalStorage:", v8, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"), a4, v17);
    [(CAMViewfinderViewController *)self _setLastConfigurationRequestID:v19];
    char v20 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138543874;
      id v24 = v8;
      __int16 v25 = 1024;
      int v26 = v19;
      __int16 v27 = 2048;
      double v28 = a4;
      _os_log_impl(&dword_2099F8000, v20, OS_LOG_TYPE_DEFAULT, "Requested change to %{public}@ (requestID=%d) (zoom=%.3f)", (uint8_t *)&v23, 0x1Cu);
    }

    if (v13) {
      [(CAMViewfinderViewController *)self resumeCameraSessionWithCompletion:0];
    }
    [(CAMViewfinderViewController *)self _updateHDRSuggestionMonitoringForGraphConfiguration:v8];
    [(CAMViewfinderViewController *)self _updateTorchModeForGraphConfiguration:v8 animated:1];
    [(CAMViewfinderViewController *)self _updateFlashModeOnControllerForMode:v10];
    [(CAMViewfinderViewController *)self _updateTorchModeOnControllerForMode:v10];
    BOOL v21 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v21 setCaptureMode:v10];

    BOOL v22 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v22 setCaptureDevice:v11];
  }
}

- (double)_minimumExecutionTimeForChangeToGraphConfiguration:(id)a3 fromGraphConfiguration:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  uint64_t v7 = [v6 mode];
  uint64_t v8 = [v5 mode];
  uint64_t v9 = [v6 device];

  if ((unint64_t)(v9 - 1) > 0xA) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = qword_209C794E8[v9 - 1];
  }
  uint64_t v11 = [v5 device];

  if ((unint64_t)(v11 - 1) > 0xA)
  {
    uint64_t v12 = 0;
    if (v8) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v12 = qword_209C794E8[v11 - 1];
    if (v8) {
      goto LABEL_10;
    }
  }
  if (v7 == 4)
  {
    BOOL v13 = 1;
    goto LABEL_19;
  }
LABEL_10:
  BOOL v13 = v8 == 4 && v7 == 0;
  if (v8 == 5 && v7 == 1)
  {
    BOOL v15 = 1;
    goto LABEL_25;
  }
LABEL_19:
  BOOL v15 = v8 == 1 && v7 == 5;
LABEL_25:
  BOOL v17 = v12 == v10;
  if (v8 == v7) {
    BOOL v13 = 1;
  }
  double result = 0.285;
  if (!v17 || !v13 && !v15) {
    return 0.0;
  }
  return result;
}

- (int64_t)_aspectRatioForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  if ((unint64_t)a3 > 9) {
    return 0;
  }
  if (((1 << a3) & 0x1AE) != 0) {
    return 1;
  }
  if (((1 << a3) & 0x241) == 0) {
    return 3;
  }
  switch(-[CAMViewfinderViewController _aspectRatioCropForMode:devicePosition:](self, "_aspectRatioCropForMode:devicePosition:"))
  {
    case 0:
      int64_t result = 4 * ([(CAMViewfinderViewController *)self emulationMode] == 2);
      break;
    case 1:
      int64_t result = 3;
      break;
    case 2:
      int64_t result = 1;
      break;
    case 3:
      int64_t result = 2;
      break;
    default:
      int64_t result = 0;
      break;
  }
  return result;
}

- ($76EADD4ED24426C67044446678BAA581)_dynamicShutterSettingsForGraphConfiguration:(SEL)a3
{
  id v24 = a4;
  *(_OWORD *)&retstr->var4 = xmmword_209C7BB58;
  *(_OWORD *)&retstr->var6 = unk_209C7BB68;
  retstr->var8 = 0;
  *(_OWORD *)&retstr->int64_t var0 = CAMDynamicShutterSettingsDefault;
  *(_OWORD *)&retstr->var2 = unk_209C7BB48;
  int64_t v6 = [(CAMViewfinderViewController *)self timerDuration];
  BOOL v7 = [(CAMViewfinderViewController *)self _useCreativeCameraControls];
  uint64_t v8 = +[CAMCaptureCapabilities capabilities];
  BOOL v9 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", [v24 mode], objc_msgSend(v24, "devicePosition"));
  if (v7
    || ((objc_msgSend(v8, "isStillDuringVideoSupportedForVideoEncodingBehavior:", objc_msgSend(v24, "videoEncodingBehavior")) ^ 1 | v9) & 1) != 0)
  {
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = objc_msgSend(v8, "isStillDuringVideoSupportedForMode:", objc_msgSend(v24, "mode"));
  }
  BOOL v11 = [(CAMViewfinderViewController *)self _isZoomAllowedForGraphConfiguration:v24];
  switch([v24 mode])
  {
    case 0:
      if (v6) {
        goto LABEL_27;
      }
      BOOL v14 = [(CAMViewfinderViewController *)self _isCurrentLowLightCaptureCancelable];
      BOOL v15 = [(CAMViewfinderViewController *)self _isExpectedLowLightDurationCancelable];
      BOOL v16 = [(CAMViewfinderViewController *)self isDisablingMultipleCaptureFeatures];
      retstr->int64_t var0 = v15;
      retstr->int64_t var1 = 1;
      int64_t v17 = !v14;
      retstr->var2 = v17;
      retstr->var3 = !v16 && !v14;
      if (v16) {
        int64_t v18 = 1;
      }
      else {
        int64_t v18 = 2;
      }
      if (v14) {
        int64_t v18 = 0;
      }
      retstr->var5 = v18;
      retstr->var7 = v17;
      goto LABEL_23;
    case 1:
    case 7:
    case 8:
      int64_t v12 = 1;
      int64x2_t v13 = vdupq_n_s64(1uLL);
      *(int64x2_t *)&retstr->int64_t var0 = v13;
      retstr->var2 = 1;
      if (v10) {
        int64_t v12 = 2;
      }
      retstr->var5 = v12;
      *(int64x2_t *)&retstr->var7 = v13;
      goto LABEL_23;
    case 2:
      int64x2_t v19 = vdupq_n_s64(1uLL);
      *(int64x2_t *)&retstr->int64_t var0 = v19;
      retstr->var2 = v10;
      if (v10) {
        int64_t v20 = 2;
      }
      else {
        int64_t v20 = 1;
      }
      retstr->var5 = v20;
      retstr->var8 = 1;
      *(int64x2_t *)&retstr->var6 = v19;
      goto LABEL_23;
    case 3:
      *(int64x2_t *)&retstr->int64_t var0 = vdupq_n_s64(1uLL);
      goto LABEL_28;
    case 4:
    case 6:
      if (!v6) {
        goto LABEL_10;
      }
      goto LABEL_27;
    case 5:
      retstr->int64_t var0 = 1;
      retstr->var8 = 1;
      *(_OWORD *)&retstr->var6 = xmmword_209C791A0;
      goto LABEL_28;
    case 9:
      if (v6) {
        goto LABEL_27;
      }
      BOOL v22 = +[CAMCaptureCapabilities capabilities];
      int v23 = [v22 isSpatialModeTrueVideoSupported];

      if (v23)
      {
        *(_OWORD *)&retstr->int64_t var0 = xmmword_209C791F0;
        *(_OWORD *)&retstr->var2 = xmmword_209C79320;
        retstr->var5 = 1;
        retstr->var7 = 1;
LABEL_23:
        retstr->var4 = v11;
      }
      else
      {
LABEL_10:
        if ([(CAMViewfinderViewController *)self _isExpectedLowLightDurationCancelable])
        {
LABEL_27:
          retstr->int64_t var0 = 1;
        }
      }
LABEL_28:

      return result;
    default:
      goto LABEL_28;
  }
}

- ($E5C720D6BB068A42F0C2CD001350366C)_dynamicShutterPrivateSettingsForGraphConfiguration:(id)a3
{
  id v3 = a3;
  id v4 = +[CAMCaptureCapabilities capabilities];
  uint64_t v5 = [v3 mode];

  LOBYTE(v3) = [v4 isPauseVideoSupportedForMode:v5];
  return ($E5C720D6BB068A42F0C2CD001350366C)v3;
}

- (void)_updateShutterButtonForGraphConfiguration:(id)a3 isCapturing:(BOOL)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v8 = a3;
  BOOL v9 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

  if (v9)
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    [(CAMViewfinderViewController *)self _dynamicShutterSettingsForGraphConfiguration:v8];
    v10.int64_t var0 = (BOOL)[(CAMViewfinderViewController *)self _dynamicShutterPrivateSettingsForGraphConfiguration:v8];

    BOOL v11 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    v14[2] = v18;
    v14[3] = v19;
    uint64_t v15 = v20;
    v14[0] = v16;
    v14[1] = v17;
    [v11 setSettings:v14 privateSettings:v10.var0 animated:v5];
  }
  else
  {
    id v13 = [(CAMViewfinderViewController *)self _shutterButton];
    uint64_t v12 = [v8 mode];

    objc_msgSend(v13, "setMode:animated:", -[CAMViewfinderViewController _shutterButtonModeForCameraMode:isCapturing:](self, "_shutterButtonModeForCameraMode:isCapturing:", v12, v6), v5);
  }
}

- (void)_shutterButtonSetSpinning:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

  if (v5) {
    [(CAMViewfinderViewController *)self _dynamicShutterControl];
  }
  else {
  id v6 = [(CAMViewfinderViewController *)self _shutterButton];
  }
  [v6 setSpinning:v3];
}

- (void)_updateShutterButtonForEndOfLowLightCapture
{
  id v6 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  BOOL v3 = [(CAMViewfinderViewController *)self _captureController];
  BOOL v4 = ([v3 isCapturingLowLightImage] & 1) != 0
    || [(CAMViewfinderViewController *)self _isLowLightCaptureCanceling];
  [v6 setSpinning:v4];

  [v6 resetAnimated:1];
  if ([(CAMViewfinderViewController *)self _isCurrentLowLightCaptureCancelable])
  {
    [(CAMViewfinderViewController *)self _setCurrentLowLightCaptureCancelable:0];
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Night mode capture finished exposing"];
    BOOL v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v5 isCapturing:0 animated:1];
  }
}

- (void)_updateShutterButtonLegibility
{
  BOOL v3 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v4 = [v3 viewportAspectRatio];

  BOOL v6 = v4 == 4 || v4 == 1;
  id v7 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  [v7 setShowContrastBorder:v6];
}

- (id)modesForModeSelector:(id)a3
{
  uint64_t v4 = [(CAMViewfinderViewController *)self _modeDial];
  BOOL v5 = [(CAMViewfinderViewController *)self modesForModeDial:v4];

  return v5;
}

- (BOOL)_modeChangeSwipeMatchesExposureBiasPanDirection
{
  BOOL v3 = [(CAMPreviewViewController *)self->__previewViewController activeExposureBiasPanGestureRecognizer];
  if (v3)
  {
    uint64_t v4 = [(CAMViewfinderViewController *)self viewfinderView];
    BOOL v5 = (unint64_t)([v4 previewViewOrientation] - 3) < 2;
    UISwipeGestureRecognizerDirection v6 = [(UISwipeGestureRecognizer *)self->__previousModeGestureRecognizer direction];
    BOOL v8 = v6 == 4 || v6 == 8;
    int v9 = v8 ^ v5 ^ [v3 _canPanVertically] ^ 1;
  }
  else
  {
    LOBYTE(v9) = 0;
  }

  return v9;
}

- (BOOL)_filterScrubberSwipeMatchesExposureBiasPanDirection
{
  BOOL v3 = [(CAMPreviewViewController *)self->__previewViewController activeExposureBiasPanGestureRecognizer];
  if (v3)
  {
    uint64_t v4 = [(CAMViewfinderViewController *)self viewfinderView];
    BOOL v5 = (unint64_t)([v4 previewViewOrientation] - 3) < 2;
    int v6 = [v3 _canPanVertically] ^ v5;
  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (BOOL)_smartStyleChangeSwipeMatchesExposureBiasPanDirection
{
  BOOL v3 = [(CAMPreviewViewController *)self->__previewViewController activeExposureBiasPanGestureRecognizer];
  if (v3)
  {
    uint64_t v4 = [(CAMViewfinderViewController *)self viewfinderView];
    BOOL v5 = (unint64_t)([v4 previewViewOrientation] - 5) < 0xFFFFFFFFFFFFFFFELL;

    int v6 = [v3 _canPanVertically] ^ v5;
  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (BOOL)gestureRecognizer:(id)a3 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a4
{
  int v6 = (UISwipeGestureRecognizer *)a3;
  id v7 = a4;
  if ([(CAMViewfinderViewController *)self _modeChangeSwipeMatchesExposureBiasPanDirection])
  {
    id v8 = [(CAMPreviewViewController *)self->__previewViewController activeExposureBiasPanGestureRecognizer];
    BOOL v9 = v8 == v7 && (self->__previousModeGestureRecognizer == v6 || self->__nextModeGestureRecognizer == v6);
  }
  else
  {
    BOOL v9 = 0;
  }
  if ((UISwipeGestureRecognizer *)self->__zoomPinchGestureRecognizer == v6)
  {
    BOOL v11 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    uint64_t v12 = [v11 gestureRecognizers];
    char v10 = [v12 containsObject:v7];
  }
  else
  {
    char v10 = 0;
  }
  id v13 = [(CAMViewfinderViewController *)self _sharedLibraryLongPressGestureRecognizer];

  if (v13 == v6)
  {
    uint64_t v15 = [(CAMViewfinderViewController *)self _sharedLibraryButton];
    id v16 = [v15 touchingGestureRecognizer];
    char v14 = v16 == v7;
  }
  else
  {
    char v14 = v9 | v10;
  }

  return v14;
}

- (BOOL)gestureRecognizerShouldBegin:(id)a3
{
  uint64_t v4 = (UISwipeGestureRecognizer *)a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
  if (([v5 isCapturingLowLightImage] & 1) != 0
    || [(CAMViewfinderViewController *)self _wantsVisualTextAnalysis])
  {
    LOBYTE(self) = 0;
  }
  else
  {
    if ((UISwipeGestureRecognizer *)self->__zoomPinchGestureRecognizer != v4)
    {
      if (self->__nextModeGestureRecognizer == v4 || self->__previousModeGestureRecognizer == v4)
      {
        LODWORD(self) = [v5 isCapturingBurst] ^ 1;
        goto LABEL_4;
      }
      if ((UISwipeGestureRecognizer *)self->__cameraRollSwipeUpGestureRecognizer == v4)
      {
        BOOL v11 = [(CAMViewfinderViewController *)self view];
        [(UISwipeGestureRecognizer *)v4 velocityInView:v11];
        double v13 = v12;
        double v15 = v14;

        BOOL v16 = fabs(v13) < fabs(v15) && v15 < 0.0;
        long long v17 = [(CAMViewfinderViewController *)self _cameraRollController];
        LODWORD(self) = v16 & [v17 canPresentCameraRollViewController];
      }
      else
      {
        if (self->__smartStylesSwipeLeftGestureRecognizer != v4 && self->__smartStylesSwipeRightGestureRecognizer != v4)
        {
          LOBYTE(self) = 1;
          goto LABEL_4;
        }
        self = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
        long long v17 = [(CAMViewfinderViewController *)self smartStylePicker];

        [(UISwipeGestureRecognizer *)v4 locationInView:v17];
        CGFloat v19 = v18;
        CGFloat v21 = v20;
        [v17 bounds];
        v22.double x = v19;
        v22.double y = v21;
        LOBYTE(self) = CGRectContainsPoint(v23, v22);
      }

      goto LABEL_4;
    }
    BOOL v7 = [(CAMViewfinderViewController *)self _isPinchToZoomAllowed];
    BOOL v8 = [(CAMViewfinderViewController *)self _isModeDisabled];
    int v9 = [v5 isCapturingBurst];
    int v10 = (v9 | [(CAMViewfinderViewController *)self _isCapturingFromTimer]) ^ 1;
    if (v8) {
      LOBYTE(v10) = 0;
    }
    if (v7) {
      LOBYTE(self) = v10;
    }
    else {
      LOBYTE(self) = 0;
    }
  }
LABEL_4:

  return (char)self;
}

- (BOOL)gestureRecognizer:(id)a3 shouldRequireFailureOfGestureRecognizer:(id)a4
{
  id v6 = a3;
  BOOL v7 = (UISwipeGestureRecognizer *)a4;
  id v8 = [(CAMPreviewViewController *)self->__previewViewController activeExposureBiasPanGestureRecognizer];
  if (v8 == v6)
  {
    char v11 = ![(CAMViewfinderViewController *)self _modeChangeSwipeMatchesExposureBiasPanDirection]&& (self->__previousModeGestureRecognizer == v7 || self->__nextModeGestureRecognizer == v7);
    if (![(CAMViewfinderViewController *)self _filterScrubberSwipeMatchesExposureBiasPanDirection])
    {
      double v15 = [(CAMViewfinderViewController *)self _swipeDownGestureRecognizer];
      if (v15 == v7)
      {
        BOOL v17 = 1;
      }
      else
      {
        BOOL v16 = [(CAMViewfinderViewController *)self _swipeUpGestureRecognizer];
        BOOL v17 = v16 == v7;
      }
      v11 |= v17;
    }
  }
  else
  {
    int v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    id v10 = [v9 modeSelectorGestureRecognizer];

    if (v10 == v6)
    {
      double v12 = [(CAMViewfinderViewController *)self _previewViewController];
      double v13 = [v12 previewView];
      double v14 = [v13 gestureRecognizers];
      char v11 = [v14 containsObject:v7];
    }
    else
    {
      char v11 = 0;
    }
  }

  return v11;
}

- (void)previewViewControllerDidChangeFocusOrExposureLocked:(id)a3 shouldAnimate:(BOOL)a4
{
  uint64_t v4 = a4;
  id v6 = a3;
  [(CAMViewfinderViewController *)self _updateFocusAndExposureLockBadgeAnimated:v4];
  LODWORD(v4) = [v6 isFocusLockedByUser];

  if (v4)
  {
    id v7 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    [v7 didFocusLockInteraction];
  }
}

- (void)previewViewControllerDidChangeFocusOrExposure:(id)a3
{
  uint64_t v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "previewViewControllerDidChangeFocusOrExposure", v7, 2u);
  }

  BOOL v5 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  [v5 didFocusInteraction];

  [(CAMViewfinderViewController *)self _updatePreviewControllerIndicatorStyle];
  id v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v6 animated:1];
}

- (void)previewViewControllerWillResetFocusOrExposure:(id)a3
{
  [(CAMViewfinderViewController *)self _updatePreviewControllerIndicatorStyle];
  id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v4 animated:1];
}

- (BOOL)previewViewController:(id)a3 gestureRecognizer:(id)a4 shouldRequireFailureOfGestureRecognizer:(id)a5
{
  return [(CAMViewfinderViewController *)self gestureRecognizer:a4 shouldRequireFailureOfGestureRecognizer:a5];
}

- (BOOL)previewViewControllerShouldRestrictExposureBiasPanToTouchesNearSlider:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v5 = [v4 captureOrientation];

  unint64_t v6 = v5 - 1;
  id v7 = +[CAMCaptureCapabilities capabilities];
  int v8 = [v7 allowControlDrawer];

  if (v6 < 2) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if ([(CAMViewfinderViewController *)self _shouldEnableSmartStylesSwipeGestures])
  {
    return [(CAMViewfinderViewController *)self _smartStyleChangeSwipeMatchesExposureBiasPanDirection] | v9;
  }
  return v9;
}

- (void)previewViewControllerDidChangeVideoFillAspectRatio:(id)a3
{
  id v3 = [(CAMViewfinderViewController *)self viewfinderView];
  [v3 setNeedsLayout];
}

- (int64_t)_itemIndexForFilterType:(int64_t)a3
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v4 = [(CAMViewfinderViewController *)self _filterTypes];
  uint64_t v5 = [NSNumber numberWithInteger:a3];
  int64_t v6 = [v4 indexOfObject:v5];

  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    id v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134218242;
      int64_t v10 = a3;
      __int16 v11 = 2114;
      double v12 = v4;
      _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "Tried to get index for filterType %ld; only filterTypes are %{public}@",
        (uint8_t *)&v9,
        0x16u);
    }

    int64_t v6 = 0;
  }

  return v6;
}

- (int64_t)_filterTypeForItemIndex:(int64_t)a3
{
  id v4 = [(CAMViewfinderViewController *)self _filterTypes];
  uint64_t v5 = v4;
  if (a3 < 0 || [v4 count] <= (unint64_t)a3)
  {
    int64_t v7 = 0;
  }
  else
  {
    int64_t v6 = [v5 objectAtIndexedSubscript:a3];
    int64_t v7 = [v6 integerValue];
  }
  return v7;
}

- (void)_setEffectFilterType:(int64_t)a3 forMode:(int64_t)a4
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  switch(a4)
  {
    case 0:
      [(CAMViewfinderViewController *)self _setPhotoModeEffectFilterType:a3];
      break;
    case 1:
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
      if (a3)
      {
        uint64_t v5 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          int v6 = 134217984;
          int64_t v7 = a4;
          _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "Trying to set filter type on unhandled mode %ld", (uint8_t *)&v6, 0xCu);
        }
      }
      break;
    case 4:
      [(CAMViewfinderViewController *)self _setSquareModeEffectFilterType:a3];
      break;
    case 6:
      [(CAMViewfinderViewController *)self _setPortraitModeEffectFilterType:a3];
      break;
    default:
      return;
  }
}

- (unint64_t)_previewConfigurationForMode:(int64_t)a3 devicePosition:(int64_t)a4 videoThumbnailOutputEnabled:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v7 = [(CAMViewfinderViewController *)self isPerformingReviewUsingOverlay];
  int v8 = v7 | [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  unint64_t v9 = 5;
  if (!v5) {
    unint64_t v9 = 1;
  }
  if (v8) {
    return 0;
  }
  else {
    return v9;
  }
}

- (id)_previewFiltersForMode:(int64_t)a3 device:(int64_t)a4 wantsPhotoModePortraitEffect:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t v9 = -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:");
  int64_t v10 = [(CAMViewfinderViewController *)self _sanitizedLightingTypeForMode:a3 device:a4];
  unint64_t v11 = a3 - 6;
  if (v5) {
    int64_t v12 = v10;
  }
  else {
    int64_t v12 = 0;
  }
  if (a3)
  {
    int64_t v12 = v10;
    BOOL v13 = 0;
  }
  else
  {
    BOOL v13 = v5;
  }
  if (v11 >= 2) {
    int64_t v14 = v12;
  }
  else {
    int64_t v14 = v10;
  }
  uint64_t v15 = v11 < 2 || v13;
  return +[CAMEffectFilterManager filtersForFilterType:v9 lightingType:v14 applyDepthEffect:v15];
}

- (void)_updateCurrentPreviewFiltersOnCaptureController
{
  id v4 = [(CAMViewfinderViewController *)self _previewFiltersForMode:[(CAMViewfinderViewController *)self _currentMode] device:[(CAMViewfinderViewController *)self _currentDevice] wantsPhotoModePortraitEffect:[(CAMViewfinderViewController *)self _shouldUsePhotoModePortraitEffect]];
  id v3 = [(CAMViewfinderViewController *)self _captureController];
  objc_msgSend(v3, "changeToPreviewFilters:captureMode:", v4, -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
}

- (id)_currentCaptureFiltersForBurst:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v6 = [v5 mode];
  int64_t v7 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", v6, [v5 device]);
  if (v6)
  {
    if (v6 == 7)
    {
      int64_t v9 = 0;
LABEL_9:
      uint64_t v10 = 1;
      goto LABEL_13;
    }
    if (v6 == 6)
    {
      int64_t v8 = [(CAMViewfinderViewController *)self _portraitModeEffectFilterType];
LABEL_8:
      int64_t v9 = v8;
      goto LABEL_9;
    }
    uint64_t v10 = 0;
  }
  else
  {
    if ([(CAMViewfinderViewController *)self _shouldUsePhotoModePortraitEffectIsBurst:v3])
    {
      int64_t v8 = [(CAMViewfinderViewController *)self _photoModeEffectFilterType];
      goto LABEL_8;
    }
    uint64_t v10 = 0;
    int64_t v7 = 0;
  }
  int64_t v9 = 0;
LABEL_13:
  unint64_t v11 = +[CAMEffectFilterManager filtersForFilterType:v9 lightingType:v7 applyDepthEffect:v10];

  return v11;
}

- (id)_originalCaptureFiltersForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  int64_t v7 = +[CAMCaptureCapabilities capabilities];
  if ([v7 isNaturalLightingAppliedToOriginal]
    && [(CAMViewfinderViewController *)self _wantsLightingControlForMode:a3 devicePosition:a4])
  {
    int64_t v8 = [MEMORY[0x263F306D8] portraitOriginalPhotoFilters];
  }
  else
  {
    int64_t v8 = 0;
  }

  return v8;
}

- (id)_targetFilterScrubberView
{
  BOOL v3 = [(CAMViewfinderViewController *)self _filterScrubberView];
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    uint64_t v6 = [(CAMViewfinderViewController *)self _controlDrawer];
    id v5 = [v6 filterScrubberView];
  }
  return v5;
}

- (void)_handleFilterButtonTapped:(id)a3
{
  if ([(CAMViewfinderViewController *)self _wantsFilterScrubberVisible])
  {
    if ([(CAMViewfinderViewController *)self _shouldShowFilterScrubberAfterNextRender])
    {
      id v4 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int64_t v7 = 0;
        _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Ignoring filter button tap since we are still waiting on thumbnail rendering before animating the filter scrubber into view", v7, 2u);
      }

      return;
    }
    id v5 = self;
    uint64_t v6 = 0;
  }
  else
  {
    id v5 = self;
    uint64_t v6 = 1;
  }
  [(CAMViewfinderViewController *)v5 _setWantsFilterScrubberVisible:v6 animated:1];
}

- (void)_setWantsFilterScrubberVisible:(BOOL)a3
{
}

- (void)_setShowingFilterScrubber:(BOOL)a3
{
}

- (void)_setShowingFilterScrubber:(BOOL)a3 animated:(BOOL)a4
{
  if (self->__showingFilterScrubber == a3) {
    return;
  }
  BOOL v4 = a4;
  BOOL v5 = a3;
  int64_t v7 = [(CAMViewfinderViewController *)self _controlDrawer];

  if (!v7)
  {
    int64_t v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v10 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v9];
    if (v5)
    {
      BOOL v11 = v10;
      [(CAMViewfinderViewController *)self _createFilterScrubberViewIfNecessary];
      [(CAMViewfinderViewController *)self _createFilterNameBadgeIfNecessary];
      [(CAMViewfinderViewController *)self _updateControlsForVisibleFilterScrubberAnimated:v4];
      int64_t v12 = [(CAMViewfinderViewController *)self _utilityBar];
      BOOL v13 = v12;
      BOOL v14 = !v11 && [v12 visibleContent] != 0;
      [v13 setVisibleContent:1 animated:v4 & v14];
    }
    uint64_t v15 = [(CAMViewfinderViewController *)self viewfinderView];
    BOOL v16 = v15;
    if (v4) {
      [v15 layoutIfNeeded];
    }

    goto LABEL_14;
  }
  int64_t v8 = [(CAMViewfinderViewController *)self _controlDrawer];
  int64_t v9 = v8;
  if (!v5)
  {
    [v8 collapseExpandableButtonsAnimated:v4 updatePreferredDrawerControl:0];
LABEL_14:

    goto LABEL_15;
  }
  [v8 expandControlForType:4 animated:v4 updatePreferredDrawerControl:0];

  [(CAMViewfinderViewController *)self _updateControlsForVisibleFilterScrubberAnimated:v4];
LABEL_15:
  self->__showingFilterScrubber = v5;
  BOOL v17 = [(CAMViewfinderViewController *)self _controlDrawer];

  if (!v17)
  {
    [(CAMViewfinderViewController *)self _layoutViewfinderForShowingFilterScrubber:v5 animated:v4];
    double v18 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", [v18 mode], 0, 0);
  }
  [(CAMViewfinderViewController *)self _dismissOverlays];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v4];
  [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Filter scrubber actual visibility changed"];
  if (v5)
  {
    [(CAMViewfinderViewController *)self _setShowingPortraitApertureSlider:0];
    [(CAMViewfinderViewController *)self _setShowingPortraitIntensitySlider:0];
  }
}

- (void)_layoutViewfinderForShowingFilterScrubber:(BOOL)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  int64_t v8 = [(CAMViewfinderViewController *)self viewfinderView];
  int64_t v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [v8 setNeedsLayout];
  if (v4)
  {
    if (!a3)
    {
      [(CAMViewfinderViewController *)self _setAnimatingFilterScrubberDismissal:1];
      -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", [v9 mode], 0, 0);
    }
    BOOL v10 = (void *)MEMORY[0x263F82E00];
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = __82__CAMViewfinderViewController__layoutViewfinderForShowingFilterScrubber_animated___block_invoke;
    v19[3] = &unk_263FA0208;
    id v20 = v8;
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __82__CAMViewfinderViewController__layoutViewfinderForShowingFilterScrubber_animated___block_invoke_2;
    _OWORD v15[3] = &unk_263FA2220;
    BOOL v18 = a3;
    void v15[4] = self;
    id v11 = v9;
    id v16 = v11;
    SEL v17 = a2;
    [v10 animateWithDuration:6 delay:v19 options:v15 animations:0.25 completion:0.0];

    [(CAMViewfinderViewController *)self _setView:self->__utilityBar hidden:[(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v11] delayedInTotalAnimationTime:0.25 normalizedFadeoutDuration:0.7];
    [(CAMViewfinderViewController *)self _setView:self->__filterNameBadge hidden:[(CAMViewfinderViewController *)self _shouldHideFilterNameBadgeForGraphConfiguration:v11] delayedInTotalAnimationTime:0.25 normalizedFadeoutDuration:0.7];
    BOOL v12 = [(CAMViewfinderViewController *)self _shouldHideZoomControlForGraphConfiguration:v11];
    BOOL v13 = [(CAMViewfinderViewController *)self viewfinderView];
    BOOL v14 = [v13 zoomControl];
    [(CAMViewfinderViewController *)self _setView:v14 hidden:v12 delayedInTotalAnimationTime:0.25 normalizedFadeoutDuration:0.7];
  }
}

uint64_t __82__CAMViewfinderViewController__layoutViewfinderForShowingFilterScrubber_animated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

void __82__CAMViewfinderViewController__layoutViewfinderForShowingFilterScrubber_animated___block_invoke_2(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    [*(id *)(a1 + 32) _setAnimatingFilterScrubberDismissal:0];
    objc_msgSend(*(id *)(a1 + 32), "_updateBarBackgroundStyleForMode:capturing:animated:", objc_msgSend(*(id *)(a1 + 40), "mode"), 0, 0);
    uint64_t v2 = *(void **)(a1 + 32);
    NSStringFromSelector(*(SEL *)(a1 + 48));
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    [v2 _clearFilterScrubberLayerContentsIfNotNeededFromCallsite:v3];
  }
}

- (void)_updateControlsForVisibleFilterScrubberAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = +[CAMCaptureCapabilities capabilities];
  int v6 = [v5 isLiveFilteringSupported];

  if (v6)
  {
    id v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [(CAMViewfinderViewController *)self _updateFilterScrubberForGraphConfiguration:v8];
    [(CAMViewfinderViewController *)self _updateFilterNameBadgeAnimated:v3];
    int64_t v7 = [(CAMViewfinderViewController *)self _zoomSlider];
    [v7 makeInvisibleAnimated:v3];

    [(CAMViewfinderViewController *)self _resetPortraitLightingToDefaultAnimated:v3];
  }
}

- (void)_resetPortraitLightingToDefaultAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v18 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v5 = +[CAMCaptureCapabilities capabilities];
  int v6 = objc_msgSend(v5, "isLightingControlSupportedForMode:", objc_msgSend(v18, "mode"));

  if (v6)
  {
    int64_t v7 = [(CAMViewfinderViewController *)self _targetLightingControl];
    objc_msgSend(v7, "setSelectedLightingType:", objc_msgSend(v7, "defaultLightingType"));
    uint64_t v8 = [v7 defaultLightingType];
    int64_t v9 = [(CAMViewfinderViewController *)self _lightingNameBadge];
    [v9 setLightingType:v8];

    uint64_t v10 = [v7 defaultLightingType];
    id v11 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    BOOL v12 = [v11 lightingNameBadge];
    [v12 setLightingType:v10];

    uint64_t v13 = [v7 defaultLightingType];
    BOOL v14 = [(CAMViewfinderViewController *)self _previewViewController];
    [v14 setLightingType:v13];

    uint64_t v15 = [v18 mode];
    int64_t v16 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", v15, [v18 device]);
    int64_t v17 = +[CAMUserPreferences defaultLightingTypeForMode:v15];
    if (v16 != v17)
    {
      [(CAMViewfinderViewController *)self _setLightingType:v17 forMode:v15];
      [(CAMViewfinderViewController *)self _updateCurrentPreviewFiltersOnCaptureController];
      [(CAMViewfinderViewController *)self _updateControlDrawerContentsVisibilityAnimated:v3];
      [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v18 animated:v3];
    }
    [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
  }
}

- (void)_dismissOverlays
{
  id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  if (-[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:"))
  {
    BOOL v3 = [(CAMViewfinderViewController *)self _embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:v4];
    [(CAMViewfinderViewController *)self _dismissDescriptionOverlayView:v3 withDuration:0.3];
  }
}

- (void)_resetPortraitModeApertureValueIfNeededForGraphConfiguration:(id)a3 zoomFactor:(double)a4
{
  id v11 = a3;
  int v6 = +[CAMCaptureCapabilities capabilities];
  uint64_t v7 = [v11 mode];
  if (objc_msgSend(v6, "isDepthEffectApertureSupportedForMode:devicePosition:", v7, objc_msgSend(v11, "devicePosition")))
  {
    uint64_t v8 = [v11 device];
    [(CAMViewfinderViewController *)self _portraitModeApertureValue];
    if (v9 <= 0.0)
    {
      uint64_t v10 = +[CAMCaptureCapabilities capabilities];
      [v10 defaultDepthEffectApertureForMode:v7 device:v8 zoomFactor:a4];
      -[CAMViewfinderViewController _setPortraitModeApertureValue:](self, "_setPortraitModeApertureValue:");
    }
  }
}

- (void)_setShowingPortraitApertureSlider:(BOOL)a3
{
}

- (void)_setShowingPortraitApertureSlider:(BOOL)a3 animated:(BOOL)a4
{
  if (self->__showingPortraitApertureSlider != a3)
  {
    BOOL v4 = a4;
    BOOL v5 = a3;
    uint64_t v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v8 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v7];
    if (v5)
    {
      [(CAMViewfinderViewController *)self _createPortraitApertureSliderIfNecessary];
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v7);
      double v9 = [(CAMViewfinderViewController *)self _utilityBar];
      uint64_t v10 = v9;
      BOOL v11 = !v8 && [v9 visibleContent] != 0;
      [v10 setVisibleContent:2 animated:v4 & v11];
    }
    BOOL v12 = [(CAMViewfinderViewController *)self viewfinderView];
    uint64_t v13 = v12;
    if (v4)
    {
      [v12 layoutIfNeeded];
      self->__showingPortraitApertureSlider = v5;
      [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:1];
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v7, 1);
      [v13 setNeedsLayout];
      BOOL v14 = (void *)MEMORY[0x263F82E00];
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 3221225472;
      v15[2] = __74__CAMViewfinderViewController__setShowingPortraitApertureSlider_animated___block_invoke;
      _OWORD v15[3] = &unk_263FA0208;
      id v16 = v13;
      [v14 animateWithDuration:6 delay:v15 options:0 animations:0.25 completion:0.0];

      if (v8) {
        [(CAMViewfinderViewController *)self _setView:self->__utilityBar hidden:[(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v7] delayedInTotalAnimationTime:0.25 normalizedFadeoutDuration:0.7];
      }
    }
    else
    {
      self->__showingPortraitApertureSlider = v5;
      [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:0];
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v7, 0);
      [v13 setNeedsLayout];
    }
    [(CAMViewfinderViewController *)self _dismissOverlays];
    [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v4];
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Portrait depth slider visibility changed"];
    if (v5)
    {
      [(CAMViewfinderViewController *)self _setWantsFilterScrubberVisible:0];
      [(CAMViewfinderViewController *)self _setShowingPortraitIntensitySlider:0];
    }
  }
}

uint64_t __74__CAMViewfinderViewController__setShowingPortraitApertureSlider_animated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

- (void)_updatePortraitApertureSliderForGraphConfiguration:(id)a3 zoomFactor:(double)a4
{
  id v5 = a3;
  int v6 = +[CAMCaptureCapabilities capabilities];
  uint64_t v7 = [(CAMViewfinderViewController *)self _portraitApertureSlider];
  if (v7
    || ([(CAMViewfinderViewController *)self _controlDrawer],
        BOOL v8 = objc_claimAutoreleasedReturnValue(),
        [v8 apertureSlider],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        v8,
        v7))
  {
    uint64_t v9 = [v5 device];
    uint64_t v10 = [v5 mode];
    [v6 minimumDepthEffectApertureForMode:v10 device:v9];
    uint64_t v12 = v11;
    [v6 maximumDepthEffectApertureForMode:v10 device:v9];
    uint64_t v14 = v13;
    [(CAMViewfinderViewController *)self _lastDefaultApertureValue];
    v33[0] = MEMORY[0x263EF8330];
    v33[1] = 3221225472;
    v33[2] = __93__CAMViewfinderViewController__updatePortraitApertureSliderForGraphConfiguration_zoomFactor___block_invoke;
    v33[3] = &unk_263FA2248;
    v33[5] = v12;
    v33[6] = v14;
    v33[4] = self;
    v33[7] = v15;
    id v16 = (void (**)(void *, void *))_Block_copy(v33);
    v16[2](v16, v7);
    int64_t v17 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    id v18 = [v17 spotlightControlPanel];
    CGFloat v19 = [v18 apertureSlider];
    v16[2](v16, v19);

    [v7 apertureValue];
    double v21 = v20;
    int64_t v22 = [(CAMViewfinderViewController *)self _layoutStyle];
    if ((unint64_t)(v22 - 2) < 3) {
      goto LABEL_6;
    }
    if (v22 == 1)
    {
      [v7 removeGradients];
      uint64_t v27 = 1;
      uint64_t v26 = 1;
      goto LABEL_13;
    }
    if (!v22)
    {
LABEL_6:
      CGRect v23 = +[CAMCaptureCapabilities capabilities];
      if ([v23 isCinematicModeSupported])
      {

LABEL_9:
        [v7 setTransparentGradients];
        uint64_t v26 = 0;
        uint64_t v27 = 1;
LABEL_13:
        [v7 setUseTickMarkLegibilityShadows:v27];
        [v7 setUseTextLegibilityBackgrounds:v26];
        uint64_t v29 = [(CAMViewfinderViewController *)self _apertureButton];
        [v29 setApertureValue:v21];
        BOOL v30 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
        int v31 = [v30 controlStatusBar];
        uint64_t v32 = [v31 apertureIndicator];
        [v32 setApertureValue:v21];

        goto LABEL_14;
      }
      id v24 = +[CAMCaptureCapabilities capabilities];
      int v25 = [v24 photoModeDepthSuggestionSupported];

      if (v25) {
        goto LABEL_9;
      }
      double v28 = [MEMORY[0x263F825C8] blackColor];
      [v7 setOpaqueGradientsWithColor:v28];
    }
    uint64_t v27 = 0;
    uint64_t v26 = 0;
    goto LABEL_13;
  }
LABEL_14:
}

void __93__CAMViewfinderViewController__updatePortraitApertureSliderForGraphConfiguration_zoomFactor___block_invoke(uint64_t a1, void *a2)
{
  double v3 = *(double *)(a1 + 40);
  double v4 = *(double *)(a1 + 48);
  id v5 = a2;
  [v5 setMinimumApertureValueClosestTo:v3 maximumApertureValueClosestTo:v4];
  [*(id *)(a1 + 32) _portraitModeApertureValue];
  objc_msgSend(v5, "setApertureValueClosestTo:");
  [v5 setMarkedApertureValueClosestTo:*(double *)(a1 + 56)];
}

- (void)_updatePortraitApertureButtonForGraphConfiguration:(id)a3 zoomFactor:(double)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  id v7 = a3;
  uint64_t v33 = +[CAMCaptureCapabilities capabilities];
  uint64_t v8 = [v7 mode];
  uint64_t v9 = [v7 device];
  uint64_t v10 = [v7 devicePosition];

  uint64_t v11 = [v33 isDepthEffectApertureSupportedForMode:v8 devicePosition:v10];
  uint64_t v12 = v33;
  if (v11)
  {
    [v33 minimumDepthEffectApertureForMode:v8 device:v9];
    double v14 = v13;
    [v33 maximumDepthEffectApertureForMode:v8 device:v9];
    double v16 = v15;
    [(CAMViewfinderViewController *)self _portraitModeApertureValue];
    double v18 = v17;
    [(CAMViewfinderViewController *)self _lastDefaultApertureValue];
    double v20 = v19;
    if (v16 >= v18) {
      double v21 = v18;
    }
    else {
      double v21 = v16;
    }
    if (v14 < v21) {
      double v14 = v21;
    }
    int64_t v22 = [(CAMViewfinderViewController *)self _apertureButton];
    BOOL v23 = [(CAMViewfinderViewController *)self _isShowingPortraitApertureSlider];
    id v24 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    int v25 = [v24 controlDrawer];
    if (v23) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = [v24 isApertureSliderVisible];
    }
    uint64_t v27 = (vabdd_f64(v20, v14) >= 0.0001) & ~v26;
    [v22 setActive:v26 animated:v5];
    [v22 setShouldShowApertureValue:v27 animated:v5];
    [v22 setApertureValue:v14];
    double v28 = [v24 controlStatusBar];
    uint64_t v29 = [v28 apertureIndicator];

    [v29 setApertureValue:v14];
    [v29 setShowingValue:v27 animated:v5];
    BOOL v30 = [v25 apertureButton];
    [v30 setOn:v27];

    int v31 = [v24 controlStatusBar];
    uint64_t v32 = [v31 apertureIndicator];
    [v32 setOn:v26];

    uint64_t v12 = v33;
  }
  MEMORY[0x270F9A758](v11, v12);
}

- (void)_apertureSliderDidChangeApertureValue:(id)a3
{
  [a3 apertureValue];
  double v5 = v4;
  -[CAMViewfinderViewController _handleUserChangedToApertureValue:](self, "_handleUserChangedToApertureValue:");
  int v6 = [(CAMViewfinderViewController *)self _overlayControls];
  id v10 = [v6 objectForKeyedSubscript:@"aperture"];

  *(float *)&double v7 = v5;
  uint64_t v8 = [v10 updateWithFloatValue:v7];
  uint64_t v9 = [(CAMViewfinderViewController *)self _overlayServiceConnection];
  [v9 applyControlUpdate:v8 completion:&__block_literal_global_1179];
}

void __69__CAMViewfinderViewController__apertureSliderDidChangeApertureValue___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    double v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __69__CAMViewfinderViewController__apertureSliderDidChangeApertureValue___block_invoke_cold_1();
    }
  }
}

- (void)_handleUserChangedToApertureValue:(double)a3
{
  -[CAMViewfinderViewController _setPortraitModeApertureValue:](self, "_setPortraitModeApertureValue:");
  double v5 = [(CAMViewfinderViewController *)self _captureController];
  [v5 changeToPortraitAperture:a3];

  id v16 = [(CAMViewfinderViewController *)self _apertureButton];
  [v16 setApertureValue:a3];
  int v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  double v7 = [v6 controlStatusBar];
  uint64_t v8 = [v7 apertureIndicator];
  [v8 setApertureValue:a3];

  uint64_t v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityForGraphConfiguration:v9 animated:1];

  id v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v10);

  uint64_t v11 = +[CAMCaptureCapabilities capabilities];
  int64_t v12 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v13 = [(CAMViewfinderViewController *)self _currentDevicePosition];
  uint64_t v14 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  LODWORD(v12) = objc_msgSend(v11, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v12, v13, v14, v15);

  if (v12) {
    [(CAMViewfinderViewController *)self _updateDepthEffectSuggestionEnabled:1];
  }
}

- (void)_handleApertureButtonTapped:(id)a3
{
  uint64_t v4 = [(CAMViewfinderViewController *)self _isShowingPortraitApertureSlider] ^ 1;
  [(CAMViewfinderViewController *)self _setShowingPortraitApertureSlider:v4 animated:1];
}

- (void)_handleIntensityButtonTapped:(id)a3
{
  uint64_t v4 = [(CAMViewfinderViewController *)self _isShowingPortraitIntensitySlider] ^ 1;
  [(CAMViewfinderViewController *)self _setShowingPortraitIntensitySlider:v4 animated:1];
}

- (void)_setShowingPortraitIntensitySlider:(BOOL)a3
{
}

- (void)_setShowingPortraitIntensitySlider:(BOOL)a3 animated:(BOOL)a4
{
  if (self->__showingPortraitIntensitySlider != a3)
  {
    BOOL v4 = a4;
    BOOL v5 = a3;
    double v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v8 = [(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v7];
    if (v5)
    {
      [(CAMViewfinderViewController *)self _createPortraitIntensitySliderIfNecessary];
      [(CAMViewfinderViewController *)self _updatePortraitIntensitySliderForCurrentState];
      uint64_t v9 = [(CAMViewfinderViewController *)self _utilityBar];
      id v10 = v9;
      BOOL v11 = !v8 && [v9 visibleContent] != 0;
      [v10 setVisibleContent:3 animated:v4 & v11];
    }
    int64_t v12 = [(CAMViewfinderViewController *)self viewfinderView];
    int64_t v13 = v12;
    if (v4)
    {
      [v12 layoutIfNeeded];
      self->__showingPortraitIntensitySlider = v5;
      [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:1];
      [(CAMViewfinderViewController *)self _updateIntensityButtonForCurrentState];
      [v13 setNeedsLayout];
      uint64_t v14 = (void *)MEMORY[0x263F82E00];
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 3221225472;
      v15[2] = __75__CAMViewfinderViewController__setShowingPortraitIntensitySlider_animated___block_invoke;
      _OWORD v15[3] = &unk_263FA0208;
      id v16 = v13;
      [v14 animateWithDuration:6 delay:v15 options:0 animations:0.25 completion:0.0];

      if (v8) {
        [(CAMViewfinderViewController *)self _setView:self->__utilityBar hidden:[(CAMViewfinderViewController *)self _shouldHideUtilityBarForGraphConfiguration:v7] delayedInTotalAnimationTime:0.25 normalizedFadeoutDuration:0.7];
      }
    }
    else
    {
      self->__showingPortraitIntensitySlider = v5;
      [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:0];
      [(CAMViewfinderViewController *)self _updateIntensityButtonForCurrentState];
      [v13 setNeedsLayout];
    }
    [(CAMViewfinderViewController *)self _dismissOverlays];
    [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v4];
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Portrait intensity slider visibility changed"];
    if (v5)
    {
      [(CAMViewfinderViewController *)self _setWantsFilterScrubberVisible:0];
      [(CAMViewfinderViewController *)self _setShowingPortraitApertureSlider:0 animated:v4];
    }
  }
}

uint64_t __75__CAMViewfinderViewController__setShowingPortraitIntensitySlider_animated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

- (void)_updatePortraitIntensitySliderForCurrentState
{
  double v3 = [(CAMViewfinderViewController *)self _controlDrawer];
  BOOL v4 = [v3 intensitySlider];
  BOOL v5 = v4;
  if (v4)
  {
    id v6 = v4;
  }
  else
  {
    id v6 = [(CAMViewfinderViewController *)self _portraitIntensitySlider];
  }
  id v10 = v6;

  double v7 = +[CAMCaptureCapabilities capabilities];
  [v7 minimumPortraitEffectIntensity];
  objc_msgSend(v10, "setMinimumValue:");
  [v7 defaultPortraitEffectIntensity];
  objc_msgSend(v10, "setDefaultValue:");
  [v7 maximumPortraitEffectIntensity];
  objc_msgSend(v10, "setMaximumValue:");
  [(CAMViewfinderViewController *)self _portraitModeIntensityValue];
  objc_msgSend(v10, "setValue:");
  BOOL v8 = [MEMORY[0x263F825C8] clearColor];
  [v10 setBackgroundColor:v8];

  uint64_t v9 = [(CAMViewfinderViewController *)self _intensityButton];
  [(CAMViewfinderViewController *)self _portraitModeIntensityValue];
  objc_msgSend(v9, "setIntensityValue:");
}

- (void)_handleIntensitySliderDidChangeValue:(id)a3
{
  id v13 = a3;
  BOOL v4 = [(CAMViewfinderViewController *)self _intensityButton];
  BOOL v5 = [(CAMViewfinderViewController *)self _controlDrawer];
  id v6 = [v5 intensitySlider];
  double v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = [(CAMViewfinderViewController *)self _portraitIntensitySlider];
  }
  id v9 = v8;

  if (v9 == v13)
  {
    [v13 value];
    double v11 = v10;
    int64_t v12 = [(CAMViewfinderViewController *)self _captureController];
    [v12 changeToPortraitLightingEffectStrength:v11];

    [(CAMViewfinderViewController *)self _setPortraitModeIntensityValue:v11];
    [v4 setIntensityValue:v11];
  }
}

- (void)_updateIntensityButtonForCurrentState
{
  [(CAMViewfinderViewController *)self _updateTopBarForLightingType:[(CAMViewfinderViewController *)self _portraitModeLightingEffectType]];
  [(CAMViewfinderViewController *)self _portraitModeIntensityValue];
  double v4 = v3;
  BOOL v5 = [(CAMViewfinderViewController *)self _intensityButton];
  [v5 setIntensityValue:v4];

  id v6 = [(CAMViewfinderViewController *)self _intensityButton];
  objc_msgSend(v6, "setActive:animated:", -[CAMViewfinderViewController _isShowingPortraitIntensitySlider](self, "_isShowingPortraitIntensitySlider"), 1);

  id v17 = [(CAMViewfinderViewController *)self _controlDrawer];
  double v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v8 = [v7 isIntensitySliderVisible];

  id v9 = +[CAMCaptureCapabilities capabilities];
  [v9 defaultPortraitEffectIntensity];
  double v11 = vabdd_f64(v4, v10);

  if (v11 > 0.005) {
    uint64_t v12 = v8 ^ 1;
  }
  else {
    uint64_t v12 = 0;
  }
  id v13 = [v17 intensityButton];
  [v13 setOn:v12];

  uint64_t v14 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v15 = [v14 controlStatusBar];
  id v16 = [v15 intensityIndicator];
  [v16 setOn:v8];
}

- (double)_exposureBiasForMode:(int64_t)a3 trueVideoEnabled:(BOOL)a4
{
  int64_t v4 = a3;
  if (a4
    && [(CAMViewfinderViewController *)self _trueVideoDestinationCaptureMode] == a3)
  {
    int64_t v4 = [(CAMViewfinderViewController *)self _trueVideoSourceCaptureMode];
  }
  id v6 = [(CAMViewfinderViewController *)self _exposureBiasesByMode];
  double v7 = [NSNumber numberWithInteger:v4];
  uint64_t v8 = [v6 objectForKeyedSubscript:v7];
  [v8 floatValue];
  double v10 = v9;

  return v10;
}

- (void)_setExposureBias:(double)a3 forMode:(int64_t)a4
{
  id v8 = [NSNumber numberWithDouble:a3];
  id v6 = [(CAMViewfinderViewController *)self _exposureBiasesByMode];
  double v7 = [NSNumber numberWithInteger:a4];
  [v6 setObject:v8 forKeyedSubscript:v7];
}

- (BOOL)_isExposureBiasNonDefault:(double)a3
{
  return fabs(a3) > 0.005;
}

- (void)_updateExposureSliderForCurrentState
{
  double v3 = [(CAMViewfinderViewController *)self _controlDrawer];
  id v17 = [v3 exposureSlider];

  int64_t v4 = [(CAMViewfinderViewController *)self _currentMode];
  BOOL v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  -[CAMViewfinderViewController _exposureBiasForMode:trueVideoEnabled:](self, "_exposureBiasForMode:trueVideoEnabled:", v4, [v5 trueVideoEnabled]);
  float v7 = v6;

  [v17 setExposureValueClosestTo:v7];
  id v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  float v9 = [v8 spotlightControlPanel];
  double v10 = [v9 exposureSlider];
  [v10 setExposureValueClosestTo:v7];

  double v11 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v12 = [v11 viewportAspectRatio];

  BOOL v14 = v12 == 4 || v12 == 1;
  [v17 setUseTextLegibilityShadows:v14];
  uint64_t v15 = [(CAMViewfinderViewController *)self _previewViewController];
  *(float *)&double v16 = v7;
  [v15 setBaselineExposureBias:v16];
}

- (void)_handleExposureSliderDidChangeValue:(id)a3
{
  [a3 exposureValue];
  double v5 = v4;
  -[CAMViewfinderViewController _handleUserChangedToExposureSliderBias:updateSystemOverlayValues:](self, "_handleUserChangedToExposureSliderBias:updateSystemOverlayValues:", 1);
  double v6 = [(CAMViewfinderViewController *)self _overlayControls];
  id v10 = [v6 objectForKeyedSubscript:@"exposure"];

  *(float *)&double v7 = v5;
  id v8 = [v10 updateWithFloatValue:v7];
  float v9 = [(CAMViewfinderViewController *)self _overlayServiceConnection];
  [v9 applyControlUpdate:v8 completion:&__block_literal_global_1184];
}

void __67__CAMViewfinderViewController__handleExposureSliderDidChangeValue___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    double v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __67__CAMViewfinderViewController__handleExposureSliderDidChangeValue___block_invoke_cold_1();
    }
  }
}

- (void)_handleUserChangedToExposureSliderBias:(double)a3 updateSystemOverlayValues:(BOOL)a4
{
  double v5 = fmin(fmax(a3, -2.0), 2.0);
  [(CAMViewfinderViewController *)self _setExposureBias:[(CAMViewfinderViewController *)self _currentMode] forMode:v5];
  double v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityForGraphConfiguration:v6 animated:1];

  id v8 = [(CAMViewfinderViewController *)self _previewViewController];
  float v7 = v5;
  *(float *)&double v9 = v7;
  [v8 setBaselineExposureBias:v9];

  id v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  double v11 = [v10 controlStatusBar];
  id v12 = [v11 exposureBiasIndicator];

  [v12 setExposureBiasValue:v5];
  [(CAMViewfinderViewController *)self _updateExposureSliderForCurrentState];
  [(CAMViewfinderViewController *)self _updateExposureButtonForCurrentState];
}

- (void)_updateExposureButtonForCurrentState
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  double v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  -[CAMViewfinderViewController _exposureBiasForMode:trueVideoEnabled:](self, "_exposureBiasForMode:trueVideoEnabled:", v3, [v4 trueVideoEnabled]);
  double v6 = v5;

  float v7 = +[CAMUserPreferences preferences];
  LODWORD(v3) = [v7 preserveExposure];

  id v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int v9 = [v8 isExposureSliderVisible];

  LODWORD(v8) = [(CAMViewfinderViewController *)self _isExposureBiasNonDefault:v6];
  int v10 = v9 ^ 1;
  double v11 = [(CAMViewfinderViewController *)self _controlDrawer];
  id v12 = [v11 exposureButton];
  [v12 setOn:v8 & (v9 ^ 1)];

  id v13 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v14 = [v13 controlStatusBar];
  id v15 = [v14 exposureBiasIndicator];

  [v15 setExposureBiasValue:v6];
  [v15 setExposureValueVisible:(v3 | v8) & v10];
  [(CAMViewfinderViewController *)self _shadowClippingValue];
  objc_msgSend(v15, "setShadowClipping:");
  [(CAMViewfinderViewController *)self _highlightClippingValue];
  objc_msgSend(v15, "setHighlightClipping:");
}

- (unint64_t)_currentSemanticStyleSupport
{
  int64_t v3 = +[CAMCaptureCapabilities capabilities];
  int v4 = [v3 smartStylesSupported];
  uint64_t v5 = objc_msgSend(v3, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  if (v4)
  {
    if ([(CAMViewfinderViewController *)self _wantsLightingControlForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]]&& [(CAMViewfinderViewController *)self _sanitizedLightingTypeForMode:[(CAMViewfinderViewController *)self _currentMode] device:[(CAMViewfinderViewController *)self _currentDevice]] != 1)
    {
      v5 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = -16;
  }
  else
  {
    uint64_t v6 = -15;
  }
  if ([(CAMViewfinderViewController *)self _resolvedRAWMode] == 1) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & v5;
  int v9 = [(CAMViewfinderViewController *)self _captureController];
  int v10 = [v9 isCapturingBurst];

  if (v10) {
    unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v11 = v8;
  }
  id v12 = [(CAMViewfinderViewController *)self _captureController];
  int v13 = [v12 isCapturingCTMVideo];

  if (v13) {
    unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else {
    unint64_t v14 = v11;
  }

  return v14;
}

- (id)_semanticStyleForPreview
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _currentSemanticStyleSupport];
  return [(CAMViewfinderViewController *)self _semanticStyleForPreviewWithSupport:v3];
}

- (id)_semanticStyleForPreviewWithSupport:(unint64_t)a3
{
  uint64_t v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = [(CAMViewfinderViewController *)self _semanticStyles];
  uint64_t v7 = objc_msgSend(v5, "captureStyleForPreviewWithSupport:styles:selectedStyleIndex:smartStyleSystemStyleIndex:", a3, v6, -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex"), -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex"));

  return v7;
}

- (id)_semanticStyleForCapture
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _currentSemanticStyleSupport];
  return [(CAMViewfinderViewController *)self _semanticStyleForCaptureWithSupport:v3];
}

- (id)_semanticStyleForCaptureWithSupport:(unint64_t)a3
{
  uint64_t v5 = +[CAMCaptureCapabilities capabilities];
  uint64_t v6 = [(CAMViewfinderViewController *)self _semanticStyles];
  uint64_t v7 = objc_msgSend(v5, "captureStyleForCaptureWithSupport:styles:selectedStyleIndex:smartStyleSystemStyleIndex:", a3, v6, -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex"), -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex"));

  return v7;
}

- (void)_updateSemanticStyleControlsForCurrentStateAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v5 = +[CAMCaptureCapabilities capabilities];
  char v6 = [v5 smartStylesSupported];

  if ((v6 & 1) == 0)
  {
    id v20 = [(CAMViewfinderViewController *)self _semanticStyleForCapture];
    uint64_t v7 = [(CAMViewfinderViewController *)self _controlDrawer];
    unint64_t v8 = [v7 semanticStyleControl];
    [v8 setSemanticStyle:v20 animated:v3];

    unint64_t v9 = [(CAMViewfinderViewController *)self _selectedSemanticStyleIndex];
    int v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    unint64_t v11 = [v10 semanticStylePicker];
    [v11 setSelectedStyleIndex:v9];

    id v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    int v13 = [v12 isSemanticStyleControlVisible];

    if (v20) {
      int v14 = [v20 isNeutral] ^ 1;
    }
    else {
      int v14 = 0;
    }
    id v15 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    double v16 = [v15 controlStatusBar];
    id v17 = [v16 semanticStyleIndicator];
    [v17 setSemanticStyle:v20 animated:v3];

    double v18 = [v7 semanticStyleButton];
    [v18 setSemanticStyle:v20 animated:v3];

    double v19 = [v7 semanticStyleButton];
    [v19 setOn:v14 & (v13 ^ 1u)];
  }
}

- (id)_currentSmartStyle
{
  BOOL v3 = +[CAMCaptureCapabilities capabilities];
  int v4 = [v3 smartStylesSupported];

  if (v4)
  {
    uint64_t v5 = +[CAMCaptureCapabilities capabilities];
    uint64_t v6 = objc_msgSend(v5, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

    uint64_t v7 = [(CAMViewfinderViewController *)self _semanticStyleForCaptureWithSupport:v6];
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7;
}

- (void)_updateSmartStyleControlsForCurrentStateAnimateSliders:(BOOL)a3 animateOtherControls:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  uint64_t v7 = +[CAMCaptureCapabilities capabilities];
  uint64_t v8 = objc_msgSend(v7, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if ((v8 & 9) != 0)
  {
    unint64_t v59 = v8;
    id v63 = [(CAMViewfinderViewController *)self _currentSmartStyle];
    uint64_t v9 = [(CAMViewfinderViewController *)self _referenceStyleForSmartStyle:v63];
    HIDWORD(v56) = [v63 isEqualToSmartStyle:v9];
    int64_t v10 = [(CAMViewfinderViewController *)self _sanitizedLightingTypeForMode:[(CAMViewfinderViewController *)self _currentMode] device:[(CAMViewfinderViewController *)self _currentDevice]];
    unint64_t v11 = +[CAMCaptureCapabilities capabilities];
    LODWORD(v56) = [v11 smartStylesSupportedForLightingType:v10];

    int64_t v60 = [(CAMViewfinderViewController *)self _controlDrawer];
    id v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    int v13 = [v12 smartStyleNameBadge];
    [v13 setSmartStyle:v63];

    +[CAMSmartStyleUtilities slider2DValueForStyle:v63 limitRangeForSystemStyles:0];
    double v15 = v14;
    double v17 = v16;
    char v61 = (void *)v9;
    +[CAMSmartStyleUtilities slider2DValueForStyle:v9 limitRangeForSystemStyles:0];
    double v19 = v18;
    double v21 = v20;
    unsigned int v62 = objc_msgSend(MEMORY[0x263F306F8], "canCustomizeCastIntensityForCastType:", objc_msgSend(v63, "castType"));
    int64_t v22 = [v12 smartStylePicker];
    BOOL v23 = [(CAMViewfinderViewController *)self _semanticStyles];
    objc_msgSend(v22, "setNumberOfStyles:", objc_msgSend(v23, "count"));

    objc_msgSend(v22, "setSelectedStyleIndex:animated:", -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex"), 0);
    if ([v22 numberOfStyles])
    {
      unint64_t v24 = 0;
      do
      {
        if (v24 == [(CAMViewfinderViewController *)self _smartStyleSystemStyleIndex])
        {
          int v25 = [MEMORY[0x263F827E8] systemImageNamed:@"dot.square.fill"];
        }
        else
        {
          int v25 = 0;
        }
        uint64_t v26 = [v22 pageControl];
        [v26 setIndicatorImage:v25 forPage:v24];

        ++v24;
      }
      while (v24 < [v22 numberOfStyles]);
    }
    uint64_t v27 = objc_msgSend(v12, "smartStyleSlider2D", v56);
    objc_msgSend(v27, "setValue:animated:", v5, v15, v17);

    double v28 = [v12 smartStyleSlider2D];
    objc_msgSend(v28, "setDefaultValue:animated:", 0, v19, v21);

    uint64_t v29 = [v12 smartStyleSlider2D];
    char v30 = objc_opt_respondsToSelector();

    int v31 = [v12 smartStyleSlider2D];
    uint64_t v32 = v31;
    if (v30)
    {
      uint64_t v33 = [v31 gradientCast];
      int v34 = [v33 isEqualToString:@"None"];

      if (v34)
      {
        int64_t v35 = [v12 smartStyleSlider2D];
        long long v36 = [v35 view];
        [v36 layoutIfNeeded];
      }
      uint64_t v32 = +[CAMCaptureConversions PISemanticStyleCastForCEKCastType:](CAMCaptureConversions, "PISemanticStyleCastForCEKCastType:", [v63 castType]);
      long long v37 = [v12 smartStyleSlider2D];
      [v37 setGradientCast:v32];
    }
    else
    {
      [v63 castType];
      long long v37 = CEKSmartStyleRepresentativeColorForCastType();
      [v32 setBackgroundColor:v37];
    }
    uint64_t v38 = v57 ^ 1u;

    uint64_t v39 = [v12 smartStyleIntensitySlider];
    [v63 castIntensity];
    objc_msgSend(v39, "setValue:notifyObserver:", 0);

    if (v62)
    {
      uint64_t v40 = [v12 smartStyleIntensitySlider];
      char v41 = objc_opt_respondsToSelector();

      if (v41)
      {
        uint64_t v42 = +[CAMCaptureConversions PISemanticStyleCastForCEKCastType:](CAMCaptureConversions, "PISemanticStyleCastForCEKCastType:", [v63 castType]);
        uint64_t v43 = [v12 smartStyleIntensitySlider];
        [v43 setGradientCast:v42];
      }
      else
      {
        [v63 castType];
        uint64_t v42 = CEKSmartStyleIntensitySliderGradientColorsForCastType();
        uint64_t v43 = [v12 smartStyleIntensitySlider];
        [v43 setColors:v42];
      }
    }
    [v12 setWantsSmartStyleIntensitySlider:v62 animated:v5];
    [v12 setWantsSmartStyleResetButton:0 animated:v4];
    [v12 setWantsSmartStylePicker:(v59 >> 3) & 1 animated:v4];
    uint64_t v44 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    int v45 = [v44 smartStyleControlsVisible];

    if (v63) {
      int v46 = [v63 isNeutral] ^ 1;
    }
    else {
      int v46 = 0;
    }
    int v47 = [v60 smartStyleButton];
    [v47 setSmartStyle:v63 animated:v4];

    int64_t v48 = [v60 smartStyleButton];
    [v48 setShowDisabled:v38 animated:v4];

    char v49 = [v60 smartStyleButton];
    [v49 setOn:v46 & (v45 ^ 1u)];

    char v50 = [v12 controlStatusBar];
    uint64_t v51 = [v50 smartStyleIndicator];
    [(CAMViewfinderViewController *)self _updateSmartStyleStatusIndicator:v51 disableSmartStyles:v38 animated:v4];

    char v52 = [v12 spotlightSmartStyleStatusIndicator];
    [(CAMViewfinderViewController *)self _updateSmartStyleStatusIndicator:v52 disableSmartStyles:v38 animated:v4];

    char v53 = [v12 smartStyleValuesPlatterView];
    [v63 toneBias];
    objc_msgSend(v53, "setTone:");
    [v63 colorBias];
    objc_msgSend(v53, "setColor:");
    [v63 castIntensity];
    objc_msgSend(v53, "setPalette:");
    [v53 setHidePaletteLabel:v62 ^ 1];
    [v53 setHideResetButton:0];
    [v53 setIsResetButtonEnabled:v58 ^ 1u];
    uint64_t v54 = [v63 presetType];
    uint64_t v55 = [v12 smartStyleCategoryInstructionLabel];
    [v55 setPresetType:v54];
  }
}

- (void)_updateSmartStyleStatusIndicator:(id)a3 disableSmartStyles:(BOOL)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v8 = a3;
  if (v8)
  {
    id v15 = v8;
    uint64_t v9 = [(CAMViewfinderViewController *)self _currentSmartStyle];
    int64_t v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    char v11 = [v10 smartStyleControlsVisible];

    id v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    int v13 = [v12 smartStyleSlider2D];

    [v15 setSmartStyle:v9 animated:v5];
    [v15 setShowDisabled:v6 animated:v5];
    objc_msgSend(v15, "setShowValueDot:", objc_msgSend(v13, "isActive") ^ 1);
    BOOL v14 = (v11 & 1) != 0
       || [(CAMViewfinderViewController *)self _isAnimatingSmartStyleIndicator];
    [v15 setActive:v14];

    id v8 = v15;
  }
}

- (id)_referenceStyleForSmartStyle:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _semanticStyles];
  uint64_t v6 = [v5 indexOfObject:v4];

  if (v6 == 0x7FFFFFFFFFFFFFFFLL
    || v6 != [(CAMViewfinderViewController *)self _smartStyleSystemStyleIndex])
  {
    id v8 = objc_msgSend(objc_alloc(MEMORY[0x263F306F8]), "initWithPresetType:", objc_msgSend(v4, "presetType"));
  }
  else
  {
    uint64_t v7 = +[CAMUserPreferences preferences];
    id v8 = [v7 lastReadSystemStyle];
  }
  return v8;
}

- (void)_handleSemanticStyleControlDidChangeValue:(id)a3
{
  id v8 = [a3 semanticStyle];
  id v4 = [(CAMViewfinderViewController *)self _semanticStyleForCapture];
  if (v4)
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _semanticStyles];
    objc_msgSend(v5, "replaceObjectAtIndex:withObject:", -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex"), v8);
  }
  uint64_t v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v6 reloadSemanticStyleBadgesDelayIfNeeded:1];

  [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:0];
  uint64_t v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v7 requestPreviewUpdateForSemanticStyleAnimated:0];
}

- (void)_updatePreviewSemanticStyleAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v4 requestPreviewUpdateForSemanticStyleAnimated:v3];
}

- (void)_updateSmartStyleOnSession
{
  id v5 = +[CAMCaptureCapabilities capabilities];
  if ([v5 smartStylesSupported]
    && ![(CAMViewfinderViewController *)self _isReconfiguring]
    && ![(CAMViewfinderViewController *)self _hasInFlightConfiguration]
    && [(CAMViewfinderViewController *)self _completedInitialConfiguration])
  {
    BOOL v3 = [(CAMViewfinderViewController *)self _semanticStyleForPreview];
    id v4 = [(CAMViewfinderViewController *)self _captureController];
    [v4 changeToSmartStyle:v3];
  }
}

- (void)_handleSmartStylePickerSwipe:(id)a3
{
  id v12 = a3;
  id v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v5 = [v4 smartStylePicker];

  uint64_t v6 = [v5 effectiveUserInterfaceLayoutDirection];
  uint64_t v7 = [v5 selectedStyleIndex];
  if ([v12 direction] == 1)
  {
    if (v6 == 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 + v7;
    if (v8 + v7 < 0) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v10 = [v12 direction];
  unint64_t v11 = v7 - 1;
  if (v6 != 1) {
    unint64_t v11 = v7 + 1;
  }
  if (v10 == 2) {
    unint64_t v9 = v11;
  }
  else {
    unint64_t v9 = v7;
  }
  if ((v9 & 0x8000000000000000) == 0)
  {
LABEL_13:
    if (v9 < [v5 numberOfStyles])
    {
      [v5 setSelectedStyleIndex:v9 animated:1];
      [(CAMViewfinderViewController *)self _updateSelectedSmartStyleFromPicker];
    }
  }
LABEL_15:
}

- (void)_startPulsingAnimationForSmartStyleIndicator:(id)a3
{
  id v3 = a3;
  memset(&v9, 0, sizeof(v9));
  CGAffineTransformMakeScale(&v9, 1.3, 1.3);
  id v4 = (void *)MEMORY[0x263F82E00];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  CGAffineTransform v8 = v9;
  v6[2] = __76__CAMViewfinderViewController__startPulsingAnimationForSmartStyleIndicator___block_invoke;
  v6[3] = &unk_263FA2270;
  id v7 = v3;
  id v5 = v3;
  [v4 animateWithDuration:30 delay:v6 options:0 animations:1.0 completion:0.8];
}

uint64_t __76__CAMViewfinderViewController__startPulsingAnimationForSmartStyleIndicator___block_invoke(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 72);
  [*(id *)(a1 + 32) setTransform:v4];
  return [*(id *)(a1 + 32) setActive:1];
}

- (void)_stopPulsingAnimationForSmartStyleIndicator:(id)a3
{
  id v3 = a3;
  id v4 = (void *)MEMORY[0x263F82E00];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __75__CAMViewfinderViewController__stopPulsingAnimationForSmartStyleIndicator___block_invoke;
  v6[3] = &unk_263FA0208;
  id v7 = v3;
  id v5 = v3;
  [v4 animateWithDuration:6 delay:v6 options:0 animations:0.3 completion:0.0];
}

uint64_t __75__CAMViewfinderViewController__stopPulsingAnimationForSmartStyleIndicator___block_invoke(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 32);
  long long v3 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
  v5[0] = *MEMORY[0x263F000D0];
  v5[1] = v3;
  v5[2] = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
  [v2 setTransform:v5];
  return [*(id *)(a1 + 32) setActive:0];
}

- (BOOL)_isAnimatingSmartStyleIndicator
{
  long long v2 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  long long v3 = [v2 controlStatusBar];
  id v4 = [v3 smartStyleIndicator];

  memset(&v9, 0, sizeof(v9));
  CGAffineTransformMakeScale(&v9, 1.3, 1.3);
  if (v4) {
    [v4 transform];
  }
  else {
    memset(&t1, 0, sizeof(t1));
  }
  CGAffineTransform v7 = v9;
  BOOL v5 = CGAffineTransformEqualToTransform(&t1, &v7);

  return v5;
}

- (void)_startSmartStyleOnboardingControlRevealAnimation
{
  v19[3] = *MEMORY[0x263EF8340];
  id v3 = objc_alloc(MEMORY[0x263F306E8]);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  v18[2] = __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke;
  v18[3] = &unk_263FA0430;
  void v18[4] = self;
  id v4 = (void *)[v3 initWithWithIdentifier:@"OpenDrawerAfterDelay" duration:0 updateHandler:v18 completion:0.55];
  v19[0] = v4;
  id v5 = objc_alloc(MEMORY[0x263F306E8]);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3221225472;
  v17[2] = __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_2;
  v17[3] = &unk_263FA0430;
  void v17[4] = self;
  uint64_t v6 = (void *)[v5 initWithWithIdentifier:@"ExpandStylesControlsAfterDelay" duration:0 updateHandler:v17 completion:0.75];
  v19[1] = v6;
  id v7 = objc_alloc(MEMORY[0x263F306E8]);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3221225472;
  v16[2] = __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_3;
  v16[3] = &unk_263FA0430;
  void v16[4] = self;
  CGAffineTransform v8 = (void *)[v7 initWithWithIdentifier:@"StartPulsingAfterDelay" duration:0 updateHandler:v16 completion:0.5];
  v19[2] = v8;
  CGAffineTransform v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v19 count:3];

  objc_initWeak(&location, self);
  id v10 = objc_alloc(MEMORY[0x263F30670]);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  void v13[2] = __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_4;
  v13[3] = &unk_263FA1D38;
  objc_copyWeak(&v14, &location);
  unint64_t v11 = (void *)[v10 initWithAnimations:v9 completionHandler:v13];
  [(CAMViewfinderViewController *)self set_smartStyleOnboardingControlDrawerAnimationSequence:v11];

  id v12 = [(CAMViewfinderViewController *)self _smartStyleOnboardingControlDrawerAnimationSequence];
  [v12 start];

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke(uint64_t a1, int a2)
{
  if (a2)
  {
    id v2 = [*(id *)(a1 + 32) _fullscreenViewfinder];
    [v2 setControlDrawerExpanded:1 forReason:10 animated:1];
  }
}

void __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
  {
    id v2 = [*(id *)(a1 + 32) _fullscreenViewfinder];
    [v2 presentControlDrawerModally:1 forReason:10 controlType:11];
  }
}

void __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_3(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) _fullscreenViewfinder];
    id v2 = [v3 smartStyleSlider2D];
    [v2 setPulsingValueIndicator:1];
  }
}

void __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "set_smartStyleOnboardingControlDrawerAnimationSequence:", 0);
}

- (void)_stopSmartStyleOnboardingControlRevealAnimation
{
  id v3 = [(CAMViewfinderViewController *)self _smartStyleOnboardingControlDrawerAnimationSequence];

  if (v3)
  {
    id v4 = [(CAMViewfinderViewController *)self _smartStyleOnboardingControlDrawerAnimationSequence];
    [v4 stopAllAnimations];

    [(CAMViewfinderViewController *)self set_smartStyleOnboardingControlDrawerAnimationSequence:0];
  }
}

- (id)_targetLightingControl
{
  id v3 = [(CAMViewfinderViewController *)self _lightingControl];
  if (!v3)
  {
    id v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    id v3 = [v4 lightingControl];
  }
  return v3;
}

- (void)_updateLightingUIForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v17 = a3;
  uint64_t v6 = +[CAMCaptureCapabilities capabilities];
  unint64_t v7 = [v17 device] - 1;
  if (v7 > 0xA) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = qword_209C794E8[v7];
  }
  int64_t v9 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", [v17 mode], objc_msgSend(v17, "device"));
  if (objc_msgSend(v6, "isLightingControlSupportedForMode:", objc_msgSend(v17, "mode")))
  {
    id v10 = [(CAMViewfinderViewController *)self _previewViewController];
    [v10 setLightingType:v9];
  }
  if ([(CAMViewfinderViewController *)self _wantsLightingControlForGraphConfiguration:v17])
  {
    unint64_t v11 = [(CAMViewfinderViewController *)self _lightingNameBadge];
    id v12 = [(CAMViewfinderViewController *)self _targetLightingControl];
    int v13 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    id v14 = v13;
    if (v11)
    {
      if (!v9)
      {
LABEL_10:
        objc_msgSend(v12, "setLightingEffectSet:animated:", objc_msgSend(v6, "supportedEffectSetForDevicePosition:", v8), v4);
        [v12 setSelectedLightingType:v9 animated:v4];
        int64_t v15 = [(CAMViewfinderViewController *)self _lightingControlLayoutPositionForGraphConfiguration:v17];
        if (v15 == 2) {
          uint64_t v16 = 2;
        }
        else {
          uint64_t v16 = v15 == 1;
        }
        [v12 setCollapsedSelectionCenterPointEdgeInset:44.0];
        [v12 setCollapsedControlLocation:v16 animated:v4];

        goto LABEL_14;
      }
    }
    else
    {
      unint64_t v11 = [v13 lightingNameBadge];
      if (!v9) {
        goto LABEL_10;
      }
    }
    [v11 setLightingType:v9];
    goto LABEL_10;
  }
LABEL_14:
}

- (int64_t)_sanitizedLightingTypeForMode:(int64_t)a3 device:(int64_t)a4
{
  if ((unint64_t)(a4 - 1) > 0xA) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = qword_209C794E8[a4 - 1];
  }
  unint64_t v7 = +[CAMCaptureCapabilities capabilities];
  if ([(CAMViewfinderViewController *)self _canUseFilteringForLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]]&& [(CAMViewfinderViewController *)self _wantsLightingControlForMode:a3 devicePosition:v6])
  {
    int64_t v8 = [(CAMViewfinderViewController *)self _portraitModeLightingEffectType];
    unint64_t v9 = [v7 supportedEffectSetForDevicePosition:v6];
    if (v9 > 3) {
      id v10 = 0;
    }
    else {
      id v10 = (void *)qword_263FA25B0[v9];
    }
    id v12 = [NSNumber numberWithInteger:v8];
    char v13 = [v10 containsObject:v12];

    if ((v13 & 1) == 0) {
      int64_t v8 = +[CAMUserPreferences defaultLightingTypeForMode:a3];
    }
  }
  else
  {
    int64_t v8 = 0;
  }

  return v8;
}

- (void)_setLightingType:(int64_t)a3 forMode:(int64_t)a4
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v7 = +[CAMCaptureCapabilities capabilities];
  int v8 = [v7 isLightingControlSupportedForMode:a4];

  if (v8)
  {
    [(CAMViewfinderViewController *)self _setPortraitModeLightingEffectType:a3];
  }
  else if (a3)
  {
    unint64_t v9 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 134217984;
      int64_t v11 = a4;
      _os_log_impl(&dword_2099F8000, v9, OS_LOG_TYPE_DEFAULT, "Trying to set filter type on unhandled mode %ld", (uint8_t *)&v10, 0xCu);
    }
  }
  [(CAMViewfinderViewController *)self _updateTopBarForLightingType:a3];
}

- (void)_updateTopBarForLightingType:(int64_t)a3
{
  id v5 = +[CAMCaptureCapabilities capabilities];
  int v6 = [v5 isPortraitEffectIntensitySupportedForLightingType:a3];

  unint64_t v7 = [(CAMViewfinderViewController *)self _topBar];
  int v8 = v7;
  if (v6)
  {
    unint64_t v9 = [(CAMViewfinderViewController *)self _intensityButton];

    [(CAMViewfinderViewController *)self _createIntensityButtonIfNecessary];
    int v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v11 = [(CAMViewfinderViewController *)self _shouldHideIntensityButtonForGraphConfiguration:v10];

    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    v16[2] = __60__CAMViewfinderViewController__updateTopBarForLightingType___block_invoke;
    v16[3] = &unk_263FA02A8;
    void v16[4] = self;
    BOOL v17 = v11;
    [MEMORY[0x263F82E00] animateWithDuration:v16 animations:0.25];
    uint64_t v12 = [(CAMViewfinderViewController *)self _intensityButton];
    if (v9)
    {
      char v13 = [v8 intensityButton];

      id v14 = [(CAMViewfinderViewController *)self _intensityButton];
      [v8 setIntensityButton:v14];

      if (v12 == v13) {
        goto LABEL_9;
      }
    }
    else
    {
      [v8 setIntensityButton:v12];
    }
  }
  else
  {
    int64_t v15 = [v7 intensityButton];

    [v8 setIntensityButton:0];
    [(CAMViewfinderViewController *)self _setShowingPortraitIntensitySlider:0 animated:1];
    if (!v15) {
      goto LABEL_9;
    }
  }
  objc_msgSend(v8, "configureForMode:animated:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1);
LABEL_9:
}

void __60__CAMViewfinderViewController__updateTopBarForLightingType___block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    double v1 = 0.0;
  }
  else {
    double v1 = 1.0;
  }
  id v2 = [*(id *)(a1 + 32) _intensityButton];
  [v2 setAlpha:v1];
}

- (void)_updateLightingControlFadesForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v12 = a3;
  int v6 = [(CAMViewfinderViewController *)self _targetLightingControl];
  uint64_t v7 = [v12 mode];
  if (v7 == 6)
  {
    if ([(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v12])
    {
      int v10 = [(CAMViewfinderViewController *)self _zoomControl];
      int v11 = [v10 isPlatterExpanded];

      uint64_t v9 = 0;
      if (v11) {
        uint64_t v8 = 2;
      }
      else {
        uint64_t v8 = 1;
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
  }
  else
  {
    if (v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 2;
    }
    if (v7) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 2;
    }
  }
  objc_msgSend(v6, "setCollapsedItemFading:animated:", v8, v9, v4);
}

- (void)wheelScrubberViewDidChangeSelectedIndex:(id)a3
{
  id v6 = a3;
  id v4 = [(CAMViewfinderViewController *)self _targetFilterScrubberView];

  id v5 = v6;
  if (v4 == v6)
  {
    -[CAMViewfinderViewController _applySelectedEffectFilterType:](self, "_applySelectedEffectFilterType:", -[CAMViewfinderViewController _filterTypeForItemIndex:](self, "_filterTypeForItemIndex:", [v6 selectedIndex]));
    id v5 = v6;
  }
}

- (void)_applySelectedEffectFilterType:(int64_t)a3
{
  [(CAMViewfinderViewController *)self _setEffectFilterType:a3 forMode:[(CAMViewfinderViewController *)self _currentMode]];
  [(CAMViewfinderViewController *)self _updateCurrentPreviewFiltersOnCaptureController];
  [(CAMViewfinderViewController *)self _updateFilterButtonOnState];
  [(CAMViewfinderViewController *)self _updateFilterNameBadgeAnimated:1];
}

- (void)wheelScrubberView:(id)a3 updateCell:(id)a4 forItemAtIndex:(unint64_t)a5
{
  id v20 = a4;
  id v8 = a3;
  uint64_t v9 = [v8 itemCount] - 1;
  [MEMORY[0x263F30718] defaultScreenScaleContentSize];
  double v11 = v10;
  double v13 = v12;
  id v14 = [v20 itemView];
  int64_t v15 = [v14 layer];

  uint64_t v16 = [(CAMViewfinderViewController *)self _filterScrubberLayerContents];
  [v15 setContents:v16];

  objc_msgSend(MEMORY[0x263EFA6B8], "contentsRectForFilterAtIndex:thumbnailSize:filterCount:", a5, v9, v11, v13);
  objc_msgSend(v15, "setContentsRect:");
  BOOL v17 = [(CAMViewfinderViewController *)self _controlDrawer];
  id v18 = [v17 filterScrubberView];

  if (v18 == v8)
  {
    double v19 = +[CAMEffectFilterManager displayNameForType:[(CAMViewfinderViewController *)self _filterTypeForItemIndex:a5]];
    [v20 setAccessibilityLabel:v19];
  }
}

- (BOOL)_isLowLightUpdatingDeferred
{
  id v3 = [(CAMViewfinderViewController *)self _currentStillImageCaptureMomentSettings];

  BOOL result = [(CAMViewfinderViewController *)self _isLowLightCaptureCanceling];
  if (v3) {
    return 1;
  }
  return result;
}

- (void)_updateLowLightSlider
{
  if (![(CAMViewfinderViewController *)self _isLowLightUpdatingDeferred])
  {
    id v3 = [(CAMViewfinderViewController *)self _controlDrawer];
    id v4 = [v3 lowLightSlider];

    objc_msgSend(v4, "setLowLightMode:", -[CAMViewfinderViewController _resolvedLowLightControlMode](self, "_resolvedLowLightControlMode"));
    [(CAMViewfinderViewController *)self _lowLightDurationMapping];
    objc_msgSend(v4, "setDurationMapping:");
    objc_msgSend(v4, "setLowLightActive:", -[CAMViewfinderViewController _isLowLightActiveForCurrentSettings](self, "_isLowLightActiveForCurrentSettings"));
  }
}

- (void)_updateLowLightControlsAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  if (![(CAMViewfinderViewController *)self _isLowLightUpdatingDeferred])
  {
    int64_t v5 = [(CAMViewfinderViewController *)self _resolvedLowLightMode];
    BOOL v6 = [(CAMViewfinderViewController *)self _resolvedLowLightControlMode] == 0;
    BOOL v7 = [(CAMViewfinderViewController *)self _isLowLightActiveForCurrentSettings];
    id v14 = [(CAMViewfinderViewController *)self _controlDrawer];
    id v8 = [v14 lowLightButton];
    [v8 setOn:v7];
    [v8 setDisabled:v6 animated:v3];
    uint64_t v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    double v10 = [v9 controlStatusBar];
    double v11 = [v10 lowLightIndicator];

    [v11 setShowingValue:v7 animated:v3];
    [v11 setLowLightMode:v5];
    [v11 setLowLightDisabled:v6 animated:v3];
    if (v7)
    {
      [(CAMViewfinderViewController *)self _lowLightDurationMapping];
      if (v5 != 1) {
        double v12 = 0.0;
      }
      if (v5 == 2) {
        double v12 = v13;
      }
      [v11 setDuration:v12];
    }
  }
}

- (BOOL)_isLowLightActiveForCurrentSettings
{
  return (unint64_t)([(CAMViewfinderViewController *)self _resolvedLowLightMode] - 1) < 2;
}

- (void)_handleLowLightSliderDidChangeValue:(id)a3
{
  uint64_t v4 = [a3 lowLightMode];
  [(CAMViewfinderViewController *)self _handleUserChangedToNightMode:v4];
}

- (void)_handleUserChangedToNightMode:(unint64_t)a3
{
  -[CAMViewfinderViewController _setDesiredLowLightControlMode:](self, "_setDesiredLowLightControlMode:");
  if (a3) {
    [(CAMViewfinderViewController *)self _setLowLightConflicts:0];
  }
  [(CAMViewfinderViewController *)self _updateResolvedLowLightModeAnimated:1];
}

- (void)_resetLowLightDurationMappingAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  -[CAMViewfinderViewController _setLowLightDurationMapping:](self, "_setLowLightDurationMapping:", 1.0, 5.0);
  [(CAMViewfinderViewController *)self _updateLowLightSlider];
  [(CAMViewfinderViewController *)self _updateLowLightControlsAnimated:v3];
  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v5 isCapturing:0 animated:v3];
}

- (BOOL)_isExpectedLowLightDurationCancelable
{
  int64_t v3 = [(CAMViewfinderViewController *)self _resolvedLowLightMode];
  [(CAMViewfinderViewController *)self _lowLightDurationMapping];
  if (v3 != 1) {
    double v4 = 0.0;
  }
  if (v3 == 2) {
    double v4 = v5;
  }
  return v4 > 3.5;
}

- (void)_updateResolvedLowLightModeAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(CAMViewfinderViewController *)self _isLowLightUpdatingDeferred]) {
    return;
  }
  id v17 = [(CAMViewfinderViewController *)self _captureController];
  uint64_t v5 = [v17 lowLightStatus];
  if (v5 == 2)
  {
    BOOL v8 = 0;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5 == -1)
      {
        int64_t v6 = [(CAMViewfinderViewController *)self _resolvedLowLightMode];
        BOOL v7 = v6 != 0;
        BOOL v8 = v6 == 0;
      }
      else
      {
        BOOL v7 = 0;
        BOOL v8 = 1;
      }
      goto LABEL_10;
    }
    BOOL v8 = 1;
  }
  BOOL v7 = 1;
LABEL_10:
  unint64_t v9 = +[CAMConflictingControlConfiguration resolveDesiredLowLightControlMode:[(CAMViewfinderViewController *)self _desiredLowLightControlMode] lowLightConflicts:[(CAMViewfinderViewController *)self _lowLightConflicts] resolvedFlashMode:[(CAMViewfinderViewController *)self _resolvedFlashMode]];
  double v10 = +[CAMCaptureCapabilities capabilities];
  int v11 = objc_msgSend(v10, "isLowLightSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  int v12 = 0;
  if (v11 && v7 && v9) {
    int v12 = [v17 isCapturingBurst] ^ 1;
  }
  if (v9 == 2)
  {
    if (v12) {
      uint64_t v13 = 2;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else if (v9 == 1 && ((v12 ^ 1 | v8) & 1) == 0)
  {
    uint64_t v13 = [v17 isCapturingLivePhotoVideo] ^ 1;
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (v13 != [(CAMViewfinderViewController *)self _resolvedLowLightMode])
  {
    id v14 = [(CAMViewfinderViewController *)self _captureController];
    [v14 changeToLowLightMode:v13];
  }
  [(CAMViewfinderViewController *)self _setResolvedLowLightMode:v13];
  [(CAMViewfinderViewController *)self _setResolvedLowLightControlMode:v9];
  [(CAMViewfinderViewController *)self _updateLowLightSlider];
  [(CAMViewfinderViewController *)self _updateLowLightControlsAnimated:v3];
  [(CAMViewfinderViewController *)self _updateControlsDisabledByLowLightAnimated:v3];
  [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
  int64_t v15 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v15 animated:v3];

  uint64_t v16 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateShutterButtonForGraphConfiguration:v16 isCapturing:0 animated:v3];
}

- (int64_t)_lowLightModeForMode:(int64_t)a3 captureMode:(int64_t)a4 device:(int64_t)a5 isBurst:(BOOL)a6
{
  BOOL v6 = a6;
  int v11 = +[CAMCaptureCapabilities capabilities];
  int v12 = [v11 isLowLightSupportedForMode:a4 device:a5];

  uint64_t v13 = [(CAMViewfinderViewController *)self _captureController];
  if (([v13 isCapturingVideo] & 1) != 0
    || ([v13 isCapturingPanorama] & 1) != 0
    || ([v13 isCapturingBurst] & 1) != 0)
  {
    int v14 = 1;
  }
  else
  {
    int v14 = [v13 isCapturingTimelapse];
  }
  if (v12 ^ 1 | v14 | v6) {
    a3 = 0;
  }

  return a3;
}

- (void)_updateLowLightConflict:(unint64_t)a3 isConflicting:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v7 = +[CAMCaptureCapabilities capabilities];
  int v8 = objc_msgSend(v7, "isLowLightSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  if (v8)
  {
    unint64_t v9 = [(CAMViewfinderViewController *)self _lowLightConflicts];
    if (v4) {
      unint64_t v10 = v9 | a3;
    }
    else {
      unint64_t v10 = v9 & ~a3;
    }
    [(CAMViewfinderViewController *)self _setLowLightConflicts:v10];
    [(CAMViewfinderViewController *)self _updateResolvedLowLightModeAnimated:1];
  }
}

- (BOOL)_isLowLightCaptureCanceling
{
  id v2 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  char v3 = [v2 hasClosedViewfinderReason:13];

  return v3;
}

- (void)_updateControlsDisabledByLowLightAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  [(CAMViewfinderViewController *)self _updateFlashButtonForMode:[(CAMViewfinderViewController *)self _currentMode] animated:a3];
  [(CAMViewfinderViewController *)self _updateLivePhotoButtonAnimated:v3];
  [(CAMViewfinderViewController *)self _updateHDRButtonAnimated:v3];
}

- (void)_updateAutoMacroButtonAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _desiredMacroMode] == 1;
  id v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v6 = [v7 autoMacroButton];
  [v6 setActive:v5 animated:v3];
}

- (void)_handleAutoMacroButtonTapped:(id)a3
{
  [(CAMViewfinderViewController *)self _setDesiredMacroMode:[(CAMViewfinderViewController *)self _desiredMacroMode] == 0];
  [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:1];
  [(CAMViewfinderViewController *)self _updateAutoMacroButtonAnimated:1];
}

- (void)_updateResolvedMacroModeAndUpdateFallbackPrimaryConstituentDeviceSelection:(BOOL)a3
{
  HIDWORD(v14) = a3;
  id v16 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v4 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  uint64_t v6 = v5;
  int64_t v7 = [(CAMViewfinderViewController *)self _desiredMacroMode];
  uint64_t v8 = [v16 mode];
  uint64_t v9 = [v16 device];
  uint64_t v10 = [v16 videoConfiguration];
  uint64_t v11 = [v16 videoStabilizationStrength];
  BOOL v12 = [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion];
  BYTE1(v14) = [v16 enableStereoVideoCapture];
  LOBYTE(v14) = v12;
  int64_t v13 = +[CAMConflictingControlConfiguration resolveDesiredMacroMode:v7 forMode:v8 device:v9 videoConfiguration:v10 videoStabilizationStrength:v11 photoFormat:v4 optionalDepthEffectEnabled:v6 spatialVideoEnabled:v14];
  if (v13 != [(CAMViewfinderViewController *)self _resolvedMacroMode])
  {
    [(CAMViewfinderViewController *)self _setResolvedMacroMode:v13];
    if (v15) {
      [(CAMViewfinderViewController *)self _updateFallbackPrimaryConstituentDeviceSelectionOnCaptureController];
    }
  }
}

- (void)_updateFallbackPrimaryConstituentDeviceSelectionOnCaptureController
{
  id v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v3 = +[CAMCaptureCapabilities capabilities];
  uint64_t v4 = objc_msgSend(v3, "fallbackPrimaryConstituentDeviceSelectionForMode:device:videoConfiguration:videoStabilizationStrength:macroMode:spatialVideoEnabled:", objc_msgSend(v6, "mode"), objc_msgSend(v6, "device"), objc_msgSend(v6, "videoConfiguration"), objc_msgSend(v6, "videoStabilizationStrength"), -[CAMViewfinderViewController _resolvedMacroMode](self, "_resolvedMacroMode"), objc_msgSend(v6, "enableStereoVideoCapture"));

  uint64_t v5 = [(CAMViewfinderViewController *)self _captureController];
  [v5 setFallbackPrimaryConstituentDeviceSelection:v4];
}

- (BOOL)_depthEffectEnabledFromSuggestion
{
  if (self->__depthEffectEnabledFromSuggestion) {
    return 1;
  }
  BOOL v3 = +[CAMCaptureCapabilities capabilities];
  char v4 = [v3 featureDevelopmentForceDepthEffectInPhotoMode];

  return v4;
}

- (void)_updateDepthEffectSuggestionButtonAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion])
  {
    unint64_t v5 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus];
    uint64_t v6 = 1;
    if (((1 << v5) & 0x6202) == 0) {
      uint64_t v6 = 2;
    }
    if (v5 <= 0xE) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 2;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v8 = [v9 depthEffectSuggestionButton];
  [v8 setMode:v7 animated:v3];
}

- (void)_handleDepthEffectSuggestionButtonTapped:(id)a3
{
  uint64_t v4 = [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion] ^ 1;
  [(CAMViewfinderViewController *)self _updateDepthEffectSuggestionEnabled:v4];
}

- (void)_updateDepthEffectSuggestionEnabled:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion] != a3)
  {
    [(CAMViewfinderViewController *)self set_depthEffectEnabledFromSuggestion:v3];
    [(CAMViewfinderViewController *)self _updateDepthEffectSuggestionButtonAnimated:1];
    unint64_t v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    uint64_t v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [(CAMViewfinderViewController *)self _updateZoomControlLayoutForGraphConfiguration:v5 fromGraphConfiguration:v6 animated:1];

    [(CAMViewfinderViewController *)self _resolveAndUpdatePotentiallyConflictingControls:1 animated:1];
    [(CAMViewfinderViewController *)self _processTextRegionResults];
    uint64_t v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [(CAMViewfinderViewController *)self _updateLightingUIForGraphConfiguration:v7 animated:0];

    uint64_t v8 = +[CAMCaptureCapabilities capabilities];
    LOBYTE(v6) = [v8 portraitInPhotoModeBehavior];

    if ((v6 & 4) != 0)
    {
      id v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _configureZoomControlForGraphConfiguration:v9 animated:1];
    }
    if ([(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion])
    {
      id v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:v10];
    }
  }
}

- (BOOL)_shouldUsePhotoModePortraitEffect
{
  BOOL v3 = [(CAMViewfinderViewController *)self _captureController];
  uint64_t v4 = [v3 isCapturingBurst];

  return [(CAMViewfinderViewController *)self _shouldUsePhotoModePortraitEffectIsBurst:v4];
}

- (BOOL)_shouldUsePhotoModePortraitEffectIsBurst:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion];
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldUseDepthFromSuggestionForCurrentConfigurationIsBurst:v3];
  uint64_t v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  char v8 = [v7 isSemanticStyleControlVisible];

  if (v5) {
    return v6 & (v8 ^ 1);
  }
  else {
    return 0;
  }
}

- (BOOL)_shouldUseDepthFromSuggestionForCurrentConfigurationIsBurst:(BOOL)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _isDepthSuggestionAllowedForCurrentConfigurationIsBurst:a3];
  return v4 & [(CAMViewfinderViewController *)self _isDepthSuggestedOrEnabledForShallowDepthOfFieldStatus:[(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus]];
}

- (BOOL)_isDepthSuggestionAllowedForCurrentConfigurationIsBurst:(BOOL)a3
{
  BOOL v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v6 = +[CAMCaptureCapabilities capabilities];
  uint64_t v7 = [v5 mode];
  unint64_t v8 = [v5 device] - 1;
  BOOL v26 = a3;
  if (v8 > 0xA) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = qword_209C794E8[v8];
  }
  uint64_t v10 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
  int v12 = objc_msgSend(v6, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v7, v9, v10, v11);

  int64_t v13 = [(CAMViewfinderViewController *)self _captureController];
  int v14 = [v13 isCapturingVideo];
  int v15 = +[CAMCaptureCapabilities capabilities];
  int v16 = objc_msgSend(v15, "isSuperWideAutoMacroSupportedForMode:device:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", objc_msgSend(v5, "mode"), objc_msgSend(v5, "device"), objc_msgSend(v5, "videoConfiguration"), objc_msgSend(v5, "videoStabilizationStrength"), objc_msgSend(v5, "enableStereoVideoCapture"));

  id v17 = +[CAMUserPreferences preferences];
  int v18 = [v17 isSuperWideAutoMacroControlAllowed];

  if ([(CAMViewfinderViewController *)self _resolvedMacroMode] == 1)
  {
    double v19 = [(CAMViewfinderViewController *)self _captureController];
    int v20 = [v19 isAutoMacroSuggested];

    int v21 = v20 ^ 1;
  }
  else
  {
    int v21 = 1;
  }
  int64_t v22 = [(CAMViewfinderViewController *)self _resolvedRAWMode];
  if ((v16 & v18) != 1 || v21)
  {
    BOOL v24 = [(CAMViewfinderViewController *)self _shouldDisableDepthSuggestionForNightModeForConfiguration:v5];
    BOOL v23 = 0;
    if (((v12 ^ 1 | v14) & 1) == 0 && !v26) {
      BOOL v23 = v22 != 1 && !v24;
    }
  }
  else
  {
    BOOL v23 = 0;
  }

  return v23;
}

- (BOOL)_shouldDisableDepthSuggestionForNightModeForConfiguration:(id)a3
{
  id v4 = a3;
  if ([(CAMViewfinderViewController *)self _isLowLightActiveForCurrentSettings])
  {
    BOOL v5 = +[CAMCaptureCapabilities capabilities];
    int v6 = objc_msgSend(v5, "isNightModeWithDepthSupportedForMode:device:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "device"));

    if (!v6)
    {
      LOBYTE(v9) = 1;
      goto LABEL_7;
    }
    uint64_t v7 = [v4 mode];
    uint64_t v8 = [v4 device];
    [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
    if (!-[CAMViewfinderViewController _isNightModePortraitAvailableForMode:device:zoomFactor:](self, "_isNightModePortraitAvailableForMode:device:zoomFactor:", v7, v8))
    {
      BOOL v9 = ![(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion];
      goto LABEL_7;
    }
  }
  LOBYTE(v9) = 0;
LABEL_7:

  return v9;
}

- (BOOL)_isNightModePortraitAvailableForMode:(int64_t)a3 device:(int64_t)a4 zoomFactor:(double)a5
{
  uint64_t v8 = +[CAMCaptureCapabilities capabilities];
  if ([v8 isNightModeWithDepthSupportedForMode:a3 device:a4])
  {
    [v8 superWideToWideZoomFactorForDevicePosition:0];
    BOOL v10 = v9 * 1.1 > a5 && v9 <= a5;
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

- (BOOL)_isDepthSuggestedOrEnabledForShallowDepthOfFieldStatus:(int64_t)a3
{
  BOOL v4 = (unint64_t)a3 < 0xF;
  unsigned int v5 = v4 & (0x6A02u >> a3);
  unsigned int v6 = v4 & (0x7A02u >> a3);
  uint64_t v7 = [(CAMViewfinderViewController *)self _previewViewController];
  char v8 = v6 & [v7 isShowingPointIndicator];

  double v9 = +[CAMCaptureCapabilities capabilities];
  LOBYTE(v6) = [v9 portraitInPhotoModeBehavior];

  BOOL v10 = (v6 & 1) != 0
     && [(CAMViewfinderViewController *)self _depthEffectEnabledFromSuggestion];
  if (v8) {
    return 1;
  }
  else {
    return v5 | v10;
  }
}

- (void)_updatePreviewControllerIndicatorStyle
{
  BOOL v3 = [(CAMViewfinderViewController *)self _shouldUsePhotoModePortraitEffect];
  id v4 = [(CAMViewfinderViewController *)self _previewViewController];
  [v4 setShouldUsePortraitStyleIndicatorsInPhotoMode:v3];
}

- (BOOL)_shouldRequestDepthDeliveryForBurst:(BOOL)a3
{
  BOOL v3 = a3;
  unsigned int v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v6 = [v5 mode];
  if (v6 == 9 || v6 == 6)
  {
    char v8 = 1;
  }
  else if (v6)
  {
    char v8 = 0;
  }
  else
  {
    double v9 = +[CAMCaptureCapabilities capabilities];
    char v8 = [v9 featureDevelopmentForceDepthDataCaptureInPhotoMode];
  }
  char v10 = v8 | [(CAMViewfinderViewController *)self _shouldUseDepthFromSuggestionForCurrentConfigurationIsBurst:v3];

  return v10;
}

- (BOOL)_shouldUseTransientLightingBadgesForGraphConfiguration:(id)a3
{
  BOOL v3 = [(CAMViewfinderViewController *)self _targetLightingControl];
  BOOL v4 = [v3 collapsedControlLocation] != 0;

  return v4;
}

- (void)_updateTransientLightingBadgeVisibilityAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  unsigned int v5 = [(CAMViewfinderViewController *)self _targetLightingControl];
  char v6 = [v5 isExpanded];

  uint64_t v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldUseTransientLightingBadgesForGraphConfiguration:v7];

  double v9 = [(CAMViewfinderViewController *)self _timerCache];
  int v10 = [v9 isRunningTimerForKey:&unk_26BDDE010];

  if (v6) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v8 & (v10 ^ 1u);
  }
  id v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v12 setLightingNameBadgesHidden:v11 animated:v3];
}

- (void)_startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:(id)a3
{
  if ([(CAMViewfinderViewController *)self _shouldUseTransientLightingBadgesForGraphConfiguration:a3])
  {
    [(CAMViewfinderViewController *)self _startTimer:4];
    [(CAMViewfinderViewController *)self _updateTransientLightingBadgeVisibilityAnimated:1];
  }
}

- (void)_handlePhotoVideoModeSwitchValueChanged:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  unsigned int v5 = [v4 photoVideoModeSwitch];
  uint64_t v6 = [v5 mode];

  uint64_t v7 = 9;
  if (v6) {
    uint64_t v7 = 0;
  }
  if (v6 == 1) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  [(CAMViewfinderViewController *)self _setSpatialModeHasVideoSelected:v6 == 1];
  id v9 = [(CAMViewfinderViewController *)self _modeDial];
  [v9 reloadData];
  [v9 setSelectedMode:v8 animated:0];
  [(CAMViewfinderViewController *)self _handleUserChangedToMode:v8];
}

- (void)_handleSpatialCaptureButtonTapped:(id)a3
{
  if ([(CAMViewfinderViewController *)self _isActiveZooming])
  {
    BOOL v4 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Ignoring action to toggle spatial capture because zooming is active", v6, 2u);
    }
  }
  else if ([(CAMViewfinderViewController *)self _currentMode] == 1)
  {
    uint64_t v5 = [(CAMViewfinderViewController *)self _isSpatialVideoEnabled] ^ 1;
    [(CAMViewfinderViewController *)self _handleUserChangedSpatialVideoEnabled:v5];
  }
}

- (void)_handleUserChangedSpatialVideoEnabled:(BOOL)a3
{
  [(CAMViewfinderViewController *)self _setSpatialVideoEnabled:a3];
  BOOL v4 = [(CAMViewfinderViewController *)self _isSpatialVideoEnabled];
  uint64_t v5 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v5 setSpatialEnabled:v4];

  uint64_t v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v7 = [v6 spatialCaptureButton];
  objc_msgSend(v7, "setActive:animated:", -[CAMViewfinderViewController _isSpatialVideoEnabled](self, "_isSpatialVideoEnabled"), 1);

  uint64_t v8 = +[CAMUserPreferences preferences];
  uint64_t v9 = objc_msgSend(v8, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), -[CAMViewfinderViewController _isSpatialVideoEnabled](self, "_isSpatialVideoEnabled"));

  id v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int v10 = [(CAMViewfinderViewController *)self _graphConfigurationForChangeToMode:[(CAMViewfinderViewController *)self _currentMode] device:v9 fromGraphConfiguration:v11];
  [(CAMViewfinderViewController *)self _defaultZoomFactorForGraphConfiguration:v10];
  -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v11, v10, 1);
}

- (BOOL)_shouldShowSpatialCaptureControlForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = +[CAMUserPreferences preferences];
  int v6 = [v5 spatialVideoControlEnabled];

  uint64_t v7 = +[CAMCaptureCapabilities capabilities];
  int v8 = objc_msgSend(v7, "isSpatialVideoInVideoModeSupportedForMode:devicePosition:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "devicePosition"));

  BOOL v9 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
  if (v6) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    LOBYTE(v11) = 0;
  }
  else {
    BOOL v11 = [(CAMViewfinderViewController *)self _shouldShowPreviewOverlayButtonForGraphConfiguration:v4]&& !v9;
  }

  return v11;
}

- (BOOL)_isSpatialVideoInVideoModeActiveForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  uint64_t v7 = +[CAMCaptureCapabilities capabilities];
  LODWORD(a3) = [v7 isSpatialVideoInVideoModeSupportedForMode:a3 devicePosition:a4];

  BOOL v8 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
  if (a3) {
    return [(CAMViewfinderViewController *)self _isSpatialVideoEnabled] && !v8;
  }
  else {
    return 0;
  }
}

- (void)_updateSpatialCaptureUIStateForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v22 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:v6];
  uint64_t v9 = [(CAMViewfinderViewController *)self _spatialModeHasVideoSelected];
  BOOL v10 = [v7 photoVideoModeSwitch];
  [v10 setMode:v9 animated:v4];

  BOOL v11 = !v8;
  id v12 = [v7 photoVideoModeSwitch];
  [v12 setEnabled:v11];

  LODWORD(v12) = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", [v6 mode], objc_msgSend(v6, "devicePosition"));
  uint64_t v13 = [v6 mode];
  uint64_t v14 = [v6 devicePosition];

  uint64_t v15 = v11 & (v12 | [(CAMViewfinderViewController *)self _isSpatialMode:v13 devicePosition:v14]);
  int v16 = [v7 spatialCaptureButton];
  [v16 setActive:v15 animated:v4];

  if (v15 == 1)
  {
    uint64_t v17 = [(CAMViewfinderViewController *)self _isShowingCameraRoll] ^ 1;
    int v18 = [(CAMViewfinderViewController *)self _motionController];
    [v18 setForceLandscapeOrientation:v17];

    unint64_t v19 = [v22 deviceOrientation];
    if (v19 > 6) {
      goto LABEL_8;
    }
    if (((1 << v19) & 0x79) == 0)
    {
      [v7 setOrientationInstructionVisible:1 animated:v4];
      if ([(CAMViewfinderViewController *)self _trueVideoIsTransitioningToCapture]) {
        int v20 = 0;
      }
      else {
        int v20 = ![(CAMViewfinderViewController *)self _trueVideoIsCapturing];
      }
      objc_msgSend(v7, "setOrientationInstructionBackgroundBlurred:animated:", v20 & ~-[CAMViewfinderViewController isRecording](self, "isRecording"), v4);
      goto LABEL_8;
    }
  }
  else
  {
    int v21 = [(CAMViewfinderViewController *)self _motionController];
    [v21 setForceLandscapeOrientation:0];
  }
  [v7 setOrientationInstructionVisible:0 animated:v4];
LABEL_8:
}

- (BOOL)_shouldShowSpatialCaptureInstructionsForGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = -[CAMViewfinderViewController _isSpatialVideoMode:devicePosition:](self, "_isSpatialVideoMode:devicePosition:", [v4 mode], objc_msgSend(v4, "devicePosition"));
  id v6 = [(CAMViewfinderViewController *)self _motionController];
  uint64_t v7 = [v6 deviceOrientation];

  char v8 = [(CAMViewfinderViewController *)self _stereoCaptureStatus];
  BOOL v9 = [(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:v4];
  uint64_t v10 = [v4 mode];
  uint64_t v11 = [v4 devicePosition];

  BOOL v12 = [(CAMViewfinderViewController *)self _isSpatialMode:v10 devicePosition:v11];
  BOOL result = 0;
  if ((v5 || v12) && (unint64_t)(v7 - 1) >= 2 && (v8 & 6) != 0 && !v9) {
    return ![(CAMViewfinderViewController *)self _isReconfiguring];
  }
  return result;
}

- (BOOL)_isSpatialVideoMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  BOOL v5 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:a3 devicePosition:a4];
  id v6 = +[CAMCaptureCapabilities capabilities];
  char v7 = [v6 isSpatialModeSupported];

  if (a3 == 8) {
    char v8 = v7;
  }
  else {
    char v8 = 0;
  }
  return v8 | v5;
}

- (BOOL)_isSpatialMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  BOOL result = [(CAMViewfinderViewController *)self _isSpatialVideoMode:a3 devicePosition:a4];
  if (a3 == 9) {
    return 1;
  }
  return result;
}

- (BOOL)_shouldShowPhotoVideoModeSwitchForGraphConfiguration:(id)a3
{
  uint64_t v4 = [a3 mode];
  BOOL v5 = [(CAMViewfinderViewController *)self _isCapturingFromTimer];
  BOOL v6 = [(CAMViewfinderViewController *)self _trueVideoIsActive];
  BOOL result = 0;
  if (!v5 && (v4 & 0xFFFFFFFFFFFFFFFELL) == 8) {
    return ![(CAMViewfinderViewController *)self isRecording] && !v6;
  }
  return result;
}

- (void)captureController:(id)a3 didOutputStereoCaptureStatus:(int64_t)a4
{
  [(CAMViewfinderViewController *)self _setStereoCaptureStatus:a4];
  BOOL v5 = +[CAMCaptureCapabilities capabilities];
  int v6 = objc_msgSend(v5, "isSpatialVideoInVideoModeSupportedForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  char v7 = +[CAMCaptureCapabilities capabilities];
  char v8 = [v7 isSpatialModeSupported];

  if ((v8 & 1) != 0 || v6)
  {
    BOOL v9 = [(CAMViewfinderViewController *)self _currentMode] == 9;
    uint64_t v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    objc_msgSend(v10, "setStereoCaptureStatus:useHoldStillStereoLowLightInstruction:animated:", -[CAMViewfinderViewController _stereoCaptureStatus](self, "_stereoCaptureStatus"), v9, 1);

    if (![(CAMViewfinderViewController *)self _hasInFlightConfiguration])
    {
      [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
    }
  }
}

- (void)_setView:(id)a3 hidden:(BOOL)a4 delayedInTotalAnimationTime:(double)a5 normalizedFadeoutDuration:(double)a6
{
  BOOL v8 = a4;
  id v9 = a3;
  uint64_t v10 = v9;
  double v11 = (double)!v8;
  if (a5 <= 0.0)
  {
    [v9 setAlpha:(double)!v8];
  }
  else
  {
    double v12 = a5 * a6;
    if (v8) {
      double v13 = 0.0;
    }
    else {
      double v13 = a5 - v12;
    }
    uint64_t v14 = (void *)MEMORY[0x263F82E00];
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __101__CAMViewfinderViewController__setView_hidden_delayedInTotalAnimationTime_normalizedFadeoutDuration___block_invoke;
    _OWORD v15[3] = &unk_263FA04E0;
    id v16 = v9;
    double v17 = v11;
    [v14 animateWithDuration:0 delay:v15 options:0 animations:v12 completion:v13];
  }
}

uint64_t __101__CAMViewfinderViewController__setView_hidden_delayedInTotalAnimationTime_normalizedFadeoutDuration___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:*(double *)(a1 + 40)];
}

- (void)_handleSwipeDownGestureRecognizer:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _isShowingPortraitApertureSlider];
  BOOL v5 = [(CAMViewfinderViewController *)self _wantsFilterScrubberVisible];
  BOOL v6 = [(CAMViewfinderViewController *)self _isShowingPortraitIntensitySlider];
  char v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  id v8 = v7;
  if (v7)
  {
    [v7 setControlDrawerExpanded:0 forReason:4 animated:1];
  }
  else if (v4)
  {
    [(CAMViewfinderViewController *)self _setShowingPortraitApertureSlider:0 animated:1];
  }
  else if (v5)
  {
    [(CAMViewfinderViewController *)self _setWantsFilterScrubberVisible:0 animated:1];
  }
  else
  {
    if (!v6) {
      goto LABEL_10;
    }
    [(CAMViewfinderViewController *)self _setShowingPortraitIntensitySlider:0 animated:1];
  }
  char v7 = v8;
LABEL_10:
}

- (void)_handleSwipeUpGestureRecognizer:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _wantsFilterScrubberVisible];
  BOOL v5 = [(CAMViewfinderViewController *)self _isShowingPortraitApertureSlider];
  BOOL v6 = +[CAMCaptureCapabilities capabilities];
  int v7 = objc_msgSend(v6, "isDepthEffectApertureSupportedForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  id v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  if (v8)
  {
    id v9 = v8;
    [v8 setControlDrawerExpanded:1 forReason:4 animated:1];
  }
  else if ((v7 ^ 1 | (v4 || v5)))
  {
    if (v4 || v5) {
      goto LABEL_8;
    }
    id v9 = 0;
    [(CAMViewfinderViewController *)self _setWantsFilterScrubberVisible:1 animated:1];
  }
  else
  {
    id v9 = 0;
    [(CAMViewfinderViewController *)self _setShowingPortraitApertureSlider:1 animated:1];
  }
  id v8 = v9;
LABEL_8:
}

- (void)videoThumbnailOutputWillBeginRenderingThumbnailsWithContents:(id)a3
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    id v8 = v4;
    _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "Setting thumbnail contents %{public}@", (uint8_t *)&v7, 0xCu);
  }

  [(CAMViewfinderViewController *)self set_filterScrubberLayerContents:v4];
  BOOL v6 = [(CAMViewfinderViewController *)self _targetFilterScrubberView];
  [v6 updateItems];

  if ([(CAMViewfinderViewController *)self _shouldShowFilterScrubberAfterNextRender])
  {
    [(CAMViewfinderViewController *)self _setShouldShowFilterScrubberAfterNextRender:0];
    [(CAMViewfinderViewController *)self _setShowingFilterScrubber:1 animated:1];
  }
}

- (void)videoThumbnailOutputWillEndRenderingThumbnails
{
  NSStringFromSelector(a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [(CAMViewfinderViewController *)self _clearFilterScrubberLayerContentsIfNotNeededFromCallsite:v3];
}

- (void)_clearFilterScrubberLayerContentsIfNotNeededFromCallsite:(id)a3
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _isShowingFilterScrubber];
  BOOL v6 = [(CAMViewfinderViewController *)self _wantsFilterScrubberVisible];
  BOOL v7 = [(CAMViewfinderViewController *)self _isAnimatingFilterScrubberDismissal];
  BOOL v8 = v7;
  if (v5 || v6 || v7)
  {
    double v11 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (v5) {
        double v12 = @"YES";
      }
      else {
        double v12 = @"NO";
      }
      double v13 = v12;
      if (v6) {
        uint64_t v14 = @"YES";
      }
      else {
        uint64_t v14 = @"NO";
      }
      uint64_t v15 = v14;
      if (v8) {
        id v16 = @"YES";
      }
      else {
        id v16 = @"NO";
      }
      double v17 = v16;
      int v18 = 138544130;
      id v19 = v4;
      __int16 v20 = 2114;
      int v21 = v13;
      __int16 v22 = 2114;
      BOOL v23 = v15;
      __int16 v24 = 2114;
      int v25 = v17;
      _os_log_impl(&dword_2099F8000, v11, OS_LOG_TYPE_DEFAULT, "Not clearing thumbnail contents from %{public}@ because showingFilterScrubber=%{public}@, wantsFilterScrubberVisible=%{public}@, and animatingFilterScrubberDismissal=%{public}@", (uint8_t *)&v18, 0x2Au);
    }
    goto LABEL_19;
  }
  uint64_t v9 = [(CAMViewfinderViewController *)self _filterScrubberLayerContents];

  if (v9)
  {
    uint64_t v10 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 138543362;
      id v19 = v4;
      _os_log_impl(&dword_2099F8000, v10, OS_LOG_TYPE_DEFAULT, "Clearing thumbnail contents from %{public}@", (uint8_t *)&v18, 0xCu);
    }

    [(CAMViewfinderViewController *)self set_filterScrubberLayerContents:0];
    double v11 = [(CAMViewfinderViewController *)self _targetFilterScrubberView];
    [v11 updateItems];
LABEL_19:
  }
}

- (BOOL)_isZoomAllowedCurrently
{
  id v2 = self;
  BOOL v3 = [(CAMViewfinderViewController *)self _isPinchToZoomAllowed];
  id v4 = [(CAMViewfinderViewController *)v2 _currentGraphConfiguration];
  LOBYTE(v2) = [(CAMViewfinderViewController *)v2 _isZoomAllowedForGraphConfiguration:v4];

  return v3 & v2;
}

- (BOOL)_zoomControlReconfiguresGraphConfiguration:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _isZoomAllowedForGraphConfiguration:v4];
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldUseZoomButtonForCameraToggleForGraphConfiguration:v4]&& !v5;
  if ([v4 devicePosition] == 1)
  {
    BOOL v7 = +[CAMCaptureCapabilities capabilities];
    uint64_t v8 = objc_msgSend(v7, "frontZoomBehaviorForCaptureMode:", objc_msgSend(v4, "mode"));

    if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 2) {
      LOBYTE(v6) = 1;
    }
  }

  return v6;
}

- (BOOL)_isPinchToZoomAllowed
{
  BOOL v3 = +[CAMCaptureCapabilities capabilities];
  int64_t v4 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v5 = [(CAMViewfinderViewController *)self _currentDevicePosition];
  int64_t v6 = [(CAMViewfinderViewController *)self _currentVideoConfiguration];
  BOOL v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int v24 = objc_msgSend(v3, "shouldAllowCameraToggleForMode:devicePosition:videoConfiguration:videoStabilizationStrength:", v4, v5, v6, objc_msgSend(v7, "videoStabilizationStrength"));

  uint64_t v8 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v9 = [(CAMViewfinderViewController *)self _isZoomAllowedForGraphConfiguration:v8];

  uint64_t v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v11 = [(CAMViewfinderViewController *)self _zoomControlReconfiguresGraphConfiguration:v10];

  BOOL v12 = [(CAMViewfinderViewController *)self _isOutOfDiskSpace];
  double v13 = [(CAMViewfinderViewController *)self _captureController];
  char v14 = [v13 isCapturingVideo];

  uint64_t v15 = [(CAMViewfinderViewController *)self _captureController];
  int v16 = [v15 isCapturingBurst];

  double v17 = [(CAMViewfinderViewController *)self _captureController];
  int v18 = [v17 isCapturingPanorama];

  id v19 = [(CAMViewfinderViewController *)self _captureController];
  int v20 = [v19 isCapturingTimelapse];

  int64_t v21 = [(CAMViewfinderViewController *)self _layoutStyle];
  BOOL v22 = 0;
  if (!v12 && (((v9 | v24) ^ 1 | v16 | v18 | v20) & 1) == 0 && v21 != 2) {
    BOOL v22 = v14 & v11 ^ 1;
  }

  return v22;
}

- (double)_defaultZoomFactorForGraphConfiguration:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(CAMViewfinderViewController *)self _motionController];
  -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:captureOrientation:](self, "_defaultZoomFactorForGraphConfiguration:captureOrientation:", v4, [v5 captureOrientation]);
  double v7 = v6;

  return v7;
}

- (BOOL)_shouldEmulateAggregateCameraZoomForGraphConfiguration:(id)a3
{
  id v3 = a3;
  uint64_t v4 = [v3 mode];
  uint64_t v5 = [v3 device];
  uint64_t v6 = [v3 videoConfiguration];
  BOOL v7 = +[CAMZoomControlUtilities shouldEmulateTripleCameraZoomForMode:device:videoConfiguration:videoStabilizationStrength:](CAMZoomControlUtilities, "shouldEmulateTripleCameraZoomForMode:device:videoConfiguration:videoStabilizationStrength:", v4, v5, v6, [v3 videoStabilizationStrength]);
  uint64_t v8 = [v3 videoStabilizationStrength];

  return v7 | +[CAMZoomControlUtilities shouldEmulateWideDualCameraZoomForMode:v4 device:v5 videoConfiguration:v6 videoStabilizationStrength:v8];
}

- (void)_limitZoomRangeForRecordingIfNecessary
{
  id v27 = +[CAMCaptureCapabilities capabilities];
  id v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v4 = [(CAMViewfinderViewController *)self _shouldEmulateAggregateCameraZoomForGraphConfiguration:v3];

  if (v4)
  {
    uint64_t v5 = [(CAMViewfinderViewController *)self _zoomControl];
    [v5 minAvailableZoomFactor];
    if (v6 < 1.0) {
      [v5 setMinAvailableZoomFactor:1.0];
    }
  }
  unint64_t v7 = [(CAMViewfinderViewController *)self _currentDevice];
  if (v7 <= 0xB)
  {
    if (((1 << v7) & 0xF2B) != 0)
    {
      int64_t v8 = [(CAMViewfinderViewController *)self _currentMode];
      int64_t v9 = [(CAMViewfinderViewController *)self _currentDevice];
      int64_t v10 = [(CAMViewfinderViewController *)self _currentVideoConfiguration];
      BOOL v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      objc_msgSend(v27, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", v8, v9, v10, objc_msgSend(v11, "videoStabilizationStrength"));
      double v13 = v12;
    }
    else
    {
      if (((1 << v7) & 0xC0) != 0)
      {
        int v16 = +[CAMUserPreferences preferences];
        int v17 = objc_msgSend(v16, "shouldDisableCameraSwitchingDuringVideoRecordingForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

        if (!v17) {
          goto LABEL_12;
        }
        [v27 wideDualCameraSwitchOverZoomFactorForDevicePosition:0];
        double v19 = v18;
        [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
        double v13 = 6.0;
        if (v20 >= v19) {
          goto LABEL_12;
        }
        goto LABEL_9;
      }
      if (v7 != 2) {
        goto LABEL_12;
      }
      int64_t v21 = [(CAMViewfinderViewController *)self _currentMode];
      int64_t v22 = [(CAMViewfinderViewController *)self _currentDevice];
      int64_t v23 = [(CAMViewfinderViewController *)self _currentVideoConfiguration];
      int v24 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      objc_msgSend(v27, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", v21, v22, v23, objc_msgSend(v24, "videoStabilizationStrength"));
      double v13 = v25;

      if ([v27 isBackTelephotoSupported])
      {
        [v27 wideToTelephotoZoomFactorForDevicePosition:0];
        if (v26 > v13) {
          double v13 = v26;
        }
      }
    }
    if (v13 <= 0.0) {
      goto LABEL_12;
    }
LABEL_9:
    char v14 = [(CAMViewfinderViewController *)self _zoomControl];
    [v14 maxAvailableZoomFactor];
    if (v15 > v13) {
      [v14 setMaxAvailableZoomFactor:v13];
    }
  }
LABEL_12:
}

- (void)_restoreZoomRangeAfterRecordingIfNecessary
{
  id v11 = [(CAMViewfinderViewController *)self _zoomControl];
  id v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v4 = [(CAMViewfinderViewController *)self _shouldEmulateAggregateCameraZoomForGraphConfiguration:v3];

  if (v4)
  {
    [v11 minAvailableZoomFactor];
    double v6 = v5;
    [v11 minimumZoomFactor];
    if (v6 > v7)
    {
      [v11 minimumZoomFactor];
      objc_msgSend(v11, "setMinAvailableZoomFactor:");
    }
    [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
    -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:", 0, 0);
  }
  [v11 maxAvailableZoomFactor];
  double v9 = v8;
  [v11 maximumZoomFactor];
  if (v9 < v10)
  {
    [v11 maximumZoomFactor];
    objc_msgSend(v11, "setMaxAvailableZoomFactor:");
  }
}

- (void)_updateZoomButtonSymbolForMode:(int64_t)a3 device:(int64_t)a4 videoConfiguration:(int64_t)a5 zoomFactor:(double)a6 videoStabilizationStrength:(int64_t)a7 animated:(BOOL)a8
{
  BOOL v8 = a8;
  double v15 = +[CAMCaptureCapabilities capabilities];
  int v16 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  unint64_t v17 = objc_msgSend(v15, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", a4, a3, a5, a7, objc_msgSend(v16, "enableStereoVideoCapture"));

  double v18 = [(CAMViewfinderViewController *)self _zoomControl];
  BOOL v19 = v17 <= 0xB && ((0xFDu >> v17) & 1) == 0;
  if (v19 && v18 != 0)
  {
    id v24 = v18;
    BOOL v19 = [v18 zoomButtonContentType] == 1;
    double v18 = v24;
    if (v19)
    {
      uint64_t v21 = [v24 zoomButtonSymbol];
      int64_t v22 = +[CAMCaptureCapabilities capabilities];
      uint64_t v23 = [v22 frontZoomBehaviorForCaptureMode:a3];

      if ((unint64_t)(v23 - 1) >= 2)
      {
        if (v23 == 3) {
          uint64_t v21 = v17 != 10;
        }
      }
      else
      {
        uint64_t v21 = fabs(a6 + -1.0) >= 0.001;
      }
      [v24 setZoomButtonSymbol:v21 animated:v8];
      double v18 = v24;
    }
  }
}

- (void)captureController:(id)a3 didChangePreviewZoomPIPRect:(CGRect)a4
{
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  id v8 = [(CAMViewfinderViewController *)self _previewViewController];
  objc_msgSend(v8, "setNormalizedZoomPIPRect:", x, y, width, height);
}

- (void)_changeToZoomFactor:(double)a3 rampDuration:(double)a4 zoomRampTuning:(int64_t)a5 shouldAnimate:(BOOL)a6
{
}

- (void)_changeToZoomFactor:(double)a3 rampDuration:(double)a4 zoomRampTuning:(int64_t)a5 shouldAnimate:(BOOL)a6 updateOverlay:(BOOL)a7
{
  BOOL v7 = a7;
  BOOL v8 = a6;
  uint64_t v62 = *MEMORY[0x263EF8340];
  int64_t v12 = [(CAMViewfinderViewController *)self _currentMode];
  double v13 = +[CAMCaptureCapabilities capabilities];
  char v14 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v15 = [v14 devicePosition];
  int v16 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int v17 = objc_msgSend(v13, "isQuadraWideBinningReconfigurationSupportedForMode:devicePosition:videoConfiguration:", v12, v15, objc_msgSend(v16, "videoConfiguration"));

  if (v12 != 6
    || (+[CAMCaptureCapabilities capabilities],
        double v18 = objc_claimAutoreleasedReturnValue(),
        int v19 = [v18 continuousZoomSupportedForPortraitMode] | v17,
        v18,
        v19 == 1))
  {
    BOOL v57 = v7;
    BOOL v58 = v8;
    double v20 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v59 = [(CAMViewfinderViewController *)self _shouldEmulateAggregateCameraZoomForGraphConfiguration:v20];

    uint64_t v21 = [(CAMViewfinderViewController *)self _captureController];
    int v22 = [v21 isCapturingVideo];

    +[CAMCaptureCapabilities capabilities];
    id v24 = v23 = v12;
    int64_t v25 = [(CAMViewfinderViewController *)self _currentDevice];
    int64_t v26 = [(CAMViewfinderViewController *)self _currentVideoConfiguration];
    id v27 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    uint64_t v28 = [v27 videoStabilizationStrength];
    uint64_t v29 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    uint64_t v30 = objc_msgSend(v24, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v25, v23, v26, v28, objc_msgSend(v29, "enableStereoVideoCapture"));

    if (v30 == 2) {
      int v31 = v17;
    }
    else {
      int v31 = 0;
    }
    if (v23 == 6) {
      int v32 = v31;
    }
    else {
      int v32 = 0;
    }
    if ((v59 & (v22 ^ 1) & 1) == 0 && !v32) {
      goto LABEL_18;
    }
    int64_t v33 = [(CAMViewfinderViewController *)self _currentVideoConfiguration];
    int v34 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v35 = +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", v23, v30, v33, [v34 videoStabilizationStrength], 0, 0);

    int64_t v36 = +[CAMZoomControlUtilities deviceForEmulatingZoomFactor:v30 fromDevice:v23 mode:v35 continuousZoomSupported:a3];
    +[CAMZoomControlUtilities zoomScaleFromDevice:v30 toDevice:v36];
    int v38 = v36 == v30 ? v32 : 1;
    if (v38 == 1)
    {
      double v39 = v37;
      [(CAMViewfinderViewController *)self _videoZoomFactorAtPinchStart];
      [(CAMViewfinderViewController *)self _setVideoZoomFactorAtPinchStart:v39 * v40];
      [(CAMViewfinderViewController *)self _videoZoomFactorAtDynamicShutterStart];
      [(CAMViewfinderViewController *)self _setVideoZoomFactorAtDynamicShutterStart:v39 * v41];
      [(CAMViewfinderViewController *)self _setReconfiguringForZoomChange:1];
      [(CAMViewfinderViewController *)self _handleUserChangedToMode:v23 device:v36 zoomFactor:v39 * a3];
    }
    else
    {
LABEL_18:
      [(CAMViewfinderViewController *)self _setCachedVideoZoomFactor:a3];
      [(CAMViewfinderViewController *)self _updateControlsRelatedToDepthSuggestionAnimated:v58];
      [(CAMViewfinderViewController *)self _updateZoomUIWithZoomFactor:v58 animated:a3];
      uint64_t v42 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      uint64_t v43 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateDepthEffectApertureForGraphConfiguration:v42 fromGraphConfiguration:v43 zoomFactor:a3];

      if ([(CAMViewfinderViewController *)self _isReconfiguringForZoomChange])
      {
        uint64_t v44 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          double v61 = a3;
          _os_log_impl(&dword_2099F8000, v44, OS_LOG_TYPE_DEFAULT, "Ignoring zoom change to %.3f during reconfiguration", buf, 0xCu);
        }
      }
      else
      {
        if (a4 > 0.0 || a5)
        {
          [(CAMViewfinderViewController *)self _setShouldIgnoreZoomFactorKVOForRamping:1];
          captureController = self->__captureController;
          int v46 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
          [(CUCaptureController *)captureController startRampToVideoZoomFactor:a5 withDuration:v46 zoomRampTuning:a3 graphConfiguration:a4];
        }
        else
        {
          int v45 = self->__captureController;
          int v46 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
          [(CUCaptureController *)v45 changeToVideoZoomFactor:v46 graphConfiguration:a3];
        }
      }
      if (v23 == 6 && ![(CAMViewfinderViewController *)self _currentDevicePosition])
      {
        int64_t v48 = +[CAMUserPreferences preferences];
        objc_msgSend(v48, "setPortraitModeRearDevice:", -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
        [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
        objc_msgSend(v48, "setPortraitModeRearZoomValue:");
      }
      if (v57)
      {
        char v49 = +[CAMCaptureCapabilities capabilities];
        char v50 = [v49 allowHalfPressSimulation];

        if ((v50 & 1) == 0)
        {
          uint64_t v51 = [(CAMViewfinderViewController *)self _overlayControls];
          char v52 = [v51 objectForKeyedSubscript:@"zoom"];

          *(float *)&double v53 = a3;
          uint64_t v54 = [v52 updateWithFloatValue:v53];
          uint64_t v55 = [(CAMViewfinderViewController *)self _overlayServiceConnection];
          [v55 applyControlUpdate:v54 completion:&__block_literal_global_1208];
        }
      }
    }
  }
}

void __107__CAMViewfinderViewController__changeToZoomFactor_rampDuration_zoomRampTuning_shouldAnimate_updateOverlay___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __107__CAMViewfinderViewController__changeToZoomFactor_rampDuration_zoomRampTuning_shouldAnimate_updateOverlay___block_invoke_cold_1();
    }
  }
}

- (void)_resetZoom
{
  id v3 = +[CAMCaptureCapabilities capabilities];
  int64_t v4 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v5 = [(CAMViewfinderViewController *)self _currentDevice];
  int64_t v6 = [(CAMViewfinderViewController *)self _currentVideoConfiguration];
  BOOL v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LODWORD(v4) = objc_msgSend(v3, "isZoomAllowedForMode:device:videoConfiguration:videoStabilizationStrength:", v4, v5, v6, objc_msgSend(v7, "videoStabilizationStrength"));

  if (v4)
  {
    id v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v8 = [(CAMViewfinderViewController *)self _motionController];
    -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:captureOrientation:](self, "_defaultZoomFactorForGraphConfiguration:captureOrientation:", v11, [v8 captureOrientation]);
    double v10 = v9;

    [(CAMViewfinderViewController *)self _changeToZoomFactor:0 rampDuration:0 zoomRampTuning:v10 shouldAnimate:0.0];
    [(CAMViewfinderViewController *)self _setLastZoomInteractionType:0];
  }
}

- (double)_defaultZoomFactorForGraphConfiguration:(id)a3 captureOrientation:(int64_t)a4
{
  id v6 = a3;
  BOOL v7 = +[CAMUserPreferences preferences];
  objc_msgSend(v7, "defaultZoomFactorForGraphConfiguration:captureOrientation:outputToExternalStorage:", v6, a4, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));
  double v9 = v8;

  return v9;
}

- (double)_zoomFactorForZoomSliderValue:(double)a3
{
  [(CAMViewfinderViewController *)self _currentMaximumZoomFactor];
  return pow(v4, a3);
}

- (void)_handleTouchDownForZoomSlider:(id)a3
{
  long double v4 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  [v4 cancelZoom];

  id v5 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  [v5 didZoomInteraction:2];
}

- (void)_zoomSliderValueDidChange:(id)a3 forEvent:(id)a4
{
  id v5 = [(CAMViewfinderViewController *)self _zoomSlider];
  char v6 = [v5 isAutozooming];

  if ((v6 & 1) == 0)
  {
    [(CAMZoomSlider *)self->__zoomSlider value];
    [(CAMViewfinderViewController *)self _zoomFactorForZoomSliderValue:v7];
    -[CAMViewfinderViewController _zoomUIDidChangeToFactor:](self, "_zoomUIDidChangeToFactor:");
    [(CAMViewfinderViewController *)self _setLastZoomInteractionType:2];
  }
}

- (void)_zoomUIDidChangeToFactor:(double)a3
{
  -[CAMViewfinderViewController _setCachedVideoZoomFactor:](self, "_setCachedVideoZoomFactor:");
  [(CAMViewfinderViewController *)self _updateControlsRelatedToDepthSuggestionAnimated:1];
  id v12 = [(CAMViewfinderViewController *)self _captureController];
  if ([v12 isCapturingVideo]) {
    double v5 = 0.5;
  }
  else {
    double v5 = 0.25;
  }
  [(CAMViewfinderViewController *)self _setShouldIgnoreZoomFactorKVOForRamping:1];
  captureController = self->__captureController;
  float v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CUCaptureController *)captureController startRampToVideoZoomFactor:3 withDuration:v7 zoomRampTuning:a3 graphConfiguration:v5];

  if (![(CAMViewfinderViewController *)self _shouldUseZoomButtonForCameraToggleForCurrentModeAndDevice])[(CAMZoomControl *)self->__zoomControl setZoomFactor:a3]; {
  [(CAMViewfinderViewController *)self _zoomSliderValueForZoomFactor:a3];
  }
  double v9 = v8;
  double v10 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v10 setZoomAmount:v9];

  id v11 = [(CAMViewfinderViewController *)self _remoteShutterController];
  [v11 setZoomFactor:a3];
}

- (BOOL)_isActiveZooming
{
  if ([(CAMViewfinderViewController *)self _isPinchingForZoom]) {
    return 1;
  }
  long double v4 = [(CAMViewfinderViewController *)self _zoomControl];
  if ([v4 isTracking])
  {
    char v3 = 1;
  }
  else
  {
    double v5 = [(CAMViewfinderViewController *)self _zoomSlider];
    if ([v5 isTracking])
    {
      char v3 = 1;
    }
    else
    {
      char v6 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      char v3 = [v6 isZooming];
    }
  }

  return v3;
}

- (BOOL)_isZooming
{
  if ([(CAMViewfinderViewController *)self _isActiveZooming]) {
    return 1;
  }
  long double v4 = [(CAMViewfinderViewController *)self _captureController];
  char v5 = [v4 isRampingVideoZoom];

  return v5;
}

- (void)_handleZoomPinchGestureRecognizer:(id)a3
{
  id v4 = a3;
  char v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  switch([v4 state])
  {
    case 1:
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      -[CAMViewfinderViewController _setVideoZoomFactorAtPinchStart:](self, "_setVideoZoomFactorAtPinchStart:");
      char v6 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      [v6 cancelZoom];

      if ([v5 devicePosition] != 1)
      {
        if ([(CAMViewfinderViewController *)self _shouldUseZoomControlInsteadOfSlider])
        {
          [(CAMViewfinderViewController *)self _createZoomControlIfNecessary];
        }
        else
        {
          [(CAMViewfinderViewController *)self _createZoomSliderIfNecessary];
        }
        id v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
        BOOL v12 = [(CAMViewfinderViewController *)self _shouldHideZoomSliderForGraphConfiguration:v11 ignoreExpiredVisibilityTimer:1];

        if (!v12)
        {
          double v13 = [(CAMViewfinderViewController *)self _zoomSlider];
          [v13 makeVisibleAnimated:0];

          float v7 = [(CAMViewfinderViewController *)self _zoomSlider];
          [v7 setVisibilityTimerSuspended:1];
          goto LABEL_11;
        }
      }
      break;
    case 2:
      [(CAMViewfinderViewController *)self _videoZoomFactorAtPinchStart];
      double v9 = v8;
      [v4 zoomScale];
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 3221225472;
      v14[2] = __65__CAMViewfinderViewController__handleZoomPinchGestureRecognizer___block_invoke;
      v14[3] = &unk_263FA2108;
      _OWORD v14[4] = self;
      [(CAMViewfinderViewController *)self _updateZoomFactorForZoomFactor:1 rampDuration:v14 interactionType:v9 * v10 didChangeDevice:0.0];
      break;
    case 3:
      [(CAMViewfinderViewController *)self _updateFocusAfterZoomIfNecessary];
      [(CAMZoomSlider *)self->__zoomSlider setVisibilityTimerSuspended:0];
      float v7 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
      [v7 didZoomInteraction:1];
LABEL_11:

      break;
    case 4:
    case 5:
      [(CAMZoomSlider *)self->__zoomSlider setVisibilityTimerSuspended:0];
      break;
    default:
      break;
  }
}

uint64_t __65__CAMViewfinderViewController__handleZoomPinchGestureRecognizer___block_invoke(uint64_t a1, double a2)
{
  char v3 = *(void **)(a1 + 32);
  [v3 _videoZoomFactorAtPinchStart];
  double v5 = v4 * a2;
  return [v3 _setVideoZoomFactorAtPinchStart:v5];
}

- (void)_updateZoomFactorForZoomFactor:(double)a3 rampDuration:(double)a4 interactionType:(int64_t)a5 didChangeDevice:(id)a6
{
  int v46 = a6;
  double v10 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v11 = [v10 mode];
  uint64_t v12 = [v10 device];
  if ([v10 devicePosition] != 1) {
    goto LABEL_6;
  }
  double v13 = +[CAMCaptureCapabilities capabilities];
  uint64_t v14 = objc_msgSend(v13, "frontZoomBehaviorForCaptureMode:", objc_msgSend(v10, "mode"));

  if (v14 == 1)
  {
    int v16 = 0;
    int v15 = 1;
    goto LABEL_15;
  }
  if (v14 != 3)
  {
    if (v14 == 2)
    {
      int v15 = 0;
      int v16 = 1;
LABEL_15:
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      double v28 = v27;
      uint64_t v29 = +[CAMCaptureCapabilities capabilities];
      objc_msgSend(v29, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", v11, v12, objc_msgSend(v10, "videoConfiguration"), objc_msgSend(v10, "videoStabilizationStrength"));
      double v31 = v30;

      BOOL v32 = fabs(v28 + -1.0) < 0.001;
      if (v31 > a3) {
        BOOL v32 = 0;
      }
      if (v32 || vabdd_f64(v28, v31) >= 0.001)
      {
        if (v32) {
          double v33 = v31;
        }
        else {
          double v33 = -1.0;
        }
        if (v33 <= 0.0) {
          goto LABEL_51;
        }
      }
      else
      {
        double v33 = 1.0;
        if (a3 > 1.0) {
          goto LABEL_51;
        }
      }
      if (v15)
      {
        double v37 = 0.25;
        int v38 = self;
        double v39 = v33;
        uint64_t v40 = 1;
LABEL_49:
        [(CAMViewfinderViewController *)v38 _changeToZoomFactor:v40 rampDuration:1 zoomRampTuning:v39 shouldAnimate:v37];
        goto LABEL_50;
      }
      if (!v16) {
        goto LABEL_50;
      }
      [(CAMViewfinderViewController *)self _setReconfiguringForZoomChange:1];
      [(CAMViewfinderViewController *)self _handleUserChangedToMode:v11 device:v12 zoomFactor:v33];
      int64_t v26 = (void (*)(void))v46[2];
LABEL_13:
      v26();
LABEL_50:
      [(CAMViewfinderViewController *)self _setLastZoomInteractionType:a5];
      goto LABEL_51;
    }
LABEL_6:
    if ([(CAMViewfinderViewController *)self _isZoomAllowedCurrently])
    {
      int v17 = [(CAMViewfinderViewController *)self _zoomControl];
      if (v17)
      {
        double v18 = [(CAMViewfinderViewController *)self _zoomControl];
        [v18 minAvailableZoomFactor];
        double v20 = v19;
      }
      else
      {
        double v20 = 1.0;
      }

      double v41 = [(CAMViewfinderViewController *)self _zoomControl];
      if (v41)
      {
        uint64_t v42 = [(CAMViewfinderViewController *)self _zoomControl];
        [v42 maxAvailableZoomFactor];
        double v44 = v43;
      }
      else
      {
        [(CAMViewfinderViewController *)self _currentMaximumZoomFactor];
        double v44 = v45;
      }

      if (v44 >= a3) {
        double v39 = a3;
      }
      else {
        double v39 = v44;
      }
      if (v39 < v20) {
        double v39 = v20;
      }
      if ((unint64_t)(a5 - 1) > 4) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = qword_209C794C0[a5 - 1];
      }
      int v38 = self;
      double v37 = a4;
      goto LABEL_49;
    }
    uint64_t v21 = +[CAMCaptureCapabilities capabilities];
    uint64_t v12 = objc_msgSend(v21, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v12, v11, objc_msgSend(v10, "videoConfiguration"), objc_msgSend(v10, "videoStabilizationStrength"), objc_msgSend(v10, "enableStereoVideoCapture"));

    int64_t v22 = +[CAMZoomControlUtilities deviceForEmulatingZoomFactor:v12 fromDevice:v11 mode:0 continuousZoomSupported:a3];
    [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
    +[CAMZoomControlUtilities appropriateSignificantZoomFactorForDevice:fromDevice:currentZoomFactor:targetZoomFactor:mode:](CAMZoomControlUtilities, "appropriateSignificantZoomFactorForDevice:fromDevice:currentZoomFactor:targetZoomFactor:mode:", v22, v12, v11);
    double v24 = v23;
    if (v22 != v12
      || ([(CAMViewfinderViewController *)self _cachedVideoZoomFactor], v25 != v24))
    {
      [(CAMViewfinderViewController *)self _handleUserChangedToMode:v11 device:v22 zoomFactor:v24];
LABEL_12:
      +[CAMZoomControlUtilities zoomScaleFromDevice:v12 toDevice:v22];
      int64_t v26 = (void (*)(void))v46[2];
      goto LABEL_13;
    }
    goto LABEL_51;
  }
  BOOL v34 = a3 > 0.5;
  if (v12 == 10) {
    BOOL v34 = 1;
  }
  BOOL v35 = !v34;
  uint64_t v36 = 10;
  if (!v35) {
    uint64_t v36 = v12;
  }
  if (a3 >= 2.0 && v12 == 10) {
    int64_t v22 = 8;
  }
  else {
    int64_t v22 = v36;
  }
  if (v22 != v12)
  {
    [(CAMViewfinderViewController *)self _setReconfiguringForZoomChange:1];
    [(CAMViewfinderViewController *)self _handleUserChangedToMode:v11 device:v22];
    goto LABEL_12;
  }
LABEL_51:
}

- (void)_handleCameraRollSwipeUpGestureRecognizer:(id)a3
{
  id v5 = a3;
  double v4 = [(CAMViewfinderViewController *)self _cameraRollController];
  if ([v5 state] == 1) {
    [(CAMViewfinderViewController *)self _presentCameraRollViewControllerAnimated:1 interactive:1];
  }
  else {
    [v4 handlePresentingPanGestureRecognizer:v5];
  }
}

- (void)zoomSliderDidBeginAutozooming:(id)a3
{
  captureController = self->__captureController;
  id v5 = a3;
  if ([(CUCaptureController *)captureController isCapturingVideo]) {
    float v6 = 0.75;
  }
  else {
    float v6 = 1.5;
  }
  [(CAMViewfinderViewController *)self _currentMaximumZoomFactor];
  double v8 = v7;
  int v9 = [v5 isMinimumAutozooming];

  if (v9) {
    double v8 = 1.0;
  }
  [(CAMViewfinderViewController *)self _setShouldIgnoreZoomFactorKVOForRamping:0];
  double v10 = self->__captureController;
  uint64_t v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  *(float *)&double v12 = v6;
  [(CUCaptureController *)v10 startRampToVideoZoomFactor:v11 withRate:v8 graphConfiguration:v12];

  [(CAMViewfinderViewController *)self _setLastZoomInteractionType:3];
}

- (void)zoomSliderDidEndAutozooming:(id)a3
{
}

- (void)willShowZoomSlider:(id)a3 withAnimationDuration:(double)a4
{
  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v5 animated:1];
}

- (void)willHideZoomSlider:(id)a3 withAnimationDuration:(double)a4
{
  id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v5 animated:1];
}

- (void)_updateFocusAfterZoomIfNecessary
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  if (v3 <= 8 && ((1 << v3) & 0x107) != 0)
  {
    id v4 = [(CAMViewfinderViewController *)self _captureController];
    if ([v4 isCapturingVideo]) {
      [v4 focusAtCenterForVideoRecording];
    }
  }
}

- (void)_configureZoomControlForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  if ([(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v6])
  {
    double v7 = [(CAMViewfinderViewController *)self _zoomControl];
    unint64_t v8 = [v6 videoStabilizationStrength];
    if (v8 <= 3) {
      [v7 setHideFocalLengthLabels:(0xCu >> (v8 & 0xF)) & 1];
    }
    uint64_t v9 = [v6 mode];
    uint64_t v10 = [v6 device];
    BOOL v59 = v7;
    BOOL v58 = v4;
    if ((unint64_t)(v10 - 1) > 0xA) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = qword_209C794E8[v10 - 1];
    }
    uint64_t v12 = [v6 videoConfiguration];
    double v13 = +[CAMCaptureCapabilities capabilities];
    unint64_t v14 = objc_msgSend(v13, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v10, v9, v12, objc_msgSend(v6, "videoStabilizationStrength"), objc_msgSend(v6, "enableStereoVideoCapture"));
    int v15 = objc_msgSend(v13, "isZoomAllowedForMode:device:videoConfiguration:videoStabilizationStrength:", v9, v14, v12, objc_msgSend(v6, "videoStabilizationStrength"));
    int v16 = objc_msgSend(v13, "shouldAllowCameraToggleForMode:devicePosition:videoConfiguration:videoStabilizationStrength:", v9, v11, v12, objc_msgSend(v6, "videoStabilizationStrength"));
    [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
    double v18 = v17;
    int v19 = [v13 isQuadraWideBinningReconfigurationSupportedForMode:v9 devicePosition:v11 videoConfiguration:v12];
    if (v15)
    {
      uint64_t v20 = [(CAMViewfinderViewController *)self _currentPhotoFormat];
      if (objc_msgSend(v13, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v9, v11, v20, v21)&& -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion"))
      {
        if (([v13 portraitInPhotoModeBehavior] & 4) != 0) {
          int64_t v22 = 6;
        }
        else {
          int64_t v22 = v9;
        }
        unint64_t v56 = ((unint64_t)[v13 portraitInPhotoModeBehavior] >> 1) & 1;
      }
      else
      {
        unint64_t v56 = 0;
        int64_t v22 = v9;
      }
      BOOL v29 = [(CAMViewfinderViewController *)self _useZoomFactorsOfTrueVideoDestinationModeForGraphConfiguration:v6];
      if ([v6 trueVideoEnabled] && !v29) {
        int64_t v22 = [(CAMViewfinderViewController *)self _trueVideoSourceCaptureMode];
      }
      id v61 = 0;
      id v62 = 0;
      BOOL v30 = +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", v22, v14, v12, [v6 videoStabilizationStrength], &v62, &v61);
      id v31 = v62;
      id v32 = v61;
      if (v30)
      {
        double v33 = +[CAMUserPreferences preferences];
        if ((objc_msgSend(v13, "isCustomLensSupportedForMode:device:isTrueVideo:", v9, v14, objc_msgSend(v6, "trueVideoEnabled")) ^ 1 | v56))
        {
          BOOL v34 = 0;
        }
        else
        {
          BOOL v34 = [v33 customLensGroup];
        }
        double v7 = v59;
        double v53 = +[CAMZoomPoint zoomPointsWithFactors:v31 displayZoomFactors:v32 customLensGroup:v34];
        if (v9 == 6 && ([v13 continuousZoomSupportedForPortraitMode] & 1) != 0) {
          unint64_t v56 = 1;
        }
        objc_msgSend(v59, "setPreferredCustomLens:", objc_msgSend(v33, "defaultCustomLens"));
        [v59 configureForContinuousZoomWithZoomFactor:v53 zoomPoints:0 createButtonForMaxZoomFactor:v56 compactPlatterLayout:v58 animated:v18];
      }
      else
      {
        double v7 = v59;
        if (!((v14 > 0xB) | (0xFDu >> v14) & 1))
        {
          BOOL v50 = [v59 zoomButtonContentType] == 1 && v58;
          [v59 configureForZoomSymbolToggle];
          uint64_t v51 = [v6 videoStabilizationStrength];
          BOOL v52 = v50;
          double v7 = v59;
          [(CAMViewfinderViewController *)self _updateZoomButtonSymbolForMode:v9 device:v14 videoConfiguration:v12 zoomFactor:v51 videoStabilizationStrength:v52 animated:v18];
        }
      }
    }
    else
    {
      if (v14 == 2) {
        int v23 = v19;
      }
      else {
        int v23 = 0;
      }
      if (v23 == 1 && v9 == 6)
      {
        objc_msgSend(v13, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", 6, 2, v12, objc_msgSend(v6, "videoStabilizationStrength"));
        double v25 = v24;
        [v13 quadraWideRelativeZoomFactor];
        double v27 = v25 * v26;
        [v13 wideDisplayZoomFactor];
        [v7 configureForSingleCameraToggleOnlyWithZoomFactor:v18 minimumZoomFactor:1.0 displayMinimumZoomFactor:v28 maximumZoomFactor:v27 displayMaximumZoomFactor:v27];
      }
      else if (v16)
      {
        int v57 = [v13 isSuperWideSupportedForDevicePosition:v11];
        int v35 = [v13 isTelephotoSupportedForDevicePosition:v11];
        int v55 = [v13 isDualDeviceDisparitySupportedForMode:v9 devicePosition:v11];
        int v36 = [v13 isQuadraWideZoomButtonSupportedForMode:v9 devicePosition:v11 videoConfiguration:v12];
        [v13 quadraWideDisplayZoomFactor];
        double v38 = v37;
        if ([v13 isZoomPlatterSupportedForMode:v9 devicePosition:v11 videoConfiguration:v12])
        {
          double v39 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:4];
          if (((v57 ^ 1 | v55) & 1) == 0)
          {
            uint64_t v40 = NSNumber;
            [v13 superWideDisplayZoomFactor];
            double v41 = objc_msgSend(v40, "numberWithDouble:");
            [v39 addObject:v41];
          }
          uint64_t v42 = NSNumber;
          [v13 wideDisplayZoomFactor];
          double v43 = objc_msgSend(v42, "numberWithDouble:");
          [v39 addObject:v43];

          if (v36)
          {
            double v44 = [NSNumber numberWithDouble:v38];
            [v39 addObject:v44];
          }
          if (v35)
          {
            double v45 = NSNumber;
            [v13 telephotoDisplayZoomFactor];
            int v46 = objc_msgSend(v45, "numberWithDouble:");
            [v39 addObject:v46];
          }
          +[CAMZoomControlUtilities zoomControlDisplayValueForZoomFactor:mode:device:videoConfiguration:videoStabilizationStrength:](CAMZoomControlUtilities, "zoomControlDisplayValueForZoomFactor:mode:device:videoConfiguration:videoStabilizationStrength:", v9, v14, v12, [v6 videoStabilizationStrength], v18);
          v60[0] = MEMORY[0x263EF8330];
          v60[1] = 3221225472;
          v60[2] = __83__CAMViewfinderViewController__configureZoomControlForGraphConfiguration_animated___block_invoke;
          v60[3] = &__block_descriptor_40_e25_B32__0__NSNumber_8Q16_B24l;
          v60[4] = v47;
          uint64_t v48 = [v39 indexOfObjectPassingTest:v60];
          double v7 = v59;
          BOOL v49 = (unint64_t)[v39 count] >= 2
             && [(CAMViewfinderViewController *)self _wantsLightingControlForGraphConfiguration:v6];
          [v59 configureForSelectionOnlyWithDisplayZoomFactors:v39 selectedIndex:v48 compactPlatterLayout:v49 animated:v58];
        }
        else
        {
          +[CAMZoomControlUtilities zoomControlDisplayValueForZoomFactor:mode:device:videoConfiguration:videoStabilizationStrength:](CAMZoomControlUtilities, "zoomControlDisplayValueForZoomFactor:mode:device:videoConfiguration:videoStabilizationStrength:", v9, v14, v12, [v6 videoStabilizationStrength], 1.0);
          [v7 configureForToggleOnlyWithZoomFactor:1.0 displayZoomFactor:v54];
        }
      }
    }
  }
}

BOOL __83__CAMViewfinderViewController__configureZoomControlForGraphConfiguration_animated___block_invoke(uint64_t a1, void *a2)
{
  [a2 doubleValue];
  return vabdd_f64(v3, *(double *)(a1 + 32)) < 0.001;
}

- (void)_updateZoomControlAccessoryStateAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = (unint64_t)([(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus]
                        - 9) < 2;
  id v6 = [(CAMViewfinderViewController *)self _zoomControl];
  [v6 setZoomButtonAccessoryState:v5 animated:v3];
}

- (void)_handleTouchDownForZoomControl:(id)a3
{
  id v6 = [(CAMViewfinderViewController *)self _swipeUpGestureRecognizer];
  BOOL v4 = [(CAMViewfinderViewController *)self _swipeDownGestureRecognizer];
  [v6 setEnabled:0];
  [v6 setEnabled:1];
  [v4 setEnabled:0];
  [v4 setEnabled:1];
  BOOL v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
  [v5 cancelZoom];
}

- (void)zoomControl:(id)a3 didChangeZoomFactor:(double)a4 interactionType:(int64_t)a5
{
}

- (void)_zoomControlDidChangeZoomFactor:(double)a3 interactionType:(int64_t)a4
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  double v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  if ([(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v7])
  {
    unint64_t v8 = [(CAMViewfinderViewController *)self _captureController];
    int v9 = [v8 isCapturingVideo];

    if (a4 == 1)
    {
      if (v9) {
        double v16 = 0.2;
      }
      else {
        double v16 = 0.1;
      }
      [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
      double v10 = v16 * fabs(log(a3 / v17) / 0.693147181);
      uint64_t v12 = 1;
      uint64_t v11 = 3;
    }
    else
    {
      double v10 = 0.25;
      if (v9) {
        double v10 = 0.5;
      }
      if (a4)
      {
        double v10 = 0.0;
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = 2;
      }
      if (a4) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = 3;
      }
    }
    [(CAMViewfinderViewController *)self _changeToZoomFactor:v12 rampDuration:0 zoomRampTuning:a3 shouldAnimate:v10];
    [(CAMViewfinderViewController *)self _setLastZoomInteractionType:v11];
    if (a4 == 1)
    {
      double v18 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
      [v18 didZoomInteraction:3];
    }
  }
  else
  {
    double v13 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v14 = @"tap";
      if (a4 != 1) {
        unint64_t v14 = 0;
      }
      if (!a4) {
        unint64_t v14 = @"drag";
      }
      int v15 = v14;
      int v19 = 138543618;
      uint64_t v20 = v15;
      __int16 v21 = 2114;
      int64_t v22 = v7;
      _os_log_impl(&dword_2099F8000, v13, OS_LOG_TYPE_DEFAULT, "Ignoring zoom control %{public}@ because zoom control should not be enabled for %{public}@", (uint8_t *)&v19, 0x16u);
    }
  }
}

- (BOOL)canToggleBetweenZoomFactorsForZoomControl:(id)a3
{
  if ([(CAMViewfinderViewController *)self _currentDevicePosition] == 1)
  {
    LOBYTE(v4) = 1;
  }
  else
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
    int v4 = [v5 isCapturingVideo] ^ 1;
  }
  return v4;
}

- (void)toggleBetweenZoomFactorsForZoomControl:(id)a3
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v6 = [(CAMViewfinderViewController *)self _wantsZoomControlForGraphConfiguration:v5];

  if (v6)
  {
    int64_t v7 = [(CAMViewfinderViewController *)self _currentDevicePosition];
    if (v7 == 1)
    {
      [(CAMViewfinderViewController *)self _toggleBetweenFrontFacingZoomFactorsForZoomControl:v4];
    }
    else if (!v7)
    {
      [(CAMViewfinderViewController *)self _toggleBetweenBackFacingZoomFactorsForZoomControl:v4];
    }
  }
  else
  {
    unint64_t v8 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      int v10 = 138543362;
      uint64_t v11 = v9;
      _os_log_impl(&dword_2099F8000, v8, OS_LOG_TYPE_DEFAULT, "Ignoring zoom control tap because zoom control should not be enabled for %{public}@", (uint8_t *)&v10, 0xCu);
    }
  }
}

- (void)_toggleBetweenBackFacingZoomFactorsForZoomControl:(id)a3
{
  id v17 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v4 = [v17 mode];
  uint64_t v5 = [v17 device];
  uint64_t v6 = [v17 devicePosition];
  uint64_t v7 = [v17 videoConfiguration];
  uint64_t v8 = [v17 videoStabilizationStrength];
  int v9 = +[CAMCaptureCapabilities capabilities];
  int v10 = [v9 isTelephotoSupportedForDevicePosition:v6];
  int v11 = [v9 isDualSupportedForMode:v4 devicePosition:v6 videoConfiguration:v7 videoStabilizationStrength:v8];
  int v12 = [v9 isSuperWideSupportedForDevicePosition:v6];
  int v13 = [v9 isWideDualSupportedForMode:v4 devicePosition:v6 videoConfiguration:v7 videoStabilizationStrength:v8];
  switch(v5)
  {
    case 0:
      uint64_t v14 = 5;
      if (!v12) {
        uint64_t v14 = 0;
      }
      if (v10) {
        uint64_t v14 = 3;
      }
      BOOL v15 = (v13 & v11) == 0;
      goto LABEL_12;
    case 2:
      uint64_t v14 = 2;
      if (v12) {
        uint64_t v14 = 5;
      }
      BOOL v15 = v10 == 0;
      uint64_t v16 = 3;
      goto LABEL_13;
    case 3:
      BOOL v15 = v12 == 0;
      uint64_t v14 = 2;
      uint64_t v16 = 5;
      goto LABEL_13;
    case 4:
      BOOL v15 = v13 == 0;
      uint64_t v14 = 4;
LABEL_12:
      uint64_t v16 = 6;
LABEL_13:
      if (v15) {
        uint64_t v5 = v14;
      }
      else {
        uint64_t v5 = v16;
      }
      break;
    case 5:
      uint64_t v5 = 2;
      break;
    case 6:
      uint64_t v5 = 4;
      break;
    default:
      break;
  }
  [(CAMViewfinderViewController *)self _handleUserChangedToMode:v4 device:v5];
  [(CAMViewfinderViewController *)self _setLastZoomInteractionType:3];
}

- (void)_toggleBetweenFrontFacingZoomFactorsForZoomControl:(id)a3
{
  id v4 = a3;
  id v18 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  uint64_t v5 = [v18 mode];
  uint64_t v6 = [v18 device];
  uint64_t v7 = [v18 devicePosition];
  uint64_t v8 = [v18 videoConfiguration];
  uint64_t v9 = [v4 zoomButtonSymbol];

  int v10 = +[CAMCaptureCapabilities capabilities];
  int v11 = [v10 isSuperWideSupportedForDevicePosition:v7];

  int v12 = +[CAMCaptureCapabilities capabilities];
  int v13 = v12;
  if (v11) {
    [v12 superWideToWideZoomFactorForDevicePosition:v7];
  }
  else {
    objc_msgSend(v12, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", v5, v6, v8, objc_msgSend(v18, "videoStabilizationStrength"));
  }
  double v15 = v14;

  double v16 = v15 + 0.01;
  [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
  if (v9 == 1)
  {
    double v17 = v17 / v16;
  }
  else if (!v9)
  {
    double v17 = v17 * v16;
  }
  [(CAMViewfinderViewController *)self _updateZoomFactorForZoomFactor:3 rampDuration:&__block_literal_global_1213 interactionType:v17 didChangeDevice:0.25];
}

- (void)zoomControl:(id)a3 didChangeSelectedButtonIndex:(unint64_t)a4 displayZoomFactor:(double)a5
{
  id v7 = a3;
  int64_t v8 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v9 = [(CAMViewfinderViewController *)self _deviceForSelectButtonZoomDisplayZoomFactor:a5];
  [(CAMViewfinderViewController *)self _zoomFactorForSelectButtonDisplayZoomFactor:v9 device:a5];
  double v11 = v10;
  [v7 setZoomButtonAccessoryState:0 animated:1];

  [(CAMViewfinderViewController *)self _handleUserChangedToMode:v8 device:v9 zoomFactor:v11];
  [(CAMViewfinderViewController *)self _setLastZoomInteractionType:3];
}

- (int64_t)_deviceForSelectButtonZoomDisplayZoomFactor:(double)a3
{
  int64_t v5 = [(CAMViewfinderViewController *)self _currentDevicePosition];
  int64_t v6 = [(CAMViewfinderViewController *)self _currentDevice];
  int64_t v7 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v8 = +[CAMCaptureCapabilities capabilities];
  int v9 = [v8 isDualDeviceDisparitySupportedForMode:v7 devicePosition:v5];
  if (!v5)
  {
    int v10 = v9;
    [v8 superWideDisplayZoomFactor];
    if (v11 == a3)
    {
      int64_t v6 = 5;
    }
    else
    {
      [v8 wideDisplayZoomFactor];
      if (v12 == a3)
      {
        if (v10) {
          int64_t v6 = 6;
        }
        else {
          int64_t v6 = 2;
        }
      }
      else
      {
        [v8 telephotoDisplayZoomFactor];
        if (v13 == a3)
        {
          if (v10) {
            int64_t v6 = 4;
          }
          else {
            int64_t v6 = 3;
          }
        }
        else
        {
          [v8 quadraWideDisplayZoomFactor];
          uint64_t v15 = 2;
          if (v10) {
            uint64_t v15 = 6;
          }
          if (v14 == a3) {
            int64_t v6 = v15;
          }
        }
      }
    }
  }

  return v6;
}

- (double)_zoomFactorForSelectButtonDisplayZoomFactor:(double)a3 device:(int64_t)a4
{
  int64_t v7 = +[CAMCaptureCapabilities capabilities];
  int64_t v8 = [(CAMViewfinderViewController *)self _currentMode];
  if ((unint64_t)(a4 - 1) > 0xA) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = qword_209C794E8[a4 - 1];
  }
  int64_t v10 = [(CAMViewfinderViewController *)self _currentVideoConfiguration];
  if ([v7 isDualDeviceDisparitySupportedForMode:v8 devicePosition:v9])
  {
    if (a4 == 4)
    {
      double v11 = a3;
    }
    else
    {
      double v11 = 1.0;
      if (a4 == 6)
      {
        [v7 superWideToWideZoomFactorForDevicePosition:0];
        double v11 = v12 * a3;
      }
    }
  }
  else
  {
    double v11 = 1.0;
    if ([v7 isQuadraWideZoomButtonSupportedForMode:v8 devicePosition:v9 videoConfiguration:v10])
    {
      [v7 quadraWideDisplayZoomFactor];
      if (v13 == a3)
      {
        [v7 quadraWideRelativeZoomFactor];
        double v11 = v14;
      }
    }
  }

  return v11;
}

- (BOOL)zoomControlShouldSnapDialToSwitchOverZoomFactors:(id)a3
{
  uint64_t v4 = [(CAMViewfinderViewController *)self _captureController];
  char v5 = [(id)v4 isCapturingVideo];

  int64_t v6 = [(CAMViewfinderViewController *)self _captureController];
  LOBYTE(v4) = [v6 isCapturingLivePhotoVideo];

  return (v5 | v4) ^ 1;
}

- (BOOL)_shouldAllowHapticsForCurrentState
{
  id v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingVideo] ^ 1;

  return v3;
}

- (void)zoomControlDidChangeShowingZoomDial:(id)a3
{
  id v4 = a3;
  char v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v5 animated:1];

  LODWORD(v5) = [v4 isShowingZoomDial];
  if (v5)
  {
    id v6 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
    [v6 didZoomInteraction:2];
  }
}

- (void)zoomControlDidChangePlatterExpanded:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateLightingControlFadesForGraphConfiguration:v4 animated:1];
}

- (unint64_t)zoomControl:(id)a3 accessoryButtonTapIndexInDisplayZoomFactors:(id)a4
{
  id v5 = a4;
  if ([a3 zoomButtonAccessoryState] == 1)
  {
    if ((unint64_t)[v5 count] < 2) {
      unint64_t v6 = 0;
    }
    else {
      unint64_t v6 = [v5 indexOfObject:&unk_26BDDF238];
    }
  }
  else
  {
    unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v6;
}

- (void)zoomControlDidTapZoomButtonAccessory:(id)a3
{
  id v3 = a3;
  if ([v3 zoomButtonAccessoryState] == 1) {
    [v3 setZoomButtonAccessoryState:0 animated:1];
  }
}

- (void)lightingControlDidChangeSelectedLightingType:(id)a3
{
  uint64_t v4 = [a3 selectedLightingType];
  int64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
  int64_t v6 = [(CAMViewfinderViewController *)self _currentMaxPhotoResolution];
  [(CAMViewfinderViewController *)self _setLightingType:v4 forMode:v5];
  id v13 = +[CAMCaptureCapabilities capabilities];
  if ([v13 smartStylesSupported])
  {
    [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:1];
    [(CAMViewfinderViewController *)self _updateSmartStyleOnSession];
  }
  if ([(CAMViewfinderViewController *)self _currentMaxPhotoResolution] != v6)
  {
    [(CAMViewfinderViewController *)self _prepareDeferredProcessingIfNeeded];
    [(CAMViewfinderViewController *)self _preparePhotoOutputForExpectedPhotoResolution];
  }
  [(CAMViewfinderViewController *)self _updateCurrentPreviewFiltersOnCaptureController];
  int64_t v7 = [(CAMViewfinderViewController *)self _lightingNameBadge];
  [v7 setLightingType:v4];

  int64_t v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v9 = [v8 lightingNameBadge];
  [v9 setLightingType:v4];

  [(CAMViewfinderViewController *)self _updateControlDrawerContentsVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateControlStatusBarContentsVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
  int64_t v10 = [(CAMViewfinderViewController *)self _previewViewController];
  [v10 setLightingType:v4 animated:1];

  double v11 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  [v11 didChangePortraitLighting];

  double v12 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:v12];
}

- (void)lightingControl:(id)a3 willChangeExpanded:(BOOL)a4
{
  BOOL v4 = a4;
  id v15 = a3;
  int64_t v6 = [(CAMViewfinderViewController *)self _previewViewController];
  int64_t v7 = [v6 previewView];

  if (v4)
  {
    int64_t v8 = [(CAMViewfinderViewController *)self _currentMode];
    int64_t v9 = +[CAMUserPreferences defaultFilterTypeForMode:v8];
    int64_t v10 = [(CAMViewfinderViewController *)self _effectFilterTypeForMode:v8];
    [(CAMViewfinderViewController *)self _setEffectFilterType:v9 forMode:v8];
    -[CAMViewfinderViewController _setLightingType:forMode:](self, "_setLightingType:forMode:", [v15 selectedLightingType], v8);
    if (v10 != v9) {
      [(CAMViewfinderViewController *)self _updateCurrentPreviewFiltersOnCaptureController];
    }
    double v11 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    [(CAMViewfinderViewController *)self _updateFilterScrubberForGraphConfiguration:v11];

    [(CAMViewfinderViewController *)self _updateFilterButtonOnState];
    [(CAMViewfinderViewController *)self _updateFilterNameBadgeAnimated:1];
  }
  int64_t v12 = [(CAMViewfinderViewController *)self _layoutStyle];
  double v13 = 0.0;
  if ((v12 | 4) == 4 && v4)
  {
    objc_msgSend(v15, "frame", 0.0);
    objc_msgSend(v15, "alignmentRectForFrame:");
    double v13 = v14;
  }
  [v7 setBottomContentInset:v13];
}

- (void)lightingControlDidChangeExpanded:(id)a3
{
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateTransientLightingBadgeVisibilityAnimated:1];
}

- (void)captureController:(id)a3 receivedOverlaySimulatedAperture:(float)a4
{
}

- (void)captureController:(id)a3 receivedOverlayChangeSmartStyle:(id)a4
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v5 = a4;
  int64_t v6 = +[CAMCaptureCapabilities capabilities];
  char v7 = objc_msgSend(v6, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if ((v7 & 9) != 0)
  {
    if ((v7 & 8) != 0)
    {
      int64_t v9 = [(CAMViewfinderViewController *)self _semanticStyles];
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 3221225472;
      v15[2] = __81__CAMViewfinderViewController_captureController_receivedOverlayChangeSmartStyle___block_invoke;
      _OWORD v15[3] = &unk_263FA1930;
      id v10 = v5;
      id v16 = v10;
      uint64_t v11 = [v9 indexOfObjectPassingTest:v15];

      if (v11 == 0x7FFFFFFFFFFFFFFFLL)
      {
        int64_t v12 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          double v13 = [(CAMViewfinderViewController *)self _semanticStyles];
          *(_DWORD *)buf = 138543618;
          id v18 = v10;
          __int16 v19 = 2114;
          uint64_t v20 = v13;
          _os_log_impl(&dword_2099F8000, v12, OS_LOG_TYPE_DEFAULT, "Received overlay update for style %{public}@ that is not in array of styles: %{public}@", buf, 0x16u);
        }
      }
      else
      {
        [(CAMViewfinderViewController *)self _setSelectedSemanticStyleIndex:v11];
        int64_t v12 = [(CAMViewfinderViewController *)self _semanticStyles];
        [v12 setObject:v10 atIndexedSubscript:[(CAMViewfinderViewController *)self _selectedSemanticStyleIndex]];
      }
    }
    else if (v7)
    {
      int64_t v8 = [(CAMViewfinderViewController *)self _semanticStyles];
      objc_msgSend(v8, "setObject:atIndexedSubscript:", v5, -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex"));
    }
    [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:1];
    double v14 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];
    [v14 didChangeValueForControlType:11];
  }
}

BOOL __81__CAMViewfinderViewController_captureController_receivedOverlayChangeSmartStyle___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 castType];
  return v3 == [*(id *)(a1 + 32) castType];
}

- (void)captureController:(id)a3 receivedOverlayUpdateSmartStyle:(id)a4
{
  id v13 = a4;
  id v5 = +[CAMCaptureCapabilities capabilities];
  char v6 = objc_msgSend(v5, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if ((v6 & 8) != 0)
  {
    id v10 = [(CAMViewfinderViewController *)self _semanticStyles];
    unint64_t v11 = [(CAMViewfinderViewController *)self _selectedSemanticStyleIndex];
    goto LABEL_6;
  }
  if (v6)
  {
    unint64_t v7 = [(CAMViewfinderViewController *)self _smartStyleSystemStyleIndex];
    int64_t v8 = [(CAMViewfinderViewController *)self _semanticStyles];
    unint64_t v9 = [v8 count];

    if (v7 < v9)
    {
      id v10 = [(CAMViewfinderViewController *)self _semanticStyles];
      unint64_t v11 = [(CAMViewfinderViewController *)self _smartStyleSystemStyleIndex];
LABEL_6:
      [v10 setObject:v13 atIndexedSubscript:v11];
    }
  }
  [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:1];
  int64_t v12 = [(CAMViewfinderViewController *)self _analyticsControlDrawerEvent];
  [v12 didChangeValueForControlType:11];
}

- (void)captureController:(id)a3 receivedOverlayStyleControlActive:(BOOL)a4
{
  BOOL v4 = a4;
  id v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v5 setOverlayStyleControlActive:v4 animated:1];
}

- (void)captureController:(id)a3 receivedOverlayApertureControlActive:(BOOL)a4
{
  if (a4) {
    [(CAMViewfinderViewController *)self _updateDepthEffectSuggestionEnabled:1];
  }
}

- (void)captureController:(id)a3 receivedSystemOverlayUpdateExposureBias:(double)a4
{
  char v6 = [(CAMViewfinderViewController *)self _previewViewController];
  [v6 cachedExposureTargetBias];
  float v8 = v7;

  float v9 = a4 - v8;
  double v10 = v9;
  [(CAMViewfinderViewController *)self _handleUserChangedToExposureSliderBias:0 updateSystemOverlayValues:v10];
}

- (void)captureController:(id)a3 receivedSystemOverlayLensSelectorZoomFactor:(double)a4
{
  double v6 = *MEMORY[0x263F30720];
  if ([(CAMViewfinderViewController *)self _currentDevicePosition] == (v6 == a4))
  {
    if ([(CAMViewfinderViewController *)self _isReconfiguring])
    {
      [(CAMViewfinderViewController *)self _changeToZoomFactor:0 rampDuration:0 zoomRampTuning:0 shouldAnimate:a4 updateOverlay:0.0];
    }
    else
    {
      [(CAMViewfinderViewController *)self _zoomControlDidChangeZoomFactor:1 interactionType:a4];
    }
  }
  else
  {
    float v7 = +[CAMUserPreferences preferences];
    uint64_t v8 = objc_msgSend(v7, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v6 == a4, 0);

    if (v6 == a4)
    {
      [(CAMViewfinderViewController *)self _handleUserChangedToDevice:v8];
    }
    else
    {
      int64_t v9 = [(CAMViewfinderViewController *)self _currentMode];
      [(CAMViewfinderViewController *)self _handleUserChangedToMode:v9 device:v8 zoomFactor:a4];
    }
  }
}

- (void)captureController:(id)a3 receivedOverlayVisible:(BOOL)a4
{
  BOOL v4 = a4;
  double v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v6 setSystemOverlayVisible:v4 animated:1];

  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
}

- (void)captureController:(id)a3 receivedQuietUIActive:(BOOL)a4
{
  BOOL v5 = a4;
  [(CAMViewfinderViewController *)self _setCurrentHalfPressSpotlight:a4];
  double v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v6 setSpotlightControl:v5 animated:1];

  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Spotlight changed"];
}

- (void)captureController:(id)a3 receivedFocusLocked:(BOOL)a4
{
  BOOL v4 = a4;
  double v6 = [(CAMViewfinderViewController *)self _previewViewController];
  [v6 setFocusAndExposureExternallyLocked:v4];

  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
}

- (void)captureController:(id)a3 willRecoverFromRuntimeError:(id)a4
{
  id v4 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v4 addClosedViewfinderReason:5];
}

- (void)_handleGeneralCaptureControllerSuspension
{
  [(CAMViewfinderViewController *)self _cancelCTMCapture];
  if (![(CAMViewfinderViewController *)self _isCapturingTimelapse])
  {
    uint64_t v3 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v3 resetAnimated:1];
  }
  id v4 = [(CAMViewfinderViewController *)self _controlDrawer];
  BOOL v5 = [v4 lowLightSlider];
  [v5 endCaptureAnimationAnimated:1];

  [(CAMViewfinderViewController *)self _resetMachineReadableMetadataAndProcessing];
  double v6 = +[CAMCaptureCapabilities capabilities];
  LODWORD(v5) = [v6 shouldPreventConnectionHandover];

  if (v5)
  {
    id v7 = [(CAMViewfinderViewController *)self _preventConnectionHandoverAssertionController];
    [v7 releaseAssertionIfHeld];
  }
}

- (void)captureControllerInterruptionEnded:(id)a3
{
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "captureControllerInterruptionEnded:", v7, 2u);
  }

  BOOL v5 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v5 removeClosedViewfinderReason:4];
  if (!+[CAMApplication appOrPlugInState])
  {
    int64_t v6 = [(CAMViewfinderViewController *)self _currentMode];
    [(CAMViewfinderViewController *)self _updateFlashModeOnControllerForMode:v6];
    [(CAMViewfinderViewController *)self _updateTorchModeOnControllerForMode:v6];
  }
  [(CAMViewfinderViewController *)self _updateModeDisabledForCurrentStateAnimated:1];
  [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Capture Controller Interruption Ended"];
}

- (void)_stopRecordingForDeactivationReason:(id)a3
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v4 = a3;
  BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
  unint64_t v6 = [(CAMViewfinderViewController *)self _currentMode];
  if (v6 <= 8)
  {
    if (((1 << v6) & 0x186) != 0)
    {
      if ([v5 isCapturingVideo])
      {
        id v7 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 138543362;
          id v12 = v4;
          _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "Stopping video capture for deactivation reason %{public}@", (uint8_t *)&v11, 0xCu);
        }

        [(CAMViewfinderViewController *)self _stopCapturingVideo];
LABEL_7:
        uint64_t v8 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
        [v8 resetAnimated:1];
      }
    }
    else
    {
      if (!v6)
      {
        if (![v5 isCapturingCTMVideo]) {
          goto LABEL_8;
        }
        double v10 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 138543362;
          id v12 = v4;
          _os_log_impl(&dword_2099F8000, v10, OS_LOG_TYPE_DEFAULT, "Stopping video capture for deactivation reason %{public}@", (uint8_t *)&v11, 0xCu);
        }

        [(CAMViewfinderViewController *)self _stopCapturingCTMVideo];
        goto LABEL_7;
      }
      if (v6 == 3 && [v5 isCapturingPanorama])
      {
        int64_t v9 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 138543362;
          id v12 = v4;
          _os_log_impl(&dword_2099F8000, v9, OS_LOG_TYPE_DEFAULT, "Stopping panorama capture for deactivation reason %{public}@", (uint8_t *)&v11, 0xCu);
        }

        [(CAMViewfinderViewController *)self _stopCapturingPanorama];
        goto LABEL_7;
      }
    }
  }
LABEL_8:
}

- (void)_handleApplicationWillEnterForeground:(id)a3
{
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Received UIApplicationWillEnterForegroundNotification", buf, 2u);
  }

  BOOL v5 = [(CAMViewfinderViewController *)self _updateDuetSystemConstraintsIfNecessary];
  [(CAMViewfinderViewController *)self _updateBadgeVisibilityAnimated:0];
  if (![(CAMViewfinderViewController *)self isEmulatingImagePicker]) {
    [(CAMViewfinderViewController *)self readUserPreferencesAndHandleChangesWithOverrides:0];
  }
  if (!v5) {
    [(CAMViewfinderViewController *)self _updateDuetSystemConstraintsIfNecessary];
  }
  unint64_t v6 = [(CAMViewfinderViewController *)self _captureController];
  id v7 = v6;
  if (self->_performingReviewUsingOverlay)
  {
    uint64_t v8 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_2099F8000, v8, OS_LOG_TYPE_DEFAULT, "Skipping session start since we're showing the review overlay screen", v13, 2u);
    }
  }
  else
  {
    [v6 startCaptureSessionWithRetryCount:3 retryInterval:@"application will enter foreground" logReason:0 completion:0.05];
  }
  [(CAMViewfinderViewController *)self _resetZoom];
  if ([(CAMViewfinderViewController *)self _shouldUpdateCaptureOrientation]) {
    [(CAMViewfinderViewController *)self _updateUIForCaptureOrientationAnimated:0];
  }
  [(CAMViewfinderViewController *)self _updateDiskSpaceAlertViewVisibilityAnimated:0];
  int64_t v9 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v9 removeClosedViewfinderReason:7];
  [v9 removeClosedViewfinderReason:21];
  [v9 removeClosedViewfinderReason:15];
  double v10 = +[CAMUserPreferences preferences];
  int v11 = [v10 sharedLibraryEnabled];

  if (v11)
  {
    id v12 = [(CAMViewfinderViewController *)self _librarySelectionController];
    [v12 startNewSession];
  }
  [(CAMViewfinderViewController *)self generateAnalyticsSessionEventIfNeeded];
}

- (void)_handleSceneDidEnterBackground:(id)a3
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v4 = a3;
  if ([(CAMViewfinderViewController *)self isEmulatingImagePicker])
  {
    BOOL v5 = [(CAMViewfinderViewController *)self _captureController];
    int v6 = [v5 isCapturingVideo];

    if (v6)
    {
      id v7 = [v4 object];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        uint64_t v8 = [v7 windows];
        uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v19;
          while (2)
          {
            uint64_t v12 = 0;
            do
            {
              if (*(void *)v19 != v11) {
                objc_enumerationMutation(v8);
              }
              uint64_t v13 = *(void **)(*((void *)&v18 + 1) + 8 * v12);
              double v14 = [(CAMViewfinderViewController *)self view];
              id v15 = [v14 window];

              if (v13 == v15)
              {

                id v16 = os_log_create("com.apple.camera", "Camera");
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)double v17 = 0;
                  _os_log_impl(&dword_2099F8000, v16, OS_LOG_TYPE_DEFAULT, "Stop recording video for backgrounded scene", v17, 2u);
                }

                [(CAMViewfinderViewController *)self _stopCapturingVideo];
                goto LABEL_16;
              }
              ++v12;
            }
            while (v10 != v12);
            uint64_t v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
            if (v10) {
              continue;
            }
            break;
          }
        }
      }
LABEL_16:
    }
  }
}

- (void)_updateProResControlsForCurrentState
{
  [(CAMViewfinderViewController *)self _updateFreeResourcesInstructionLabelForCurrentState];
  id v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateMaxRecordingTimeInstructionLabelForGraphConfiguration:v3];
}

- (void)availableDiskSpaceChanged:(id)a3
{
  [(CAMViewfinderViewController *)self _updateDiskSpaceAlertViewVisibilityAnimated:1];
  id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v4 animated:1];

  [(CAMViewfinderViewController *)self _updateProResControlsForCurrentState];
}

- (void)storageControllerDidChangePurgingState:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:v4 animated:1];

  [(CAMViewfinderViewController *)self _updateProResControlsForCurrentState];
  [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"did change purging state"];
}

- (void)_handleTimelapseLowDiskSpaceNotification:(id)a3
{
  id v4 = a3;
  BOOL v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "Received CAMTimelapseLowDiskSpaceNotification", (uint8_t *)buf, 2u);
  }

  int v6 = [(CAMViewfinderViewController *)self _diskSpaceAlertController];
  if (!v6)
  {
    id v7 = [v4 userInfo];
    uint64_t v8 = [v7 objectForKeyedSubscript:@"CAMTimelapseLowDiskSpaceTitleInfo"];
    uint64_t v9 = [v7 objectForKeyedSubscript:@"CAMTimelapseLowDiskSpaceMessageInfo"];
    objc_initWeak(buf, self);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __72__CAMViewfinderViewController__handleTimelapseLowDiskSpaceNotification___block_invoke;
    aBlock[3] = &unk_263FA2048;
    objc_copyWeak(&v23, buf);
    uint64_t v10 = _Block_copy(aBlock);
    long long v20 = (void *)v8;
    int v6 = [MEMORY[0x263F82418] alertControllerWithTitle:v8 message:v9 preferredStyle:1];
    uint64_t v11 = (void *)MEMORY[0x263F82400];
    uint64_t v12 = CAMStorageAlertDismissTitle([(CAMViewfinderViewController *)self _diskSpaceAlertType]);
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    v21[2] = __72__CAMViewfinderViewController__handleTimelapseLowDiskSpaceNotification___block_invoke_2;
    v21[3] = &unk_263FA1278;
    v21[4] = self;
    uint64_t v13 = [v11 actionWithTitle:v12 style:0 handler:v21];
    [v6 addAction:v13];

    double v14 = CAMStorageAlertResolveTitle(1);
    if (v14)
    {
      id v15 = (void *)MEMORY[0x263F82400];
      id v16 = CAMStorageAlertResolveTitle(1);
      double v17 = [v15 actionWithTitle:v16 style:0 handler:v10];
      [v6 addAction:v17];
    }
    [(CAMViewfinderViewController *)self presentViewController:v6 animated:1 completion:0];
    [(CAMViewfinderViewController *)self _setDiskSpaceAlertController:v6];
    long long v18 = [(CAMViewfinderViewController *)self _storageController];
    long long v19 = [v18 purgeableStorageContainer];
    [v19 reportLowDiskEventWithIdentifier:@"com.apple.camera.timelapse"];

    objc_destroyWeak(&v23);
    objc_destroyWeak(buf);
  }
}

void __72__CAMViewfinderViewController__handleTimelapseLowDiskSpaceNotification___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _dismissDiskSpaceAlertViewAnimated:1];

  CAMShowStorageUsageInSettings();
}

uint64_t __72__CAMViewfinderViewController__handleTimelapseLowDiskSpaceNotification___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dismissDiskSpaceAlertViewAnimated:1];
}

- (int64_t)_diskSpaceAlertType
{
  BOOL v3 = [(CAMViewfinderViewController *)self _externalStorageOutputEnabled];
  int v4 = PLIsCPLDataclassEnabled();
  int IsEnabled = PLCloudPhotoLibraryKeepOriginalsIsEnabled();
  int v6 = [(CAMViewfinderViewController *)self _hasBeenPromptedForICPLToday];
  if (v3) {
    return 2;
  }
  else {
    return v4 & ~v6 & IsEnabled ^ 1u;
  }
}

- (BOOL)_hasBeenPromptedForICPLToday
{
  CFPreferencesAppSynchronize(@"com.apple.mobileslideshow");
  id v2 = (void *)CFPreferencesCopyAppValue(@"CPLKeepOriginalsPromptShownDate", @"com.apple.mobileslideshow");
  if (v2
    && ([MEMORY[0x263EFF910] date],
        BOOL v3 = objc_claimAutoreleasedReturnValue(),
        uint64_t v4 = [v3 compare:v2],
        v3,
        v4 != 1))
  {
    BOOL v7 = 1;
  }
  else
  {
    BOOL v5 = [MEMORY[0x263EFF910] date];
    int v6 = [v5 dateByAddingTimeInterval:86400.0];

    CFPreferencesSetAppValue(@"CPLKeepOriginalsPromptShownDate", v6, @"com.apple.mobileslideshow");
    CFPreferencesAppSynchronize(@"com.apple.mobileslideshow");

    BOOL v7 = 0;
  }

  return v7;
}

- (void)_showDiskSpaceAlertView
{
  BOOL v3 = [(CAMViewfinderViewController *)self _diskSpaceAlertController];
  if (v3) {
    goto LABEL_11;
  }
  int64_t v4 = [(CAMViewfinderViewController *)self _diskSpaceAlertType];
  unint64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
  objc_initWeak(&location, self);
  if ((unint64_t)(v4 - 1) >= 2)
  {
    if (v4)
    {
      uint64_t v9 = 0;
      goto LABEL_8;
    }
    int v6 = (id *)&v26;
    BOOL v7 = v25;
    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    uint64_t v8 = __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke;
  }
  else
  {
    int v6 = (id *)&v24;
    BOOL v7 = v23;
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 3221225472;
    uint64_t v8 = __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke_2;
  }
  v7[2] = v8;
  v7[3] = &unk_263FA2048;
  objc_copyWeak(v6, &location);
  uint64_t v9 = _Block_copy(v7);
  objc_destroyWeak(v6);
LABEL_8:
  uint64_t v10 = (void *)MEMORY[0x263F82418];
  uint64_t v11 = CAMStorageAlertTitle(v4);
  uint64_t v12 = CAMStorageAlertMessage(v4, v5);
  BOOL v3 = [v10 alertControllerWithTitle:v11 message:v12 preferredStyle:1];

  uint64_t v13 = (void *)MEMORY[0x263F82400];
  double v14 = CAMStorageAlertDismissTitle(v4);
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 3221225472;
  v22[2] = __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke_3;
  v22[3] = &unk_263FA1278;
  void v22[4] = self;
  id v15 = [v13 actionWithTitle:v14 style:0 handler:v22];
  [v3 addAction:v15];

  id v16 = CAMStorageAlertResolveTitle(v4);
  if (v16)
  {
    double v17 = [MEMORY[0x263F82400] actionWithTitle:v16 style:0 handler:v9];
    [v3 addAction:v17];
  }
  long long v18 = [v3 actions];
  long long v19 = [v18 lastObject];
  [v3 setPreferredAction:v19];

  [(CAMViewfinderViewController *)self presentViewController:v3 animated:1 completion:0];
  [(CAMViewfinderViewController *)self _setDiskSpaceAlertController:v3];
  long long v20 = [(CAMViewfinderViewController *)self _storageController];
  long long v21 = [v20 purgeableStorageContainer];
  [v21 reportLowDiskEventWithIdentifier:@"com.apple.camera.generic"];

  objc_destroyWeak(&location);
LABEL_11:
}

uint64_t __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _dismissDiskSpaceAlertViewAnimated:1];

  return MEMORY[0x270F53708](0);
}

void __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _dismissDiskSpaceAlertViewAnimated:1];

  CAMShowStorageUsageInSettings();
}

uint64_t __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke_3(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dismissDiskSpaceAlertViewAnimated:1];
}

- (void)_showUnsupportedFormatAlert
{
  BOOL v3 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2099F8000, v3, OS_LOG_TYPE_DEFAULT, "External storage: cannot enable external storage output due to unsupported format", buf, 2u);
  }

  uint64_t v4 = CAMLocalizedFrameworkString(@"EXTERNAL_STORAGE_UNSUPPORTED_FORMAT_TITLE", 0);
  unint64_t v5 = CAMLocalizedFrameworkString(@"EXTERNAL_STORAGE_UNSUPPORTED_FORMAT_MESSAGE", 0);
  int v6 = CAMLocalizedFrameworkString(@"OK", 0);
  BOOL v7 = CAMLocalizedFrameworkString(@"EXTERNAL_STORAGE_LEARN_MORE_TITLE", 0);
  uint64_t v8 = CAMLocalizedFrameworkString(@"EXTERNAL_STORAGE_LEARN_MORE_URL", 0);
  long long v18 = (void *)v4;
  uint64_t v9 = [MEMORY[0x263F82418] alertControllerWithTitle:v4 message:v5 preferredStyle:1];
  uint64_t v10 = (void *)MEMORY[0x263F82400];
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  v21[2] = __58__CAMViewfinderViewController__showUnsupportedFormatAlert__block_invoke;
  v21[3] = &unk_263FA1278;
  id v11 = v9;
  id v22 = v11;
  uint64_t v12 = [v10 actionWithTitle:v6 style:0 handler:v21];
  uint64_t v13 = (void *)MEMORY[0x263F82400];
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  v19[2] = __58__CAMViewfinderViewController__showUnsupportedFormatAlert__block_invoke_2;
  v19[3] = &unk_263FA1278;
  id v20 = v8;
  id v14 = v8;
  id v15 = [v13 actionWithTitle:v7 style:0 handler:v19];
  [v11 addAction:v12];
  [v11 addAction:v15];
  [v11 setPreferredAction:v12];
  [(CAMViewfinderViewController *)self presentViewController:v11 animated:1 completion:0];
  [(CAMViewfinderViewController *)self _setDesiredProResVideoMode:0];
  [(CAMViewfinderViewController *)self _updateProResButtonAnimated:1];
  id v16 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  LOBYTE(v4) = [(CAMViewfinderViewController *)self _shouldShowExternalStorageButtonForGraphConfiguration:v16];

  if ((v4 & 1) == 0)
  {
    double v17 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v17 setExternalStorageButtonVisible:0 animated:1];
  }
}

void __58__CAMViewfinderViewController__showUnsupportedFormatAlert__block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) presentingViewController];
  [v1 dismissViewControllerAnimated:1 completion:0];
}

void __58__CAMViewfinderViewController__showUnsupportedFormatAlert__block_invoke_2(uint64_t a1)
{
  id v1 = [NSURL URLWithString:*(void *)(a1 + 32)];
  CAMOpenURL(v1, MEMORY[0x263EFFA78]);
}

- (void)_showFrameDropsAlert
{
  BOOL v3 = CAMLocalizedFrameworkString(@"EXTERNAL_STORAGE_FRAME_DROPS_ALERT_TITLE", 0);
  uint64_t v4 = CAMLocalizedFrameworkString(@"EXTERNAL_STORAGE_FRAME_DROPS_ALERT_MESSAGE", 0);
  unint64_t v5 = CAMLocalizedFrameworkString(@"OK", 0);
  int v6 = CAMLocalizedFrameworkString(@"EXTERNAL_STORAGE_LEARN_MORE_TITLE", 0);
  BOOL v7 = CAMLocalizedFrameworkString(@"EXTERNAL_STORAGE_LEARN_MORE_URL", 0);
  uint64_t v8 = [MEMORY[0x263F82418] alertControllerWithTitle:v3 message:v4 preferredStyle:1];
  uint64_t v9 = (void *)MEMORY[0x263F82400];
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  id v20[2] = __51__CAMViewfinderViewController__showFrameDropsAlert__block_invoke;
  v20[3] = &unk_263FA1278;
  id v21 = v8;
  id v10 = v8;
  id v11 = [v9 actionWithTitle:v5 style:0 handler:v20];
  uint64_t v12 = (void *)MEMORY[0x263F82400];
  uint64_t v15 = MEMORY[0x263EF8330];
  uint64_t v16 = 3221225472;
  double v17 = __51__CAMViewfinderViewController__showFrameDropsAlert__block_invoke_2;
  long long v18 = &unk_263FA1278;
  id v19 = v7;
  id v13 = v7;
  id v14 = [v12 actionWithTitle:v6 style:0 handler:&v15];
  objc_msgSend(v10, "addAction:", v11, v15, v16, v17, v18);
  [v10 addAction:v14];
  [v10 setPreferredAction:v11];
  [(CAMViewfinderViewController *)self presentViewController:v10 animated:1 completion:0];
}

void __51__CAMViewfinderViewController__showFrameDropsAlert__block_invoke(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) presentingViewController];
  [v1 dismissViewControllerAnimated:1 completion:0];
}

void __51__CAMViewfinderViewController__showFrameDropsAlert__block_invoke_2(uint64_t a1)
{
  id v1 = [NSURL URLWithString:*(void *)(a1 + 32)];
  CAMOpenURL(v1, MEMORY[0x263EFFA78]);
}

- (void)pressShutterForRemoteShutter
{
  BOOL v3 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_2099F8000, v3, OS_LOG_TYPE_DEFAULT, "Remote triggered shutter press and release", v8, 2u);
  }

  uint64_t v4 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

  if (v4)
  {
    unint64_t v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v5 externalButtonPressedWithBehavior:1];

    int v6 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v6 externalButtonReleased];
  }
  else
  {
    BOOL v7 = [(CAMViewfinderViewController *)self _shutterButton];
    [(CAMViewfinderViewController *)self _handleShutterButtonPressed:v7];

    int v6 = [(CAMViewfinderViewController *)self _shutterButton];
    [(CAMViewfinderViewController *)self _handleShutterButtonReleased:v6];
  }
}

- (void)pressStillDuringVideoForRemoteShutter
{
  BOOL v3 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v7 = 0;
    _os_log_impl(&dword_2099F8000, v3, OS_LOG_TYPE_DEFAULT, "Remote triggered still during video press and release", v7, 2u);
  }

  uint64_t v4 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

  if (v4)
  {
    unint64_t v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v5 externalLockButtonPressed];

    int v6 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    [v6 externalLockButtonReleased];
  }
  else
  {
    [(CAMViewfinderViewController *)self _handleStillDuringVideoButtonPressed:self->__stillDuringVideoButton];
    [(CAMViewfinderViewController *)self _handleStillDuringVideoButtonReleased:self->__stillDuringVideoButton];
  }
}

- (void)remoteShutter:(id)a3 takePhotoWithCountdown:(unint64_t)a4
{
  id v14 = a3;
  if (![(CAMViewfinderViewController *)self _isShowingCameraRoll])
  {
    if (!a4)
    {
      if ([(CAMViewfinderViewController *)self isRecording])
      {
        [(CAMViewfinderViewController *)self pressStillDuringVideoForRemoteShutter];
        goto LABEL_23;
      }
      id v10 = self;
      uint64_t v11 = 0;
      goto LABEL_12;
    }
    if (a4 <= 2)
    {
      [(CAMViewfinderViewController *)self _setResetTimerDurationAfterDelayedCapture:0];
      [(CAMViewfinderViewController *)self _setTimerDurationAndUpdateUI:0 animated:1];
      double v6 = (double)a4;
      BOOL v7 = self;
      uint64_t v8 = 0;
LABEL_22:
      [(CAMViewfinderViewController *)v7 performSelector:sel_pressShutterForRemoteShutter withObject:v8 afterDelay:v6];
      goto LABEL_23;
    }
    unint64_t v9 = a4 - 3;
    if (a4 == 3)
    {
      [(CAMViewfinderViewController *)self _setResetTimerDurationAfterDelayedCapture:1];
      id v10 = self;
      uint64_t v11 = 1;
LABEL_12:
      [(CAMViewfinderViewController *)v10 _setTimerDurationAndUpdateUI:v11 animated:1];
LABEL_13:
      [(CAMViewfinderViewController *)self pressShutterForRemoteShutter];
      goto LABEL_23;
    }
    if (a4 > 4)
    {
      unint64_t v9 = a4 - 5;
      if (a4 == 5)
      {
        [(CAMViewfinderViewController *)self _setResetTimerDurationAfterDelayedCapture:1];
        id v10 = self;
        uint64_t v11 = 2;
        goto LABEL_12;
      }
      if (a4 > 9)
      {
        [(CAMViewfinderViewController *)self _setResetTimerDurationAfterDelayedCapture:1];
        [(CAMViewfinderViewController *)self _setTimerDurationAndUpdateUI:3 animated:1];
        if (a4 == 10) {
          goto LABEL_13;
        }
        double v6 = (double)(a4 - 10);
LABEL_21:
        BOOL v7 = self;
        uint64_t v8 = self;
        goto LABEL_22;
      }
      [(CAMViewfinderViewController *)self _setResetTimerDurationAfterDelayedCapture:1];
      uint64_t v12 = self;
      uint64_t v13 = 2;
    }
    else
    {
      [(CAMViewfinderViewController *)self _setResetTimerDurationAfterDelayedCapture:1];
      uint64_t v12 = self;
      uint64_t v13 = 1;
    }
    [(CAMViewfinderViewController *)v12 _setTimerDurationAndUpdateUI:v13 animated:1];
    double v6 = (double)v9;
    goto LABEL_21;
  }
  if (a4) {
    [v14 countdownCanceled];
  }
LABEL_23:
}

- (void)remoteShutterCancelCountdown:(id)a3
{
  [MEMORY[0x263F8C6D0] cancelPreviousPerformRequestsWithTarget:self selector:sel_pressShutterForRemoteShutter object:0];
  if ([(CAMViewfinderViewController *)self _isCapturingFromTimer])
  {
    [(CAMViewfinderViewController *)self _stopCountdownForCaptureTimer];
  }
}

- (BOOL)remoteShutterBeginBurstCapture:(id)a3
{
  if (![(CAMViewfinderViewController *)self _isShowingCameraRoll])
  {
    unint64_t v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    if (v5)
    {
      double v6 = v5;
      if ([v5 isEnabled] && (objc_msgSend(v6, "isTracking") & 1) == 0)
      {
        BOOL v4 = 1;
        [v6 externalButtonPressedWithBehavior:1];
LABEL_10:

        return v4;
      }
    }
    else
    {
      double v6 = [(CAMViewfinderViewController *)self _shutterButton];
      if ([v6 isEnabled] && (objc_msgSend(v6, "isHighlighted") & 1) == 0)
      {
        BOOL v4 = 1;
        [v6 setHighlighted:1];
        [(CAMViewfinderViewController *)self _handleShutterButtonPressed:v6];
        goto LABEL_10;
      }
    }
    BOOL v4 = 0;
    goto LABEL_10;
  }
  return 0;
}

- (BOOL)remoteShutterEndBurstCapture:(id)a3
{
  if (![(CAMViewfinderViewController *)self _isShowingCameraRoll])
  {
    unint64_t v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
    if (v5)
    {
      double v6 = v5;
      [v5 externalButtonReleased];
    }
    else
    {
      double v6 = [(CAMViewfinderViewController *)self _shutterButton];
      if (![v6 isHighlighted])
      {
        BOOL v4 = 0;
        goto LABEL_9;
      }
      [v6 setHighlighted:0];
      [(CAMViewfinderViewController *)self _handleShutterButtonReleased:v6];
    }
    BOOL v4 = 1;
LABEL_9:

    return v4;
  }
  return 0;
}

- (void)remoteShutter:(id)a3 setMode:(int64_t)a4
{
  if ([(CAMViewfinderViewController *)self _isShowingCameraRoll]) {
    [(CAMViewfinderViewController *)self dismissViewControllerAnimated:1 completion:0];
  }
  BOOL v6 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:a4 devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  BOOL v7 = +[CAMUserPreferences preferences];
  uint64_t v8 = objc_msgSend(v7, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", a4, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v6);

  [(CAMViewfinderViewController *)self changeToMode:a4 device:v8 animated:1];
}

- (void)remoteShutter:(id)a3 focusOn:(CGPoint)a4
{
}

- (BOOL)remoteShutterStartCapture:(id)a3
{
  unint64_t v4 = [(CAMViewfinderViewController *)self _currentMode];
  LOBYTE(v5) = 0;
  if (v4 <= 8)
  {
    if (((1 << v4) & 0x1AE) != 0)
    {
      [(CAMViewfinderViewController *)self pressShutterForRemoteShutter];
      LOBYTE(v5) = 1;
    }
    else if (!v4)
    {
      unint64_t v5 = [(CAMViewfinderViewController *)self _dynamicShutterControl];

      if (v5)
      {
        BOOL v7 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
        LOBYTE(v5) = 1;
        [v7 externalButtonPressedWithBehavior:1];
      }
    }
  }
  return (char)v5;
}

- (BOOL)remoteShutterPauseCapture:(id)a3
{
  unint64_t v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = objc_msgSend(v4, "isPauseVideoSupportedForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

  if (!v5) {
    return 0;
  }
  BOOL v6 = [(CAMViewfinderViewController *)self _captureController];
  int v7 = [v6 isCapturingVideo];

  if (!v7) {
    return 0;
  }
  uint64_t v8 = [(CAMViewfinderViewController *)self _captureController];
  char v9 = [v8 videoCapturePaused];

  if (v9) {
    return 0;
  }
  [(CAMViewfinderViewController *)self dynamicShutterControlDidPressPauseResumeButton:0];
  return 1;
}

- (BOOL)remoteShutterResumeCapture:(id)a3
{
  unint64_t v4 = +[CAMCaptureCapabilities capabilities];
  int v5 = objc_msgSend(v4, "isPauseVideoSupportedForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

  if (!v5) {
    return 0;
  }
  BOOL v6 = [(CAMViewfinderViewController *)self _captureController];
  int v7 = [v6 isCapturingVideo];

  if (!v7) {
    return 0;
  }
  uint64_t v8 = [(CAMViewfinderViewController *)self _captureController];
  int v9 = [v8 videoCapturePaused];

  if (!v9) {
    return 0;
  }
  [(CAMViewfinderViewController *)self dynamicShutterControlDidPressPauseResumeButton:0];
  return 1;
}

- (BOOL)remoteShutterStopCapture:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self isRecording];
  if (v4)
  {
    if ([(CAMViewfinderViewController *)self _currentMode]
      || ([(CAMViewfinderViewController *)self _dynamicShutterControl],
          int v5 = objc_claimAutoreleasedReturnValue(),
          v5,
          !v5))
    {
      [(CAMViewfinderViewController *)self pressShutterForRemoteShutter];
    }
    else
    {
      BOOL v6 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      [v6 externalButtonReleased];
    }
  }
  return v4;
}

- (void)remoteShutter:(id)a3 setFlashMode:(int64_t)a4
{
}

- (void)remoteShutter:(id)a3 setHDRMode:(int64_t)a4
{
}

- (void)remoteShutter:(id)a3 setIrisMode:(int64_t)a4
{
}

- (void)remoteShutter:(id)a3 setSharedLibraryMode:(int64_t)a4
{
}

- (void)remoteShutter:(id)a3 setZoomAmount:(double)a4
{
  -[CAMViewfinderViewController _zoomFactorForZoomSliderValue:](self, "_zoomFactorForZoomSliderValue:", a3, a4);
  -[CAMViewfinderViewController _remoteShutterSetZoomFactor:](self, "_remoteShutterSetZoomFactor:");
}

- (void)_remoteShutterSetZoomFactor:(double)a3
{
  if ([(CAMViewfinderViewController *)self _isZoomAllowedCurrently])
  {
    if ([(CAMViewfinderViewController *)self _shouldUseZoomControlInsteadOfSlider])
    {
      [(CAMViewfinderViewController *)self _createZoomControlIfNecessary];
      [(CAMViewfinderViewController *)self _zoomUIDidChangeToFactor:a3];
    }
    else
    {
      [(CAMViewfinderViewController *)self _createZoomSliderIfNecessary];
      zoomSlider = self->__zoomSlider;
      [(CAMViewfinderViewController *)self _zoomSliderValueForZoomFactor:a3];
      *(float *)&double v7 = v7;
      [(CAMZoomSlider *)zoomSlider setValue:0 animated:v7];
      [(CAMViewfinderViewController *)self _zoomUIDidChangeToFactor:a3];
      [(CAMViewfinderViewController *)self zoomSliderDidEndZooming:self->__zoomSlider];
    }
    [(CAMViewfinderViewController *)self _setLastZoomInteractionType:4];
  }
  else
  {
    int v5 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "Ignoring zoom change from Watch because not allowed at this time", v8, 2u);
    }
  }
}

- (void)remoteShutter:(id)a3 setCaptureDevice:(int64_t)a4
{
  int64_t v6 = [(CAMViewfinderViewController *)self _currentDevice];
  if ((unint64_t)(v6 - 1) > 0xA) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = qword_209C794E8[v6 - 1];
  }
  if ((unint64_t)(a4 - 1) > 0xA) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = qword_209C794E8[a4 - 1];
  }
  if (v7 != v8)
  {
    flipButton = self->__flipButton;
    [(CAMViewfinderViewController *)self _handleFlipButtonReleased:flipButton];
  }
}

- (BOOL)remoteShutterShouldSuspendApp:(id)a3
{
  return ![(CAMViewfinderViewController *)self isRecording];
}

- (void)readUserPreferencesAndHandleChangesWithOverrides:(id)a3
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  id v4 = a3;
  int v5 = +[CAMUserPreferences preferences];
  int64_t v6 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  uint64_t v7 = [v6 isCallActive];
  uint64_t v8 = [v5 resetTimeoutDate];
  int v9 = [v5 isVideoConfigurationControlEnabled];
  char v54 = 0;
  objc_msgSend(v5, "readPreferencesWithOverrides:emulationMode:callActive:shouldResetCaptureConfiguration:", v4, -[CAMViewfinderViewController emulationMode](self, "emulationMode"), v7, &v54);
  id v10 = [v5 captureConfiguration];
  double v17 = [v10 semanticStyles];
  uint64_t v11 = (void *)[v17 mutableCopy];
  [(CAMViewfinderViewController *)self _setSemanticStyles:v11];

  uint64_t v12 = [v5 captureConfiguration];
  -[CAMViewfinderViewController _setSelectedSemanticStyleIndex:](self, "_setSelectedSemanticStyleIndex:", [v12 selectedSemanticStyleIndex]);

  uint64_t v13 = [v5 captureConfiguration];
  -[CAMViewfinderViewController _setSmartStyleSystemStyleIndex:](self, "_setSmartStyleSystemStyleIndex:", [v13 smartStyleSystemStyleIndex]);

  [(CAMViewfinderViewController *)self _updateSemanticStyleControlsForCurrentStateAnimated:0];
  [(CAMViewfinderViewController *)self _updateSmartStyleControlsForCurrentStateAnimateSliders:0 animateOtherControls:0];
  [(CAMViewfinderViewController *)self _updateSmartStyleOnSession];
  id v14 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v14 reloadSemanticStyleBadgesDelayIfNeeded:0];

  [(CAMViewfinderViewController *)self _updatePreviewSemanticStyleAnimated:0];
  [(CAMViewfinderViewController *)self _createOrDestroySharedLibraryControlsIfNecessary];
  uint64_t v15 = [v5 resetTimeoutDate];
  double v53 = v8;
  int v16 = [v8 isEqual:v15];
  LOBYTE(v17) = 0;
  if (v9) {
    LODWORD(v17) = [v5 isVideoConfigurationControlEnabled] ^ 1;
  }
  if (v54) {
    goto LABEL_10;
  }
  long long v18 = [v4 videoConfiguration];
  if (v18) {
    char v19 = 1;
  }
  else {
    char v19 = (char)v17;
  }
  if ((v19 & 1) != 0
    || ([v4 slomoConfiguration], (long long v18 = objc_claimAutoreleasedReturnValue()) != 0))
  {

LABEL_10:
    [(CAMViewfinderViewController *)self set_videoConfigurationOverride:0];
    [(CAMViewfinderViewController *)self set_slomoConfigurationOverride:0];
    [(CAMViewfinderViewController *)self set_cinematicConfigurationOverride:0];
    goto LABEL_11;
  }
  double v45 = [v4 cinematicConfiguration];

  if (v45) {
    goto LABEL_10;
  }
LABEL_11:
  id v20 = [v5 captureConfiguration];
  -[CAMViewfinderViewController _setDesiredProResVideoMode:](self, "_setDesiredProResVideoMode:", [v20 proResVideoMode]);

  if (v54) {
    int v21 = 0;
  }
  else {
    int v21 = v16;
  }
  if (v21 != 1 || [v4 hasOverrides])
  {
    BOOL v49 = v15;
    id v22 = [v5 captureConfiguration];
    uint64_t v48 = [v5 conflictingControlConfiguration];
    uint64_t v23 = +[CAMCaptureConfiguration captureGraphConfigurationUsingConfiguration:v22 outputToExternalStorage:[(CAMViewfinderViewController *)self _externalStorageOutputEnabled]];
    id v51 = v4;
    int v24 = [v4 hasOverrides];
    double v25 = @"Reset";
    if (v24) {
      double v25 = @"Overrides";
    }
    uint64_t v26 = v25;
    double v27 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      double v28 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      *(_DWORD *)buf = 138543874;
      unint64_t v56 = v26;
      __int16 v57 = 2114;
      uint64_t v58 = v23;
      __int16 v59 = 2114;
      int64_t v60 = v28;
      _os_log_impl(&dword_2099F8000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@: will change to: %{public}@ from: %{public}@", buf, 0x20u);
    }
    uint64_t v47 = v26;

    int64_t v52 = [(CAMViewfinderViewController *)self _currentMode];
    int64_t v46 = [(CAMViewfinderViewController *)self _currentDevice];
    int64_t v29 = [(CAMViewfinderViewController *)self _currentDevicePosition];
    uint64_t v30 = [v22 mode];
    uint64_t v31 = [v22 device];
    uint64_t v32 = v31;
    BOOL v50 = v6;
    double v33 = (void *)v23;
    if ((unint64_t)(v31 - 1) > 0xA) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = qword_209C794E8[v31 - 1];
    }
    int v35 = [MEMORY[0x263EFF910] now];
    int v36 = [v53 dateByAddingTimeInterval:0.01];
    uint64_t v37 = [v35 compare:v36];
    BOOL v38 = v29 == v34 && v52 == v30;
    if (!v38 && v37 != 1) {
      [(CAMViewfinderViewController *)self _startCaptureSessionIfNecessaryIfVisibleAndInterrupted];
    }
    [(CAMViewfinderViewController *)self _defaultZoomFactorForGraphConfiguration:v33];
    double v40 = v39;
    double v41 = [(CAMViewfinderViewController *)self _captureController];
    uint64_t v42 = objc_msgSend(v41, "applyCaptureConfiguration:zoomFactor:outputToExternalStorage:", v22, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"), v40);

    [(CAMViewfinderViewController *)self _setLastConfigurationRequestID:v42];
    double v43 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v43 applyCaptureConfiguration:v22];
    [(CAMViewfinderViewController *)self applyCaptureConfiguration:v22 conflictingControlConfiguration:v48];
    [(CAMViewfinderViewController *)self _closeViewfinderForChangeFromMode:v52 toMode:v30 fromDevice:v46 toDevice:v32];

    [(CAMViewfinderViewController *)self _setWantsVisualTextAnalysis:0];
    int64_t v6 = v50;
    id v4 = v51;
    uint64_t v15 = v49;
  }
  [(CAMViewfinderViewController *)self _createOrDestroyLevelViewModelIfNecessary];
  [(CAMViewfinderViewController *)self _createGridViewIfNecessary];
  [(CAMViewfinderViewController *)self _createOrDestroyLevelViewIfNecessary];
  [(CAMViewfinderViewController *)self _createOrDestroyHorizonLevelViewIfNecessary];
  [(CAMViewfinderViewController *)self _createOrDestroyHDRBadgeIfNecessary];
  [(CAMViewfinderViewController *)self _createOrDestroyHDRButtonIfNecessary];
  [(CAMViewfinderViewController *)self _updateViewfinderMaterialAnimated:0];
  double v44 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updateVideoConfigurationStatusIndicatorForGraphConfiguration:v44 animated:0];
  [(CAMViewfinderViewController *)self _updateInterfaceModulationForGraphConfiguration:v44 animated:0];
  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
}

- (void)_startCaptureSessionIfNecessaryIfVisibleAndInterrupted
{
  id v7 = [(CAMViewfinderViewController *)self _captureController];
  int v3 = [v7 isInterrupted];
  if ([(CAMViewfinderViewController *)self isViewLoaded])
  {
    id v4 = [(CAMViewfinderViewController *)self view];
    int v5 = [v4 window];

    int v6 = v5 ? v3 : 0;
    if (v6 == 1) {
      [v7 startCaptureSessionWithRetryCount:3 retryInterval:@"resetting graph configuration" logReason:0 completion:0.05];
    }
  }
}

- (void)_createGridViewIfNecessary
{
  id v6 = +[CAMUserPreferences preferences];
  if ([v6 shouldShowGridView] && !self->__gridView)
  {
    int v3 = [CAMGridView alloc];
    id v4 = -[CAMGridView initWithFrame:](v3, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    gridView = self->__gridView;
    self->__gridView = v4;

    [(CAMViewfinderViewController *)self _embedGridViewWithLayoutStyle:[(CAMViewfinderViewController *)self _layoutStyle]];
  }
  [(CAMGridView *)self->__gridView setLevelViewModel:self->__levelViewModel];
}

- (void)_createOrDestroyHorizonLevelViewIfNecessary
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  id v7 = +[CAMUserPreferences preferences];
  char v4 = [v7 shouldShowHorizonLevelView];
  BOOL v5 = [(CAMViewfinderViewController *)self _isSpatialVideoMode:v3 devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldCreateHorizonLevelViewForMode:v3];
  if ((v4 & 1) != 0 || v5)
  {
    if (v6) {
      [(CAMViewfinderViewController *)self _createHorizonLevelViewIfNecessary];
    }
  }
  else
  {
    [(CAMViewfinderViewController *)self _destroyHorizonLevelViewIfNecessary];
  }
}

- (void)suspendCameraSessionWithCompletion:(id)a3
{
  id v4 = a3;
  id v7 = [(CAMViewfinderViewController *)self _captureController];
  [v7 stopCaptureSessionWithCompletion:v4];

  BOOL v5 = [(CAMViewfinderViewController *)self _locationController];
  [v5 setEnabled:0];
  if ([(CAMViewfinderViewController *)self automaticallyAdjustsApplicationIdleTimer])
  {
    BOOL v6 = [(CAMViewfinderViewController *)self _idleController];
    [v6 stopUpdatingIdleTimer];
  }
}

- (void)resumeCameraSessionWithCompletion:(id)a3
{
  id v4 = a3;
  id v5 = [(CAMViewfinderViewController *)self _captureController];
  [v5 startCaptureSessionWithRetryCount:0 retryInterval:@"resumeCameraSession" logReason:v4 completion:0.0];
}

- (void)cameraRollControllerDidFullyPresentCameraRoll:(id)a3
{
  id v4 = a3;
  [(CAMViewfinderViewController *)self _resetMachineReadableMetadataAndProcessing];
  id v5 = [(CAMViewfinderViewController *)self _captureController];
  [v5 changeToTorchMode:0];
  BOOL v6 = [(CAMViewfinderViewController *)self _imageWell];
  [v6 setScaledForInteraction:0];

  id v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldDeferMediaLoadingForGraphConfiguration:v7];

  if (v8)
  {
    [v4 sessionIdentifier];
    dispatch_time(0, 500000000);
    uint64_t v11 = MEMORY[0x263EF8330];
    uint64_t v12 = 3221225472;
    uint64_t v13 = __77__CAMViewfinderViewController_cameraRollControllerDidFullyPresentCameraRoll___block_invoke;
    id v14 = &unk_263FA02D0;
    id v15 = v4;
    pl_dispatch_after();
  }
  int v9 = [(CAMViewfinderViewController *)self _cameraRollControllerAction];

  if (v9)
  {
    id v10 = [(CAMViewfinderViewController *)self _cameraRollControllerAction];
    v10[2]();
  }
}

uint64_t __77__CAMViewfinderViewController_cameraRollControllerDidFullyPresentCameraRoll___block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) sessionIdentifier];
  if (result == *(unsigned __int16 *)(a1 + 40))
  {
    int64_t v3 = *(void **)(a1 + 32);
    return [v3 beginAllowingStagedMediaLoading];
  }
  return result;
}

- (void)cameraRollControllerDidDismissFullyPresentedCameraRoll:(id)a3
{
  id v4 = a3;
  [(CAMViewfinderViewController *)self _updateTorchModeOnControllerForMode:[(CAMViewfinderViewController *)self _currentMode]];
  id v5 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  [v5 didDismissCameraRoll];

  BOOL v6 = [(CAMViewfinderViewController *)self cameraRollControllerTestDelegate];
  [v6 viewfinderViewController:self didDismissPresentedCameraRoll:v4];

  if ([(CAMViewfinderViewController *)self _wantsExternalStorageOutputEnabled]
    && ![(CAMViewfinderViewController *)self _externalStorageOutputEnabled])
  {
    id v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "External storage: enabling deferred SSD output on cameraRollControllerDidDismissFullyPresentedCameraRoll", v11, 2u);
    }

    [(CAMViewfinderViewController *)self _setExternalStorageOutputEnabled:1 animated:1];
  }
  BOOL v8 = [(CAMViewfinderViewController *)self _isSpatialMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
  uint64_t v9 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:[(CAMViewfinderViewController *)self _currentMode] devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]] | v8;
  id v10 = [(CAMViewfinderViewController *)self _motionController];
  [v10 setForceLandscapeOrientation:v9];
}

- (void)cameraRollControllerRequestsCaptureSessionStopped:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  [v4 addClosedViewfinderReason:8];

  [(CAMViewfinderViewController *)self suspendCameraSessionWithCompletion:0];
}

- (void)cameraRollController:(id)a3 willShowPresentingViewControllerShouldStartCaptureSession:(BOOL)a4
{
  if (a4)
  {
    id v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v6 = [(CAMViewfinderViewController *)self _callStatusMonitor];
    BOOL v7 = -[CAMViewfinderViewController _shouldSuspendCaptureSessionForGraphConfiguration:callActive:](self, "_shouldSuspendCaptureSessionForGraphConfiguration:callActive:", v5, [v6 isCallActive]);

    if (!v7)
    {
      [(CAMViewfinderViewController *)self resumeCameraSessionWithCompletion:0];
    }
  }
}

- (void)cameraRollControllerWillPresentPreviewController:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:v4 isShowingCameraRoll:1];
}

- (void)cameraRollController:(id)a3 didDismissPreviewControllerShouldStartCaptureSession:(BOOL)a4
{
  BOOL v4 = a4;
  id v9 = a3;
  if (v4) {
    [(CAMViewfinderViewController *)self resumeCameraSessionWithCompletion:0];
  }
  BOOL v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  [(CAMViewfinderViewController *)self _updatePairedVideoCaptureOnControllerForGraphConfiguration:v6 isShowingCameraRoll:0];
  BOOL v7 = [(CAMViewfinderViewController *)self _analyticsSessionEvent];
  [v7 didDismissCameraRoll];

  BOOL v8 = [(CAMViewfinderViewController *)self cameraRollControllerTestDelegate];
  [v8 viewfinderViewController:self didDismissPresentedCameraRoll:v9];
}

- (BOOL)cameraRollControllerShouldRequestUnlock:(id)a3
{
  int64_t v3 = [(CAMViewfinderViewController *)self unlockDelegate];

  if (v3) {
    return 1;
  }
  return +[CAMFrameworkUtilities isPasscodeLocked];
}

- (CGRect)cameraRollControllerSourceAssetRect:(id)a3
{
  BOOL v4 = [(CAMViewfinderViewController *)self _imageWell];
  id v5 = [(CAMViewfinderViewController *)self _imageWell];
  [v5 bounds];
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;
  id v14 = [(CAMViewfinderViewController *)self _imageWell];
  objc_msgSend(v4, "alignmentRectForFrame:scaledForInteraction:", objc_msgSend(v14, "isScaledForInteraction"), v7, v9, v11, v13);
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;

  uint64_t v23 = [(CAMViewfinderViewController *)self view];
  int v24 = [(CAMViewfinderViewController *)self _imageWell];
  objc_msgSend(v23, "convertRect:fromView:", v24, v16, v18, v20, v22);
  double v26 = v25;
  double v28 = v27;
  double v30 = v29;
  double v32 = v31;

  double v33 = v26;
  double v34 = v28;
  double v35 = v30;
  double v36 = v32;
  result.size.double height = v36;
  result.size.double width = v35;
  result.origin.double y = v34;
  result.origin.double x = v33;
  return result;
}

- (void)_imageWellSetContentHidden:(BOOL)a3
{
  BOOL v3 = a3;
  id v4 = [(CAMViewfinderViewController *)self _imageWell];
  [v4 setThumbnailImageHidden:v3];
}

- (void)cameraRollController:(id)a3 shouldHideSourceAsset:(BOOL)a4
{
}

- (CGRect)cameraRollControllerPreviewSourceRect:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self _imageWell];
  [v4 frame];
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;

  double v13 = [(CAMViewfinderViewController *)self _imageWell];
  [v13 tappableEdgeInsets];
  double v15 = v6 + v14;
  double v17 = v8 + v16;
  double v19 = v10 - (v14 + v18);
  double v21 = v12 - (v16 + v20);

  double v22 = [(CAMViewfinderViewController *)self _imageWell];
  uint64_t v23 = [v22 window];

  int v24 = [(CAMViewfinderViewController *)self _imageWell];
  double v25 = [v24 superview];
  objc_msgSend(v23, "convertRect:fromView:", v25, v15, v17, v19, v21);
  double v27 = v26;
  double v29 = v28;
  double v31 = v30;
  double v33 = v32;

  double v34 = v27;
  double v35 = v29;
  double v36 = v31;
  double v37 = v33;
  result.size.double height = v37;
  result.size.double width = v36;
  result.origin.double y = v35;
  result.origin.double x = v34;
  return result;
}

- (id)cameraRollControllerImageForReveal:(id)a3
{
  BOOL v3 = [(CAMViewfinderViewController *)self _imageWell];
  id v4 = [v3 thumbnailImage];

  return v4;
}

- (void)cameraRollControllerRevealWillBegin:(id)a3
{
}

- (void)cameraRollControllerRevealDidEnd:(id)a3
{
}

- (void)cameraRollControllerWillPresentCameraRoll:(id)a3 withOneUpController:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [(CAMViewfinderViewController *)self cameraRollControllerTestDelegate];
  [v8 viewfinderViewController:self willPresentCameraRoll:v7 withOneUpController:v6];
}

- (int64_t)cameraRollControllerPreferredPresentationOrientation:(id)a3
{
  id v4 = [(CAMViewfinderViewController *)self view];
  double v5 = [v4 window];
  int64_t v6 = CAMInterfaceOrientationForWindow(v5);

  if ([(CAMViewfinderViewController *)self _layoutStyle] == 4)
  {
    int64_t homeIndicatorAutoHideOrientation = self->__homeIndicatorAutoHideOrientation;
    id v8 = [(CAMViewfinderViewController *)self _motionController];
    uint64_t v9 = [v8 captureOrientation];
    BOOL v10 = CAMIsDeviceOrientationLocked();
    double v11 = [MEMORY[0x263F82670] currentDevice];
    unint64_t v12 = [v11 orientation] - 5;

    int v13 = v9 == 2 || v10;
    if (v12 < 2) {
      int v13 = 1;
    }
    if (v13) {
      int64_t v6 = 1;
    }
    else {
      int64_t v6 = homeIndicatorAutoHideOrientation;
    }
  }
  return v6;
}

- (void)_handleCallStatusMonitorDidChangeCallActive:(id)a3
{
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Received CAMCallStatusMonitorDidChangeCallActiveNotification", buf, 2u);
  }

  double v5 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  uint64_t v6 = [v5 isCallActive];

  id v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v8 = [(CAMViewfinderViewController *)self _shouldSuspendCaptureSessionForGraphConfiguration:v7 callActive:v6 ^ 1];

  uint64_t v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  int v10 = [(CAMViewfinderViewController *)self _shouldSuspendCaptureSessionForGraphConfiguration:v9 callActive:v6];

  unint64_t v11 = [(CAMViewfinderViewController *)self _currentMode];
  [(CAMViewfinderViewController *)self _updateModeDisabledForCurrentStateAnimated:0];
  if (v11 <= 9 && ((1 << v11) & 0x251) != 0 || (v8 & ~v10) == 1)
  {
    unint64_t v12 = [(CAMViewfinderViewController *)self _captureController];
    int v13 = [v12 isCapturingCTMVideo];

    if (v13)
    {
      double v14 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)double v16 = 0;
        _os_log_impl(&dword_2099F8000, v14, OS_LOG_TYPE_DEFAULT, "CAMCallStatusMonitorDidChangeCallActiveNotification: Ending quick take recording due to audio configuration update", v16, 2u);
      }

      [(CAMViewfinderViewController *)self _stopCapturingCTMVideo];
      double v15 = [(CAMViewfinderViewController *)self _dynamicShutterControl];
      [v15 resetAnimated:1];
    }
    [(CAMViewfinderViewController *)self _reconfigureCaptureGraphWithCurrentMode];
  }
}

- (void)setTorchMode:(int64_t)a3
{
  int64_t v4 = +[CAMCaptureConversions flashModeForTorchMode:a3];
  [(CAMViewfinderViewController *)self _handleUserChangedToFlashMode:v4];
}

- (void)setHDRMode:(int64_t)a3
{
  id v5 = [(CAMViewfinderViewController *)self _HDRButton];
  [v5 setHDRMode:a3];
  [(CAMViewfinderViewController *)self _handleHDRButtonChangedHDRMode];
}

- (void)setTimerDuration:(int64_t)a3
{
  id v5 = [(CAMViewfinderViewController *)self _timerButton];
  [v5 setDuration:a3];
  [(CAMViewfinderViewController *)self _handleTimerButtonChangedTimerDuration];
}

- (void)changeToMode:(int64_t)a3 device:(int64_t)a4
{
}

- (void)changeToMode:(int64_t)a3 device:(int64_t)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v9 = [(CAMViewfinderViewController *)self availableCaptureModes];
  int v10 = [NSNumber numberWithInteger:a3];
  int v11 = [v9 containsObject:v10];

  if (v11)
  {
    unint64_t v12 = a3;
  }
  else
  {
    unint64_t v12 = [(CAMViewfinderViewController *)self _availableDefaultCaptureMode];
    int v13 = os_log_create("com.apple.camera", "Camera");
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v12 == -1)
    {
      if (v14)
      {
        if ((unint64_t)a3 > 9) {
          double v15 = 0;
        }
        else {
          double v15 = off_263FA2788[a3];
        }
        int v22 = 138543362;
        uint64_t v23 = v15;
        _os_log_impl(&dword_2099F8000, v13, OS_LOG_TYPE_DEFAULT, "Ignoring request to change to unavailable mode %{public}@ because no valid mode is available", (uint8_t *)&v22, 0xCu);
      }
      goto LABEL_28;
    }
    if (v14)
    {
      if (v12 > 9) {
        double v16 = 0;
      }
      else {
        double v16 = off_263FA2788[v12];
      }
      if ((unint64_t)a3 > 9) {
        double v17 = 0;
      }
      else {
        double v17 = off_263FA2788[a3];
      }
      int v22 = 138543618;
      uint64_t v23 = v16;
      __int16 v24 = 2114;
      double v25 = v17;
      _os_log_impl(&dword_2099F8000, v13, OS_LOG_TYPE_DEFAULT, "Falling back to mode %{public}@ because requested mode %{public}@ is unavailable", (uint8_t *)&v22, 0x16u);
    }
  }
  if (v12 != -1)
  {
    if (v12 == 8)
    {
      uint64_t v18 = 1;
    }
    else
    {
      if (v12 != 9)
      {
LABEL_24:
        int v13 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
        double v19 = [(CAMViewfinderViewController *)self _graphConfigurationForChangeToMode:v12 device:a4 fromGraphConfiguration:v13];
        if (-[CAMViewfinderViewController _shouldResetZoomForChangeFromMode:toMode:](self, "_shouldResetZoomForChangeFromMode:toMode:", -[NSObject mode](v13, "mode"), [v19 mode]))
        {
          [(CAMViewfinderViewController *)self _defaultZoomFactorForGraphConfiguration:v19];
        }
        else
        {
          [(CAMViewfinderViewController *)self _cachedVideoZoomFactor];
        }
        double v21 = v20;
        -[CAMViewfinderViewController _willChangeToGraphConfiguration:zoomFactor:fromGraphConfiguration:animated:](self, "_willChangeToGraphConfiguration:zoomFactor:fromGraphConfiguration:animated:", v19, v13, v5);
        [(CAMViewfinderViewController *)self _changeToGraphConfiguration:v19 zoomFactor:v13 fromGraphConfiguration:v21];

LABEL_28:
        goto LABEL_29;
      }
      uint64_t v18 = 0;
    }
    [(CAMViewfinderViewController *)self _setSpatialModeHasVideoSelected:v18];
    goto LABEL_24;
  }
LABEL_29:
}

- (BOOL)_isCapturing
{
  BOOL v3 = [(CAMViewfinderViewController *)self _captureController];
  BOOL v4 = ([v3 isCapturingVideo] & 1) != 0
    || ([v3 isCapturingPanorama] & 1) != 0
    || ([v3 isCapturingTimelapse] & 1) != 0
    || ([v3 isCapturingLowLightImage] & 1) != 0
    || [(CAMViewfinderViewController *)self _isCapturingFromTimer];

  return v4;
}

- (BOOL)isRecording
{
  id v2 = [(CAMViewfinderViewController *)self _captureController];
  if ([v2 isCapturingVideo] & 1) != 0 || (objc_msgSend(v2, "isCapturingPanorama")) {
    char v3 = 1;
  }
  else {
    char v3 = [v2 isCapturingTimelapse];
  }

  return v3;
}

- (BOOL)isCapturingPhoto
{
  id v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingStillImage];

  return v3;
}

- (BOOL)isCapturingLivePhoto
{
  id v2 = [(CAMViewfinderViewController *)self _captureController];
  char v3 = [v2 isCapturingLivePhotoVideo];

  return v3;
}

- (BOOL)capturePhoto
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  if (v3 > 9 || ((1 << v3) & 0x253) == 0) {
    return 0;
  }
  return [(CAMViewfinderViewController *)self _captureStillImageWithCurrentSettings];
}

- (BOOL)startRecording
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v4 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  BOOL v5 = -[CAMViewfinderViewController _shouldDisableModeForGraphConfiguration:callActive:](self, "_shouldDisableModeForGraphConfiguration:callActive:", v3, [v4 isCallActive]);

  if (v5)
  {
    uint64_t v6 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl(&dword_2099F8000, v6, OS_LOG_TYPE_DEFAULT, "Ignoring startRecording while current mode is disabled", v12, 2u);
    }

    BOOL v7 = 0;
    goto LABEL_13;
  }
  unint64_t v8 = [(CAMViewfinderViewController *)self _currentMode];
  BOOL v7 = 0;
  if (v8 > 8) {
    goto LABEL_13;
  }
  if (((1 << v8) & 0x186) != 0)
  {
    uint64_t v9 = [(CAMViewfinderViewController *)self _videoCaptureRequestWithCurrentSettings];
    BOOL v10 = [(CAMViewfinderViewController *)self _startCapturingVideoWithRequest:v9];
LABEL_12:
    BOOL v7 = v10;

    goto LABEL_13;
  }
  if (v8 == 3)
  {
    uint64_t v9 = [(CAMViewfinderViewController *)self _panoramaCaptureRequestWithCurrentSettings];
    BOOL v10 = [(CAMViewfinderViewController *)self _startCapturingPanoramaWithRequest:v9];
    goto LABEL_12;
  }
  if (v8 == 5) {
    BOOL v7 = [(CAMViewfinderViewController *)self _startTimelapse];
  }
LABEL_13:

  return v7;
}

- (BOOL)stopRecording
{
  unint64_t v3 = [(CAMViewfinderViewController *)self _currentMode];
  if (v3 > 8) {
    return 0;
  }
  if (((1 << v3) & 0x186) != 0)
  {
    return [(CAMViewfinderViewController *)self _stopCapturingVideo];
  }
  if (v3 != 3)
  {
    if (v3 == 5)
    {
      return [(CAMViewfinderViewController *)self _stopTimelapse];
    }
    return 0;
  }
  return [(CAMViewfinderViewController *)self _stopCapturingPanorama];
}

- (void)setAvailableCaptureModes:(id)a3
{
  BOOL v4 = (NSSet *)a3;
  BOOL v5 = v4;
  if (self->_availableCaptureModes != v4)
  {
    uint64_t v6 = (NSSet *)[(NSSet *)v4 copy];
    availableCaptureModes = self->_availableCaptureModes;
    self->_availableCaptureModes = v6;

    int64_t v8 = [(CAMViewfinderViewController *)self _currentMode];
    uint64_t v9 = [NSNumber numberWithInteger:v8];
    char v10 = [(NSSet *)v5 containsObject:v9];

    if ([(CAMViewfinderViewController *)self isViewLoaded])
    {
      int v11 = [(CAMViewfinderViewController *)self _modeDial];
      [v11 reloadData];
      unint64_t v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      int v13 = [v12 modeSelector];
      [v13 reloadData];

      int64_t v14 = [(CAMViewfinderViewController *)self _availableDefaultCaptureMode];
      BOOL v15 = [(CAMViewfinderViewController *)self _isSpatialVideoInVideoModeActiveForMode:v14 devicePosition:[(CAMViewfinderViewController *)self _currentDevicePosition]];
      if (v8 == v14) {
        char v16 = 1;
      }
      else {
        char v16 = v10;
      }
      if ((v16 & 1) == 0 && v14 != -1)
      {
        BOOL v17 = v15;
        uint64_t v18 = +[CAMUserPreferences preferences];
        uint64_t v19 = objc_msgSend(v18, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", v14, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v17);

        [(CAMViewfinderViewController *)self changeToMode:v14 device:v19 animated:0];
      }
    }
    else if ((v10 & 1) == 0)
    {
      double v20 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)double v21 = 0;
        _os_log_impl(&dword_2099F8000, v20, OS_LOG_TYPE_DEFAULT, "Unable to automatically change to a valid mode – view isn't loaded yet", v21, 2u);
      }
    }
  }
}

- (void)setDisablingAdditionalCaptures:(BOOL)a3
{
  if (self->_disablingAdditionalCaptures != a3)
  {
    self->_disablingAdditionalCaptures = a3;
    if (!a3) {
      [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:0];
    }
  }
}

- (void)setMessagesTransitionState:(int64_t)a3 animated:(BOOL)a4
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (self->_messagesTransitionState == a3) {
    return;
  }
  BOOL v4 = a4;
  self->_messagesTransitionState = a3;
  BOOL v7 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if ((unint64_t)a3 > 4) {
      int64_t v8 = 0;
    }
    else {
      int64_t v8 = off_263FA26C8[a3];
    }
    int v27 = 138543362;
    double v28 = v8;
    _os_log_impl(&dword_2099F8000, v7, OS_LOG_TYPE_DEFAULT, "MessagesTransitionState set to %{public}@", (uint8_t *)&v27, 0xCu);
  }

  uint64_t v9 = [(CAMViewfinderViewController *)self _shouldDisableUserInteractionForTransitioning] ^ 1;
  char v10 = [(CAMViewfinderViewController *)self view];
  [v10 setUserInteractionEnabled:v9];

  [(CAMViewfinderViewController *)self _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:0];
  int v11 = [(CAMViewfinderViewController *)self _closedViewfinderController];
  switch([(CAMViewfinderViewController *)self messagesTransitionState])
  {
    case 0:
    case 4:
      [v11 removeClosedViewfinderReason:12];
      [v11 removeClosedViewfinderReason:11];
      [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:0];
      break;
    case 1:
      unint64_t v12 = v11;
      uint64_t v13 = 11;
      goto LABEL_11;
    case 2:
      unint64_t v12 = v11;
      uint64_t v13 = 12;
LABEL_11:
      [v12 addClosedViewfinderReason:v13];
      break;
    case 3:
      int64_t v14 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
      [v14 setControlDrawerExpanded:0 forReason:7 animated:0];

      [(CAMViewfinderViewController *)self _collapseExpandedButtonsAnimated:0];
      break;
    default:
      break;
  }
  int64_t v15 = [(CAMViewfinderViewController *)self messagesTransitionState];
  if ((unint64_t)(v15 - 2) < 3 || !v15)
  {
    char v16 = [(CAMViewfinderViewController *)self _creativeCameraButton];
    BOOL v17 = v16;
    uint64_t v18 = 0;
    goto LABEL_18;
  }
  if (v15 == 1)
  {
    char v16 = [(CAMViewfinderViewController *)self _creativeCameraButton];
    BOOL v17 = v16;
    uint64_t v18 = 1;
LABEL_18:
    [v16 setActive:v18];
  }
  if ([(CAMViewfinderViewController *)self messagesTransitionState] == 4)
  {
    uint64_t v19 = [(CAMViewfinderViewController *)self _closedViewfinderController];
    int v20 = [v19 isViewfinderClosed];

    if (v20)
    {
      double v21 = [(CAMViewfinderViewController *)self _transitionController];
      [v21 closeWithBlur:1 animated:0 withCompletionHandler:0];
    }
  }
  int v22 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v23 = [(CAMViewfinderViewController *)self _shouldHideShutterButtonForGraphConfiguration:v22];

  BOOL v24 = !v23;
  double v25 = [(CAMViewfinderViewController *)self _shutterButton];
  [v25 setAlpha:(double)v24];

  uint64_t v26 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v26 setShutterControlVisible:v24];

  [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v4];
}

- (int64_t)_availableDefaultCaptureMode
{
  id v2 = [(CAMViewfinderViewController *)self availableCaptureModes];
  uint64_t v3 = [v2 count];
  if (v3 == 1)
  {
LABEL_8:
    int64_t v8 = [v2 anyObject];
    int64_t v5 = [v8 integerValue];

    goto LABEL_10;
  }
  if (v3)
  {
    int v6 = [v2 containsObject:&unk_26BDDDDE8];
    int v7 = [v2 containsObject:&unk_26BDDDE00];
    if ((v6 & 1) != 0 || v7)
    {
      int64_t v5 = v6 ^ 1u;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  BOOL v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    -[CAMViewfinderViewController _availableDefaultCaptureMode]();
  }

  int64_t v5 = -1;
LABEL_10:

  return v5;
}

- (id)_supportedCaptureModes
{
  id v3 = objc_alloc_init(MEMORY[0x263EFF9C0]);
  BOOL v4 = +[CAMCaptureCapabilities capabilities];
  int v16 = [v4 isCTMSupported];
  if ([v4 isBackTimelapseSupported]) {
    int v5 = 0;
  }
  else {
    int v5 = [v4 isFrontTimelapseSupported] ^ 1;
  }
  if ([v4 isBackSlomoSupported]) {
    int v6 = 0;
  }
  else {
    int v6 = [v4 isFrontSlomoSupported] ^ 1;
  }
  int v7 = [v4 isVideoSupported];
  int v8 = [v4 isSquareModeSupported];
  if ([v4 isBackPanoramaSupported]) {
    int v9 = 0;
  }
  else {
    int v9 = [v4 isFrontPanoramaSupported] ^ 1;
  }
  int v10 = [v4 isPortraitModeSupported];
  int v15 = [v4 isSpatialModeSupported];
  if (([v4 portraitInPhotoModeBehavior] & 8) != 0) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  BOOL v12 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
  int v13 = [v4 isCinematicModeSupported];
  if (((v5 | v12) & 1) == 0) {
    [v3 addObject:&unk_26BDDDED8];
  }
  if (((v6 | v12) & 1) == 0) {
    [v3 addObject:&unk_26BDDDE60];
  }
  if (v7) {
    [v3 addObject:&unk_26BDDDE00];
  }
  [v3 addObject:&unk_26BDDDDE8];
  if (v11) {
    [v3 addObject:&unk_26BDDDE18];
  }
  if (((v8 ^ 1 | v16 | v12) & 1) == 0) {
    [v3 addObject:&unk_26BDDDEA8];
  }
  if (((v9 | v12) & 1) == 0) {
    [v3 addObject:&unk_26BDDDE90];
  }
  if (((v13 ^ 1 | v12) & 1) == 0) {
    [v3 addObject:&unk_26BDDDEC0];
  }
  if (((v15 ^ 1 | v12) & 1) == 0)
  {
    [v3 addObject:&unk_26BDDDDB8];
    [v3 addObject:&unk_26BDDDE78];
  }

  return v3;
}

- (void)_setPreventingAdditionalCaptures:(BOOL)a3
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (self->_preventingAdditionalCaptures != a3)
  {
    BOOL v3 = a3;
    int v5 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 67109120;
      v6[1] = v3;
      _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "Preventing additional captures %d", (uint8_t *)v6, 8u);
    }

    self->_preventingAdditionalCaptures = v3;
    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"Preventing Multiple Captures for Single-Capture-Only Client"];
  }
}

- (void)setAutomaticallyAdjustsApplicationIdleTimer:(BOOL)a3
{
  if (self->_automaticallyAdjustsApplicationIdleTimer != a3)
  {
    BOOL v3 = a3;
    self->_automaticallyAdjustsApplicationIdleTimer = a3;
    BOOL v4 = [(CAMViewfinderViewController *)self _idleController];
    id v5 = v4;
    if (v3) {
      [v4 startUpdatingIdleTimer];
    }
    else {
      [v4 stopUpdatingIdleTimer];
    }
  }
}

- (void)setPersistenceBehavior:(unint64_t)a3
{
  if (self->_persistenceBehavior != a3)
  {
    BOOL v5 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
    unint64_t v6 = 3;
    if (!v5) {
      unint64_t v6 = a3;
    }
    self->_persistenceBehavior = v6;
  }
}

- (void)setShowingStandardControls:(BOOL)a3
{
  if (self->_showingStandardControls != a3)
  {
    BOOL v3 = a3;
    self->_showingStandardControls = a3;
    id v6 = [(CAMViewfinderViewController *)self _previewViewController];
    [v6 setShowingStandardControls:v3];
    if (v3)
    {
      [(CAMViewfinderViewController *)self _createCommonControlsIfNecessary];
      [(CAMViewfinderViewController *)self _createCommonGestureRecognizersIfNecessary];
      BOOL v5 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _createModeSpecificControlsForConfiguration:v5];
    }
    else
    {
      [(CAMViewfinderViewController *)self _destroyGestureRecognizersRequiringStandardControls];
      [(CAMViewfinderViewController *)self _unembedAndDestroyAllControls];
    }
  }
}

- (void)setImagePickerVideoConfiguration:(int64_t)a3
{
  if (self->_imagePickerVideoConfiguration != a3)
  {
    self->_imagePickerVideoConfiguration = a3;
    BOOL v4 = [(CAMViewfinderViewController *)self isEmulatingImagePicker];
    int64_t v5 = [(CAMViewfinderViewController *)self _currentMode];
    if (v4 && v5 == 1)
    {
      [(CAMViewfinderViewController *)self _reconfigureCaptureGraphWithCurrentMode];
    }
  }
}

- (void)setCustomPreviewViewTransform:(CGAffineTransform *)a3
{
  if ([(CAMViewfinderViewController *)self emulationMode])
  {
    long long v5 = *(_OWORD *)&self->_customPreviewViewTransform.c;
    *(_OWORD *)&t1.a = *(_OWORD *)&self->_customPreviewViewTransform.a;
    *(_OWORD *)&t1.c = v5;
    *(_OWORD *)&t1.tdouble x = *(_OWORD *)&self->_customPreviewViewTransform.tx;
    long long v6 = *(_OWORD *)&a3->c;
    *(_OWORD *)&v9.a = *(_OWORD *)&a3->a;
    *(_OWORD *)&v9.c = v6;
    *(_OWORD *)&v9.tdouble x = *(_OWORD *)&a3->tx;
    if (!CGAffineTransformEqualToTransform(&t1, &v9))
    {
      long long v7 = *(_OWORD *)&a3->a;
      long long v8 = *(_OWORD *)&a3->tx;
      *(_OWORD *)&self->_customPreviewViewTransform.c = *(_OWORD *)&a3->c;
      *(_OWORD *)&self->_customPreviewViewTransform.tdouble x = v8;
      *(_OWORD *)&self->_customPreviewViewTransform.a = v7;
      [(CAMViewfinderViewController *)self _applyTransformsForAutorotationStyle:[(CAMViewfinderViewController *)self autorotationStyle]];
    }
  }
}

- (void)setPerformingReviewUsingOverlay:(BOOL)a3
{
  if (self->_performingReviewUsingOverlay != a3)
  {
    BOOL v3 = a3;
    self->_performingReviewUsingOverladouble y = a3;
    [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
    [(CAMViewfinderViewController *)self _updateTorchModeOnControllerForMode:[(CAMViewfinderViewController *)self _currentMode]];
    id v6 = [(CAMViewfinderViewController *)self _closedViewfinderController];
    long long v5 = [(CAMViewfinderViewController *)self _disabledPreviewController];
    if (v3)
    {
      [v6 addClosedViewfinderReason:9];
      [v5 addDisabledPreviewReason:1];
      [(CAMViewfinderViewController *)self suspendCameraSessionWithCompletion:0];
    }
    else
    {
      [v6 removeClosedViewfinderReason:9];
      [v5 removeDisabledPreviewReason:1];
      [(CAMViewfinderViewController *)self resumeCameraSessionWithCompletion:0];
      if ([(CAMViewfinderViewController *)self isDisablingAdditionalCaptures]) {
        [(CAMViewfinderViewController *)self _setPreventingAdditionalCaptures:0];
      }
    }
  }
}

- (CGRect)reviewUsingOverlayFrame
{
  BOOL v3 = [(CAMViewfinderViewController *)self _previewViewController];
  BOOL v4 = [v3 previewView];

  [v4 bounds];
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat Width = v11;
  int v13 = [(CAMViewfinderViewController *)self view];
  int64_t v14 = [v13 window];
  int64_t v15 = CAMInterfaceOrientationForWindow(v14);

  if ((unint64_t)(v15 - 3) <= 1)
  {
    v25.origin.double x = v6;
    v25.origin.double y = v8;
    v25.size.double width = v10;
    v25.size.double height = Width;
    CGFloat MinX = CGRectGetMinX(v25);
    v26.origin.double x = v6;
    v26.origin.double y = v8;
    v26.size.double width = v10;
    v26.size.double height = Width;
    CGFloat MinY = CGRectGetMinY(v26);
    v27.origin.double x = v6;
    v27.origin.double y = v8;
    v27.size.double width = v10;
    v27.size.double height = Width;
    CGFloat Height = CGRectGetHeight(v27);
    v28.origin.double x = v6;
    v28.origin.double y = v8;
    v28.size.double width = v10;
    v28.size.double height = Width;
    CGFloat Width = CGRectGetWidth(v28);
    CGFloat v10 = Height;
    CGFloat v8 = MinY;
    CGFloat v6 = MinX;
  }
  v29.origin.double x = v6;
  v29.origin.double y = v8;
  v29.size.double width = v10;
  v29.size.double height = Width;
  CGFloat v19 = CGRectGetWidth(v29);
  v30.origin.double x = v6;
  v30.origin.double y = v8;
  v30.size.double width = v10;
  v30.size.double height = Width;
  CGFloat v20 = CGRectGetHeight(v30);

  double v21 = 0.0;
  double v22 = 0.0;
  double v23 = v19;
  double v24 = v20;
  result.size.double height = v24;
  result.size.double width = v23;
  result.origin.double y = v22;
  result.origin.double x = v21;
  return result;
}

- (int64_t)_videoConfigurationForImagePickerQualityType:(int64_t)a3
{
  if ((unint64_t)a3 >= 6) {
    return 0;
  }
  else {
    return a3 + 10000;
  }
}

- (void)captureController:(id)a3 didOutputShallowDepthOfFieldStatus:(int64_t)a4 stagePreviewStatus:(int64_t)a5
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v8 = [(CAMViewfinderViewController *)self _currentMode];
  switch(v8)
  {
    case 0uLL:
      double v9 = +[CAMCaptureCapabilities capabilities];
      if (objc_msgSend(v9, "isPhotoModeDepthSuggestionSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")))
      {
        CGFloat v10 = +[CAMCaptureCapabilities capabilities];
        if ([v10 featureDevelopmentIgnoreDepthSuggestionInPhotoMode]) {
          a4 = 0;
        }
      }
      else
      {
        a4 = 0;
      }

      break;
    case 1uLL:
      unint64_t v11 = a4 - 1;
      unsigned int v12 = 32239;
      goto LABEL_9;
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 8uLL:
    case 9uLL:
      a4 = 0;
      break;
    case 7uLL:
      unint64_t v11 = a4 - 1;
      unsigned int v12 = 32231;
LABEL_9:
      if ((v12 >> v11)) {
        int64_t v13 = 0;
      }
      else {
        int64_t v13 = a4;
      }
      if (v11 < 0xF) {
        a4 = v13;
      }
      break;
    default:
      break;
  }
  if ((unint64_t)([(CAMViewfinderViewController *)self _portraitModeLightingEffectType]- 7) < 0xFFFFFFFFFFFFFFFDLL|| a4 == 0)
  {
    a5 = 0;
  }
  int64_t v15 = +[CAMApplication appOrPlugInState];
  int v16 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (v8 > 9) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = off_263FA2788[v8];
    }
    if ((unint64_t)a4 > 0xF) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = off_263FA26F0[a4];
    }
    if ((unint64_t)a5 > 2) {
      CGFloat v19 = 0;
    }
    else {
      CGFloat v19 = off_263FA2770[a5];
    }
    int v20 = 138543874;
    double v21 = v17;
    __int16 v22 = 2114;
    double v23 = v18;
    __int16 v24 = 2114;
    CGRect v25 = v19;
    _os_log_impl(&dword_2099F8000, v16, OS_LOG_TYPE_DEFAULT, "Updating shallow depth of field status in %{public}@ Mode: %{public}@/%{public}@", (uint8_t *)&v20, 0x20u);
  }

  [(CAMViewfinderViewController *)self _setShallowDepthOfFieldStatus:a4 stagePreviewStatus:a5 animated:v15 != 2];
}

- (void)_setShallowDepthOfFieldStatus:(int64_t)a3 stagePreviewStatus:(int64_t)a4
{
}

- (void)_setShallowDepthOfFieldStatus:(int64_t)a3 stagePreviewStatus:(int64_t)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  if (self->__shallowDepthOfFieldStatus != a3 || self->__stagePreviewStatus != a4)
  {
    self->__stagePreviewStatus = a4;
    self->__shallowDepthOfFieldStatus = a3;
    [(CAMViewfinderViewController *)self _updateForShallowDepthOfFieldStatusChangedAnimated:a5];
    [(CAMViewfinderViewController *)self _updateViewfinderMaterialAnimated:v5];
    id v7 = [(CAMViewfinderViewController *)self _remoteShutterController];
    [v7 setShallowDepthOfFieldStatus:self->__shallowDepthOfFieldStatus];
  }
}

- (void)_updateForShallowDepthOfFieldStatusChangedAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  unint64_t v5 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldStatus];
  CGFloat v6 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v6 setShallowDepthOfFieldStatus:v5 animated:v3];

  [(CAMViewfinderViewController *)self _updatePreviewControllerPortraitStatus];
  [(CAMViewfinderViewController *)self _updatePortraitModeInstructionLabelForCurrentState];
  id v7 = [(CAMViewfinderViewController *)self _shallowDepthOfFieldBadge];
  [v7 setShallowDepthOfFieldStatus:v5 animated:v3];

  [(CAMViewfinderViewController *)self _updatePreviewControllerIndicatorStyle];
  [(CAMViewfinderViewController *)self _updateDepthEffectSuggestionButtonAnimated:v3];
  uint64_t v8 = (v5 < 0xF) & (0x6202u >> v5);
  id v10 = [(CAMViewfinderViewController *)self _lightingControl];
  [v10 setHighlighted:v8 animated:v3];
  double v9 = [(CAMViewfinderViewController *)self _lightingNameBadge];
  [v9 setHighlighted:v8 animated:v3];

  if (![(CAMViewfinderViewController *)self _hasInFlightConfiguration]) {
    [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:v3];
  }
  [(CAMViewfinderViewController *)self _updateZoomControlAccessoryStateAnimated:v3];
}

- (void)_updatePreviewControllerPortraitStatus
{
  int64_t v3 = [(CAMViewfinderViewController *)self _stagePreviewStatus];
  BOOL v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  BOOL v5 = [(CAMViewfinderViewController *)self _wantsLightingControlForGraphConfiguration:v4];

  if (v5) {
    int64_t v6 = v3;
  }
  else {
    int64_t v6 = 0;
  }
  id v7 = [(CAMViewfinderViewController *)self _captureController];
  int v8 = [v7 isCapturingBurst];

  double v9 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int v10 = [v9 isSemanticStyleControlVisible];

  unint64_t v11 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  int v12 = [v11 isSmartStylePickerVisible];

  if (v12 | v10 | v8) {
    int64_t v13 = 0;
  }
  else {
    int64_t v13 = v6;
  }
  id v14 = [(CAMViewfinderViewController *)self _previewViewController];
  objc_msgSend(v14, "setShallowDepthOfFieldStatus:stagePreviewStatus:", -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus"), v13);
}

- (BOOL)_shouldShowDescriptionOverlayViewForGraphConfiguration:(id)a3
{
  return [(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:a3 viewClass:0];
}

- (BOOL)_shouldShowDescriptionOverlayViewForGraphConfiguration:(id)a3 viewClass:(Class *)a4
{
  id v5 = a3;
  int64_t v6 = +[CAMCaptureCapabilities capabilities];
  id v7 = +[CAMUserPreferences preferences];
  char v8 = [v6 bypassWelcomeScreens];
  uint64_t v9 = [v5 mode];
  if ([v6 hostProcess])
  {
    if ([v6 hostProcess] == 4) {
      char v10 = v8;
    }
    else {
      char v10 = 1;
    }
    if ((v10 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_8:
    LOBYTE(v11) = 0;
    int v12 = 0;
    goto LABEL_30;
  }
  if (v8) {
    goto LABEL_8;
  }
LABEL_9:
  int v12 = 0;
  LOBYTE(v11) = 0;
  switch(v9)
  {
    case 0:
      char v13 = [v6 semanticStylesSupport];
      if ([v6 isDepthEffectApertureSupportedForMode:0 devicePosition:0])
      {
        if ((v13 & 8) == 0 || ![v6 smartStylesSupported]) {
          goto LABEL_28;
        }
LABEL_26:
        int v11 = [v7 didAcknowledgeSmartStylesDescription] ^ 1;
        goto LABEL_29;
      }
      int v14 = [v6 isDepthEffectApertureSupportedForMode:0 devicePosition:1];
      char v15 = v14;
      if ((v13 & 8) == 0)
      {
        if (!v14)
        {
          if ([v6 isCTMSupported]) {
            int v11 = [v7 didAcknowledgeCTMDescription] ^ 1;
          }
          else {
            LOBYTE(v11) = 0;
          }
          goto LABEL_29;
        }
        goto LABEL_28;
      }
      if ([v6 smartStylesSupported]) {
        goto LABEL_26;
      }
      if ((v15 & 1) == 0)
      {
        int v11 = [v7 didAcknowledgeSemanticStylesDescription] ^ 1;
        goto LABEL_29;
      }
LABEL_28:
      int v11 = [v7 didAcknowledgeDepthInPhotoModeDescription] ^ 1;
LABEL_29:
      int v12 = (objc_class *)objc_opt_class();
LABEL_30:
      if (a4) {
        *a4 = v12;
      }

      return v11;
    case 1:
      if (![v5 enableStereoVideoCapture]) {
        goto LABEL_8;
      }
      int v11 = [v7 didAcknowledgeSpatialVideoOverlayDescription] ^ 1;
      goto LABEL_29;
    case 6:
      if ([v6 allowPortraitDescriptionOverlay]) {
        int v11 = [v7 didAcknowledgePortraitModeDescription] ^ 1;
      }
      else {
        LOBYTE(v11) = 0;
      }
      goto LABEL_29;
    case 7:
      int v11 = [v7 didAcknowledgeCinematicModeDescription] ^ 1;
      goto LABEL_29;
    case 8:
    case 9:
      int v11 = [v7 didAcknowledgeSpatialModeOverlayDescription] ^ 1;
      goto LABEL_29;
    default:
      goto LABEL_30;
  }
}

- (void)_acknowledgeDescriptionOverlayViewForMode:(int64_t)a3
{
  uint64_t v5 = +[CAMUserPreferences preferences];
  uint64_t v6 = v5;
  int v16 = (void *)v5;
  switch(a3)
  {
    case 0:
      char v8 = +[CAMCaptureCapabilities capabilities];
      char v9 = [v8 semanticStylesSupport];

      char v10 = +[CAMCaptureCapabilities capabilities];
      if ([v10 isDepthEffectApertureSupportedForMode:0 devicePosition:0])
      {

        int v11 = v16;
        if ((v9 & 8) != 0)
        {
          LOBYTE(v12) = 1;
          goto LABEL_13;
        }
LABEL_16:
        uint64_t v5 = [v11 setDidAcknowledgeDepthInPhotoModeDescription:1];
        goto LABEL_18;
      }
      char v13 = +[CAMCaptureCapabilities capabilities];
      int v12 = [v13 isDepthEffectApertureSupportedForMode:0 devicePosition:1];

      int v11 = v16;
      if ((v9 & 8) == 0)
      {
        if (!v12)
        {
          uint64_t v5 = [v16 setDidAcknowledgeCTMDescription:1];
          goto LABEL_18;
        }
        goto LABEL_16;
      }
LABEL_13:
      int v14 = +[CAMCaptureCapabilities capabilities];
      int v15 = [v14 smartStylesSupported];

      int v11 = v16;
      if (v15)
      {
        uint64_t v5 = [v16 setDidAcknowledgeSmartStylesDescription:1];
        goto LABEL_18;
      }
      if (v12) {
        goto LABEL_16;
      }
      uint64_t v5 = [v16 setDidAcknowledgeSemanticStylesDescription:1];
LABEL_18:
      uint64_t v6 = (uint64_t)v16;
LABEL_19:
      MEMORY[0x270F9A758](v5, v6);
      return;
    case 1:
      uint64_t v5 = [(id)v5 didAcknowledgeSpatialVideoOverlayDescription];
      uint64_t v6 = (uint64_t)v16;
      if (v5) {
        goto LABEL_19;
      }
      [v16 setDidAcknowledgeSpatialVideoOverlayDescription:1];
      [v16 setSpatialVideoControlEnabled:0];
      uint64_t v5 = [(CAMViewfinderViewController *)self _handleUserChangedSpatialVideoEnabled:0];
      goto LABEL_18;
    case 6:
      uint64_t v5 = [(id)v5 setDidAcknowledgePortraitModeDescription:1];
      goto LABEL_18;
    case 7:
      uint64_t v5 = [(id)v5 setDidAcknowledgeCinematicModeDescription:1];
      goto LABEL_18;
    case 8:
    case 9:
      [(id)v5 setDidAcknowledgeSpatialModeOverlayDescription:1];
      id v7 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateSpatialCaptureUIStateForGraphConfiguration:v7 animated:1];

      goto LABEL_18;
    default:
      goto LABEL_19;
  }
}

- (id)_embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 mode];
  Class v14 = 0;
  BOOL v6 = [(CAMViewfinderViewController *)self _shouldShowDescriptionOverlayViewForGraphConfiguration:v4 viewClass:&v14];

  if (v6)
  {
    id v7 = [(CAMViewfinderViewController *)self _descriptionOverlayViewByMode];
    char v8 = [NSNumber numberWithInteger:v5];
    char v9 = [v7 objectForKeyedSubscript:v8];

    if (v9) {
      goto LABEL_6;
    }
    id v10 = [v14 alloc];
    char v9 = objc_msgSend(v10, "initWithFrame:", *MEMORY[0x263F001A8], *(double *)(MEMORY[0x263F001A8] + 8), *(double *)(MEMORY[0x263F001A8] + 16), *(double *)(MEMORY[0x263F001A8] + 24));
    [v9 setVisible:0 animationDuration:0 completion:0.0];
    [v9 setDelegate:self];
    [(CAMViewfinderViewController *)self _embedDescriptionOverlayView:v9 forMode:v5];
    int v11 = [(CAMViewfinderViewController *)self _descriptionOverlayViewByMode];
    int v12 = [NSNumber numberWithInteger:v5];
    [v11 setObject:v9 forKeyedSubscript:v12];
  }
  else
  {
    [(CAMViewfinderViewController *)self _embedDescriptionOverlayView:0 forMode:v5];
    int v11 = [(CAMViewfinderViewController *)self _descriptionOverlayViewByMode];
    int v12 = [NSNumber numberWithInteger:v5];
    [v11 setObject:0 forKeyedSubscript:v12];
    char v9 = 0;
  }

LABEL_6:
  return v9;
}

- (void)_embedDescriptionOverlayView:(id)a3 forMode:(int64_t)a4
{
  id v6 = a3;
  id v9 = [(CAMViewfinderViewController *)self viewfinderView];
  if (v9)
  {
    id v7 = [NSNumber numberWithInteger:a4];
    [v9 setDescriptionOverlayView:v6 forKey:v7];
  }
  else
  {
    id v7 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    uint64_t v8 = [NSNumber numberWithInteger:a4];
    [v7 setDescriptionOverlayView:v6 forKey:v8];

    id v6 = (id)v8;
  }
}

- (void)_dismissDescriptionOverlayView:(id)a3 withDuration:(double)a4
{
  id v6 = a3;
  if (v6)
  {
    uint64_t v15 = 0;
    int v16 = &v15;
    uint64_t v17 = 0x2020000000;
    uint64_t v18 = 0;
    id v7 = [(CAMViewfinderViewController *)self _descriptionOverlayViewByMode];
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = __75__CAMViewfinderViewController__dismissDescriptionOverlayView_withDuration___block_invoke;
    v12[3] = &unk_263FA22D8;
    id v8 = v6;
    id v13 = v8;
    Class v14 = &v15;
    [v7 enumerateKeysAndObjectsUsingBlock:v12];

    [(CAMViewfinderViewController *)self _acknowledgeDescriptionOverlayViewForMode:v16[3]];
    id v9 = [(CAMViewfinderViewController *)self _descriptionOverlayViewByMode];
    id v10 = [NSNumber numberWithInteger:v16[3]];
    [v9 setObject:0 forKeyedSubscript:v10];

    [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __75__CAMViewfinderViewController__dismissDescriptionOverlayView_withDuration___block_invoke_2;
    v11[3] = &unk_263FA2300;
    void v11[4] = self;
    v11[5] = &v15;
    [v8 setVisible:0 animationDuration:v11 completion:a4];
    [v8 setDelegate:0];

    _Block_object_dispose(&v15, 8);
  }
}

uint64_t __75__CAMViewfinderViewController__dismissDescriptionOverlayView_withDuration___block_invoke(uint64_t result, void *a2, uint64_t a3, unsigned char *a4)
{
  if (*(void *)(result + 32) == a3)
  {
    uint64_t v5 = result;
    CGRect result = [a2 integerValue];
    *(void *)(*(void *)(*(void *)(v5 + 40) + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

uint64_t __75__CAMViewfinderViewController__dismissDescriptionOverlayView_withDuration___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _embedDescriptionOverlayView:0 forMode:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
}

- (void)_updateDescriptionOverlayVisibilityForMode:(int64_t)a3 allowShow:(BOOL)a4 allowHide:(BOOL)a5 animated:(BOOL)a6
{
  id v10 = [(CAMViewfinderViewController *)self _descriptionOverlayViewByMode];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = __103__CAMViewfinderViewController__updateDescriptionOverlayVisibilityForMode_allowShow_allowHide_animated___block_invoke;
  v11[3] = &__block_descriptor_43_e52_v32__0__NSNumber_8__CAMDescriptionOverlayView_16_B24l;
  void v11[4] = a3;
  BOOL v12 = a4;
  BOOL v13 = a5;
  BOOL v14 = a6;
  [v10 enumerateKeysAndObjectsUsingBlock:v11];
}

void __103__CAMViewfinderViewController__updateDescriptionOverlayVisibilityForMode_allowShow_allowHide_animated___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v10 = a3;
  uint64_t v5 = [a2 integerValue];
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v7 = v5 == v6;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 || (*(unsigned char *)(a1 + 41) ? (BOOL v8 = v5 == v6) : (BOOL v8 = 1), !v8))
  {
    double v9 = 0.25;
    if (!*(unsigned char *)(a1 + 42)) {
      double v9 = 0.0;
    }
    [v10 setVisible:v5 == v6 animationDuration:0 completion:v9];
  }
}

- (void)descriptionOverlayView:(id)a3 willBecomeVisible:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  int v7 = [v6 isMemberOfClass:objc_opt_class()];

  if (v7)
  {
    BOOL v8 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    double v9 = [v8 controlStatusBar];
    id v11 = [v9 smartStyleIndicator];

    id v10 = v11;
    if (v11)
    {
      if (v4) {
        [(CAMViewfinderViewController *)self _startPulsingAnimationForSmartStyleIndicator:v11];
      }
      else {
        [(CAMViewfinderViewController *)self _stopPulsingAnimationForSmartStyleIndicator:v11];
      }
      id v10 = v11;
    }
  }
}

- (void)descriptionOverlayViewDidSelectDetail:(id)a3
{
  id v4 = a3;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  uint64_t v5 = [(CAMViewfinderViewController *)self _descriptionOverlayViewByMode];
  uint64_t v11 = MEMORY[0x263EF8330];
  uint64_t v12 = 3221225472;
  BOOL v13 = __69__CAMViewfinderViewController_descriptionOverlayViewDidSelectDetail___block_invoke;
  BOOL v14 = &unk_263FA22D8;
  id v6 = v4;
  id v15 = v6;
  int v16 = &v17;
  [v5 enumerateKeysAndObjectsUsingBlock:&v11];

  uint64_t v7 = v18[3];
  if (v7)
  {
    if (v7 == 1)
    {
      BOOL v8 = +[CAMUserPreferences preferences];
      [v8 setDidAcknowledgeSpatialVideoOverlayDescription:1];

      double v9 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
      [(CAMViewfinderViewController *)self _updateSpatialCaptureUIStateForGraphConfiguration:v9 animated:1];

      [(CAMViewfinderViewController *)self _dismissDescriptionOverlayView:v6 withDuration:0.3];
    }
  }
  else
  {
    if (objc_msgSend(v6, "isMemberOfClass:", objc_opt_class(), v11, v12, v13, v14))
    {
      id v10 = objc_alloc_init(CAMSemanticStyleSettingsController);
      [(CAMSemanticStyleSettingsController *)v10 setControllerDelegate:self];
      if (![(CAMViewfinderViewController *)self _layoutStyle]) {
        [(CAMSemanticStyleSettingsController *)v10 setModalPresentationStyle:0];
      }
      if (v10)
      {
        [(CAMViewfinderViewController *)self presentViewController:v10 animated:1 completion:0];
        [(CAMViewfinderViewController *)self _dismissDescriptionOverlayView:v6 withDuration:0.3];
      }
    }
    else
    {
      if ([v6 isMemberOfClass:objc_opt_class()])
      {
        [(CAMViewfinderViewController *)self _dismissDescriptionOverlayView:v6 withDuration:0.3];
        [(CAMViewfinderViewController *)self _startSmartStyleOnboardingControlRevealAnimation];
      }
      id v10 = 0;
    }
  }
  _Block_object_dispose(&v17, 8);
}

uint64_t __69__CAMViewfinderViewController_descriptionOverlayViewDidSelectDetail___block_invoke(uint64_t result, void *a2, uint64_t a3, unsigned char *a4)
{
  if (*(void *)(result + 32) == a3)
  {
    uint64_t v5 = result;
    CGRect result = [a2 integerValue];
    *(void *)(*(void *)(*(void *)(v5 + 40) + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

- (void)descriptionOverlayViewDidAcknowledge:(id)a3
{
}

- (void)semanticStyleSettingsControllerDidDismiss:(id)a3
{
}

- (BOOL)_shouldDisableModeForGraphConfiguration:(id)a3 callActive:(BOOL)a4
{
  id v4 = [(CAMViewfinderViewController *)self _disabledModeReasonsForGraphConfiguration:a3 callActive:a4];
  BOOL v5 = [v4 count] != 0;

  return v5;
}

- (id)_disabledModeReasonsForGraphConfiguration:(id)a3 callActive:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  unint64_t v7 = [v6 mode];
  BOOL v9 = v7 <= 8 && ((1 << v7) & 0x186) != 0 && v4;
  id v10 = [(CAMViewfinderViewController *)self _captureController];
  if ([v10 isInterrupted])
  {
    uint64_t v11 = [v10 currentCameraSystemPressureState];
    int v12 = [v11 isCameraTooHot];
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x3032000000;
  double v21 = __Block_byref_object_copy__4;
  __int16 v22 = __Block_byref_object_dispose__4;
  id v23 = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __84__CAMViewfinderViewController__disabledModeReasonsForGraphConfiguration_callActive___block_invoke;
  aBlock[3] = &unk_263FA2348;
  void aBlock[4] = &v18;
  BOOL v13 = _Block_copy(aBlock);
  BOOL v14 = (void (**)(void, void))v13;
  if (v9) {
    (*((void (**)(void *, void))v13 + 2))(v13, 0);
  }
  if (v12) {
    v14[2](v14, 1);
  }
  id v15 = (id)v19[5];

  _Block_object_dispose(&v18, 8);
  return v15;
}

void __84__CAMViewfinderViewController__disabledModeReasonsForGraphConfiguration_callActive___block_invoke(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v3)
  {
    id v5 = objc_alloc_init(MEMORY[0x263EFF9C0]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    unint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    int64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  id v8 = [NSNumber numberWithInteger:a2];
  [v3 addObject:v8];
}

- (BOOL)_shouldSuspendCaptureSessionForGraphConfiguration:(id)a3 callActive:(BOOL)a4
{
  BOOL v4 = self;
  id v5 = [(CAMViewfinderViewController *)self _disabledModeReasonsForGraphConfiguration:a3 callActive:a4];
  LOBYTE(v4) = [(CAMViewfinderViewController *)v4 _shouldSuspendCaptureSessionForModeDisabledReasons:v5];

  return (char)v4;
}

- (BOOL)_shouldSuspendCaptureSessionForModeDisabledReasons:(id)a3
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = a3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        if (-[CAMViewfinderViewController _shouldSuspendCaptureSessionForModeDisabledReason:](self, "_shouldSuspendCaptureSessionForModeDisabledReason:", objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * i), "integerValue", (void)v11)))
        {
          BOOL v9 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  BOOL v9 = 0;
LABEL_11:

  return v9;
}

- (BOOL)_shouldSuspendCaptureSessionForModeDisabledReason:(int64_t)a3
{
  return a3 == 0;
}

- (id)_debugStringForDisabledModeReasons:(id)a3
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a3;
  if ([v3 count])
  {
    id v4 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithCapacity:", objc_msgSend(v3, "count"));
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = v3;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v16 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * i), "integerValue", (void)v15);
          if (v10 == 1) {
            long long v11 = @"CameraTooHot";
          }
          else {
            long long v11 = 0;
          }
          if (v10) {
            long long v12 = v11;
          }
          else {
            long long v12 = @"ActiveCall";
          }
          [v4 addObject:v12];
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v7);
    }

    long long v13 = [v4 componentsJoinedByString:@","];
  }
  else
  {
    long long v13 = @"<none>";
  }

  return v13;
}

- (void)_embedDisabledModeOverlayView:(id)a3
{
  id v4 = a3;
  id v7 = [(CAMViewfinderViewController *)self viewfinderView];
  id v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v6 = v7;
  if (!v7) {
    uint64_t v6 = v5;
  }
  [v6 setDisabledModeOverlayView:v4];
}

- (void)_unembedDisabledModeOverlayView:(id)a3
{
  id v10 = a3;
  id v4 = [(CAMViewfinderViewController *)self viewfinderView];
  id v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v6 = v5;
  if (v4)
  {
    id v7 = [v4 disabledModeOverlayView];

    if (v7 != v10) {
      goto LABEL_7;
    }
    uint64_t v8 = v4;
  }
  else
  {
    id v9 = [v5 disabledModeOverlayView];

    if (v9 != v10) {
      goto LABEL_7;
    }
    uint64_t v8 = v6;
  }
  [v8 setDisabledModeOverlayView:v10];
LABEL_7:
}

uint64_t __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:1.0];
}

uint64_t __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke_3(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

uint64_t __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke_4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _unembedDisabledModeOverlayView:*(void *)(a1 + 40)];
}

- (void)_updateModeDisabledForCurrentStateAnimated:(BOOL)a3
{
  BOOL v3 = a3;
  id v6 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
  id v5 = [(CAMViewfinderViewController *)self _callStatusMonitor];
  -[CAMViewfinderViewController _updateModeDisabledForGraphConfiguration:callActive:animated:](self, "_updateModeDisabledForGraphConfiguration:callActive:animated:", v6, [v5 isCallActive], v3);
}

- (void)_updateModeDisabledForGraphConfiguration:(id)a3 callActive:(BOOL)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = [(CAMViewfinderViewController *)self _disabledModeReasonsForGraphConfiguration:v8 callActive:v6];
  uint64_t v10 = [v9 count];
  if ([(CAMViewfinderViewController *)self _isModeDisabled] != (v10 != 0))
  {
    [(CAMViewfinderViewController *)self _setModeDisabled:v10 != 0];
    long long v11 = os_log_create("com.apple.camera", "Camera");
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        unint64_t v13 = [v8 mode];
        if (v13 > 9) {
          long long v14 = 0;
        }
        else {
          long long v14 = off_263FA2788[v13];
        }
        long long v15 = [(CAMViewfinderViewController *)self _debugStringForDisabledModeReasons:v9];
        int v16 = 138543618;
        long long v17 = v14;
        __int16 v18 = 2114;
        uint64_t v19 = v15;
        _os_log_impl(&dword_2099F8000, v11, OS_LOG_TYPE_DEFAULT, "Disabling %{public}@ mode for reasons: %{public}@", (uint8_t *)&v16, 0x16u);
      }
    }
    else if (v12)
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_2099F8000, v11, OS_LOG_TYPE_DEFAULT, "Re-enabling mode", (uint8_t *)&v16, 2u);
    }

    [(CAMViewfinderViewController *)self _updateEnabledControlsWithReason:@"ModeDisabled"];
    [(CAMViewfinderViewController *)self _updateDisabledModeUIAnimated:v5];
  }
}

- (void)_updateDisabledModeOverlayViewForCurrentState
{
  BOOL v3 = [(CAMViewfinderViewController *)self _disabledModeOverlayView];
  if (v3)
  {
    id v8 = v3;
    id v4 = [(CAMViewfinderViewController *)self _currentGraphConfiguration];
    BOOL v5 = [(CAMViewfinderViewController *)self _callStatusMonitor];
    BOOL v6 = -[CAMViewfinderViewController _disabledModeReasonsForGraphConfiguration:callActive:](self, "_disabledModeReasonsForGraphConfiguration:callActive:", v4, [v5 isCallActive]);

    if ([v6 containsObject:&unk_26BDDDE00])
    {
      uint64_t v7 = 1;
    }
    else
    {
      [v6 containsObject:&unk_26BDDDDE8];
      uint64_t v7 = 0;
    }
    [v8 setDisabledModeReason:v7];

    BOOL v3 = v8;
  }
}

- (void)accessibilityHUDManager:(id)a3 wantsToShowHUDItem:(id)a4
{
}

- (void)_updateDoneButtonIfNeeded
{
  if ([(CAMViewfinderViewController *)self _useCreativeCameraControls])
  {
    BOOL v3 = [(CAMViewfinderViewController *)self view];
    id v4 = [v3 window];

    if (v4)
    {
      BOOL v5 = [(CAMViewfinderViewController *)self view];
      BOOL v6 = [v5 window];
      [v6 bounds];
      double v8 = v7;
      double v10 = v9;
      double v12 = v11;
      double v14 = v13;

      uint64_t v15 = objc_msgSend(MEMORY[0x263F5E478], "doneButtonStyleForReferenceBounds:", v8, v10, v12, v14);
      id v16 = [(CAMViewfinderViewController *)self _doneButton];
      [v16 setPreferredStyle:v15];
    }
  }
}

- (void)_handleCreativeCameraButtonPressed:(id)a3
{
  uint64_t v3 = [(CAMViewfinderViewController *)self creativeCameraDelegate];
  if (v3)
  {
    id v4 = (void *)v3;
    if (objc_opt_respondsToSelector()) {
      [v4 cameraViewControllerCreativeCameraButtonWasPressed];
    }
  }
  MEMORY[0x270F9A790]();
}

- (void)_handleCreativeCameraButtonReleased:(id)a3
{
  uint64_t v3 = [(CAMViewfinderViewController *)self creativeCameraDelegate];
  if (v3)
  {
    id v4 = (void *)v3;
    if (objc_opt_respondsToSelector()) {
      [v4 cameraViewControllerCreativeCameraButtonWasReleased];
    }
  }
  MEMORY[0x270F9A790]();
}

- (void)_handlePhotosButtonReleased:(id)a3
{
  uint64_t v3 = [(CAMViewfinderViewController *)self creativeCameraDelegate];
  if (v3)
  {
    id v4 = (void *)v3;
    if (objc_opt_respondsToSelector()) {
      [v4 cameraViewControllerDidRequestPhotosExtension];
    }
  }
  MEMORY[0x270F9A790]();
}

- (void)_handleDoneButtonReleased:(id)a3
{
  uint64_t v3 = [(CAMViewfinderViewController *)self creativeCameraDelegate];
  if (v3)
  {
    id v4 = (void *)v3;
    if (objc_opt_respondsToSelector()) {
      [v4 cameraViewControllerDidRequestDismissal];
    }
  }
  MEMORY[0x270F9A790]();
}

- (void)_handleCreativeCameraButtonTouchAttemptedWhileDisabled:(id)a3
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v3 = [(CAMViewfinderViewController *)self _reasonsToDisableCreativeCameraButton];
  id v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v5 = CAMDebugStringForControlDisableReasons(v3);
    int v6 = 138543362;
    double v7 = v5;
    _os_log_impl(&dword_2099F8000, v4, OS_LOG_TYPE_DEFAULT, "Creative camera button was tapped while disabled for reasons: %{public}@", (uint8_t *)&v6, 0xCu);
  }
}

- (BOOL)_trueVideoIsCapturing
{
  id v2 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v3 = [v2 trueVideoState];

  return v3 == 2;
}

- (BOOL)_trueVideoIsTransitioningToCapture
{
  id v2 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v3 = [v2 trueVideoState];

  return v3 == 1;
}

- (BOOL)_trueVideoIsTransitioningFromCapture
{
  id v2 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v3 = [v2 trueVideoState];

  return v3 == 3;
}

- (BOOL)_trueVideoIsActive
{
  id v2 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  uint64_t v3 = [v2 trueVideoState];

  return (unint64_t)(v3 - 1) < 3;
}

- (void)_trueVideoStopCapture
{
  uint64_t v3 = [(CAMViewfinderViewController *)self _captureController];
  int v4 = [v3 isCapturingVideo];

  if (v4) {
    [(CAMViewfinderViewController *)self _stopCapturingVideo];
  }
  BOOL v5 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [v5 setTrueVideoState:3];

  int64_t v6 = [(CAMViewfinderViewController *)self _trueVideoSourceCaptureMode];
  [(CAMViewfinderViewController *)self _handleUserChangedToMode:v6];
}

- (void)_startTransitioningToTrueVideoCaptureFromSourceMode:(int64_t)a3 sourceAspectRatio:(int64_t)a4 toDestinationMode:(int64_t)a5
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  double v9 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if ((unint64_t)a3 > 9) {
      double v10 = 0;
    }
    else {
      double v10 = off_263FA2788[a3];
    }
    if ((unint64_t)a5 > 9) {
      double v11 = 0;
    }
    else {
      double v11 = off_263FA2788[a5];
    }
    int v13 = 138543618;
    double v14 = v10;
    __int16 v15 = 2114;
    id v16 = v11;
    _os_log_impl(&dword_2099F8000, v9, OS_LOG_TYPE_DEFAULT, "True Video starting transition to capture. Source: %{public}@ destination: %{public}@", (uint8_t *)&v13, 0x16u);
  }

  double v12 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
  [(CAMViewfinderViewController *)self _setTrueVideoSourceCaptureMode:a3];
  [(CAMViewfinderViewController *)self _setTrueVideoDestinationCaptureMode:a5];
  [v12 setUseSlowerTrueVideoTransitionAnimationDuration:a4 == 3];
  [v12 setTrueVideoState:1];
  [(CAMViewfinderViewController *)self _cancelCTMCapture];
  [(CAMViewfinderViewController *)self _handleUserChangedToMode:a5];
}

- (void)_trueVideoStartCapture
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = [(CAMViewfinderViewController *)self _videoCaptureRequestWithCurrentSettings];
  if ([(CAMViewfinderViewController *)self _startCapturingVideoWithRequest:v3])
  {
    int v4 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v4 setTrueVideoState:2];
  }
  else
  {
    BOOL v5 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v6 = [(CAMViewfinderViewController *)self _trueVideoSourceCaptureMode];
      if (v6 > 9) {
        double v7 = 0;
      }
      else {
        double v7 = off_263FA2788[v6];
      }
      unint64_t v8 = [(CAMViewfinderViewController *)self _trueVideoDestinationCaptureMode];
      if (v8 > 9) {
        double v9 = 0;
      }
      else {
        double v9 = off_263FA2788[v8];
      }
      int v11 = 138543618;
      double v12 = v7;
      __int16 v13 = 2114;
      double v14 = v9;
      _os_log_impl(&dword_2099F8000, v5, OS_LOG_TYPE_DEFAULT, "True Video failed to start capture. Source: %{public}@ destination: %{public}@", (uint8_t *)&v11, 0x16u);
    }

    double v10 = [(CAMViewfinderViewController *)self _fullscreenViewfinder];
    [v10 setTrueVideoState:3];

    [(CAMViewfinderViewController *)self _handleUserChangedToMode:[(CAMViewfinderViewController *)self _trueVideoSourceCaptureMode]];
  }
}

- (BOOL)_useZoomFactorsOfTrueVideoDestinationModeForGraphConfiguration:(id)a3
{
  id v3 = a3;
  BOOL v4 = [v3 trueVideoEnabled]
    && [v3 mode] == 1
    && [v3 devicePosition] == 1;

  return v4;
}

- (BOOL)_updateDuetSystemConstraintsIfNecessary
{
  v11[1] = *MEMORY[0x263EF8340];
  id v2 = +[CAMUserPreferences preferences];
  if ([v2 isProResControlEnabled])
  {
    id v3 = +[CAMCaptureCapabilities capabilities];
    if (![v3 hostProcess])
    {

LABEL_8:
      double v7 = [MEMORY[0x263F3AFE0] sharedInstance];
      uint64_t v10 = *MEMORY[0x263F3B088];
      v11[0] = &unk_26BDDE088;
      BOOL v6 = 1;
      unint64_t v8 = [NSDictionary dictionaryWithObjects:v11 forKeys:&v10 count:1];
      [v7 updateSystemConstraintsWithParameters:v8];

      return v6;
    }
    BOOL v4 = +[CAMCaptureCapabilities capabilities];
    uint64_t v5 = [v4 hostProcess];

    if (v5 == 4) {
      goto LABEL_8;
    }
  }
  else
  {
  }
  return 0;
}

- (void)externalStorageMonitor:(id)a3 didChangeConnectedStorageDevices:(id)a4
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v5 = a4;
  BOOL v6 = [(CAMViewfinderViewController *)self _connectedStorage];
  uint64_t v7 = [v5 count];
  if (v7)
  {
    if (([v5 containsObject:v6] & 1) == 0)
    {
      unint64_t v8 = [v5 firstObject];
      [(CAMViewfinderViewController *)self _setConnectedStorage:v8];
    }
    if ([(CAMViewfinderViewController *)self _wantsExternalStorageOutputEnabled])
    {
      if ([(CAMViewfinderViewController *)self _isShowingCameraRoll])
      {
        double v9 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v20 = 0;
          uint64_t v10 = "External storage: device connected when Camera Roll is visible, deferring SSD enablement";
LABEL_13:
          _os_log_impl(&dword_2099F8000, v9, OS_LOG_TYPE_DEFAULT, v10, v20, 2u);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
      int v11 = [(CAMViewfinderViewController *)self _captureController];
      int v12 = [v11 isCapturingVideo];

      if (v12)
      {
        double v9 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v20 = 0;
          uint64_t v10 = "External storage: device connected during recording for internal storage, deferring SSD enablement";
          goto LABEL_13;
        }
LABEL_14:

        goto LABEL_15;
      }
      if ([(CAMViewfinderViewController *)self _externalStorageOutputEnabled]) {
        [(CAMViewfinderViewController *)self _updateExternalStorageDataSources];
      }
      else {
        [(CAMViewfinderViewController *)self _setExternalStorageOutputEnabled:1 animated:1];
      }
    }
  }
  else if (v6)
  {
    [(CAMViewfinderViewController *)self _setExternalStorageOutputEnabled:0 animated:1];
    [(CAMViewfinderViewController *)self _setConnectedStorage:0];
  }
LABEL_15:
  if ((v6 != 0) != (v7 != 0)) {
    [(CAMViewfinderViewController *)self updateControlVisibilityAnimated:1];
  }
  if ([(CAMViewfinderViewController *)self _shouldShowUnsupportedExternalStorageFormat])
  {
    [(CAMViewfinderViewController *)self _showUnsupportedFormatAlert];
  }
  __int16 v13 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    double v14 = [v6 description];
    uint64_t v15 = [v6 uniqueIdentifier];
    id v16 = [(CAMViewfinderViewController *)self _connectedStorage];
    uint64_t v17 = [v16 description];
    __int16 v18 = [(CAMViewfinderViewController *)self _connectedStorage];
    uint64_t v19 = [v18 uniqueIdentifier];
    *(_DWORD *)uint64_t v20 = 138544130;
    *(void *)&void v20[4] = v14;
    __int16 v21 = 2114;
    __int16 v22 = v15;
    __int16 v23 = 2114;
    __int16 v24 = v17;
    __int16 v25 = 2114;
    uint64_t v26 = v19;
    _os_log_impl(&dword_2099F8000, v13, OS_LOG_TYPE_DEFAULT, "External storage: available storage devices changed. Connected device (%{public}@/%{public}@) updated to  (%{public}@/%{public}@).", v20, 0x2Au);
  }
}

- (void)_updateExternalStorageMonitoringState:(unint64_t)a3
{
  id v5 = [(CAMViewfinderViewController *)self _storageMonitor];

  if (v5)
  {
    BOOL v6 = +[CAMUserPreferences preferences];
    int v7 = [v6 isProResControlEnabled];

    if (v7)
    {
      id v8 = [(CAMViewfinderViewController *)self _storageMonitor];
      [v8 setMonitoringState:a3];
    }
  }
}

- (void)captureController:(id)a3 didChangeCameraSystemPressureState:(id)a4
{
}

- (BOOL)isInCameraRollView
{
  id v2 = [(CAMViewfinderViewController *)self _cameraRollController];
  char v3 = [v2 isCameraRollViewControllerPresented];

  return v3;
}

- (BOOL)navigateToViewfinderView
{
  id v2 = [(CAMViewfinderViewController *)self _cameraRollController];
  if ([v2 isCameraRollViewControllerPresented]) {
    char v3 = [v2 dismissCameraRollViewControllerForced:0 animated:1];
  }
  else {
    char v3 = 1;
  }

  return v3;
}

- (void)setSingleUseTimerWithDuration:(int64_t)a3
{
  [(CAMViewfinderViewController *)self _setResetTimerDurationAfterDelayedCapture:1];
  [(CAMViewfinderViewController *)self _setTimerDurationAndUpdateUI:a3 animated:1];
}

- (void)_requestPasscodeUnlockForCameraRollController:(id)a3 forAction:(unint64_t)a4 completionBlock:(id)a5
{
  id v8 = a3;
  double v9 = (void (**)(id, void))a5;
  uint64_t v10 = [(CAMViewfinderViewController *)self unlockDelegate];

  if (v10)
  {
    v9[2](v9, 0);
    int v11 = [(CAMViewfinderViewController *)self unlockDelegate];
    [v11 viewfinderViewController:self didRequestUnlockForCameraRollController:v8 withCameraRollActionType:a4 completionHandler:&__block_literal_global_1372];
  }
  else
  {
    int v12 = v9;
    SBSRequestPasscodeUnlockUI();
  }
}

void __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    char v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_cold_1();
    }
  }
}

void __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_1373(uint64_t a1, char a2)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_2;
  v3[3] = &unk_263FA2390;
  id v4 = *(id *)(a1 + 32);
  char v5 = a2;
  dispatch_async(MEMORY[0x263EF83A0], v3);
}

uint64_t __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40) != 0);
}

- (void)_requestPasscodeUnlockForDocumentScanningWithCompletionBlock:(id)a3
{
  id v4 = (void (**)(id, void))a3;
  char v5 = [(CAMViewfinderViewController *)self unlockDelegate];

  if (v5)
  {
    v4[2](v4, 0);
    BOOL v6 = [(CAMViewfinderViewController *)self unlockDelegate];
    [v6 viewfinderViewControllerDidRequestUnlockForDocumentScanning:self completionHandler:&__block_literal_global_1376];
  }
  else
  {
    int v7 = v4;
    SBSRequestPasscodeUnlockUI();
  }
}

void __92__CAMViewfinderViewController__requestPasscodeUnlockForDocumentScanningWithCompletionBlock___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    char v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_cold_1();
    }
  }
}

void __92__CAMViewfinderViewController__requestPasscodeUnlockForDocumentScanningWithCompletionBlock___block_invoke_1377(uint64_t a1, char a2)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __92__CAMViewfinderViewController__requestPasscodeUnlockForDocumentScanningWithCompletionBlock___block_invoke_2;
  v3[3] = &unk_263FA2390;
  id v4 = *(id *)(a1 + 32);
  char v5 = a2;
  dispatch_async(MEMORY[0x263EF83A0], v3);
}

uint64_t __92__CAMViewfinderViewController__requestPasscodeUnlockForDocumentScanningWithCompletionBlock___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40) != 0);
}

- (void)_requestPasscodeUnlockWithCompletionBlock:(id)a3
{
  id v4 = a3;
  id v3 = v4;
  SBSRequestPasscodeUnlockUI();
}

void __73__CAMViewfinderViewController__requestPasscodeUnlockWithCompletionBlock___block_invoke(uint64_t a1, char a2)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __73__CAMViewfinderViewController__requestPasscodeUnlockWithCompletionBlock___block_invoke_2;
  v3[3] = &unk_263FA2390;
  id v4 = *(id *)(a1 + 32);
  char v5 = a2;
  dispatch_async(MEMORY[0x263EF83A0], v3);
}

uint64_t __73__CAMViewfinderViewController__requestPasscodeUnlockWithCompletionBlock___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40) != 0);
}

- (void)_preparePhotoOutputForExpectedPhotoResolution
{
  int64_t v3 = [(CAMViewfinderViewController *)self _currentMaxPhotoResolution];
  id v4 = [(CAMViewfinderViewController *)self _captureController];
  [v4 preparePhotoOutputForExpectedPhotoResolution:v3];
}

+ (int64_t)_pressTypeForCaptureButton:(int64_t)a3
{
  if ((unint64_t)(a3 - 1) > 5) {
    return -1;
  }
  else {
    return qword_209C79540[a3 - 1];
  }
}

- (void)stopMonitoringForAccidentalLaunchIfNeeded
{
  int64_t v3 = +[CAMCaptureCapabilities capabilities];
  uint64_t v4 = [v3 hostProcess];

  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFBLL;
  BOOL v6 = +[CAMCaptureCapabilities capabilities];
  int v7 = [v6 shouldEnableUserNotifications];

  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    double v9 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v11 = 0;
      _os_log_impl(&dword_2099F8000, v9, OS_LOG_TYPE_DEFAULT, "stopMonitoringForAccidentalLaunchIfNeeded: Interaction with Camera disable TTR", v11, 2u);
    }

    uint64_t v10 = [(CAMViewfinderViewController *)self _captureController];
    [v10 stopMonitoringForAccidentalLaunch];
  }
}

- (int64_t)photoModeAspectRatioCrop
{
  return self->_photoModeAspectRatioCrop;
}

- (void)setPhotoModeAspectRatioCrop:(int64_t)a3
{
  self->_photoModeAspectRatioCrop = a3;
}

- (int64_t)configuredCaptureMode
{
  return self->_configuredCaptureMode;
}

- (int64_t)configuredCaptureDevice
{
  return self->_configuredCaptureDevice;
}

- (void)setReviewButtonSource:(id)a3
{
}

- (CAMCreativeCameraDelegate)creativeCameraDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_creativeCameraDelegate);
  return (CAMCreativeCameraDelegate *)WeakRetained;
}

- (void)setCreativeCameraDelegate:(id)a3
{
}

- (void)_setOpeningViewfinder:(BOOL)a3
{
  self->__openingViewfinder = a3;
}

- (BOOL)_isAutoResumeCancelingWithoutBackgrounding
{
  return self->__autoResumeCancelingWithoutBackgrounding;
}

- (void)_setAutoResumeCancelingWithoutBackgrounding:(BOOL)a3
{
  self->__autoResumeCancelingWithoutBackgrounding = a3;
}

- (CAMTimelapseController)_timelapseController
{
  return self->__timelapseController;
}

- (CAMPowerController)_powerController
{
  return self->__powerController;
}

- (CAMExternalStorageMonitor)_storageMonitor
{
  return self->__storageMonitor;
}

- (CAMAnalyticsCaptureEvent)_timelapseAnalyticsEvent
{
  return self->__timelapseAnalyticsEvent;
}

- (void)set_timelapseAnalyticsEvent:(id)a3
{
}

- (int64_t)_videoConfigurationOverride
{
  return self->__videoConfigurationOverride;
}

- (void)set_videoConfigurationOverride:(int64_t)a3
{
  self->__videoConfigurationOverride = a3;
}

- (int64_t)_slomoConfigurationOverride
{
  return self->__slomoConfigurationOverride;
}

- (void)set_slomoConfigurationOverride:(int64_t)a3
{
  self->__slomoConfigurationOverride = a3;
}

- (int64_t)_cinematicConfigurationOverride
{
  return self->__cinematicConfigurationOverride;
}

- (void)set_cinematicConfigurationOverride:(int64_t)a3
{
  self->__cinematicConfigurationOverride = a3;
}

- (CAMCaptureGraphConfiguration)_configuredGraphConfiguration
{
  return self->__configuredGraphConfiguration;
}

- (BOOL)_isReconfiguring
{
  return self->__reconfiguring;
}

- (void)_setReconfiguring:(BOOL)a3
{
  self->__reconfiguring = a3;
}

- (BOOL)_isReconfiguringForZoomChange
{
  return self->__reconfiguringForZoomChange;
}

- (void)_setReconfiguringForZoomChange:(BOOL)a3
{
  self->__reconfiguringForZoomChange = a3;
}

- (BOOL)_completedInitialConfiguration
{
  return self->__completedInitialConfiguration;
}

- (void)set_completedInitialConfiguration:(BOOL)a3
{
  self->__completedInitialConfiguration = a3;
}

- (int64_t)_resolvedTorchMode
{
  return self->__resolvedTorchMode;
}

- (void)_setDesiredFlashMode:(int64_t)a3
{
  self->__desiredFlashMode = a3;
}

- (void)_setDesiredHDRMode:(int64_t)a3
{
  self->__desiredHDRMode = a3;
}

- (void)_setDesiredLivePhotoMode:(int64_t)a3
{
  self->__desiredLivePhotoMode = a3;
}

- (unint64_t)_desiredLowLightControlMode
{
  return self->__desiredLowLightControlMode;
}

- (void)_setDesiredLowLightControlMode:(unint64_t)a3
{
  self->__desiredLowLightControlMode = a3;
}

- (unint64_t)_resolvedLowLightControlMode
{
  return self->__resolvedLowLightControlMode;
}

- (void)_setResolvedLowLightControlMode:(unint64_t)a3
{
  self->__resolvedLowLightControlMode = a3;
}

- (int64_t)_resolvedLowLightMode
{
  return self->__resolvedLowLightMode;
}

- (void)_setResolvedLowLightMode:(int64_t)a3
{
  self->__resolvedLowLightMode = a3;
}

- ($F24F406B2B787EFB06265DBA3D28CBD5)_lowLightDurationMapping
{
  double minimumDuration = self->minimumDuration;
  double maximumDuration = self->maximumDuration;
  result.int64_t var1 = maximumDuration;
  result.int64_t var0 = minimumDuration;
  return result;
}

- (void)_setLowLightDurationMapping:(id)a3
{
  self->2624 = ($9A58E5929C033B40A174D578711F86A7)a3;
}

- (unint64_t)_lowLightConflicts
{
  return self->__lowLightConflicts;
}

- (void)_setLowLightConflicts:(unint64_t)a3
{
  self->__lowLightConflicts = a3;
}

- (BOOL)_isLowLightCaptureUIVisible
{
  return self->__lowLightCaptureUIVisible;
}

- (void)_setLowLightCaptureUIVisible:(BOOL)a3
{
  self->__lowLightCaptureUIVisible = a3;
}

- (BOOL)_isCurrentLowLightCaptureCancelable
{
  return self->__currentLowLightCaptureCancelable;
}

- (void)_setCurrentLowLightCaptureCancelable:(BOOL)a3
{
  self->__currentLowLightCaptureCancelable = a3;
}

- (int64_t)_desiredMacroMode
{
  return self->__desiredMacroMode;
}

- (void)_setDesiredMacroMode:(int64_t)a3
{
  self->__desiredMacroMode = a3;
}

- (int64_t)_resolvedMacroMode
{
  return self->__resolvedMacroMode;
}

- (void)_setResolvedMacroMode:(int64_t)a3
{
  self->__resolvedMacroMode = a3;
}

- (void)set_depthEffectEnabledFromSuggestion:(BOOL)a3
{
  self->__depthEffectEnabledFromSuggestion = a3;
}

- (int64_t)_desiredRAWMode
{
  return self->__desiredRAWMode;
}

- (void)_setDesiredRAWMode:(int64_t)a3
{
  self->__desiredRAWMode = a3;
}

- (int64_t)_resolvedRAWMode
{
  return self->__resolvedRAWMode;
}

- (void)_setResolvedRAWMode:(int64_t)a3
{
  self->__resolvedRAWMode = a3;
}

- (unint64_t)_photoFormatConflicts
{
  return self->__photoFormatConflicts;
}

- (void)_setPhotoFormatConflicts:(unint64_t)a3
{
  self->__photoFormatConflicts = a3;
}

- (int64_t)_desiredPhotoResolution
{
  return self->__desiredPhotoResolution;
}

- (void)_setDesiredPhotoResolution:(int64_t)a3
{
  self->__desiredPhotoResolution = a3;
}

- (int64_t)_resolvedPhotoResolution
{
  return self->__resolvedPhotoResolution;
}

- (void)_setResolvedPhotoResolution:(int64_t)a3
{
  self->__resolvedPhotoResolution = a3;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_desiredAdvancedPhotoFormat
{
  id v2 = &self->2640;
  int64_t encoding = self->encoding;
  int64_t resolution = v2->resolution;
  result.int64_t var1 = resolution;
  result.int64_t var0 = encoding;
  return result;
}

- (void)_setDesiredPhotoFormat:(id)a3
{
  self->2640 = ($B1CBF1B9C19084F159A2126E2D211268)a3;
}

- (int64_t)_desiredProResVideoMode
{
  return self->__desiredProResVideoMode;
}

- (void)_setDesiredProResVideoMode:(int64_t)a3
{
  self->__desiredProResVideoMode = a3;
}

- (int64_t)_desiredVideoStabilizationMode
{
  return self->__desiredVideoStabilizationMode;
}

- (void)_setDesiredVideoStabilizationMode:(int64_t)a3
{
  self->__desiredVideoStabilizationMode = a3;
}

- (BOOL)_isFlashingVideoStabilizationBadge
{
  return self->__flashingVideoStabilizationBadge;
}

- (void)_setFlashingVideoStabilizationBadge:(BOOL)a3
{
  self->__flashingVideoStabilizationBadge = a3;
}

- (BOOL)_isSpatialVideoEnabled
{
  return self->__spatialVideoEnabled;
}

- (void)_setSpatialVideoEnabled:(BOOL)a3
{
  self->__spatialVideoEnabled = a3;
}

- (int64_t)_stereoCaptureStatus
{
  return self->__stereoCaptureStatus;
}

- (void)_setStereoCaptureStatus:(int64_t)a3
{
  self->__stereoCaptureStatus = a3;
}

- (BOOL)_spatialModeHasVideoSelected
{
  return self->__spatialModeHasVideoSelected;
}

- (void)_setSpatialModeHasVideoSelected:(BOOL)a3
{
  self->__spatialModeHasVideoSelected = a3;
}

- (void)_setPhotoModeEffectFilterType:(int64_t)a3
{
  self->__photoModeEffectFilterType = a3;
}

- (void)_setSquareModeEffectFilterType:(int64_t)a3
{
  self->__squareModeEffectFilterType = a3;
}

- (void)_setPortraitModeEffectFilterType:(int64_t)a3
{
  self->__portraitModeEffectFilterType = a3;
}

- (void)_setPortraitModeLightingEffectType:(int64_t)a3
{
  self->__portraitModeLightingEffectType = a3;
}

- (double)_portraitModeApertureValue
{
  return self->__portraitModeApertureValue;
}

- (void)_setPortraitModeApertureValue:(double)a3
{
  self->__portraitModeApertureValue = a3;
}

- (double)_portraitModeIntensityValue
{
  return self->__portraitModeIntensityValue;
}

- (void)_setPortraitModeIntensityValue:(double)a3
{
  self->__portraitModeIntensityValue = a3;
}

- (double)_lastDefaultApertureValue
{
  return self->__lastDefaultApertureValue;
}

- (void)_setLastDefaultApertureValue:(double)a3
{
  self->__lastDefaultApertureValue = a3;
}

- (NSMutableDictionary)_exposureBiasesByMode
{
  return self->__exposureBiasesByMode;
}

- (double)_shadowClippingValue
{
  return self->__shadowClippingValue;
}

- (void)_setShadowClippingValue:(double)a3
{
  self->__shadowClippingValue = a3;
}

- (double)_highlightClippingValue
{
  return self->__highlightClippingValue;
}

- (void)_setHighlightClippingValue:(double)a3
{
  self->__highlightClippingValue = a3;
}

- (NSMutableArray)_semanticStyles
{
  return self->__semanticStyles;
}

- (void)_setSemanticStyles:(id)a3
{
}

- (unint64_t)_selectedSemanticStyleIndex
{
  return self->__selectedSemanticStyleIndex;
}

- (void)_setSelectedSemanticStyleIndex:(unint64_t)a3
{
  self->__selectedSemanticStyleIndedouble x = a3;
}

- (unint64_t)_smartStyleSystemStyleIndex
{
  return self->__smartStyleSystemStyleIndex;
}

- (void)_setSmartStyleSystemStyleIndex:(unint64_t)a3
{
  self->__smartStyleSystemStyleIndedouble x = a3;
}

- (CAMMutableStillImageCaptureRequest)_currentStillImageCaptureMomentSettings
{
  return self->__currentStillImageCaptureMomentSettings;
}

- (void)_setCurrentStillImageCaptureMomentSettings:(id)a3
{
}

- (BOOL)_needsDeferredGraphConfiguration
{
  return self->__needsDeferredGraphConfiguration;
}

- (void)_setNeedsDeferredGraphConfiguration:(BOOL)a3
{
  self->__needsDeferredGraphConfiguration = a3;
}

- (void)_setInternalAutorotationStyle:(int64_t)a3
{
  self->__internalAutorotationStyle = a3;
}

- (CAMViewfinderTransitionController)_transitionController
{
  return self->__transitionController;
}

- (CAMSharedLibraryButton)_sharedLibraryButton
{
  return self->__sharedLibraryButton;
}

- (CAMSharedLibraryBadge)_sharedLibraryBadge
{
  return self->__sharedLibraryBadge;
}

- (void)set_reviewButton:(id)a3
{
}

- (CAMMessagesPhotosButton)_photosButton
{
  return self->__photosButton;
}

- (void)_setShallowDepthOfFieldStatus:(int64_t)a3
{
  self->__shallowDepthOfFieldStatus = a3;
}

- (int64_t)_stagePreviewStatus
{
  return self->__stagePreviewStatus;
}

- (void)_setStagePreviewStatus:(int64_t)a3
{
  self->__stagePreviewStatus = a3;
}

- (NSMutableDictionary)_descriptionOverlayViewByMode
{
  return self->__descriptionOverlayViewByMode;
}

- (CEKAnimationSequence)_smartStyleOnboardingControlDrawerAnimationSequence
{
  return self->__smartStyleOnboardingControlDrawerAnimationSequence;
}

- (void)set_smartStyleOnboardingControlDrawerAnimationSequence:(id)a3
{
}

- (CAMMetalContext)_metalContext
{
  return self->__metalContext;
}

- (CAMDynamicShutterControl)_dynamicShutterControl
{
  return self->__dynamicShutterControl;
}

- (CUShutterButton)_stillDuringVideoButton
{
  return self->__stillDuringVideoButton;
}

- (CEKApertureButton)_apertureButton
{
  return self->__apertureButton;
}

- (CAMIntensityButton)_intensityButton
{
  return self->__intensityButton;
}

- (CAMGridView)_gridView
{
  return self->__gridView;
}

- (CAMLevelIndicatorView)_levelView
{
  return self->__levelView;
}

- (CAMHorizonLevelView)_horizonLevelView
{
  return self->__horizonLevelView;
}

- (CEKApertureSlider)_portraitApertureSlider
{
  return self->__portraitApertureSlider;
}

- (CEKSlider)_portraitIntensitySlider
{
  return self->__portraitIntensitySlider;
}

- (CAMVideoConfigurationStatusIndicator)_videoConfigurationStatusIndicator
{
  return self->__videoConfigurationStatusIndicator;
}

- (UIView)_captureAnimationPreviewOverlay
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->__captureAnimationPreviewOverlay);
  return (UIView *)WeakRetained;
}

- (void)_setCaptureAnimationPreviewOverlay:(id)a3
{
}

- (BOOL)_isProactiveFlashSuggestionSuppressed
{
  return self->__proactiveFlashSuggestionSuppressed;
}

- (void)_setProactiveFlashSuggestionSuppressed:(BOOL)a3
{
  self->__proactiveFlashSuggestionSuppressed = a3;
}

- (void)_setFlashAndHDRConflictingControl:(int64_t)a3
{
  self->__flashAndHDRConflictingControl = a3;
}

- (int64_t)_currentlyPressedButton
{
  return self->__currentlyPressedButton;
}

- (void)_setCurrentlyPressedButton:(int64_t)a3
{
  self->__currentlyPressedButton = a3;
}

- (UISwipeGestureRecognizer)_previousModeGestureRecognizer
{
  return self->__previousModeGestureRecognizer;
}

- (UISwipeGestureRecognizer)_nextModeGestureRecognizer
{
  return self->__nextModeGestureRecognizer;
}

- (AVCaptureEventInteraction)_physicalButtonInteraction
{
  return self->__physicalButtonInteraction;
}

- (void)set_physicalButtonInteraction:(id)a3
{
}

- (CAMPhysicalCaptureNotifier)_cameraCaseShutterNotifier
{
  return self->__cameraCaseShutterNotifier;
}

- (void)set_cameraCaseShutterNotifier:(id)a3
{
}

- (UIPinchGestureRecognizer)_zoomPinchGestureRecognizer
{
  return self->__zoomPinchGestureRecognizer;
}

- (UIPanGestureRecognizer)_cameraRollSwipeUpGestureRecognizer
{
  return self->__cameraRollSwipeUpGestureRecognizer;
}

- (UISwipeGestureRecognizer)_swipeDownGestureRecognizer
{
  return self->__swipeDownGestureRecognizer;
}

- (UISwipeGestureRecognizer)_swipeUpGestureRecognizer
{
  return self->__swipeUpGestureRecognizer;
}

- (UISwipeGestureRecognizer)_previousFilterGestureRecognizer
{
  return self->__previousFilterGestureRecognizer;
}

- (UISwipeGestureRecognizer)_nextFilterGestureRecognizer
{
  return self->__nextFilterGestureRecognizer;
}

- (UISwipeGestureRecognizer)_smartStylesSwipeLeftGestureRecognizer
{
  return self->__smartStylesSwipeLeftGestureRecognizer;
}

- (void)set_smartStylesSwipeLeftGestureRecognizer:(id)a3
{
}

- (UISwipeGestureRecognizer)_smartStylesSwipeRightGestureRecognizer
{
  return self->__smartStylesSwipeRightGestureRecognizer;
}

- (void)set_smartStylesSwipeRightGestureRecognizer:(id)a3
{
}

- (UILongPressGestureRecognizer)_sharedLibraryLongPressGestureRecognizer
{
  return self->__sharedLibraryLongPressGestureRecognizer;
}

- (double)_videoZoomFactorAtPinchStart
{
  return self->__videoZoomFactorAtPinchStart;
}

- (void)_setVideoZoomFactorAtPinchStart:(double)a3
{
  self->__videoZoomFactorAtPinchStart = a3;
}

- (double)_videoZoomFactorAtDynamicShutterStart
{
  return self->__videoZoomFactorAtDynamicShutterStart;
}

- (void)_setVideoZoomFactorAtDynamicShutterStart:(double)a3
{
  self->__videoZoomFactorAtDynamicShutterStart = a3;
}

- (CAMAnimationDelegate)_synchronizedCaptureTimerDelegate
{
  return self->__synchronizedCaptureTimerDelegate;
}

- (void)_setSynchronizedCaptureTimerDelegate:(id)a3
{
}

- (unint64_t)_remainingCaptureTimerTicks
{
  return self->__remainingCaptureTimerTicks;
}

- (void)_setRemainingCaptureTimerTicks:(unint64_t)a3
{
  self->__remainingCaptureTimerTicks = a3;
}

- (NSDate)_lastTimerIndicatorFaceUpdateDate
{
  return self->__lastTimerIndicatorFaceUpdateDate;
}

- (CAMTorchPatternController)_torchPatternController
{
  return self->__torchPatternController;
}

- (void)_setDiskSpaceAlertController:(id)a3
{
}

- (void)_setBurstEndSoundPlaying:(BOOL)a3
{
  self->__burstEndSoundPlaying = a3;
}

- (void)_setFlashOrTorchUnavailableAlertController:(id)a3
{
}

- (BOOL)_didAcceptCompromisedFlash
{
  return self->__didAcceptCompromisedFlash;
}

- (void)_setDidAcceptCompromisedFlash:(BOOL)a3
{
  self->__didAcceptCompromisedFlash = a3;
}

- (BOOL)_resetTimerDurationAfterDelayedCapture
{
  return self->__resetTimerDurationAfterDelayedCapture;
}

- (void)_setResetTimerDurationAfterDelayedCapture:(BOOL)a3
{
  self->__resetTimerDurationAfterDelayedCapture = a3;
}

- (CAMPreventConnectionHandoverAssertionController)_preventConnectionHandoverAssertionController
{
  return self->__preventConnectionHandoverAssertionController;
}

- (BOOL)_receivedOutOfDiskSpaceErrorDuringCapture
{
  return self->__receivedOutOfDiskSpaceErrorDuringCapture;
}

- (void)_setReceivedOutOfDiskSpaceErrorDuringCapture:(BOOL)a3
{
  self->__receivedOutOfDiskSpaceErrorDuringCapture = a3;
}

- (CAMTimerCache)_timerCache
{
  return self->__timerCache;
}

- (BOOL)_wantsFilterScrubberVisible
{
  return self->__wantsFilterScrubberVisible;
}

- (BOOL)_shouldShowFilterScrubberAfterNextRender
{
  return self->__shouldShowFilterScrubberAfterNextRender;
}

- (void)_setShouldShowFilterScrubberAfterNextRender:(BOOL)a3
{
  self->__shouldShowFilterScrubberAfterNextRender = a3;
}

- (BOOL)_isShowingPortraitApertureSlider
{
  return self->__showingPortraitApertureSlider;
}

- (BOOL)_isShowingPortraitIntensitySlider
{
  return self->__showingPortraitIntensitySlider;
}

- (void)_setAnimatingFilterScrubberDismissal:(BOOL)a3
{
  self->__animatingFilterScrubberDismissal = a3;
}

- (int64_t)_overCapturePreviewStatus
{
  return self->__overCapturePreviewStatus;
}

- (void)_setOverCapturePreviewStatus:(int64_t)a3
{
  self->__overCapturePreviewStatus = a3;
}

- (int64_t)_cachedSharedLibraryTimerState
{
  return self->__cachedSharedLibraryTimerState;
}

- (void)set_cachedSharedLibraryTimerState:(int64_t)a3
{
  self->__cachedSharedLibraryTimerState = a3;
}

- (NSMutableDictionary)_preferredControlToOpenInDrawerForMode
{
  return self->__preferredControlToOpenInDrawerForMode;
}

- (void)set_preferredControlToOpenInDrawerForMode:(id)a3
{
}

- (BOOL)viewAlreadyDidAppear
{
  return self->_viewAlreadyDidAppear;
}

- (void)setViewAlreadyDidAppear:(BOOL)a3
{
  self->_viewAlreadyDidAppear = a3;
}

- (BOOL)_isModeDisabled
{
  return self->__modeDisabled;
}

- (void)_setModeDisabled:(BOOL)a3
{
  self->__modeDisabled = a3;
}

- (void)_setDisabledModeOverlayView:(id)a3
{
}

- (void)_setLastZoomInteractionType:(int64_t)a3
{
  self->__lastZoomInteractionType = a3;
}

- (unint64_t)_faceCount
{
  return self->__faceCount;
}

- (void)set_faceCount:(unint64_t)a3
{
  self->__faceCount = a3;
}

- (unint64_t)_catCount
{
  return self->__catCount;
}

- (void)set_catCount:(unint64_t)a3
{
  self->__catCount = a3;
}

- (unint64_t)_dogCount
{
  return self->__dogCount;
}

- (void)set_dogCount:(unint64_t)a3
{
  self->__dogCount = a3;
}

- (NSMutableArray)_accessibilityHUDManagers
{
  return self->__accessibilityHUDManagers;
}

- (void)_setAccessibilityHUDManagers:(id)a3
{
}

- (id)_filterScrubberLayerContents
{
  return self->__filterScrubberLayerContents;
}

- (void)set_filterScrubberLayerContents:(id)a3
{
}

- (NSArray)_filterTypes
{
  return self->__filterTypes;
}

- (void)set_filterTypes:(id)a3
{
}

- (int64_t)_lastMRCResultsCount
{
  return self->__lastMRCResultsCount;
}

- (void)_setLastMRCResultsCount:(int64_t)a3
{
  self->__lastMRCResultsCount = a3;
}

- (BCSAVParsingSession)_barcodeParsingSession
{
  return self->__barcodeParsingSession;
}

- (CAMMachineReadableCodeLoggingController)_machineReadableCodeLoggingController
{
  return self->__machineReadableCodeLoggingController;
}

- (NSArray)_cachedQRCodeResults
{
  return self->__cachedQRCodeResults;
}

- (void)_setCachedQRCodeResults:(id)a3
{
}

- (NSArray)_cachedAppClipCodeResults
{
  return self->__cachedAppClipCodeResults;
}

- (void)_setCachedAppClipCodeResults:(id)a3
{
}

- (UIView)_textInteractionBackground
{
  return self->__textInteractionBackground;
}

- (void)_setTextInteractionBackground:(id)a3
{
}

- (BOOL)_wantsVisualTextAnalysis
{
  return self->__wantsVisualTextAnalysis;
}

- (BOOL)_wantsVisualTextSelectionInstructions
{
  return self->__wantsVisualTextSelectionInstructions;
}

- (void)_setWantsVisualTextSelectionInstructions:(BOOL)a3
{
  self->__wantsVisualTextSelectionInstructions = a3;
}

- (NSString)_currentStillImageCaptureTextAnalysisIdentifier
{
  return self->__currentStillImageCaptureTextAnalysisIdentifier;
}

- (void)_setCurrentStillImageCaptureTextAnalysisIdentifier:(id)a3
{
}

- (NSDate)_currentStillImageCaptureTextAnalysisStateDate
{
  return self->__currentStillImageCaptureTextAnalysisStateDate;
}

- (void)_setCurrentStillImageCaptureTextAnalysisStartDate:(id)a3
{
}

- (NSDate)_currentStillImageCaptureTextAnalysisEndDate
{
  return self->__currentStillImageCaptureTextAnalysisEndDate;
}

- (void)_setCurrentStillImageCaptureTextAnalysisEndDate:(id)a3
{
}

- (NSDate)_currentTextAnalysisDetectionEndDate
{
  return self->__currentTextAnalysisDetectionEndDate;
}

- (void)_setCurrentTextAnalysisDetectionEndDate:(id)a3
{
}

- (VKCaptureTextAnalyzer)_imageAnalyzer
{
  return self->__imageAnalyzer;
}

- (void)_setImageAnalyzer:(id)a3
{
}

- (CAMProminentObjectManager)_prominentObjectManager
{
  return self->__prominentObjectManager;
}

- (void)_setProminentObjectManager:(id)a3
{
}

- (NSArray)_cachedTextRegionResults
{
  return self->__cachedTextRegionResults;
}

- (void)_setCachedTextRegionResults:(id)a3
{
}

- (CAMAnalyticsVisionSession)_visionAnalyticsSession
{
  return self->__visionAnalyticsSession;
}

- (void)_setVisionAnalyticsSession:(id)a3
{
}

- (CAMAnalyticsSessionEvent)_analyticsSessionEvent
{
  return self->__analyticsSessionEvent;
}

- (void)_setAnalyticsSessionEvent:(id)a3
{
}

- (CAMAnalyticsControlDrawerEvent)_analyticsControlDrawerEvent
{
  return self->__analyticsControlDrawerEvent;
}

- (void)_setAnalyticsControlDrawerEvent:(id)a3
{
}

- (CAMExternalStorage)_connectedStorage
{
  return self->__connectedStorage;
}

- (void)_setConnectedStorage:(id)a3
{
}

- (BOOL)_externalStorageOutputEnabled
{
  return self->__externalStorageOutputEnabled;
}

- (int64_t)_currentHalfPressSpotlight
{
  return self->__currentHalfPressSpotlight;
}

- (void)_setCurrentHalfPressSpotlight:(int64_t)a3
{
  self->__currentHalfPressSpotlight = a3;
}

- (NSMutableSet)_openHalfPressSpotlightControls
{
  return self->__openHalfPressSpotlightControls;
}

- (void)_setOpenHalfPressSpotlightControls:(id)a3
{
}

- (CAMOverlayServiceConnection)_overlayServiceConnection
{
  return self->__overlayServiceConnection;
}

- (void)_setOverlayServiceConnection:(id)a3
{
}

- (void)_setOverlayControls:(id)a3
{
}

- (BOOL)_isDocumentInScene
{
  return self->__documentInScene;
}

- (void)_setDocumentInScene:(BOOL)a3
{
  self->__documentInScene = a3;
}

- (int64_t)_trueVideoSourceCaptureMode
{
  return self->__trueVideoSourceCaptureMode;
}

- (void)_setTrueVideoSourceCaptureMode:(int64_t)a3
{
  self->__trueVideoSourceCaptureMode = a3;
}

- (int64_t)_trueVideoDestinationCaptureMode
{
  return self->__trueVideoDestinationCaptureMode;
}

- (void)_setTrueVideoDestinationCaptureMode:(int64_t)a3
{
  self->__trueVideoDestinationCaptureMode = a3;
}

- (double)_trueVideoSourceZoomFactor
{
  return self->__trueVideoSourceZoomFactor;
}

- (void)_setTrueVideoSourceZoomFactor:(double)a3
{
  self->__trueVideoSourceZoomFactor = a3;
}

- (id)_cameraRollControllerAction
{
  return self->__cameraRollControllerAction;
}

- (void)set_cameraRollControllerAction:(id)a3
{
}

- (CAMViewfinderTipManager)_tipManager
{
  return self->__tipManager;
}

- (BOOL)isUserInteractionLoggingEnabled
{
  return self->_userInteractionLoggingEnabled;
}

- (CAMLibrarySelectionController)_librarySelectionController
{
  return self->__librarySelectionController;
}

- (CAMViewfinderViewControllerStillImageCaptureRequestTestingDelegate)stillImageCaptureTestDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_stillImageCaptureTestDelegate);
  return (CAMViewfinderViewControllerStillImageCaptureRequestTestingDelegate *)WeakRetained;
}

- (void)setStillImageCaptureTestDelegate:(id)a3
{
}

- (CAMViewfinderViewControllerVideoCaptureRequestTestingDelegate)videoCaptureTestDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_videoCaptureTestDelegate);
  return (CAMViewfinderViewControllerVideoCaptureRequestTestingDelegate *)WeakRetained;
}

- (void)setVideoCaptureTestDelegate:(id)a3
{
}

- (CAMViewfinderViewControllerCameraRollTestingDelegate)cameraRollControllerTestDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_cameraRollControllerTestDelegate);
  return (CAMViewfinderViewControllerCameraRollTestingDelegate *)WeakRetained;
}

- (void)setCameraRollControllerTestDelegate:(id)a3
{
}

- (CAMViewfinderViewControllerUnlockDelegate)unlockDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_unlockDelegate);
  return (CAMViewfinderViewControllerUnlockDelegate *)WeakRetained;
}

- (void)setUnlockDelegate:(id)a3
{
}

- (BOOL)automaticallyAdjustsAutorotationStyle
{
  return self->_automaticallyAdjustsAutorotationStyle;
}

- (void)setAutomaticallyAdjustsAutorotationStyle:(BOOL)a3
{
  self->_automaticallyAdjustsAutorotationStyle = a3;
}

- (CAMCameraConfigurationDelegate)configurationDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_configurationDelegate);
  return (CAMCameraConfigurationDelegate *)WeakRetained;
}

- (BOOL)isPerformingTileTransition
{
  return self->_performingTileTransition;
}

- (void)setDisablingMultipleCaptureFeatures:(BOOL)a3
{
  self->_disablingMultipleCaptureFeatures = a3;
}

- (BOOL)isPreventingAdditionalCaptures
{
  return self->_preventingAdditionalCaptures;
}

- (int64_t)imagePickerVideoConfiguration
{
  return self->_imagePickerVideoConfiguration;
}

- (double)maximumVideoRecordingDuration
{
  return self->_maximumVideoRecordingDuration;
}

- (void)setMaximumVideoRecordingDuration:(double)a3
{
  self->_maximumVideoRecordingDuration = a3;
}

- (UIView)customOverlayView
{
  return self->_customOverlayView;
}

- (void)setCustomOverlayView:(id)a3
{
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_customOverlayView, 0);
  objc_destroyWeak((id *)&self->_configurationDelegate);
  objc_storeStrong((id *)&self->_availableCaptureModes, 0);
  objc_destroyWeak((id *)&self->_unlockDelegate);
  objc_destroyWeak((id *)&self->_cameraRollControllerTestDelegate);
  objc_destroyWeak((id *)&self->_videoCaptureTestDelegate);
  objc_destroyWeak((id *)&self->_stillImageCaptureTestDelegate);
  objc_storeStrong((id *)&self->__librarySelectionController, 0);
  objc_storeStrong((id *)&self->__tipManager, 0);
  objc_storeStrong(&self->__cameraRollControllerAction, 0);
  objc_storeStrong((id *)&self->__overlayControls, 0);
  objc_storeStrong((id *)&self->__overlayServiceConnection, 0);
  objc_storeStrong((id *)&self->__openHalfPressSpotlightControls, 0);
  objc_storeStrong((id *)&self->__connectedStorage, 0);
  objc_storeStrong((id *)&self->__analyticsControlDrawerEvent, 0);
  objc_storeStrong((id *)&self->__analyticsSessionEvent, 0);
  objc_storeStrong((id *)&self->__visionAnalyticsSession, 0);
  objc_storeStrong((id *)&self->__cachedTextRegionResults, 0);
  objc_storeStrong((id *)&self->__prominentObjectManager, 0);
  objc_storeStrong((id *)&self->__imageAnalyzer, 0);
  objc_storeStrong((id *)&self->__currentTextAnalysisDetectionEndDate, 0);
  objc_storeStrong((id *)&self->__currentStillImageCaptureTextAnalysisEndDate, 0);
  objc_storeStrong((id *)&self->__currentStillImageCaptureTextAnalysisStateDate, 0);
  objc_storeStrong((id *)&self->__currentStillImageCaptureTextAnalysisIdentifier, 0);
  objc_storeStrong((id *)&self->__textInteractionBackground, 0);
  objc_storeStrong((id *)&self->__cachedAppClipCodeResults, 0);
  objc_storeStrong((id *)&self->__cachedQRCodeResults, 0);
  objc_storeStrong((id *)&self->__machineReadableCodeLoggingController, 0);
  objc_storeStrong((id *)&self->__barcodeParsingSession, 0);
  objc_storeStrong((id *)&self->__filterTypes, 0);
  objc_storeStrong(&self->__filterScrubberLayerContents, 0);
  objc_storeStrong((id *)&self->__feedbackController, 0);
  objc_storeStrong((id *)&self->__accessibilityHUDManagers, 0);
  objc_storeStrong((id *)&self->__disabledModeOverlayView, 0);
  objc_storeStrong((id *)&self->__preferredControlToOpenInDrawerForMode, 0);
  objc_storeStrong((id *)&self->__timerCache, 0);
  objc_storeStrong((id *)&self->__preventConnectionHandoverAssertionController, 0);
  objc_storeStrong((id *)&self->__flashOrTorchUnavailableAlertController, 0);
  objc_storeStrong((id *)&self->__diskSpaceAlertController, 0);
  objc_storeStrong((id *)&self->__torchPatternController, 0);
  objc_storeStrong((id *)&self->__lastTimerIndicatorFaceUpdateDate, 0);
  objc_storeStrong((id *)&self->__synchronizedCaptureTimerDelegate, 0);
  objc_storeStrong((id *)&self->__currentBurstTimer, 0);
  objc_storeStrong((id *)&self->__sharedLibraryLongPressGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__smartStylesSwipeRightGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__smartStylesSwipeLeftGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__nextFilterGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__previousFilterGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__swipeUpGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__swipeDownGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__cameraRollSwipeUpGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__zoomPinchGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__cameraCaseShutterNotifier, 0);
  objc_storeStrong((id *)&self->__physicalButtonInteraction, 0);
  objc_storeStrong((id *)&self->__nextModeGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__previousModeGestureRecognizer, 0);
  objc_destroyWeak((id *)&self->__captureAnimationPreviewOverlay);
  objc_storeStrong((id *)&self->__videoConfigurationStatusIndicator, 0);
  objc_storeStrong((id *)&self->__lightingNameBadge, 0);
  objc_storeStrong((id *)&self->__lightingControl, 0);
  objc_storeStrong((id *)&self->__portraitIntensitySlider, 0);
  objc_storeStrong((id *)&self->__portraitApertureSlider, 0);
  objc_storeStrong((id *)&self->__filterScrubberView, 0);
  objc_storeStrong((id *)&self->__utilityBar, 0);
  objc_storeStrong((id *)&self->__levelViewModel, 0);
  objc_storeStrong((id *)&self->__horizonLevelView, 0);
  objc_storeStrong((id *)&self->__levelView, 0);
  objc_storeStrong((id *)&self->__gridView, 0);
  objc_storeStrong((id *)&self->__zoomControl, 0);
  objc_storeStrong((id *)&self->__zoomSlider, 0);
  objc_storeStrong((id *)&self->__timerIndicatorView, 0);
  objc_storeStrong((id *)&self->__burstIndicatorView, 0);
  objc_storeStrong((id *)&self->__intensityButton, 0);
  objc_storeStrong((id *)&self->__apertureButton, 0);
  objc_storeStrong((id *)&self->__filterButton, 0);
  objc_storeStrong((id *)&self->__imageWell, 0);
  objc_storeStrong((id *)&self->__modeDial, 0);
  objc_storeStrong((id *)&self->__stillDuringVideoButton, 0);
  objc_storeStrong((id *)&self->__dynamicShutterControl, 0);
  objc_storeStrong((id *)&self->__shutterButton, 0);
  objc_storeStrong((id *)&self->__metalContext, 0);
  objc_storeStrong((id *)&self->__smartStyleOnboardingControlDrawerAnimationSequence, 0);
  objc_storeStrong((id *)&self->__descriptionOverlayViewByMode, 0);
  objc_storeStrong((id *)&self->__qrCodeInstructionLabel, 0);
  objc_storeStrong((id *)&self->__portraitModeInstructionLabel, 0);
  objc_storeStrong((id *)&self->__shallowDepthOfFieldBadge, 0);
  objc_storeStrong((id *)&self->__elapsedTimeView, 0);
  objc_storeStrong((id *)&self->__livePhotoBadge, 0);
  objc_storeStrong((id *)&self->__filterNameBadge, 0);
  objc_storeStrong((id *)&self->__doneButton, 0);
  objc_storeStrong((id *)&self->__photosButton, 0);
  objc_storeStrong((id *)&self->__creativeCameraButton, 0);
  objc_storeStrong((id *)&self->__reviewButton, 0);
  objc_storeStrong((id *)&self->__focusAndExposureLockBadge, 0);
  objc_storeStrong((id *)&self->__flipButton, 0);
  objc_storeStrong((id *)&self->__sharedLibraryBadge, 0);
  objc_storeStrong((id *)&self->__sharedLibraryButton, 0);
  objc_storeStrong((id *)&self->__livePhotoButton, 0);
  objc_storeStrong((id *)&self->__timerButton, 0);
  objc_storeStrong((id *)&self->__HDRBadge, 0);
  objc_storeStrong((id *)&self->__HDRButton, 0);
  objc_storeStrong((id *)&self->__flashBadge, 0);
  objc_storeStrong((id *)&self->__flashButton, 0);
  objc_storeStrong((id *)&self->__bottomBar, 0);
  objc_storeStrong((id *)&self->__topBar, 0);
  objc_storeStrong((id *)&self->__transitionController, 0);
  objc_storeStrong((id *)&self->__currentStillImageCaptureMomentSettings, 0);
  objc_storeStrong((id *)&self->__semanticStyles, 0);
  objc_storeStrong((id *)&self->__exposureBiasesByMode, 0);
  objc_storeStrong((id *)&self->__configuredGraphConfiguration, 0);
  objc_storeStrong((id *)&self->__currentGraphConfiguration, 0);
  objc_storeStrong((id *)&self->__timelapseAnalyticsEvent, 0);
  objc_storeStrong((id *)&self->__storageMonitor, 0);
  objc_storeStrong((id *)&self->__storageController, 0);
  objc_storeStrong((id *)&self->__powerController, 0);
  objc_storeStrong((id *)&self->__keepAliveController, 0);
  objc_storeStrong((id *)&self->__remoteShutterController, 0);
  objc_storeStrong((id *)&self->__timelapseController, 0);
  objc_storeStrong((id *)&self->__motionController, 0);
  objc_storeStrong((id *)&self->__locationController, 0);
  objc_storeStrong((id *)&self->__callStatusMonitor, 0);
  objc_storeStrong((id *)&self->__disabledPreviewController, 0);
  objc_storeStrong((id *)&self->__closedViewfinderController, 0);
  objc_storeStrong((id *)&self->__idleController, 0);
  objc_storeStrong((id *)&self->__cameraRollController, 0);
  objc_storeStrong((id *)&self->__panoramaViewController, 0);
  objc_storeStrong((id *)&self->__previewViewController, 0);
  objc_storeStrong((id *)&self->__captureController, 0);
  objc_destroyWeak((id *)&self->_creativeCameraDelegate);
  objc_destroyWeak((id *)&self->_reviewButtonSource);
}

- (void)_commitCTMCaptureWithType:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Commit CTM Capture called with capture type None", v2, v3, v4, v5, v6);
}

- (void)_commitCTMCaptureWithType:.cold.2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Did not find cached initiation settings for %{public}@ gesture", v2, v3, v4, v5, v6);
}

- (void)_initiateCTMCaptureWithCurrentSettingsAtSystemTime:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Tried to initiate CTM capture before canceling or commiting previous capture! Forcibly canceling last capture.", v2, v3, v4, v5, v6);
}

- (void)stillImageRequestDidCompleteStillImageLocalPersistence:withResponse:error:.cold.1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Photo capture failed due to insufficient disk space. The storage controller reports %{public}@ disk space.", v2, v3, v4, v5, v6);
}

- (void)_startCapturingVideoWithRequest:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "External storage: failed to capture to external storage since no destination URL was set", v2, v3, v4, v5, v6);
}

- (void)_startCapturingPanoramaWithRequest:.cold.1()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_2099F8000, v0, v1, "Failed to start panorama capture for request %{public}@ (%{public}@)");
}

- (void)panoramaRequestDidStartCapturing:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Started tracking a new panorama analytics capture event before clearing the last one! panoramaRequestDidStartCapturing was called twice before panoramaRequestDidStopCapturing", v2, v3, v4, v5, v6);
}

void __64__CAMViewfinderViewController__handleImageAnalysisButtonTapped___block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Error performing single-item action: %{public}@", v2, v3, v4, v5, v6);
}

- (void)_setWantsVisualTextAnalysis:animated:.cold.1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Failed to capture photo for text analysis: %{public}@", v2, v3, v4, v5, v6);
}

- (void)_handleTextAnalysisStillImageResponse:error:forRequest:.cold.1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "No image received for text analysis: %{public}@", v2, v3, v4, v5, v6);
}

- (void)_stillImageCaptureRequestForTextAnalysis
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Attempting to analyze text without a selected text region!", v2, v3, v4, v5, v6);
}

- (void)request:didFailWithError:.cold.1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Image analysis failed: %{public}@", v2, v3, v4, v5, v6);
}

void __66__CAMViewfinderViewController__handlePillPressForCurrentMRCAction__block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Failed to perform action for MRC: %{public}@", v2, v3, v4, v5, v6);
}

- (void)actionDidUpdateTitle:.cold.1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Expecting class type of BCSAction for action: %{public}@", v2, v3, v4, v5, v6);
}

- (void)_handleSmartStyleIntensitySliderChangedValue:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "_currentSmartStyle was nil when slider2D was changed.", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidShortPress:.cold.1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to short press capture in a mode that doesn't support it: %{public}@", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidStart:withGesture:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to start timer countdown for portrait capture without available timer", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidStart:withGesture:.cold.2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to start video capture with video capture already in progress", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidStart:withGesture:.cold.3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to start pano capture with pano capture already in progress", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidStart:withGesture:.cold.4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to start timelapse capture with timelapse capture already in progress", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidStop:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to stop timer countdown for portrait capture with a timer capture in progress", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidStop:.cold.2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to stop video capture with no video capture in progress", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidStop:.cold.3()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to stop pano capture with no pano capture in progress", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidStop:.cold.4()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to stop timelapse capture with no timelapse capture in progress", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidPressLockButton:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to capture still during video with no CTM video capture in progress", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidPressLockButton:.cold.2()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to capture still during video with no video capture in progress", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidPressLockButton:.cold.3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to capture still during video in a mode that doesn't support it: %{public}@", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidPressPauseResumeButton:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Dynamic Shutter: Attempted to pause video while not recording video", v2, v3, v4, v5, v6);
}

- (void)dynamicShutterControlDidPressPauseResumeButton:(void *)a1 .cold.2(void *a1)
{
  [a1 _currentMode];
  OUTLINED_FUNCTION_0(&dword_2099F8000, v1, v2, "Dynamic Shutter: Attempted pause video in a mode that doesn't support it: %{public}@", v3, v4, v5, v6, 2u);
}

- (void)dynamicShutterControlDidPresentCounter:.cold.1()
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Expected to cancel touch-down initiation settings when burst starts", v2, v3, v4, v5, v6);
}

- (void)_startCapturingBurstWithRequest:.cold.1()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_2099F8000, v0, v1, "Failed to start capturing a burst with request %{public}@ (%{public}@)");
}

void __69__CAMViewfinderViewController__apertureSliderDidChangeApertureValue___block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Failed sending aperture %{public}@", v2, v3, v4, v5, v6);
}

void __67__CAMViewfinderViewController__handleExposureSliderDidChangeValue___block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Failed sending exposure %{public}@", v2, v3, v4, v5, v6);
}

void __107__CAMViewfinderViewController__changeToZoomFactor_rampDuration_zoomRampTuning_shouldAnimate_updateOverlay___block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "%{public}@", v2, v3, v4, v5, v6);
}

- (void)_handleApplicationWillAddDeactivationReason:.cold.1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Not handling unexpected deactivation reason: %{public}@", v2, v3, v4, v5, v6);
}

- (void)_availableDefaultCaptureMode
{
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_1(&dword_2099F8000, v0, v1, "Attempting to find an available capture mode, but there are no available capture modes!", v2, v3, v4, v5, v6);
}

void __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_2099F8000, v0, v1, "Failed to unlock: %{public}@", v2, v3, v4, v5, v6);
}

@end